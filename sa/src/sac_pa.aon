rem --- Retrieve Sales Analysis Control Parameters
rem --- Program sac_pa v8.0.0 25Jul2007 (sac_pa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/25/2007 04:19:05)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --------------------------------------------------------------------------------

rem --- ACTION        : Specifies which sales analysis to perform (Input)
rem --- 1 = sam-01  Customer      Product    Item
rem --- 2 = sam-02  Territory     Product    Item
rem --- 3 = sam-03  Salesperson   Product    Item
rem --- 4 = sam-04  Cust Type     Product    Item
rem --- 5 = sam-05  Customer      Ship-To    Item
rem --- 6 = sam-06  SIC           Product    Item
rem --- 7 = sam-07  Product       Item
rem --- 8 = sam-08  Warehouse     Product    Item
rem --- 9 = sam-09  Vendor        Product    Item
rem --- 10 = sam-10  Dist Code     Product    Item
rem --- 11 = sam-11  Product       Non-Stock
rem --- 12 = sam-12  Territory     Customer   Product
rem --- >20 = use alternate key
rem --- N0$           : Firm ID (Input)
rem --- LEVEL$        : Report detail level (Input)
rem --- SEGMENTS      : Number of key segments to use (Returned)
rem --- LEVELS$[n]    : Character designation of detail levels (Returned)
rem --- LITERALS$[n]  : Screen literals to display (Returnd)
rem --- TYPES$[n]     : V0$ field types (Returned)
rem --- IMASKS$[n]    : V3$ field input masks (Returned)
rem --- OMASKS$[n]    : Output display masks (Returned)
rem --- PROMPTS$[n]   : V4$ field prompts to display (Returned)
rem --- INLEN[n]      : Number of characters in input field (Returned)
rem --- FLDLEN[n]     : Length of key segment (Returned)
rem --- DESCCHAN[n]   : Channel of file to obtain description (Returned)
rem --- DESCREC$[n]   : ID of record to obtain description (Returned)
rem --- DESCTPL$[n]   : Record template for file to obtain description (Returned)
rem --- DESCFIELD$[n] : Description field name in record template for file to obtain description (Returned)
rem --- SA_CHANNELS[n]: Channels of Sales Analysis files (Returned)
rem --- [1]=SAM-xx file   [2]=SAM-xx cross reference file
rem --- KEYLEN        : Key length of SAM-xx record (Returned)
rem --- XREFS[n]      : Segment position in cross reference file (Returned)
rem --- FY$           : Current Sales Analysis fiscal year (Returned)
rem --- PERIODS       : Number of fiscal periods (Returned)
rem --- PERIODS$[x]   : Abbreviated period names (Returned)
rem --- IV_MASKS$[y]  : Inventory parameter masks (Returned)
rem --- [1] = Amount   [2] = Unit   [3] = Cost
rem --- IV_DESC[z]    : Inventory item description parameters (Returned)
rem --- [0]        = Item number length
rem --- [1] to [3] = Description segment lengths
rem --- IVM14_DEV     : ivm-14 channel (Returned)
rem --- STATUS        : Status Code (0 = No Errors) (Returned)

    setesc std_error
    seterr std_error
    enter action,firm_id$,level$,segments,levels$[all],literals$[all],types$[all],imasks$[all],omasks$[all],prompts$[all],inlen[all],fldlen[all],descchan[all],descrec$[all],desctpl$[all],descfield$[all],sa_channels[all],keylen,xrefs[all],fy$,periods,periods$[all],iv_masks$[all],iv_desc[all],ivm14_dev,status

rem --- Get Translator Object

    use ::bbtranslator.bbj::BBTranslator
    declare BBTranslator Translate!
    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif

rem --- Retrieve the program paths

    pgmdir$=stbl("+DIR_PGM",err=*next)    

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

	num_files=7
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="APS_PARAMS",open_opts$[1]="OTA"
	open_tables$[2]="ARS_PARAMS",open_opts$[2]="OTA"
	open_tables$[3]="GLS_CALENDAR",open_opts$[3]="OTA"
	open_tables$[4]="IVS_PARAMS",open_opts$[4]="OTA"
	open_tables$[5]="SAS_PARAMS",open_opts$[5]="OTA"
	open_tables$[6]="IVM_ITEMSYN",open_opts$[6]="OTA"
	open_tables$[7]="DDM_ELEMENTS",open_opts$[7]="OTA"
	gosub open_tables

	dim open_tables$[1:num_files],open_opts$[1:num_files]
    aps01_dev=num(open_chans$[1])
    ars01_dev=num(open_chans$[2])
    gls_calendar_dev=num(open_chans$[3])
    ivs01_dev=num(open_chans$[4])
    sas01_dev=num(open_chans$[5])
    ivm14_dev=num(open_chans$[6])
	ddm_elements_dev=num(open_chans$[7])

rem --- Dimension string templates

    dim aps01a$:open_tpls$[1],ars01a$:open_tpls$[2],gls_calendar$:open_tpls$[3]
    dim ivs01a$:open_tpls$[4],sas01a$:open_tpls$[5],ivm14a$:open_tpls$[6]
	dim ddm_elements$:open_tpls$[7]

rem --- Parameters

    saopts=11
    dim sap1$(saopts),sap2$(saopts),arp2$(6),arp4$(4),glp2$(10),glp3$(13*25),ivp2$(53)
    find record (sas01_dev,key=firm_id$+"SA00",dom=std_missing_params) sas01a$
    find record (ars01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
    find record (gls_calendar_dev,key=firm_id$+ars01a.current_year$,dom=std_missing_params) gls_calendar$
    find record (ivs01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    if action=9 find record (aps01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$

	default_len=2,field_name$="FIRM_ID";gosub get_length;firm_len=default_len

rem --- Initializations

    xrefs[1]=1
    xrefs[2]=2
    xrefs[3]=3
    xrefs[4]=4

    fy$=ars01a.current_year$
    periods=num(gls_calendar.total_pers$)
    for x=1 to periods
        if x=1 periods$[x]=gls_calendar.abbr_name_01$
        if x=2 periods$[x]=gls_calendar.abbr_name_02$
        if x=3 periods$[x]=gls_calendar.abbr_name_03$
        if x=4 periods$[x]=gls_calendar.abbr_name_04$
        if x=5 periods$[x]=gls_calendar.abbr_name_05$
        if x=6 periods$[x]=gls_calendar.abbr_name_06$
        if x=7 periods$[x]=gls_calendar.abbr_name_07$
        if x=8 periods$[x]=gls_calendar.abbr_name_08$
        if x=9 periods$[x]=gls_calendar.abbr_name_09$
        if x=10 periods$[x]=gls_calendar.abbr_name_10$
        if x=11 periods$[x]=gls_calendar.abbr_name_11$
        if x=12 periods$[x]=gls_calendar.abbr_name_12$
        if x=13 periods$[x]=gls_calendar.abbr_name_13$        
    next x
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m1$,0,m1
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m2$,0,m2
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","P","",m3$,0,m3
    iv_masks$[1]=m1$
    iv_masks$[2]=m2$
    iv_masks$[3]=m3$
    iv_desc[0]=ivs01a.item_id_len
    iv_desc[1]=num(ivs01a.desc_len_01$)
    iv_desc[2]=num(ivs01a.desc_len_02$)
    iv_desc[3]=num(ivs01a.desc_len_03$)

rem --- Which Sales Analysis?

    on mod(action,20) goto bad_stat,by_cust,by_terr,by_sls,by_custtype,by_custship,
:                          by_sic,by_prod,by_whse,by_vend,by_dist,by_nonstock,
:                          by_terr_cust,bad_stat

by_cust: rem --- (Action = 1 & 21) Customer/Product/Item

    if mod(action,20)=1 if sas01a.by_customer$<>"Y" exitto not_avail            
    if action=1 then
        levels$[1]="C"
        levels$[2]="P"
        levels$[3]="I"
        segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
        literals$[1]=Translate!.getTranslation("AON_CUSTOMER")
        literals$[2]=Translate!.getTranslation("AON_PRODUCT_TYPE")
        literals$[3]=Translate!.getTranslation("AON_ITEM")
        types$[1]="M"
        types$[2]="S"
        types$[3]="S"
		call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",amount_mask$,0,amount_len
		call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",customer_output$,0,customer_len
        imasks$[1]=amount_mask$
        imasks$[2]=""
        imasks$[3]=""
        omasks$[1]=customer_output$
        omasks$[2]=""
        omasks$[3]=""
        for x=1 to segments
            prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
        next x
		default_len=6,field_name$="CUSTOMER_ID";gosub get_length
        inlen[1]=default_len
		default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
        inlen[2]=default_len
		default_len=20,field_name$="ITEM_ID";gosub get_length
        inlen[3]=default_len
		fldlen[1]=inlen[1]
		fldlen[2]=inlen[2]
        fldlen[3]=inlen[3]
        keylen=6+fldlen[1]+fldlen[2]+fldlen[3]
        open_tables$[1]="ARM_CUSTMAST",open_opts$[1]="OTA"
        open_tables$[2]="IVC_PRODCODE",open_opts$[2]="OTA"
        open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
        descrec$[1]=""
        descrec$[2]="A"
        descrec$[3]=""
        descfield$[1]="CUSTOMER_NAME"
        descfield$[2]="CODE_DESC"
        descfield$[3]="ITEM_DESC"
        goto done
    else
        levels$[3]="C"
        levels$[1]="P"
        levels$[2]="I"
        segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
        literals$[3]=Translate!.getTranslation("AON_CUSTOMER")
        literals$[1]=Translate!.getTranslation("AON_PRODUCT_TYPE")
        literals$[2]=Translate!.getTranslation("AON_ITEM")
        types$[3]="M"
        types$[1]="S"
        types$[2]="S"
		call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",amount_mask$,0,amount_len
		call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",customer_output$,0,customer_len
        imasks$[3]=amount_mask$
        imasks$[1]=""
        imasks$[2]=""
        omasks$[3]=customer_output$
        omasks$[1]=""
        omasks$[2]=""
        for x=1 to segments
            prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
        next x
		default_len=6,field_name$="CUSTOMER_ID";gosub get_length
        inlen[3]=default_len
		default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
        inlen[1]=default_len
		default_len=20,field_name$="ITEM_ID";gosub get_length
		inlen[2]=default_len
        fldlen[3]=inlen[3]
        fldlen[1]=inlen[1]
        fldlen[2]=inlen[2]
        keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]
        open_tables$[3]="ARM_CUSTMAST",open_opts$[3]="OTA"
        open_tables$[1]="IVC_PRODCODE",open_opts$[1]="OTA"
        open_tables$[2]="IVM_ITEMMAST",open_opts$[2]="OTA"
        descrec$[3]=""
        descrec$[1]="A"
        descrec$[2]=""
        descfield$[3]="CUSTOMER_NAME"
        descfield$[1]="CODE_DESC"
        descfield$[2]="ITEM_DESC"
        xrefs[3]=3
        xrefs[1]=1
        xrefs[2]=2
        goto done
    endif
    
by_terr: rem --- (Action = 2) Territory/Product/Item

    if mod(action,20)=2 if sas01a.by_territory$<>"Y" exitto not_avail        
    levels$[1]="T"
    levels$[2]="P"
    levels$[3]="I"
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])    
    literals$[1]=Translate!.getTranslation("AON_TERRITORY")
    literals$[2]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    literals$[3]=Translate!.getTranslation("AON_ITEM")
    types$[1]="S"
    types$[2]="S"
    types$[3]="S"
    imasks$[1]=""
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=""
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=3,field_name$="TERRITORY";gosub get_length
    inlen[1]=default_len
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    inlen[2]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length	
    inlen[3]=default_len
    fldlen[1]=inlen[1]
    fldlen[2]=inlen[2]
    fldlen[3]=inlen[3]
    keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]
    open_tables$[1]="ARC_TERRCODE",open_opts$[1]="OTA"
    open_tables$[2]="IVC_PRODCODE",open_opts$[2]="OTA"
    open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
    descrec$[1]="H"
    descrec$[2]="A"
    descrec$[3]=""
    descfield$[1]="CODE_DESC"
    descfield$[2]="CODE_DESC"
    descfield$[3]="ITEM_DESC"
    goto done

by_sls: rem --- (Action = 3) Salesperson/Product/Item

    if mod(action,20)=3 if sas01a.by_salespsn$<>"Y" exitto not_avail    
    levels$[1]="S"
    levels$[2]="P"
    levels$[3]="I"
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])    
    literals$[1]=Translate!.getTranslation("AON_SALESPERSON")
    literals$[2]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    literals$[3]=Translate!.getTranslation("AON_ITEM")
    types$[1]="S"
    types$[2]="S"
    types$[3]="S"
    imasks$[1]=""
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=""
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=3,field_name$="SLSPSN_CODE";gosub get_length
    inlen[1]=default_len
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    inlen[2]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length
    inlen[3]=default_len
    fldlen[1]=inlen[1]
    fldlen[2]=inlen[2]
    fldlen[3]=inlen[3]
    keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]
    open_tables$[1]="ARC_SALECODE",open_opts$[1]="OTA"
    open_tables$[2]="IVC_PRODCODE",open_opts$[2]="OTA"
    open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
    descrec$[1]="F"
    descrec$[2]="A"
    descrec$[3]=""
    descfield$[1]="CODE_DESC"
    descfield$[2]="CODE_DESC"
    descfield$[3]="ITEM_DESC"
    goto done

by_custtype: rem --- (Action = 4) Customer Type/Product/Item

    if mod(action,20)=1 if sas01a.by_customer_type$<>"Y" exitto not_avail
    levels$[1]="C"
    levels$[2]="P"
    levels$[3]="I"
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
    literals$[1]=Translate!.getTranslation("AON_CUSTOMER_TYPE")
    literals$[2]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    literals$[3]=Translate!.getTranslation("AON_ITEM")
    types$[1]="S"
    types$[2]="S"
    types$[3]="S"
    imasks$[1]=""
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=""
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=3,field_name$="CUSTOMER_TYPE";gosub get_length
    inlen[1]=default_len
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    inlen[2]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length
    inlen[3]=default_len
    fldlen[1]=inlen[1]
    fldlen[2]=inlen[2]
    fldlen[3]=inlen[3]
    keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]
    open_tables$[1]="ARC_CUSTTYPE",open_opts$[1]="OTA"
    open_tables$[2]="IVC_PRODCODE",open_opts$[2]="OTA"
    open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
    descrec$[1]="L"
    descrec$[2]="A"
    descrec$[3]=""
    descfield$[1]="CODE_DESC"
    descfield$[2]="CODE_DESC"
    descfield$[3]="ITEM_DESC"
    goto done

by_custship: rem --- (Action = 5) Customer/Ship-to/Item

    if mod(action,20)=5 if sas01a.by_shipto$<>"Y" exitto not_avail    
    levels$[1]="C"
    levels$[2]="S"
    levels$[3]="I"
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
    literals$[1]=Translate!.getTranslation("AON_CUSTOMER")
    literals$[2]=Translate!.getTranslation("AON_CUSTOMER_SHIP-TO")
    literals$[3]=Translate!.getTranslation("AON_ITEM")
    types$[1]="M"
    types$[2]="Z"
    types$[3]="S"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",amount_mask$,0,amount_len
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",customer_output$,0,customer_len
    imasks$[1]=amount_mask$
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=customer_output$
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=6,field_name$="CUSTOMER_ID";gosub get_length
    inlen[1]=default_len
	default_len=6,field_name$="SHIPTO_NO";gosub get_length
    inlen[2]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length
    inlen[3]=default_len
    fldlen[1]=inlen[1]
    fldlen[2]=inlen[2]
    fldlen[3]=inlen[3]
    keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]
    open_tables$[1]="ARM_CUSTMAST",open_opts$[1]="OTA"
    open_tables$[2]="ARM_CUSTSHIP",open_opts$[2]="OTA"
    open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
    descrec$[1]=""
    descrec$[2]=""
    descrec$[3]=""
    descfield$[1]="CUSTOMER_NAME"
    descfield$[2]="NAME"
    descfield$[3]="ITEM_DESC"
    goto done

by_sic: rem --- (Action = 6) SIC/Product/Item

    if mod(action,20)=6 if sas01a.by_sic_code$<>"Y" exitto not_avail
    levels$[1]="C"
    levels$[2]="P"
    levels$[3]="I"
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
    literals$[1]="SIC"
    literals$[2]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    literals$[3]=Translate!.getTranslation("AON_ITEM")
    types$[1]="S"
    types$[2]="S"
    types$[3]="S"
    imasks$[1]=""
    imasks$[2]=""
    imasks$[3]=""
    omasks$[1]=""
    omasks$[2]=""
    omasks$[3]=""
    for x=1 to segments
        prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=8,field_name$="SIC_CODE";gosub get_length
    inlen[1]=default_len
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    inlen[2]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length
    inlen[3]=default_len
    fldlen[1]=inlen[1]
    fldlen[2]=inlen[2]
    fldlen[3]=inlen[3]
    keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]
    open_tables$[1]=""
    open_tables$[2]="IVC_PRODCODE",open_opts$[2]="OTA"
    open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
    descrec$[1]=""
    descrec$[2]="A"
    descrec$[3]=""
    descfield$[1]="none"
    descfield$[2]="CODE_DESC"
    descfield$[3]="ITEM_DESC"
    goto done

by_prod: rem --- (Action = 7) Product/Item

    if mod(action,20)=7 if sas01a.by_product$<>"Y" exitto not_avail
    levels$[1]="P"
    levels$[2]="I"
    levels$[3]=""
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
    literals$[1]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    literals$[2]=Translate!.getTranslation("AON_ITEM")
    types$[1]="S"
    types$[2]="S"
    imasks$[1]=""
    imasks$[2]=""
    omasks$[1]=""
    omasks$[2]=""
    for x=1 to segments
        let prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    let inlen[1]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length
    let inlen[2]=default_len
    let fldlen[1]=inlen[1]
    let fldlen[2]=inlen[2]
    let keylen=firm_len+4+fldlen[1]+fldlen[2]
    let open_tables$[1]="IVC_PRODCODE",open_opts$[1]="OTA"
    let open_tables$[2]="IVM_ITEMMAST",open_opts$[2]="OTA"
    let open_tables$[3]=""
    let descrec$[1]="A"
    let descrec$[2]=""
    descfield$[1]="CODE_DESC"
    descfield$[2]="ITEM_DESC"
    descfield$[3]="none"
    goto done

by_whse: rem --- (Action = 8) Warehouse/Product/Item

    if mod(action,20)=8 if sas01a.by_whse$<>"Y" exitto not_avail
    let levels$[1]="W"
    let levels$[2]="P"
    let levels$[3]="I"
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
    let literals$[1]=Translate!.getTranslation("AON_WAREHOUSE")
    let literals$[2]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    let literals$[3]=Translate!.getTranslation("AON_ITEM")
    let types$[1]="S"
    let types$[2]="S"
    let types$[3]="S"
    let imasks$[1]=""
    let imasks$[2]=""
    let imasks$[3]=""
    let omasks$[1]=""
    let omasks$[2]=""
    let omasks$[3]=""
    for x=1 to segments
        let prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=2,field_name$="WAREHOUSE_ID";gosub get_length
    let inlen[1]=default_len
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    let inlen[2]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length
    let inlen[3]=default_len
    let fldlen[1]=inlen[1]
    let fldlen[2]=inlen[2]
    let fldlen[3]=inlen[3]
    let keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]
    let open_tables$[1]="IVC_WHSECODE",open_opts$[1]="OTA"
    let open_tables$[2]="IVC_PRODCODE",open_opts$[2]="OTA"
    let open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
    let descrec$[1]="C"
    let descrec$[2]="A"
    let descrec$[3]=""
    descfield$[1]="SHORT_NAME"
    descfield$[2]="CODE_DESC"
    descfield$[3]="ITEM_DESC"
    goto done

by_vend: rem --- (Action = 9) Vendor/Product/Item

    if mod(action,20)=9 if sas01a.by_vendor$<>"Y" exitto not_avail
    let levels$[1]="V"
    let levels$[2]="P"
    let levels$[3]="I"
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
    let literals$[1]=Translate!.getTranslation("AON_VENDOR")
    let literals$[2]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    let literals$[3]=Translate!.getTranslation("AON_ITEM")
    let types$[1]="M"
    let types$[2]="S"
    let types$[3]="S"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","A","",amount_mask$,0,amount_len
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vendor_output$,0,vendor_len
    let imasks$[1]=amount_mask$
    let imasks$[2]=""
    let imasks$[3]=""
    let omasks$[1]=vendor_output$
    let omasks$[2]=""
    let omasks$[3]=""
    for x=1 to segments
        let prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=6,field_name$="VENDOR_ID";gosub get_length
    let inlen[1]=default_len
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    let inlen[2]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length
    let inlen[3]=default_len
    let fldlen[1]=inlen[1]
    let fldlen[2]=inlen[2]
    let fldlen[3]=inlen[3]
    let keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]
    let open_tables$[1]="APM_VENDMAST",open_opts$[1]="OTA"
    let open_tables$[2]="IVC_PRODCODE",open_opts$[2]="OTA"
    let open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
    let descrec$[1]=""
    let descrec$[2]="A"
    let descrec$[3]=""
    descfield$[1]="VENDOR_NAME"
    descfield$[2]="CODE_DESC"
    descfield$[3]="ITEM_DESC"
    goto done

by_dist: rem --- (Action = 10) Dist Code/Product/Item

    if mod(action,20)=10 if sas01a.by_dist_code$<>"Y" exitto not_avail
    let levels$[1]="D"
    let levels$[2]="P"
    let levels$[3]="I"
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
    let literals$[1]=Translate!.getTranslation("AON_DISTRIBUTION_CODE")
    let literals$[2]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    let literals$[3]=Translate!.getTranslation("AON_ITEM")
    let types$[1]="S"
    let types$[2]="S"
    let types$[3]="S"
    let imasks$[1]=""
    let imasks$[2]=""
    let imasks$[3]=""
    let omasks$[1]=""
    let omasks$[2]=""
    let omasks$[3]=""
    for x=1 to segments
        let prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=2,field_name$="AR_DIST_CODE";gosub get_length
    let inlen[1]=default_len
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    let inlen[2]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length
    let inlen[3]=default_len
    let fldlen[1]=inlen[1]
    let fldlen[2]=inlen[2]
    let fldlen[3]=inlen[3]
    let keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]
    let open_tables$[1]="ARC_DISTCODE",open_opts$[1]="OTA"
    let open_tables$[2]="IVC_PRODCODE",open_opts$[2]="OTA"
    let open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
    let descrec$[1]="D"
    let descrec$[2]="A"
    let descrec$[3]=""
    descfield$[1]="CODE_DESC"
    descfield$[2]="CODE_DESC"
    descfield$[3]="ITEM_DESC"
    goto done

by_nonstock: rem --- (Action = 11) Product/Non-stock

    if mod(action,20)=11 if sas01a.by_nonstock$<>"Y" exitto not_avail
    let levels$[1]="P"
    let levels$[2]="N"
    let levels$[3]=""
    segments=pos(level$=levels$[1]+levels$[2]+levels$[3])
    let literals$[1]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    let literals$[2]=Translate!.getTranslation("AON_NON-STOCK_ITEM")
    let types$[1]="S"
    let types$[2]="S"
    let imasks$[1]=""
    let imasks$[2]=""
    let omasks$[1]=""
    let omasks$[2]=""
    for x=1 to segments
        let prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    let inlen[1]=default_len
	default_len=40,field_name$="NONSTOCK_NO";gosub get_length
    let inlen[2]=default_len
    let fldlen[1]=inlen[1]
    let fldlen[2]=inlen[2]
    let open_tables$[1]="IVC_PRODCODE",open_opts$[1]="OTA"
    let open_tables$[2]=""
    let open_tables$[3]=""
    let keylen=firm_len+4+fldlen[1]+fldlen[2]
    descfield$[1]="CODE_DESC"
    descfield$[2]="none"
    descfield$[3]="none"
    goto done

by_terr_cust: rem --- (Action = 12) Territory/Customer/Product/Item

    if mod(action,20)=1 if sas01a.by_customer$<>"Y" exitto not_avail
    let levels$[1]="T"
    let levels$[2]="C"
    let levels$[3]="P"
    let levels$[4]="I"
    let segments=pos(sas01a.customer_lev$=levels$[1]+levels$[2]+levels$[3]+levels$[4])
    let literals$[1]=Translate!.getTranslation("AON_TERRITORY")
    let literals$[2]=Translate!.getTranslation("AON_CUSTOMER")
    let literals$[3]=Translate!.getTranslation("AON_PRODUCT_TYPE")
    let literals$[4]=Translate!.getTranslation("AON_ITEM")
    let types$[1]="S"
    let types$[2]="M"
    let types$[3]="S"
    let types$[4]="S"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",amount_mask$,0,amount_len
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",customer_output$,0,customer_len
    let imasks$[1]=""
    let imasks$[2]=amount_mask$
    let imasks$[3]=""
    let imasks$[4]=""
    let omasks$[1]=""
    let omasks$[2]=customer_output$
    let omasks$[3]=""
    let omasks$[4]=""
    for x=1 to segments
        let prompts$[x]=Translate!.getTranslation("AON_ENTER_VALID_")+literals$[x]
    next x
	default_len=3,field_name$="TERRITORY";gosub get_length
    let inlen[1]=default_len
	default_len=6,field_name$="CUSTOMER_ID";gosub get_length
    let inlen[2]=default_len
	default_len=3,field_name$="PRODUCT_TYPE";gosub get_length
    let inlen[3]=default_len
	default_len=20,field_name$="ITEM_ID";gosub get_length
    let inlen[4]=default_len
    let fldlen[1]=inlen[1]
    let fldlen[2]=inlen[2]
    let fldlen[3]=inlen[3]
    let fldlen[4]=inlen[4]
    let keylen=firm_len+4+fldlen[1]+fldlen[2]+fldlen[3]+fldlen[4]
    let open_tables$[1]="ARC_TERRCODE",open_opts$[1]="OTA"
    let open_tables$[2]="ARM_CUSTMAST",open_opts$[2]="OTA"
    let open_tables$[3]="IVC_PRODCODE",open_opts$[3]="OTA"
    let open_tables$[4]="IVM_ITEMMAST",open_opts$[4]="OTA"
    let descrec$[1]="H"
    let descrec$[2]=""
    let descrec$[3]="A"
    let descrec$[4]=""
    descfield$[1]="CODE_DESC"
    descfield$[2]="CUSTOMER_NAME"
    descfield$[3]="CODE_DESC"
    descfield$[4]="ITEM_DESC"
    goto done

done: rem --- Open Sales Analysis File(s)

	dim open_chans$[1:num_files],open_tpls$[1:num_files]
	gosub open_tables

    for i=1 to 4
        descchan[i]=num(open_chans$[i])
        if len(cvs(open_tpls$[i],2))=0 then open_tpls$[i]="none:c(1*)"
        desctpl$[i]=open_tpls$[i]
    next i

rem --- All Done

    goto std_exit

not_avail: rem --- Selected Sales Analysis Not Available

    let number=1
    dim message$[number]
    let message$[0]=Translate!.getTranslation("AON_THIS_SALES_ANALYSIS_IS_CURRENTLY_NOT_AVAILABLE.")
    let message$[1]=Translate!.getTranslation("AON____________<ENTER>_=_CONTINUE")
    call pgmdir$+"adc_stdmessage.aon",3,message$[all],number,-1,-1,v$,v3

bad_stat: rem --- Return STATUS = ERR

    let status=err
    if status=0 status=999
    goto std_exit

get_length: rem --- Return length of field from ddm_elements

	dim ddm_elements$:fattr(ddm_elements$)
	ddm_elements.dd_data_length=default_len
	read record(ddm_elements_dev,key=pad(field_name$,16),dom=*next)ddm_elements$
	default_len=ddm_elements.dd_data_length

	return

open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

	num_files=7
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="APS_PARAMS",open_opts$[1]="C"
	open_tables$[2]="ARS_PARAMS",open_opts$[2]="C"
	open_tables$[3]="GLS_PARAMS",open_opts$[3]="C"
	open_tables$[4]="IVS_PARAMS",open_opts$[4]="C"
	open_tables$[5]="SAS_PARAMS",open_opts$[5]="C"
	open_tables$[6]="IVM_ITEMSYN",open_opts$[6]="C"
	open_tables$[7]="DDM_ELEMENTS",open_opts$[7]="C"
	gosub open_tables

    exit
rem #endinclude std_exit.src

    end
