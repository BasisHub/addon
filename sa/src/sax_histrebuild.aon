rem --- Rebuild Sales Analysis From Invoice History
rem --- Program sax_histrebuild.aon

rem --- AddonSoftware Version 15.00 - Apr2015
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    
rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Get form input values identifying which types of sales analysis to rebuild

    typeSA!=new java.util.HashMap()
    typeSA!.put("BY_CUSTOMER",option!.getOptionData("BY_CUSTOMER")) 
    typeSA!.put("BY_TERRITORY",option!.getOptionData("BY_TERRITORY"))
    typeSA!.put("BY_SALESPSN",option!.getOptionData("BY_SALESPSN"))
    typeSA!.put("BY_CUSTOMER_TYPE",option!.getOptionData("BY_CUSTOMER_TYPE"))
    typeSA!.put("BY_SHIPTO",option!.getOptionData("BY_SHIPTO"))
    typeSA!.put("BY_SIC_CODE",option!.getOptionData("BY_SIC_CODE"))
    typeSA!.put("BY_PRODUCT",option!.getOptionData("BY_PRODUCT"))
    typeSA!.put("BY_WHSE",option!.getOptionData("BY_WHSE"))
    typeSA!.put("BY_VENDOR",option!.getOptionData("BY_VENDOR"))
    typeSA!.put("BY_DIST_CODE",option!.getOptionData("BY_DIST_CODE"))
    typeSA!.put("BY_NONSTOCK",option!.getOptionData("BY_NONSTOCK"))

rem --- Rebuild Sales Analysis for current firm

    theFirm$=firm_id$
    call pgmdir$+"sac_histrebuild.aon",theFirm$,typeSA!,status

done: rem --- All done

    goto std_exit

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
