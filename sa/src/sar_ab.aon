rem --- Generic Sales Analysis Report Selection
rem --- Program sar_ab v8.0.0 23Jul2007 (sar_ab)
rem --- Created by adx_codeport.bbx v1.1.5 (07/23/2007 02:12:06)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Check for valid MYP variable

    if myp$ = "P" 	
        MSG_ID$="SA_PRIOR_INVALID"
        gosub disp_message
        goto std_exit
    endif

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)    

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-02",ids$[1]="ARM_CUSTDET"
    files$[2]="ivm-14",ids$[2]="IVM_ITEMSYN"
    files$[3]="sam-01",ids$[3]="SAM_CUSTOMER"
    files$[4]="sas_params",ids$[4]="SAS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm02_dev=channels[1]
    ivm14_dev=channels[2]
    sam01_dev=channels[3]
    sas01_dev=channels[4]

rem --- Dimension string templates

    dim arm02a$:templates$[1],ivm14a$:templates$[2],sam01a$:templates$[3]
    dim sas01a$:templates$[4]

rem --- Parameters

    nmbr=4
    dim levels$[nmbr],literals$[nmbr],types$[nmbr],imasks$[nmbr],omasks$[nmbr],prompts$[nmbr],inlen[nmbr],fldlen[nmbr]
    dim descchan[nmbr],descrec$[nmbr],descstr[nmbr],descpos[nmbr],desclen[nmbr]
    dim sa_channels[2],xrefs[nmbr],periods$[13],iv_masks$[3],iv_desc[3]
    call pgmdir$+"sac_pa.aon",action,firm_id$,level$,segments,levels$[all],literals$[all],types$[all],imasks$[all],omasks$[all],prompts$[all],inlen[all],fldlen[all],descchan[all],descrec$[all],descstr[all],descpos[all],desclen[all],sa_channels[all],keylen,xrefs[all],fy$,periods,periods$[all],iv_masks$[all],iv_desc[all],ivm14_dev,status
    if status or segments<1 goto std_exit

    if action>20 gosub build_xrefs

    m1$=iv_masks$[1]
    m2$=iv_masks$[2]
    m3$=iv_masks$[3]
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)

rem --- Initializations

    dim c[12],q[12],s[12]
    dim kpos[nmbr]; rem "Key positions of segments in SA file
    col=35
    l0=4
    l1=l0+3+2*segments+1
    fldlen[0]=len(firm_id$+fy$)
    kpos[0]=1
    levels$=""

    for i=1 to nmbr
        kpos[i]=kpos[i-1]+fldlen[i-1]
    next i

    for i=1 to segments
        levels$=levels$+levels$[i]
    next i

    dim seqs$[3]; let seqs$[1]=Translate!.getTranslation("AON_ASCENDING"),seqs$[2]=Translate!.getTranslation("AON_DESCENDING"),seqs$[3]=Translate!.getTranslation("AON_UNSORTED"),seqs$="ADU"
    dim sus$[2]; let sus$[1]=Translate!.getTranslation("AON_SALES"),sus$[2]=Translate!.getTranslation("AON_UNITS"),sus$="SU"
    dim myps$[3]; let myps$[1]="MTD",myps$[2]="YTD",myps$[3]=Translate!.getTranslation("AON_PRIOR"),myps$="MYP"
    dim begsegs$[segments],endsegs$[segments]

rem --- Build begsegs[1] and endsegs[1]

    switch action
        case 1; begsegs$[1]=from_cust$,endsegs$[1]=thru_cust$;break
        case 2; begsegs$[1]=from_terr$,endsegs$[1]=thru_terr$;break
        case 3; begsegs$[1]=from_slsmn$,endsegs$[1]=thru_slsmn$;break
        case 4; begsegs$[1]=from_custtype$,endsegs$[1]=thru_custtype$;break
        case 5; begsegs$[1]=from_cust$,endsegs$[1]=thru_cust$;break
        case 6; begsegs$[1]=from_sic$,endsegs$[1]=thru_sic$;break
        case 7; begsegs$[1]=from_prod$,endsegs$[1]=thru_prod$;break
        case 8; begsegs$[1]=from_wh$,endsegs$[1]=thru_wh$;break
        case 9; begsegs$[1]=from_vend$,endsegs$[1]=thru_vend$;break
        case 10; begsegs$[1]=from_dist$,endsegs$[1]=thru_dist$;break
        case 11; begsegs$[1]=from_prod$,endsegs$[1]=thru_prod$;break
        case 12; begsegs$[1]=from_terr$,endsegs$[1]=thru_terr$;break
        case 21; begsegs$[1]=from_prod$,endsegs$[1]=thru_prod$;break
        case default; break
    swend

rem --- Build begsegs[2] and endsegs[2]

    if segments>=2
        switch action
            case 1; begsegs$[2]=from_prod$,endsegs$[2]=thru_prod$;break
            case 2; begsegs$[2]=from_prod$,endsegs$[2]=thru_prod$;break
            case 3; begsegs$[2]=from_prod$,endsegs$[2]=thru_prod$;break
            case 4; begsegs$[2]=from_prod$,endsegs$[2]=thru_prod$;break
            case 5; begsegs$[2]=from_prod$,endsegs$[2]=thru_prod$;break
            case 6; begsegs$[2]=from_prod$,endsegs$[2]=thru_prod$;break
            case 7; begsegs$[2]=from_item$,endsegs$[2]=thru_item$;break
            case 8; begsegs$[2]=from_prod$,endsegs$[2]=thru_prod$;break
            case 9; begsegs$[2]=from_prod$,endsegs$[2]=thru_prod$;break
            case 10; begsegs$[2]=from_prod$,endsegs$[2]=thru_prod$;break
            case 11; begsegs$[2]=from_item$,endsegs$[2]=thru_item$;break
            case 12; begsegs$[2]=from_cust$,endsegs$[2]=thru_cust$;break
            case 21; begsegs$[2]=from_item$,endsegs$[2]=thru_item$;break
            case default; break
        swend
    endif

rem --- Build begsegs[3] and endsegs[3]

    if segments>=3
        switch action
            case 1; begsegs$[3]=from_item$,endsegs$[3]=thru_item$;break
            case 2; begsegs$[3]=from_item$,endsegs$[3]=thru_item$;break
            case 3; begsegs$[3]=from_item$,endsegs$[3]=thru_item$;break
            case 4; begsegs$[3]=from_item$,endsegs$[3]=thru_item$;break
            case 5; begsegs$[3]=from_item$,endsegs$[3]=thru_item$;break
            case 6; begsegs$[3]=from_item$,endsegs$[3]=thru_item$;break
            case 7; break
            case 8; begsegs$[3]=from_item$,endsegs$[3]=thru_item$;break
            case 9; begsegs$[3]=from_item$,endsegs$[3]=thru_item$;break
            case 10; begsegs$[3]=from_item$,endsegs$[3]=thru_item$;break
            case 11; break
            case 12; begsegs$[3]=from_prod$,endsegs$[3]=thru_prod$;break
            case 21; begsegs$[3]=from_cust$,endsegs$[3]=thru_cust$;break
            case default; break
        swend
    endif

    if segments=4
        if action=12
            begsegs$[4]=from_item$
            endsegs$[4]=thru_item$
        endif
    endif

rem --- Run Report Overlay

    if action=12 
        files=2,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="sam-12",options$[1]="CL",ids$[1]="SAM_CUSTTERR"; rem Clear and Lock file for Advisory Locking
        files$[2]="sam_custterr_tot",options$[2]="CL",ids$[2]="SAM_CUSTTERR_TOT"; rem Clear and Lock file for Advisory Locking
        call pgmdir$+"adc_fileopen.aon",action1,begfile,endfile,files$[all],options$[all],
:           ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        sam12_dev=channels[1]
        sam12tot_dev=channels[2]

    rem --- Dimension string templates

        dim sam12a$:templates$[1]
        dim sam12tot$:templates$[2]

        gosub build_sam12
        sam00_dev=sam12_dev
        sam_dev=sam12_dev
        file_name$="SAM_CUSTTERR"
    endif

    if report$="Y" run pgmdir$+"sar_ad.aon"
    run pgmdir$+"sar_ac.aon"


build_xrefs: rem --- Build Cross References

    dim sferx[nmbr]

    for x=1 to nmbr
        sferx[xrefs[x]]=x; rem "Reverse cross reference
    next x

rem --- Using Cross Reference File

    if action>=20 then
        max_segments=1
        dim xlevels$[nmbr],xliterals$[nmbr],xtypes$[nmbr],ximasks$[nmbr],xomasks$[nmbr],xprompts$[nmbr],xinlen[nmbr],xfldlen[nmbr]
        dim xdescchan[nmbr],xdescrec$[nmbr],xdescstr[nmbr],xdescpos[nmbr],xdesclen[nmbr]
        
        for x=1 to nmbr
            xlevels$[xrefs[x]]=levels$[x],xliterals$[xrefs[x]]=literals$[x],xtypes$[xrefs[x]]=types$[x],ximasks$[xrefs[x]]=imasks$[x],xomasks$[xrefs[x]]=omasks$[x],xprompts$[xrefs[x]]=prompts$[x],xinlen[xrefs[x]]=inlen[x],xfldlen[xrefs[x]]=fldlen[x]
            xdescchan[xrefs[x]]=descchan[x],xdescrec$[xrefs[x]]=descrec$[x],xdescstr[xrefs[x]]=descstr[x],xdescpos[xrefs[x]]=descpos[x],xdesclen[xrefs[x]]=desclen[x]
        next x
        
        levels$[all]=xlevels$[all],literals$[all]=xliterals$[all],types$[all]=xtypes$[all],imasks$[all]=ximasks$[all],omasks$[all]=xomasks$[all],prompts$[all]=xprompts$[all],inlen[all]=xinlen[all],fldlen[all]=xfldlen[all]
        descchan[all]=xdescchan[all],descrec$[all]=xdescrec$[all],descstr[all]=xdescstr[all],descpos[all]=xdescpos[all],desclen[all]=xdesclen[all]
        x=nmbr

        while x>segments
            literals$[xrefs[x]]="",x=x-1
        wend

        for x=1 to segments
            max_segments=max(max_segments,xrefs[x])
        next x

        segments=max_segments
    endif

    return

build_sam12: rem --- Build sam-12 Sales By Customer In Territory

    sayear$=year$,priyear$=str(num(sayear$)-1:"0000")

    if sam12_dev=0
        goto std_exit
    endif
l6440: 
    read (sam01_dev,key=firm_id$+sayear$,dom=*next)
l6450: 
    sam01_k$=key(sam01_dev,end=l6575)
l6455: 
    if pos(firm_id$+sayear$=sam01_k$)<>1 goto l6575
    read record (sam01_dev,key=sam01_k$) sam01a$
    x=1; rem "Begin loop
l6470: 
    if begsegs$[x]="" goto l6495
    if sam01_k$(kpos[x]-fldlen[1],fldlen[x])>=begsegs$[x] goto l6495
    sam01_k$=sam01_k$(1,kpos[x]-fldlen[1]-1)+begsegs$[x]
    read (sam01_dev,key=sam01_k$,dom=l6570)
    goto l6455
l6495: 
    if endsegs$[x]="" goto l6515
    if sam01_k$(kpos[x]-fldlen[1],fldlen[x])<=endsegs$[x] goto l6515
    sam01_k$=sam01_k$(1,kpos[x]-fldlen[1]-1)+$FF$
    read (sam01_dev,key=sam01_k$,dom=l6570)
l6515: 
    x=x+1
    if x<=segments goto l6470; rem "End loop
    if sam01_k$(kpos[1],fldlen[2])=t0$ goto l6560
    t0$=sam01_k$(kpos[1],fldlen[2])    
    read record (arm02_dev,key=firm_id$+t0$+"  ",dom=*next) arm02a$
    if begsegs$[1]<>"" and arm02a.territory$<begsegs$[1] goto l6570
    if endsegs$[1]<>"" and arm02a.territory$>endsegs$[1] goto l6570
l6560: 
    x0$=sam01_k$(kpos[0],fldlen[0])+arm02a.territory$+sam01_k$(kpos[1])

rem --- Copy fields from sam-01 to sam-12 - set sam12a.territory$ to arm02a.territory$

    flds01$=fattr(sam01a$,"")
    flds12$=fattr(sam12a$,"")
copyflds: 
    if len(flds01$)=0 or pos($0a$<>flds01$)=0 goto writerec

    if pos(flds01$(1,pos($0a$=flds01$)-1)=flds12$)>0 then
        field sam12a$,flds01$(1,pos($0a$=flds01$)-1) = field(sam01a$,flds01$(1,pos($0a$=flds01$)-1),err=*next);goto endcopy
        field sam12a$,flds01$(1,pos($0a$=flds01$)-1) = nfield(sam01a$,flds01$(1,pos($0a$=flds01$)-1),err=*next);goto endcopy
    endif        
endcopy: 
    flds01$=flds01$(pos($0a$=flds01$)+1)
    goto copyflds

writerec: rem --- write record

    sam12a.territory$=arm02a.territory$
    write record (sam12_dev,key=x0$) sam12a$
    gosub build_sam12tot
l6570: 
    goto l6450
l6575: 
    if sayear$=priyear$ goto l6590
    let sayear$=priyear$
    goto l6440
l6590:
    return

build_sam12tot: rem --- Build sam_custterr_tot Total Sales By Customer In Territory

    rem --- Total sam-12 numerics into sam_custterr_tot
    dim sam12tot$:fattr(sam12tot$)
    sam12tot.firm_id$=sam12a.firm_id$
    sam12tot.year$=sam12a.year$
    sam12tot.territory$=sam12a.territory$
    sam12tot.customer_id$=sam12a.customer_id$
    sam12tot.product_type$=sam12a.product_type$
    sam12tot_key$=sam12tot.firm_id$+sam12tot.year$+sam12tot.territory$+sam12tot.customer_id$+sam12tot.product_type$
    extract record (sam12tot_dev,key=sam12tot_key$,dom=*next) sam12tot$;rem Advisory Locking
    for period=1 to 13
        field sam12tot$, "qty_shipped_" + str(period:"00") = nfield(sam12tot$, "qty_shipped_" + str(period:"00")) + nfield(sam12a$, "qty_shipped_" + str(period:"00"))
        field sam12tot$, "total_cost_" + str(period:"00") = nfield(sam12tot$, "total_cost_" + str(period:"00")) + nfield(sam12a$, "total_cost_" + str(period:"00"))
        field sam12tot$, "total_sales_" + str(period:"00") = nfield(sam12tot$, "total_sales_" + str(period:"00")) + nfield(sam12a$, "total_sales_" + str(period:"00"))
        field sam12tot$, "ord_qty_shipped_" + str(period:"00") = nfield(sam12tot$, "ord_qty_shipped_" + str(period:"00")) + nfield(sam12a$, "ord_qty_shipped_" + str(period:"00"))
        field sam12tot$, "ord_total_cost_" + str(period:"00") = nfield(sam12tot$, "ord_total_cost_" + str(period:"00")) + nfield(sam12a$, "ord_total_cost_" + str(period:"00"))
        field sam12tot$, "ord_total_sales_" + str(period:"00") = nfield(sam12tot$, "ord_total_sales_" + str(period:"00")) + nfield(sam12a$, "ord_total_sales_" + str(period:"00"))
    next period
    sam12tot$=field(sam12tot$)
    write record (sam12tot_dev) sam12tot$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
