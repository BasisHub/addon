rem --- Generic Sales Analysis 12 Period Report
rem --- Program sar_ad v8.0.0 23Jul2007 (sar_ad)
rem --- Created by adx_codeport.bbx v1.1.5 (07/23/2007 02:12:39)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- Note on Advisory Locking 
rem ---    Lead-in pgm clears and locks the work file (saw-01, or saw-02, or ...etc; saw00_dev is   
rem ---    the generic reference herein) that is written to in this pgm. 

rem --------------------------------------------------------------------------------

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)    

rem --- set rd_alias_id$, if needed, for DocOut Settings

    rd_alias_id$=rd_alias_id$+"_12"

rem --- Open/Lock files

    files=1,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="sas_params"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    sas01_dev=channels[1]

rem --- IOLists

saw00a: iolist a0$,nmbr[all],total
sam00a: iolist x0$,q[all],c[all],s[all]
descchana: iolist x$[all]

rem --- Retrieve miscellaneous templates

    files=1,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="sas-01A:SAS_PARAMS"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim sas01a$:templates$[1]

rem --- Retrieve parameter records

    sas01a_key$=firm_id$+"SA00"
    find record (sas01_dev,key=sas01a_key$,err=std_missing_params) sas01a$

    gosub get_sort_parameters
    dim wpos[nmbr]; rem "Key positions of segments in 'sorted' Work file
    wpos[0]=3

    for x=1 to nmbr
        wpos[x]=2+kpos[x]+sort_size-fldlen[0]
    next x

    level=pos(level$=levels$)
    if pos(seq$="AD")=0 goto makeVect
    if level>1 wpos[1]=wpos[0]
    if level>2 wpos[2]=wpos[1]+fldlen[1]
    if level>3 wpos[3]=wpos[2]+fldlen[2]
    if level>1 wpos[0]=wpos[level-1]+fldlen[level-1]; rem "Key position of Sort Amount in 'sorted' Work file

rem --- Document Initializations

makeVect: 

    OutVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Initializations

    dim a0$(sort_size+keylen-2),c[12],q[12],s[12],nmbr[11]
    total=0
    endperiod=num(period$)
    begperiod=endperiod-11
    endyear$=year$
    begyear$=year$
    if begperiod<1 begyear$=str(num(begyear$)-1:"0000"),begperiod=begperiod+periods
    endperiod$=periods$[endperiod]+" "+str(num(endyear$):"0000")
    m1$="########0-"
    m1=len(m1$)
    m2$="#######0-"
    m2=len(m2$)
    width=132
    page=0
    l9=59
    recs=0
    total_recs=0
    when$=sysinfo.system_date$
    clock$=""
    headings=6
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=Translate!.getTranslation("AON_12_PERIOD_")+sysinfo.task_desc$
    headings$[2]=sus$[pos(su$=sus$)]+Translate!.getTranslation("AON__THROUGH_")+endperiod$
    prev_seg1_head$=""
    prev_seg2_head$=""
    prev_seg3_head$=""
    aon_description$=Translate!.getTranslation("AON_DESCRIPTION")

    aon_total_for$=Translate!.getTranslation("AON_TOTAL_FOR_")
    aon_unknown$=Translate!.getTranslation("AON_UNKNOWN_")
    aon_item$=Translate!.getTranslation("AON_ITEM")
    aon_summarized_items$=Translate!.getTranslation("AON_SUMMARIZED_ITEMS")
    aon_customer_ship_to$=Translate!.getTranslation("AON_CUSTOMER_SHIP-TO")
    aon_bill_to_address$=Translate!.getTranslation("AON_BILL-TO_ADDRESS")

rem --- Print positions

    dim o[4],o1[12]
    o[1]=0
    o[2]=o[1]+3
    o[3]=o[2]+3
    o[4]=o[3]+3
    o1[12]=width-m1

    for i=11 to 0 step -1
        o1[i]=o1[i+1]-m2
    next i

    if pos("M"=myp$) detail=len(mtd$)+1 else detail=4
    sum_fldlen=0

    for i=1 to segments
        if literals$[i]="" continue
        sum_fldlen=sum_fldlen+fldlen[i]
    next i

rem --- Report headings

    dim h1$(width),h2$(width),x1$[level],x2$[level]
    h=0
    literals$=""

    for i=1 to level
        if literals$[i]="" continue
        h=h+1
        literals$=literals$+"/"+literals$[i]
        x1$[h]=Translate!.getTranslation("AON_FROM_")+literals$[i]+": "
        x2$[h]=Translate!.getTranslation("AON___TO_")+literals$[i]+": "
        if begsegs$[i]="" x1$[h]=x1$[h]+Translate!.getTranslation("AON_FIRST") else x1$[h]=x1$[h]+begsegs$[i]
        if endsegs$[i]="" x2$[h]=x2$[h]+Translate!.getTranslation("AON_LAST") else x2$[h]=x2$[h]+endsegs$[i]
    next i

    dim h[h]
    if h=1 h[1]=min(fncx(x1$[1],width/2),fncx(x2$[1],width/2))
    if h=2 h[1]=1,h[2]=width-max(len(x1$[2]),len(x2$[2]))
    if h=3 h[1]=1,h[2]=min(fncx(x1$[2],width/2),fncx(x2$[2],width/2)),h[3]=width-max(len(x1$[3]),len(x2$[3]))
    if h=4 h[1]=1,h[2]=min(fncx(x1$[2],width/3),fncx(x2$[2],width/3)),h[3]=min(fncx(x1$[3],2*width/3),fncx(x2$[3],2*width/3)),h[4]=width-max(len(x1$[4]),len(x2$[4]))

    for i=1 to h
        h1$(h[i])=x1$[i]
        h2$(h[i])=x2$[i]
    next i

    literals$=literals$(2)
    headings$[4]=h1$
    headings$[5]=h2$

    if break$="Y"
        headings$[6]=" [HEADER]"
    endif    

rem --- Document columns

    if export_fmt$="Y" then
        columns=12+(level*2)
        dim columns$[columns,10]
        if level>=1 then
            seg=1; gosub get_column_size
            columns$[0,0]=literals$[1],columns$[0,1]="C",columns$[0,2]=str(size_fld)
            columns$[1,0]=literals$[1]+" "+aon_description$,columns$[1,1]="C",columns$[1,2]=str(size_desc)
        endif
        if level>=2 then
            seg=2; gosub get_column_size
            columns$[2,0]=literals$[2],columns$[2,1]="C",columns$[2,2]=str(size_fld)
            columns$[3,0]=literals$[2]+" "+aon_description$,columns$[3,1]="C",columns$[3,2]=str(size_desc)
        endif
        if level>=3 then
            seg=3; gosub get_column_size
            columns$[4,0]=literals$[3],columns$[4,1]="C",columns$[4,2]=str(size_fld)
            columns$[5,0]=literals$[3]+" "+aon_description$,columns$[5,1]="C",columns$[5,2]=str(size_desc)
        endif
        if level>=4 then
            seg=4; gosub get_column_size
            columns$[6,0]=literals$[4],columns$[6,1]="C",columns$[6,2]=str(size_fld)
            columns$[7,0]=literals$[4]+" "+aon_description$,columns$[7,1]="C",columns$[7,2]=str(size_desc)
        endif
        last_col=(level*2)-1
    else
        columns=13
        dim columns$[columns,10]
        if level>=1 then columns$[0,0]=literals$[1],columns$[0,1]="C",columns$[0,2]="15"
        if level>=2 then columns$[0,0]=columns$[0,0]+"/^"+literals$[2]
        if level>=3 then columns$[0,0]=columns$[0,0]+"/^"+literals$[3]
        if level>=4 then columns$[0,0]=columns$[0,0]+"/^"+literals$[4]
        last_col=0
    endif
    p=begperiod
    yr$=begyear$
    for i=1 to 12
        columns$[i+last_col,0]=periods$[p]+" "+str(num(yr$):"0000"),columns$[i+last_col,1]="N",columns$[i+last_col,2]=str(m2),columns$[i+last_col,3]=m2$,columns$[i+last_col,10]="T"
        p=p+1
        if p>periods yr$=str(num(yr$)+1:"0000"),p=1
    next i
    columns$[columns,0]=Translate!.getTranslation("AON_TOTAL"),columns$[columns,1]="N",columns$[columns,2]=str(m1),columns$[columns,3]=m1$,columns$[columns,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Set Sales Analysis Year

    call pgmdir$+"adc_progress.aon","N",file_name$,"","","",0,sam_dev,1,meter_num,status
    if status = 999 then goto std_exit

    sayear$=begyear$
    t0$=""

l950: rem --- Position Sort File Pointer

    if action=21
        read (sam_dev,key=firm_id$+sayear$,knum="AO_PRD_ITM_CST",dom=*next)
    endif

    if action<>21
        read (sam_dev,key=firm_id$+sayear$,dom=*next)
    endif

l1000: rem --- Build Report Work File

    sam_k$=key(sam_dev,end=l1700)
l1020: 
    if pos(firm_id$+sayear$=sam_k$)<>1 goto l1700
    read (sam_dev)
    i=1; rem "Begin loop

    total_recs=total_recs+1
    if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
    if status = 999 then goto std_exit


l1050: rem --- Validate Segment Begin

    if begsegs$[i]="" goto l1100
    if sam_k$(kpos[i],fldlen[i])>=begsegs$[i] goto l1100
    sam_k$=sam_k$(1,kpos[i]-1)+begsegs$[i]
    read (sam_dev,key=sam_k$,dom=l1600)
    goto l1020

l1100: rem --- Validate Segment End

    if endsegs$[i]="" goto l1150
    if sam_k$(kpos[i],fldlen[i])<=endsegs$[i] goto l1150
    sam_k$=sam_k$(1,kpos[i]-1)+$FF$
    read (sam_dev,key=sam_k$,dom=l1600)

l1150: rem --- Check Next Segment

    i=i+1
    if i<=segments goto l1050; rem "End loop

rem --- Detail Level Break?

    if t0$="" goto l1400

    for i=1 to level
        if literals$[i]<>"" and sam_k$(kpos[i],fldlen[i])<>t0$(kpos[i],fldlen[i]) exitto l1300
    next i

    goto l1500

l1300: rem --- Write Report Work File Record

    total=0

    for i=0 to 11
        total=total+nmbr[i]
    next i

    if zero$="N" and total=0 goto l1400
    write (saw00_dev,key=a0$) iol=saw00a

l1400: rem --- Initialize New Report Work File Record

    dim a0$(sort_size+keylen-4),nmbr[11]
    t0$=sam_k$(1,kpos[level]+fldlen[level]-1)
    a0$(1,2)=firm_id$
    a0$(3+sort_size)=t0$(kpos[1])
    total=0
    read (saw00_dev,key=a0$,dom=*next) iol=saw00a

l1500: rem --- Next Sales Analysis Record

    sam00_k$=sam_k$

    if action=21
        read (sam00_dev,key=sam00_k$,knum="AO_PRD_ITM_CST",dom=l1600) iol=sam00a
    endif

    if action<>21
        read (sam00_dev,key=sam00_k$,dom=l1600) iol=sam00a
    endif

    if sayear$=begyear$ p=begperiod,first=0 else p=1,first=periods-begperiod+1

    for i=first to 11
        if su$="S" nmbr[i]=nmbr[i]+s[p-1] else nmbr[i]=nmbr[i]+q[p-1]
        p=p+1
        if p>periods exitto l1600
    next i

l1600: rem --- Get Next Sort Record

    goto l1000

l1700: rem --- Set End Sales Anaylsis Year

    if sayear$=endyear$ goto l1750
    sayear$=endyear$
    goto l950

l1750: rem --- Write Last Report Work File Record

    if pos(" "<>a0$(3))=0 goto l1900; rem "Empty report
    total=0

    for i=0 to 11
        total=total+nmbr[i]
    next i

    if zero$="N" and total=0 goto l1800
    write (saw00_dev,key=a0$) iol=saw00a

l1800: rem --- Sort Report Work File

    if pos(seq$="AD")=0 goto l1900

    total_recs=total_recs+1
    if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
    if status = 999 then goto std_exit

    read (saw00_dev,key="",dom=*next)
l1830: 
    saw00_k$=key(saw00_dev,end=l1900)
    if pos(" "<>saw00_k$(3,sort_size)) goto l1900
    read (saw00_dev,key=saw00_k$) iol=saw00a

    total_recs=total_recs+1
    if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
    if status = 999 then goto std_exit

    if seq$="A" if total>0 a0$(3,sort_size)=str(-total:sort_mask$) else a0$(3,sort_size)=str(sort_num+total:sort_mask$)
    if seq$="D" if total<0 a0$(3,sort_size)=str(total:sort_mask$) else a0$(3,sort_size)=str(sort_num-total:sort_mask$)
    if level=1 goto l1885
    a0$(wpos[0],sort_size)=a0$(3,sort_size)

    for i=1 to level
        a0$(wpos[i],fldlen[i])=saw00_k$(2+sort_size-fldlen[0]+kpos[i],fldlen[i])
    next i
l1885: 
    write (saw00_dev,key=a0$) iol=saw00a
    remove (saw00_dev,key=saw00_k$)

    goto l1830

l1900: rem --- Position Report Work File Pointer

    total_recs=total_recs+1
    if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
    if status = 999 then goto std_exit

    dim nmbr_tot[11],n[11]
    done=0
    seg1_head=0
    seg2_head=0
    total_tot=0
    t=0
    t0$=""
    t1$=""
    t2$=""
    read (saw00_dev,key="",dom=*next)

l2000: rem --- Process Report Work File

    saw00_k$=key(saw00_dev,end=done)
    read (saw00_dev,key=saw00_k$) iol=saw00a
    tmp$=""
    recs=recs+1
    
    for i=1 to level
        if literals$[i]<>"" tmp$=tmp$+a0$(wpos[i],fldlen[i])
    next i

    total_recs=total_recs+1
    if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
    if status = 999 then goto std_exit

rem --- Segment Breaks

    if a0$(wpos[1],fldlen[1])<>t0$ gosub first_break
    if a0$(wpos[2],fldlen[2])<>t1$ gosub second_break
    if a0$(wpos[3],fldlen[3])<>t2$ gosub third_break

rem --- Fourth Segment Detail

    if level<4 or literals$[4]="" goto l2600
    seg=4
    seg$=a0$(wpos[seg],fldlen[seg])
    gosub get_seg_desc
    n[all]=nmbr[all]
    t=total
    gosub print_detail

l2600: rem --- Accumulate Totals

    nmbr_tot[all]=nmbr_tot[all]+nmbr[all]
    total_tot=total_tot+total
    if literals$[1]<>"" nmbr_tot1[all]=nmbr_tot1[all]+nmbr[all],total_tot1=total_tot1+total
    if level>1 and literals$[2]<>"" nmbr_tot2[all]=nmbr_tot2[all]+nmbr[all],total_tot2=total_tot2+total
    if level>2 and literals$[3]<>"" nmbr_tot3[all]=nmbr_tot3[all]+nmbr[all],total_tot3=total_tot3+total

rem --- Get Next Report Work File Record

    goto l2000

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub first_break
    n[all]=nmbr_tot[all]
    t=total_tot
    seg1_head$=Translate!.getTranslation("AON_TOTAL_FOR_REPORT")
    seg2_head$=""
    seg3_head$=""
    seg4_head$=""

    if break$="Y" 
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        HdrVect!.addItem(Translate!.getTranslation("AON_TOTAL_PAGE"))
    endif    

    if export_fmt$<>"Y" then gosub print_detail

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status    
    goto std_exit

print_detail: rem --- Print Detail Line

    if tot_flag$="Y" and export_fmt$="Y" then
        tot_flag$=""
        return
    endif

    seg=1
    if cvs(seg1_head$,2)<>""
        if export_fmt$="Y" then
            OutVect!.addItem(seg1_fld$)
            OutVect!.addItem(seg1_desc$)
        else
            OutVect!.addItem(seg1_head$)
            blank=fnblank(columns)
            seg1_head$=""
        endif
    endif

    if level>=2 
        seg=2
        if cvs(seg2_head$,2)<>"" 
            if export_fmt$="Y" then
                OutVect!.addItem(seg2_fld$)
                OutVect!.addItem(seg2_desc$)
            else
                OutVect!.addItem(seg2_head$)
                blank=fnblank(columns)
                seg2_head$=""
            endif
        endif
    endif

    if level>=3
        seg=3
        if cvs(seg3_head$,2)<>""
            if export_fmt$="Y" then
                OutVect!.addItem(seg3_fld$)
                OutVect!.addItem(seg3_desc$)
            else
                OutVect!.addItem(seg3_head$)
                blank=fnblank(columns)
                seg3_head$=""
            endif
        endif
    endif

    if level>=4
        seg=4
        seg$=a0$(wpos[seg],fldlen[seg])
        gosub get_seg_desc
        if export_fmt$="Y" then
            OutVect!.addItem(segdfld$)
            OutVect!.addItem(segdesc$)
        else
            OutVect!.addItem(segdfld$+" "+segdesc$)
            blank=fnblank(columns)
            seg4_head$=""
        endif
    endif
    
    if tot_flag$="Y" and export_fmt$<>"Y" then
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        tot_flag$=""
    endif

    if export_fmt$<>"Y" then blank=fnblank(1)

    for i=0 to 11
        OutVect!.addItem(str(n[i]))
    next i

    OutVect!.addItem(str(t))

    return

first_break: rem --- First Segment Break

    if literals$[1]="" goto l6190
    if t0$="" goto l6100
    gosub second_break

    n[all]=nmbr_tot1[all]
    t=total_tot1
    seg1_head$=aon_total_for$+t0$
    seg2_head$=""
    seg3_head$=""
    seg4_head$=""
    if export_fmt$="Y" and level=1 then
        tot_flag$=""
    else
        tot_flag$="Y"
    endif
    gosub print_detail
    endif
l6100: 
    if done goto l6190
    dim nmbr_tot1[11]

    if break$="Y"
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))

        if types$[1]="M"
            breakhdr$=fnmask$(a0$(wpos[1],inlen[1]),omasks$[1])
        else
            breakhdr$=a0$(wpos[1],inlen[1])
        endif
        HdrVect!.addItem(literals$[1]+" "+breakhdr$)
    endif 

    t0$=a0$(wpos[1],fldlen[1])
    total_tot1=0
    t1$=""
    t2$=""
    seg$=t0$
    seg=1
    gosub get_seg_desc
    seg1_fld$=segdfld$
    seg1_desc$=segdesc$
    seg1_head$=seg1_fld$+" "+seg1_desc$

l6190: 
    return

second_break: rem --- Second Segment break

    if level<2 or literals$[2]="" goto l6390
    if t1$="" goto l6300
    gosub third_break
    if level=2 goto l6260
l6260: 
    n[all]=nmbr_tot2[all]
    t=total_tot2

    if level>2 then
        seg2_head$=aon_total_for$+t1$
        seg3_head$=""
        seg4_head$=""
        tot_flag$="Y"
    endif

        gosub print_detail
l6300: 
    if done goto l6390
    dim nmbr_tot2[11]
    t1$=a0$(wpos[2],fldlen[2])
    total_tot2=0
    t2$=""
    seg$=t1$
    seg=2
    gosub get_seg_desc
    seg2_fld$=segdfld$
    seg2_desc$=segdesc$
    seg2_head$=seg2_fld$+" "+seg2_desc$

l6390: 
    return

third_break: rem --- Third Segment break

    if level<3 or literals$[3]="" goto l6590
    if t2$="" goto l6500
    if level=3 goto l6460
l6460: 
    n[all]=nmbr_tot3[all]
    t=total_tot3

    if level>3 then
        seg3_head$=aon_total_for$+t2$
        seg4_head$=""
        tot_flag$="Y"
    endif

    gosub print_detail
l6500: 
    if done goto l6590
    dim nmbr_tot3[11]
    t2$=a0$(wpos[3],fldlen[3])
    total_tot3=0
    seg$=t2$
    seg=3
    gosub get_seg_desc
    seg3_fld$=segdfld$
    seg3_desc$=segdesc$
    seg3_head$=seg3_fld$+" "+seg3_desc$

l6590: 
    return

get_period_headings: rem --- Build Period Heading String

    dim h3$(width)
    p=begperiod
    yr$=begyear$

    for i=0 to 11
        h3$(o1[i]+m2-6)=periods$[p]+" "+str(num(yr$):"0000")
        p=p+1
        if p>periods yr$=str(num(yr$)+1:"0000"),p=1
    next i

    h3$(o1[12]+m1-5)=Translate!.getTranslation("AON_TOTAL")
    h3$=h3$(o1[0]+1)

    return

get_seg_desc: rem --- Get Description For Segment Selection

    dim fld$(inlen[seg])
    dim desc_tpl$:desctpl$[seg]
    if descchan[seg]=0 goto l6850
    field desc_tpl$,descfield$[seg]=aon_unknown$+literals$[seg]
    if cvs(seg$,2)="" and literals$[seg]=aon_item$ then field desc_tpl$,descfield$[seg]=aon_summarized_items$
    if cvs(seg$,2)="" and literals$[seg]=aon_customer_ship_to$ then field desc_tpl$,descfield$[seg]=aon_bill_to_address$
    if literals$[seg]=aon_customer_ship_to$ then descrec$[seg]=a0$(wpos[seg-1],fldlen[seg-1])
    readrecord(descchan[seg],key=firm_id$+descrec$[seg]+seg$,dom=*next)desc_tpl$
l6850: 
    desc$=field(desc_tpl$,descfield$[seg])
    fld$(1)=seg$
    if types$[seg]="M" fld$=fnmask$(fld$(1,inlen[seg]),omasks$[seg])
    if literals$[seg]=aon_item$ then desc$=fnitem$(desc$,iv_desc[1],iv_desc[2],iv_desc[3]),fld$=fld$(1,inlen[seg])
    segdfld$=cvs(fld$,3)
    segdesc$=cvs(desc$,3)

    return

get_column_size: rem --- Get size of column and description for segment selection

    if levels$[seg]="I" then
        size_fld=max(iv_desc[0],len(literals$[seg]))
        size_desc=max(iv_desc[1]+iv_desc[2]+iv_desc[3],len(literals$[seg]+" "+aon_description$))
    else
        size_fld=max(inlen[seg],len(literals$[seg]))
        dim tmp_tpl$:desctpl$[i]
        attr$=fattr(tmp_tpl$,descfield$[i])
        if len(attr$)>=11 then
            desclen=dec(attr$(10,2))
        else
            desclen=0
        endif
        size_desc=max(desclen,len(literals$[seg]+" "+aon_description$))
    endif
    
    return

get_sort_parameters: rem --- Get Sort Parameters

    sort_size=16
    sort_mask$="-"+fill(sort_size-1,"0")
    m$=m1$
    if report$="Y" and su$="U" m$=m2$
    x=pos("."=m$)
    if x=0 goto l6960
    if pos("-"=m$)>x x=x+1
    sort_mask$(sort_size-len(m$)+x,1)="."; rem "Place the decimal point
l6960: 
    sort_num=num("1"+sort_mask$(2))+num(sort_mask$(1,sort_size-1)+"1"); rem "Maximum value that fits mask

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Miscellaneous functions

    def fncx(q$,q)=int(q-len(q$)/2)

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- Create blank cell in OutVect!
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    pgmdir$=stbl("+DIR_SYP",err=*next)
    run pgmdir$+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
