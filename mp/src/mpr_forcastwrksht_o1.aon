rem --- Production Forecast Worksheet (Report Overlay)
rem --- Program mpr_forcastwrksht_o1 v8.0.0 25Feb2008 (mpr_cb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/30/2008 02:33:58)
rem --- Last modified on (02/26/2008 16:25:00)
        
rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Initializations

        precision ivprecision
        dim underlines$(5,"_"),o[3]
        dim dates$[mp],usage[4],header$[4]
        months$=" Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec "
        h8$="Number Of Periods: "+str(mpm01a.no_of_pers)
        dates$[1]=begdate$
        h9$="Days Per Period: "+str(mpm01a.days_in_per)
        hr=width-max(len(h8$),len(h9$))
        prefix$=cvs(firm_id$+whse$+product$,2)
        underlines$(len(underlines$))=" "
        months1$=""
        dates1$="",dashes1$="",months2$="",dates2$="",dashes2$=""
        t0$=""
        t1$=""
		call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
        for x=0 to 3
            o[x]=width-m2*(4-x)
        next x
        h6$="For Forecast: "+forecast$
        h7$="Beginning Date: "+fndate$(begdate$)
        hc=fncenter(h7$,width)
        hf=fncenter(h6$,width)
        needed=5,position=40
        more=1
        
        headings$[1]=headings$[1]+h6$
        headings$[2]="Warehouse: "+whse$
        headings$[3]=h7$
        headings$[4]=h8$
        headings$[5]=h9$
        headings$[6]="[HEADER]"

 
rem --- Build forecast entry lines

    if mpm01a.no_of_pers>2 then 
        for x=2 to mpm01a.no_of_pers
            begdate$=dates$[x-1]
            enddate$="",days=mpm01a.days_in_per
            call pgmdir$+"adc_daydates.aon",begdate$,enddate$,days
            dates$[x]=enddate$
        next x
    endif 

    for x=1 to mpm01a.no_of_pers
        m=num(dates$[x](5,2))
        d=num(dates$[x](7,2))
        months1$=months1$+" "+months$((m-1)*5+1,5)
        dates1$=dates1$+str(d:" ##00-"),dashes1$=dashes1$+" "+underlines$
    next x

    if mpm01a.no_of_pers>14 then 
        months2$=months1$(66)
        months1$=months1$(1,65)
        dates2$=dates1$(66)
        dates1$=dates1$(1,65)
        dashes2$=dashes1$(66)
        dashes1$=dashes1$(1,65),needed=10
    endif
    
rem --- Background
    
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm02_dev,1,meter_num,ignore_status
    
rem --- Initialize Period Descriptions
    
    period$=current_period$
    year$=current_year$
    for loop=1 to 4
        dim b0$(28),b[12]
        header$[loop]=period$+"/"+year$
        period=num(period$)-1
        period$=str(period:"00")
        if period<=0 then 
             year$=str(num(year$)-1)
            period$=total_periods$
        endif
    next loop

rem --- Initializations for DocOut
        
        dim columns$[6,10]
        columns = 6
        columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="6"
        columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="20"
        columns$[2,0]="                ",      columns$[2,1]="C",columns$[2,2]="35"
        columns$[3,0]=header$[1]+" Usage    ", columns$[3,1]="C",columns$[3,2]="10"
        columns$[4,0]=header$[2]+" Usage    ", columns$[4,1]="C",columns$[4,2]="10"
        columns$[5,0]=header$[3]+" Usage    ", columns$[5,1]="C",columns$[5,2]="10"
        columns$[6,0]=header$[4]+" Usage    ", columns$[6,1]="C",columns$[6,2]="10"
            
rem --- Position ivm-02a sort file
            
    read (ivm02_dev,key=prefix$,knum="AO_BUYER_VEND_WH",dom=*next)
            
rem --- Read next ivm-02a sort record
    flag=1  

    while more

        k$=key(ivm02_dev,end=*break)
        read record (ivm02_dev) ivm02a$
        if pos(prefix$=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.product_type$+ivm02a.item_id$)<>1 then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
rem --- Level breaks?
        if ivm02a.warehouse_id$<>t0$ then gosub warehouse_break
        if ivm02a.product_type$<>t1$ or flag=1 then 
            gosub product_break
            gosub sub_heading
            flag=0
        endif    

rem --- Retrieve the item master record

        ivm01a.firm_id$=firm_id$
        ivm01a.item_id$=ivm02a.item_id$
        find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*continue) ivm01a$

rem --- Get item usage totals for the past four periods

        dim usage[4]
        for loop=1 to 4
            x$=header$[loop](4,4)+header$[loop](1,2)
            ivm12a.firm_id$=firm_id$
            ivm12a.warehouse_id$=ivm02a.warehouse_id$
            ivm12a.item_id$=ivm02a.item_id$
            ivm12a.year$=x$(1,4)
            ivm12a.period$=x$(5,2)
            find record (ivm12_dev,key=ivm12a.firm_id$+ ivm12a.warehouse_id$+ivm12a.item_id$+ivm12a.year$+ivm12a.period$,dom=*next) ivm12a$
            usage[loop]=ivm12a.qty_sold+ivm12a.qty_issued
        next loop

rem --- Print detail line

        OutVect!.addItem(ivm01a.item_id$)
        OutVect!.addItem(fnitem$(ivm01a.item_desc$,i[2],i[3],i[4]))
        OutVect!.addItem("")
        OutVect!.addItem(str(usage[1]:m2$))
        OutVect!.addItem(str(usage[2]:m2$))
        OutVect!.addItem(str(usage[3]:m2$))
        OutVect!.addItem(str(usage[4]:m2$))
        xwk=fnblank(2)
        OutVect!.addItem(months1$)
        xwk=fnblank(4)
        xwk=fnblank(2)
        OutVect!.addItem(dates1$)
        xwk=fnblank(4)
        xwk=fnblank(2)
        OutVect!.addItem(dashes1$)
        xwk=fnblank(4)

rem --- If there are more than 13 periods, print second set

        if mpm01a.no_of_pers>=14 then 
            xwk=fnblank(2)
            OutVect!.addItem(months1$)
            xwk=fnblank(4)
            xwk=fnblank(2)
            OutVect!.addItem(dates1$)
            xwk=fnblank(4)
            xwk=fnblank(2)
            OutVect!.addItem(dashes1$)
            xwk=fnblank(4)
        endif
    wend 

done: rem --- All done

           goto std_exit

warehouse_break: rem --- Warehouse break

        dim w0$(160)
        ivm10c.firm_id$=firm_id$
        ivm10c.record_id_c$="C"
        ivm10c.warehouse_id$=ivm02a.warehouse_id$
        ivm10c.short_name$="Unknown Warehouse"
        find record (ivm10c_dev,key=ivm10c.firm_id$+ivm10c.record_id_c$+ivm10c.warehouse_id$,dom=*next) ivm10c$
        h4$="   Warehouse: "+ivm10c.warehouse_id$+"  "+cvs(ivm10c.short_name$,2)
        l=l9+1
        t0$=ivm02a.warehouse_id$,t1$=""
        return

product_break: rem --- Product break

        dim y0$(32)
        ivm10a.firm_id$=firm_id$
        ivm10a.record_id_a$="A"
        ivm10a.product_type$=ivm02a.product_type$
        ivm10a.code_desc$="Unknown Product Type"
        find record (ivm10_dev,key=ivm10a.firm_id$+ivm10a.record_id_a$+ivm10a.product_type$,dom=*next) ivm10a$
        h5$="Product Type: "+ivm10a.product_type$+" "+cvs(ivm10a.code_desc$,2)
        l=l9+1
        t1$=ivm02a.product_type$
        return

sub_heading: rem --- Sub Heading

        subheading$=h5$
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        HdrVect!.addItem(subheading$)
        blank=fnblank(7)
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")


rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

rem    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
