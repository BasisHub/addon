rem --- Pegging Report (Input Overlay)
rem --- Program mpr_pegging v8.0.0 25Mar2008 (mpr_fa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (03/25/2008 12:04:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=18,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="apm-01",ids$[1]="APM_VENDMAST"
    files$[2]="APS_PARAMS",ids$[2]="APS_PARAMS"
    files$[3]="arm-01",ids$[3]="ARM_CUSTMAST"
    files$[4]="ARS_PARAMS",ids$[4]="ARS_PARAMS"
    files$[5]="bmm-01",ids$[5]="BMM_BILLMAST"
    files$[6]="GLS_PARAMS",ids$[6]="GLS_PARAMS"
    files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
    files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
    files$[9]="ivm-05",ids$[9]="IVM_ITEMVEND"
    files$[10]="IVC_WHSECODE",ids$[10]="IVC_WHSECODE"
    files$[11]="ivm-12",ids$[11]="IVM_ITEMACT"
    files$[12]="IVS_PARAMS",ids$[12]="IVS_PARAMS"
    files$[13]="IVS_ABCPARAM",ids$[13]="IVS_ABCPARAM"
    files$[14]="mpe-05",ids$[14]="MPE_PEGGING"
    files$[15]="mpm-01",ids$[15]="MPM_FORECAST"
    files$[16]="sfe-01",ids$[16]="SFE_WOMASTR"
    files$[17]="SFS_PARAMS",ids$[17]="SFS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[1]
    aps01_dev=channels[2]
    arm01_dev=channels[3]
    ars01_dev=channels[4]
    bmm01_dev=channels[5]
    gls01_dev=channels[6]
    ivm01_dev=channels[7]
    ivm02_dev=channels[8]
    ivm05_dev=channels[9]
    ivm10c_dev=channels[10]
    ivm12_dev=channels[11]
    ivs01_dev=channels[12]
    ivs01c_dev=channels[13]
    mpe05_dev=channels[14]
    mpm01_dev=channels[15]
    sfe01_dev=channels[16]
    sfs01_dev=channels[17]

rem --- Dimension string templates

    dim apm01a$:templates$[1],aps01a$:templates$[2],arm01a$:templates$[3],
:       ars01a$:templates$[4],bmm01a$:templates$[5],gls01a$:templates$[6],
:       ivm01a$:templates$[7],ivm02a$:templates$[8],
:       ivm05a$:templates$[9],ivm10c$:templates$[10],ivm12a$:templates$[11],
:       ivs01a$:templates$[12],ivs01c$:templates$[13],mpe05a$:templates$[14],
:       mpm01a$:templates$[15],sfe01a$:templates$[16],sfs01a$:templates$[17]

rem --- Assign form input values to local variables

    dim sel$[12];sel$[0]="Unknown"
    forecast$=Option!.getOptionData("forecast")
    whse$=Option!.getOptionData("warehouse_id")
    option$=Option!.getOptionData("item_type")
    begitem$=Option!.getOptionData("item_id_1")
    enditem$=Option!.getOptionData("item_id_2")
    sel$[1]=Option!.getOptionData("rep_trans_type1")
    sel$[2]=Option!.getOptionData("rep_trans_type2")
    sel$[3]=Option!.getOptionData("rep_trans_type3")
    sel$[4]=Option!.getOptionData("rep_trans_type4")
    sel$[5]=Option!.getOptionData("rep_trans_type5")
    sel$[6]=Option!.getOptionData("rep_trans_type6")
    sel$[7]=Option!.getOptionData("rep_trans_type7")
    sel$[8]=Option!.getOptionData("rep_trans_type8")
    sel$[9]=Option!.getOptionData("rep_trans_type9")
    sel$[10]=Option!.getOptionData("rep_trans_type10")
    sel$[11]=Option!.getOptionData("rep_trans_type11")
    sel$[12]=Option!.getOptionData("rep_trans_type12")
    include$=Option!.getOptionData("incl_alt_vend")
    begper=num(Option!.getOptionData("period_1"))
    endper=num(Option!.getOptionData("period_2"))

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    ivs01c_key$=firm_id$+"IV02"
    find record (ivs01c_dev,key=ivs01c_key$,err=std_missing_params) ivs01c$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$
    mpm01a_key$=firm_id$+forecast$
    find record (mpm01_dev,key=mpm01a_key$,err=std_missing_params) mpm01a$

rem --- Parameters

    dim i[4],info$[20],factors[25]
    number=1
    headings=6,op$="N",sf$="N"
    n1$=sysinfo.firm_name$,n2$="MP",n3$=sysinfo.task_desc$
    today$=sysinfo.system_date$
    i[0]=num(ivs01a.item_id_len$)
    i[1]=num(ivs01a.precision$)
    i[2]=num(ivs01a.desc_len_01$)
    i[3]=num(ivs01a.desc_len_02$)
    i[4]=num(ivs01a.desc_len_03$)
    max_period$=gls01a.total_pers$
    curr_period$=ivs01a.current_per$
    curr_year$=ivs01a.current_year$
    ivlength=i[0]
    ivprecision=i[1]
    day_of_month=num(sysinfo.system_date$(7,2))
    for x=0 to 25
        factors[x]=num(FIELD(ivs01c$,"abc_factors_"+str((x+1):"00")))
    next x
    aplength=num(sfs01a.empl_no_len$)
    apmask$=m0$,apmask=len(apmask$)
    call pgmdir$+"adc_application.aon","OP",info$[all]
    op$=info$[20]
    call pgmdir$+"adc_application.aon","SF",info$[all]
    sf$=info$[20]
    if op$="Y"
        arlength=num(sfs01a.empl_no_len$)
        armask$=m0$,armask=len(armask$)
    endif
shop_floor:
    if sf$="Y" then sf$=sfs01a.ar_interface$

initializations: rem --- Initializations

    precision ivprecision
    dim headings$[headings]
    dim description$[number],field[number],position[number],length[number]
    mp=26
    m5$="###0-"
    m3$=ivs01a.cost_mask$
    m2$=ivs01a.unit_mask$
    m5=len(m5$),m3=len(m3$),headings$[0]=n1$,headings$[1]=n3$
    l9=59
    l=l9+1,clock$="",when$=sysinfo.system_date$,page=0,width=132
    dw=79-(41+ivlength)
    typecodes$="ABCDEFGHIJKL",typecodes=len(typecodes$)
    selection$=""
    for x=1 to 12
        if sel$[x] = "Y" then selection$=selection$+typecodes$(x,1)
    next x
    if selection$=typecodes$ then selection$=""

    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15

rem --- report headings

    h5$="Forecast: "+forecast$
    h6$="Warehouse: "+whse$
    if option$="PUR" then option$="A";h4$="Purchased Items Only"
:   else if option$="PRO" then option$="B";h4$="Production Items Only"
:   else h4$="All Items"
    h7$="Beginning Item: "+cvs(begitem$,2)
    h8$="   Ending Item: "+cvs(enditem$,2)
    if begper<>1 or endper<>mpm01a.no_of_pers then p9$="Periods: "+str(begper)+" Through "+str(endper)
:   else p9$="All Periods"
    p9$="All Periods"

done: rem --- Is the above information correct?

    run pgmdir$+"mpr_pegging_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
