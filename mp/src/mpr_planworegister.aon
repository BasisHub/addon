rem --- Planned Work Order Register (Input Overlay)
rem --- Program mpr_planworegister v8.0.0 02Feb2008 (mpr_ja)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/02/2008 02:42:17)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=13,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="bmm-01",ids$[1]="BMM_BILLMAST"
        files$[2]="bmm-02",ids$[2]="BMM_BILLMAT"
        files$[3]="bmm-03",ids$[3]="BMM_BILLOPER"
        files$[4]="bmm-05",ids$[4]="BMM_BILLSUB"
        files$[5]="bmm-08",ids$[5]="BMC_OPCODES"
        files$[6]="bmm-09",ids$[6]="BMM_BILLCMTS"
        files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
        files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
        files$[9]="ivc_buycode",ids$[9]="IVC_BUYCODE"
        files$[10]="ivs_params",ids$[10]="IVS_PARAMS"
        files$[11]="mpe-05",ids$[11]="MPE_PEGGING"
        files$[12]="mpm-01",ids$[12]="MPM_FORECAST"
        files$[13]="mpw-05",ids$[13]="MPW_PLANWO"
        options$[13]="C"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        bmm01_dev=channels[1]
        bmm02_dev=channels[2]
        bmm03_dev=channels[3]
        bmm05_dev=channels[4]
        bmm08_dev=channels[5]
        bmm09_dev=channels[6]
        ivm01_dev=channels[7]
        ivm02_dev=channels[8]
        ivm10f_dev=channels[9]
        ivs01_dev=channels[10]
        mpe05_dev=channels[11]
        mpm01_dev=channels[12]
        mpw05_dev=channels[13]

rem --- Dimension string templates

    dim bmm01a$:templates$[1],bmm02a$:templates$[2],bmm03a$:templates$[3],
:       bmm05a$:templates$[4],bmm08a$:templates$[5],bmm09a$:templates$[6],
:       ivm01a$:templates$[7],ivm02a$:templates$[8],ivm10f$:templates$[9],
:       ivs01a$:templates$[10],mpe05a$:templates$[11],mpm01a$:templates$[12],
:       mpw05a$:templates$[13]


rem --- Assign form input values to local variables

        forecast$=Option!.getOptionData("forecast")
        whse$=Option!.getOptionData("warehouse_id")
        begdate$=Option!.getOptionData("date_opened_1")
        enddate$=Option!.getOptionData("date_opened_2")

rem --- Retrieve parameter records

        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        mpm01a_key$=firm_id$+forecast$
        find record (mpm01_dev,key=mpm01a_key$,err=std_missing_params) mpm01a$

rem --- Parameters

        dim i[4]
        headings=5
        number=1
        i[0]=ivs01a.item_id_len
        i[1]=num(ivs01a.precision$)
        i[2]=num(ivs01a.desc_len_01$)
        i[3]=num(ivs01a.desc_len_02$)
        i[4]=num(ivs01a.desc_len_03$)
        iv_length=i[0]
        iv_precision=i[1]
    
rem --- Initializations

        precision iv_precision
        dim description$[number],field[number],position[number],length[number]
        dim headings$[headings]
        headings$[0]=sysinfo.firm_name$
        l9=59,l=l9+1
        clock$=""
        when$=sysinfo.system_date$,page=0,width=132
        h5$=sysinfo.task_desc$+" For Forecast: "+forecast$
        headings$[1]=h5$
        h6$="Warehouse: "+whse$
        if begdate$<>"" then h7$="Beginning Date: "+begdate$ else h7$="Beginning Date: First"
        if enddate$<>"" then h8$="Ending Date: "+enddate$ else h8$="Ending Date: Last"
        headings$[2]=h6$
        headings$[3]=h7$
        headings$[4]=h8$
        run pgmdir$+"mpr_planworegister_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
