rem --- Planned Purchase Report (Input Overlay)
rem --- Program mpr_planpurch v8.0.0 29Jan2008 (mpr_aa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/29/2008 02:31:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="apm-01",ids$[1]="APM_VENDMAST"
    files$[2]="aps_params",ids$[2]="APS_PARAMS"
    files$[3]="gls_params",ids$[3]="GLS_PARAMS"
    files$[4]="ivm-01",ids$[4]="IVM_ITEMMAST"
    files$[5]="ivm-02",ids$[5]="IVM_ITEMWHSE"
    files$[6]="ivm-05",ids$[6]="IVM_ITEMVEND"
    files$[7]="ivc_whsecode",ids$[7]="IVC_WHSECODE"
    files$[8]="ivc_buycode",ids$[8]="IVC_BUYCODE"
    files$[9]="ivm-12",ids$[9]="IVM_ITEMACT"
    files$[10]="ivs_params",ids$[10]="IVS_PARAMS"
    files$[11]="mpe-03",ids$[11]="MPE_MATDET"
    files$[12]="mpm-01",ids$[12]="MPM_FORECAST"
    files$[13]="mpw-01",ids$[13]="MPW_DATETOT"
    options$[13]="C"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[1]
    aps01_dev=channels[2]
    gls01_dev=channels[3]
    ivm01_dev=channels[4]
    ivm02_dev=channels[5]
    ivm05_dev=channels[6]
    ivm10c_dev=channels[7]
    ivm10f_dev=channels[8]
    ivm12_dev=channels[9]
    ivs01_dev=channels[10]
    mpe03_dev=channels[11]
    mpm01_dev=channels[12]
    mpw01_dev=channels[13]

rem --- Dimension string templates

    dim apm01a$:templates$[1],aps01a$:templates$[2],gls01a$:templates$[3],
:       ivm01a$:templates$[4],ivm01a1$:templates$[4],ivm02a$:templates$[5],
:       ivm05a$:templates$[6],ivm10c$:templates$[7],ivm10f$:templates$[8],
:       ivm12a$:templates$[9],ivs01a$:templates$[10],mpe03a$:templates$[11],
:       mpm01a$:templates$[12],mpw01a$:templates$[13]

rem --- Assign form input values to local variables

    forecast$=Option!.getOptionData("forecast")
    whse$=Option!.getOptionData("warehouse_id")
    begvend$=Option!.getOptionData("vendor_id_1")
    endvend$=Option!.getOptionData("vendor_id_2")
    include$=Option!.getOptionData("incl_alt_vend")
    buyer$=Option!.getOptionData("buyer_code")
    begitem$=Option!.getOptionData("item_id_1")
    enditem$=Option!.getOptionData("item_id_2")
    begper=num(Option!.getOptionData("period_1"))
    endper=num(Option!.getOptionData("period_2"))

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    mpm01a_key$=firm_id$+forecast$
    find record (mpm01_dev,key=mpm01a_key$,err=std_missing_params) mpm01a$
  
rem --- Parameters

    dim g2$(10),g3$(325),g4$(32),i[6],abcp[25],factors[25]
    n1$=sysinfo.firm_name$,n2$="MP",n3$=sysinfo.task_desc$
    i[0]=ivs01a.item_id_len
    ivlength=i[0],ivprecision=num(ivs01a.precision$)
    i[2]=num(ivs01a.desc_len_01$)
    i[3]=num(ivs01a.desc_len_02$),i[4]=num(ivs01a.desc_len_03$)
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",m0$,0,m0
    aplength=m0
    number=1,headings=2

rem --- Initializations

    precision ivs01_precision
    dim description$[number],field[number],position[number],length[number]
    headings=7
    dim headings$[headings]
    headings$[0]=n1$
    headings$[1]=n3$,l9=59,l=l9+1
    clock$=""
    when$=sysinfo.system_date$,page=0,width=152
    max_period$=gls01a.total_pers$
    curr_period$=ivs01a.current_per$
    curr_year$=ivs01a.current_year$

    h5$=" For Forecast: "+forecast$
    headings$[1]=headings$[1]+h5$
    h6$="Warehouse: "+whse$
    headings$[2]=h6$
    begvend$=cvs(begvend$,1+2)
    if begvend$<>"" then h3$="Beginning Vendor: "+begvend$ else h3$="Beginning Vendor: First"
    headings$[3]=h3$
    endvend$=cvs(endvend$,1+2)
    if endvend$<>"" then h4$="   Ending Vendor: "+endvend$ else h4$="Ending Vendor: Last"
    headings$[4]=h4$
    buyer$=cvs(buyer$,1+2)
    if buyer$<>"" then h9$="Buyer Code: "+buyer$ else h9$="Buyer Code: All"
    headings$[5]=h9$
    begitem$=cvs(begitem$,1+2)
    if begitem$<>"" then h7$="Beginning Item: "+begitem$ else h7$="Beginning Item: First"
    headings$[6]=h7$
    enditem$=cvs(enditem$,1+2)
    if enditem$<>"" then h8$="   Ending Item: "+enditem$ else h8$="Ending Item: Last"
    headings$[7]=h8$
    
rem --- Resize masks as needed for report

	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,m3

    m4=m2
    m5$="###0-",m5=len(m5$)
    x=m1

next_overlay:

    run pgmdir$+"mpr_planpurch_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
