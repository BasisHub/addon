rem --- Planned Work Order Register (Report Overlay)
rem --- Program mpr_planworegister_o1 v8.0.0 02Feb2008 (mpr_jb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/02/2008 02:45:51)
rem --- Last modified on 28/02/2008 14:19

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- This overlay reads through the Pegging Transaction Detail
rem --- file and processes Planned Work Orders, writing them to
rem --- a work file with accumulate totals by date. That work file
rem --- is then used by the update overlay to create actual planned
rem --- work orders in the Shop Floor Control application.

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock Files

        call pgmdir$+"mpc_openalias.aon",mpe05_dev,"mpe-05","MPE_PEGGING",firm_id$,forecast$,filename$,status
        if status then goto std_exit

rem --- Initializations

        precision iv_precision
        dim o[9]
        prefix$=cvs(firm_id$+forecast$+whse$,2)
        last$="",l1=0,total=0,done=0
        current_item$=""
        more=1
        call stbl("+DIR_SYP")+"bac_key_template.bbj","MPE_PEGGING","PRIMARY",mpe05a_key_tpl$,rd_table_chans$[all],status$

rem --- Resize masks

        call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,m1
        call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,m2
        call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,m3
        call pgmdir$+"adc_getmask.aon","","IV","I","",ivIMask$,0,0

rem ---  column heading

        dim columns$[7,10]
        columns=7
            columns$[0,0]="Item",          columns$[0,1]="C",columns$[0,2]="8"
            columns$[1,0]="Description",   columns$[1,1]="C",columns$[1,2]="25"
            columns$[2,0]="UM",            columns$[2,1]="C",columns$[2,2]="4"
            columns$[3,0]="Buyer",         columns$[3,1]="C",columns$[3,2]="20"
            columns$[4,0]="Unit Cost",     columns$[4,1]="N",columns$[4,2]="8",columns$[4,3]=m3$
            columns$[5,0]="Date Reqd",     columns$[5,1]="C",columns$[5,2]="8"
            columns$[6,0]="Qty Reqd",      columns$[6,1]="N",columns$[6,2]="8",columns$[6,3]=m2$,columns$[6,10]="T"
            columns$[7,0]="Extension",     columns$[7,1]="N",columns$[7,2]="8",columns$[7,3]=m1$,columns$[7,10]="T"

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,mpe05_dev,1,meter_num,status

rem --- Variable definitions

rem --- CURRENT_ITEM$: Current inventory item key
rem --- ITEM_AMT     : Total extended amount for item
rem --- ITEM_QTY     : Total quantity of item required
rem --- QTY          : Quantity required for pegged transaction
rem --- TOTAL        : Sum of extended amounts for report
rem --- Position mpe-05 Pegging Transaction Detail File


    read (mpe05_dev,key=firm_id$,dom=*next)
    dim mpe05a_key$:mpe05a_key_tpl$

rem --- Read next mpe-05 record

    while more
        mpe05a_key$=key(mpe05_dev,end=*break)
        if pos(prefix$=mpe05a_key$)<>1 then break
        if (mpe05a_key.warehouse_id$+mpe05a_key.item_id$+mpe05a_key.trns_date$)<>last$ then
            milestone$=mpe05a_key.warehouse_id$+" "+mpe05a_key.item_id$+" "+fndate$(mpe05a_key.trns_date$)
            call pgmdir$+"adc_progress.aon","S","",milestone$,"","",0,0,1,meter_num,status
            last$=mpe05a_key.warehouse_id$+mpe05a_key.item_id$+mpe05a_key.trns_date$
        endif

rem --- Read next mpe-05 Pegging Transaction Detail record

        read record (mpe05_dev) mpe05a$
        if mpe05a.source_code$<>"H" then continue

rem --- New inventory item?

        if mpe05a.item_id$<>current_item$ then 

rem --- Make sure a bill of materials exists for this item

            find record (bmm01_dev,key=(firm_id$+mpe05a.item_id$),dom=*continue) bmm01a$
            if bmm01a.phantom_bill$<>"N" then 

rem --- This item is a phantom bill, skip remaining entries

                read (mpe05_dev,key=mpe05a.firm_id$+mpe05a.forecast$+mpe05a.warehouse_id$+mpe05a.item_id$+$ff$,dom=*continue)

            endif

rem --- Perform level break for new inventory item

            gosub item_break
        endif

rem --- Print it

        qty=mpe05a.planned_rel
        if begdate$<>"" and mpe05a.trns_date$<begdate$ then continue
        if enddate$<>"" and mpe05a.trns_date$>enddate$ then continue 
        extension=qty*cost
        l=l+1,l1=l1+1
        OutVect!.addItem(fnmask$(item$,ivIMask$))
        OutVect!.addItem(desc$)
        OutVect!.addItem(um$)
        OutVect!.addItem(buyer$)
        OutVect!.addItem(cost$)
        OutVect!.addItem(fndate$(mpe05a.reqd_date$))
        OutVect!.addItem(str(qty))
        OutVect!.addItem(str(extension))

rem --- Generate (or update if existing) work file record for the date this item is required.

        dim d0$(35)
        d0$(1)=mpe05a.firm_id$+mpe05a.forecast$+mpe05a.warehouse_id$+mpe05a.item_id$+mpe05a.reqd_date$
        mpw05a.firm_id$=mpe05a.firm_id$
        mpw05a.forecast$=mpe05a.forecast$
        mpw05a.warehouse_id$=mpe05a.warehouse_id$
        mpw05a.item_id$=mpe05a.item_id$
        mpw05a.reqd_date$=mpe05a.reqd_date$

        find record (mpw05_dev,key=d0$,dom=*next) mpw05a$

        mpw05a.unit_measure$=um$
        mpw05a.trns_date$=mpe05a.trns_date$
        mpw05a.conv_factor=factor
        mpw05a.unit_cost=cost
        mpw05a.qty_required=mpw05a.qty_required+qty

        write record (mpw05_dev,key=d0$) mpw05a$

        item_qty=item_qty+qty
        item_amt=item_amt+extension
        total=total+extension
        item$=""
        desc$="",um$="",buyer$="",cost$="",qty=0

rem --- Loop back for next record

    wend

done: rem --- All done

        done=1
        gosub item_break
        xwk=fnblank(9)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        OutVect!.addItem("Totals For Report")
        xwk=fnblank(5)
        OutVect!.addItem(str(total))
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk=fnblank(9)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
        run pgmdir$+"mpu_woregister.aon"
        goto std_exit

item_break: rem --- Item Break - Print totals for previous item (if any)

    if current_item$<>"" and l1<>0 then
        xwk=fnblank(9)
        OutVect!.addItem("Totals For Item")
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk=fnblank(4)
        OutVect!.addItem(str(item_qty))
        OutVect!.addItem(str(item_amt))
        xwk=fnblank(8)
    endif

rem --- Retrieve item master, warehouse detail and buyer information for this inventory item.

    if !done then 

        dim desc$(60)
        current_item$=mpe05a.item_id$
        item_qty=0
        item_amt=0
        find record (ivm01_dev,key=(firm_id$+mpe05a.item_id$),dom=*next) ivm01a$
        find record (ivm02_dev,key=(firm_id$+mpe05a.warehouse_id$+mpe05a.item_id$),dom=*next) ivm02a$
        item$=current_item$
        desc$(1)=fnitem$(ivm01a.item_desc$,i[2],i[3],i[4]),buyer$=ivm01a.buyer_code$
        cost$=str(ivm02a.unit_cost)
        um$=ivm01a.purchase_um$
        cost=ivm02a.unit_cost
        factor=ivm01a.conv_factor
        find record (ivm10f_dev,key=(firm_id$+"F"+buyer$),dom=*return) ivm10f$
        buyer$=ivm10f.buyer_code$+" "+cvs(ivm10f.code_desc$,2)
        l1=0
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
