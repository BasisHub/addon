rem --- Transaction Selection for the Pegging Report
rem --- Program mpc_ta v8.0.0 31Jan2008 (mpc_ta)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/31/2008 05:21:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    enter selections$,fkey

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=1,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="mps-01a",ids$[1]=""
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    mps01a_dev=channels[1]

rem --- Dimension string templates

    dim mps01a$:templates$[1]

rem --- Retrieve parameter records

    mps01a_key$=firm_id$+"MP00"
    find record (mps01a_dev,key=mps01a_key$,err=std_missing_params) mps01a$

rem --- Parameters

    typecodes$="ABCDEFGHIJKL"
    typecodes=len(typecodes$)

initializations: rem --- Initializations

    dim selections[typecodes]
    fkey=0
    height=17,width=42,win_y=3,win_x=19,column=width-6
    selections$=""
    title$="Select Transactions to Include"
    more=1

rem --- Background

    call pgmdir$+"syc_wa.bbx",0,width,height,win_x,win_y,title$,name$
    print 'sb',@(2,1),"A)                On Hand Balance",@(2,2),"B)              On Purchase Order",@(2,3),"C)                  On Work Order",@(2,4),"D)              Forecasted Demand",@(2,5),"E)               Dependent Demand",@(2,6),"F)       Committed to Sales Order",@(2,7),"G)        Committed to Work Order",@(2,8),"H)     Planned Work Order Release",@(2,9),"I) Planned Purchase Order Release",@(2,10),"J)     Planned Work Order Receipt",@(2,11),"K) Planned Purchase Order Receipt",@(2,12),"L)       PO Requisitions On Order",'sf',
    gosub display_fields

top: rem --- Initializations for first field

    i0=0

selection: rem --- Allow user to check off which transactions to include

    v2$="N"
    if selections[i0+1] then let v2$="Y"
    v0$="Y"
    v1$="C",v3$="",v0=1,v1=column,v2=i0+1
    v4$="Press <F1> To Select All Transactions"
    on v3 goto check_input,select_all_trans,flow_control,selection,flow_control
check_input:
    if pos(v$="YN")=0 then goto selection
    selections[i0+1]=v$="Y"
    goto flow_control

flow_control: rem --- Flow Control

    if v3=4 then goto done
    if v3<>2 goto increment
    if i0>0 then let i0=i0-1
    goto next_field
increment:
    i0=i0+1
next_field:
    on i0 goto selection,selection,selection,selection,selection,selection,selection,selection,selection,selection,selection,selection,done
    i0=0

done: rem --- Is the above information correct?

    gosub display_fields
    v4$="Is The Above Correct (Y/N/<F1>=All)?"
    v0$="Y"
    v1$="C",v2$="Y",v3$="",v0=1,v1=fnv(v4$),v2=22
    on v3 goto check_answer,select_all_trans,done,done,std_exit,check_answer,std_exit
check_answer:
    on pos(v$="YN") goto done,set_exit,top

select_all_trans: rem --- Select all transactions

    for x=1 to typecodes
        selections[x]=1
    next x
    goto done

set_exit: rem --- Set arguments and exit

    fkey=v3
    selections$=""
    for x=1 to typecodes
        if selections[x] then let selections$=selections$+typecodes$(x,1)
    next x
    goto std_exit

display_fields: rem --- Display fields

    for x=1 to typecodes
        x$="N"
        if selections[x] then let x$="Y"
        print @(column,x),x$,
    next x
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem ----#endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
