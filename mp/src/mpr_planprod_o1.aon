rem --- Planned Production Report (Report Overlay)
rem --- Program mpr_planprod_o1 v8.0.0 30Jan2008 (mpr_bb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/30/2008 02:26:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
    
    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open the file corresponding to mpe-03 and the selected forecast type and warehouse id

    call pgmdir$+"mpc_openalias.aon",mpe03_dev,"mpe-03","MPE_MATDET",firm_id$,forecast$,filename$,status
    if status then goto std_exit
    
rem --- Initializations

    more=1
    precision ivs01_precision
    prefix$=firm_id$+forecast$+whse$
    lines=6
    number=endper-begper+3
    headings=6
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[1]=headings$[1]+" For "+h5$
    headings$[3]="Warehouse Code: "+whse$
    if buyer$="" then headings$[4]="Buyer Code: All" else headings$[4]="Buyer Code: "+buyer$
    if begitem$="" then headings$[5]="Item: From First" else headings$[5]="From "+begitem$
    if enditem$="" then headings$[5]=headings$[5]+" To Last" else headings$[5]=headings$[5]+" To "+enditem$
    headings$[6]="Period: From "+str(begper)+" To "+str(endper)

rem --- Print positions

    dim o[10],titles$[lines]
    o[10]=width-8
    o[9]=o[10]-10,o[8]=o[9]-10,o[7]=o[8]-11
    o[6]=o[7]-9
    o[5]=o[6]-m2-1,o[4]=o[5]-m2-1,o[3]=o[4]-4
    o[2]=o[3]-m5-1
    o[1]=p[0],dw=o[2]-o[1]+1,x=width-o[1]-15
    numcol=int(x/m2)
    if numcol>number then numcol=number
    titles$[0]="Forecast"
    titles$[1]="Gross Requirement"
    titles$[2]="Scheduled Receipt"
    titles$[3]="Projected Available"
    titles$[4]="Net Requirement"
    x$="No Bill Of Materials Defined"
    titles$[5]="Plan Order Release"
    titles$[6]="Plan Order Receipt"
    dim nb$(width-o[5],"-")
    begper=begper-1
    endper=endper-1,position=width-m2*numcol
    hr=width-max(len(h7$),len(h8$))

rem --- Column Heading

    cols=10
    if endper-begper+1=9 then cols=12
    if endper-begper+1=8 then cols=11
    dim columns$[cols,10]
    columns=cols

    columns$[0,0]="Item",           columns$[0,1]="C",  columns$[0,2]="5"
    columns$[1,0]="Description",    columns$[1,1]="C",  columns$[1,2]="18"
    columns$[2,0]="Lead^Time",      columns$[2,1]="N",  columns$[2,2]="5", columns$[2,3]=m5$
    columns$[3,0]="Rev",            columns$[3,1]="C",  columns$[3,2]="7"
    columns$[4,0]="EOQ",            columns$[4,1]="N",  columns$[4,2]="6", columns$[4,3]=m1$
    columns$[5,0]="Lot^Size",       columns$[5,1]="C",  columns$[5,2]="7"
    columns$[6,0]="Phantom^Bill?",  columns$[6,1]="C",  columns$[6,2]="7"
    columns$[7,0]="Est.^Yield",     columns$[7,1]="C",  columns$[7,2]="8"
    columns$[8,0]="Bill^Created",   columns$[8,1]="C",  columns$[8,2]="8"
    columns$[9,0]="Last^Revision",  columns$[9,1]="C",  columns$[9,2]="8"
    columns$[10,0]="Last^Used",     columns$[10,1]="C", columns$[10,2]="8"

    if endper-begper+1=9 then 
        columns$[11,0]="",            columns$[11,1]="C",columns$[11,2]="8"
        columns$[12,0]="",            columns$[12,1]="C",columns$[12,2]="8"
    endif
    if endper-begper+1=8 then 
        columns$[11,0]="",            columns$[11,1]="C",columns$[11,2]="8"
    endif

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,mpe03_dev,1,meter_num,status

rem --- Position file

    read (mpe03_dev,key=prefix$+begitem$,dom=*next)

rem --- Stores the mpe03a numeric fields for Build detail blocks

    dim mpe03a_arrfield$[162]
    x= 0
    mpe03_field$=fattr(mpe03a$,"")
    mpe03_field$=mpe03_field$(pos("qty_on_hand"=cvs(mpe03_field$,8)))
    while mpe03_field$<>""
       xfield$=mpe03_field$(1,pos($0A$=mpe03_field$)-1)
       mpe03a_arrfield$[x]=xfield$
       x=x+1
       mpe03_field$=mpe03_field$(pos($0A$=mpe03_field$)+1)
    wend

rem --- Stores the mpe03a date fields for Build detail blocks

    dim mpe03a_datefield$[26]
    x= 0
    mpe03_field$=fattr(mpe03a$,"")
    mpe03_field$=mpe03_field$(pos("plan_date"=cvs(mpe03_field$,8)))
    while mpe03_field$<>""
       xfield$=mpe03_field$(1,pos($0A$=mpe03_field$)-1)
       mpe03a_datefield$[x]=xfield$
       x=x+1
       mpe03_field$=mpe03_field$(pos($0A$=mpe03_field$)+1)
       if cvs(xfield$,8)="qty_on_hand" then break
    wend

rem --- Stores the mpm01a date fields for Build detail blocks

    dim mpm01a_datefield$[26]
    x= 0
    mpm01a_field$=fattr(mpm01a$,"")
    mpm01a_field$=mpm01a_field$(pos("plan_date"=cvs(mpm01a_field$,8)))
    while mpm01a_field$<>""
       xfield$=mpm01a_field$(1,pos($0A$=mpm01a_field$)-1)
       mpm01a_datefield$[x]=xfield$
       x=x+1
       mpm01a_field$=mpm01a_field$(pos($0A$=mpm01a_field$)+1)
        if cvs(xfield$,8)="no_of_pers" then break
    wend

rem --- Stores the mpe01a numeric fields for Build detail blocks

    dim mpe01a_arrfield$[27]
    x= 0
    mpe01a_field$=fattr(mpe01a$,"")
    mpe01a_field$=mpe01a_field$(pos("forecast_qty"=cvs(mpe01a_field$,8)))
    while mpe01a_field$<>""
       xfield$=mpe01a_field$(1,pos($0A$=mpe01a_field$)-1)
       mpe01a_arrfield$[x]=xfield$
       x=x+1
       mpe01a_field$=mpe01a_field$(pos($0A$=mpe01a_field$)+1)
    wend

rem --- Read next mpe-03 record

    while more

        read record (mpe03_dev,end=done) mpe03a$
        if pos(prefix$=mpe03a.firm_id$+mpe03a.forecast$+mpe03a.warehouse_id$+mpe03a.item_id$+mpe03a.mrp_type$)<>1 then break
        if cvs(enditem$,2)<>"" then
            if mpe03a.item_id$>enditem$ then
                break
            endif
        endif
        if pos(mpe03a.mrp_type$="B")=0 then continue
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Additional reads

        ivm01a.firm_id$=firm_id$
        ivm01a.item_id$=mpe03a.item_id$
        ivm02a.firm_id$=firm_id$
        ivm02a.warehouse_id$=whse$
        ivm02a.item_id$=mpe03a.item_id$
        mpe01a.firm_id$=mpe03a.firm_id$
        mpe01a.forecast$=mpe03a.forecast$
        mpe01a.warehouse_id$=mpe03a.warehouse_id$
        mpe01a.item_id$=mpe03a.item_id$
        find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next) ivm01a$
        find record (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next) ivm02a$
        if ivm01a.stock_level$="I" then
            iv_buyer$=ivm01a.buyer_code$
        else
            iv_buyer$=ivm02a.buyer_code$
        endif

        if buyer$<>"" then
            if iv_buyer$<>buyer$ then
                continue
            endif
        endif
        find record (mpe01_dev,key=mpe01a.firm_id$+mpe01a.forecast$+mpe01a.warehouse_id$+mpe01a.item_id$,dom=*next) mpe01a$
        desc$=fnitem$(ivm01a.item_desc$,p[2],p[3],p[4])

rem --- Bill of materials?

        revcode$=""
        lot$=""
        phantom$=""
        yield$=""
        created$=""
        revision$=""
        used$=""
        bill$=""
        bmm01a.firm_id$=ivm01a.firm_id$
        bmm01a.bill_no$=ivm01a.item_id$
        find record (bmm01_dev,key=bmm01a.firm_id$+bmm01a.bill_no$,dom=print_item_heading) bmm01a$

rem --- Format bill fields

        revcode$=bmm01a.bill_rev$
        phantom$="No"
        created$=fndate$(bmm01a.create_date$)
        revision$=fndate$(bmm01a.lstrvs_date$)
        used$=fndate$(bmm01a.lstact_date$)
        bill$="Y"
        if bmm01a.phantom_bill$="Y" then phantom$="Yes"
        if bmm01a.est_yield>999.99 then bmm01a.est_yield=999.99
        if bmm01a.est_yield<-999.99 then bmm01a.est_yield=-999.99
        yield$=str(bmm01a.est_yield:"-##0.00")+"%"
        lot$=str(bmm01a.std_lot_size:m1$)

print_item_heading: rem --- Print item heading

        gosub item_heading

rem --- Build detail

        dim required$[number],amounts[number,lines],plandate$[number]
        required$[1]="Begin"
        amounts[1,3]=mpe03a.qty_on_hand
        n=1
        for x=begper to endper
            p=x*6
            n=n+1
            plandate$[n]=fndate$(FIELD(mpe03a$,"plan_date_"+str(x+1:"00")))
            required$[n]=fndate$(FIELD(mpm01a$,"plan_date_"+str(x+1:"00")))
            amounts[n,0]=num(FIELD(mpe01a$,mpe01a_arrfield$[x]))
            amounts[n,1]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+2]))
            amounts[n,2]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+1]))
            amounts[n,3]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+6]))
            amounts[n,4]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+3]))
            amounts[n,5]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+4]))
            amounts[n,6]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+5]))
        next x

rem --- Detail printing initializations

        last=0
        required$[number]="Totals"
        for x=2 to number-1
            for n=0 to lines
                amounts[number,n]=amounts[number,n]+amounts[x,n]
            next n
        next x
        amounts[number,3]=num(FIELD(mpe03a$,mpe03a_arrfield$[p+6]))

rem ------- Print detail

        while more

            first=last+1
            last=first+numcol-1,needed=4+lines
            if first>number then break
            if last>number then last=number
            if l+needed>=l9 then
                gosub item_heading
            endif

rem ----------- Required By

            dim buffer$(width)
            buffer$(position-12)="Required By"
            a=fnblank(1)
            OutVect!.addItem("Required By")
            n=position

            for x=first to last
                buffer$(n+m2-9)=required$[x]
                OutVect!.addItem(required$[x])
                n=n+m2
            next x
            if endper-begper+1<7 then a=fnblank(columns-(endper-begper+1)-3)

rem ----------- Amounts

            for y=0 to lines
                dim buffer$(width)
                buffer$(position-20)=titles$[y]
                if y=0 then a=fnblank(1)
:               else if (endper-begper+1)<7 then a=fnblank(columns-(endper-begper+1)-3)
                OutVect!.addItem(cvs(titles$[y],3))
                n=position
                for x=first to last
                    if x<>1 or (x=1 and y=3) then
                       buffer$(n)=str(amounts[x,y]:m1$)
                       OutVect!.addItem(str(amounts[x,y]:m1$))
                    else
                       a=fnblank(1)
                    endif
                    n=n+m2
                next x
                if y<> lines then a=fnblank(1)
            next y

rem ----------- Plan Date

            dim buffer$(width)
            buffer$(position-10)="Plan Date"
            if (endper-begper+1)<7 then a=fnblank(columns-(endper-begper+1)-2)
:           else a=fnblank(1)
            OutVect!.addItem("Plan Date")
            n=position
            for x=first to last
                buffer$(n+m2-9)=plandate$[x]
                OutVect!.addItem(plandate$[x])
                n=n+m2
            next x
            l=l+needed
            if endper-begper+1=6 then a=fnblank(1)
:           else if endper-begper+1=5 then a=fnblank(2)
:           else if endper-begper+1=4 then a=fnblank(3)
:           else if endper-begper+1=3 then a=fnblank(4)
:           else if endper-begper+1=2 then a=fnblank(5)
:           else if endper-begper+1=1 then a=fnblank(6)

        wend

        if endper-begper+1=9 then a=fnblank(13)
:       else if endper-begper+1=8 then a=fnblank(12)
:       else a=fnblank(11)

rem --- Loop back for next record

    wend

done: rem --- All done

    goto std_exit
    
item_heading: rem --- Item Heading

    if bill$<>"" then
        OutVect!.addItem(ivm01a.item_id$)
        OutVect!.addItem(desc$)
        OutVect!.addItem(str(ivm01a.lead_time))
        OutVect!.addItem(revcode$)
        OutVect!.addItem(str(ivm01a.eoq))
        OutVect!.addItem(lot$)
        OutVect!.addItem(phantom$)
        OutVect!.addItem(yield$)
        OutVect!.addItem(created$)
        OutVect!.addItem(revision$)
        OutVect!.addItem(used$)
    else
        a=fnblank(13)
        OutVect!.addItem(ivm01a.item_id$)
        OutVect!.addItem(desc$)
        OutVect!.addItem(str(ivm01a.lead_time))
        a=fnblank(1)
        OutVect!.addItem(str(ivm01a.eoq))
        OutVect!.addItem(nb$)
        OutVect!.addItem(nb$)
        OutVect!.addItem(nb$)
        OutVect!.addItem(nb$)
        OutVect!.addItem(nb$)
        OutVect!.addItem(nb$)
    endif

    if endper-begper+1=9 then a=fnblank(15)
:   else if endper-begper+1=8 then a=fnblank(13)
:   else a=fnblank(11)
    l=l+2
    return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
        
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

    end
