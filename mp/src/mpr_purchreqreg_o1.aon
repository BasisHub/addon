rem --- Purchase Requisition Register (Report Overlay)
rem --- Program mpr_ib v8.0.0 27Mar2008 (mpr_ib)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (03/27/2008 02:36:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open Printer

        call pgmdir$+"mpc_openalias.aon",mpe05_dev,"mpe-05","MPE_PEGGING",firm_id$,forecast$,filename$,status
        if status then goto std_exit

rem --- Initializations

        more=1
        precision iv_precision
        dim o[9]
        prefix$=cvs(firm_id$+forecast$+whse$,2)
        last$="",l1=0
        hr=width-max(len(h7$),len(h8$))
        t0$=""
        t1$=""
        dim t[1]

		call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
		call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
		call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,m3

        dim columns$[7,10]
            columns = 7
            columns$[0,0]="Item",               columns$[0,1]="C",columns$[0,2]="6"
            columns$[1,0]="Description",        columns$[1,1]="C",columns$[1,2]="12"
            columns$[2,0]="UM",                 columns$[2,1]="C",columns$[2,2]="6"
            columns$[3,0]="Buyer",              columns$[3,1]="C",columns$[3,2]="15"
            columns$[4,0]="Unit^Cost",          columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m3$
            columns$[5,0]="Date^Required",      columns$[5,1]="C",columns$[5,2]="12"
            columns$[6,0]="Qty^Required ",      columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$,columns$[6,10]="T"
            columns$[7,0]="Extension",          columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$,columns$[7,10]="T"

rem --- Print positions

        o[7]=width-m1
        o[6]=o[7]-m2
        o[5]=o[6]-9
        o[4]=o[5]-m3
        o[3]=o[4]-25
        o[2]=o[3]-4
        o[1]=iv_length
        dw=o[2]-o[1]

rem --- retrieve template for MPX_REQVEND record key

        call stbl("+DIR_SYP")+"bac_key_template.bbj","MPX_REQVEND","PRIMARY",mpw03a_key_tpl$,table_chans$[all],status$
   
rem --- Sort mpe-05 transaction pegging detail. Only planned
rem --- purchase orders are being sorted in order to create
rem --- a list of requisitions needed by date.

        call pgmdir$+"adc_progress.aon","N","","","","",0,mpe05_dev,1,meter_num,status

        read (mpe05_dev,key=prefix$,dom=*next)

rem --- Read next mpe-05 transaction pegging detail record

    while more

        read record (mpe05_dev,end=*break) mpe05a$
        if pos(prefix$=mpe05a.firm_id$+mpe05a.forecast$+mpe05a.warehouse_id$)<>1 then break
        if mpe05a.source_code$<>"I" then continue
        if begdate$<>"" and mpe05a.trns_date$<begdate$ then
            continue
        endif
        if enddate$<>"" and mpe05a.trns_date$>enddate$ then
            continue
        endif
        mpw03a.firm_id$=mpe05a.firm_id$
        mpw03a.forecast$=mpe05a.forecast$
        mpw03a.warehouse_id$=mpe05a.warehouse_id$
        mpw03a.vendor_id$=mpe05a.vendor_id$
        mpw03a.item_id$=mpe05a.item_id$
        mpw03a.trns_date$=mpe05a.trns_date$
        mpw03a.peg_source$=mpe05a.source_code$
        mpw03a.seq_no$=mpe05a.seq_no$
        write record (mpw03_dev,key=mpw03a.firm_id$+mpw03a.forecast$+mpw03a.warehouse_id$+mpw03a.vendor_id$+mpw03a.item_id$+
:                     mpw03a.trns_date$+mpw03a.peg_source$+mpw03a.seq_no$) mpw03a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

    wend

rem --- Sort completed

        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

rem --- Position mpw-03 Requirements by Vendor/Date file

        call pgmdir$+"adc_progress.aon","N","","","","",0,mpw03_dev,1,meter_num,status
        last$=""
        read (mpw03_dev,key=firm_id$,dom=*next)

rem --- Read next mpw-03 Requirements by Vendor/Date record

        dim mpw03a_key$:mpw03a_key_tpl$
        mpm01a.no_of_pers=0
        mpm01a.days_in_per=0
        while more
            mpw03a_key$=key(mpw03_dev,end=*break)
            if pos(prefix$=mpw03a_key$)<>1 then break
            read (mpw03_dev,key=mpw03a_key$)
            if mpw03a_key.vendor_id$+mpw03a_key.item_id$<>last$ then 
                call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                last$=mpw03a_key.vendor_id$+mpw03a_key.item_id$
            endif

level_breaks: rem --- Level breaks

        if mpw03a_key.vendor_id$<>t0$ then gosub vendor_break
        if mpw03a_key.item_id$<>t1$ then gosub item_break

rem --- Retrieve associated pegging detail record

        mpe05a.firm_id$=mpw03a_key.firm_id$
        mpe05a.forecast$=mpw03a_key.forecast$
        mpe05a.warehouse_id$=mpw03a_key.warehouse_id$
        mpe05a.item_id$=mpw03a_key.item_id$
        mpe05a.trns_date$=mpw03a_key.trns_date$
        mpe05a.source_code$=mpw03a_key.peg_source$
        mpe05a.seq_no$=mpw03a_key.seq_no$

        find record (mpe05_dev,key=mpe05a.firm_id$+mpe05a.forecast$+mpe05a.warehouse_id$+mpe05a.item_id$+mpe05a.trns_date$+mpe05a.source_code$+
:                    mpe05a.seq_no$,dom=*continue) mpe05a$

        qty=mpe05a.planned_rel

rem --- Get Vendor/Item discount price if any

        cost=ivm02a.unit_cost

        ivm05a.firm_id$=firm_id$
        ivm05a.vendor_id$=apm01a.vendor_id$
        ivm05a.item_id$=ivm01a.item_id$

        find record (ivm05_dev,key=ivm05a.firm_id$+ivm05a.vendor_id$+ivm05a.item_id$,dom=detail_line) ivm05a$

        if ivm05a.unit_cost_01>0 and qty>=ivm05a.break_qty_01 then
            cost=ivm05a.unit_cost_01
        endif
        if ivm05a.unit_cost_02>0 and qty>=ivm05a.break_qty_02 then
            cost=ivm05a.unit_cost_02
        endif
        if ivm05a.unit_cost_03>0 and qty>=ivm05a.break_qty_03 then
            cost=ivm05a.unit_cost_03
        endif

detail_line: rem --- Print detail line

        x=qty*cost
        l=l+1
        l1=l1+1

        blank=fnblank(8)
        OutVect!.addItem(item$)
        OutVect!.addItem(desc$)
        OutVect!.addItem(um$)
        OutVect!.addItem(buyer$)
        OutVect!.addItem(str(cost))
        OutVect!.addItem(str(fndate$(mpe05a.reqd_date$)))
        OutVect!.addItem(str(qty))
        OutVect!.addItem(str(x))
        blank=fnblank(8)

        mpw04a.firm_id$=mpe05a.firm_id$
        mpw04a.forecast$=mpe05a.forecast$
        mpw04a.warehouse_id$=mpe05a.warehouse_id$
        mpw04a.item_id$=mpe05a.item_id$
        mpw04a.require_date$=mpe05a.reqd_date$

        find record (mpw04_dev,key=mpw04a.firm_id$+mpw04a.forcase$+mpw04a.warehouse_id$+mpw04a.vendor_id$+mpw04a.item_id$+
:                   mpw04a.trns_date$,err=*next) mpw04a$

        mpw04a.firm_id$=um$
        mpw04a.conv_factor=factor
        mpw04a.unit_cost=cost
        mpw04a.qty_required=mpw04a.qty_required+mpe05a.planned_rel

        if cvs(mpe05a.reqd_date$,2)<>"" then 
            mpw04a.require_date$=fndate$(fndate$(mpe05a.reqd_date$))
        endif

rem --- Update mpw-04 Item Requirements by Vendor

        write record (mpw04_dev,key=mpw04a.firm_id$+mpw04a.forecast$+mpw04a.warehouse_id$+mpw04a.vendor_id$+mpw04a.item_id$+
:                    mpw04a.trns_date$) mpw04a$
        mpm01a.no_of_pers=mpm01a.no_of_pers+qty
        mpm01a.days_in_per=mpm01a.days_in_per+x
        t[1]=t[1]+x
        total=total+x
        item$=""
        desc$="",um$="",buyer$="",cost$=""

rem --- Loop back for next record

    wend

done: rem --- All done

        t9$="END"
        gosub vendor_break
        blank=fnblank(8)
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))     
        blank=fnblank(5)   
        OutVect!.addItem("Totals For Report")
        OutVect!.addItem(str(total))
        OutVect!.addItem(str(t[1]))
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run pgmdir$+"mpu_updatereqreg.aon"
        goto std_exit

vendor_break: rem --- Vendor Break

    if t0$<>"" then
        gosub item_break
        if l1<>0 then
            TotVect!.addItem(str(OutVect!.size()/(columns+1)))     
            blank=fnblank(5)    
            OutVect!.addItem("Totals For Vendor")
            blank=fnblank(1)
            OutVect!.addItem(str(t[1]))
            l=l+1
        endif
   endif

new_vendor: rem --- Retrieve current vendor info

    if t9$<>"" then
        return
    endif    
    
    apm01a.firm_id$=firm_id$
    apm01a.vendor_id$=mpw03a_key.vendor_id$
    apm01a.vendor_name$="Unknown Vendor"
    t0$=apm01a.vendor_id$

    find record (apm01_dev,key=apm01a.firm_id$+apm01a.vendor_id$,dom=*next) apm01a$

    blank=fnblank(8)
    OutVect!.addItem(str(fnmask$(apm01a.vendor_id$,aps01a.vendor_output$)))
    OutVect!.addItem(apm01a.vendor_name$)
    blank=fnblank(6)

    l=l+2

    return

item_break: rem --- Item Break

    if t1$<>"" then
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))     
        blank=fnblank(5)    
        OutVect!.addItem("Totals For Item")
        OutVect!.addItem(str(mpm01a.no_of_pers))
        OutVect!.addItem(str(mpm01a.days_in_per))
        blank=fnblank(8)    
        l=l+3
    endif

new_item: rem --- Retrieve current item info

    if t9$<>"" then
        return
    endif
    dim desc$(dw)
    ivm01a.firm_id$=firm_id$
    ivm01a.item_id$=mpw03a_key.item_id$

    ivm02a.firm_id$=firm_id$
    ivm02a.warehouse_id$=mpw03a_key.warehouse_id$
    ivm02a.item_id$=mpw03a_key.item_id$
    t1$=ivm01a.item_id$

    find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next) ivm01a$
    find record (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next) ivm02a$
    item$=t1$

    desc$=ivm01a.item_desc$
    buyer$=ivm02a.buyer_code$
    um$=ivm01a.purchase_um$

    ivm10f.firm_id$=firm_id$
    ivm10f.record_id_f$="F"
    ivm10f.buyer_code$=buyer$
    factor=ivm01a.conv_factor

    find record (ivm10f_dev,key=ivm10f.firm_id$+ivm10f.record_id_f$+ivm10f.buyer_code$,dom=*next) ivm10f$
    buyer$=ivm10f.buyer_code$+" "+cvs(ivm10f.code_desc$,2)

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #endinclude fndate.src


rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnblank: Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
