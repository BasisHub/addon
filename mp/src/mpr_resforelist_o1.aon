rem --- Resource Forecast Listing (Report Overlay)
rem --- Program mpr_hb v8.0.0 29Jan2008 (mpr_hb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/29/2008 10:12:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations
rem --- build report titles/headings

    precision ivprecision
    prefix$=cvs(firm_id$+forecast$+whse$,2)
    number=endper-begper+2
    numcol=4
    begper=begper-1,endper=endper-1
    width=132
    if numcol>number then  numcol=number
    call pgmdir$+"adc_sizemask.aon",ivs01a.price_mask$,m4,10,10
    more=1
    
    columns = endper+4
    dim columns$[columns,10]
    columns$[0,0]="Oper^Code",columns$[0,1]="C",columns$[0,2]="5"
    columns$[1,0]="Description",columns$[1,1]="C",columns$[1,2]="15"
    columns$[2,0]="      ",columns$[2,1]="C",columns$[2,2]="6"
    clno=3,n=0
    dim dates$[number]
    for x=begper to endper
        dates$[n]=fndate$(FIELD(mpm01a$,"plan_date_"+str(x+1:"00")))
        columns$[clno,0]=dates$[n],columns$[clno,1]="N",columns$[clno,2]="8",columns$[clno,10]="T"
        n=n+1
        clno=clno+1
    next x

    columns$[clno,0]="Totals",columns$[clno,1]="N",columns$[clno,2]="8",columns$[clno,10]="T"
    dim amounts[number],totals[number]
    
rem --- Background

   call pgmdir$+"adc_progress.aon","N","","","","",0,mpe02a_dev,1,meter_num,status

rem --- Position mpe-02 Resource Forecast file

    read (mpe02a_dev,key=prefix$,dom=*next)

rem --- Read next mpe-02 Resource Forecast record
    while more
        read record (mpe02a_dev,end=*break) mpe02a$
        if pos(prefix$=mpe02a.firm_id$+mpe02a.forecast$+mpe02a.warehouse_id$+mpe02a.op_code$)<>1 then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
    
rem ------- Additional reads

            bmm08a.firm_id$=firm_id$
            bmm08a.op_code$=mpe02a.op_code$
            bmm08a.code_desc$="Unknown Operation"
            find record (bmm08a_dev,key=(bmm08a.firm_id$+bmm08a.op_code$),dom=*next) bmm08a$

rem ------- Build detail

            dim amounts[number]
            n=0
            last=0
            for x=begper to endper
                n=n+1
                amounts[n]=num(FIELD(mpe02a$,"resource_cap_"+str(x+1:"00")))
            next x

rem ------- Accumulate operation totals

            for x=1 to number-1
                amounts[number]=amounts[number]+amounts[x]
            next x


rem ------- Print amounts & amoun's total
            
            OutVect!.addItem(bmm08a.op_code$)
            OutVect!.addItem(bmm08a.code_desc$)
            OutVect!.addItem("(Hours)")
            xwk=fnblank(endper+4)
            OutVect!.addItem("Capacity")
            for x=begper to endper+1
                OutVect!.addItem(str(amounts[x+1]:ivs01a.price_mask$))
            next x    

rem ------ Accumulate report totals

report_totals: 
            for x=1 to number
                totals[x]=totals[x]+amounts[x]
            next x

rem --- Loop back for next mpe-02 Resource Forecast record
    wend




done: rem --- Done with report, print totals
    bmm08a.op_code$=""
    bmm08a.code_desc$="Totals For Report"
    last=0
    for x=1 to number
        amounts[x]=totals[x]
    next x

rem --- Print totals

    xwk=fnblank(1)
    OutVect!.addItem("Totals For Report")
    OutVect!.addItem("(Hours)")
    xwk=fnblank(endper+4)
    OutVect!.addItem("Capacity")
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    for x=begper to endper+1
        OutVect!.addItem(str(amounts[x+1]:ivs01a.price_mask$))
    next x    
    

rem --- All done

    goto std_exit


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem #include fndate.src

        def fndate$(q$)
        if cvs(q$,2)="" return ""
        if pos("9"<>q$)=0 return q$
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        return testdate$
        fnend

rem #endinclude fndate.src

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnblank: Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
