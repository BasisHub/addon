rem --- Purge Zero Balance Invoices
rem --- Program aru_zerobalance v8.0.0 31Dec2006 (aru_da)
rem --- Created by adx_codeport.bbx v1.1.5 (12/31/2006 10:33:17)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Initializations

    balance=0

rem --- Get user approval to update

    msg_id$="AR_DEL_INV"
    dim msg_tokens$[1]
    msg_tokens$[1]=fndate$(thrudate$)

    gosub disp_message
    if msg_opt$<>"Y" goto std_exit_no_update

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,art01_dev,1,meter_num,status
    read (art01_dev,key=firm_id$,dom=*next)

rem --- Read next Invoice Header (art-01) record

    while moreheaders   
          k$=key(art01_dev,end=*break)
          if pos(firm_id$=k$)<>1 then read(art01_dev); break
          extract record (art01_dev) art01a$; rem Advisory Locking
          if art01a.invoice_date$>thrudate$ then read(art01_dev); continue
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          balance=art01a.invoice_amt

          rem --- Position Invoice Detail (art-11) file

          art01_key$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$
          read (art11_dev,key=art01_key$,dom=*next)

          rem --- Read Invoice Detail (art-11) records and accumulate invoice balance

          future=0
          while moredetail
                k$=key(art11_dev,end=*break)
                if pos(art01_key$=k$)<>1 break
                read record (art11_dev) art11a$
                if art11a.trans_date$>thrudate$ 
                   future=1
                   break
                endif 
                balance=balance+art11a.trans_amt+art11a.adjdisc_amt
          wend

          rem --- Zero balance?

          if future or balance<>0 then read(art01_dev); continue

          rem --- Remove this Invoice Header (art-01) record

          k$=art01_key$+"00"
          remove (art01_dev,key=k$,dom=*next)
          read (art11_dev,key=art01_key$,dom=*next)

          rem --- Remove any Invoice Detail (art-11) records

          future=0
          while moredetail
                k$=key(art11_dev,end=*break)
                if pos(art01_key$=k$)<>1 break
                remove (art11_dev,key=k$)
          wend

          rem --- Loop back for next Invoice Header record

    wend

rem --- All done

    goto std_exit

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- Functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
