rem --- Simple Invoice Printing/Detail
rem --- Program arr_invoices v8.0.0 01Dec2006 (arr_ub)
rem --- Created by adx_codeport.bbx v1.1.3 (12/01/2006 06:05:56)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

    rem --- Set Print Path

    docdir$=stbl("+DOC_DIR_PDF",err=*next)


rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Derive/set path and filename for logo to go on form

    logofile$=""
    while 1
        curr_path$=dsk("")+dir("")
        chdir stbl("+CUST_IMAGES",err=*break),err=*break
        logofile$="file:"+dsk("")+dir("")+stbl("+FORM_LOGO",err=*break)
        chdir curr_path$
        break
    wend

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="are-05",ids$[2]="ARE_INVHDR";rem ,options$[2]="L"
    files$[3]="are-15",ids$[3]="ARE_INVDET";rem ,options$[3]="L"
    files$[4]="arm-01",ids$[4]="ARM_CUSTMAST"
    files$[5]="arc_termcode",ids$[5]="ARC_TERMCODE"
    files$[6]="ars_report",ids$[6]="ARS_REPORT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    ars01_dev=channels[1]
    are05_dev=channels[2]
    are15_dev=channels[3]
    arm01_dev=channels[4]
    arm10_dev=channels[5]
    ars_report_dev=channels[6]

rem --- Dimension string templates

    dim ars01a$:templates$[1],are05a$:templates$[2],are15a$:templates$[3],arm01a$:templates$[4],       arm10a$:templates$[5],ars01b$:templates$[6]

rem --- Assign form input values to local variables

    restart$=option!.getOptionData("PICK_CHECK")
    invoice$=option!.getOptionData("PICK_AR_INV_NO")
    message$=option!.getOptionData("PICK_TEXT")
    copies=num(option!.getOptionData("PICK_INTEGER"))
    copies=max(copies,1)
    address=30

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ars01b_key$=firm_id$+"AR02"
    find record (ars_report_dev,key=ars01b_key$,err=std_missing_params) ars01b$
    remit$=ars01b.remit_addr_1$+ars01b.remit_addr_2$+ars01b.remit_city$+ars01b.remit_state$+ars01b.remit_zip$
    call pgmdir$+"adc_address.aon",remit$,24,3,9,address
    remit$=ars01b.name$+remit$

    call pgmdir$+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call pgmdir$+"adc_getmask.aon","","AR","A","",m1$,0,0
    call pgmdir$+"adc_sizemask.aon",ars01a.amount_mask$,m1,8,13
    call pgmdir$+"adc_getmask.aon","","AR","U","",m2$,0,0
    call pgmdir$+"adc_getmask.aon","","AR","R","",m3$,0,0
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)

rem --- Initializations

    precision 4
    dim bar$(m1,"-"),o[5],h[1]
    fkey=0
    page=0
    offset=0
    width=80
    lines=0
    address=30
    length=(address*4)+1
    maxlines=35
    moreheaders=1
    moredetail=1
    when$=sysinfo.system_date$
    clock$=""
    answer$="Y"
    msg_id$="PRINT_TEST_PATTERN"
    nf$="(Not on file)"
    recs=0

rem --- Initialize print positions

    w=max(m0,8)
    o[0]=offset
    o[1]=offset+5
    o[2]=offset+14
    o[5]=width-m1
    o[4]=o[5]-m3
    o[3]=o[4]-m2
    h[0]=offset+33
    h[1]=width-w

rem --- Initialize record template fields for printing test patterns

rem    dim address$(5*address,"X")
rem    original$=message$
rem    arm01a.customer_id$="999999"
rem    arm01a.customer_name$=fill(30,"X")
rem    are05a.ar_inv_no$="9999999"
rem    invoice_date$="mm/dd/yy"
rem    arm10a.code_desc$=fill(20,"X")
rem    linedate$="mm/dd/yy"
rem    are15a.line_no$="999"
rem    are15a.description$=fill(30,"X")
rem    message$=fill(30,"-")
rem    message$(11,9)=" Message "
rem    message$(1,1)="<"
rem    message$(30,1)=">"
rem    are15a.units=fntestvalue(m2$)
rem    are15a.unit_price=fntestvalue(m3$)
rem    are15a.ext_price=fntestvalue(m1$)
rem    total=are15a.ext_price
rem    limit=maxlines-4

rem --- Open the printer


let textfont!= new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,10)
let boldfont!=new java.awt.Font("Times New Roman",java.awt.Font.BOLD,10)
let largefont!=new java.awt.Font("Arial",java.awt.Font.BOLD,26)

red!=new java.awt.Color(red)
white!=new java.awt.Color(white)
grey!=new java.awt.Color(grey)

LET requestAttributes!=new javax.print.attribute.HashPrintRequestAttributeSet()
requestAttributes!.add(javax.print.attribute.standard.MediaSizeName.NA_LETTER)
requestAttributes!.add(javax.print.attribute.standard.OrientationRequested.PORTRAIT)

units=javax.print.attribute.standard.MediaPrintableArea.INCH
x!=new java.lang.Float(0.25).floatValue()
y!=new java.lang.Float(0.25).floatValue()
w!=new java.lang.Float(8.8).floatValue()
h!=new java.lang.Float(10.5).floatValue()
a!=new javax.print.attribute.standard.MediaPrintableArea(x!,y!,w!,h!,units)

requestAttributes!.add(a!)

left_justify=0
right_justify=1
center_justify=2

myAPI!=BBjAPI()
myBBjPrinter!=myAPI!.getBBjPrinter(1)
myBBjPDFPrinter!=BBjAPI()

myBBjPrinter!.setAttributes(requestAttributes!)
docPrint!=myBBjPrinter!.getForm(0)

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,are05_dev,1,meter_num,status
    k$=firm_id$
    if restart$<>"N" k$=k$+invoice$(1,max(0,len(invoice$)-1)),invoice$=firm_id$+invoice$
    read (are05_dev,key=k$,dom=*next)

rem --- Read next Invoice Header (are-05) record

    while moreheaders

        read record (are05_dev,end=*break) are05a$
        if are05a.firm_id$<>firm_id$ break
        recs=recs+1
        if restart$<>"N" if are05a$(1,len(invoice$))<invoice$ goto next_wend
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        rem --- Skip voided invoices

        if are05a.sim_inv_type$="V" continue

        rem --- Initialize invoice header fields
        rem --- first call bac_documents.bbj to get back document ID
        call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,"","","I","PDF",docdir$,
:           "pdf",option!.getAlias(),"C",are05a.customer_id$,table_chans$[all],"DOC_ID"

        prtr_dev=unt
        pdf_doc$=docdir$+new_doc_id$+".pdf"
        open (prtr_dev,err=printer)pdf_doc$
        close (prtr_dev)
        erase pdf_doc$
        printer:
        docPDF!=myBBjPDFPrinter!.getBBjPDFForm(pdf_doc$,requestAttributes!)

        invoice$=are05a.firm_id$+are05a.ar_inv_no$
        invoice_date$=fndate$(are05a.inv_date$)
        total=0

            rem --- Retrieve Customer Master (arm-01) record

        dim arm01a$:fattr(arm01a$)
        arm01a.firm_id$=firm_id$
        arm01a.customer_id$=are05a.customer_id$
        arm01a.customer_name$=nf$
        k$=arm01a.firm_id$+arm01a.customer_id$ 
        find record (arm01_dev,key=k$,dom=*next) arm01a$
        address$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.addr_line_4$+arm01a.city$+arm01a.state_code$+arm01a.zip_code$+arm01a.country$
        call pgmdir$+"adc_address.aon",address$,24,5,9,address

        rem --- Retrieve Terms Code (arm-10a) Description

        dim arm10a$:fattr(arm10a$)
        arm10a.firm_id$=firm_id$
        arm10a.record_id_a$="A"
        arm10a.ar_terms_code$=are05a.ar_terms_code$
        arm10a.code_desc$=nf$
        k$=arm10a.firm_id$+arm10a.record_id_a$+arm10a.ar_terms_code$ 
        find record (arm10_dev,key=k$,dom=*next) arm10a$

        rem --- Print the requested number of copies of the invoice

        for copy=1 to copies

                 pagePDF!=docPDF!.createPage()
                 pagePrint!=docPrint!.createPage()

          rem --- Print the invoice heading

            page=0
        lines=0
        total=0
        gosub heading

        rem --- Position the Invoice Detail (are-15) file

        read (are15_dev,key=invoice$,dom=*next)

        rem --- Read the next Invoice Detail (are-15) record

        while moredetail
            k$=key(are15_dev,end=*break)
            if pos(invoice$=k$)<>1 break
            read record (are15_dev) are15a$
            total=total+are15a.ext_price
            memo=are15a.units+are15a.ext_price=0
            if len(are15a.trns_date$)=8 then
                linedate$=fndate$(are15a.trns_date$)
            else
                linedate$=are15a.trns_date$
            endif
            rem --- Print the detail line

            if lines+4>maxlines gosub overflow
            if memo gosub memo else gosub detail

next_wend:
        wend

        rem --- Print the total and move on to the next copy

        gosub totals
        next copy

     rem --- Loop back for next Invoice Header


     wend

rem --- All done

    if recs=0
        docPrint!.cancel()
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    docPrint!.preview()
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    goto std_exit

heading: rem --- Print the invoice heading

    page=page+1
    page!=pagePrint!

    while 1

    rem --- Header
    tmp=fntext2(0,10,568,10,"INVOICE",largefont!,center_justify,page!)
    tmp=fnlogo(page!)

    rem --- Company Address

    tmp=fntext(50,60,remit$(1,address),textfont!,page!)
    tmp=fntext(50,72 ,remit$(31,address),textfont!,page!)
    tmp=fntext(50,84 ,remit$(61,address),textfont!,page!)
    tmp=fntext(50,96,remit$(91,address),textfont!,page!)

    rem --- Sold To
    tmp=fnbox(20,126,550,96,page!)
    tmp=fnline(65,126,65,222,page!)
    tmp=fntext2(20,132,40,132,"Sold To",boldfont!,right_justify,page!)
    tmp=fntext(70,132,arm01a.customer_name$,textfont!,page!)
    tmp=fntext(70,144,address$(1,address),textfont!,page!)
    tmp=fntext(70,156,address$(31,address),textfont!,page!)
    tmp=fntext(70,168,address$(61,address),textfont!,page!)    
    tmp=fntext(70,180,address$(91,address),textfont!,page!)
    tmp=fntext(70,192,address$(121,address),textfont!,page!)
    tmp=fntext(70,204,address$(151,address),textfont!,page!)

    rem --- Info Box 
    tmp=fnline(424,126,424,222,page!)
    tmp=fnline(424,150,570,150,page!)
    tmp=fnline(424,174,570,174,page!)
    tmp=fnline(424,198,570,198,page!)
    tmp=fntext2(432,132,54,132,"Page",boldfont!,right_justify,page!)
    tmp=fntext2(432,156,54,132,"Date",boldfont!,right_justify,page!)
    tmp=fntext2(432,180,54,132,"Customer",boldfont!,right_justify,page!)
    tmp=fntext2(432,204,54,132,"Invoice",boldfont!,right_justify,page!)

    tmp=fnline(490,126,490,222,page!)
    tmp=fntext(496,132,str(page),textfont!,page!)
    tmp=fntext(496,156,invoice_date$,textfont!,page!)
    tmp=fntext(496,180,fnmask$(arm01a.customer_id$(1,customer_size),m0$),textfont!,page!)
    tmp=fntext(496,204,are05a.ar_inv_no$,textfont!,page!)

    rem --- Terms
    tmp=fnbox(20,222,550,24,page!)
    tmp=fnline(65,222,65,246,page!)
    tmp=fntext2(20,228,40,228,"Terms",boldfont!,right_justify,page!)
    tmp=fntext(70,228,arm10a.code_desc$,textfont!,page!)


    rem --- Ribbon
    tmp=fnbox(20,246,550,24,page!)
    tmp=fnbox(20,246,550,436,page!)
    tmp=fnline(65,246,65,682,page!)
    tmp=fnline(115,246,115,682,page!)
    tmp=fnline(370,246,370,682,page!)
    tmp=fnline(424,246,424,682,page!)
    tmp=fnline(490,246,490,682,page!)
    tmp=fntext2(20,252,36,252,"Seq",boldfont!,right_justify,page!)
    tmp=fntext2(70,252,58,252,"Date",boldfont!,left_justify,page!)
    tmp=fntext(120,252,"Memo",boldfont!,page!)
    tmp=fntext2(352,252,60,252,"Qty",boldfont!,right_justify,page!)
    tmp=fntext2(424,252,60,252,"Price",boldfont!,right_justify,page!)
    tmp=fntext2(490,252,66,252,"Extension",boldfont!,right_justify,page!)

    lines=0

    if page!=pagePDF! then break
    page!=pagePDF!
    wend

    return

detail: rem --- Print an invoice detail line

    page!=pagePrint!
    while 1

    tmp_line=264+((lines+1)*12)
    tmp=fntext2(20,tmp_line,36,tmp_line,are15a.line_no$,textfont!,right_justify,page!)
    tmp=fntext2(70,tmp_line,58,tmp_line,linedate$,textfont!,left_justify,page!)
    tmp=fntext(120,tmp_line,are15a.description$,textfont!,page!)
    tmp=fntext2(352,tmp_line,60,tmp_line,str(are15a.units:m2$),textfont!,right_justify,page!)
    tmp=fntext2(424,tmp_line,60,tmp_line,str(are15a.unit_price:m3$),textfont!,right_justify,page!)
    tmp=fntext2(490,tmp_line,66,tmp_line,str(are15a.ext_price:m1$),textfont!,right_justify,page!)

    lines=lines+2

    if page!=pagePDF! then break
    page!=pagePDF!
    wend

return

memo: rem --- Print a memo line

    page!=pagePrint!
    while 1

    tmp_line=264+((lines+1)*12)
    tmp=fntext2(20,tmp_line,36,tmp_line,are15a.line_no$,textfont!,center_justify,page!)
    tmp=fntext2(60,tmp_line,58,tmp_line,linedate$,textfont!,center_justify,page!)
    tmp=fntext(120,tmp_line,are15a.description$,textfont!,page!)

    lines=lines+1

    if page!=pagePDF! then break
    page!=pagePDF!
    wend

return

totals: rem --- Print the invoice total

    page!=pagePrint!
    while 1

    tmp=fnbox(424,682,146,24,page!)
    tmp=fnline(490,682,490,708,page!)
    tmp=fntext2(424,688,60,688,"Total",boldfont!,right_justify,page!)
    tmp=fntext2(490,688,66,688,str(total:m1$),textfont!,right_justify,page!)
    tmp=fntext(70,688,message$,textfont!,page!)

    if page!=pagePDF! then break
    page!=pagePDF!
    wend

    docPDF!.print()
    call stbl("+DIR_PGM")+"adc_rptcontrol.aon",option!.getAlias(),are05a.customer_id$,"C",new_doc_id$,"pdf"

return

overflow: rem --- Multi-page invoice

    tmp=fntext2(490,688,66,688,"Continued",textfont!,right_justify,page!)
    pagePDF!=docPDF!.createPage()
    pagePrint!=docPrint!.createPage()
    gosub heading
    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- Functions

rem --- fntestvalue: Return maximum numeric value for a given mask

    def fntestvalue(q$)
        q1$=""
        for q=1 to len(q$)
            if pos(q$(q,1)="#0") q1$=q1$+"9"
            if q$(q,1)="." q1$=q1$+"."
        next q
        q=num(q1$)
        return q
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fntext: Form Text command

     def fntext(tmp_x,tmp_y,tmp_text$,tmp_font!,page!)
        tmp_text$=cvs(tmp_text$,3)
        tmp!.destroy(err=*next)
        tmp!=page!.newParagraph()
        tmp!.setHorizontalFill(1)
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setText(tmp_text$)
        tmp!.setFont(tmp_font!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fntext2: Form Text command

     def fntext2(tmp_x,tmp_y,tmp_x2,tmp_y2,tmp_text$,tmp_font!,tmp_just,page!)
        tmp_text$=cvs(tmp_text$,3)
        tmp!.destroy(err=*next)
        tmp!=page!.newParagraph()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        if tmp_just then tmp!.setSize(tmp_x2,tmp_y2)
        if tmp_just=1 then tmp!.setHorizontalAlignment(tmp!.RIGHT_JUSTIFIED)
        if tmp_just=2 then tmp!.setHorizontalAlignment(tmp!.CENTER_JUSTIFIED)
        tmp!.setText(tmp_text$)
        tmp!.setFont(tmp_font!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnbox: Form Box command

    def fnbox(tmp_x,tmp_y,tmp_w,tmp_h,page!)
        tmp!=page!.newFrame()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setWidth(tmp_w)
        tmp!.setHeight(tmp_h)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnline: Form Line command

    def fnline(tmp_x,tmp_y,tmp_w,tmp_h,page!)
        tmp!=page!.newLine()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setWidth(tmp_w)
        tmp!.setHeight(tmp_h)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnframe: Form Frame command

    def fnframe(tmp_x,tmp_y,tmp_x2,tmp_y2,page!)
        tmp!=page!.newFrame()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmpdim!=new java.awt.Dimension(tmp_x2,tmp_y2)
        tmp!.setSize(tmpdim!)
        page!.add(tmp!)
        return(1)
     fnend

rem --- fnlogo: Put logo on page

    def fnlogo(page!)
        logo!=page!.newImage()
        logo!.setURL(logofile$,err=*next)
        logo!.setPosition(new java.awt.Point(0,0))
        logo!.setWidth(185)
        logo!.setHeight(68)
        page!.add(logo!)
        return(1)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    release

rem #endinclude std_end.src

    end
