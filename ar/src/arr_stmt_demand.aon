rem --- On Demand Customer Statement - setup to jasper
rem --- Program arr_stmt_demand.aon

rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- Use statements and Declares

    setesc std_error
    seterr std_error

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

    use ::ado_rptControl.src::ReportControl
    use ::ado_func.src::func
    use ::sys/prog/bao_utilities.bbj::BarUtils

	declare BBJasperReport BBjReport!
    
    params! = Option!.getOptionMap()
		
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 200; rem keeps it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 100

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Set document Directory

    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
rem --- Get logo to go on form; start w/ company logo, fall back to default logo from config if no company logo specified

    logo_filename$=""
    logo_filename$=func.getCompanyLogo()
    if logo_filename$=""
        logo_file$=stbl("+CUST_IMAGES",err=*next)+stbl("+FORM_LOGO",err=*next)
        if logo_file$<>""
            logo_filename$=BBjAPI().getFileSystem().resolvePath(logo_file$,err=*next)
        endif
    endif

rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)   
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "CustStatement"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"

    declare BBJasperReport report!

rem --- Assign form input values to local variables

    customer_id$  = option!.getOptionData("CUSTOMER_ID")
    stmt_date$    = option!.getOptionData("STATEMENT_DATE")
    message$      = option!.getOptionData("MESSAGE")
    age_basis$    = option!.getOptionData("REPORT_TYPE")   
    send_via_rpt_ctl$      = option!.getOptionData("PICK_CHECK")

    minimum=num(minimum$)    
    period=num(age_period$,err=*next)
    rptctl_alias$ = "ARR_STATEMENTS";rem using same rpt ctl record as regular statements, so you don't need to enter in every customer twice (once for regular, once for on-demand)

rem --- Initializations

    artype$=fill(2)
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0

    emailFax! = BBjAPI().makeVector()

rem --- See if this document is set up in Addon Report Control

    reportControl!=new ReportControl()
    reportControl!.setDocExtension("pdf")
    rpt_ctl$=reportControl!.getReportControl(rptctl_alias$)
    rpt_ctl$=iff(rpt_ctl$="","NO","YES")
    rpt_id$=iff(rpt_ctl$="YES",reportControl!.getReportID(),"")
    rpt_logo_file$=iff(rpt_ctl$="YES",reportControl!.getLogoFile(),"")
    logo_filename$=iff(rpt_logo_file$="",logo_filename$,rpt_logo_file$);rem doc-specific logo supersedes default or company logo

rem --- Determine 30 day aging period dates

    for x=-5 to 0
        enddate$=""
        call pgmdir$+"adc_daydates.aon",stmt_date$,enddate$,x*30
        period_dates$=enddate$+period_dates$
    next x

rem --- Make Document Archive Record and Get Document ID

    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=option!.getAlias()
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$="DOC_ID-NOREPRINT"
    gosub document_whse
    rd_archive_action$=""

    doc_name$="DemandCustomerStatement_"+customer_id$
    doc_keywords$="Stmt date: "+fndate$(stmt_date$)
    repTitle$=rd_doc_id$+"_"+doc_name$
    new_doc_name$=rd_doc_id$+"_"+doc_name$+".pdf"
    new_doc_id$=rd_doc_id$

rem --- Use ReportControl object to see if customer wants print, email, or fax

        add_to_print_report=1
        if rpt_ctl$="YES"     
            found=reportControl!.getRecipientInfo(rpt_id$,customer_id$,"")
            if found         
                if reportControl!.getPrintYN()<>"Y" then add_to_print_report=0
                if reportControl!.getEmailYN()="Y" or reportControl!.getFaxYN()="Y"
                    emailFax!.add(rpt_id$)
                    emailFax!.add(customer_id$)
                    emailFax!.add(new_doc_id$)
                endif
            endif
        endif
    
rem --- Document Output Report Parameters

    params!.put("DOC_NO",rd_doc_id$)
    params!.put("DATE_REP",rep_date$+"  "+rep_time$)
    
rem --- Other params

    params!.put("BARISTA_WD",dir(""))
    if logo_filename$<>"" then params!.put("LOGO_FILE",logo_filename$)
    params!.put("FIRM_ID",firm_id$)
    params!.put("STATEMENT_DATE",stmt_date$)
    params!.put("CUSTOMER_ID",customer_id$)
    params!.put("MESSAGE",message$)
    params!.put("AGE_BASIS",age_basis$)
    params!.put("AMT_MASK",m1$)
    params!.put("CUST_MASK",m0$)
    params!.put("CUST_SIZE",str(customer_size))
    params!.put("PERIOD_DATES",period_dates$)

rem --- Invoke jasper

    report! = BarUtils.getBBJasperReport(filename$)
    report!.putParams(params!)

    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)
    report!.setLocale(locale$)
 
    rc=report!.fill(1)
    if rc<>BBJasperReport.getSUCCESS() then goto close_win

    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path

    repTitle$=doc_name$
    rd_doc_name$=new_doc_name$
    rd_doc_id$=new_doc_id$

    gosub OnSaveMenuButton

    declare BBJasperViewerWindow viewerWindow!
    declare BBjTopLevelWindow bbjWindow!
    
    viewerWindow! = new BBJasperViewerWindow(report!,0,0,screen_width,screen_height,repTitle$,$00080093$)

    viewerControl! = viewerWindow!.getViewerControl()
    viewerControl!.setGoogleDefaultDocument(repTitle$)
    viewerControl!.setDefaultSaveFolder(rd_doc_path$)
    viewerControl!.setDefaultSaveFile(repTitle$)
    viewerControl!.setFitWidth()

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    saveMenuButton! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    saveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnSaveMenuButton")

    emailToolButton! = viewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    emailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnEmailToolButton")
    
    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)
    
    bbjWindow!= viewerWindow!.getViewerWindow()
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"exit_viewer",err=exit_viewer)

rem --- Event Control

    process_events,err=*same

    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_tmp_dir$=stbl("+DOC_DIR_PDF",err=*endif)
        rd_temp_wd$=dsk("")+dir("")
        if pos(":"=rd_tmp_dir$) setdrive rd_tmp_dir$(1,pos(":"=rd_tmp_dir$)-1),err=*next
        chdir rd_tmp_dir$,err=*next
        rd_doc_path$=dsk("")+dir("")
        if pos(":"=rd_temp_wd$) setdrive rd_temp_wd$(1,pos(":"=rd_temp_wd$)-1)
        chdir rd_temp_wd$
    endif

    return

OnSaveMenuButton:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_ext$="PDF"
        rd_source_id$="C"
        rd_source_ref$=customer_id$
        rd_doc_keywords$=doc_keywords$
        report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif
    return    

OnEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

exit_viewer:

    if emailFax!.size() and send_via_rpt_ctl$="Y"
        msg_id$ = "CONF_RPTCTL"
        gosub disp_message
        if msg_opt$="Y"
            for email_fax=0 to emailFax!.size()-1 step 3
                reportControl!.addToDocQueue(emailFax!.get(email_fax),emailFax!.get(email_fax+1),"",emailFax!.get(email_fax+2))    
            next email_fax
        endif
    endif    

close_win:rem --- Viewer Window Closed
    
    reportControl!.destroy(err=*next)
    viewerWindow!.destroy(err=*next)
    if tcb(13) then exit
    release
	
connect_err:rem --- Connection Error

    declare java.lang.Exception Exception!
    Exception! = bbjapi().getLastException()
    if Exception! = null() then 
       x = msgbox(errmes(-1),16,"Connection Failed")
    else
       x = msgbox(Exception!.getLocalizedMessage(),16,"Connection Failed")
    endif

    release

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend    
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return
	
rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0
        lock_byte=tcb(10)
        lock_chan=tcb(12)
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src


rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	rd_called$="YES"
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
 