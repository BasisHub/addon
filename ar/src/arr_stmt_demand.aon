rem --- On Demand Customer Statement - setup to jasper
rem --- Program arr_stmt_demand.aon

rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- Use statements and Declares
rem --- jing link http://screencast.com/t/KmP4Pc3veClS

    setesc std_error
    seterr std_error

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow

	declare BBJasperReport BBjReport!
	declare BBJasperViewerWindow BBjReportWindow! 
    
    params! = Option!.getOptionMap()
		
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 50; rem -50 keeps it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 50

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Set document Directory

    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
rem --- Derive/set path and filename for logo to go on form

    logo_file$=stbl("+CUST_IMAGES",err=*next)+stbl("+FORM_LOGO",err=*next)
    logo_filenm$=""
    if logo_file$<>""
        logo_chn=unt
        open (logo_chn,err=*endif)logo_file$
        logo_filenm$=fid(logo_chn)(9)
        close (logo_chn)
    endif

rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)   
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "CustStatement"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"

    declare BBJasperReport report!
    
rem --- Check for user authentication; create connection string in url$

    dbserver$="localhost"
    dbsqlport$=":2001"
    rem dbtimeout$="&socket_timeout=5000"
  
    dbserver$=stbl("+DBSERVER",err=*next)
    dbsqlport$=":"+stbl("+DBSQLPORT",err=*next)
    dbssl=num(stbl("+DBSSL",err=*next))
    rem dbtimeout$="&socket_timeout="+stbl("+DBTIMEOUT",err=*next)
    
    if dbssl
        dbssl$="&ssl=true"
    else
        dbssl$="&ssl=false"
    endif

    url_user$="&user=guest"
    if stbl("!DSUDDB",err=*endif)<>"" then
        url_user$=""
    endif
	
	dbname$ = stbl("+DBNAME")
	dbname_api$ = stbl("+DBNAME_API")
    if pos("jdbc:apache"=cvs(dbname$,8))=1 then
        url$ = dbname$
    else
		if pos("jdbc:"=cvs(dbname$,8))=1 then			
			url$=dbname$+url_user$+dbssl$
		else
			url$ = "jdbc:basis:"+dbserver$+dbsqlport$+"?database="+dbname_api$+url_user$+dbssl$
		endif
    endif

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]

    files$[1]="art-01",ids$[1]="ART_INVHDR"
    files$[2]="art-11",ids$[2]="ART_INVDET"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    art01_dev=channels[1]
    art11_dev=channels[2]
    
rem --- Dimension string templates

    dim art01a$:templates$[1],art11a$:templates$[2]

rem --- Assign form input values to local variables

    customer_id$  = option!.getOptionData("CUSTOMER_ID")
    stmt_date$    = option!.getOptionData("STATEMENT_DATE")
    message$      = option!.getOptionData("MESSAGE")
    age_basis$    = option!.getOptionData("REPORT_TYPE")   
    rpt_ctl$      = option!.getOptionData("PICK_CHECK")

    minimum=num(minimum$)    
    period=num(age_period$,err=*next)

rem --- Initializations

    artype$=fill(2)
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0

rem --- Determine 30 day aging period dates

    for x=-5 to 0
        enddate$=""
        call pgmdir$+"adc_daydates.aon",stmt_date$,enddate$,x*30
        period_dates$=enddate$+period_dates$
    next x

rem --- Position the Invoice Header (art-01) file for aging
rem --- shouldn't need this in demand stmt - the sproc that creates the report will do the aging
goto next_part
escape
    dim aging[5]
    customer$=firm_id$+artype$+customer_id$
    read (art01_dev,key=customer$,dom=*next)

rem --- Read next Invoice Header record

    while 1
        art01_key$=key(art01_dev,end=*break)
        if pos(customer$=art01_key$)<>1 break
        read record (art01_dev) art01a$
        if art01a.invoice_date$>stmt_date$ continue

    rem --- Accumulate any adjustments made to this invoice

        gosub adjustments
        balance=art01a.invoice_amt+applied

    rem --- Age this invoice

        agingdate$=art01a.invoice_date$
        if age_basis$<>"I" agingdate$=art01a.inv_due_date$
        invagepd=pos(agingdate$>period_dates$,8); rem determine invoice aging period for proper accumulation
        if invagepd=0 invagepd=5 else invagepd=int(invagepd/8)
        aging[invagepd]=aging[invagepd]+balance        

    wend   
next_part:
rem --- Make Document Archive Record and Get Document ID

    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=option!.getAlias()
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="PDF"

    new_doc_id$=""
    new_doc_name$=""
    doc_name$="DemandCustomerStatement_"+customer_id$
    doc_keywords$="Stmt date: "+fndate$(stmt_date$)

rem --- Get Next Document Number and update Document Audit

    call stbl("+DIR_SYP")+"bas_sequences.bbj","DOC_NO",new_doc_id$,rd_table_chans$[all] 

    new_doc_name$=new_doc_id$+"_"+doc_name$+".pdf"
    
    call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,rep_date_stamp$,rep_time_stamp$,rd_doc_source$,rd_doc_ext$,docdir$,
:           rd_source_type$,rd_source_alias$,"C",customer_id$,rd_table_chans$[all],"",new_doc_name$,doc_name$,doc_keywords$

rem --- Document Output Report Parameters

    params!.put("DOC_NO",rd_doc_id$)
    params!.put("DATE_REP",rep_date$+"  "+rep_time$)
    
rem --- Other params

    params!.put("BARISTA_WD",dir(""))
    params!.put("LOGO_FILE",logo_filenm$)
    params!.put("FIRM_ID",firm_id$)
    params!.put("STATEMENT_DATE",stmt_date$)
    params!.put("CUSTOMER_ID",customer_id$)
    params!.put("MESSAGE",message$)
    params!.put("AGE_BASIS",age_basis$)
    params!.put("AMT_MASK",m1$)
    params!.put("CUST_MASK",m0$)
    params!.put("CUST_SIZE",str(customer_size))
    params!.put("PERIOD_DATES",period_dates$)

rem --- Invoke jasper
    
    report! = new BBJasperReport(filename$,url$)
    report!.putParams(params!)

    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)
    report!.setLocale(locale$)
 
    report!.fill(1)
    report!.exportToPDF(BBjAPI().FALSE, docdir$+new_doc_name$)

    if rpt_ctl$="Y" then call stbl("+DIR_PGM")+"adc_rptcontrol.aon",option!.getAlias(),customer_id$,"C",new_doc_id$,"pdf"

rem --- Show Report

    declare BBJasperViewerWindow viewerWindow!
    
    viewerWindow! = new BBJasperViewerWindow(report!,0,0,screen_width,screen_height,reportTitle$,$00080093$)
    viewerWindow!.getViewerControl().setGoogleDefaultDocument(reportTitle$)
    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)
    declare BBjTopLevelWindow bbjWindow!
    bbjWindow!= viewerWindow!.getViewerWindow()
	cancelled=1
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"close_win",err=*next); cancelled=0
	if cancelled then goto close_win
        
rem --- Event Control

    process_events,err=*same

	release

close_win:rem --- Viewer Window Closed
    viewerWindow!.destroy()
    rdForm!.destroy(err=*next)
    if tcb(13) then exit
    release
	
connect_err:rem --- Connection Error

    declare java.lang.Exception Exception!
    Exception! = bbjapi().getLastException()
    if Exception! = null() then 
       x = msgbox(errmes(-1),16,"Connection Failed")
    else
       x = msgbox(Exception!.getLocalizedMessage(),16,"Connection Failed")
    endif

    release

adjustments: rem --- Accumulate any adjustments for the current invoice

rem --- Position Invoice Detail (art-11) file

    art01_key$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$
    read (art11_dev,key=art01_key$,dom=*next)

rem --- Read Invoice Detail (art-11) records

    applied=0

    while 1
        k$=key(art11_dev,end=*break)
        if pos(art01_key$=k$)<>1 break
        read record (art11_dev) art11a$
        if art11a.trans_date$ <= stmt_date$ then applied = applied+art11a.trans_amt+art11a.adjdisc_amt
    wend

    return

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend    
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return
	
rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src


rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	rd_called$="YES"
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
 