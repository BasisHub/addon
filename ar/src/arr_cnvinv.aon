rem --- Conversion Invoice Register
rem --- Program arr_cnvinv v8.0.0 06Jan2007 (copied from arr_ja)
rem --- Created by adx_codeport.bbx v1.1.5 (01/06/2007 05:37:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- This register is used for Conversion Invoices
rem --- The update (aru_otherentry.aon) is the same as for Fin Chgs.

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$
    
rem --- set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif
   	rd_alias_id$=cvs(rd_alias_id$,4)

rem --- see if batching (batching.CAH)

    call stbl("+DIR_PGM")+"adc_getbatch.aon","",pgm(-2),rd_table_chans$[all]
    batch_no$=stbl("+BATCH_NO")
    process_id$=stbl("+PROCESS_ID")    

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="are_cnvinv",ids$[2]="ARE_CNVINV"
    files$[3]="arm-01",ids$[3]="ARM_CUSTMAST"
    files$[4]="arc_distcode",ids$[4]="ARC_DISTCODE"
    files$[5]="art-01",ids$[5]="ART_INVHDR"
    files$[7]="glm-01",ids$[7]="GLM_ACCT"
    if num(batch_no$)=0 then options$[2]="L";rem lock if not batching.CAH
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_report
    ars01_dev=channels[1]
    are02_dev=channels[2]
    arm01_dev=channels[3]
    arm10_dev=channels[4]
    art01_dev=channels[5]
    glm01_dev=channels[7]

rem --- Dimension string templates

    dim ars01a$:templates$[1],are02a$:templates$[2],arm01a$:templates$[3]
    dim arm10d$:templates$[4],art01a$:templates$[5]
    dim glm01a$:templates$[7]

rem --- Retrieve parameter records

    dim info$[20]
    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    source$=pgm(-2)
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    period=num(ars01a.current_per$)
    year=num(ars01a.current_year$)
	call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,account_length
    max_acct_len=max(10,account_length)
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0
    m0=len(m0$)
    m1=len(m1$)
    application$="AR"
    
rem --- Is General Ledger installed and being used?
rem --- as of v9, glw11$ no longer used.  Always use actual glw-11 file (batching.CAH)
    
    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,application$,glw11$,gl$,status
    if status goto std_exit_no_report
    
    application$="OP"
    call stbl("+DIR_PGM")+"adc_application.aon",application$,info$[all]
    op$=info$[20]

rem --- Initializations

    headings=2
    dim headings$[headings],o[9],h[9]
    page=0
    units=0
    total=0
    discount=0
    width=132
    errors=0
    maxlines=59
    lines=maxlines+1
    more=1
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    when$=sysinfo.system_date$
    clock$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    if num(batch_no$)<>0 then headings$[1]=headings$[1]+ Translate!.getTranslation("AON__(BATCH:_")+batch_no$+")"    
    recs=0

rem --- Headings and print positions

    dim columns$[9,10]
    columns = 9
   
    columns$[0,0]=Translate!.getTranslation("AON_CUSTOMER"),                    columns$[0,1]="C",columns$[0,2]="25"
    columns$[1,0]=Translate!.getTranslation("AON_INVOICE"),              columns$[1,1]="C",columns$[1,2]="7"
    columns$[2,0]=Translate!.getTranslation("AON_DIST"),               columns$[2,1]="C",columns$[2,2]="5"
    columns$[3,0]=Translate!.getTranslation("AON_TERMS"),                  columns$[3,1]="C",columns$[3,2]="5"
    columns$[4,0]=Translate!.getTranslation("AON_INVOICE_DT"),                columns$[4,1]="C",columns$[4,2]="10"
    columns$[5,0]=Translate!.getTranslation("AON_DUE_DATE"),                    columns$[5,1]="C",columns$[5,2]="10"
    columns$[6,0]=Translate!.getTranslation("AON_DISCOUNT_DT"),               columns$[6,1]="C",columns$[6,2]="10"
    columns$[7,0]=Translate!.getTranslation("AON_TYPE"),                        columns$[7,1]="C",columns$[7,2]="10"
    columns$[8,0]=Translate!.getTranslation("AON_AMOUNT"),                      columns$[8,1]="N",columns$[8,2]=str(len(m1$)),columns$[8,3]=m1$,columns$[8,10]="T"
    columns$[9,0]=Translate!.getTranslation("AON_DISCOUNT"),                    columns$[9,1]="N",columns$[9,2]=str(len(m1$)),columns$[9,3]=m1$,columns$[9,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Initialize print positions

    o[0]=0
    o[1]=m0+33
    o[2]=o[1]+9
    o[3]=o[2]+6
    o[4]=o[3]+6
    o[5]=o[4]+10
    o[6]=o[5]+10
    o[7]=o[6]+10
    o[9]=width-m1
    o[8]=o[9]-m1
    for x=0 to 7
        h[x]=o[x]
    next x
    h[8]=(o[8]+m1)-7
    h[9]=(o[9]+m1)-9

rem --- Additional file opens

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    if gl$="Y"
       files$[1]="glm-01",ids$[1]="GLM_ACCT"
       files$[2]="glt-04",ids$[2]="GLE_DAILYDETAIL"
       files$[3]="glw-11",ids$[3]="GLW_DAILYDETAIL"
       rem --- options$[3]="CL";do clear partial instead of full clear since everyone sharing glw-11. (batching.CAH)
    endif
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_report
    glm01_dev=channels[1]
    glt04_dev=channels[2]
    glw11_dev=channels[3]
    
rem --- Get user approval to proceed

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_report

rem --- Should GL be updated (if it's being used)?

    msg_opt$="N"
    msg_id$="AR_POST_GL"
    gosub disp_message
    if msg_opt$<>"Y" gl$="N"
    
rem --- Clear trans for this firm/process/batch from glw-11 work file (if not batching, batch_no$ is zero, and will clear all recs this firm/process)

    if gl$="Y"
        rec_pfx$=firm_id$+process_id$+batch_no$
        call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
    endif

rem --- start progress meter and position invoice file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,are02_dev,1,meter_num,status
    read (are02_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)

rem --- Read next Invoice (are-02) record

    while more
          k$=key(are02_dev,end=*break)
          if pos(firm_id$+batch_no$=k$)<>1 break
          recs=recs+1
          read record (are02_dev) are02a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Retrieve the customer master record

          dim arm01a$:fattr(arm01a$)
          arm01a.firm_id$=firm_id$
          arm01a.customer_id$=are02a.customer_id$
          arm01a.customer_name$=nf$
          k$=arm01a.firm_id$+arm01a.customer_id$
          find record (arm01_dev,key=k$,dom=*next) arm01a$


          if lines+1>maxlines gosub set_linecount


          OutVect!.addItem(fnmask$(arm01a.customer_id$(1,customer_size),m0$)+" "+arm01a.customer_name$)
          OutVect!.addItem(are02a.ar_inv_no$)
          OutVect!.addItem(are02a.ar_dist_code$)
          OutVect!.addItem(are02a.ar_terms_code$)
          OutVect!.addItem(fndate$(are02a.invoice_date$))
          OutVect!.addItem(fndate$(are02a.inv_due_date$))
          OutVect!.addItem(fndate$(are02a.disc_date$))
          OutVect!.addItem(are02a.invoice_type$)
          OutVect!.addItem(str(are02a.invoice_amt))
          OutVect!.addItem(str(are02a.discount_amt))

          lines=lines+1
          total=total+are02a.invoice_amt
          discount=discount+are02a.discount_amt

          rem --- Update GL if it's being used and the update was requested

          if gl$<>"Y" continue
          dim arm10d$:fattr(arm10d$)
          arm10d.firm_id$=firm_id$
          arm10d.record_id_d$="D"
          arm10d.ar_dist_code$=are02a.ar_dist_code$
          k$=arm10d.firm_id$+arm10d.record_id_d$+arm10d.ar_dist_code$
          find record (arm10_dev,key=k$,dom=*next) arm10d$
          account$=arm10d.gl_ar_acct$
          gldate$=are02a.invoice_date$
          amount=are02a.invoice_amt
          ref1$=fnmask$(arm01a.customer_id$(1,customer_size),m0$)
          ref2$=are02a.ar_inv_no$
          memo$=arm01a.customer_name$
          gosub glrecap
          account$=arm10d.gl_sls_acct$
          amount=-are02a.invoice_amt
          gosub glrecap

          rem --- Check GL posting date if GL is being used

          glstatus=0
          call stbl("+DIR_PGM")+"glc_datecheck.aon",are02a.invoice_date$,"N",period$,year$,glstatus
          if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,are02a.invoice_date$,glstatus,lines,errors,status

          if stbl("+DTWARN_MSG",err=*endif)<>""
            OutVect!.addItem(stbl("+DTWARN_MSG"))
            xwk=fnblank(9)
          endif

    rem --- Loop back for next Invoice record

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if lines+2>maxlines gosub set_linecount
    x$=Translate!.getTranslation("AON_TOTALS")

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))

    xwk = fnblank(6)
    OutVect!.addItem("")
    OutVect!.addItem(x$)
    OutVect!.addItem(str(total))
    OutVect!.addItem(str(discount))

rem --- Destroy progress meter and run next overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

    update$=pgmdir$+"aru_otherentry.aon"
    if errors
        gosub Display_Message
        if special_flag$<>"Y" then update$=""
    endif

    rem Okay to share the otherentry update program with Finance Charges. jpb 4/25/08
    rem except are-02 is open for fin chg, and are_cnvinv for conversion invoices. cah 7/14/08
    overlay$=update$
    if gl$="Y" overlay$=pgmdir$+"glr_recap.aon"

    out_action$="PRT-PDF"
    next_overlay$=overlay$
    if update$=""
        goto std_exit_no_update
    else
        goto std_exit
    endif   
    
set_linecount: rem --- Report Heading

    lines=headings+1
    lines=lines+2
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    return

glrecap: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    return

Display_Message: rem --- Display Message Routine

    msg_id$="AON_REG_ERRS"
    gosub disp_message
    if pos("PASSVALID"=msg_opt$)<>0 special_flag$="Y"
    return

rem --- Functions

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src
std_exit_no_report:

    OutVect!=null();rem nothing to print, or some other err such that no report
    
std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
