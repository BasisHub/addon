rem arr - Customer Name & Address Listing
rem Program arr_nameaddress v8.0.0 15Jun2006 (arr_db)
rem Created by adx_progconv.bbx v1.0.3 (06/15/2006 03:51:38)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

rem --- test remark 8Apr09

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)        

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    arm01_dev=channels[2]
    file_dev=arm01_dev

rem --- Dimension string templates

    dim ars01a$:templates$[1],arm01a$:templates$[2]

rem --- Assign form input values to local variables

    sequence$=option!.getOptionData("DREPORT_SEQUENCE")
    begcust$=option!.getOptionData("CUSTOMER_ID_1")
    endcust$=option!.getOptionData("CUSTOMER_ID_2")
    begalt$=option!.getOptionData("ALT_SEQUENCE_1")
    endalt$=option!.getOptionData("ALT_SEQUENCE_2")

rem --- Retrieve parameter records

    ars01a_key$=sysinfo.firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    m0=len(m0$)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    dim headings$[3]
    m8$="(###) ###-####"
    more=1
    recs=0
    keynum$="PRIMARY"
    begvalue$=begcust$
    endvalue$=endcust$
    total_recs=0
    
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=Translate!.getTranslation("AON_BY_CUSTOMER_ID")
    if sequence$="A"
       keynum$="AO_ALTSEQ_CUST"
       begvalue$=begalt$
       endvalue$=endalt$
       beghead$=begvalue$
       endhead$=endvalue$
       headings$[2]=Translate!.getTranslation("AON_BY_ALTERNATE_SEQUENCE")
    else
       if begvalue$<>"" beghead$=fnmask$(begvalue$(1,customer_size),m0$)
       if endvalue$<>"" endhead$=fnmask$(endvalue$(1,customer_size),m0$)
    endif
    if begvalue$<>"" headings$[3]=Translate!.getTranslation("AON_FROM_")+beghead$ else headings$[3]=Translate!.getTranslation("AON_FROM_FIRST")
    if endvalue$<>"" headings$[3]=headings$[3]+Translate!.getTranslation("AON__THROUGH_")+endhead$ else headings$[3]=headings$[3]+Translate!.getTranslation("AON__THROUGH_LAST")
    endvalue=len(cvs(endvalue$,2))

rem --- Document columns

    columns=6
    dim columns$[columns,3]
    columns$[0,0]=Translate!.getTranslation("AON_CUST_NO"),columns$[0,1]="C",columns$[0,2]="8"
    columns$[1,0]=Translate!.getTranslation("AON_NAME"),columns$[1,1]="C",columns$[1,2]="30"
    columns$[2,0]=Translate!.getTranslation("AON_ADDRESS"),columns$[2,1]="C",columns$[2,2]="24"
    columns$[3,0]=Translate!.getTranslation("AON_CITY"),columns$[3,1]="C",columns$[3,2]="15"
    columns$[4,0]=Translate!.getTranslation("AON_STATE"),columns$[4,1]="C",columns$[4,2]="5"
    columns$[5,0]=Translate!.getTranslation("AON_POSTAL"),columns$[5,1]="C",columns$[5,2]="8"
    columns$[6,0]=Translate!.getTranslation("AON_PHONE"),columns$[6,1]="C",columns$[6,2]="10"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Start progress meter and position file

    read(arm01_dev,key=firm_id$,knum=keynum$,dom=*next)
    call pgmdir$+"adc_progress.aon","NC","ARM_CUSTMAST","","","",0,arm01_dev,1,meter_num,status
    while begvalue$<>""
        read (arm01_dev,key=firm_id$+cvs(begvalue$,2),knum=keynum$,dom=*next)
        read (arm01_dev,dir=-1,err=*next)
        beg_value$=begvalue$
        begvalue$=""
    wend

rem --- Read next Customer Master (arm-01) record

    while more
          k$=key(arm01_dev,knum=keynum$,end=*break)
          if pos(firm_id$=k$)<>1 break
          if beg_value$<>"" 
            if k$(3,len(cvs(beg_value$,2)))<beg_value$
                read(arm01_dev)
                continue
            endif
          endif
          if endvalue$<>"" if k$(3,endvalue)>endvalue$ break
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
          read record (arm01_dev) arm01a$

          rem --- Prepare Address lines

          addrVect!=bbjAPI().getSysGui().makeVector()
          if cvs(arm01a.addr_line_1$,2)<>"" then addrVect!.addItem(arm01a.addr_line_1$)
          if cvs(arm01a.addr_line_2$,2)<>"" then addrVect!.addItem(arm01a.addr_line_2$)
          if cvs(arm01a.addr_line_3$,2)<>"" then addrVect!.addItem(arm01a.addr_line_3$)
          if cvs(arm01a.addr_line_4$,2)<>"" then addrVect!.addItem(arm01a.addr_line_4$)

          rem --- Store document line

          OutVect!.addItem(fnmask$(arm01a.customer_id$(1,customer_size),m0$))
          OutVect!.addItem(arm01a.customer_name$)
          if addrVect!.size()>0 then
              OutVect!.addItem(addrVect!.getItem(0))
          else
              OutVect!.addItem("")
          endif
          OutVect!.addItem(arm01a.city$)
          OutVect!.addItem(arm01a.state_code$)
          call stbl("+DIR_SYP")+"bac_getmask.bbj","P",cvs(arm01a.zip_code$,2),"",postal_mask$
          postal$=cvs(arm01a.zip_code$,2)
          postal$=str(postal$:postal_mask$,err=*next)
          OutVect!.addItem(postal$)
          call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(arm01a.phone_no$,2),"",phone_mask$
          phone$=cvs(arm01a.phone_no$,2)
          phone$=str(phone$:phone_mask$,err=*next)
          OutVect!.addItem(phone$)
        
          if addrVect!.size()>1 then
              for i=1 to addrVect!.size()-1
                  xwk=fnblank(2)
                  OutVect!.addItem(addrVect!.getItem(i))
                  xwk=fnblank(columns-2)
              next i
          endif
        
          recs=recs+1

          rem --- Loop back for next customer master

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    goto std_exit

rem --- Functions

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
