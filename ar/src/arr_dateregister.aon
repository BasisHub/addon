rem --- Invoice Date Modification Register
rem --- Program arr_dateregister v8.0.0 07Jan2007 (arr_pa)
rem --- Created by adx_codeport.bbx v1.1.5 (01/07/2007 02:15:54)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="are-06",ids$[2]="ARE_DATECHANGE"
    files$[3]="arm-01",ids$[3]="ARM_CUSTMAST"
    files$[4]="art-01",ids$[4]="ART_INVHDR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    are06_dev=channels[2]
    arm01_dev=channels[3]
    art01_dev=channels[4]

rem --- Dimension string templates

    dim ars01a$:templates$[1],are06a$:templates$[2],arm01a$:templates$[3],art01a$:templates$[4]

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    m0=len(m0$)

rem --- Get user approval to proceed

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_report

rem --- Initializations

    headings=2
    dim headings$[headings],o[6]
    page=0
    total=0
    width=80
    maxlines=59
    lines=maxlines+1
    more=1
    nf$="(Not on file)"
    when$=sysinfo.system_date$
    clock$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    recs=0

rem --- set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif

rem --- Headings and print positions

    dim columns$[5,10]
    columns = 5
   
    columns$[0,0]="Customer",                 columns$[0,1]="C",columns$[0,2]="25"
    columns$[1,0]="Invoice",           columns$[1,1]="C",columns$[1,2]="8"
    columns$[2,0]="Terms",               columns$[2,1]="C",columns$[2,2]="5"
    columns$[3,0]="Invoice Dt",             columns$[3,1]="C",columns$[3,2]="10"
    columns$[4,0]="Due Dt",                 columns$[4,1]="C",columns$[4,2]="10"
    columns$[5,0]="Discount Dt",            columns$[5,1]="C",columns$[5,2]="10"
    

rem --- Initialize print positions

    o[0]=0
    o[1]=m0+1
    o[6]=width-8
    o[5]=o[6]-9
    o[4]=o[5]-9
    o[3]=o[4]-6
    o[2]=o[3]-8
    w=min((o[2]-o[1]-1),30)

rem --- start progress meter and position invoice file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,are06_dev,1,meter_num,status
    read (are06_dev,key=firm_id$,dom=*next)

rem --- Read next Invoice (are-06) record

  
    while more
          k$=key(are06_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          recs=recs+1
          read record (are06_dev) are06a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Retrieve the customer master record

          dim arm01a$:fattr(arm01a$)
          arm01a.firm_id$=firm_id$
          arm01a.customer_id$=are06a.customer_id$
          arm01a.customer_name$=nf$
          k$=arm01a.firm_id$+arm01a.customer_id$
          find record (arm01_dev,key=k$,dom=*next) arm01a$

          rem --- Print detail line

          if lines+1>maxlines gosub set_linecount
          OutVect!.addItem(fnmask$(are06a.customer_id$(1,customer_size),m0$)+" "+arm01a.customer_name$(1,w))
          OutVect!.addItem(are06a.ar_inv_no_ver$)
          OutVect!.addItem(are06a.ar_terms_code$)
          OutVect!.addItem(fndate$(are06a.invoice_date$))
          OutVect!.addItem(fndate$(are06a.inv_due_date$))
          OutVect!.addItem(fndate$(are06a.disc_date$))

          lines=lines+1
          total=total+1

    rem --- Loop back for next Invoice record

    wend

rem --- All done

        if recs=0
            msg_id$="DOC_OUTPUT_NODATA"
            gosub disp_message
            goto std_exit_no_report
        endif

        total$=str(total)
        if total=0 total$="No"
        if lines+2>maxlines gosub set_linecount

        xwk = fnblank(6)
        OutVect!.addItem(total$ + "Invoice(s) Listed")
        xwk = fnblank(5)

    
       
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
        overlay$=pgmdir$+"aru_dateregister.aon"
        next_overlay$=overlay$
	out_action$="PRT"

        goto std_exit

set_linecount: rem --- Set the Linecount

        lines=headings+1
        lines=lines+2
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        return

rem --- Functions

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    release

rem #endinclude std_end.src

    end
