rem --- Print Customer Statements
rem --- Program arr_statements v8.0.0 29Dec2006 (arr_cb)
rem --- Created by adx_codeport.bbx v1.1.5 (12/29/2006 08:48:40)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Set document Directory

    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Derive/set path and filename for logo to go on form

    logofile$=""
    while 1
        curr_path$=dir("")
        chdir stbl("+CUST_IMAGES",err=*break),err=*break
        logofile$="file://"+dir("")+stbl("+FORM_LOGO",err=*break)
        chdir curr_path$
        break
    wend

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="arm-02",ids$[3]="ARM_CUSTDET"
    files$[4]="art-01",ids$[4]="ART_INVHDR"
    files$[5]="art-11",ids$[5]="ART_INVDET"
    files$[6]="ars_report",ids$[6]="ARS_REPORT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    art01_dev=channels[4]
    art11_dev=channels[5]
    ars_report_dev=channels[6]

rem --- Dimension string templates

    dim ars01a$:templates$[1],arm01a$:templates$[2],arm02a$:templates$[3]
    dim art01a$:templates$[4],art11a$:templates$[5],ars01b$:templates$[6]

rem --- Assign form input values to local variables

    asof$=option!.getOptionData("CURSTM_DATE")
    original$=option!.getOptionData("PICK_TEXT")
    cycle$=option!.getOptionData("AR_CYCLECODE")
    territory$=option!.getOptionData("TERRITORY")
    period$=option!.getOptionData("PICK_PER")
    basis$=option!.getOptionData("REPORT_TYPE")
    minimum$=option!.getOptionData("PICK_NO")
    option$=option!.getOptionData("REPORT_OPTION")
    sequence$=option!.getOptionData("REPORT_SEQUENCE")
    customer_id$=option!.getOptionData("CUSTOMER_ID")
    alt_sequence$=option!.getOptionData("ALT_SEQUENCE")
    doublespace$=option!.getOptionData("PICK_CHECK")
    minimum=num(minimum$)
    period=num(period$,err=*next)
    spacing=2
    if doublespace$="N" spacing=1

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$

    ars01b_key$=firm_id$+"AR02"
    find record (ars_report_dev,key=ars01b_key$,err=std_missing_params) ars01b$
    remit$=ars01b.remit_addr_1$+ars01b.remit_addr_2$+ars01b.remit_city$+ars01b.remit_state$+ars01b.remit_zip$
    call pgmdir$+"adc_address.aon",remit$,24,3,9,30
    remit$=ars01b.remit_name$+remit$
    ar_address$=ars01b.addr_line_1$+ars01b.addr_line_2$+ars01b.city$+ars01b.state_code$+ars01b.zip_code$
    call pgmdir$+"adc_address.aon",ar_address$,24,3,9,30
    ar_address$=ars01b.name$+ar_address$

    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0

        call pgmdir$+"adc_sizemask.aon",m1$,m1,13,13
    m0=len(m0$)
    m1=len(m1$)
    dpos=pos("."=m1$);if dpos<>0 wm1$=m1$(1,dpos-1),fm1$=m1$(dpos,3)

rem --- Open the printer


let textfont!= new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,10)
let boldfont!=new java.awt.Font("Times New Roman",java.awt.Font.BOLD,10)
let largefont!=new java.awt.Font("Arial",java.awt.Font.BOLD,26)


red!=new java.awt.Color(red)
white!=new java.awt.Color(white)
grey!=new java.awt.Color(grey)

LET requestAttributes!=new javax.print.attribute.HashPrintRequestAttributeSet()
requestAttributes!.add(javax.print.attribute.standard.MediaSizeName.NA_LETTER)
requestAttributes!.add(javax.print.attribute.standard.OrientationRequested.PORTRAIT)

units=javax.print.attribute.standard.MediaPrintableArea.INCH
x!=new java.lang.Float(0.5).floatValue()
y!=new java.lang.Float(0.5).floatValue()
w!=new java.lang.Float(8.0).floatValue()
h!=new java.lang.Float(10.5).floatValue()
a!=new javax.print.attribute.standard.MediaPrintableArea(x!,y!,w!,h!,units)

requestAttributes!.add(a!)

left_justify=0
right_justify=1
center_justify=2

myAPI!=BBjAPI()
myBBjPrinter!=myAPI!.getBBjPrinter(1)
myBBjPDFPrinter!=BBjAPI()

myBBjPrinter!.setAttributes(requestAttributes!)
docPrint!=myBBjPrinter!.getForm(0)

rem --- Initializations

    headings=0
    dim headings$[headings],p[1],h[3],o[8],f[2],a[3]
    done=0
    offset=0
    address=30
    page=0
    lines=0
    maxlines=30
    morecustomers=1
    moreheaders=1
    moredetail=1
    artype$=fill(2)
    nf$="(Not on file)"
    when$=sysinfo.system_date$
    clock$=""
    keynum=0
    begvalue$=begcust$
    endvalue$=endcust$
    if sequence$="A"
       keynum=2
       begvalue$=begalt$
       endvalue$=endalt$
    endif
    first_page=1
    recs=0

rem --- Initialize print positions


rem --- Determine 30 day aging period dates

    periods$=""
    for x=-5 to 0
        enddate$=""
        call pgmdir$+"adc_daydates.aon",asof$,enddate$,x*30
        period_dates$=enddate$+period_dates$
    next x

rem --- Open the printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Start progress meter and position Customer Master (arm-01) file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,arm01_dev,1,meter_num,status
    k$=firm_id$
    if len(begvalue$)>1 then k$=begvalue$(1,len(begvalue$)-1)+$FF$
    read (arm01_dev,knum=keynum,key=k$,dom=*next)
    if pos(option$="RS")
       read (arm01_dev,knum=keynum,key=begvalue$,dom=*proceed)
       k$=keyp(arm01_dev,err=*proceed)
       read (arm01_dev,knum=keynum,key=k$,dom=*proceed)
    endif

rem --- Read next Customer Master (arm-01) and Detail (arm-02) record

    while morecustomers
          k$=key(arm01_dev,knum=keynum,end=*break)
          if pos(firm_id$=k$)<>1 break
          recs=recs+1
          read record (arm01_dev,knum=keynum,key=k$) arm01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          if sequence$="C" if endvalue$<>"" if arm01a.customer_id$>endvalue$ break
          if sequence$="A" if endvalue$<>"" if arm01a.alt_sequence$>endvalue$ break
          dim arm02a$:fattr(arm02a$)
          k$=arm01a.firm_id$+arm01a.customer_id$+artype$
          find record (arm02_dev,key=k$,dom=*continue) arm02a$

          rem --- Does this customer meet the selection criteria?

          if arm02a.statements$<>"Y" continue
          if territory$<>"" if arm02a.territory$<>territory$ continue
          if cycle$<>"" if arm02a.ar_cyclecode$<>cycle$ continue

          rem --- call bac_documents.bbj to get back a barista document ID
          
          new_doc_id$=""
          pdf_doc$=""
          call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,"","","I","PDF",docdir$,
:           "pdf",option!.getAlias(),"C",arm01a.customer_id$,table_chans$[all],"DOC_ID"


          rem --- more init

          dim aging[5]
          page=0
          total=0
          amount=0
          current=0
          days30=0
          days60=0
          days90=0

          rem --- Format address block

          address$=""
          address$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.addr_line_4$+arm01a.city$+arm01a.state_code$+arm01a.zip_code$
          call pgmdir$+"adc_address.aon",address$,24,5,9,30

          rem --- Position the Invoice Header (art-01) file for aging

          customer$=arm01a.firm_id$+artype$+arm01a.customer_id$
          read (art01_dev,key=customer$,dom=*next)

          rem --- Read next Invoice Header record

          while moreheaders
                art01_key$=key(art01_dev,end=*break)
                if pos(customer$=art01_key$)<>1 break
                read record (art01_dev) art01a$
                if art01a.invoice_date$>asof$ continue

                rem --- Accumulate any adjustments made to this invoice

                gosub adjustments
                balance=art01a.invoice_amt+applied

                rem --- Age this invoice

                agingdate$=art01a.invoice_date$
                if basis$<>"I" agingdate$=art01a.inv_due_date$
                period=pos(agingdate$>period_dates$,8)
                if period=0 period=5 else period=int(period/8)
                aging[period]=aging[period]+balance

               rem --- Loop back for next Invoice Header

          wend

          rem --- Above the minimum balance for printing?

          printed=0
          balance=0
          for x=period to 5
                balance=balance+aging[x]
          next x
          if minimum <> 0 then if balance<minimum continue

          rem --- Position the Invoice Header (art-01) file for printing

          read (art01_dev,key=customer$,dom=*next)

          rem --- Read next Invoice Header record

          while moreheaders
                art01_key$=key(art01_dev,end=*break)
                if pos(customer$=art01_key$)<>1 break
                read record (art01_dev) art01a$
                if art01a.invoice_date$>asof$ continue
                amount=art01a.invoice_amt

                rem --- Accumulate any adjustments made to this invoice

                gosub adjustments

                rem --- Format detail line fields and print detail line

                transdate$=fndate$(art01a.invoice_date$)
                type$=art01a.invoice_type$
                if type$="S" type$="Invoice"
                if type$="F" type$="Finance Charge"
                if type$="I" type$="Invoice"
                invoice$=art01a.ar_inv_no$
                balance=amount+applied
                total=total+balance
                if balance=0 continue
                if page=0 gosub header
                gosub detail
                printed=1

                rem --- Loop back for next Invoice Header

          wend

          rem --- Print totals and aging summary for this customer

          current=aging[0]+aging[1]
          days30=aging[2]
          days60=aging[3]
          days90=aging[4]+aging[5]
          if printed gosub footer

                          rem --- Loop back for next Customer Master

          if option$="S" break

    wend

rem --- All done

    if recs=0
        docPrint!.cancel()
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    docPrint!.preview()
    goto std_exit

header: rem --- Print the statement header

        rem --- create pdf file

        while pdf_doc$=""
            prtr_dev=unt
            pdf_doc$=docdir$+new_doc_id$+".pdf"
            open (prtr_dev,err=printer)pdf_doc$
            CLOSE (prtr_dev)
            ERASE pdf_doc$
            printer:
            docPDF!=myBBjPDFPrinter!.getBBjPDFForm(pdf_doc$,requestAttributes!)
        wend

    first_page=0
    lines=0
    page=page+1

    pagePDF!=docPDF!.createPage()
    pagePrint!=docPrint!.createPage()

    page!=pagePrint!
    while 1

    tmp=fntext2(0,10,568,10,"STATEMENT",largefont!,center_justify,page!)
    tmp=fnlogo(page!)

    rem --- Company Address

    tmp=fntext(50,60,ar_address$(1,address),textfont!,page!)
    tmp=fntext(50,72,ar_address$(31,address),textfont!,page!)
    tmp=fntext(50,84,ar_address$(61,address),textfont!,page!)
    tmp=fntext(50,96,ar_address$(91,address),textfont!,page!)

    rem --- Sold To
    tmp=fnbox(0,126,568,96,page!)
    tmp=fnline(45,126,45,222,page!)
    tmp=fntext2(0,132,40,132,"Sold To",boldfont!,right_justify,page!)
    tmp=fntext(50,132,arm01a.customer_name$,textfont!,page!)
    tmp=fntext(50,144,address$(1,address),textfont!,page!)
    tmp=fntext(50,156,address$(31,address),textfont!,page!)
    tmp=fntext(50,168,address$(61,address),textfont!,page!)    
    tmp=fntext(50,180,address$(91,address),textfont!,page!)
    tmp=fntext(50,192,address$(121,address),textfont!,page!)
    tmp=fntext(50,204,address$(151,address),textfont!,page!)

rem --- Info Box
    tmp=fnbox (424,24,144,72,page!)
    tmp=fnline(424,48 ,568,48,page!)
    tmp=fnline(424,72 ,568,72,page!)
    tmp=fnline(490,24 ,490,96,page!)

    tmp=fntext2(432,30,54,30,"Page",boldfont!,right_justify,page!)
    tmp=fntext2(432,54,54,54,"Date",boldfont!,right_justify,page!)
    tmp=fntext2(432,78,54,78,"Customer",boldfont!,right_justify,page!)

    tmp=fntext(496,30,str(page),textfont!,page!)
    tmp=fntext(496,54,fndate$(asof$),textfont!,page!)
    tmp=fntext(496,78,fnmask$(arm01a.customer_id$(1,customer_size),m0$),textfont!,page!)


rem --- Ribbon
    tmp=fnbox(0,246,568,24,page!)
    tmp=fnbox(0,246,568,404,page!)
    tmp=fnline(72,246,72,650,page!)
    tmp=fnline(144,246,144,650,page!)
    tmp=fnline(216,246,216,650,page!)
    tmp=fnline(324,246,324,650,page!)
    tmp=fnline(432,246,432,650,page!)
    tmp=fntext2(0,252,72,252,"Invoice Date",boldfont!,center_justify,page!)
    tmp=fntext2(72,252,72,252,"Type",boldfont!,center_justify,page!)
    tmp=fntext2(144,252,72,252,"Invoice",boldfont!,center_justify,page!)
    tmp=fntext2(216,252,102,252,"Amount",boldfont!,right_justify,page!)
    tmp=fntext2(324,252,102,252,"Applied",boldfont!,right_justify,page!)
    tmp=fntext2(432,252,120,252,"Balance",boldfont!,right_justify,page!)

    lines=0

    if page!=pagePDF! then break
    page!=pagePDF!
    wend

    return

detail: rem --- Print a statement detail line

    if lines>=maxlines-1 gosub continued

    page!=pagePrint!
    while 1

    tmp_line=264+((lines+1)*12)
    tmp=fntext2(0,tmp_line,72,tmp_line,transdate$,textfont!,center_justify,page!)
    tmp=fntext2(72,tmp_line, 72,tmp_line,type$,textfont!,center_justify,page!)
    tmp=fntext2(144,tmp_line, 72,tmp_line,invoice$,textfont!,center_justify,page!)
    tmp=fntext2(216,tmp_line,102,tmp_line,str(amount:m1$),textfont!,right_justify,page!)
    tmp=fntext2(324,tmp_line,102,tmp_line,str(applied:m1$),textfont!,right_justify,page!)
    tmp=fntext2(432,tmp_line,120,tmp_line,str(balance:m1$),textfont!,right_justify,page!)

    lines=lines+spacing

    if page!=pagePDF! then break
    page!=pagePDF!
    wend

    return

footer: rem --- Print the statement footer

    page!=pagePrint!
    while 1

rem --- Aging box
    tmp=fnline(424,126,424,222,page!)
    tmp=fnline(424,150,568,150,page!)
    tmp=fnline(424,174,568,174,page!)
    tmp=fnline(424,198,568,198,page!)
    tmp=fnline(490,126,490,222,page!)

    tmp=fntext2(432,132,54,132,"Current",boldfont!,right_justify,page!)
    tmp=fntext2(432,156,54,132,"30 Days",boldfont!,right_justify,page!)
    tmp=fntext2(432,180,54,132,"60 Days",boldfont!,right_justify,page!)
    tmp=fntext2(432,204,54,132,"90 + Days",boldfont!,right_justify,page!)

    tmp=fntext2(496,132,66,132,str(current:m1$),textfont!,right_justify,page!)
    tmp=fntext2(496,156,66,132,str(days30:m1$),textfont!,right_justify,page!)
    tmp=fntext2(496,180,66,132,str(days60:m1$),textfont!,right_justify,page!)
    tmp=fntext2(496,204,66,132,str(days90:m1$),textfont!,right_justify,page!)

rem --- 
    tmp=fnbox(0,650,568,24,page!)
    tmp=fnline(324,650,324,674,page!)
    tmp=fnline(432,650,432,674,page!)

    tmp=fntext(10,656,original$,textfont!,page!)
    tmp=fntext2(324,656,102,656,"Total Due",boldfont!,right_justify,page!)
    tmp=fntext2(432,656,120,656,str(total:m1$),textfont!,right_justify,page!)

 rem --- Remit

    tmp=fntext(400,700,"Please Remit To:",textfont!,page!)
    tmp=fntext(408,712,remit$(1,address),textfont!,page!)
    tmp=fntext(408,724,remit$(31,address),textfont!,page!)
    tmp=fntext(408,736,remit$(61,address),textfont!,page!)
    tmp=fntext(408,748,remit$(91,address),textfont!,page!)

    if page!=pagePDF! then break
    page!=pagePDF!
    wend
    
    docPDF!.print()
    call stbl("+DIR_PGM")+"adc_rptcontrol.aon",option!.getAlias(),arm01a.customer_id$,"C",new_doc_id$,"pdf"

    return

continued: rem --- This statement continues on the next page

    page!=pagePrint!
    while 1

    tmp=fntext2(432,656,120,656,"(Continued)",textfont!,right_justify,page!)

    if page!=pagePDF! then break
    page!=pagePDF!
    wend
    
    gosub header
    return


adjustments: rem --- Accumulate any adjustments for the current invoice

rem --- Position Invoice Detail (art-11) file

    art01_key$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$
    read (art11_dev,key=art01_key$,dom=*next)

rem --- Read Invoice Detail (art-11) records

    applied=0
    while moredetail
          k$=key(art11_dev,end=*break)
          if pos(art01_key$=k$)<>1 break
          read record (art11_dev) art11a$
          if art11a.trans_date$<=asof$ applied=applied+art11a.trans_amt+art11a.adjdisc_amt
    wend
    return

address: rem --- Format the address block

    address$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+arm01a.addr_line_4$+arm01a.city$+arm01a.state_code$+arm01a.zip_code$+arm01a.country$
    call pgmdir$+"adc_address.aon",address$,24,5,9,address
    return

rem --- Functions

rem --- fntestvalue: Return maximum numeric value for a given mask

    def fntestvalue(q$)
        q1$=""
        for q=1 to len(q$)
            if pos(q$(q,1)="#0") q1$=q1$+"9"
            if q$(q,1)="." q1$=q1$+"."
        next q
        q=num(q1$)
        return q
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)


rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fntext: Form Text command

     def fntext(tmp_x,tmp_y,tmp_text$,tmp_font!,page!)
        tmp_text$=cvs(tmp_text$,3)
        tmp!.destroy(err=*next)
        tmp!=page!.newParagraph()
        tmp!.setHorizontalFill(1)
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setText(tmp_text$)
        tmp!.setFont(tmp_font!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fntext2: Form Text command

     def fntext2(tmp_x,tmp_y,tmp_x2,tmp_y2,tmp_text$,tmp_font!,tmp_just,page!)
        tmp_text$=cvs(tmp_text$,3)
        tmp!.destroy(err=*next)
        tmp!=page!.newParagraph()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        if tmp_just then tmp!.setSize(tmp_x2,tmp_y2)
        if tmp_just=1 then tmp!.setHorizontalAlignment(tmp!.RIGHT_JUSTIFIED)
        if tmp_just=2 then tmp!.setHorizontalAlignment(tmp!.CENTER_JUSTIFIED)
        tmp!.setText(tmp_text$)
        tmp!.setFont(tmp_font!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnbox: Form Box command

    def fnbox(tmp_x,tmp_y,tmp_w,tmp_h,page!)
        tmp!=page!.newFrame()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setWidth(tmp_w)
        tmp!.setHeight(tmp_h)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnline: Form Line command

    def fnline(tmp_x,tmp_y,tmp_w,tmp_h,page!)
        tmp!=page!.newLine()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setWidth(tmp_w)
        tmp!.setHeight(tmp_h)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnframe: Form Frame command

    def fnframe(tmp_x,tmp_y,tmp_x2,tmp_y2,page!)
        tmp!=page!.newFrame()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmpdim!=new java.awt.Dimension(tmp_x2,tmp_y2)
        tmp!.setSize(tmpdim!)
        page!.add(tmp!)
        return(1)
     fnend

rem --- fnlogo: Put logo on page

    def fnlogo(page!)
        logo!=page!.newImage()
        logo!.setURL(logofile$,err=*next)
        logo!.setPosition(new java.awt.Point(0,0))
        logo!.setWidth(185)
        logo!.setHeight(68)
        page!.add(logo!)
        return(1)
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)), str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    release

rem #endinclude std_end.src

    end