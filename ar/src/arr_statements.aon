rem --- Print Customer Statements
rem --- Program arr_statements(arr_cb)
rem --- Adapted from the original BBjForm-based version to use jasper

rem --- AddonSoftware
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

	declare BBJasperReport BBjReport!
    
    params! = Option!.getOptionMap()
		
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 75; rem keep it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 75

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Set document Directory

    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)

rem --- Derive/set path and filename for logo to go on form

    logo_file$=stbl("+CUST_IMAGES",err=*next)+stbl("+FORM_LOGO",err=*next)
    logo_filenm$=""
    if logo_file$<>""
        logo_chn=unt
        open (logo_chn,err=*endif)logo_file$
        logo_filenm$=fid(logo_chn)(9)
        close (logo_chn)
    endif

rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)   
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "CustStatement"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"
    masterBaseName$ = "StatementMaster"
    master_filename$ = reportDir$ + masterBaseName$+".jasper"

    declare BBJasperReport report!
    
rem --- Check for user authentication; create connection string in url$

    dbserver$="localhost"
    dbsqlport$=":2001"
    dbtimeout$="&socket_timeout=5000"
  
    dbserver$=stbl("+DBSERVER",err=*next)
    dbsqlport$=":"+stbl("+DBSQLPORT",err=*next)
    dbssl=num(stbl("+DBSSL",err=*next))
    dbtimeout$="&socket_timeout="+stbl("+DBTIMEOUT")
    
    if dbssl
        dbssl$="&ssl=true"
    else
        dbssl$="&ssl=false"
    endif

    url_user$="&user=guest"
    if stbl("!DSUDDB",err=*endif)<>"" then
        url_user$=""
    endif
	
	dbname$ = stbl("+DBNAME")
	dbname_api$ = stbl("+DBNAME_API")
    if pos("jdbc:apache"=cvs(dbname$,8))=1 then
        url$ = dbname$
    else
		if pos("jdbc:"=cvs(dbname$,8))=1 then			
			url$=dbname$+url_user$+dbssl$+dbtimeout$
		else
			url$ = "jdbc:basis:"+dbserver$+dbsqlport$+"?database="+dbname_api$+url_user$+dbssl$+dbtimeout$
		endif
    endif        

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[2]="arm-02",ids$[2]="ARM_CUSTDET"
    files$[3]="art-01",ids$[3]="ART_INVHDR"
    files$[4]="art-11",ids$[4]="ART_INVDET"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    arm01_dev=channels[1]
    arm02_dev=channels[2]
    art01_dev=channels[3]
    art11_dev=channels[4]

rem --- Dimension string templates

    dim arm01a$:templates$[1],arm02a$:templates$[2]
    dim art01a$:templates$[3],art11a$:templates$[4]

rem --- Assign form input values to local variables

    stmt_date$    = option!.getOptionData("CURSTM_DATE")
    message$      = option!.getOptionData("PICK_TEXT")
    cycle$        = option!.getOptionData("AR_CYCLECODE")
    territory$    = option!.getOptionData("TERRITORY")
    age_period$   = option!.getOptionData("PICK_PER")
    age_basis$    = option!.getOptionData("REPORT_TYPE")
    minimum$      = option!.getOptionData("PICK_NO")
    option$       = option!.getOptionData("REPORT_OPTION")
    sequence$     = option!.getOptionData("REPORT_SEQUENCE")
    customer_id$  = option!.getOptionData("CUSTOMER_ID")
    alt_sequence$ = option!.getOptionData("ALT_SEQUENCE")

    minimum=num(minimum$)
    period=num(age_period$,err=*next)

    if pos(option$="SR")
        if sequence$="C"
            begcust$=customer_id$
            endcust$=customer_id$
        else
            begalt$=alt_sequence$
            endalt$=alt_sequence$
        endif
    endif
    if option$="R"
        endcust$=""
        endalt$=""
    endif

rem --- Initializations

    artype$=fill(2)
    keynum$="PRIMARY"
    begvalue$=begcust$
    endvalue$=endcust$
    master_document=1

    if sequence$="A" then 
        keynum$="AO_ALTSEQ_CUST"
        begvalue$=begalt$
        endvalue$=endalt$
    endif

    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0    

rem --- Determine 30 day aging period dates

    for x=-5 to 0
        enddate$=""
        call pgmdir$+"adc_daydates.aon",stmt_date$,enddate$,x*30
        period_dates$=enddate$+period_dates$
    next x

rem --- Start progress meter and position Customer Master (arm-01) file

    call pgmdir$+"adc_progress.aon","NC","ARM_CUSTMAST","","","",0,arm01_dev,1,meter_num,status

    read (arm01_dev,knum=keynum$,key=firm_id$,dom=*proceed)

rem --- Read next Customer Master (arm-01) and Detail (arm-02) record

    while 1

        if pos(option$="RS")
            if first_pass=0
                read (arm01_dev,knum=keynum$,key=firm_id$+begvalue$,dir=0,dom=*next)            
            endif   
        endif
 
        read record (arm01_dev,end=*break)arm01a$
 
        first_pass=1
        if firm_id$<>arm01a.firm_id$ break
        if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if sequence$="C" if endvalue$<>"" if arm01a.customer_id$>endvalue$ break
        if sequence$="A" if endvalue$<>"" if arm01a.alt_sequence$>endvalue$ break
        dim arm02a$:fattr(arm02a$)
        k$=arm01a.firm_id$+arm01a.customer_id$+artype$
        find record (arm02_dev,key=k$,dom=*continue) arm02a$

    rem --- Does this customer meet the selection criteria?

        if option$<>"S" then if arm02a.statements$<>"Y" continue

        if territory$<>"" if arm02a.territory$<>territory$ continue
        if cycle$<>"" if arm02a.ar_cyclecode$<>cycle$ continue

    rem --- Position the Invoice Header (art-01) file for aging

        dim aging[5]
        customer$=arm01a.firm_id$+artype$+arm01a.customer_id$
        read (art01_dev,key=customer$,dom=*next)

    rem --- Read next Invoice Header record

        while 1
            art01_key$=key(art01_dev,end=*break)
            if pos(customer$=art01_key$)<>1 break
            read record (art01_dev) art01a$
            if art01a.invoice_date$>stmt_date$ continue

        rem --- Accumulate any adjustments made to this invoice

            gosub adjustments
            balance=art01a.invoice_amt+applied

        rem --- Age this invoice

            agingdate$=art01a.invoice_date$
            if age_basis$<>"I" agingdate$=art01a.inv_due_date$
            invagepd=pos(agingdate$>period_dates$,8); rem determine invoice aging period for proper accumulation
            if invagepd=0 invagepd=5 else invagepd=int(invagepd/8)
            aging[invagepd]=aging[invagepd]+balance

        wend

    rem --- Above the minimum balance for printing?

        balance=0

        for x=period to 5
            balance=balance+aging[x]
        next x

        if minimum <> 0 then if balance<minimum continue

    rem --- Make Document Archive Record and Get Document ID

        rep_date$=date(0:stbl("+DATE_MASK"))
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")

        rd_source_alias$=option!.getAlias()
        rd_source_type$="O"
        rd_doc_source$="E"
        rd_doc_ext$="PDF"

        new_doc_id$=""
        new_doc_name$=""
        doc_name$="CustomerStatement_"+arm01a.customer_id$
        doc_keywords$="Stmt date: "+fndate$(stmt_date$)

        rem --- Get Next Document Number and update Document Audit for individual pdf

        call stbl("+DIR_SYP")+"bas_sequences.bbj","DOC_NO",new_doc_id$,rd_table_chans$[all] 
        new_doc_name$=new_doc_id$+"_"+doc_name$+".pdf"        
        
        call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,rep_date_stamp$,rep_time_stamp$,rd_doc_source$,rd_doc_ext$,docdir$,
:           rd_source_type$,rd_source_alias$,"C",arm01a.customer_id$,rd_table_chans$[all],"",new_doc_name$,doc_name$,doc_keywords$

        rem --- Get Next Document Number and update Document Audit for master copy of pdf, if first time thru

        if master_document
            rd_doc_ext$="JAS"
            rd_archive_action$="DOC_ID-NOREPRINT"
            rd_doc_id$=""
            gosub document_whse
            rd_archive_action$=""
            master_doc_id$=rd_doc_id$
            master_doc_name$=master_doc_id$+"_"+masterBaseName$+".pdf"
        endif

    rem --- Document Output Report Parameters

        params!.put("DOC_NO",new_doc_id$)
        params!.put("DATE_REP",rep_date$+"  "+rep_time$)

    rem --- Other params

        params!.put("BARISTA_WD",dir(""))
        params!.put("LOGO_FILE",logo_filenm$)
        params!.put("FIRM_ID",firm_id$)
        params!.put("STATEMENT_DATE",stmt_date$)
        params!.put("CUSTOMER_ID",arm01a.customer_id$)
        params!.put("MESSAGE",message$)
        params!.put("AGE_BASIS",age_basis$)
        params!.put("AMT_MASK",m1$)
        params!.put("CUST_MASK",m0$)
        params!.put("CUST_SIZE",str(customer_size))
        params!.put("PERIOD_DATES",period_dates$)        

    rem --- invoke jasper
        
        if master_document
            master_report! = new BBJasperReport(master_filename$,url$)
            master_report!.fill()
            master_document=0
        endif

        report! = new BBJasperReport(filename$,url$)
        report!.putParams(params!)

        locale$ = stbl("!LOCALE")
        locale$ = stbl("+USER_LOCALE",err=*next)
        report!.setLocale(locale$)
     
        report!.fill()
        report!.exportToPDF(BBjAPI().FALSE, docdir$+new_doc_name$)

        master_report!.appendReport(report!)
     
        call stbl("+DIR_PGM")+"adc_rptcontrol.aon",option!.getAlias(),arm01a.customer_id$,"C",new_doc_id$,"pdf"
    
        report!.destroy()
    
    rem --- Loop back for next Customer Master

        total_recs=total_recs+1
		if option$="S" break

    wend

rem --- done

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    if total_recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if master_report!=null() then goto std_exit

rem --- export the master doc as PDF

    repTitle$=masterBaseName$
    rd_doc_id$=master_doc_id$
    
    rem --- bring up master statement document in jasper viewer  

    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path

    rem --- previous version auto exported to pdf regardless of user action in jasper viewer
    rem --- so gosub-ing the export routine here to keep backward compatible
    gosub OnSaveMenuButton
    
    declare BBJasperViewerWindow viewerWindow!
    viewerWindow! = new BBJasperViewerWindow(master_report!,0,0,screen_width,screen_height,repTitle$,$00080093$)

    viewerControl! = viewerWindow!.getViewerControl()
    viewerControl!.setGoogleDefaultDocument(repTitle$)
    viewerControl!.setDefaultSaveFolder(rd_doc_path$)
    viewerControl!.setDefaultSaveFile(repTitle$)

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    saveMenuButton! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    saveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnSaveMenuButton")

    emailToolButton! = viewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    emailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnEmailToolButton")

    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)

    declare BBjTopLevelWindow bbjWindow!
    bbjWindow!= viewerWindow!.getViewerWindow()
    cancelled=1
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"close_win",err=*next); cancelled=0
    if cancelled then goto close_win

rem --- Event Control

    process_events,err=*same

    release

 document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_tmp_dir$=stbl("+DOC_DIR_PDF",err=*endif)
        rd_temp_wd$=dsk("")+dir("")
        if pos(":"=rd_tmp_dir$) setdrive rd_tmp_dir$(1,pos(":"=rd_tmp_dir$)-1),err=*next
        chdir rd_tmp_dir$,err=*next
        rd_doc_path$=dsk("")+dir("")
        if pos(":"=rd_temp_wd$) setdrive rd_temp_wd$(1,pos(":"=rd_temp_wd$)-1)
        chdir rd_temp_wd$
    endif

    return

OnSaveMenuButton:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_name$=repTitle$+".pdf"
        rd_doc_ext$="PDF"
        master_report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif
    return    

OnEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

close_win:rem --- Viewer Window Closed
    viewerWindow!.destroy()
    rdForm!.destroy(err=*next)
    if tcb(13) then exit
    release

adjustments: rem --- Accumulate any adjustments for the current invoice

rem --- Position Invoice Detail (art-11) file

    art01_key$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$
    read (art11_dev,key=art01_key$,dom=*next)

rem --- Read Invoice Detail (art-11) records

    applied=0

    while 1
        k$=key(art11_dev,end=*break)
        if pos(art01_key$=k$)<>1 break
        read record (art11_dev) art11a$
        if art11a.trans_date$ <= stmt_date$ then applied = applied+art11a.trans_amt+art11a.adjdisc_amt
    wend

    return

rem --- Functions

rem --- fntestvalue: Return maximum numeric value for a given mask

    def fntestvalue(q$)
        q1$=""
        for q=1 to len(q$)
            if pos(q$(q,1)="#0") q1$=q1$+"9"
            if q$(q,1)="." q1$=q1$+"."
        next q
        q=num(q1$)
        return q
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    release

rem #endinclude std_end.src

    end

