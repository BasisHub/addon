rem arm - Customer Maintenance (Open Invoices)
rem Program arr_invdetail v8.0.0 15Nov2006 (arm_mi)
rem Created by adx_codeport.bbx v1.1.2 (11/15/2006 09:12:26)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- The following IOLIST's were removed from this program:

rem --- art01a: iolist x0$,x[all] - open invoice hdr
rem --- art11a: iolist w0$,w1$,w[all] - open invoice dtl

rem --- The following channel references have been identified:

rem --- ars01a: (Generated by CodePort)

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    sys_date$=sysinfo.system_date$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$
    milestone=num(stbl("+MILESTONE"))

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",options$[1]="OPT",ids$[1]="ARS_PARAMS"
    files$[2]="art-01",options$[2]="OPT",ids$[2]="ART_INVHDR"
    files$[3]="art-11",options$[3]="OPT",ids$[3]="ART_INVDET"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1];dim ars01a$:templates$[1]
    art01_dev=channels[2];dim art01a$:templates$[2]
    art11_dev=channels[3];dim art11a$:templates$[3]


rem --- Assign form input values to local variables

    table$=fnget_table$("")
    cust_id$=fnget_fld_data$(table$,"CUSTOMER_ID")
    beg_inv_no$=fnget_fld_data$(table$,"AR_INV_NO")
    inv_type$=fnget_fld_data$(table$,"PD_UNPD_BOTH")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$

rem --- Initializations

    width=80
    title$=Translate!.getTranslation("AON_INVOICE_DETAIL_INQUIRY,_CUSTOMER_")
    dim x0$(50),x[1],w0$(19),w1$(11),w[1],control[2]
    dim heading$(width-2)
    dim inv_types$[3]
    inv_types$[1]=Translate!.getTranslation("AON_PAID")
    inv_types$[2]=Translate!.getTranslation("AON_UNPAID")
    inv_types$[3]=Translate!.getTranslation("AON_BOTH")

	call pgmdir$+"adc_getmask.aon","","AR","A","",m1$,0,m1

    call pgmdir$+"adc_progress.aon","N","","","","",0,art01_dev,1,meter_num,status

rem --- Init Headings

rem --- date/time 
    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- column headings
    dim columns$[8,10]
        columns$[0,0]=Translate!.getTranslation("AON_INVOICE"),columns$[0,1]="C",columns$[0,2]="15"
        columns$[1,0]=Translate!.getTranslation("AON_DATE"),columns$[1,1]="C",columns$[1,2]="15"
        columns$[2,0]=Translate!.getTranslation("AON_DUE/REF"),columns$[2,1]="C",columns$[2,2]="15"
        columns$[3,0]="TC",columns$[3,1]="C",columns$[3,2]="5",columns$[3,3]="##0"
        columns$[4,0]=Translate!.getTranslation("AON_TYPE"),columns$[4,1]="C",columns$[4,2]="5"
        columns$[5,0]=Translate!.getTranslation("AON_INVOICE"),columns$[5,1]="N",columns$[5,2]="15",columns$[5,3]=m1$
        columns$[6,0]=Translate!.getTranslation("AON_APPLIED"),columns$[6,1]="N",columns$[6,2]="15",columns$[6,3]=m1$
        columns$[7,0]=Translate!.getTranslation("AON_DISCOUNT"),columns$[7,1]="N",columns$[7,2]="15",columns$[7,3]=m1$
        columns$[8,0]=Translate!.getTranslation("AON_BALANCE"),columns$[8,1]="N",columns$[8,2]="15",columns$[8,3]=m1$

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- miscellaneous headings
    dim headings$[4]
    headings$[0]=firm_name$,headings$[1]=task_desc$
    headings$[2]=title$+cust_id$
    if beg_inv_no$="" then let x$=Translate!.getTranslation("AON_FIRST_INVOICE") else let x$=Translate!.getTranslation("AON_INVOICE_NO:_")+beg_inv_no$
    headings$[3]=Translate!.getTranslation("AON_BEGINNING_WITH_")+x$
    headings$[4]=Translate!.getTranslation("AON_INVOICE_TYPE:_")+inv_types$[pos(inv_type$="PUB")]

position_header: rem --- Position art-01

    l=1
    inv_found=0
    row=1
    page=1
    t0$=""
    invtotal=0
    apptotal=0
    distotal=0
    baltotal=0
    detail$="Y"
    art01a.firm_id$=firm_id$,art01a.customer_id$=cust_id$,art01a.ar_inv_no$=beg_inv_no$
    read record (art01_dev,key=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$,dom=*next) art01a$

next_art01: rem --- Read next invoice

    k$=key(art01_dev,end=no_more_invoices)
    if pos(art01a.firm_id$+art01a.ar_type$+art01a.customer_id$=k$)<>1 then goto no_more_invoices

rem --- Invoice header

    read record (art01_dev,key=k$) art01a$
    gosub calc_balance
    if inv_type$="P" and balance goto art01_loop
    if inv_type$="U" and balance=0 goto art01_loop

rem --- Display invoice totals

    if t0$<>art01a.ar_inv_no$ gosub inv_total

rem --- Header record

    OutVect!.addItem(art01a.ar_inv_no$)
    OutVect!.addItem(fndate$(art01a.invoice_date$))
    OutVect!.addItem(fndate$(art01a.inv_due_date$))
    OutVect!.addItem(art01a.ar_terms_code$)
    OutVect!.addItem(art01a.invoice_type$)
    OutVect!.addItem(str(invoice))
    OutVect!.addItem("")
    OutVect!.addItem("")    
    if count=0 OutVect!.addItem(str(balance)) else OutVect!.addItem("")
    inv_found=1
    row=row+1
    l=l+1
    invtotal=invtotal+invoice
    baltotal=baltotal+invoice
    record_count=record_count+1
    if mod(record_count,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    


rem --- Skip detail section if no detail

    find (art11_dev,key=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$+"01",dom=no_detail)
    goto detail_rec
no_detail:
    detail$="N"
    goto art01_loop

detail_rec: rem --- Detail record

    read (art11_dev,key=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$,dom=*next)
next_art11:
    k11$=key(art11_dev,end=art01_loop)
    if pos(art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$=k11$)<>1 goto art01_loop
    read record (art11_dev,key=k11$) art11a$
    if art11a.trans_type$=" " goto art11_loop
    OutVect!.addItem("")
    OutVect!.addItem(fndate$(art11a.trans_date$))
    if art11a.trans_type$="C" OutVect!.addItem(art11a.refchk_no$) else OutVect!.addItem("")
    OutVect!.addItem("")
    OutVect!.addItem(art11a.trans_type$)
    OutVect!.addItem("")
    OutVect!.addItem(str(art11a.trans_amt))
    if art11a.adjdisc_amt<>0 OutVect!.addItem(str(art11a.adjdisc_amt)) else OutVect!.addItem("")
    OutVect!.addItem("")
    inv_found=1
    row=row+1
    l=l+1
    apptotal=apptotal+art11a.trans_amt
    distotal=distotal+art11a.adjdisc_amt
    baltotal=baltotal+art11a.trans_amt+art11a.adjdisc_amt

art11_loop: rem --- Loop up for next Detail Record

    goto next_art11

art01_loop: rem --- Loop back for next invoice

    goto next_art01

no_more_invoices: rem --- No more invoices

    if inv_found goto disp_last_page
    rd_msg_id$="AD_NORECS"
    dim rd_msg_tokens$[1]
    rd_msg_opt$=""
    gosub disp_message
    goto finished

disp_last_page: rem --- Display last page

    gosub inv_total
    gosub cust_total

finished: rem --- All done

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    goto std_exit

cust_total: rem --- Customer Total

    OutVect!.addItem("")
    OutVect!.addItem(Translate!.getTranslation("AON_CUSTOMER_TOTAL"))
    xwk=fnblank(3)
    OutVect!.addItem(str(invtotal))
    OutVect!.addItem(str(apptotal))
    OutVect!.addItem(str(distotal))
    OutVect!.addItem(str(baltotal))
    inv_found=1
    row=row+1
    l=l+1
    return

inv_total: rem --- Invoice Total

    if t0$="" goto set_inv_no
    if detail$="N" detail$="Y"; goto set_inv_no
    OutVect!.addItem("")
    OutVect!.addItem(Translate!.getTranslation("AON_INVOICE_TOTAL"))
    xwk=fnblank(6)
    OutVect!.addItem(str(lastbalance))
    xwk=fnblank(9);rem "blank line after inv total
   
set_inv_no:
    let t0$=art01a.ar_inv_no$,lastbalance=balance
    return

calc_balance: rem --- Retrieve payment and adjustments

    let invoice=art01a.invoice_amt,discount=0,applied=0,count=0
    read (art11_dev,key=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$,dom=*next)
next_pay_adj:
    let k11$=key(art11_dev,end=done_pay_adj)
    if pos(art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$=k11$)<>1 goto done_pay_adj
    read record (art11_dev,key=k11$) art11a$
    let applied=applied+art11a.trans_amt
    let discount=discount+art11a.adjdisc_amt
    let count=count+1
    goto next_pay_adj
done_pay_adj:
    let balance=invoice+applied+discount
    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",rd_msg_id$,rd_msg_tokens$[all],rd_msg_opt$,rd_table_chans$[all]

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- Find length of field
    def fnfldlen(q$,q1$)
        dim q2$:q$
        wkq$=fattr(q2$,q1$)
        wkq=dec(wkq$(10,2))
        return wkq
    fnend

rem --- Create blank line in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
