rem --- Salesperson Call List
rem --- Program arr_slspsncalls.aon

rem --- AddonSoftware Version 17.10 - 23Oct2017
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    use java.util.TreeMap
    use java.util.Properties

    setesc std_error
    seterr std_error

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    out_action$="FORMAT"
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)        

rem --- Is Sales Order Processing installed?

    dim info$[20]
    call pgmdir$+"adc_application.aon","OP",info$[all]
    op$=info$[20]

rem --- Open/Lock files

    files=5
    if op$="Y" then files=6
    begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arc_salecode",ids$[1]="ARC_SALECODE"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="arm-02",ids$[3]="ARM_CUSTDET"
    files$[4]="arc_termcode",ids$[4]="ARC_TERMCODE"
    files$[5]="art-01",ids$[5]="ART_INVHDR"
    if op$="Y" then files$[6]="opt-01",ids$[6]="OPT_INVHDR"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status

    if status goto std_exit
    arcSalecode_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm10_dev=channels[4]
    art01_dev=channels[5]
    if op$="Y" then opt01_dev=channels[6]

rem --- Dimension string templates

    dim arcSalecode$:templates$[1],arm01a$:templates$[2],arm02a$:templates$[3]
    dim arm10a$:templates$[4],art01a$:templates$[5]
    if op$="Y" then dim opt01a$:templates$[6]

rem --- Assign form input values to local variables

    begSlspsn$=option!.getOptionData("SALESPERSON_1")
    endSlspsn$=option!.getOptionData("SALESPERSON_2")
    pageBreak$=option!.getOptionData("PAGE_BREAK")

rem --- Retrieve parameter records

    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0
    m0=len(m0$)
    m1=len(m1$)

rem -- Heading Initialization
    columns=7; if op$="Y" then columns=8
    dim columns$[columns,10]
    customer_phone_contact$=Translate!.getTranslation("AON_CUSTOMER")+"^"+Translate!.getTranslation("AON_PHONE")+" & "+
:       Translate!.getTranslation("AON_CONTACT")
    columns$[0,0]=customer_phone_contact$,columns$[0,1]="C",columns$[0,2]="30"
    if op$="Y" then columns$[1,0]=Translate!.getTranslation("AON_ORDER"),columns$[1,1]="C",columns$[1,2]="10"
    col=1; if op$="Y" then col=col+1
    columns$[col,0]=Translate!.getTranslation("AON_INVOICE"),columns$[col,1]="C",columns$[col,2]="10"
    col=2; if op$="Y" then col=col+1
    columns$[col,0]=Translate!.getTranslation("AON_INVOICE")+"^"+Translate!.getTranslation("AON_DATE"),columns$[col,1]="C",columns$[col,2]="10"
    col=3; if op$="Y" then col=col+1
    columns$[col,0]=Translate!.getTranslation("AON_TERMS"),columns$[col,1]="C",columns$[col,2]="20"
    col=4; if op$="Y" then col=col+1
    columns$[col,0]=Translate!.getTranslation("AON_DUE_DATE"),columns$[col,1]="C",columns$[col,2]="10"
    col=5; if op$="Y" then col=col+1
    columns$[col,0]=Translate!.getTranslation("AON_INVOICE_AMOUNT"),columns$[col,1]="N",columns$[col,2]="12",columns$[col,3]=m1$
    col=6; if op$="Y" then col=col+1
    columns$[col,0]=Translate!.getTranslation("AON_BALANCE_DUE"),columns$[col,1]="N",columns$[col,2]="12",columns$[col,3]=m1$
    col=7; if op$="Y" then col=col+1
    columns$[col,0]=Translate!.getTranslation("AON_DAYS")+"^"+Translate!.getTranslation("AON_PAST_DUE"),columns$[col,1]="N",columns$[col,2]="10"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Initializations

    recs=0
    artype$=fill(2)
    notOnFile$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    salesperson$=Translate!.getTranslation("AON_SALESPERSON")
    
rem --- Headings
    
    headings=3
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$

    x$=Translate!.getTranslation("AON_FROM_")
    if begSlspsn$<>"" then
        x$=x$+Translate!.getTranslation("AON_SALESPERSON")+" "+begSlspsn$
    else
        x$=x$+Translate!.getTranslation("AON_THE_FIRST")+" "+Translate!.getTranslation("AON_SALESPERSON")
    endif
    x$=x$+Translate!.getTranslation("AON__THROUGH_")
    if endSlspsn$<>"" then
        x$=x$+Translate!.getTranslation("AON_SALESPERSON")+" "+endSlspsn$
    else
        x$=x$+Translate!.getTranslation("AON_THE_LAST")+" "+Translate!.getTranslation("AON_SALESPERSON")
    endif
    headings$[2]=x$
    if pageBreak$="Y" then headings$[3]="[HEADER]"

rem --- Start progress meter and position Customer Detail (arm-02) file

    read(arm02_dev,key=firm_id$+begSlspsn$,knum="AO_SLSMN_CUST",dom=*next)
    call pgmdir$+"adc_progress.aon","NC","ARM_CUSTDET","","","",0,arm02_dev,1,meter_num,status

rem --- Read next Customer Detail (arm-02) record

    slspsnMap!=new TreeMap()
    currentSlspsn$=""
    while 1
        readrecord(arm02_dev,end=*break)arm02a$
        if arm02a.firm_id$<>firm_id$ then break
        if endSlspsn$<>"" and arm02a.slspsn_code$>endSlspsn$ break
        if arm02a.aging_future+arm02a.aging_cur+arm02a.aging_30+arm02a.aging_60+arm02a.aging_90+arm02a.aging_120=0 then continue
        if mod(recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
          
        rem --- Update slspsnMap! and get customerMap!
        if arm02a.slspsn_code$<>currentSlspsn$ then
            gosub update_slspsnMap
        endif
        slspsnVect!=slspsnMap!.get(arm02a.slspsn_code$)
        customerMap!=slspsnVect!.getItem(1)

        rem --- Get Customer Master (arm-01) record
        findrecord(arm01_dev,key=arm02a.firm_id$+arm02a.customer_id$,dom=*continue)arm01a$
        call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(arm01a.phone_no$,2),"(###)###-####",phone_mask$
        phone$=cvs(arm01a.phone_no$,2)
        phone$=str(phone$:phone_mask$,err=*next)
        if cvs(arm01a.phone_exten$,2)<>"" then phone$=phone$+"x"+arm01a.phone_exten$

        rem --- Update customerMap! and get invoiceMap!
        gosub update_customerMap
        thisSlspsnCustomerInvoiceMap!=customerVect!.getItem(1)

        rem --- Get invoices for this customer
        read(art01_dev,key=arm02a.firm_id$+artype$+arm02a.customer_id$,dom=*next)
        while 1
            readrecord(art01_dev,end=*break)art01a$
            if art01a.firm_id$+art01a.ar_type$+art01a.customer_id$<>arm02a.firm_id$+artype$+arm02a.customer_id$ then break
            if art01a.invoice_bal<=0 then continue
            if art01a.inv_due_date$>stbl("+SYSTEM_DATE") then continue
            invoiceMap!=thisSlspsnCustomerInvoiceMap!
            recs=recs+1

            rem --- Get Terms Code (arc_termscode) record
            redim arm10a$
            arm10a.code_desc$=notOnFile$
            findrecord(arm10_dev,key=arm02a.firm_id$+"A"+art01a.ar_terms_code$,dom=*next)arm10a$

            rem --- Get order (and salesperson) when OP installed
            if op$="Y" then
                redim opt01a$
                findrecord(opt01_dev,key=arm02a.firm_id$+artype$+art01a.ar_inv_no$+arm02a.customer_id$,knum="AO_INV_CUST",dom=*next)opt01a$

                rem --- Was this OP invoice done by the customer's default salesperson?
                if cvs(opt01a.firm_id$+opt01a.ar_inv_no$+opt01a.customer_id$,2)<>"" and opt01a.slspsn_code$<>currentSlspsn$ then
                    rem --- Update this salesperson's slspsnVect! to include this customer and invoice
                    if slspsnMap!.containsKey(opt01a.slspsn_code$) then
                        slspsnVect!=slspsnMap!.get(opt01a.slspsn_code$)
                    else
                        gosub update_slspsnMap
                    endif
                    customerMap!=slspsnVect!.getItem(1)

                    rem --- Update this salesperson's customerMap! to include this customer and invoice
                    gosub update_customerMap
                    invoiceMap!=customerVect!.getItem(1)
                endif
            endif
            
            rem --- Update invoiceMap!
            invoiceProp!=new Properties()
            invoiceProp!.setProperty("order_no",opt01a.order_no$)
            invoiceProp!.setProperty("ar_inv_no",art01a.ar_inv_no$)
            invoiceProp!.setProperty("invoice_date",art01a.invoice_date$)
            invoiceProp!.setProperty("terms",arm10a.code_desc$)
            invoiceProp!.setProperty("inv_due_date",art01a.inv_due_date$)
            invoiceProp!.setProperty("invoice_amt",str(art01a.invoice_amt))
            invoiceProp!.setProperty("invoice_bal",str(art01a.invoice_bal))
            invoiceMap!.put(art01a.ar_inv_no$,invoiceProp!)
        wend
    wend

    rem --- Print the report
  
    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    else
        slspsnCount=0
        slspsnIter!=slspsnMap!.keySet().iterator()
        while slspsnIter!.hasNext()
            slspsnVect!=slspsnMap!.get(slspsnIter!.next())
            slspsnProp!=slspsnVect!.getItem(0)
            customerMap!=slspsnVect!.getItem(1)
            if customerMap!.size()=0 then continue
            slspsnCount=slspsnCount+1
            
            rem --- Salesperson break
            slspsnHeading$=salesperson$+": ("+slspsnProp!.getProperty("slspsn_code")+") "+slspsnProp!.getProperty("code_desc")    
            if pageBreak$="Y" then
                BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
                HdrVect!.addItem(slspsnHeading$)
            else
                if slspsnCount>1 then xwk=fnblank(columns+1)
        
                outVect!.addItem(slspsnHeading$+$00$+"B")
                xwk=fnblank(columns)
            endif
            
            customerIter!=customerMap!.keySet().iterator()
            while customerIter!.hasNext()
                customerVect!=customerMap!.get(customerIter!.next())
                customerProp!=customerVect!.getItem(0)
                invoiceMap!=customerVect!.getItem(1)
                if invoiceMap!.size()=0 then continue
            
                rem --- Customer break for current salesperson
                outVect!.addItem(customerProp!.getProperty("customer_id")+"  "+customerProp!.getProperty("customer_name"))
                xwk=fnblank(columns)
                
                invoiceCount=0
                invoiceIter!=invoiceMap!.keySet().iterator()
                while invoiceIter!.hasNext()
                    invoiceProp!=invoiceMap!.get(invoiceIter!.next())
                    invoiceCount=invoiceCount+1
                        
                    rem --- Print invoice for current customer
                    if invoiceCount=1 then
                        outVect!.addItem("      "+customerProp!.getProperty("phone")+" "+customerProp!.getProperty("contact_name"))
                    else
                        outVect!.addItem("")
                    endif
                    if op$="Y" then outVect!.addItem(invoiceProp!.getProperty("order_no"))
                    outVect!.addItem(invoiceProp!.getProperty("ar_inv_no"))
                    outVect!.addItem(fndate$(invoiceProp!.getProperty("invoice_date")))          
                    outVect!.addItem(invoiceProp!.getProperty("terms"))
                    outVect!.addItem(fndate$(invoiceProp!.getProperty("inv_due_date")))
                    outVect!.addItem(invoiceProp!.getProperty("invoice_amt"))
                    outVect!.addItem(invoiceProp!.getProperty("invoice_bal"))
                    daysPastDue=0
                    call pgmdir$+"adc_daydates.aon",invoiceProp!.getProperty("inv_due_date"),stbl("+SYSTEM_DATE"),daysPastDue
                    outVect!.addItem(str(daysPastDue))
                wend; rem --- invoices
            wend; rem --- customers
        wend; rem --- salespersons
    endif

rem --- All done

    goto std_exit

update_slspsnMap: rem --- Update slspsnMap!
    currentSlspsn$=arm02a.slspsn_code$
    dim arcSalecode$:fattr(arcSalecode$)
    arcSalecode$.code_desc$=notOnFile$
    findrecord(arcSalecode_dev,key=arm02a.firm_id$+"F"+currentSlspsn$,dom=*next)arcSalecode$

    slspsnProp!=new Properties()
    slspsnProp!.setProperty("slspsn_code",arcSalecode.slspsn_code$)
    slspsnProp!.setProperty("code_desc",arcSalecode.code_desc$)
    slspsnVect!=bbjAPI().getSysGui().makeVector()
    slspsnVect!.addItem(slspsnProp!)
    slspsnVect!.addItem(new TreeMap())
    slspsnMap!.put(arcSalecode.slspsn_code$,slspsnVect!)
    return

update_customerMap: rem --- Update customerMap!
    if customerMap!.containsKey(arm01a.customer_id$) then
        customerVect!=customerMap!.get(arm01a.customer_id$)
    else
        customerProp!=new Properties()
        customerProp!.setProperty("customer_id",fnmask$(arm01a.customer_id$(1,customer_size),m0$))
        customerProp!.setProperty("customer_name",arm01a.customer_name$)
        customerProp!.setProperty("phone",phone$)
        customerProp!.setProperty("contact_name",arm01a.contact_name$)
        customerVect!=bbjAPI().getSysGui().makeVector()
        customerVect!.addItem(customerProp!)
        customerVect!.addItem(new TreeMap())
        customerMap!.put(arm01a.customer_id$,customerVect!)
    endif
    return

rem --- Functions

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
