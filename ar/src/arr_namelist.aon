rem arr - Customer Name Listing
rem Program arr_namelist v8.0.0 05May2006 (arr_rb)
rem Created by adx_progconv.bbx v1.0.2 (05/05/2006 03:13:35)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Inits

    use ::ado_func.src::func
    use ::sys/prog/bao_option.bbj::Option
    use ::bbtranslator.bbj::BBTranslator
    
    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    
    declare Option option!
    declare BBTranslator Translate!

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)        

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[2]="arm-02",ids$[2]="ARM_CUSTDET"
    files$[3]="arc_termcode",ids$[3]="ARC_TERMCODE"
    files$[4]="arc_salecode",ids$[4]="ARC_SALECODE"
    files$[5]="arc_terrcode",ids$[5]="ARC_TERRCODE"
    files$[6]="arc_custtype",ids$[6]="ARC_CUSTTYPE"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm01_dev=channels[1]
    arm02_dev=channels[2]
    arc_termcode_dev=channels[3]
    arc_salecode_dev=channels[4]
    arc_terrcode_dev=channels[5]
    arc_custtype_dev=channels[6]

rem --- Dimension string templates

    dim arm01a$:templates$[1],arm02a$:templates$[2],arm10a$:templates$[3]
    dim arm10f$:templates$[4],arm10h$:templates$[5],arm10l$:templates$[6]

rem --- Assign form input values to local variables

    sequence$=option!.getOptionData("REPORT_SEQ_MSTY")
    begterms$=option!.getOptionData("AR_TERMS_CODE_1")
    endterms$=option!.getOptionData("AR_TERMS_CODE_2")
    begsales$=option!.getOptionData("SALESPERSON_1")
    endsales$=option!.getOptionData("SALESPERSON_2")
    begterr$=option!.getOptionData("TERRITORY_1")
    endterr$=option!.getOptionData("TERRITORY_2")
    begtype$=option!.getOptionData("CUSTOMER_TYPE_1")
    endtype$=option!.getOptionData("CUSTOMER_TYPE_2")
    page_break$=option!.getOptionData("PAGE_BREAK")
    export_format$=option!.getOptionData("EXPORT_FORMAT")

rem --- Retrieve parameter records

    dim p[5]
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,cust_size
    m9$="(###)-000-0000"
    m0=len(m0$)
    m9=len(m9$)

rem --- Column Headings

    columns=6
    if export_format$="Y"
        columns=columns+4
    endif
    dim columns$[columns,10]

    columns$[0,0]=Translate!.getTranslation("AON_CUST_NO"),  columns$[0,1]="C",columns$[0,2]="8"
    columns$[1,0]=Translate!.getTranslation("AON_NAME"),  columns$[1,1]="C",columns$[1,2]="30"
    columns$[2,0]=Translate!.getTranslation("AON_ADDRESS"),   columns$[2,1]="C",columns$[2,2]="24"
    columns$[3,0]=Translate!.getTranslation("AON_CITY"),   columns$[3,1]="C",columns$[3,2]="15"
    columns$[4,0]=Translate!.getTranslation("AON_STATE"),   columns$[4,1]="C",columns$[4,2]="5"
    columns$[5,0]=Translate!.getTranslation("AON_ZIP/POSTAL"),columns$[5,1]="C",columns$[5,2]="8"
    columns$[6,0]=Translate!.getTranslation("AON_PHONE"),     columns$[6,1]="C",columns$[6,2]="10"
    if export_format$="Y"
        columns$[7,0]=Translate!.getTranslation("AON_TERMS_CODE"), columns$[7,1]="C",columns$[7,2]="10"
        columns$[8,0]=Translate!.getTranslation("AON_SALESPERSON"),columns$[8,1]="C",columns$[8,2]="10"
        columns$[9,0]=Translate!.getTranslation("AON_TERRITORY"),  columns$[9,1]="C",columns$[9,2]="10"
        columns$[10,0]=Translate!.getTranslation("AON_CUST_TYPE"),  columns$[10,1]="C",columns$[10,2]="10"
    endif

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]
    
rem --- Initializations

    headings=5
    dim headings$[headings],o[4]
    more=1
    page=0
    code=pos(sequence$="MSTY")
    width=132
    total=0
    maxlines=59
    lines=maxlines+1
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    lastvalue$=""
    when$=sysinfo.system_date$
    clock$=""
    terms=1
    salesperson=2
    territory=3
    type=4
    length=2
    keynum$="AO_TERMS_CUST"
    begvalue$=begterms$
    endvalue$=endterms$
    total_recs=0

    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" "
    if sequence$="M" headings$[1]=headings$[1]+Translate!.getTranslation("AON_BY_TERMS_CODE")
    if sequence$="S"
        length=3
        keynum$="AO_SLSMN_CUST"
        begvalue$=begsales$
        endvalue$=endsales$
        headings$[1]=headings$[1]+Translate!.getTranslation("AON_BY_SALESPERSON")
    endif
    if sequence$="T"
        length=3
        keynum$="AO_TERR_CUST"
        begvalue$=begterr$
        endvalue$=endterr$
        headings$[1]=headings$[1]+Translate!.getTranslation("AON_BY_TERRITORY")
    endif
    if sequence$="Y"
        length=3
        keynum$="AO_TYPE_CUST"
        begvalue$=begtype$
        endvalue$=endtype$
        headings$[1]=headings$[1]+Translate!.getTranslation("AON_BY_CUSTOMER_TYPE")
    endif
    if begvalue$="" headings$[2]=Translate!.getTranslation("AON_FROM_FIRST_THROUGH_") else headings$[2]=Translate!.getTranslation("AON_FROM_")+cvs(begvalue$,2)+Translate!.getTranslation("AON__THROUGH_")
    if endvalue$="" headings$[2]=headings$[2]+Translate!.getTranslation("AON_LAST") else headings$[2]=headings$[2]+endvalue$
    endvalue=len(endvalue$)
    if export_format$<>"Y" and page_break$="Y"
        headings$[5]="[HEADER]"
    endif

rem --- Initialize print positions

    o[0]=0
    o[1]=o[0]+m0+1
    o[2]=o[1]+31
    o[3]=18+m0
    o[4]=width-m9
    o[3]=o[4]-12
    w=o[3]-o[2]-2

rem --- Open printer, start progress meter and position header file

    read(arm02_dev,key=firm_id$,knum=keynum$,dom=*next)
    call pgmdir$+"adc_progress.aon","NC","ARM_CUSTDET","","","",0,arm02_dev,1,meter_num,status

rem --- Initial Read

    while begvalue$<>""
        read (arm02_dev,key=firm_id$+cvs(begvalue$,2),knum=keynum$,dom=no_find)
        read (arm02_dev,dir=-1,err=*next)
    no_find: 
        beg_value$=begvalue$
        begvalue$=""
    wend

rem --- Read next Customer Detail (arm-02) record

    while more
        k$=key(arm02_dev,knum=keynum$,end=*break)
        if pos(firm_id$=k$)<>1 break
        if beg_value$<>"" 
            if k$(3,len(cvs(beg_value$,2)))<cvs(beg_value$,2)
                read(arm02_dev)
                continue
            endif
        endif
        if endvalue$<>"" if k$(3,endvalue)>endvalue$ break
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        read record (arm02_dev) arm02a$

    rem --- Level break?

        value$=k$(3,length)
        if value$<>lastvalue$ 
            gosub code_break
            gosub subheading
        endif

    rem --- Retrieve the Customer Master (arm-01) record

        dim arm01a$:fattr(arm01a$)
        arm01a.customer_name$=nf$
        k$=firm_id$+arm02a.customer_id$
        find record (arm01_dev,key=k$,dom=*next) arm01a$

    rem --- Prepare Address lines

        addrVect!=bbjAPI().getSysGui().makeVector()
        if cvs(arm01a.addr_line_1$,2)<>"" then addrVect!.addItem(arm01a.addr_line_1$)
        if cvs(arm01a.addr_line_2$,2)<>"" then addrVect!.addItem(arm01a.addr_line_2$)
        if cvs(arm01a.addr_line_3$,2)<>"" then addrVect!.addItem(arm01a.addr_line_3$)
        if cvs(arm01a.addr_line_4$,2)<>"" then addrVect!.addItem(arm01a.addr_line_4$)

    rem --- Print the detail line

        OutVect!.addItem(func.alphaMask(arm02a.customer_id$(1,cust_size),m0$))
        OutVect!.addItem(arm01a.customer_name$)
        if addrVect!.size()>0 then
            OutVect!.addItem(addrVect!.getItem(0))
        else
            OutVect!.addItem("")
        endif
        OutVect!.addItem(arm01a.city$)
        OutVect!.addItem(arm01a.state_code$)
        call stbl("+DIR_SYP")+"bac_getmask.bbj","P",cvs(arm01a.zip_code$,2),"",postal_mask$
        postal$=cvs(arm01a.zip_code$,2)
        postal$=str(postal$:postal_mask$,err=*next)
        OutVect!.addItem(postal$)
        call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(arm01a.phone_no$,2),"",phone_mask$
        phone$=cvs(arm01a.phone_no$,2)
        phone$=str(phone$:phone_mask$,err=*next)
        OutVect!.addItem(phone$)
        
        if export_format$="Y"
            OutVect!.addItem(arm02a.ar_terms_code$)
            OutVect!.addItem(arm02a.slspsn_code$)
            OutVect!.addItem(arm02a.territory$)
            OutVect!.addItem(arm02a.customer_type$)
        endif
        
        if addrVect!.size()>1 then
            for i=1 to addrVect!.size()-1
                xwk=fnblank(2)
                OutVect!.addItem(addrVect!.getItem(i))
                xwk=fnblank(columns-2)
            next i
        endif
        
        total=total+1
    wend

rem --- All done

    outVect!.addItem(str(total)+Translate!.getTranslation("AON__CUSTOMER(S)_LISTED"))
    xwk=fnblank(columns)
    goto std_exit

subheading: rem --- Subheading by code

    if export_format$<>"Y"
        if page_break$="Y"
            BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
            HdrVect!.addItem(buffer$)
        else
            xwk=fnblank(columns+1)
            OutVect!.addItem(buffer$)
            xwk=fnblank(columns)
        endif    
    endif   
    
    return

code_break: rem --- Code sequence break

    dim buffer$(m0+31)
    
    switch code
        case terms
            dim arm10a$:fattr(arm10a$)
            arm10a.code_desc$=nf$
            k$=firm_id$+"A"+value$
            find record (arc_termcode_dev,key=k$,dom=*next) arm10a$  
            buffer$(1)=Translate!.getTranslation("AON_TERMS_")+arm10a.ar_terms_code$+" - "+arm10a.code_desc$
            break
        case salesperson
            dim arm10f$:fattr(arm10f$)
            arm10f.code_desc$=nf$
            k$=firm_id$+"F"+value$
            find record (arc_salecode_dev,key=k$,dom=*next) arm10f$
            buffer$(1)=Translate!.getTranslation("AON_SALESPERSON_")+arm10f.slspsn_code$+" - "+arm10f.code_desc$
            break
        case territory
            dim arm10h$:fattr(arm10h$)
            arm10h.code_desc$=nf$
            k$=firm_id$+"H"+value$
            find record (arc_terrcode_dev,key=k$,dom=*next) arm10h$  
            buffer$(1)=Translate!.getTranslation("AON_TERRITORY_")+arm10h.territory$+" - "+arm10h.code_desc$
            break
        case type
            dim arm10l$:fattr(arm10l$)
            arm10l.code_desc$=nf$
            k$=firm_id$+"L"+value$
            find record (arc_custtype_dev,key=k$,dom=*next) arm10l$  
            buffer$(1)=Translate!.getTranslation("AON_CUSTOMER_TYPE_")+arm10l.customer_type$+" - "+arm10l.code_desc$
            break
        case default
            break
    swend
    
    lastvalue$=value$
    lines=maxlines+1
    return

rem --- Functions

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
    
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
