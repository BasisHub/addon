rem --- Simple Invoice Printing/Detail
rem --- Program arr_invoices v8.0.0 01Dec2006 (arr_ub)
rem --- Created by adx_codeport.bbx v1.1.3 (12/01/2006 06:05:56)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Inits

    use ::ado_func.src::func
    use ::sys/prog/bao_option.bbj::Option
    use ::bbtranslator.bbj::BBTranslator
    use ::ado_pdf.src::PDFHelper
    
    use java.awt.Font
    use java.awt.Color
    use javax.print.attribute.HashPrintRequestAttributeSet
    use javax.print.attribute.standard.MediaPrintableArea
    use java.lang.Float
    use java.awt.Dimension
    
    declare Option option!
    declare BBTranslator Translate!
    declare Font textfont!
    declare Font boldfont!
    declare Font largefont!
    declare BBjForm docPrint!
    declare BBjFormPage pagePrint!
    declare BBjFormPage page!
    declare Color red!
    declare Color white!
    declare Color grey!
    declare HashPrintRequestAttributeSet requestAttributes!
    declare MediaPrintableArea a!
    declare Float x!
    declare Float y!
    declare Float w!
    declare Float h!
    declare BBjPrinter myBBjPrinter!
    declare BBjForm docPDF!
    declare BBjFormPage pagePDF!
    declare BBjTemplatedString rec!
    declare BBjFormParagraph tmp!
    declare Font tmp_font!
    declare Dimension tmpdim!
    declare BBjFormImage logo!
    declare PDFHelper pdf!

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Set Print Path

    docdir$=stbl("+DOC_DIR_PDF",err=*next)


rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)    

rem --- Derive/set path and filename for logo to go on form

    logofile$=""
    while 1
        curr_path$=dsk("")+dir("")
        chdir stbl("+CUST_IMAGES",err=*break),err=*break
        logofile$="file:"+dsk("")+dir("")+stbl("+FORM_LOGO",err=*break)
        chdir curr_path$
        break
    wend

rem --- See if batching

    call stbl("+DIR_PGM")+"adc_getbatch.aon","",pgm(-2),rd_table_chans$[all]
    batch_no$=stbl("+BATCH_NO")
    process_id$=stbl("+PROCESS_ID")

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="are-05",ids$[2]="ARE_INVHDR";rem ,options$[2]="L"
    files$[3]="are-15",ids$[3]="ARE_INVDET";rem ,options$[3]="L"
    files$[4]="arm-01",ids$[4]="ARM_CUSTMAST"
    files$[5]="arc_termcode",ids$[5]="ARC_TERMCODE"
    files$[6]="ars_report",ids$[6]="ARS_REPORT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all], ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    ars01_dev=channels[1]
    are05_dev=channels[2]
    are15_dev=channels[3]
    arm01_dev=channels[4]
    arm10_dev=channels[5]
    ars_report_dev=channels[6]

rem --- Dimension string templates

    dim ars01a$:templates$[1],are05a$:templates$[2],are15a$:templates$[3],arm01a$:templates$[4], arm10a$:templates$[5],ars01b$:templates$[6]

rem --- Assign form input values to local variables

    restart$=option!.getOptionData("PICK_CHECK")
    invoice$=option!.getOptionData("PICK_AR_INV_NO")
    message$=option!.getOptionData("PICK_TEXT")
    copies=num(option!.getOptionData("PICK_INTEGER"))
    copies=max(copies,1)
    address=30

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ars01b_key$=firm_id$+"AR02"
    find record (ars_report_dev,key=ars01b_key$,err=std_missing_params) ars01b$
    rec! = BBjAPI().makeTemplatedString( templates$[6] )
    rec!.setString(ars01b$)
    remit$ = func.formatAddress(rec!, 30, 4)

    call pgmdir$+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call pgmdir$+"adc_getmask.aon","","AR","A","",m1$,0,m1
    call pgmdir$+"adc_getmask.aon","","GL","U","",m2$,0,m2

rem --- Initializations

    precision 4
    dim bar$(m1,"-"),o[5],h[1]
    fkey=0
    page=0
    offset=0
    width=80
    lines=0
    address=30
    length=(address*4)+1
    maxlines=35
    moreheaders=1
    moredetail=1
    when$=sysinfo.system_date$
    clock$=""
    answer$="Y"
    msg_id$="PRINT_TEST_PATTERN"
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    recs=0
    total_recs=0

rem --- Initialize print positions

    w=max(customer_size,8)
    o[0]=offset
    o[1]=offset+5
    o[2]=offset+14
    o[5]=width-m1
    o[4]=o[5]-m3
    o[3]=o[4]-m2
    h[0]=offset+33
    h[1]=width-w

rem --- Open the printer

    textfont!  = new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,10)
    boldfont!  = new java.awt.Font("Times New Roman",java.awt.Font.BOLD,10)
    largefont! = new java.awt.Font("Arial",java.awt.Font.BOLD,26)

    red!   = new java.awt.Color(red)
    white! = new java.awt.Color(white)
    grey!  = new java.awt.Color(grey)

    requestAttributes!=new javax.print.attribute.HashPrintRequestAttributeSet()
    requestAttributes!.add(javax.print.attribute.standard.MediaSizeName.NA_LETTER)
    requestAttributes!.add(javax.print.attribute.standard.OrientationRequested.PORTRAIT)

    units=javax.print.attribute.standard.MediaPrintableArea.INCH
    x!=new java.lang.Float(0.25).floatValue()
    y!=new java.lang.Float(0.25).floatValue()
    w!=new java.lang.Float(8.0).floatValue()
    h!=new java.lang.Float(10.5).floatValue()
    a!=new javax.print.attribute.standard.MediaPrintableArea(x!,y!,w!,h!,units)

    requestAttributes!.add(a!)

    left_justify%=0
    right_justify%=1
    center_justify%=2

    myBBjPrinter! = BBjAPI().getBBjPrinter(1,err=*next)
    if myBBjPrinter! = null()
        msg_id$ = "AD_NOPRINTER"
        gosub disp_message
        goto std_exit
    endif

    myBBjPrinter!.setAttributes(requestAttributes!)
    docPrint!=myBBjPrinter!.getForm(0)
    pdf! = new PDFHelper(textfont!)

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","ARE_INVHDR","","","",0,are05_dev,1,meter_num,status
    k$=firm_id$+batch_no$
    if restart$<>"N" k$=k$+invoice$
    read (are05_dev,key=k$,knum="BATCH_KEY",dom=*next)

rem --- Read next Invoice Header (are-05) record

    while moreheaders

        extract record (are05_dev,end=*break) are05a$; rem Advisory Locking
        if are05a.firm_id$<>firm_id$ or are05a.batch_no$<>batch_no$ then break
        recs=recs+1
        if restart$<>"N" and are05a.ar_inv_no$<invoice$ then read(are05_dev); continue
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

    rem --- Skip voided invoices

        if are05a.sim_inv_type$="V" then read(are05_dev); continue

    rem --- Initialize invoice header fields
    rem --- first call bac_documents.bbj to get back document ID
    
        call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,"","","I","PDF",docdir$,
:           "pdf",option!.getAlias(),"C",are05a.customer_id$,table_chans$[all],"DOC_ID"

        prtr_dev=unt
        pdf_doc$=docdir$+new_doc_id$+".pdf"
        open (prtr_dev,err=printer)pdf_doc$
        close (prtr_dev)
        erase pdf_doc$
        
    printer: 
        docPDF!=BBjAPI().getBBjPDFForm(pdf_doc$,requestAttributes!)

        invoice$=are05a.ar_inv_no$
        invoice_date$=func.formatDate(are05a.inv_date$)
        total=0

    rem --- Retrieve Customer Master (arm-01) record

        dim arm01a$:fattr(arm01a$)
        arm01a.firm_id$=firm_id$
        arm01a.customer_id$=are05a.customer_id$
        arm01a.customer_name$=nf$
        k$=arm01a.firm_id$+arm01a.customer_id$ 
        find record (arm01_dev,key=k$,dom=*next) arm01a$

        
        rec! = BBjAPI().makeTemplatedString( fattr(arm01a$) )
        rec!.setString(arm01a$)
        address$ = func.formatAddress(rec!, 30, 7)

    rem --- Retrieve Terms Code (arm-10a) Description

        dim arm10a$:fattr(arm10a$)
        arm10a.firm_id$=firm_id$
        arm10a.record_id_a$="A"
        arm10a.ar_terms_code$=are05a.ar_terms_code$
        arm10a.code_desc$=nf$
        k$=arm10a.firm_id$+arm10a.record_id_a$+arm10a.ar_terms_code$ 
        find record (arm10_dev,key=k$,dom=*next) arm10a$

    rem --- Print the requested number of copies of the invoice

        for copy=1 to copies

            pagePDF!=docPDF!.createPage()
            pagePrint!=docPrint!.createPage(err=std_error)

        rem --- Print the invoice heading

            page=0
            lines=0
            total=0
            gosub heading

        rem --- Position the Invoice Detail (are-15) file

            read (are15_dev,key=firm_id$+invoice$,dom=*next)

        rem --- Read the next Invoice Detail (are-15) record

            while moredetail
                k$=key(are15_dev,end=*break)
                if pos(firm_id$+invoice$=k$)<>1 break
                read record (are15_dev) are15a$
                total=total+are15a.ext_price
                memo=are15a.units+are15a.ext_price=0
                if len(are15a.trns_date$)=8 then
                    linedate$=func.formatDate(are15a.trns_date$)
                else
                    linedate$=are15a.trns_date$
                endif
                
            rem --- Print the detail line

                if lines+4>maxlines gosub overflow
                if memo gosub memo else gosub detail

            wend

        rem --- Print the total and move on to the next copy

            gosub totals
        next copy               

    rem --- Write Print Status and Loop back for next Invoice Header

        are05a.print_status$="Y"
        are05a$=field(are05a$)
        write record(are05_dev)are05a$

    wend

rem --- All done

    if recs=0
        docPrint!.cancel()
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    docPrint!.preview()
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    goto std_exit

heading: rem --- Print the invoice heading

    page=page+1
    page!=pagePrint!
    pdf!.setPage(pagePrint!)

    while 1

    rem --- Header
        pdf!.setText(0,10,568,10,"INVOICE",largefont!,center_justify%)
        rem pdf!.setLogo(0,0,185,68,logo!)

    rem --- Company Address

        pdf!.setText(50,60,remit$(1,address),textfont!)
        pdf!.setText(50,72,remit$(31,address),textfont!)
        pdf!.setText(50,84,remit$(61,address),textfont!)
        pdf!.setText(50,96,remit$(91,address),textfont!)

    rem --- Sold To
    
        pdf!.drawBox(20,126,550,96)
        pdf!.drawLine(65,126,65,222)
        pdf!.setText(20,132,40,132,Translate!.getTranslation("AON_SOLD_TO"),boldfont!,right_justify%)
        pdf!.setText(70,132,address$(1,address),textfont!)
        pdf!.setText(70,144,address$(31,address),textfont!)
        pdf!.setText(70,156,address$(61,address),textfont!)
        pdf!.setText(70,168,address$(91,address),textfont!)    
        pdf!.setText(70,180,address$(121,address),textfont!)
        pdf!.setText(70,192,address$(151,address),textfont!)
        pdf!.setText(70,204,address$(181,address),textfont!)

    rem --- Info Box 
    
        pdf!.drawLine(424,126,424,222)
        pdf!.drawLine(424,150,570,150)
        pdf!.drawLine(424,174,570,174)
        pdf!.drawLine(424,198,570,198)
        pdf!.setText(432,132,54,132,Translate!.getTranslation("AON_PAGE"),boldfont!,right_justify%)
        pdf!.setText(432,156,54,132,Translate!.getTranslation("AON_DATE"),boldfont!,right_justify%)
        pdf!.setText(432,180,54,132,Translate!.getTranslation("AON_CUSTOMER"),boldfont!,right_justify%)
        pdf!.setText(432,204,54,132,Translate!.getTranslation("AON_INVOICE"),boldfont!,right_justify%)

        pdf!.drawLine(490,126,490,222)
        pdf!.setText(496,132,str(page),textfont!)
        pdf!.setText(496,156,invoice_date$,textfont!)
        pdf!.setText(496,180,func.alphaMask(arm01a.customer_id$(1,customer_size),m0$),textfont!)
        pdf!.setText(496,204,are05a.ar_inv_no$,textfont!)

    rem --- Terms
    
        pdf!.drawBox(20,222,550,24)
        pdf!.drawLine(65,222,65,246)
        pdf!.setText(20,228,40,228,Translate!.getTranslation("AON_TERMS"),boldfont!,right_justify%)
        pdf!.setText(70,228,arm10a.code_desc$,textfont!)

    rem --- Ribbon
    
        pdf!.drawBox(20,246,550,24)
        pdf!.drawBox(20,246,550,436)
        pdf!.drawLine(65,246,65,682)
        pdf!.drawLine(115,246,115,682)
        pdf!.drawLine(370,246,370,682)
        pdf!.drawLine(424,246,424,682)
        pdf!.drawLine(490,246,490,682)
        pdf!.setText(20,252,36,252,Translate!.getTranslation("AON_SEQ"),boldfont!,right_justify%)
        pdf!.setText(70,252,58,252,Translate!.getTranslation("AON_DATE"),boldfont!,left_justify%)
        pdf!.setText(120,252,Translate!.getTranslation("AON_MEMO"),boldfont!)
        pdf!.setText(352,252,60,252,Translate!.getTranslation("AON_QTY"),boldfont!,right_justify%)
        pdf!.setText(424,252,60,252,Translate!.getTranslation("AON_PRICE"),boldfont!,right_justify%)
        pdf!.setText(490,252,66,252,Translate!.getTranslation("AON_EXTENSION"),boldfont!,right_justify%)

        lines=0

        if page!=pagePDF! or pagePDF!=null() then break
        page!=pagePDF!
        pdf!.setPage(pagePDF!)
    wend

    return

detail: rem --- Print an invoice detail line

    page!=pagePrint!
    pdf!.setPage(pagePrint!)
    
    while 1

        tmp_line=264+((lines+1)*12)
        pdf!.setText(20,tmp_line,36,tmp_line,are15a.line_no$,textfont!,right_justify%)
        pdf!.setText(70,tmp_line,58,tmp_line,linedate$,textfont!,left_justify%)
        pdf!.setText(120,tmp_line,are15a.description$,textfont!)
        pdf!.setText(352,tmp_line,60,tmp_line,str(are15a.units:m2$),textfont!,right_justify%)
        pdf!.setText(424,tmp_line,60,tmp_line,str(are15a.unit_price:m1$),textfont!,right_justify%)
        pdf!.setText(490,tmp_line,66,tmp_line,str(are15a.ext_price:m1$),textfont!,right_justify%)

        if page!=pagePDF! or pagePDF!=null() then break
        page!=pagePDF!
        pdf!.setPage(pagePDF!)
    wend
    lines=lines+2

    return

memo: rem --- Print a memo line

    page!=pagePrint!
    pdf!.setPage(pagePrint!)
    
    while 1

        tmp_line=264+((lines+1)*12)
        pdf!.setText(20,tmp_line,36,tmp_line,are15a.line_no$,textfont!,right_justify%)
        pdf!.setText(60,tmp_line,58,tmp_line,linedate$,textfont!,center_justify%)
        pdf!.setText(120,tmp_line,are15a.description$,textfont!)

        lines=lines+1

        if page!=pagePDF! or pagePDF!=null() then break
        page!=pagePDF!
        pdf!.setPage(pagePDF!)
    wend

    return

totals: rem --- Print the invoice total

    page!=pagePrint!
    pdf!.setPage(pagePrint!)
    
    while 1

        pdf!.drawBox(424,682,146,24)
        pdf!.drawLine(490,682,490,708)
        pdf!.setText(424,688,60,688,Translate!.getTranslation("AON_TOTAL"),boldfont!,right_justify%)
        pdf!.setText(490,688,66,688,str(total:m1$),textfont!,right_justify%)
        pdf!.setText(70,688,message$,textfont!)

        if page!=pagePDF! or pagePDF!=null() then break
        page!=pagePDF!
        pdf!.setPage(pagePDF!)
    wend

    docPDF!.print()
    call stbl("+DIR_PGM")+"adc_rptcontrol.aon",option!.getAlias(),are05a.customer_id$,"C",new_doc_id$,"pdf"

    return

overflow: rem --- Multi-page invoice

    pdf!.setText(490,688,66,688,Translate!.getTranslation("AON_CONTINUED"),textfont!,right_justify%)
    pagePDF!=docPDF!.createPage()
    pagePrint!=docPrint!.createPage(err=std_error)
    gosub heading
    
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)), str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report: 

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    release

rem #endinclude std_end.src

    end
