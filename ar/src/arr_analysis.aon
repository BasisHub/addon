rem --- Aging Analysis Report
rem --- Program arr_analysis v8.0.0 07Jan2007 (arr_hb)
rem --- Created by adx_codeport.bbx v1.1.5 (01/07/2007 03:33:37)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations
            OutVect!=bbjAPI().getSysGui().makeVector()
            TotVect!=bbjAPI().getSysGui().makeVector()            
            rep_date$=date(0:"%Mz/%Dz/%Yd")
            rep_date_stamp$=date(0:"%Yd%Mz%Dz")
            rep_time$=date(0:"%hz:%mz %p")
            rep_time_stamp$=date(0:"%Hz%mz%sz")
            rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)        

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="arm-02",ids$[3]="ARM_CUSTDET"
    files$[4]="arm-06",ids$[4]="ARM_CUSTPMTS"
    files$[5]="arc_termcode",ids$[5]="ARC_TERMCODE"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm06_dev=channels[4]
    arm10_dev=channels[5]

rem --- Dimension string templates

    dim ars01a$:templates$[1],arm01a$:templates$[2],arm02a$:templates$[3]
    dim arm06a$:templates$[4],arm10a$:templates$[5]

rem --- Assign form input values to local variables

    basis$=option!.getOptionData("REPORT_TYPE")
    days=num(option!.getOptionData("PICK_INTEGER"))
    aging$=option!.getOptionData("PICK_LISTBUTTON")
    sequence$=option!.getOptionData("REPORT_SEQUENCE")
    begcust$=option!.getOptionData("CUSTOMER_ID_1")
    endcust$=option!.getOptionData("CUSTOMER_ID_2")
    begalt$=option!.getOptionData("ALT_SEQUENCE_1")
    endalt$=option!.getOptionData("ALT_SEQUENCE_2")
    col_format$=option!.getOptionData("COL_FORMAT")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0
    m9$="(###) ###-####"
    m0=len(m0$)
    m1=len(m1$)
    m9=len(m9$)

rem -- Heading Initialization
    if col_format$="Y" then
        columns=15
        dim columns$[columns,10]
        col_start=5
        columns$[0,0]=Translate!.getTranslation("AON_CUST_NO"),columns$[0,1]="C",columns$[0,2]="8"
        columns$[1,0]=Translate!.getTranslation("AON_CUSTOMER"),columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]=Translate!.getTranslation("AON_PHONE"),columns$[2,1]="C",columns$[2,2]="12"
        columns$[3,0]=Translate!.getTranslation("AON_CONTACT"),columns$[3,1]="C",columns$[3,2]="25"
        columns$[4,0]=Translate!.getTranslation("AON_TERMS"),columns$[4,1]="C",columns$[4,2]="25"
    else
        columns=11
        dim columns$[columns,10]
        col_start=1
        columns$[0,0]=Translate!.getTranslation("AON_CUSTOMER,_PHONE,_CONTACT,_TERMS"),columns$[0,1]="C",columns$[0,2]="25"
    endif
    columns$[col_start,0]=Translate!.getTranslation("AON_LAST_INV"),columns$[col_start,1]="C",columns$[col_start,2]="8"
    columns$[col_start+1,0]=Translate!.getTranslation("AON_LAST_PAY"),columns$[col_start+1,1]="C",columns$[col_start+1,2]="8"
    columns$[col_start+2,0]=Translate!.getTranslation("AON_DAYS_PAY"),columns$[col_start+2,1]="N",columns$[col_start+2,2]="8",columns$[col_start+2,3]="##0"
    columns$[col_start+3,0]=Translate!.getTranslation("AON_FUTURE"),columns$[col_start+3,1]="N",columns$[col_start+3,2]="10",columns$[col_start+3,3]=m1$,columns$[col_start+3,10]="T"
    columns$[col_start+4,0]=Translate!.getTranslation("AON_CURRENT"),columns$[col_start+4,1]="N",columns$[col_start+4,2]="10",columns$[col_start+4,3]=m1$,columns$[col_start+4,10]="T"
    columns$[col_start+5,0]=Translate!.getTranslation("AON_30_DAYS"),columns$[col_start+5,1]="N",columns$[col_start+5,2]="10",columns$[col_start+5,3]=m1$,columns$[col_start+5,10]="T"
    columns$[col_start+6,0]=Translate!.getTranslation("AON_60_DAYS"),columns$[col_start+6,1]="N",columns$[col_start+6,2]="10",columns$[col_start+6,3]=m1$,columns$[col_start+6,10]="T"
    columns$[col_start+7,0]=Translate!.getTranslation("AON_90_DAYS"),columns$[col_start+7,1]="N",columns$[col_start+7,2]="10",columns$[col_start+7,3]=m1$,columns$[col_start+7,10]="T"
    columns$[col_start+8,0]=Translate!.getTranslation("AON_120_DAYS"),columns$[col_start+8,1]="N",columns$[col_start+8,2]="10",columns$[col_start+8,3]=m1$,columns$[col_start+8,10]="T"
    columns$[col_start+9,0]=Translate!.getTranslation("AON_MTD_SALES"),columns$[col_start+9,1]="N",columns$[col_start+9,2]="10",columns$[col_start+9,3]=m1$,columns$[col_start+9,10]="T"
    columns$[col_start+10,0]=Translate!.getTranslation("AON_YTD_SALES"),columns$[col_start+10,1]="N",columns$[col_start+10,2]="10",columns$[col_start+10,3]=m1$,columns$[col_start+10,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Initializations

    headings=4
    dim headings$[headings],o[7],h[7],totals[8]
    number=0
    page=0
    width=132
    maxlines=59
    lines=maxlines+1
    morecustomers=1
    recs=0
    when$=sysinfo.system_date$
    clock$=""
    artype$=fill(2)
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    total_recs=0
    
    keynum$="PRIMARY"
    begvalue$=begcust$
    endvalue$=endcust$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_CUSTOMER_ID")
    if sequence$="A"
       keynum$="AO_ALTSEQ_CUST"
       begvalue$=begalt$
       endvalue$=endalt$
       headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_ALTERNATE_SEQUENCE")
       headings$[3]=Translate!.getTranslation("AON_BASED_ON_AGING_BALANCE")
    endif

rem --- Headings

    x$=Translate!.getTranslation("AON_FROM_")
    beghdr$=Translate!.getTranslation("AON_FIRST") 
    endhdr$=Translate!.getTranslation("AON_LAST") 
    if begvalue$<>"" if sequence$="A" beghdr$=begvalue$
    if endvalue$<>"" if sequence$="A" endhdr$=endvalue$
    if begvalue$<>"" if sequence$="C" beghdr$=fnmask$(begvalue$,m0$)
    if endvalue$<>"" if sequence$="C" endhdr$=fnmask$(endvalue$,m0$)
    if begvalue$<>"" x$=x$+Translate!.getTranslation("AON_CUSTOMER_")+beghdr$
:               else x$=x$+Translate!.getTranslation("AON_THE_FIRST_CUSTOMER")
    x$=x$+Translate!.getTranslation("AON__THROUGH_")
    if endvalue$<>"" x$=x$+Translate!.getTranslation("AON_CUSTOMER_")+endhdr$
:               else x$=x$+Translate!.getTranslation("AON_THE_LAST_CUSTOMER")
    headings$[2]=x$   
    headings$[3]=Translate!.getTranslation("AON_BASED_ON_AVERAGE_DAYS_TO_PAY")
    x$=Translate!.getTranslation("AON_FUTURE")
    if aging$="C" x$=Translate!.getTranslation("AON_CURRENT")
    if aging$="3" x$=Translate!.getTranslation("AON_30_DAY")
    if aging$="6" x$=Translate!.getTranslation("AON_60_DAY")
    if aging$="9" x$=Translate!.getTranslation("AON_90_DAY")
    if aging$="1" x$=Translate!.getTranslation("AON_120_DAY")
    if basis$="A" headings$[3]=Translate!.getTranslation("AON_BASED_ON_")+x$+Translate!.getTranslation("AON__AGING_BALANCE")

rem --- Define print positions

    o[0]=0
    o[1]=max(o[0]+m0+32,m9+26)
    o[2]=o[1]+9
    o[3]=o[2]+5
    o[7]=width-m1
    o[6]=o[7]-m1
    o[5]=o[6]-m1
    o[4]=o[5]-m1
    for x=0 to 3
        h[x]=o[x]
    next x
    h[4]=o[4]+m1-8
    h[5]=o[5]+m1-8
    h[6]=o[6]+m1-9
    h[7]=o[7]+m1-10
    nw=min(o[1]-m0-1,30)
    cw=min(o[1]-m9-6,20)
    tw=min(o[4]-o[3]-3,20)

rem --- Open printer, start progress meter and position Customer Master (arm-01) file

    read(arm01_dev,key=firm_id$,knum=keynum$,dom=*next)
    call pgmdir$+"adc_progress.aon","NC","ARM_CUSTMAST","","","",0,arm01_dev,1,meter_num,status
    k$=firm_id$
    while begvalue$<>""
        read (arm01_dev,key=firm_id$+cvs(begvalue$,2),knum=keynum$,dom=no_find)
        read (arm01_dev,dir=-1,err=*next)
no_find:
        beg_value$=begvalue$
        begvalue$=""
    wend

rem --- Read next Customer Master (arm-01) record

    while morecustomers
          k$=key(arm01_dev,knum=keynum$,end=*break)
          if pos(firm_id$=k$)<>1 break
          if beg_value$<>"" 
            if k$(3,len(cvs(beg_value$,2)))<beg_value$
                read(arm01_dev)
                continue
            endif
          endif
          if endvalue$<>"" if k$(3,endvalue)>endvalue$ break
          read record (arm01_dev,knum=keynum$,key=k$) arm01a$
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
          if sequence$="C" if endvalue$<>"" if arm01a.customer_id$>endvalue$ break
          if sequence$="A" if endvalue$<>"" if arm01a.alt_sequence$>endvalue$ break

          rem --- Retrieve customer detail and terms information

          dim arm02a$:fattr(arm02a$),arm06a$:fattr(arm06a$),arm10a$:fattr(arm10a$)
          k$=arm01a.firm_id$+arm01a.customer_id$+artype$
          find record (arm02_dev,key=k$,dom=*continue) arm02a$
          k$=arm01a.firm_id$+arm01a.customer_id$
          find record (arm06_dev,key=k$,dom=*next) arm06a$
          arm10a.ar_terms_code$=arm02a.ar_terms_code$
          arm10a.code_desc$=nf$
          k$=arm01a.firm_id$+"A"+arm10a.ar_terms_code$
          find (arm10_dev,key=k$,dom=*next) arm10a$
          if cvs(arm06a.lstpay_date$,2)="" arm06a.lstpay_date$=fill(8)

          rem --- Should the customer be included on the report?

          if basis$="D" if arm06a.avg_days<days continue
          amount=arm02a.aging_future+arm02a.aging_cur+arm02a.aging_30+arm02a.aging_60+
:                arm02a.aging_90+arm02a.aging_120
          if aging$="C" amount=arm02a.aging_cur+arm02a.aging_30+arm02a.aging_60+
:                       arm02a.aging_90+arm02a.aging_120
          if aging$="3" amount=arm02a.aging_30+arm02a.aging_60+arm02a.aging_90+arm02a.aging_120
          if aging$="6" amount=arm02a.aging_60+arm02a.aging_90+arm02a.aging_120
          if aging$="9" amount=arm02a.aging_90+arm02a.aging_120
          if aging$="1" amount=arm02a.aging_120
          if basis$="A" if amount=0 continue

          rem --- Print the customer information and accumulate totals

          call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(arm01a.phone_no$,2),"",phone_mask$
          phone$=cvs(arm01a.phone_no$,2)
          phone$=str(phone$:phone_mask$,err=*next)
          extension$=fill(5)
          if cvs(arm01a.phone_exten$,2)<>"" extension$="x"+arm01a.phone_exten$
          
          if col_format$="Y" then
              outVect!.addItem(fnmask$(arm01a.customer_id$(1,customer_size),m0$))
              outVect!.addItem(arm01a.customer_name$(1,nw))
              outVect!.addItem(phone$+" "+extension$)
              outVect!.addItem(arm01a.contact_name$)
              outVect!.addItem(arm02a.ar_terms_code$+"  "+arm10a.code_desc$(1,tw))
              outVect!.addItem(fndate$(arm06a.lstinv_date$))
              outVect!.addItem(fndate$(arm06a.lstpay_date$))
              outVect!.addItem(str(arm06a.avg_days))          
              outVect!.addItem(str(arm02a.aging_future))
              outVect!.addItem(str(arm02a.aging_cur))
              outVect!.addItem(str(arm02a.aging_30))
              outVect!.addItem(str(arm02a.aging_60))
              outVect!.addItem(str(arm02a.aging_90))
              outVect!.addItem(str(arm02a.aging_120))
              outVect!.addItem(str(arm06a.mtd_sales))
              outVect!.addItem(str(arm06a.ytd_sales))
          else          
              xwk=fnblank(12)
              outVect!.addItem(fnmask$(arm01a.customer_id$(1,customer_size),m0$)+"  "+arm01a.customer_name$(1,nw))
              outVect!.addItem(fndate$(arm06a.lstinv_date$))
              outVect!.addItem(fndate$(arm06a.lstpay_date$))
              outVect!.addItem(str(arm06a.avg_days))          
              outVect!.addItem(str(arm02a.aging_future))
              outVect!.addItem(str(arm02a.aging_cur))
              outVect!.addItem(str(arm02a.aging_30))
              outVect!.addItem(str(arm02a.aging_60))
              outVect!.addItem(str(arm02a.aging_90))
              outVect!.addItem(str(arm02a.aging_120))
              outVect!.addItem(str(arm06a.mtd_sales))
              outVect!.addItem(str(arm06a.ytd_sales))
    
              outVect!.addItem(phone$+" "+extension$+" "+arm01a.contact_name$)
              xwk=fnblank(11)
    
              outVect!.addItem(arm02a.ar_terms_code$+"  "+arm10a.code_desc$(1,tw))
              xwk=fnblank(11)
          endif
          recs=recs+1

          number=number+1
          totals[1]=totals[1]+arm02a.aging_future
          totals[2]=totals[2]+arm02a.aging_cur
          totals[3]=totals[3]+arm02a.aging_30
          totals[4]=totals[4]+arm02a.aging_60
          totals[5]=totals[5]+arm02a.aging_90
          totals[6]=totals[6]+arm02a.aging_120
          totals[7]=totals[7]+arm06a.mtd_sales
          totals[8]=totals[8]+arm06a.ytd_sales

          rem --- Loop back for next Customer Master record

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if col_format$<>"Y" then xwk=fnblank(12)

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))

    x$=Translate!.getTranslation("AON_TOTALS_FOR_REPORT")
    if number x$=x$+" ("+cvs(str(number:"###,##0"),1)+Translate!.getTranslation("AON__CUSTOMERS)")
    

    outVect!.addItem(x$)
    if col_format$="Y" then
        xwk=fnblank(7)
    else
        xwk=fnblank(3)
    endif
    outVect!.addItem(str(totals[1]))
    outVect!.addItem(str(totals[2]))
    outVect!.addItem(str(totals[3]))
    outVect!.addItem(str(totals[4]))
    outVect!.addItem(str(totals[5]))
    outVect!.addItem(str(totals[6]))
    outVect!.addItem(str(totals[7]))
    outVect!.addItem(str(totals[8]))
    goto std_exit


rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
