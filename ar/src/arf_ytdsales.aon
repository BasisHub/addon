rem --- YTD Sales Drilldown/Query filter program
rem --- Program ID: arf_ytdsales.aon
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- run by Barista as part of the AR_YTDSALES query
rem --- for each row in the result set, this program runs to determine if the invoice is in the YTD bucket
rem --- SKIPs if not, otherwise gets the original OP sales amount, if OP is installed
rem --- ARS_PARAMS and OPT_INVHDR are opened on new channels to avoid any knum/extract issues, or in case calling program didn't have them open

    setesc std_error
    seterr std_error

    enter inq_mode$,rec_tpl$,calc_tpl$,table_chans$[all],status$

rem inq_mode$      - not used until recently - current use not yet documented
rem rec_tpl$       - Current row database columns
rem calc_tpl$      - Current row calculated columns
rem table_chans$[] - Barista opened channels array
rem status$        - Returned status: "SKIP" = Skip current record

rem --- Main process - for each row fetched, determine if in YTD period

    status$=""
    if pos(pad("@"+"ARS_PARAMS",17)=table_chans$[0,0],20)=0 then
        num_files=2
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[2]="ARS_PARAMS",open_opts$[2]="OTA@"
                
        gosub open_tables        
    endif
    ars01a_dev=fnget_dev("@"+"ARS_PARAMS")
    dim ars_params$:fnget_tpl$("@"+"ARS_PARAMS")

    inv_date$=rec_tpl.invoice_date$
    call pgmdir$+"adc_fiscalperyr.aon",firm_id$,rec_tpl.invoice_date$,period$,year$,table_chans$[all],status
    if status then goto exit_prog
    readrecord(ars01a_dev,key=rec_tpl.firm_id$+"AR00",dom=exit_prog)ars_params$
    cur_year$=ars_params.current_year$
    cur_period$=ars_params.current_per$
    
    if year$<>cur_year$ or year$+period$>cur_year$+cur_period$ or rec_tpl.invoice_type$="F"
        status$="SKIP"
    else
        rem --- if we have an invoice we want to show, open OPT_INVHDR (just once, not for every row)
        rem --- if the invoice came from OP, set the query's calculated field 'total_sales' to the OP invoice's total sales amt
        rem --- otherwise (invoice is AR Simple Invoice), just duplicate the AR invoice amt in the calculated 'total_sales' field
        if pos(pad("@"+"OPT_INVHDR",17)=table_chans$[0,0],20)=0 then

            dim info$[20]
            call stbl("+DIR_PGM")+"adc_application.aon","OP",info$[all]
            op$=info$[20]
        
            if op$="Y"
                num_files=1
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="OPT_INVHDR",open_opts$[1]="OTA@"
                
                gosub open_tables

                opt_invhdr=fnget_dev("@"+"OPT_INVHDR")
                dim opt_invhdr$:fnget_tpl$("@"+"OPT_INVHDR")
            endif
        endif
        calc_tpl.total_sales$=rec_tpl.invoice_amt$
        if pos(pad("@"+"OPT_INVHDR",17)=table_chans$[0,0],20) then
            opt_invhdr=fnget_dev("@"+"OPT_INVHDR")
            dim opt_invhdr$:fnget_tpl$("@"+"OPT_INVHDR")
            readrecord (opt_invhdr,key=rec_tpl.firm_id$+rec_tpl.ar_type$+rec_tpl.customer_id$+rec_tpl.ar_inv_no$,knum="AO_CUST_INV",dom=*endif)opt_invhdr$
            if opt_invhdr.trans_status$<>"U"
                dim opt_invhdr$:fattr(opt_invhdr$);rem shouldn't happen - precautionary with new RTP mods 
            else
                calc_tpl.total_sales$=opt_invhdr.total_sales$
            endif
        endif
    endif

    goto exit_prog

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- Functions

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
    
exit_prog:rem --- Exit Program

    exit
