rem --- Simple Invoice Register
rem --- Program arr_invoiceentry v8.0.0 03Dec2006 (arr_va)
rem --- Created by adx_codeport.bbx v1.1.3 (12/03/2006 10:43:53)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="are-05",ids$[2]="ARE_INVHDR"
    files$[3]="are-15",ids$[3]="ARE_INVDET"
    files$[4]="arm-01",ids$[4]="ARM_CUSTMAST"
    files$[5]="arm-02",ids$[5]="ARM_CUSTDET"
    files$[6]="arm-06",ids$[6]="ARM_CUSTPMTS"
    files$[7]="arc_termcode",ids$[7]="ARC_TERMCODE"
    files$[8]="art-01",ids$[8]="ART_INVHDR"
    files$[9]="art-11",ids$[9]="ART_INVDET"
    files$[10]="gls_params",ids$[10]="GLS_PARAMS"
    files$[11]="arc_distcode",ids$[11]="ARC_DISTCODE"
    options$[2]="L"
    options$[3]="L"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    are05_dev=channels[2]
    are15_dev=channels[3]
    arm01_dev=channels[4]
    arm02_dev=channels[5]
    arm06_dev=channels[6]
    arc_termcode_dev=channels[7]
    art01_dev=channels[8]
    art11_dev=channels[9]
    gls01_dev=channels[10]
    arc_distcode_dev=channels[11]

rem --- Dimension string templates

    dim ars01a$:templates$[1],are05a$:templates$[2],are15a$:templates$[3],
:       arm01a$:templates$[4],arm02a$:templates$[5],arm06a$:templates$[6],
:       arm10a$:templates$[7],art01a$:templates$[8],art11a$:templates$[9],
:       gls01a$:templates$[10],arm10d$:templates$[11]

rem --- Retrieve parameter records

    dim info$[20]
    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    source$=pgm(-2)
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1
    period=num(ars01a.current_per$)
    year=num(ars01a.current_year$)
    account_length=num(gls01a.acct_length$)
    max_acct_len=num(gls01a.max_acct_len$)
    m0=len(m0$)
    m1=len(m1$)
    application$="AR"
    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,application$,glw11$,gl$,status
    if status goto std_exit
    rem "was this for testing? gl$="N"
    application$="OP"
    call pgmdir$+"adc_application.aon",application$,info$[all]
    op$=info$[20]

rem --- Initializations

rem --- OutVect! for DocOut, date/time 

	OutVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
		rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
		rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- column headings
	dim columns$[5,10]
        columns=5
		columns$[0,0]="Invoice",columns$[0,1]="C",columns$[0,2]="15"
		columns$[1,0]="Date",columns$[1,1]="C",columns$[1,2]="15"
		columns$[2,0]="Cust ID",columns$[2,1]="C",columns$[2,2]="15"
		columns$[3,0]="Name",columns$[3,1]="C",columns$[3,2]="30"
		columns$[4,0]="Distribution/Terms",columns$[4,1]="C",columns$[4,2]="30"
		columns$[5,0]="Amount",columns$[5,1]="N",columns$[5,2]="15",columns$[5,3]=m1$,columns$[5,10]="T"

    headings=2
    dim headings$[headings],o[5]
    page=0
    units=0
    width=80
    total=0
    errors=0
    maxlines=59
    lines=maxlines+1
    moreheaders=1
    moredetail=1
    nf$="(Not on file)"
    when$=sysinfo.system_date$
    clock$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    recs=0

rem --- Initialize print positions

    w=max(m0,8)
    o[0]=0
    o[1]=8
    o[2]=17
    o[3]=18+m0
    o[5]=width-m1
    o[4]=o[5]-24
    w=o[4]-o[3]-1
    w=min(30,w) 

rem --- Additional file opens

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    if gl$="Y"
       files$[1]="glm-01",ids$[1]="GLM_ACCT"
       files$[2]="glt-04",ids$[2]="GLE_DAILYDETAIL"
       files$[3]=glw11$
       options$[3]="CL"
    endif
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    glt04_dev=channels[2]
    glw11_dev=channels[3]

rem --- Get user approval to proceed

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_report

rem --- Open printer, start progress meter and position header file

rem ---     call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
rem ---     if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,are05_dev,1,meter_num,status
    read (are05_dev,key=firm_id$,dom=*next)

rem --- Read next Invoice Header (are-05) record

    while moreheaders
          read record (are05_dev,end=*break) are05a$
          if are05a.firm_id$<>firm_id$ break
            recs=recs+1
            record_count=record_count+1
            if mod(record_count,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          rem --- Skip voided invoices

          if are05a.sim_inv_type$="V"
             gosub voided
             continue
          endif

          rem --- Initializations for this invoice

          invoice$=are05a.firm_id$+are05a.ar_inv_no$
          adjustment$=""
          if are05a.sim_inv_type$="A" adjustment$="(Adjustment)"
          extension=0
          qty=0

          rem --- Retrieve Customer Master (arm-01) record

          dim arm01a$:fattr(arm01a$)
          arm01a.firm_id$=firm_id$
          arm01a.customer_id$=are05a.customer_id$
          arm01a.customer_name$=nf$
          k$=arm01a.firm_id$+arm01a.customer_id$ 
          find record (arm01_dev,key=k$,dom=*next) arm01a$
rem ---   customer$=arm01a.customer_name$(1,w)
          customer$=arm01a.customer_name$

          rem --- Retrieve Terms Code (arm-10a) record

          dim arm10a$:fattr(arm10a$)
          arm10a.firm_id$=firm_id$
          arm10a.record_id_a$="A"
          arm10a.ar_terms_code$=are05a.ar_terms_code$
          arm10a.code_desc$=nf$
          k$=arm10a.firm_id$+arm10a.record_id_a$+arm10a.ar_terms_code$ 
          find record (arc_termcode_dev,key=k$,dom=*next) arm10a$

          rem --- Retrieve Distribution Code (arm-10d) record

          dim arm10d$:fattr(arm10d$)
          arm10d.firm_id$=firm_id$
          arm10d.record_id_d$="D"
          arm10d.ar_dist_code$=are05a.ar_dist_code$
          arm10d.code_desc$=nf$
          k$=arm10d.firm_id$+arm10d.record_id_d$+arm10d.ar_dist_code$ 
          find record (arc_distcode_dev,key=k$,dom=*next) arm10d$

          rem --- Position the Invoice Detail (are-15) file

          read (are15_dev,key=invoice$,dom=*next)

          rem --- Read the next Invoice Detail (are-15) record

          while moredetail
                k$=key(are15_dev,end=*break)
                if pos(invoice$=k$)<>1 break
                read record (are15_dev) are15a$
                extension=extension+are15a.ext_price
                qty=qty+are15a.units
                gosub line_distribution
          wend

          rem --- Print the invoice


rem ---           if lines+3>maxlines gosub report_heading
rem ---           print (printer_dev) ""
rem ---           print (printer_dev) @(o[0]),are05a.ar_inv_no$,@(o[1]),fndate$(are05a.inv_date$),
rem --- :                             @(o[2]),fnmask$(are05a.customer_id$(1,customer_size),m0$),
rem --- :                             @(o[3]),customer$,@(o[4]),arm10d.ar_dist_code$," ",arm10d.code_desc$,
rem --- :                             @(o[5]),extension:m1$
rem ---           print (printer_dev) @(o[1]),adjustment$,@(o[4]),arm10a.ar_terms_code$," ",arm10a.code_desc$

		  

		  OutVect!.addItem(are05a.ar_inv_no$)
		  OutVect!.addItem(fndate$(are05a.inv_date$))
		  OutVect!.addItem(fnmask$(are05a.customer_id$(1,customer_size),m0$))
		  OutVect!.addItem(customer$)
		  OutVect!.addItem(arm10d.ar_dist_code$+" "+arm10d.code_desc$)
		  OutVect!.addItem(str(extension))

		  OutVect!.addItem("")
		  OutVect!.addItem(adjustment$)
		  OutVect!.addItem("")
		  OutVect!.addItem("")
		  OutVect!.addItem(arm10a.ar_terms_code$+" "+arm10a.code_desc$)
		  OutVect!.addItem("")

		  xwk=fnblank(6);rem --- blank line

          lines=lines+3
          total=total+extension
          gosub invoice_distribution

          rem --- Check GL posting date if GL is being used

          glstatus=0
          if gl$<>"Y" continue
          call pgmdir$+"glc_datecheck.aon",are05a.inv_date$,"N",period$,year$,glstatus
          if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,are05a.inv_date$,glstatus,lines,errors,status

          if stbl("+DTWARN_MSG",err=*endif)<>""
              OutVect!.addItem(stbl("+DTWARN_MSG"))
              xwk=fnblank(5)
          endif

    rem --- Loop back for next Invoice Header

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif
						
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk=fnblank(4)
    OutVect!.addItem("Report Total")
    OutVect!.addItem(str(total))

rem --- Destroy progress meter and run next overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    

    update$=pgmdir$+"aru_invoiceentry.aon"
    if errors
    	gosub Display_Message
    	if special_flag$<>"Y" then update$=""
    endif

    overlay$=update$

    if gl$="Y" overlay$=pgmdir$+"glr_recap_DO.aon"
    rem --- run overlay$,err=std_exit

	out_action$="PRT-PDF"
	next_overlay$=overlay$
	goto std_exit

report_heading: rem --- Report Heading -- not used in DocOut version

    lines=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[0]),"Invoice",@(o[1]),"Date",@(o[2]),"Customer",@(o[4]),"Distribution/Terms",
:                       @(width-7),"Amount"
    lines=lines+1
    return

voided: rem --- Print Void

rem ---     if lines+2>maxlines gosub report_heading
rem ---     print (printer_dev) ""
rem ---     print (printer_dev) @(o[0]),are05a.ar_inv_no$,@(o[1]),"(Voided)"
	
	OutVect!.addItem(are05a.ar_inv_no$)
	OutVect!.addItem("(Voided)")
	xwk=fnblank(4)
	xwk=fnblank(6)
    lines=lines+2
    return

line_distribution: rem --- Summaries

    account$=are15a.gl_account$
    gldate$=are05a.inv_date$
    amount=-are15a.ext_price
    units=-are15a.units
    ref1$=fnmask$(are05a.customer_id$(1,customer_size),m0$)
    ref2$=are05a.ar_inv_no$
    ref3$=are15a.line_no$
    let memo$=are15a.description$
    gosub glrecap
    return

invoice_distribution: rem --- Dist Summary

    account$=arm10d.gl_ar_acct$
    gldate$=are05a.inv_date$
    amount=extension
    units=qty
    memo$=arm01a.customer_name$
    ref2$=are05a.ar_inv_no$
    ref3$=""
    gosub glrecap
    return

glrecap: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    return

Display_Message: rem --- Display Message Routine

    msg_id$="AON_REG_ERRS"
    gosub disp_message
    if pos("PASSVALID"=msg_opt$)<>0 special_flag$="Y"
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_table_id$

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- Create blank line in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    release

rem #endinclude std_end.src

    end
