rem --- Simple Invoice Update
rem --- Program aru_invoiceentry v8.0.0 03Dec2006 (aru_ga)
rem --- Created by adx_codeport.bbx v1.1.3 (12/03/2006 02:21:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

    next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()

rem --- Initializations

    ar_type$=fill(2)

rem --- Get the beginning and ending dates for the current AR period

    call pgmdir$+"adc_perioddates.aon",period,year,begdate$,enddate$,table_chans$[all],status
    if staus then goto std_exit_no_update

rem --- Get user approval to update

    msg_id$="AON_UPDT_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,are05_dev,1,meter_num,status
    read (are05_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)

rem --- Read next Invoice Header (are-05) record

    while moreheaders
          extract record (are05_dev,end=*break) are05a$; rem Advisory Locking
          if are05a.firm_id$<>firm_id$ or are05a.batch_no$<>batch_no$ then read(are05_dev); break
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          are05a_key$=are05a.firm_id$+are05a.ar_inv_no$

rem --- Skip unprinted invoices

          if are05a.print_status$<>"Y" and are05a.sim_inv_type$<>"V" then read(are05_dev); continue

rem --- Skip voided invoices

          if are05a.sim_inv_type$="V"
          
            read (are15_dev,key=are05a_key$,dom=*next)
         
            while moredetail
                k$=key(are15_dev,end=*break)
                if pos(are05a_key$=k$)<>1 break
                read record (are15_dev) are15a$
                extension=extension+are15a.ext_price
                qty=qty+are15a.units
                remove (are15_dev,key=k$)
            wend
            remove (are05_dev,key=are05a_key$)
            continue
          endif

rem --- Initializations for this invoice

          extension=0
          qty=0

rem --- Retrieve Customer Master (arm-01) record

          dim arm01a$:fattr(arm01a$)
          arm01a.firm_id$=firm_id$
          arm01a.customer_id$=are05a.customer_id$
          arm01a.customer_name$=nf$
          k$=arm01a.firm_id$+arm01a.customer_id$ 
          find record (arm01_dev,key=k$,dom=*next) arm01a$

rem --- Retrieve Terms Code (arm-10a) record

          dim arm10a$:fattr(arm10a$)
          arm10a.firm_id$=firm_id$
          arm10a.record_id_a$="A"
          arm10a.ar_terms_code$=are05a.ar_terms_code$
          arm10a.code_desc$=nf$
          k$=arm10a.firm_id$+arm10a.record_id_a$+arm10a.ar_terms_code$ 
          find record (arc_termcode_dev,key=k$,dom=*next) arm10a$

rem --- Retrieve Distribution Code (arm-10d) record

          dim arm10d$:fattr(arm10d$)
          arm10d.firm_id$=firm_id$
          arm10d.record_id_d$="D"
          arm10d.ar_dist_code$=are05a.ar_dist_code$
          arm10d.code_desc$=nf$
          k$=arm10d.firm_id$+arm10d.record_id_d$+arm10d.ar_dist_code$ 
          find record (arc_distcode_dev,key=k$,dom=*next) arm10d$

rem --- Position the Invoice Detail (are-15) file

          read (are15_dev,key=are05a_key$,dom=*next)

rem --- Read the next Invoice Detail (are-15) record

          while moredetail
                k$=key(are15_dev,end=*break)
                if pos(are05a_key$=k$)<>1 break
                read record (are15_dev) are15a$
                extension=extension+are15a.ext_price
                qty=qty+are15a.units
                remove (are15_dev,key=k$)
          wend

rem --- Update Customer Detail (arm-02) record

          dim arm02a$:fattr(arm02a$)
          arm02a.firm_id$=firm_id$
          arm02a.customer_id$=are05a.customer_id$
          arm02a.ar_type$=ar_type$
          k$=arm02a.firm_id$+arm02a.customer_id$+arm02a.ar_type$ 
          extract record (arm02_dev,key=k$,dom=*next) arm02a$; rem Advisory Locking
          arm02a.aging_cur=arm02a.aging_cur+extension
          balance=arm02a.aging_future+arm02a.aging_cur+arm02a.aging_30+
:                 arm02a.aging_60+arm02a.aging_90+arm02a.aging_120
          arm02a$=field(arm02a$)
          write record (arm02_dev) arm02a$

rem --- Generate due date and discount date based on terms

          if cvs(are05a.inv_date$,2)<>"" invoicedate$=are05a.inv_date$
:                                   else invoicedate$=sysinfo.system_date$
          number_of_days=arm10a.inv_days_due
          call pgmdir$+"adc_duedate.aon",arm10a.prox_or_days$,invoicedate$,number_of_days,duedate$,status
          number_of_days=arm10a.disc_days
          call pgmdir$+"adc_duedate.aon",arm10a.prox_or_days$,invoicedate$,number_of_days,discountdate$,status

rem --- Initialize Invoice Header (art-01) record and attempt to retrieve it

          dim art01a$:fattr(art01a$)
          art01a.firm_id$=firm_id$
          art01a.ar_type$=ar_type$
          art01a.customer_id$=are05a.customer_id$
          art01a.ar_inv_no$=are05a.ar_inv_no$
          art01a.sequence_00$="00"
          art01a.ar_dist_code$=are05a.ar_dist_code$
          art01a.ar_terms_code$=are05a.ar_terms_code$
          art01a.invoice_type$="S"
          art01a.invoice_date$=are05a.inv_date$
          art01a.inv_due_date$=duedate$
          art01a.disc_date$=discountdate$
          art01a.invoice_bal=0
          art01a.disc_taken=0
          art01a_key$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+
:                     art01a.ar_inv_no$+art01a.sequence_00$
          invoice$=art01a.firm_id$+ar_type$+art01a.customer_id$+art01a.ar_inv_no$
          extract record (art01_dev,key=art01a_key$,dom=update_invoice) art01a$; rem Advisory Locking

rem --- This invoice already exists so either the header record needs to
rem --- be adjusted (if the current amount is zero) or a detail record for
rem --- the adjustment needs to be created.

          if art01a.invoice_amt<>0 goto detail_adjustment
          art01a.invoice_type$="I"
          art01a.invoice_bal=art01a.invoice_bal+(extension-art01a.invoice_amt)
          art01a.invoice_amt=extension
          art01a.disc_allowed=(art01a.invoice_amt*arm10a.disc_percent)/100
          art01a$=field(art01a$)
          write record (art01_dev) art01a$
          goto customer_payment

detail_adjustment: rem --- Create/update a detail record for the adjustment

          dim art11a$:fattr(art11a$)
          invoice_type$=art01a.invoice_type$
          updated=0
          sequence=0
          
          read(art11_dev,key=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$,dom=*next)

          while moredetail
                art11a_key$=key(art11_dev,end=*break)
                if pos(invoice$=art11a_key$)<>1 break
                read record (art11_dev) art11a$
                sequence=num(art11a.sequence_num$)
                if art11a.trans_type$=" "
                   extract record (art11_dev,key=art11a_key$) art11a$; rem Advisory Locking
                   gosub update_detail
                   break
                endif
          wend
          if updated goto customer_payment

rem --- If we're out of sequence numbers create a consolidation record

          sequence=sequence+1
          if sequence>99
             invoice_type$=" "
             art11a_key$=invoice$+"99" 
             extract record (art11_dev,key=art11a_key$) art11a$; rem Advisory Locking
             gosub update_detail
             goto customer_payment
          endif 

rem --- Create a new invoice detail record for this transaction

          dim art11a$:fattr(art11a$)
          art11a.firm_id$=firm_id$
          art11a.ar_type$=art01a.ar_type$
          art11a.customer_id$=art01a.customer_id$
          art11a.ar_inv_no$=art01a.ar_inv_no$
          art11a.sequence_num$=str(sequence:"00")
          art11a.trans_type$=art01a.invoice_type$
          art11a.trans_date$=art01a.invoice_date$
          art11a.refchk_no$=""
          art11a.trans_amt=0
          art11a.adjdisc_amt=0
          art11a_key$=art11a.firm_id$+art11a.ar_type$+art11a.customer_id$+
:                     art11a.ar_inv_no$+art11a.sequence_num$
          invoice_type$=art11a.trans_type$
          gosub update_detail
          goto customer_payment

update_invoice: rem --- Update the Invoice Header (art-01) with new record

          art01a.invoice_amt=art01a.invoice_amt+extension
          art01a.disc_allowed=art01a.disc_allowed+((art01a.invoice_amt*arm10a.disc_percent)/100)
          art01a.invoice_bal=art01a.invoice_bal+extension
          art01a$=field(art01a$)
          write record (art01_dev) art01a$

customer_payment: rem --- Update the Customer Payment (arm-06) record

          dim arm06a$:fattr(arm06a$)
          arm06a.firm_id$=firm_id$
          arm06a.customer_id$=are05a.customer_id$
          arm06a_key$=arm06a.firm_id$+arm06a.customer_id$
          extract record (arm06_dev,key=arm06a_key$,dom=*next) arm06a$; rem Advisory Locking

rem --- Update Last Invoice Date, Sales and High Credit

          arm06a.lstinv_date$=art01a.invoice_date$
          if art01a.invoice_date$<=enddate$ arm06a.mtd_sales=arm06a.mtd_sales+extension,
:                                           arm06a.ytd_sales=arm06a.ytd_sales+extension
:                                      else arm06a.nmtd_sales=arm06a.nmtd_sales+extension
          if art01a.invoice_date$<=enddate$ 
:            if arm06a.mtd_high_crd<balance arm06a.mtd_high_crd=balance
          if art01a.invoice_date$<=enddate$ 
:            if arm06a.ytd_hi_cred<balance arm06a.ytd_hi_cred=balance
          if art01a.invoice_date$>enddate$ 
:            if arm06a.nmtd_high_cr<balance arm06a.nmtd_high_cr=balance
          arm06a$=field(arm06a$)
          write record (arm06_dev) arm06a$

rem --- Delete Invoice Header (are-05) record and loop back for the next one

          remove (are05_dev,key=are05a_key$)
    wend

rem --- All done

    if gl$="Y"
       call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,status
       call pgmdir$+"glc_ctlupdate.aon",status
       call pgmdir$+"glc_ctldelete.aon",status
    endif
    call pgmdir$+"adc_batchdelete.aon",status

    goto std_exit

update_detail: rem --- Create or update an invoice detail record

    updated=1
    art11a.trans_type$=invoice_type$
    art11a.trans_date$=art01a.invoice_date$
    art11a.trans_amt=art11a.trans_amt+extension
    art11a.adjdisc_amt=0
    art11a$=field(art11a$)
    write record (art11_dev) art11a$
    art01a.invoice_bal=art01a.invoice_bal+extension
    art01a$=field(art01a$)
    write record (art01_dev) art01a$
    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message
    
std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
