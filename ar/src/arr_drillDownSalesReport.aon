rem AR Drill Down Sale Report by Customer Type (Report Overlay)
rem Program arr_drillDownSaleReport.aon
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

	setesc std_error
	seterr std_error

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$
	firm_name$=sysinfo.firm_name$

	milestone=50
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)    


rem --- USE and Declares

	use ::bbjasper.bbj::BBJasperReport
	use ::bbjasper.bbj::BBJasperViewerWindow
	use ::bbjasper.bbj::BBJasperViewerControl

    use ::sys/prog/bao_utilities.bbj::BarUtils

    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 50; rem -50 keeps it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 50
	
	use ::ado_func.src::func

	declare BBJasperReport BBjReport!
	declare BBJasperReport BBjSaveReport!
	declare BBJasperViewerWindow BBjReportWindow!

	declare BBjRecordSet params!

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    user_id$=sysinfo.user_id$
    proc_date$=date(jul(num(sysinfo.system_date$(1,4)),num(sysinfo.system_date$(5,2)),num(sysinfo.system_date$(7,2))):stbl("+DATE_MASK"))
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$

rem --- Open GL parameters file
    files=1,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"  
    
    call stbl("+DIR_PGM")+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    
    gls01_dev=channels[1]
    dim gls01a$:templates$[1]

rem --- Common information

	rem ' add to the prefix to find the support custom objects needed
	bbjhome$ = System.getProperty("basis.BBjHome") + "/"
	addPrefix$=bbjhome$ + "utils/reporting/bbjasper/"
	if pos(" " = addPrefix$) <> 0 then addPrefix$ = chr(34) + addPrefix$ + chr(34)
	oldPrefix$=pfx
	newPrefix$=oldPrefix$+" "+addPrefix$
	prefix newPrefix$
    
	barista_wd$=dsk("")+dir("")

	rem ' get the customer id mask
	call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",custIdMask$,0,custIdLen
	custIdMaskLen = len(custIdMask$)

rem --- get the accounting periods

    readrecord(gls01_dev,key=firm_id$+"GL00",dom=*next)gls01a$

rem --- Assign input values to local variables

    period$=Option!.getOptionData("PICK_GL_PER")
    year$=Option!.getOptionData("PICK_YEAR")
    
rem --- Make Document Archive Record and Get ID
 
    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=Option!.getAlias()
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$="DOC_ID-NOREPRINT"
    gosub document_whse
    rd_archive_action$=""

rem - establish the month 
    
    firstPerEnding$ = gls01a.per_ending_01$
    
    switch num(period$)
        case 1; ending$ = gls01a.per_ending_01$; break
        case 2; ending$ = gls01a.per_ending_02$; break
        case 3; ending$ = gls01a.per_ending_03$; break
        case 4; ending$ = gls01a.per_ending_04$; break
        case 5; ending$ = gls01a.per_ending_05$; break
        case 6; ending$ = gls01a.per_ending_06$; break
        case 7; ending$ = gls01a.per_ending_07$; break
        case 8; ending$ = gls01a.per_ending_08$; break
        case 9; ending$ = gls01a.per_ending_09$; break
        case 10; ending$ = gls01a.per_ending_10$; break
        case 11; ending$ = gls01a.per_ending_11$; break
        case 12; ending$ = gls01a.per_ending_12$; break
        case 13; ending$ = gls01a.per_ending_13$; break
        case default; ending$ = "    "; break
    swend
  
    month$ = ending$(1,2)
 
rem --- start SalesByCustType report

	reportName$ = stbl("+DIR_REPORTS") + "SalesByCustType.jasper"
	repTitle!=sysinfo.task_desc$
    repTitle$=repTitle!.replace(" ","_")

	BBjReport! = BarUtils.getBBJasperReport(reportName$)
	
	BBjReport!.putParam("FIRM_ID",firm_id$)
	BBjReport!.putParam("FIRM_NAME",firm_name$)
	BBjReport!.putParam("MONTH",month$)
	BBjReport!.putParam("YEAR",year$)
	BBjReport!.putParam("CUST_ID_MASK", custIdMask$)
	BBjReport!.putParam("CUST_ID_LEN", str(custIdLen))
	BBjReport!.putParam("BARISTA_WD",barista_wd$)

	BBjReport!.fill(1)

    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path
    
    declare BBJasperViewerWindow viewerWindow!
    viewerWindow! = new BBJasperViewerWindow(BBjreport!,0,0,screen_width,screen_height,repTitle$,$00080093$)

    viewerControl! = viewerWindow!.getViewerControl()
    viewerControl!.setGoogleDefaultDocument(repTitle$)
    viewerControl!.setDefaultSaveFolder(rd_doc_path$)
    viewerControl!.setDefaultSaveFile(repTitle$)
    viewerControl!.setFitWidth()

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    saveMenuButton! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    saveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnSaveMenuButton")

    emailToolButton! = viewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    emailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnEmailToolButton")

    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)

    declare BBjTopLevelWindow bbjWindow!
    bbjWindow!= viewerWindow!.getViewerWindow()
    cancelled=1
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"close_win",err=*next); cancelled=0
    if cancelled then goto close_win

rem --- Event Control

    process_events,err=*same

    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_tmp_dir$=stbl("+DOC_DIR_PDF",err=*endif)
        rd_temp_wd$=dsk("")+dir("")
        if pos(":"=rd_tmp_dir$) setdrive rd_tmp_dir$(1,pos(":"=rd_tmp_dir$)-1),err=*next
        chdir rd_tmp_dir$,err=*next
        rd_doc_path$=dsk("")+dir("")
        if pos(":"=rd_temp_wd$) setdrive rd_temp_wd$(1,pos(":"=rd_temp_wd$)-1)
        chdir rd_temp_wd$
    endif

    return

OnSaveMenuButton:
rem --- exportToPDF and record in doc warehouse
rem --- different than other jaspers, since the main report allows drilldown to other reports
rem --- so need to get the report object for the report currently displayed in the viewer
rem --- and save that as a separate doc in the archive (new doc ID)

    if rd_doc_path$<>"" and repTitle$<>""
        BBjSaveReport!=cast(BBJasperReport, viewerControl!.getView().getReport());rem can drill from one report to another, so get report that's in viewer
        rd_sv_path$=rd_doc_path$
        if rpt_pg>0
            rd_doc_id$=""
            rd_doc_path$=""
            rd_doc_name$=""
            rd_doc_ext$="JAS"
            rd_archive_action$="DOC_ID-NOREPRINT"
            gosub document_whse
            rd_archive_action$=""
        endif
        rpt_pg=rpt_pg+1
        rd_doc_path$=rd_sv_path$
        rd_doc_name$=repTitle$+"_"+rd_doc_id$+"_p"+str(rpt_pg)+".pdf"
        rd_doc_ext$="PDF"
        BBjSaveReport!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif
    return    

OnEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

close_win:rem --- Viewer Window Closed
    viewerWindow!.destroy()
    rdForm!.destroy(err=*next)  
    if tcb(13) then exit
    release

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release
    
 rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
    
rem #endinclude std_end.src
   