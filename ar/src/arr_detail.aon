rem arm - Customer Detail Listing
rem Program arr_detail v8.0.0 25Dec2006 (arm_mg)
rem Created by adx_progconv.bbx v1.0.3 (12/25/2006 11:12:14)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)        

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="arm-02",ids$[3]="ARM_CUSTDET"
    files$[4]="arm-03",ids$[4]="ARM_CUSTSHIP"
    files$[5]="arm-05",ids$[5]="ARM_CUSTCMTS"
    files$[6]="arm-06",ids$[6]="ARM_CUSTPMTS"
    files$[7]="arm-08",ids$[7]="ARM_CYCLECOD"
    files$[8]="arc_distcode",ids$[8]="ARC_DISTCODE"
    files$[9]="art-01",ids$[9]="ART_INVHDR"
    files$[10]="art-11",ids$[10]="ART_INVDET"
    files$[11]="arc_salecode",ids$[11]="ARC_SALECODE"
    files$[12]="arc_terrcode",ids$[12]="ARC_TERRCODE"
    files$[13]="arc_custtype",ids$[13]="ARC_CUSTTYPE"
    files$[14]="arc_termcode",ids$[14]="ARC_TERMCODE"
    files$[15]="ars_credit",ids$[15]="ARS_CREDIT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01_dev=channels[1]
    arm01_dev=channels[2]
    arm02_dev=channels[3]
    arm03_dev=channels[4]
    arm05_dev=channels[5]
    arm06_dev=channels[6]
    arm08_dev=channels[7]
    arc_distcode_dev=channels[8]
    art01_dev=channels[9]
    art11_dev=channels[10]
    arc_salecode_dev=channels[11]
    arc_terrcode_dev=channels[12]
    arc_custtype_dev=channels[13]
    arc_termcode_dev=channels[14]
    ars_credit_dev=channels[15]

rem --- Dimension string templates

    dim ars01a$:templates$[1],arm01a$:templates$[2],arm02a$:templates$[3],arm03a$:templates$[4]
    dim arm05a$:templates$[5],arm06a$:templates$[6],arm08a$:templates$[7],arm10d$:templates$[8]
    dim art01a$:templates$[9],art11a$:templates$[10],arm10f$:templates$[11],arm10h$:templates$[12]
    dim arm10l$:templates$[13],arm10a$:templates$[14],ars01c$:templates$[15]

rem --- Assign form input values to local variables

    begcustomer$=option!.getOptionData("CUSTOMER_ID_1")
    endcustomer$=option!.getOptionData("CUSTOMER_ID_2")
    comments$=option!.getOptionData("PICK_CHECK")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    cm$="N"
    ars01c_key$=firm_id$+"AR01"
    find record (ars_credit_dev,key=ars01c_key$,err=*next) ars01c$
    if ars01c.sys_install$="Y" cm$="Y"
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,9,11
    m8$="(###) ###-####"
    m0=len(m0$)
    m1=len(m1$)
    dim m5$(m1,"#"),m6$(m1+1,"#")
    m5$(len(m5$)-1)="0-"
    m6$(len(m6$)-5)="0.00%"
    m6$(1,1)="-"

rem --- Is Sales Order Processing and/or Sales Analysis installed?

    dim info$[20]
    application$="OP"
    call pgmdir$+"adc_application.aon",application$,info$[all]
    op$=info$[20]
    if op$<>"Y" cm$="N"
    application$="SA"
    call pgmdir$+"adc_application.aon",application$,info$[all]
    sa$=info$[20]

rem --- Initializations

    headings=2
    dim headings$[headings],o[9],a[6],s[3]
    more=1
    page=0
    width=80
    pbufwidth=85
    maxlines=59
    lines=maxlines+1
    morecustomers=1
    moreheaders=1
    moredetail=1
    morecomments=1
    if comments$="N" morecomments=0
    morejobs=1
    if ars01a.job_nos$<>"Y" morejobs=0
    if op$<>"Y" morejobs=0
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    na$=Translate!.getTranslation("AON_(NOT_APPLICABLE)")
    artype$=fill(2)
    when$=sysinfo.system_date$
    clock$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    total_recs=0

rem --- Headings and print positions

 
    dim columns$[0,10]
    columns$[0,0]="",columns$[0,1]="C",columns$[0,2]="80"
    columns=0

rem --- Define print positions for the invoice history listing

    o[0]=0
    o[1]=2
    o[2]=10
    o[3]=19
    o[4]=28
    o[5]=31
    o[9]=width-m1
    o[8]=o[9]-m1
    o[7]=o[8]-m1
    o[6]=o[7]-m1

rem --- Define print positions for the aging and sales summary

    x=m1*7
    x=int((width-x)/2)
    a[0]=x
    for x=1 to 6
        a[x]=a[x-1]+m1
    next x
    s[0]=31-m1
    s[1]=46-m1
    s[2]=61-m1
    s[3]=76-m1
 
rem --- Additional file opens

    if op$="Y"
        files=6,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="opm-03",ids$[1]="OPC_DISCCODE"
        files$[2]="opm-04",ids$[2]="OPC_MSG_HDR"
        files$[3]="opm-05",ids$[3]="OPC_PRICECDS"
        files$[4]="opm-06",ids$[4]="OPC_TAXCODE"
        files$[5]="opm-07",ids$[5]="OPM_FRTTERMS"
        files$[6]="opm-09",ids$[6]="OPM_CUSTJOBS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                       ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        opm03_dev=channels[1]
        opm04_dev=channels[2]
        opm05_dev=channels[3]
        opm06_dev=channels[4]
        opm07_dev=channels[5]
        opm09_dev=channels[6]

rem --- Dimension string templates

        dim opm03a$:templates$[1],opm04a$:templates$[2],opm05a$:templates$[3],
:           opm06a$:templates$[4],opm07a$:templates$[5],opm09a$:templates$[6]

    endif

rem --- Open printer, start progress meter and position Customer Master file

    first_cust$="Y"
    call pgmdir$+"adc_progress.aon","NC","ARM_CUSTMAST","","","",0,arm01_dev,1,meter_num,status
    while begcustomer$<>""
          read (arm01_dev,key=firm_id$+begcustomer$)
          read (arm01_dev,dir=-1,err=*next)
          begcustomer$=""
    wend

rem --- Read next Customer Master (arm-01) record

    while morecustomers
          arm01_key$=key(arm01_dev,end=*break)
          if pos(firm_id$=arm01_key$)<>1 break
          read record (arm01_dev,key=arm01_key$) arm01a$
          if endcustomer$<>"" if arm01a.customer_id$>endcustomer$ break
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

          rem --- Print customer master information

          if first_cust$="N"
            BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
            HdrVect!.addItem("")
          else
            first_cust$="N"
          endif
          extension$=""
          if cvs(arm01a.phone_exten$,2)<>"" extension$=Translate!.getTranslation("AON_EXT_")+arm01a.phone_exten$
          gosub lines_count
          lines=lines+10

          OutVect!.addItem("")

          call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(arm01a.phone_no$,2),"",phone_mask$
          phone$=cvs(arm01a.phone_no$,2)
          phone$=str(phone$:phone_mask$,err=*next)
          call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(arm01a.fax_no$,2),"",fax_mask$
          fax$=cvs(arm01a.fax_no$,2)
          fax$=str(fax$:fax_mask$,err=*next)
          dim pbuf$(pbufwidth)
          pbuf$(2) = Translate!.getTranslation("AON_ADDRESS:_") + arm01a.addr_line_1$
          pbuf$(47) = Translate!.getTranslation("AON_TELEPHONE:__") + phone$ + " " + extension$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(11) = arm01a.addr_line_2$
          pbuf$(47) = Translate!.getTranslation("AON_FAX_PHONE:__") + fax$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(11) = arm01a.addr_line_3$
          pbuf$(49) = Translate!.getTranslation("AON_CONTACT:__") + arm01a.contact_name$
          gosub output_print_buf


          dim pbuf$(pbufwidth)
          pbuf$(11) = arm01a.addr_line_4$
          pbuf$(38) = Translate!.getTranslation("AON_ALTERNATE_SEQUENCE:__") + arm01a.alt_sequence$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(5) = Translate!.getTranslation("AON_CITY:_") + arm01a.city$
          pbuf$(45) = Translate!.getTranslation("AON_DATE_OPENED:__") + fndate$(arm01a.opened_date$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(4) = Translate!.getTranslation("AON_STATE:_") + arm01a.state_code$
          call stbl("+DIR_SYP")+"bac_getmask.bbj","P",cvs(arm01a.zip_code$,2),"",postal_mask$
          postal$=cvs(arm01a.zip_code$,2)
          postal$=str(postal$:postal_mask$,err=*next)
          pbuf$(18) = Translate!.getTranslation("AON_ZIP/POSTAL:__") + postal$
          pbuf$(48) = Translate!.getTranslation("AON_SHIP_VIA:__") + arm01a.ar_ship_via$
          gosub output_print_buf
          
          dim pbuf$(pbufwidth)
          pbuf$(2) = Translate!.getTranslation("AON_COUNTRY:_") + arm01a.country$
          pbuf$(50) = "F.O.B.:  " + arm01a.fob$
          gosub output_print_buf
          
          dim pbuf$(pbufwidth)
          pbuf$(6) = "SIC: " + arm01a.sic_code$
          pbuf$(43) = Translate!.getTranslation("AON_RESALE_NUMBER:__") + arm01a.resale_no$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(3) = Translate!.getTranslation("AON_RETAIN?_") + fnyn$(arm01a.retain_cust$)
          pbuf$(46) = Translate!.getTranslation("AON_D&B_NUMBER:_") + arm01a.db_no$
          gosub output_print_buf



         rem --- Retrieve customer detail record

          dim arm02a$:fattr(arm02a$)
          arm02a.firm_id$=arm01a.firm_id$
          arm02a.customer_id$=arm01a.customer_id$
          arm02a.ar_type$=artype$
          arm02_key$=arm02a.firm_id$+arm02a.customer_id$+arm02a.ar_type$
          find record (arm02_dev,key=arm02_key$,dom=*next) arm02a$

          rem --- Get AR code descriptions

          termsdesc$=fncode$(arc_termcode_dev,firm_id$+"A"+arm02a.ar_terms_code$,fattr(arm10a$))
          distdesc$=fncode$(arc_distcode_dev,firm_id$+"D"+arm02a.ar_dist_code$,fattr(arm10d$))
          terrdesc$=fncode$(arc_terrcode_dev,firm_id$+"H"+arm02a.territory$,fattr(arm10h$))
          salesdesc$=fncode$(arc_salecode_dev,firm_id$+"F"+arm02a.slspsn_code$,fattr(arm10f$))
          typedesc$=fncode$(arc_custtype_dev,firm_id$+"L"+arm02a.customer_type$,fattr(arm10l$))
          cycledesc$=fncode$(arm08_dev,firm_id$+arm02a.ar_cyclecode$,fattr(arm08a$))
          if cvs(arm02a.ar_cyclecode$,2)="" cycledesc$=""

          rem --- Get OP code descriptions (if installed)

          discdesc$=na$
          msgdesc$=na$
          pricedesc$=na$
          taxdesc$=na$
          frtdesc$=na$
          if op$="Y"
             discdesc$=fncode$(opm03_dev,firm_id$+arm02a.disc_code$,fattr(opm03a$))
             msgdesc$=fncode$(opm04_dev,firm_id$+arm02a.message_code$,fattr(opm04a$))
             pricedesc$=fncode$(opm05_dev,firm_id$+arm02a.pricing_code$,fattr(opm05a$))
             taxdesc$=fncode$(opm06_dev,firm_id$+arm02a.tax_code$,fattr(opm06a$))
             k$=firm_id$+arm02a.frt_terms$
             dim opm07a$:fattr(opm07a$)
             opm07a.description$=nf$
             find record (opm07_dev,key=k$,dom=*next) opm07a$
             frtdesc$=opm07a.description$
          endif
          if op$="Y" if cvs(arm02a.frt_terms$,2)="" frtdesc$=""

          rem --- Print profile information

          hold$=na$
          limit$=na$
          if cm$="Y"
             limit$=cvs(str(arm02a.credit_limit:m1$),1+2)
             hold$=fnyn$(arm02a.cred_hold$)
          endif
          if cm$="Y" if arm02a.cred_hold$="E" hold$=Translate!.getTranslation("AON_EXEMPT")
          sales_analysis$=Translate!.getTranslation("AON_NONE")
          if sa$<>"Y" arm02a.sa_flag$="N"
          if arm02a.sa_flag$="I" sales_analysis$=Translate!.getTranslation("AON_BY_ITEM")
          if arm02a.sa_flag$="P" sales_analysis$=Translate!.getTranslation("AON_BY_PRODUCT")
          if lines+12>maxlines gosub lines_count
          gosub profile_heading
 

          dim pbuf$(pbufwidth)
          pbuf$(1) = Translate!.getTranslation("AON_CUSTOMER_TYPE:_")+arm02a.customer_type$
          pbuf$(20) = typedesc$
          pbuf$(42) = Translate!.getTranslation("AON_SALES_DISCOUNT:_")+arm02a.disc_code$+" "+discdesc$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(3) = Translate!.getTranslation("AON_SALESPERSON:_")+arm02a.slspsn_code$
          pbuf$(20) = salesdesc$
          pbuf$(46) = Translate!.getTranslation("AON_LABEL_CODE:_")+arm02a.label_code$
          gosub output_print_buf
   
          dim pbuf$(pbufwidth)
          pbuf$(3) = Translate!.getTranslation("AON_TERMS_CODE:_")+arm02a.ar_terms_code$
          pbuf$(20) = termsdesc$
          pbuf$(42) = Translate!.getTranslation("AON_FINANCE_CHARGE?_")+fnyn$(arm02a.finance_chg$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(6) = Translate!.getTranslation("AON_TAX_CODE:_")+arm02a.tax_code$
          pbuf$(20) = taxdesc$
          pbuf$(46) = Translate!.getTranslation("AON_STATEMENTS?_")+fnyn$(arm02a.statements$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(1) = Translate!.getTranslation("AON_FREIGHT_TERMS:_")+arm02a.frt_terms$
          pbuf$(20) = frtdesc$
          pbuf$(46) = Translate!.getTranslation("AON_CYCLE_CODE:_")+arm02a.ar_cyclecode$+" "+cycledesc$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(1) = Translate!.getTranslation("AON_TERRITORY:_")+arm02a.territory$
          pbuf$(20) = terrdesc$
          pbuf$(42) = Translate!.getTranslation("AON_SALES_ANALYSIS:_")+sales_analysis$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(2) = Translate!.getTranslation("AON_DISTRIBUTION:_")+arm02a.ar_dist_code$ 
          pbuf$(20) = distdesc$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(2) = Translate!.getTranslation("AON_MESSAGE_CODE:_")+arm02a.message_code$
          pbuf$(20) = msgdesc$
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(2) = Translate!.getTranslation("AON_PRICING_CODE:_")+arm02a.pricing_code$
          pbuf$(20) = pricedesc$
          pbuf$(45) = Translate!.getTranslation("AON_CREDIT_HOLD:_")+hold$
          gosub output_print_buf
          
          lines=lines+10


          rem --- Print customer comments

          while morecomments
                gosub comments_heading
                read (arm05_dev,key=arm01_key$,dom=*next)
                while moredetail
                      k$=key(arm05_dev,end=*break)
                      if pos(arm01_key$=k$)<>1 break
                      read record (arm05_dev,key=k$) arm05a$
                      if lines+1>maxlines 
                         gosub lines_count
                         gosub comments_heading
                      endif
                      dim pbuf$(pbufwidth)
                      pbuf$(1) = arm05a.sequence_num$+" "+arm05a.std_comments$
                      gosub output_print_buf
        
                      lines=lines+1
                wend
                break
          wend

          rem --- Process customer ship-to records

          first=1
          read (arm03_dev,key=arm01_key$,dom=*next)
          while moredetail
                k$=key(arm03_dev,end=*break)
                if pos(arm01_key$=k$)<>1 break
                read record (arm03_dev,key=k$) arm03a$

                rem --- Get AR code descriptions

                terrdesc$=fncode$(arc_terrcode_dev,firm_id$+"H"+arm03a.territory$,fattr(arm10h$))
                salesdesc$=fncode$(arc_salecode_dev,firm_id$+"F"+arm03a.slspsn_code$,fattr(arm10f$))

                rem --- Get OP code descriptions (if installed)

                taxdesc$=na$
                if op$="Y" taxdesc$=fncode$(opm06_dev,firm_id$+arm03a.tax_code$,fattr(opm06a$))

                rem --- Print the customer ship-to record

                extension$=""
                if cvs(arm03a.phone_exten$,2)<>"" extension$=Translate!.getTranslation("AON_EXT_")+arm03a.phone_exten$
                if len(taxdesc$)>19 taxdesc$=taxdesc$(1,19)
                if len(terrdesc$)>19 terrdesc$=terrdesc$(1,19)
                if len(salesdesc$)>19 salesdesc$=salesdesc$(1,19)
                arm03a.country$=arm03a.country$(1,23)
                if lines+9>maxlines gosub lines_count
                if first gosub shipto_heading
:                   else OutVect!.addItem("") 
 

                dim pbuf$(pbufwidth)
                pbuf$(1) = Translate!.getTranslation("AON_SHIP_TO:_")+arm03a.shipto_no$
                call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(arm03a.phone_no$,2),"",phone_mask$
                phone$=cvs(arm03a.phone_no$,2)
                phone$=str(phone$:phone_mask$,err=*next)
                pbuf$(47) = Translate!.getTranslation("AON_TELEPHONE:_")+phone$+" "+extension$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(4) = Translate!.getTranslation("AON_NAME:_")+arm03a.name$
                pbuf$(49) = Translate!.getTranslation("AON_CONTACT:_")+arm03a.contact_name$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(1) = Translate!.getTranslation("AON_ADDRESS:_")+arm03a.addr_line_1$
                pbuf$(45) = Translate!.getTranslation("AON_SALESPERSON:_")+arm03a.slspsn_code$+" "+salesdesc$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(10) = arm03a.addr_line_2$
                pbuf$(47) = Translate!.getTranslation("AON_TERRITORY:_")+arm03a.territory$+" "+terrdesc$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(10) = arm03a.addr_line_3$
                pbuf$(48) = Translate!.getTranslation("AON_TAX_CODE:_")+arm03a.tax_code$+" "+taxdesc$
                gosub output_print_buf

  
                dim pbuf$(pbufwidth)
                pbuf$(10) = arm03a.addr_line_4$
                pbuf$(52) = "SIC: "+arm03a.sic_code$
                gosub output_print_buf


                dim pbuf$(pbufwidth)
                pbuf$(4) = Translate!.getTranslation("AON_CITY:_")+arm03a.city$
                pbuf$(46) = Translate!.getTranslation("AON_D&B_NUMBER:_")+arm03a.db_no$
                gosub output_print_buf

                dim pbuf$(pbufwidth)
                pbuf$(3) = Translate!.getTranslation("AON_STATE:_")+arm03a.state_code$
                call stbl("+DIR_SYP")+"bac_getmask.bbj","P",cvs(arm03a.zip_code$,2),"",postal_mask$
                postal$=cvs(arm03a.zip_code$,2)
                postal$=str(postal$:postal_mask$,err=*next)
                pbuf$(14) = Translate!.getTranslation("AON_ZIP/POSTAL:_")+postal$
                pbuf$(49) = Translate!.getTranslation("AON_COUNTRY:_")+arm03a.country$
                gosub output_print_buf


                lines=lines+9

                rem --- Loop back for next ship-to record

          wend

          rem --- Process customer job number records (if job numbers are being used)

          while morejobs
                first=1
                read (opm09_dev,key=arm01_key$,dom=*next)
                while moredetail
                    k$=key(opm09_dev,end=*break)
                    if pos(arm01_key$=k$)<>1 break
                    read record (opm09_dev,key=k$) opm09a$
                    extension$=""
                    if cvs(opm09a.phone_exten$,2)<>"" extension$=Translate!.getTranslation("AON_EXT_")+opm09a.phone_exten$
                    if lines+9>maxlines gosub lines_count
                      if first gosub job_heading
:                         else OutVect!.addItem("")

                    
                    dim pbuf$(pbufwidth)
                    pbuf$(4) = Translate!.getTranslation("AON_JOB_ID:_")+opm09a.job_no$
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(2) = Translate!.getTranslation("AON_JOB_NAME:_")+opm09a.customer_name$
                    pbuf$(45) = Translate!.getTranslation("AON_PRELIMINARY_LIEN_INFORMATION")
                    gosub output_print_buf
 
                    dim pbuf$(pbufwidth)
                    pbuf$(2) = Translate!.getTranslation("AON_ADDRESS:_")+opm09a.addr_line_1$
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(12) = opm09a.addr_line_2$
                    pbuf$(45) = Translate!.getTranslation("AON_LIEN_DATE:")+fndate$(opm09a.lien_date$)
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(6) = Translate!.getTranslation("AON_CITY:_")+opm09a.city$
                    pbuf$(49) = Translate!.getTranslation("AON_LIEN_ID:")+opm09a.lien_no$
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(3) = Translate!.getTranslation("AON_STATE:_")+opm09a.state_code$
                    call stbl("+DIR_SYP")+"bac_getmask.bbj","P",cvs(opm09a.zip_code$,2),"",postal_mask$
                    postal$=cvs(opm09a.zip_code$,2)
                    postal$=str(postal$:postal_mask$,err=*next)
                    pbuf$(14) = Translate!.getTranslation("AON_ZIP/POSTAL:_")+postal$
                    pbuf$(50) = Translate!.getTranslation("AON_AMOUNT:_")+str(opm09a.lien_amount:m1$)
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(opm09a.phone_no$,2),"",phone_mask$
                    phone$=cvs(opm09a.phone_no$,2)
                    phone$=str(phone$:phone_mask$,err=*next)
                    pbuf$(3) = Translate!.getTranslation("AON_TELEPHONE:_")+phone$+" "+extension$
                    pbuf$(42) = Translate!.getTranslation("AON_FIRST_SHIPMENT:_")+fndate$(opm09a.fst_shp_date$)
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(3) = Translate!.getTranslation("AON_CONTACT:_")+opm09a.contact_name$
                    pbuf$(37) = Translate!.getTranslation("AON_TOTAL_SALES_TO_DATE:_")+str(opm09a.total_sales:m1$)
                    gosub output_print_buf

                    dim pbuf$(pbufwidth)
                    pbuf$(4) = Translate!.getTranslation("AON_RETAIN?_")+fnyn$(opm09a.retain_cust$)
                    pbuf$(39) = Translate!.getTranslation("AON_LAST_INVOICE_DATE:_")+fndate$(opm09a.lstinv_date$)
                    gosub output_print_buf

                    lines=lines+9

                    rem --- Loop back for next customer job record

                wend
                break

                rem --- Done with customer job records

          wend

          rem --- Print aging and sales summary

          mtd_percent=0
          ytd_percent=0
          pytd_percent=0
          nmtd_percent=0
          mtd_profit=arm06a.mtd_sales-arm06a.mtd_cost
          ytd_profit=arm06a.ytd_sales-arm06a.ytd_cost
          pytd_profit=arm06a.pyr_sales-arm06a.pri_ytd_cost
          nmtd_profit=arm06a.nmtd_sales-arm06a.nxt_mtd_cost
          if arm06a.mtd_sales<>0 mtd_percent=(mtd_profit*100)/arm06a.mtd_sales
          if arm06a.ytd_sales<>0 ytd_percent=(ytd_profit*100)/arm06a.ytd_sales
          if arm06a.pyr_sales<>0 pytd_percent=(pytd_profit*100)/arm06a.pyr_sales
          if arm06a.nmtd_sales<>0 nmtd_percent=(nmtd_profi*100)/arm06a.nmtd_sales
          balance=arm02a.aging_future+arm02a.aging_cur+arm02a.aging_30+
:                 arm02a.aging_60+arm02a.aging_90+arm02a.aging_120
          if lines+15>maxlines gosub lines_count
          gosub detail_heading


 
          dim pbuf$(pbufwidth)
          pbuf$((a[0]+m1-7)+1) = Translate!.getTranslation("AON_FUTURE")
          pbuf$(a[1]+m1-8) = Translate!.getTranslation("AON_CURRENT")
          pbuf$((a[2]+m1-8)+1) = Translate!.getTranslation("AON_30_DAYS")
          pbuf$(a[3]+m1-8) = Translate!.getTranslation("AON_60_DAYS")
          pbuf$((a[4]+m1-8)+1) = Translate!.getTranslation("AON_90_DAYS")
          pbuf$(a[5]+m1-8) = Translate!.getTranslation("AON_120_DAYS")
          pbuf$((a[6]+m1-8)+1) = Translate!.getTranslation("AON_BALANCE")
          gosub output_print_buf

  
          dim pbuf$(pbufwidth)
          pbuf$(a[0]+1) = str(arm02a.aging_future:m1$)
          pbuf$(a[2]+1) = str(arm02a.aging_cur:m1$)
          pbuf$(a[4]+1) = str(arm02a.aging_30:m1$)
          pbuf$(a[6]+1) = str(arm02a.aging_60:m1$)
          pbuf$(a[4]+1) = str(arm02a.aging_90:m1$)
          pbuf$(a[5]+1) = str(arm02a.aging_120:m1$)
          pbuf$(a[6]+1) = str(balance:m1$)
          gosub output_print_buf

          OutVect!.addItem("")


          dim pbuf$(pbufwidth)
          pbuf$(3) = Translate!.getTranslation("AON_LAST_INVOICE:_")+fndate$(arm02a.lstinv_date$)
          pbuf$(41) = Translate!.getTranslation("AON_AVG_DAYS_TO_PAY:_")+cvs(str(arm06a.avg_days:m5$),1+2)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(3) = Translate!.getTranslation("AON_LAST_PAYMENT:_")+fndate$(arm02a.lstpay_date$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$((s[2]+m1-6)+1) = Translate!.getTranslation("AON_PRIOR")
          pbuf$((s[3]+m1-6)+1) = Translate!.getTranslation("AON_NEXT")
          gosub output_print_buf
  
          dim pbuf$(pbufwidth)
          pbuf$((s[0]+m1-4)+1)   = "MTD"
          pbuf$((s[1]+m1-4)+1)   = "YTD"
          pbuf$((s[2]+m1-6)+1)  = Translate!.getTranslation("AON_YEAR")
          pbuf$((s[3]+m1-6)+1) = Translate!.getTranslation("AON_MONTH")
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(10) = Translate!.getTranslation("AON_SALES:_")
          pbuf$(s[0]+1) = str(arm06a.mtd_sales:m1$)
          pbuf$(s[1]+1) = str(arm06a.ytd_sales:m1$)
          pbuf$(s[2]+1) = str(arm06a.pyr_sales:m1$)
          pbuf$(s[3]+1) = str(arm06a.nmtd_sales:m1$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(11) = Translate!.getTranslation("AON_COST:_")
          pbuf$(s[0]+1) = str(arm06a.mtd_cost:m1$)
          pbuf$(s[1]+1) = str(arm06a.ytd_cost:m1$)
          pbuf$(s[2]+1) = str(arm06a.pri_ytd_cost:m1$)
          pbuf$(s[3]+1) = str(arm06a.nxt_mtd_cost:m1$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(11) = Translate!.getTranslation("AON_GROSS_PROFIT:_")
          pbuf$(s[0]+1) = str(mtd_profit:m1$)
          pbuf$(s[1]+1) = str(ytd_profit:m1$)
          pbuf$(s[2]+1) = str(pytd_profit:m1$)
          pbuf$(s[3]+1) = str(nmtd_profit:m1$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(2) = Translate!.getTranslation("AON_GROSS_PROFIT_%:_")
          pbuf$(s[0]+1) = str(mtd_percent:m6$)
          pbuf$(s[1]+1) = str(ytd_percent:m6$)
          pbuf$(s[2]+1) = str(pytd_percent:m6$)
          pbuf$(s[3]+1) = str(nmtd_percent:m6$)
          gosub output_print_buf

          dim pbuf$(pbufwidth)
          pbuf$(1) = Translate!.getTranslation("AON_AVG_DAYS_TO_PAY:_")
          pbuf$(s[0]+1) = str(arm06a.avg_days_mtd:m5$)
          pbuf$(s[1]+1) = str(arm06a.avg_days_ytd:m5$)
          pbuf$(s[2]+1) = str(arm06a.avg_dtp_pytd:m5$)
          pbuf$(s[3]+1) = str(arm06a.avg_dtp_nmtd:m5$)
          gosub output_print_buf


          dim pbuf$(pbufwidth)
          pbuf$(5) = Translate!.getTranslation("AON_HIGH_CREDIT:_")
          pbuf$(s[0]+1) = str(arm06a.mtd_high_crd:m1$)
          pbuf$(s[1]+1) = str(arm06a.ytd_hi_cred:m1$)
          pbuf$(s[2]+1) = str(arm06a.pyr_hi_crd:m1$)
          pbuf$(s[3]+1) = str(arm06a.nmtd_high_cr:m5$)
          gosub output_print_buf

          lines=lines+15

          rem --- Print invoice history

          if lines+3>maxlines gosub lines_count

          rem --- Read customer detail records

          first=1
          printed=0
          custinv=0
          custapp=0
          custdis=0
          customer$=arm01a.firm_id$+artype$+arm01a.customer_id$
          read (art01_dev,key=customer$,dom=*next)

          rem --- Read next invoice header record

          while moreheaders
                art01_key$=key(art01_dev,end=*break)
                if pos(customer$=art01_key$)<>1 break
                read record (art01_dev) art01a$
                type$=fntype$(art01a.invoice_type$)
                if lines+1>maxlines gosub lines_count
                if first gosub invoice_heading

                dim pbuf$(pbufwidth)
                pbuf$(o[1]) = art01a.ar_inv_no$
                pbuf$(o[2]) = str(fndate$(art01a.invoice_date$))
                pbuf$(o[3]+1) = str(fndate$(art01a.inv_due_date$))
                pbuf$(o[4]+1) = str(art01a.ar_terms_code$)
                pbuf$(o[5]+1) = str(type$)
                pbuf$(o[6]+1) = str(art01a.invoice_amt:m1$)
                pbuf$(o[9]+1) = str(art01a.disc_allowed:m1$)
                gosub output_print_buf

                lines=lines+1
                printed=1
                custinv=custinv+art01a.invoice_amt
                custdis=custdis+art01a.disc_allowed
                applied=0
                detail=0
                art01_key$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+art01a.ar_inv_no$
                read (art11_dev,key=art01_key$,dom=*next)

                rem --- Read next invoice detail record

                while moredetail
                      k$=key(art11_dev,end=*break)
                      if pos(art01_key$=k$)<>1 break
                      read record (art11_dev) art11a$
                      detail=1
                      type$=fntype$(art11a.trans_type$)
                      if lines+1>maxlines gosub lines_count
                      if first gosub invoice_heading

                      dim pbuf$(pbufwidth)
                      pbuf$(o[2]+1) = str(fndate$(art11a.trans_date$))
                      pbuf$(o[3]+1) = str(fndate$(art11a.refchk_no$))
                      pbuf$(o[5]+1) = str(type$)
                      pbuf$(o[7]+1) = str(art11a.trans_amt:m1$)
                      pbuf$(o[9]+1) = str(art11a.adjdisc_amt:m1$)
                      gosub output_print_buf

                      lines=lines+1
                      applied=applied+art11a.trans_amt
                      custapp=custapp+art11a.trans_amt
                      custdis=custdis+art11a.adjdisc_amt
                wend

                rem --- Print invoice total and loop back for next invoice header

                if detail=0 continue
                balance=art01a.invoice_amt+applied
                if lines+1>maxlines gosub lines_count
                if first gosub invoice_heading
                dim pbuf$(pbufwidth)
                pbuf$((o[6]-6)+1) = str(Translate!.getTranslation("AON_TOTAL"))
                pbuf$(o[8]+1) = str(balance:m1$)
                gosub output_print_buf

                lines=lines+1

          wend
                
          rem --- Print customer total

          if printed=0 continue
          balance=custinv+custapp
          if lines+1>maxlines gosub lines_count

          dim pbuf$(pbufwidth)
          pbuf$((o[6]-15)+1) = str(Translate!.getTranslation("AON_CUSTOMER_TOTAL"))
          pbuf$(o[6]+1) = str(custinv:m1$)
          pbuf$(o[7]+1) = str(custapp:m1$)
          pbuf$(o[8]+1) = str(balance:m1$)
          pbuf$(o[9]+1) = str(custdis:m1$)
          gosub output_print_buf

          lines=lines+1
          reportinv=reportinv+custinv
          reportapp=reportapp+custapp
          reportdis=reportdis+custdis

          rem --- Loop back for next Customer Master

    wend

done: rem --- All done

    goto std_exit

output_print_buf:

    OutVect!.addItem(pbuf$)

return


lines_count: rem --- Lines Count

    lines=heading+1
    
    dim pbuf$(pbufwidth)
    cust$ = Translate!.getTranslation("AON_CUSTOMER:_") + str(fnmask$(arm01a.customer_id$(1,customer_size),m0$)) + " " + arm01a.customer_name$

    pbuf$(1) = cust$
    gosub output_print_buf

 

    lines=lines+1
    first=1
    return

profile_heading: rem --- Profile subheading

    if lines+2>maxlines gosub lines_count

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1) = fnheader$(Translate!.getTranslation("AON_PROFILE_INFORMATION"),pbufwidth)
    gosub output_print_buf
        
    lines=lines+2
    return

comments_heading: rem --- Comments subheading

    if lines+2>maxlines gosub lines_count

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1) = fnheader$(Translate!.getTranslation("AON_COMMENTS"),pbufwidth)
    gosub output_print_buf
        
    lines=lines+2
    return

shipto_heading: rem --- Ship-to subheading

    if lines+2>maxlines gosub lines_count

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1) = fnheader$(Translate!.getTranslation("AON_SHIP-TO_ADDRESS_INFORMATION"),pbufwidth)
    gosub output_print_buf

    lines=lines+2
    first=0
    return

job_heading: rem --- Job number subheading

    if lines+2>maxlines gosub lines_count

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1) = fnheader$(Translate!.getTranslation("AON_CUSTOMER_JOB_INFORMATION"),pbufwidth)
    gosub output_print_buf
    lines=lines+2
    first=0
    return

detail_heading: rem --- Aging and Sales Summary subheading

    if lines+2>maxlines gosub lines_count
    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1) = fnheader$(Translate!.getTranslation("AON_AGING_AND_SALES_SUMMARY"),pbufwidth)
    gosub output_print_buf
    lines=lines+2
    return

invoice_heading: rem --- Invoice history subheading

    if lines+3>maxlines gosub lines_count
    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1) = fnheader$(Translate!.getTranslation("AON_INVOICE_HISTORY"),pbufwidth)
    gosub output_print_buf

    dim pbuf$(120)
    pbuf$(o[0]+1) = Translate!.getTranslation("AON_CUST/INV")
    pbuf$(o[2]+1) = Translate!.getTranslation("AON_DATE")
    pbuf$(o[3]+1) = Translate!.getTranslation("AON_DUE/REF")
    pbuf$(o[4]+1) = "TC"
    pbuf$(o[5]+1) = Translate!.getTranslation("AON_TYPE")
    pbuf$((o[6]+m1-8)+1) = Translate!.getTranslation("AON_INVOICE")
    pbuf$((o[7]+m1-8)+1) = Translate!.getTranslation("AON_APPLIED")
    pbuf$((o[8]+m1-8)+1) = Translate!.getTranslation("AON_BALANCE")
    pbuf$((o[9]+m1-9)+1) = Translate!.getTranslation("AON_DISCOUNT")
    gosub output_print_buf

    lines=lines+3
    first=0
    return

rem --- Functions

rem --- fnyn$: Return Yes/No

    def fnyn$(q$)
        q1$=Translate!.getTranslation("AON_NO")
        if q$="Y" q1$=Translate!.getTranslation("AON_YES")
        return q1$
    fnend

rem --- fntype$: Return type description based on code value

    def fntype$(q$)
        q1$=q$
        if q$="S" q1$=Translate!.getTranslation("AON_SALE")
        if q$="C" q1$=Translate!.getTranslation("AON_CASH")
        if q$="F" q1$=Translate!.getTranslation("AON_FIN")
        if q$="A" q1$=Translate!.getTranslation("AON_ADJ")
        if q$="V" q1$=Translate!.getTranslation("AON_VOID")
        if q$="I" q1$=Translate!.getTranslation("AON_INV")
        return q1$
    fnend

rem --- fncode$: Retrieve code record and return code description

    def fncode$(q,q$,q1$)
        dim q2$:q1$
        q2.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
        find record (q,key=q$,dom=*next) q2$
        q3$=q2.code_desc$
        return q3$
    fnend

rem --- Assemble and return subheading

    def fnheader$(q$,q)
        dim q1$(q,"-")
        q1=len(q$)+2
        q1$(15,q1)=" "+q$+" "
        return q1$
    fnend

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
