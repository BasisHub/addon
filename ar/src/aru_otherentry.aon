rem --- Conversion Invoice/Finance Charge Update
rem --- Program aru_otherentry v8.0.0 07Jan2007 (aru_ca)
rem --- Created by adx_codeport.bbx v1.1.5 (01/07/2007 01:00:46)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- This register/update combination is used for both the Finance
rem --- Charge Register and the Conversion Invoice Register.

    setesc std_error
    seterr std_error

    next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()

rem --- Initializations

    ar_type$=fill(2)

rem --- Get user approval to proceed

    msg_id$="AON_UPDT_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Start progress meter and position invoice file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,are02_dev,1,meter_num,status
    read (are02_dev,key=firm_id$+batch_no$,dom=*next)

rem --- Read next Invoice (are-02) record

    while more
          are02_key$=key(are02_dev,end=*break)
          if pos(firm_id$+batch_no$=are02_key$)<>1 break
          read record (are02_dev) are02a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Update Open Invoice (art-01) file

          dim art01a$:fattr(art01a$)
          art01a.firm_id$=are02a.firm_id$
          art01a.ar_type$=are02a.ar_type$
          art01a.customer_id$=are02a.customer_id$
          art01a.ar_inv_no$=are02a.ar_inv_no$
          art01a.sequence_00$="00"
          art01a.disc_taken=0
          k$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+
:            art01a.ar_inv_no$+art01a.sequence_00$
          extract record (art01_dev,key=k$,dom=*next)x$; rem Advisory Locking
          art01a.ar_dist_code$=are02a.ar_dist_code$
          art01a.ar_terms_code$=are02a.ar_terms_code$
          art01a.invoice_type$=are02a.invoice_type$
          art01a.invoice_date$=are02a.invoice_date$
          art01a.inv_due_date$=are02a.inv_due_date$
          art01a.disc_date$=are02a.disc_date$
          art01a.invoice_bal=art01a.invoice_bal+(are02a.invoice_amt-art01a.invoice_amt)
          art01a.invoice_amt=are02a.invoice_amt
          art01a.disc_allowed=are02a.discount_amt
          art01a$=field(art01a$)
          write record (art01_dev) art01a$

          rem --- Delete Invoice (are-02) record and loop back for the next one

          remove (are02_dev,key=are02a.firm_id$+are02a.ar_type$+are02a.customer_id$+are02a.ar_inv_no$)

    wend

rem --- All done

    if gl$="Y"
       call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,status
       call pgmdir$+"glc_ctlupdate.aon",status
       call pgmdir$+"glc_ctldelete.aon",status       
    endif
    call pgmdir$+"adc_batchdelete.aon",status
    goto std_exit

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
