REM ========================================================================
REM arr_graphicSalesReport.aon - Graphic Sales Report
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
REM ========================================================================

    setesc std_error
    seterr std_error


REM ========================================================================
REM USE and Declares
REM ========================================================================
    
    
    use ::BBjAreaChart.bbj::BBjAreaChart
    use ::BBjDialChart.bbj::BBjDialChart
    use ::BBjGaugeChart.bbj::BBjGaugeChart
    use ::sys/prog/bao_imagemgr.bbj::BarImageMgr
        
    use org.jfree.data.category.DefaultCategoryDataset
    use org.jfree.chart.JFreeChart
    use java.util.HashMap
    use java.util.TreeMap
    use java.util.ArrayList
    use java.util.Set
    use java.util.Iterator

    declare BBjSysGui sysgui!
    declare BBjTopLevelWindow win!

    declare BBjGenericChart BBjGenericAreaChart!
    
    declare TreeMap salesperson!
    declare TreeMap salespersonCode!
    
    declare Set setSalesperson!
    declare Iterator iteratorSalesperson!
    declare TreeMap salesData!
    declare HashMap salespersonData!
    declare HashMap salespersonTotalSales!
    declare Set setSalesData!
    declare Iterator iteratorSalesData!
    declare Set setSalespersonData!
    declare Iterator iteratorSalespersonData!
    declare BBjServerEvent e!
    declare BBjChildWindow AreaChartWindow! 
    declare BBjChildWindow DialChartWindow! 
    
    declare BBjRecordSet glParams!
    declare BBjRecordData periods!
    
    declare BBjRecordSet rs!
    declare BBjRecordData data!

    declare BBjProgressBar bar1!
    declare BBjProgressBar bar2!
    
    declare BBjImageManager imageMgr!
    
REM ========================================================================
REM Common information
REM ========================================================================

    REM set environment

    REM add to the prefix to find the graphic controls custom objects
    bbjhome$ = System.getProperty("basis.BBjHome") + "/"
    imageshome$ = stbl("+CUST_IMAGES")
        
    imageslist$ = "chartsImageList.png"
    ImageListCharts! = new BBjVector()
    ImageListCharts!.addItem("areachart0")
    ImageListCharts!.addItem("areachart1")
    ImageListCharts!.addItem("barchart0")
    ImageListCharts!.addItem("barchart1")
    ImageListCharts!.addItem("dialchart0")
    ImageListCharts!.addItem("dialchart1")
    ImageListCharts!.addItem("gaugechart0")
    ImageListCharts!.addItem("gaugechart1")
    ImageListCharts!.addItem("linechart0")
    ImageListCharts!.addItem("linechart1")
    ImageListCharts!.addItem("piechart0")
    ImageListCharts!.addItem("piechart1")
    
    rem ' the location of the Area, Dial and Guage Chart may change to utils/
    rem ' until then their use is optional
    rem ' in addition, these charts use client side objects, so aren't enabled for BUI at present
    location1$ = bbjhome$  + "demos/Common/"
    rem ' demos installed?
    testchan = unt
    demosInstalled = 0
    rem ' if not running BUI, and if demos are installed, set flag to (later) allow dial, gauge, and area charts
    if info(3,6)<>"5"
        open(testchan, err=*next)location1$; demosInstalled = 1
        if demosInstalled then
            close(testchan)	
        if pos(" " = location1$) <> 0 then location1$ = chr(34) + location1$ + chr(34)
            prefix$ = pfx
            prefix$ = prefix$ + " " + location1$
            prefix prefix$
        fi
    endif
    rem ' Open the BBj SysGUI Channel
    sysgui!=BBjAPI().openSysGui("X0") 

    rem ' get an imageManager
    imageMgr! = sysgui!.getImageManager()
    imageMgr!.setCacheSize(0)
    
    rem ' addImageList
    sysgui!.addImageList(1,44,imageMgr!.loadImageFromFile(imageshome$ + imageslist$))
    
    rem ' set the database URL
    dbserver$="localhost"
    dbsqlport$=":2001"
    dbtimeout$="&socket_timeout=5000"
  
    dbserver$=stbl("+DBSERVER",err=*next)
    dbsqlport$=":"+stbl("+DBSQLPORT",err=*next)
    dbssl=num(stbl("+DBSSL",err=*next))
    dbtimeout$="&socket_timeout="+stbl("+DBTIMEOUT")
    
    if dbssl
        dbssl$="&ssl=true"
    else
        dbssl$="&ssl=false"
    endif

    url_user$="&user=guest"
    if stbl("!DSUDDB",err=*endif)<>"" then
        url_user$=""
    endif
	
    dbname$ = stbl("+DBNAME")
    dbname_api$ = stbl("+DBNAME_API")
    if pos("jdbc:apache"=cvs(dbname$,8))=1 then
        url$ = dbname$
    else
	if pos("jdbc:"=cvs(dbname$,8))=1 then			
		url$=dbname$+url_user$+dbssl$+dbtimeout$
	else
		url$ = "jdbc:basis:"+dbserver$+dbsqlport$+"?database="+dbname_api$+url_user$+dbssl$+dbtimeout$
	endif
    endif

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto EXIT
    endif

    rem ' get firm and firm name
    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    
    rem ' set start and end date
    sql$ = "SELECT TOTAL_PERS, CURRENT_PER, CURRENT_YEAR, "
    sql$ = sql$ + "PER_ENDING_01, PER_ENDING_02, PER_ENDING_03, PER_ENDING_04, PER_ENDING_05, PER_ENDING_06, "
    sql$ = sql$ + "PER_ENDING_07, PER_ENDING_08, PER_ENDING_09, PER_ENDING_10, PER_ENDING_11, PER_ENDING_12, PER_ENDING_13 "
    sql$ = sql$ + "FROM GLS_PARAMS "
    sql$ = sql$ + "WHERE FIRM_ID = '" + firm_id$ + "'"
    
    glParams! = BBjAPI().createSQLRecordSet(url$,"",sql$)
    periods! = glParams!.getCurrentRecordData()
    period = num(periods!.getFieldValue("CURRENT_PER"))

    gosub set_up_period
 
REM ========================================================================
REM Create the Window for the program
REM ========================================================================
    winWidth = 900
    winHeight = 500
    
    win!=sysgui!.addWindow(50, 150, winWidth, winHeight, firm_name$ + " Sales Results",$00010093$)
    font! = sysgui!.makeFont("Tahoma", 8, sysgui!.PLAIN)

    label! = win!.addStaticText(win!.getAvailableControlID(), 10,13,70,16,"Starting Date:", $8000$)
    label!.setFont(font!)
    inputDStart! = win!.addInputD(win!.getAvailableControlID(), 83, 10, 80, 19, $$, "%Yl-%Mz-%Dz", "", jul(startYear,startMonth,startDay), jul(startYear,startMonth,startDay))
    inputDStart!.setFont(font!)
    inputDStart!.setCallback(inputDStart!.ON_EDIT_MODIFY, "START_DATE_CHANGED")
    buttonStartLookup! = win!.addButton(win!.getAvailableControlID(), 163, 10, 19, 19, "")
    buttonStartLookup!.setImage(BarImageMgr.getImage("im_tb_cal_m"))
    buttonStartLookup!.setFont(font!)
    buttonStartLookup!.setCallback(buttonStartLookup!.ON_BUTTON_PUSH, "SELECT_START_DATE")

    label! = win!.addStaticText(win!.getAvailableControlID(), 200,13,65,16,"Ending Date:", $8000$)
    label!.setFont(font!)
    inputDFinish! = win!.addInputD(win!.getAvailableControlID(), 268, 10, 80, 19, $$, "%Yl-%Mz-%Dz", "", 0, jul(endYear,endMonth,endDay))
    inputDFinish!.setFont(font!)
    inputDFinish!.setCallback(inputDFinish!.ON_EDIT_MODIFY, "END_DATE_CHANGED")
    buttonFinishLookup! = win!.addButton(win!.getAvailableControlID(), 348, 10, 19, 19, "")
    buttonFinishLookup!.setImage(BarImageMgr.getImage("im_tb_cal_m"))
    buttonFinishLookup!.setFont(font!)
    buttonFinishLookup!.setCallback(buttonFinishLookup!.ON_BUTTON_PUSH, "SELECT_FINISH_DATE")

    sliderDateRange! = win!.addHorizontalSlider(win!.getAvailableControlID(), 7, 35, 370, 30)
    sliderDateRange!.setCallback(sliderDateRange!.ON_CONTROL_SCROLL, "SELECT_DATES")
    sliderDateRange!.setMajorTickSpacing(4)
    sliderDateRange!.setMinorTickSpacing(1)
    sliderDateRange!.setPaintTicks(1)
    sliderDateRange!.setSnapToTicks(1)
    sliderDateRange!.setValue(curPeriod)
    sliderDateRange!.setMinimum(1)
    sliderDateRange!.setMaximum(numPeriods)

    buttonChartPie! = win!.addButton(win!.getAvailableControlID(), 390, 10, 50, 30, "")
    buttonChartPie!.setName("piechart")
    index = ImageListCharts!.indexOf("piechart0")
    buttonChartPie!.setImage(imageMgr!.loadImageFromImageList(1, index))
    buttonChartPie!.setCallback(buttonChartPie!.ON_MOUSE_ENTER, "MOUSE_ENTER")
    buttonChartPie!.setCallback(buttonChartPie!.ON_MOUSE_EXIT, "MOUSE_EXIT")
    buttonChartPie!.setCallback(buttonChartPie!.ON_GAINED_FOCUS, "MOUSE_CLICK")
    
    buttonChartLine! = win!.addButton(win!.getAvailableControlID(), 440, 10, 50, 30, "")
    buttonChartLine!.setName("linechart")
    index = ImageListCharts!.indexOf("linechart0")   
    buttonChartLine!.setImage(imageMgr!.loadImageFromImageList(1, index))
    buttonChartLine!.setCallback(buttonChartLine!.ON_MOUSE_ENTER, "MOUSE_ENTER")
    buttonChartLine!.setCallback(buttonChartLine!.ON_MOUSE_EXIT, "MOUSE_EXIT")
    buttonChartLine!.setCallback(buttonChartLine!.ON_GAINED_FOCUS, "MOUSE_CLICK")
    
    buttonChartBar! = win!.addButton(win!.getAvailableControlID(), 490, 10, 50, 30, "")
    buttonChartBar!.setName("barchart")
    index = ImageListCharts!.indexOf("barchart0")
    buttonChartBar!.setImage(imageMgr!.loadImageFromImageList(1, index))
    buttonChartBar!.setCallback(buttonChartBar!.ON_MOUSE_ENTER, "MOUSE_ENTER")
    buttonChartBar!.setCallback(buttonChartBar!.ON_MOUSE_EXIT, "MOUSE_EXIT")
    buttonChartBar!.setCallback(buttonChartBar!.ON_GAINED_FOCUS, "MOUSE_CLICK")
    
    rem ' these charts are only available if the BBj demos are installed
    if demosInstalled then
	buttonChartDial! = win!.addButton(win!.getAvailableControlID(), 540, 10, 50, 30, "")
	buttonChartDial!.setName("dialchart")
    index = ImageListCharts!.indexOf("dialchart0")
	buttonChartDial!.setImage(imageMgr!.loadImageFromImageList(1, index))
	buttonChartDial!.setCallback(buttonChartDial!.ON_MOUSE_ENTER, "MOUSE_ENTER")
	buttonChartDial!.setCallback(buttonChartDial!.ON_MOUSE_EXIT, "MOUSE_EXIT")
	buttonChartDial!.setCallback(buttonChartDial!.ON_GAINED_FOCUS, "MOUSE_CLICK")

	buttonChartGauge! = win!.addButton(win!.getAvailableControlID(), 590, 10, 50, 30, "")
	buttonChartGauge!.setName("gaugechart")
    index = ImageListCharts!.indexOf("gaugechart0")
	buttonChartGauge!.setImage(imageMgr!.loadImageFromImageList(1, index))
	buttonChartGauge!.setCallback(buttonChartGauge!.ON_MOUSE_ENTER, "MOUSE_ENTER")
	buttonChartGauge!.setCallback(buttonChartGauge!.ON_MOUSE_EXIT, "MOUSE_EXIT")
	buttonChartGauge!.setCallback(buttonChartGauge!.ON_GAINED_FOCUS, "MOUSE_CLICK")

	buttonChartArea! = win!.addButton(win!.getAvailableControlID(), 640, 10, 50, 30, "")
	buttonChartArea!.setName("areachart")
    index = ImageListCharts!.indexOf("areachart0")
	buttonChartArea!.setImage(imageMgr!.loadImageFromImageList(1, index))
	buttonChartArea!.setCallback(buttonChartArea!.ON_MOUSE_ENTER, "MOUSE_ENTER")
	buttonChartArea!.setCallback(buttonChartArea!.ON_MOUSE_EXIT, "MOUSE_EXIT")
	buttonChartArea!.setCallback(buttonChartArea!.ON_GAINED_FOCUS, "MOUSE_CLICK")
    fi

    win!.setCallback(win!.ON_CLOSE,"EXIT")
    win!.setCallback(win!.ON_RESIZE, "WINDOW_RESIZE")

    win!.setVisible(1)
    buttonChartPie!.focus()

    rem ' Current chart type
    currentChartType$ = "piechart"
    gosub SET_CHART_TYPE
    
    gosub QUERY_DATABASE
    gosub WINDOW_RESIZE
    process_events 

EXIT: 
    release

WINDOW_RESIZE:
    winHeight = win!.getHeight()
    winWidth = win!.getWidth()
    
    rem ' resize the pie chart window
    PieChartWindow!.setSize(winWidth - 20, winHeight - 90)
    myBBjPieChart!.setSize(winWidth - 20, winHeight - 90)
    
    rem ' resize the chart line window
    LineChartWindow!.setSize(winWidth - 20, winHeight - 90)
    myBBjLineChart!.setSize(winWidth - 20, winHeight - 90)

    rem ' resize bar chart window
    BarChartWindow!.setSize(winWidth - 20, winHeight - 90)
    myBBjBarChart!.setSize(winWidth - 20, winHeight - 90)
   
    if demosInstalled then

        rem ' resize area chart
	AreaChartWindow!.setSize(winWidth - 20, winHeight - 90)
	BBjGenericAreaChart!.setSize(winWidth - 20, winHeight - 90)

	rem ' resize the dial chart
	gosub CREATE_DIALCHART
	if currentChartType$ = "dialchart" then DialChartWindow!.setVisible(1)
	
	rem ' resize the gauge chart
	gosub CREATE_GAUGECHART
        if currentChartType$ = "gaugechart" then GaugeChartWindow!.setVisible(1)

    fi
    
    return
    
SELECT_DATES:
    rem ' the slider fired this event
    period = sliderDateRange!.getValue()
    gosub SET_UP_PERIOD
    rem ' change only if the dates have changed
    checkDate$ = inputDStart!.getText()
    newStart$ = date(jul(startYear, startMonth, startDay):"%Y-%Mz-%Dz")
    if checkDate$ <> newStart$ then
    	inputDStart!.setValue(jul(startYear, startMonth, startDay))
    	inputDFinish!.setValue(jul(endYear, endMonth, endDay))
        gosub RELOAD_ON_DATE_CHANGE
    fi
    return

START_DATE_CHANGED:
    if inputDStart!.isValid() then 
    	gosub RELOAD_ON_DATE_CHANGE
    fi
    return

END_DATE_CHANGED:
    if inputDFinish!.isValid() then 
    	gosub RELOAD_ON_DATE_CHANGE
    fi
    return

RELOAD_ON_DATE_CHANGE:
    rem ' start date must be less than end date
    sdate$ = inputDStart!.getText()
    edate$ = inputDFinish!.getText()
    if sdate$ < edate$ then gosub QUERY_DATABASE
    return
    
MOUSE_ENTER:
    e! = sysgui!.getLastEvent()
    control! = e!.getControl()
    index = ImageListCharts!.indexOf(control!.getName() + "1")
    control!.setImage(imageMgr!.loadImageFromImageList(1, index))
    return


MOUSE_EXIT:
    e! = sysgui!.getLastEvent()
    control! = e!.getControl()
    if currentChartType$ <> control!.getName() then
    index = ImageListCharts!.indexOf(control!.getName() + "0")
    control!.setImage(imageMgr!.loadImageFromImageList(1, index))    
    fi
    return


MOUSE_CLICK:
    e! = sysgui!.getLastEvent()
    control! = e!.getControl()
    currentChartType$ = control!.getName()
    gosub SET_CHART_TYPE
    return

SET_CHART_TYPE:
    buttonChartLine!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartLine!.getName()+"0")))
    buttonChartBar!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartBar!.getName()+"0")))
    buttonChartPie!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartPie!.getName()+"0")))
    BarChartWindow!.setVisible(0,err=*NEXT)
    LineChartWindow!.setVisible(0,err=*NEXT)
    PieChartWindow!.setVisible(0,err=*NEXT)

    if demosInstalled then
    buttonChartDial!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartDial!.getName()+"0")))
    buttonChartArea!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartArea!.getName()+"0")))
    buttonChartGauge!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartGauge!.getName()+"0")))    
	DialChartWindow!.setVisible(0,err=*NEXT)
	AreaChartWindow!.setVisible(0,err=*NEXT)
	GaugeChartWindow!.setVisible(0,err=*NEXT)
    fi
    
    if currentChartType$ = "linechart" then
        buttonChartLine!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartLine!.getName()+"1")))    
        LineChartWindow!.setVisible(1,err=*NEXT)
    endif

    if currentChartType$ = "barchart" then
        buttonChartBar!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartBar!.getName()+"1")))
        BarChartWindow!.setVisible(1,err=*NEXT)
    endif 
    
    if currentChartType$ = "piechart" then
        buttonChartPie!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartPie!.getName()+"1")))
        PieChartWindow!.setVisible(1,err=*NEXT)
    endif

    if currentChartType$ = "dialchart" then
        buttonChartDial!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartDial!.getName()+"1")))
        DialChartWindow!.setVisible(1,err=*NEXT)
    endif

    if currentChartType$ = "areachart" then
        buttonChartArea!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartArea!.getName()+"1")))
        AreaChartWindow!.setVisible(1,err=*NEXT)
    endif

    if currentChartType$ = "gaugechart" then
        buttonChartGauge!.setImage(imageMgr!.loadImageFromImageList(1,ImageListCharts!.indexOf(buttonChartGauge!.getName()+"1")))    
        GaugeChartWindow!.setVisible(1,err=*NEXT)
    endif

    return


SELECT_START_DATE:
    inputDStart!.calendar()
    return


SELECT_FINISH_DATE:
    inputDFinish!.calendar()
    return

FORCE_FOCUS:
    inputDStart!.focus()
    retun


QUERY_DATABASE:
REM ========================================================================
REM Get all of the daily sales information for each salesrep.  All of the 
REM information will go into a TreeMap, which is a sorted hash.  The key
REM for the TreeMap will be the sales date (invoice_date).  The value
REM associated with that date will be a HashMap.  This HashMap will contain
REM the salesperson's name and sales for that day.  Since we're using a 
REM HashMap we're not limited to the number of salespersons.
REM ========================================================================

    REM Set a wait cursor
    win!.setCursor(3)

    gosub create_progress_bars
        
    inputDStart$ = fnstripdashes$(inputDStart!.getText())
    inputDFinish$ = fnstripdashes$(inputDFinish!.getText())
    
    rem ' load the salepserson list for the given period
    sql$ = "SELECT T1.SLSPSN_CODE, T2.CODE_DESC AS SLSPSN_NAME, ROUND(SUM(T1.TOTAL_SALES),0) AS TOTAL_SALES "
    sql$ = sql$ + "FROM OPT_INVHDR T1 "
    sql$ = sql$ + "INNER JOIN ARC_SALECODE T2 ON T1.FIRM_ID = T2.FIRM_ID AND 'F' = T2.RECORD_ID_F AND T1.SLSPSN_CODE = T2.SLSPSN_CODE "
    sql$ = sql$ + "WHERE T1.FIRM_ID = '" + firm_id$ + "' AND (T1.INVOICE_DATE BETWEEN '" + inputDStart$ + "' AND '" + inputDFinish$ + "') "
    sql$ = sql$ + "GROUP BY T1.SLSPSN_CODE, T2.CODE_DESC "
    sql$ = sql$ + "ORDER BY TOTAL_SALES DESC"

    rs! = BBjAPI().createSQLRecordSet(url$,"",sql$)

    rem ' create a new treemap to hold the saleman
    salesperson! = new TreeMap()
    salespersonCode! = new TreeMap()
    	
    REM Iterate over the result set for salespersons with sales in the period
    counter = 0
    
    if !(rs!.isEmpty()) then
	    while 1

		data! = rs!.getCurrentRecordData()

		if (num(data!.getFieldValue("TOTAL_SALES")) <> 0)
			counter = counter + 1
			salesperson!.put(cvs(data!.getFieldValue("SLSPSN_NAME"),3) + " " + cvs(data!.getFieldValue("SLSPSN_CODE"),3), str(counter))
			salespersonCode!.put(cvs(data!.getFieldValue("SLSPSN_NAME"),3) + " " + cvs(data!.getFieldValue("SLSPSN_CODE"),3) + "_code", data!.getFieldValue("SLSPSN_CODE"))
		endif

		rs!.next(err=*break)

	    wend
    fi
    rs!.close()

    rem ' update the progress bar
    bar1!.setValue(1)

    rem ' Create a new hashmap for the salespersons and their totals
    salespersonTotalSales! = new HashMap()
    salesData! = new TreeMap()

    rem ' housekeep the sub query progress bar
    if salesperson!.size() > 0 then bar2!.setMaximum(salesperson!.size())
    bar2!.setValue(0)
    
    rem ' Iterate over the salesperson
    setSalesperson! = salesperson!.keySet()
    iteratorSalesperson! = setSalesperson!.iterator()
    salespersoncount = 0

    while iteratorSalesperson!.hasNext()

        salespersonTotalSales = 0 
        salesperson$ = iteratorSalesperson!.next()

        REM Contstruct an SQL Query that retrieves total sales for the specified salesperson by date
	sql$ = "SELECT CAST(T1.INVOICE_DATE AS SQL_CHAR) AS INVDATE, ROUND(SUM(T1.TOTAL_SALES),0) AS TOTAL_SALES "
	sql$ = sql$ + "FROM OPT_INVHDR T1 "
	sql$ = sql$ + "WHERE T1.FIRM_ID = '" + firm_id$ + "' AND (T1.INVOICE_DATE BETWEEN '" + inputDStart$ + "' AND '" + inputDFinish$ + "') AND T1.SLSPSN_CODE = '" + salespersonCode!.get(salesperson$+"_code") + "' "
	sql$ = sql$ + "GROUP BY T1.INVOICE_DATE "

    	rs! = BBjAPI().createSQLRecordSet(url$,"",sql$)

        rem ' Iterate over the result set of daily sales for the specified salesperson
        while 1

	    data! = rs!.getCurrentRecordData()
        
            rem ' Get the HashMap associated with the date.  If one doesn't exist yet, then create it
            invDate$ = data!.getFieldValue("INVDATE")
	    if salesData!.containsKey(invDate$)
                salespersonData! = cast(HashMap, salesData!.get(invDate$))
            else
                salespersonData! = new HashMap()
            endif

            REM Add the sales data to the HashMap, then put the HashMap in the TreeMapd
            salespersonData!.put(salesperson$,num(data!.getFieldValue("TOTAL_SALES")))
            salesData!.put(invDate$, salespersonData!)
            salespersonTotalSales = salespersonTotalSales + num(data!.getFieldValue("TOTAL_SALES"))
                        
	    rs!.next(err=*break)
	    
        wend
    	rs!.close()

        REM Store the total sales for the date range for the salesperson
        salespersonTotalSales!.put(salesperson$, salespersonTotalSales)
        
        rem ' update the progress bar
        salespersoncount = salespersoncount + 1
        bar2!.setValue(salespersoncount)
        
    wend

    gosub GENERATE_DATASETS
    
    if demosInstalled then
	gosub CREATE_AREACHART
	gosub CREATE_DIALCHART
	gosub CREATE_GAUGECHART
    fi
    gosub CREATE_BARCHART
    gosub CREATE_LINECHART
    gosub CREATE_PIECHART

    gosub SET_CHART_TYPE
    win!.setCursor(0)

    return


GENERATE_DATASETS:
REM ========================================================================
REM Generate the datasets for the various charts
REM ========================================================================

    if info(3,6)<>"5"
    REM Construct a CategoryDataset for an AreaChart based on the sales information
    defaultDataset! = new DefaultCategoryDataset@()
    REM Iterate over the sales dates TreeMap
    setSalesData! = salesData!.keySet()
    iteratorSalesData! = setSalesData!.iterator()
    while iteratorSalesData!.hasNext()

        REM Get the date and salesperson HashMap for this element
        invoiceDate$ = iteratorSalesData!.next()
        salespersonData! = cast(HashMap, salesData!.get(invoiceDate$))

        REM Iterate over the salesperson data in the HashMap
        setSalespersonData! = salespersonData!.keySet()
        iteratorSalespersonData! = setSalespersonData!.iterator()
        while iteratorSalespersonData!.hasNext()

            REM Get the salesperson and their total sales
            salesperson$ = iteratorSalespersonData!.next()
            totalSales = salespersonData!.get(salesperson$)

            REM The important part!  Getting all of the data and putting
            REM it into the CategoryDataset.  This will then be used
            REM to create the AreaChart
            rem ' defaultDataset!.addValue(totalSales, salesperson$, invoiceDate$)
            id$ = invoiceDate$(7)
            defaultDataset!.addValue(totalSales, salesperson$, id$)

        wend
    wend    
    fi
    rem ' udpate the progress bar
    bar1!.setValue(2)
    
    REM Iterate over the salespersonTotalSales data in the HashMap
    REM to figure out what the maximum value is
    maxTotalSales = 0
    aveTotalSales = 0
    set! = salespersonTotalSales!.keySet()
    iterator! = set!.iterator()
    while iterator!.hasNext()

        REM Get the salesperson and their total sales
        salesperson$ = iterator!.next()
        if (salespersonTotalSales!.get(salesperson$) > maxTotalSales) then
            maxTotalSales = salespersonTotalSales!.get(salesperson$)
        endif
        aveTotalSales = aveTotalSales + salespersonTotalSales!.get(salesperson$)

    wend
    if salesperson!.size() > 0 then
         aveTotalSales = aveTotalSales / salesperson!.size()
         maxTotalSales = int(maxTotalSales * 1.05)
    else
         aveTotalSales = 0
         maxTotalSales = 0
    endif

    rem ' udpate the progress bar
    bar1!.setValue(3)

    gosub remove_progress_bars

return

CREATE_AREACHART:
REM ========================================================================
REM Create the AreaChart and customize it
REM ========================================================================
    REM Create an customize the BBjAreaChart
    BBjGenericAreaChart!.destroy(err=*NEXT)
    AreaChartWindow!.destroy(err=*NEXT)
    myBBjAreaChart! = new BBjAreaChart("Sales Information for " + inputDStart!.getText() + " to " + inputDFinish!.getText(), "Day", "Sales", defaultDataset!, 1)
    rem ' myBBjAreaChart!.setBackgroundImage(imageshome$ + "aon_logo.jpg")
    myBBjAreaChart!.setForegroundTransparency(.7)

    REM Create the Generic Chart for the Area Chart
    AreaChartWindow! = win!.addChildWindow(win!.getAvailableControlID(), 10, 80, winWidth - 20, winHeight - 90, "", $00010810$, sysgui!.getAvailableContext())
    BBjGenericAreaChart!=AreaChartWindow!.addGenericChart(AreaChartWindow!.getAvailableControlID(), 0, 0, AreaChartWindow!.getWidth(), AreaChartWindow!.getHeight()) 

    REM Display the Area Chart inside the Generic Chart control on the window
    BBjGenericAreaChart!.setClientChart(myBBjAreaChart!.getJFreeChart()) 

    return


CREATE_DIALCHART:
REM ========================================================================
REM Create the DialChart and customize it
REM ========================================================================

    REM Define colors and fonts
    bgColor! = BBjAPI().makeColor(170,170,170)
    font! = BBjAPI().getSysGui().makeFont("Tahoma", 10, sysgui!.BOLD)
    font2! = BBjAPI().getSysGui().makeFont("Tahoma", 12, sysgui!.BOLD)
    font3! = BBjAPI().getSysGui().makeFont("Tahoma", 14, sysgui!.BOLD)
    font4! = BBjAPI().getSysGui().makeFont("Tahoma", 16, sysgui!.BOLD)

    rem ' detirmine row and dial width and height
    dialCount = salesperson!.size()
    if dialCount > 0 then
	    dialRows = 1
	    dialWinWidth = winWidth - 20
	    dialWinHeight = winHeight - 90
	    while 1
		if dialRows = 1 then 
			changeRow = dialCount
		else
			changeRow = int((dialCount / dialRows) + 1)
		fi
		dialWidth = int(dialWinWidth/changeRow)
		dialHeight = dialWidth
		if dialHeight > dialWinHeight then
			dialHeight = dialWinHeight
			dialWidth = dialHeight
		fi
		if (dialWinHeight - (dialHeight * dialRows)) < dialHeight then
			if (dialWinHeight - (dialHeight * dialRows)) >= 0 then
				break
			else
				dialRows = dialRows - 1
				if dialRows = 1 then 
					changeRow = dialCount
				else
					changeRow = int((dialCount / dialRows) + 1)
				fi
				dialWidth = int(dialWinWidth/changeRow)
				dialHeight = dialWidth
				break
			fi
		fi
		dialRows = dialRows + 1    
	    wend
    fi
    
    DialChartWindow!.destroy(err=*NEXT)
    rem ' DialChartWindow! = win!.addChildWindow(win!.getAvailableControlID(), 10, 80, winWidth - 20, winHeight - 90, "", $00010810$, sysgui!.getAvailableContext())
    DialChartWindow! = win!.addChildWindow(win!.getAvailableControlID(), 10, 80, dialWinWidth, dialWinHeight, "", $00010810$, sysgui!.getAvailableContext())
            
    counter = 0
    set! = salespersonTotalSales!.keySet()
    iterator! = set!.iterator()

    x = 0
    y = 0
    while iterator!.hasNext()

        REM Get the salesperson and their total sales
        salesperson$ = iterator!.next()
        salespersonTotalSales = salespersonTotalSales!.get(salesperson$)

        REM Create the Chart without any customizations
        myBBjDialChart! = new BBjDialChart(BBjAPI().makeColor(225,0,0), 0)

        REM Add the scale, background, and salesperson name
        myBBjDialChart!.setScale(0, 0, maxTotalSales/1000, int(maxTotalSales/5000), -90, -270, .74, .05, font3!, .22, BBjAPI().makeColor(50,50,50), 10)
        myBBjDialChart!.setBackgroundImageResized(imageshome$ + "dialframe.png", dialWidth, dialHeight)
        myBBjDialChart!.setAnnotation(salesperson$, font4!, BBjAPI().makeColor(76,93,110), .05, -20)

        REM Set the value indicator color based on the sales figures
        valueFGColor! = BBjAPI().makeColor(93,115,135)
        valueBGColor! = BBjAPI().makeColor(235,235,225)
        valueBorderColor! = BBjAPI().makeColor(127,157,185)
        if (salespersonTotalSales >= (maxTotalSales * .9)) then
            valueFGColor! = BBjAPI().makeColor(50,175,50)
        endif
        if (salespersonTotalSales <= (maxTotalSales * .1)) then
            valueFGColor! = BBjAPI().makeColor(175,50,50)
        endif
        myBBjDialChart!.setValueIndicator(0, font4!, valueFGColor!, valueBGColor!, valueBorderColor!, .50, -52)
        myBBjDialChart!.setAnnotation("Sales in Thousands", font2!, BBjAPI().makeColor(160,160,160), .35, 90)

        REM Add the dataset with the sales value
        myBBjDialChart!.addDataset(0, salespersonTotalSales/1000, 0, .75)

        REM Create the Generic Chart for the Dial Chart and display the Chart inside the Generic Chart control on the window
        BBjGenericDialChart!=DialChartWindow!.addGenericChart(DialChartWindow!.getAvailableControlID(), x, y, dialWidth, dialHeight)
        BBjGenericDialChart!.setClientChart(myBBjDialChart!.getJFreeChart()) 
        counter = counter + 1

        if mod(counter, changeRow) = 0 then 
            x = 0
            y = y + dialHeight
        else
            x = x + dialWidth
        endif        

    wend

    return


CREATE_GAUGECHART:
REM ========================================================================
REM Create the GaugeChart and customize it
REM ========================================================================

    counter = 0

    gaugeCount = salespersonTotalSales!.size()
    gaugeRows = 1
    gaugeWinWidth = winWidth - 20
    gaugeWinHeight = winHeight - 90

    if gaugeCount > 0 then
	    while 1
		if gaugeRows = 1 then 
			changeRow = gaugeCount
		else
			changeRow = int((gaugeCount / gaugeRows) + 1)
		fi
		gaugeWidth = int(gaugeWinWidth/changeRow)
		gaugeHeight = int(gaugeWidth * (0.7))
		if gaugeHeight > dialWinHeight then
			gaugeHeight = dialWindHeight
			gaugeWidth = int(gauageHeight / (0.7))

		fi    		
		if (gaugeWinHeight - (gaugeHeight * gaugeRows)) < gaugeHeight then
			if (gaugeWinHeight - (gaugeHeight * gaugeRows)) >= 0 then
				break
			else
				gaugeRows = gaugeRows - 1
				if gaugeRows = 1 then 
					changeRow = gaugeCount
				else
					changeRow = int((gaugeCount / gaugeRows) + 1)
				fi
				gaugeWidth = int(gaugeWinWidth/changeRow)
				gaugeHeight = int(gaugeWidth * (0.7))
				break
			fi
		fi
		gaugeRows = gaugeRows + 1    
	    wend
    fi
    
    GaugeChartWindow!.destroy(err=*NEXT)
    GaugeChartWindow! = win!.addChildWindow(win!.getAvailableControlID(), 10, 80, gaugeWinWidth, gaugeWinHeight, "", $00010810$, sysgui!.getAvailableContext())

    set! = salespersonTotalSales!.keySet()
    iterator! = set!.iterator()
    x = 0
    y = 0
    while iterator!.hasNext()

        REM Get the salesperson and their total sales
        salesperson$ = iterator!.next()
        salespersonTotalSales = salespersonTotalSales!.get(salesperson$)

        REM Define the Scale parameters
        scaleNumber = 0
        visible = 1
        rangeBottom = 0
        rangeTop = maxTotalSales/1000
        majorTickIncrement = int(maxTotalSales/4000)
        scaleStartDegrees = 115
        scaleRangeDegrees = -50
        scaleRadius = .88
        scaleLength = .025
        font! = font2!
        labelOffset = .05
        tickColor! = BBjAPI().makeColor(50,50,50)
        minorTickCount = 5
 

        REM Create the Chart
        value = salespersonTotalSales/1000
        annotation$ = "Sales (k)"
        myBBjGaugeChart! = new BBjGaugeChart(salesperson$)
        myBBjGaugeChart!.setScale(scaleNumber, visible, rangeBottom, rangeTop, majorTickIncrement, scaleStartDegrees, scaleRangeDegrees, scaleRadius, scaleLength, font!, labelOffset, tickColor!, minorTickCount)


        myBBjGaugeChart!.setValueIndicator(0, font4!, BBjAPI().makeColor(50,50,150), BBjAPI().makeColor(225,225,225), BBjAPI().makeColor(50,50,100), .66, 90)
        myBBjGaugeChart!.setAnnotation(annotation$ , font3!, BBjAPI().makeColor(150,50,50), .77, 90)
        myBBjGaugeChart!.setGradient(BBjAPI().makeColor(250,250,250), BBjAPI().makeColor(192,192,192), 1)
        rem ' myBBjGaugeChart!.setBackgroundImage(imageshome$ + "gaugeframe.png")

        REM Add in the average
        myBBjGaugeChart!.addDataset(0, value, 0, .85)
        myBBjGaugeChart!.addDataset(1, aveTotalSales/1000, 1, .75)

        if (salespersonTotalSales >= (maxTotalSales * .9)) then
            myBBjGaugeChart!.setGradient(BBjAPI().makeColor(150,250,150), BBjAPI().makeColor(192,192,192), 1)
        endif

        if (salespersonTotalSales <= (maxTotalSales * .1)) then
            myBBjGaugeChart!.setGradient(BBjAPI().makeColor(255,150,150), BBjAPI().makeColor(192,192,192), 1)
        endif


        REM Create the Generic Chart for the Dial Chart and display the Chart inside the Generic Chart control on the window
        BBjGenericGaugeChart!=GaugeChartWindow!.addGenericChart(GaugeChartWindow!.getAvailableControlID(), x, y, gaugeWidth, gaugeHeight) 
        BBjGenericGaugeChart!.setClientChart(myBBjGaugeChart!.getJFreeChart()) 
        counter = counter + 1

        if mod(counter, changeRow) = 0 then 
            x = 0
	    y = y + gaugeHeight
        else
            x = x + gaugeWidth
        endif  

    wend

    return


CREATE_BARCHART:
REM ========================================================================
REM Create the BarChart and customize it
REM ========================================================================
    REM Create the barchart
    BarChartWindow!.destroy(err=*NEXT)
    BarChartWindow! = win!.addChildWindow(win!.getAvailableControlID(), 10, 80, winWidth - 20, winHeight - 90, "", $00010810$, sysgui!.getAvailableContext())
    myBBjBarChart! = BarChartWindow!.addBarChart(BarChartWindow!.getAvailableControlID(), 0, 0, BarChartWindow!.getWidth(), BarChartWindow!.getHeight(), "Days", "Sales", salesperson!.size(), salesData!.size(), 1, 1, 0)

    REM Iterate over the salesperson hash and set the series name for each salesperson
    set! = salesperson!.keySet()
    iterator! = set!.iterator()

    while iterator!.hasNext()

        REM Get the salesperson and their total sales
        salesperson$ = iterator!.next()
        rem ' myBBjBarChart!.setSeriesName(num(salesperson!.get(salesperson$))-1, salesperson$ + " (" + salespersonCode!.get(salesperson$+"_code") + ")")
        myBBjBarChart!.setSeriesName(num(salesperson!.get(salesperson$))-1, salesperson$)

    wend

    REM Iterate over the salesData TreeMap and set the series name for each date
    counter = 0 
    set! = salesData!.keySet()
    iterator! = set!.iterator()
    while iterator!.hasNext()

        REM Get the date for the category
        invoicedate$ = iterator!.next()
        myBBjBarChart!.setCategoryName(counter, invoicedate$)
        counter = counter + 1

    wend

    REM Iterate over the sales dates TreeMap
    counterDate = 0 
    setSalesData! = salesData!.keySet()
    iteratorSalesData! = setSalesData!.iterator()
    while iteratorSalesData!.hasNext()

        REM Get the date and salesperson HashMap for this element
        invoiceDate$ = iteratorSalesData!.next()
        salespersonData! = cast(HashMap, salesData!.get(invoiceDate$))

        REM Iterate over the salesperson data in the HashMap
        setSalespersonData! = salespersonData!.keySet()
        iteratorSalespersonData! = setSalespersonData!.iterator()
        while iteratorSalespersonData!.hasNext()

            REM Get the salesperson and their total sales
            salesperson$ = iteratorSalespersonData!.next()
            totalSales = salespersonData!.get(salesperson$)

            REM Set the barchart value
            myBBjBarChart!.setBarValue(num(salesperson!.get(salesperson$))-1, counterDate, totalSales)
            
        wend

        counterDate = counterDate + 1

    wend   

    return


CREATE_LINECHART:
REM ========================================================================
REM Create the LineChart and customize it
REM ========================================================================
    REM Create the linechart
    LineChartWindow!.destroy(err=*NEXT)
    LineChartWindow! = win!.addChildWindow(win!.getAvailableControlID(), 10, 80, winWidth - 20, winHeight - 90, "", $00010810$, sysgui!.getAvailableContext())
    myBBjLineChart! = LineChartWindow!.addLineChart(LineChartWindow!.getAvailableControlID(), 0, 0, LineChartWindow!.getWidth(), LineChartWindow!.getHeight(), "Days", "Sales", salesperson!.size(), 1)

    REM Iterate over the salesperson hash and set the series name for each salesperson
    set! = salesperson!.keySet()
    iterator! = set!.iterator()
    while iterator!.hasNext()

        REM Get the salesperson and their total sales
        salesperson$ = iterator!.next()
        rem ' myBBjLineChart!.setSeriesName(num(salesperson!.get(salesperson$))-1, salesperson$ + " (" + salespersonCode!.get(salesperson$+"_code") + ")")
        myBBjLineChart!.setSeriesName(num(salesperson!.get(salesperson$))-1, salesperson$)

    wend
    REM Iterate over the salesperson hash and set the series name for each salesperson

    REM Iterate over the sales dates TreeMap
    counterDate = 0 
    setSalesData! = salesData!.keySet()
    iteratorSalesData! = setSalesData!.iterator()
    while iteratorSalesData!.hasNext()

        REM Get the date and salesperson HashMap for this element
        invoiceDate$ = iteratorSalesData!.next()
        salespersonData! = cast(HashMap, salesData!.get(invoiceDate$))

        REM Iterate over the salesperson data in the HashMap
        setSalespersonData! = salespersonData!.keySet()
        iteratorSalespersonData! = setSalespersonData!.iterator()
        while iteratorSalespersonData!.hasNext()

            REM Get the salesperson and their total sales
            salesperson$ = iteratorSalespersonData!.next()
            totalSales = salespersonData!.get(salesperson$)

            REM Set the barchart value
            myBBjLineChart!.setXYValue(num(salesperson!.get(salesperson$))-1, counterDate, totalSales)

        wend

        counterDate = counterDate + 1

    wend   

    return


CREATE_PIECHART:
REM ========================================================================
REM Create the PieChart and customize it
REM ========================================================================
    REM Create the PieChart
    PieChartWindow!.destroy(err=*NEXT)
    PieChartWindow! = win!.addChildWindow(win!.getAvailableControlID(), 10, 80, winWidth - 20, winHeight - 90, "", $00010810$, sysgui!.getAvailableContext())
    myBBjPieChart! = PieChartWindow!.addPieChart(PieChartWindow!.getAvailableControlID(), 0, 0, PieChartWindow!.getWidth(), PieChartWindow!.getHeight(), 1, 1)


    counter = 0
    set! = salesperson!.keySet()
    iterator! = set!.iterator()
    while iterator!.hasNext()

        REM Get the salesperson and their total sales
        salesperson$ = iterator!.next()
        salespersonTotalSales = salespersonTotalSales!.get(salesperson$)

        rem ' myBBjPieChart!.setSliceValue(salesperson$ + " (" + salespersonCode!.get(salesperson$+"_code") + ")", salespersonTotalSales)
        myBBjPieChart!.setSliceValue(salesperson$, salespersonTotalSales)

    wend

    return

SET_UP_PERIOD:
    numPeriods = num(periods!.getFieldValue("TOTAL_PERS"))
    curYear = num(periods!.getFieldValue("CURRENT_YEAR"))
    curPeriod = num(periods!.getFieldValue("CURRENT_PER"))
    
    firstPerEnding$ = periods!.getFieldValue("PER_ENDING_01")
    
    switch period
    	case 1 
    		ending$ = periods!.getFieldValue("PER_ENDING_01")
    		if numPeriods = 12 then
    		    starting$ = periods!.getFieldValue("PER_ENDING_12")
    		else
    		    starting$ = periods!.getFieldValue("PER_ENDING_13")
    		fi
    		break
    	case 2; ending$ = periods!.getFieldValue("PER_ENDING_02"); starting$ = periods!.getFieldValue("PER_ENDING_01"); break
    	case 3; ending$ = periods!.getFieldValue("PER_ENDING_03"); starting$ = periods!.getFieldValue("PER_ENDING_02"); break
    	case 4; ending$ = periods!.getFieldValue("PER_ENDING_04"); starting$ = periods!.getFieldValue("PER_ENDING_03"); break
    	case 5; ending$ = periods!.getFieldValue("PER_ENDING_05"); starting$ = periods!.getFieldValue("PER_ENDING_04"); break
    	case 6; ending$ = periods!.getFieldValue("PER_ENDING_06"); starting$ = periods!.getFieldValue("PER_ENDING_05"); break
    	case 7; ending$ = periods!.getFieldValue("PER_ENDING_07"); starting$ = periods!.getFieldValue("PER_ENDING_06"); break
    	case 8; ending$ = periods!.getFieldValue("PER_ENDING_08"); starting$ = periods!.getFieldValue("PER_ENDING_07"); break
    	case 9; ending$ = periods!.getFieldValue("PER_ENDING_09"); starting$ = periods!.getFieldValue("PER_ENDING_08"); break
    	case 10; ending$ = periods!.getFieldValue("PER_ENDING_10"); starting$ = periods!.getFieldValue("PER_ENDING_09"); break
    	case 11; ending$ = periods!.getFieldValue("PER_ENDING_11"); starting$ = periods!.getFieldValue("PER_ENDING_10"); break
    	case 12; ending$ = periods!.getFieldValue("PER_ENDING_12"); starting$ = periods!.getFieldValue("PER_ENDING_11"); break
    	case 13; ending$ = periods!.getFieldValue("PER_ENDING_13"); starting$ = periods!.getFieldValue("PER_ENDING_12"); break
    swend
  
    startMonth = num(starting$(1,2))    
    startDay = num(starting$(3,2))

    endMonth = num(ending$(1,2))
    endDay = num(ending$(3,2))

    firstPerMonth = num(firstPerEnding$(1,2))
    
    rem ' do we have a fiscal year that does not align with the calendar year
    if endMonth < firstPerMonth then 
        year = curYear + 1
    else
    	year = curYear
    fi

    endYear = year

    rem ' adjust the start by one day
    if startMonth = 12 then
	startDate = jul(curYear - 1, startMonth, startDay)
    else
    	startDate = jul(year, startMonth, startDay)
    fi
    startDate = startDate + 1
    startDay = num(date(startDate:"%D"))
    startMonth = num(date(startDate:"%M"))
    startYear = num(date(startDate:"%Y"))
    
    rem ' adjust for leap year
    if startMonth = 2 and startDay = 29 then startMonth = startMonth + 1, startDay = 1
    
return

create_progress_bars:

    rem ' hide chart buttons
    buttonChartPie!.setVisible(0)
    buttonChartLine!.setVisible(0)
    buttonChartBar!.setVisible(0)
    if demosInstalled then
	buttonChartDial!.setVisible(0)
	buttonChartGauge!.setVisible(0)
	buttonChartArea!.setVisible(0)
    fi
    
    font! = sysgui!.makeFont("Tahoma", 8, sysgui!.PLAIN)

    bar1label! = win!.addStaticText(win!.getAvailableControlID(), 390, 14, 110, 16, "Query Progress:", $8000$)
    bar1label!.setFont(font!)
    bar2label! = win!.addStaticText(win!.getAvailableControlID(), 390, 34, 110, 16, "Sub Query Progress:", $8000$)
    bar2label!.setFont(font!)
    
    bar1! = win!.addProgressBar(win!.getAvailableControlID(), 501, 10, 110, 20, 0, 3)
    bar2! = win!.addProgressBar(win!.getAvailableControlID(), 501, 30, 110, 20, 0, 3)
	    
return

remove_progress_bars:

    bar1label!.destroy()
    bar1!.destroy()
    bar2label!.destroy()
    bar2!.destroy()
    
    rem ' show the buttons
    buttonChartPie!.setVisible(1)
    buttonChartLine!.setVisible(1)
    buttonChartBar!.setVisible(1)
    if demosInstalled then
	buttonChartDial!.setVisible(1)
	buttonChartGauge!.setVisible(1)
	buttonChartArea!.setVisible(1)
    fi

return

REM ========================================================================
REM user defined functions
REM ========================================================================
    
rem ' remove - from dates
def fnstripdashes$(xinString$)
	xoutString$ = xinString$
	while 1
		ppos = pos("-" = xoutString$)
		if ppos = 0 break
		xoutString$ = xoutString$(1,ppos-1) + xoutString$(ppos+1)
	wend
return xoutString$
	
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
