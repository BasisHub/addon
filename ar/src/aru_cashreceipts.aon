rem --- Cash Receipts Update
rem --- Program aru_cashreceipts v8.0.0 14Dec2006 (aru_aa)
rem --- Created by adx_codeport.bbx v1.1.4 (12/14/2006 07:38:37)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()

rem --- Get user approval to update

    msg_id$="AON_UPDT_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,are01_dev,1,meter_num,status
    read (are01_dev,key=firm_id$+batch_no$,knum="AO_BATCH_RECTDAT",dom=*next)

rem --- Read next Cash Receipts Header (are-01) record

    while moreheaders
          are01a_key$=key(are01_dev,end=*break)
          if pos(firm_id$+batch_no$=are01a_key$)<>1 break
          extract record (are01_dev) are01a$; rem Advisory Locking
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Initializations for this invoice

          total=0
          mtdcash=0
          mtddisc=0
          mtdgl=0
          nmtdcash=0
          nmtddisc=0
          nmtdgl=0

          rem --- Retrieve Customer Master (arm-01) and Customer 
          rem --- Detail (arm-02) records

          dim arm01a$:fattr(arm01a$),arm02a$:fattr(arm02a$)
          arm01a.firm_id$=firm_id$
          arm01a.customer_id$=are01a.customer_id$
          k$=arm01a.firm_id$+arm01a.customer_id$ 
          found=0
          find record (arm01_dev,key=k$,dom=*next) arm01a$; found=1
          if !found then read(are01_dev); continue
          arm02a.firm_id$=firm_id$
          arm02a.customer_id$=are01a.customer_id$
          arm02a.ar_type$=are01a.ar_type$
          k$=arm02a.firm_id$+arm02a.customer_id$+arm02a.ar_type$ 
          find record (arm02_dev,key=k$,dom=*next) arm02a$

          rem --- Post Cash Receipt History Header (art-06) record
 
          dim art06a$:fattr(art06a$)
          art06a.firm_id$=firm_id$
          art06a.ar_type$=are01a.ar_type$
          art06a.customer_id$=are01a.customer_id$
          art06a.receipt_date$=are01a.receipt_date$
          art06a.cash_rec_cd$=are01a.cash_rec_cd$
          art06a.ar_check_no$=are01a.ar_check_no$
          art06a.cash_check$=are01a.cash_check$
          art06a.aba_no$=are01a.aba_no$
          art06a$=field(art06a$)
          k$=art06a.firm_id$+art06a.ar_type$+art06a.reserved_key_01$+
:            art06a.customer_id$+art06a.receipt_date$+art06a.cash_rec_cd$+
:            art06a.ar_check_no$+art06a.reserved_key_02$
          extract record (art06_dev,key=k$,dom=*next) art06a$; rem Advisory Locking
          art06a.payment_amt=art06a.payment_amt+are01a.payment_amt
          art06a$=field(art06a$)
          write record (art06_dev) art06a$

          rem --- Generate Bank Reconciliation (glt-15) transaction if bank rec is in use

          while br

                rem --- Retrieve Cash Receipts Code (arm-10c) record

                dim arm10c$:fattr(arm10c$)
                arm10c.firm_id$=firm_id$
                arm10c.record_id_c$="C"
                arm10c.cash_rec_cd$=are01a.cash_rec_cd$
                k$=arm10c.firm_id$+arm10c.record_id_c$+arm10c.cash_rec_cd$ 
                find record (arc_cashcode_dev,key=k$,dom=*next) arm10c$

                rem --- Post this Bank Reconciliation (glt-15) record

                dim glt15a$:fattr(glt15a$)
                glt15a.firm_id$=firm_id$
                glt15a.gl_account$=arm10c.gl_cash_acct$
                glt15a.trans_no$="C"+are01a.receipt_date$(3,6)
                glt15a.trans_type$="D"
                glt15a.posted_code$="O"
                glt15a.description$=Translate!.getTranslation("AON_CASH_RECEIPTS_REGISTER")
                glt15a.trns_date$=are01a.receipt_date$
                glt15a$=field(glt15a$)
                k$=glt15a.firm_id$+glt15a.gl_account$+glt15a.trans_no$
                extract record (glt15_dev,key=k$,dom=*next) glt15a$; rem Advisory Locking
                glt15a.trans_amt=glt15a.trans_amt+are01a.payment_amt
                glt15a$=field(glt15a$)
                write record (glt15_dev) glt15a$
                break
          wend

          rem --- Position Cash Receipts Invoice Detail (are-11) file

          receipt$=are01a.firm_id$+are01a.ar_type$+are01a.reserved_key_01$+are01a.receipt_date$+
:                  are01a.customer_id$+are01a.cash_rec_cd$+are01a.ar_check_no$+
:                  are01a.reserved_key_02$
          read (are11_dev,key=receipt$,dom=*next)

          rem --- Read the next Cash Receipt Invoice Detail (are-11) record

          while moredetail
                are11a_key$=key(are11_dev,end=*break)
                if pos(receipt$=are11a_key$)<>1 break
                read record (are11_dev) are11a$

                rem --- Post Cash Receipt History Invoice Detail (art-16) record

                dim art16a$:fattr(art16a$)
                art16a.firm_id$=firm_id$
                art16a.ar_type$=are11a.ar_type$
                art16a.customer_id$=are11a.customer_id$
                art16a.receipt_date$=are11a.receipt_date$
                art16a.cash_rec_cd$=are11a.cash_rec_cd$
                art16a.ar_check_no$=are11a.ar_check_no$
                art16a.ar_inv_no$=are11a.ar_inv_no$
                art16a$=field(art16a$)
                k$=art16a.firm_id$+art16a.ar_type$+art16a.reserved_key_01$+art16a.customer_id$+
:                  art16a.receipt_date$+art16a.cash_rec_cd$+art16a.ar_check_no$+
:                  art16a.reserved_key_02$+art16a.ar_inv_no$
                extract record (art16_dev,key=k$,dom=*next) art16a$; rem Advisory Locking
                art16a.apply_amt=art16a.apply_amt+are11a.apply_amt
                art16a.discount_amt=art16a.discount_amt+are11a.discount_amt
                art16a$=field(art16a$)
                write record (art16_dev) art16a$

                rem --- Retrieve existing or create a new Invoice Header (art-01)
                rem --- record for this transaction

                dim art01a$:fattr(art01a$),art11a$:fattr(art11a$)
                exists=0
                notfound=1
                sequence=1
                art01a.firm_id$=firm_id$
                art01a.ar_type$=are11a.ar_type$
                art01a.customer_id$=are11a.customer_id$
                art01a.ar_inv_no$=are11a.ar_inv_no$
                art01a.sequence_00$="00"
                art01a.ar_dist_code$=arm02a.ar_dist_code$
                art01a.ar_terms_code$=arm02a.ar_terms_code$
                art01a.invoice_type$="S"
                art01a.invoice_date$=are11a.receipt_date$
                art01a.inv_due_date$=are11a.receipt_date$
                art01a.disc_date$=are11a.receipt_date$
                art01a.invoice_amt=-(are11a.apply_amt+are11a.discount_amt)
                k$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+
:                  art01a.ar_inv_no$+art01a.sequence_00$
                find record (art01_dev,key=k$,dom=*next) art01a$; notfound=0

                rem --- If no Invoice Header (art-01) record exists, create one 
                rem --- and create an Invoice Detail (art-11) record as well

                if notfound
                   art01a$=field(art01a$)
                   write record (art01_dev) art01a$
                   type$="C"
                   applied=0
                   discount=0
                   gosub invoice_detail
                endif

                rem --- If the Invoice Header (art-01) record exists, find an
                rem --- Invoice Detail (art-11) record to update or create a
                rem --- new one for this transaction

                exists=notfound=0
                while exists
                      invoice$=art01a.firm_id$+art01a.ar_type$+art01a.customer_id$+
:                              art01a.ar_inv_no$
                      read (art11_dev,key=invoice$,dom=*next)
                      while moredetail
                            k$=key(art11_dev,end=*break)
                            if pos(invoice$=k$)<>1 break
                            extract record (art11_dev,key=k$) art11a$; rem Advisory Locking
                            sequence=num(art11a.sequence_num$)
                            if cvs(art11a.trans_type$,2)="" break
                      wend

                      rem --- Is the current detail record unused?

                      type$="C"
                      applied=-are11a.apply_amt
                      discount=-are11a.discount_amt
                      if cvs(art11a.trans_type$,2)=""
                         gosub invoice_detail
                         break
                      endif

                      rem --- Can a new detail record be added?

                      sequence=sequence+1
                      if sequence<=99
                         gosub invoice_detail
                         break
                      endif

                      rem --- Need to perform a consolidation on the last
                      rem --- detail record

                      sequence=99
                      k$=art11a.firm_id$+art11a.ar_type$+art11a.customer_id$+
:                        art11a.ar_inv_no$+str(sequence:"00")
                      extract record (art11_dev,key=k$,dom=*next) art11a$; rem Advisory Locking
                      type$="A"
                      if pos(art11a.trans_type$=" C") type$="C"
                      applied=art11a.trans_amt-are11a.apply_amt
                      discount=art11a.adjdisc_amt-are11a.discount_amt
                      gosub invoice_detail
                      break
                wend

                rem --- Update Customer Payment Summary (arm-06) record

                payment=are11a.ar_inv_no$(1,2)<>"OA" and are01a.payment_amt>0
                while payment
                      
                      rem --- Retrieve Customer Payment Summary (arm-06) record

                      dim arm06a$:fattr(arm06a$)
                      arm06a.firm_id$=firm_id$
                      arm06a.customer_id$=are11a.customer_id$
                      k$=arm06a.firm_id$+are11a.customer_id$ 
                      extract record (arm06_dev,key=k$,dom=*next) arm06a$; rem Advisory Locking

                      rem --- Calculate difference in days between the invoice
                      rem --- date and the receipt date and update the last payment
                      rem --- date, average days to pay and the number of payments

                      begdate$=art01a.invoice_date$
                      enddate$=are11a.receipt_date$
                      days=0
                      call pgmdir$+"adc_daydates.aon",begdate$,enddate$,days
                      avgdays=arm06a.avg_days
                      payments=arm06a.no_payments
                      if payments arm06a.avg_days=fnavgdays(arm06a.no_payments,arm06a.avg_days,days)
:                            else arm06a.avg_days=days
                      arm06a.no_payments=arm06a.no_payments+1
                      if are11a.receipt_date$<=endperiod$
                         arm06a.avg_days_mtd=fnavgdays(arm06a.mtd_no_pmts,arm06a.avg_days_mtd,days)
                         arm06a.mtd_no_pmts=arm06a.mtd_no_pmts+1
                         arm06a.avg_days_ytd=fnavgdays(arm06a.ytd_no_pmts,arm06a.avg_days_ytd,days)
                         arm06a.ytd_no_pmts=arm06a.ytd_no_pmts+1
                      endif
                      if are11a.receipt_date$>endperiod$
                         arm06a.avg_dtp_nmtd=fnavgdays(arm06a.nmtd_no_pay,arm06a.avg_dtp_nmtd,days)
                         arm06a.nmtd_no_pay=arm06a.nmtd_no_pay+1
                      endif
                      arm06a.lstpay_date$=are11a.receipt_date$
                      arm06a$=field(arm06a$)
                      write record (arm06_dev) arm06a$
                      break
                wend

                rem --- Accumulate cash and discount totals

                if are01a.receipt_date$<=endperiod$ 
                   mtdcash=mtdcash+are11a.apply_amt
                   mtddisc=mtddisc+are11a.discount_amt
                endif
                if are01a.receipt_date$>endperiod$ 
                   nmtdcash=nmtdcash+are11a.apply_amt
                   nmtddisc=nmtddisc+are11a.discount_amt
                endif
                total=total-are11a.apply_amt-are11a.discount_amt

                rem --- Remove or update Cash Receipts Invoice Balance (are-31) record

                while moredetail
                      dim are31a$:fattr(are31a$)
                      k$=are11a.firm_id$+are11a.ar_type$+are11a.reserved_key_01$+
:                        are11a.customer_id$+are11a.ar_inv_no$
                         find record (are31_dev,key=k$,dom=*break) are31a$
                         are31a.apply_amt=are31a.apply_amt-are11a.apply_amt
                         are31a.discount_amt=are31a.discount_amt-are11a.discount_amt
                         update=are31a.apply_amt<>0 or are31a.discount_amt<>0
                      are31a$=field(are31a$)
                      if update write record (are31_dev) are31a$
:                          else remove (are31_dev,key=k$)
                      break
                wend

                rem --- Delete Cash Receipts Invoice Detail (are-11) record
                rem --- and loop back for the next one

                remove (are11_dev,key=are11a_key$)
          wend

          rem --- Position Cash Receipts Distribution (are-21) file

          read (are21_dev,key=receipt$,dom=*next)

          rem --- Read the next Cash Receipt Distribution (are-21) record

          while moredetail
                are21a_key$=key(are21_dev,end=*break)
                if pos(receipt$=are21a_key$)<>1 break
                read record (are21_dev) are21a$

                rem --- Post Cash Receipt History Distribution (art-26) record

                dim art26a$:fattr(art26a$)
                art26a.firm_id$=firm_id$
                art26a.ar_type$=are21a.ar_type$
                art26a.customer_id$=are21a.customer_id$
                art26a.receipt_date$=are21a.receipt_date$
                art26a.cash_rec_cd$=are21a.cash_rec_cd$
                art26a.ar_check_no$=are21a.ar_check_no$
                art26a.gl_account$=are21a.gl_account$
                art26a$=field(art26a$)
                k$=art26a.firm_id$+art26a.ar_type$+art26a.reserved_key_01$+art26a.customer_id$+
:                  art26a.receipt_date$+art26a.cash_rec_cd$+art26a.ar_check_no$+
:                  art26a.reserved_key_02$+art26a.gl_account$
                extract record (art26_dev,key=k$,dom=*next) art26a$; rem Advisory Locking
                art26a.gl_post_amt=art26a.gl_post_amt+are21a.gl_post_amt
                art26a$=field(art26a$)
                write record (art26_dev) art26a$

                rem --- Accumulate GL totals

                if are01a.receipt_date$<=endperiod$ mtdgl=mtdgl+are21a.gl_post_amt
                if are01a.receipt_date$>endperiod$ nmtdgl=nmtdgl+are21a.gl_post_amt

                rem --- Delete Cash Receipts Distribution (are-21) record
                rem --- and loop back for the next one

                remove (are21_dev,key=are21a_key$)
          wend

          rem --- Update the Customer Detail (arm-02) record

          while total<>0
                dim arm02a$:fattr(arm02a$)
                arm02a.firm_id$=firm_id$
                arm02a.customer_id$=are01a.customer_id$
                arm02a.ar_type$=are01a.ar_type$
                k$=arm02a.firm_id$+arm02a.customer_id$+arm02a.ar_type$ 
                extract record (arm02_dev,key=k$,dom=*next) arm02a$; rem Advisory Locking
                arm02a.lstpay_date$=are01a.receipt_date$
                arm02a.aging_cur=arm02a.aging_cur+total
                arm02a$=field(arm02a$)
                write record (arm02_dev) arm02a$
                break
          wend

          rem --- Update MTD Cash Totals (ars-10c) record

          dim ars10c$:fattr(ars10c$)
          ars10c.firm_id$=firm_id$
          ars10c.record_id_c$="C"
          k$=ars10c.firm_id$+ars10c.record_id_c$ 
          extract record (ars10_dev,key=k$,dom=*next) ars10c$; rem Advisory Locking
          ars10c.mtd_cash=ars10c.mtd_cash+mtdcash
          ars10c.mtd_csh_disc=ars10c.mtd_csh_disc+mtddisc
          ars10c.mtd_csh_gl=ars10c.mtd_csh_gl+mtdgl
          ars10c.nxt_mtd_cash=ars10c.nxt_mtd_cash+nmtdcash
          ars10c.nmtd_cash_ds=ars10c.nmtd_cash_ds+nmtddisc
          ars10c.nmtd_cashgl=ars10c.nmtd_cashgl+nmtdgl
          ars10c$=field(ars10c$)
          write record (ars10_dev) ars10c$

          rem --- Delete Cash Receipts Header (are-01) record and loop back for the next one

          remove (are01_dev,key=receipt$)
    wend

rem --- All done

    if gl$="Y"
       call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,status
       call pgmdir$+"glc_ctlupdate.aon",status
       call pgmdir$+"glc_ctldelete.aon",status
    endif
    call pgmdir$+"adc_batchdelete.aon",status
    goto std_exit

invoice_detail: rem --- Create or update an Invoice Detail (art-11) record

    dim art11a$:fattr(art11a$)
    art11a.firm_id$=firm_id$
    art11a.ar_type$=are11a.ar_type$
    art11a.customer_id$=are11a.customer_id$
    art11a.ar_inv_no$=are11a.ar_inv_no$
    art11a.sequence_num$=str(sequence:"00")
    art11a.trans_type$=type$
    art11a.refchk_no$=are11a.ar_check_no$
    art11a.trans_date$=are11a.receipt_date$
    art11a.trans_amt=applied
    art11a.adjdisc_amt=discount
    art11a$=field(art11a$)
    art11a$=field(art11a$)
    write record (art11_dev) art11a$
    return

rem --- Functions

rem --- fnavgday$: Calculate average days to pay

        def fnavgdays(q1,q2,q3)
            q4=((q1*q2)+q3)/(q1+1)
            precision 0
            q4=q4*1
            precision 2
            return q4
        fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
