   rem ' Program Name: arr_digitalDashboard.src
   rem ' Resource File: arr_digitalDashboard.arc
   rem ' Generated by GUIBuilder 4.0 (August 14, 2012 at 16:08:06)
   rem ' Portions Copyright (C) 1997-2012 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file
   gb__resource$="arr_digitalDashboard.arc"
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file arr_digitalDashboard.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 1
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[1]:c(4*=10)"

gb__windows=1; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"ID101:I(2)"

gb__win.ID101=-1

dim gb__window$:"win_id[1]:c(8*=10),win_name[1]:c(16*=10),context[1]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="ID101",gb__window.context[1]=-1,gb__form.id$[1]="101"

gb__context = fngb__window("101"); rem ' 

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (ID101)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.ID101=gb__form_context[1]
         gb__window.context[1]=gb__win.ID101
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "ID100:C(1*=0):ID=100 TYPE=21 X=5 Y=85 W=155 H=555:,CHARTGROUPBOX:C(1*=0):ID=101 TYPE=21 X=170 Y=85 W=795 H=555:,PERSLIDER:C(1*=0):ID=102 TYPE=117 X=91 Y=25 W=869 H=30:,PER01:C(64*=0):ID=103 TYPE=17 X=90 Y=55 W=35 H=20:,PER03:C(64*=0):ID=104 TYPE=17 X=245 Y=55 W=35 H=20:,PER05:C(64*=0):ID=105 TYPE=17 X=400 Y=55 W=35 H=20:,PER07:C(64*=0):ID=106 TYPE=17 X=555 Y=55 W=35 H=20:,PER09:C(64*=0):ID=107 TYPE=17 X=710 Y=55 W=35 H=20:,PER11:C(64*=0):ID=108 TYPE=17 X=865 Y=55 W=35 H=20:,ID109:C(1*=0):ID=109 TYPE=21 X=5 Y=5 W=960 H=70:,PER02:C(64*=0):ID=110 TYPE=17 X=170 Y=55 W=35 H=20:,PER04:C(64*=0):ID=111 TYPE=17 X=325 Y=55 W=35 H=20:,PER06:C(64*=0):ID=112 TYPE=17 X=480 Y=55 W=35 H=20:,PER08:C(64*=0):ID=113 TYPE=17 X=635 Y=55 W=35 H=20:,PER10:C(64*=0):ID=114 TYPE=17 X=790 Y=55 W=35 H=20:,PER12:C(64*=0):ID=115 TYPE=17 X=940 Y=55 W=35 H=20:,YEAR:C(255*=0):ID=116 TYPE=19 X=14 Y=35 W=67 H=65:,PROGRESSGROUPBOX:C(1*=0):ID=117 TYPE=21 X=170 Y=85 W=795 H=555:,PERSLIDER_118:C(1*=0):ID=118 TYPE=117 X=91 Y=25 W=869 H=30:,PER01_119:C(64*=0):ID=119 TYPE=17 X=90 Y=55 W=35 H=20:,PER02_120:C(64*=0):ID=120 TYPE=17 X=160 Y=55 W=35 H=20:,PER03_121:C(64*=0):ID=121 TYPE=17 X=232 Y=55 W=35 H=20:,PER04_122:C(64*=0):ID=122 TYPE=17 X=302 Y=55 W=35 H=20:,PER05_123:C(64*=0):ID=123 TYPE=17 X=374 Y=55 W=35 H=20:,PER06_124:C(64*=0):ID=124 TYPE=17 X=444 Y=55 W=35 H=20:,PER07_125:C(64*=0):ID=125 TYPE=17 X=516 Y=55 W=35 H=20:,PER08_126:C(64*=0):ID=126 TYPE=17 X=586 Y=55 W=35 H=20:,PER09_127:C(64*=0):ID=127 TYPE=17 X=658 Y=55 W=35 H=20:,PER10_128:C(64*=0):ID=128 TYPE=17 X=728 Y=55 W=35 H=20:,PER11_129:C(64*=0):ID=129 TYPE=17 X=799 Y=55 W=35 H=20:,PER12_130:C(64*=0):ID=130 TYPE=17 X=869 Y=55 W=35 H=20:,PER13:C(64*=0):ID=131 TYPE=17 X=930 Y=55 W=35 H=30:"
      return ""
   fnend

declare BBjSysGui sysgui!
declare BBjTopLevelWindow window!
declare BBjListButton year!
declare BBjFont font!

declare BBjRecordSet rs!
declare BBjRecordData data!

declare BBjRecordSet params!
declare BBjRecordData periods!

declare BBjGroupBox chartGroupBox!
declare BBjProgressBar progressBar!
declare BBjGroupBox progressGroupBox!

declare BBjRecordSet labelRs!
declare BBjRecordData labelData!

REM - Get the window
    sysgui! = BBjAPI().getSysGui()
    window! = cast(BBjTopLevelWindow, sysgui!.getWindow(0))
    
REM - Create the charts
    chartLeft = 180
    chartTop = 110

    newWidth = window!.getWidth()
    newHeight = window!.getHeight()

    chartWidthOffset = 200
    chartHeightOffset = 130
    
    groupBoxWidthOffset = 180
    groupBoxHeightOffset = 90

    chartWidth = newWidth - chartWidthOffset
    chartHeight = newHeight - chartHeightOffset

    groupBoxWidth = newWidth - groupBoxWidthOffset
    groupBoxHeight = newHeight - groupBoxHeightOffset

    progressBar! = window!.addProgressBar(701, 290, 85, 75, 20, 0, 3)
    progressBar!.setVisible(0)

    lineChart1! = window!.addLineChart(505, 15, 530, 135, 90, "", "", 1, 0)
    lineChart1!.setTitle("YTD Sales")
    lineChart1Big! = window!.addLineChart(605, chartLeft, chartTop, chartWidth, chartHeight, "", "", 1, 1)
    lineChart1Big!.setTitle("Year to Date Sales")

    barChart2! = window!.addBarChart(504, 15, 425, 135, 90, "", "", 97, 90, 0, 1, 0); barChart2!.setTitle("Customer Type")
    barChart2Big! = window!.addBarChart(604, chartLeft, chartTop, chartWidth, chartHeight, "", "", 97, 90, 1, 1, 0); barChart2Big!.setTitle("Monthly Sales per Customer Type")

    pieChart2! = window!.addPieChart(503, 15, 320, 135, 90, 0, 1)
    pieChart2!.setTitle("Customer Type")
    pieChart2Big! = window!.addPieChart(603, chartLeft, chartTop, chartWidth, chartHeight, 1, 1)
    pieChart2Big!.setTitle("Monthly Sales per Customer Type")

    barChart1! = window!.addBarChart(502, 15, 215, 135, 90, "", "", 7, 50, 0, 1, 0); barChart1!.setTitle("Salesperson")
    barChart1Big! = window!.addBarChart(602, chartLeft, chartTop, chartWidth, chartHeight, "", "", 7, 50, 1, 1, 0); barChart1Big!.setTitle("Monthly Sales per Salesperson")

    pieChart1! = window!.addPieChart(501, 15, 110, 135, 90, 0, 1); pieChart1!.setTitle("Salesperson")
    pieChart1Big! = window!.addPieChart(601, chartLeft, chartTop, chartWidth, chartHeight, 1, 1); pieChart1Big!.setTitle("Monthly Sales per Salesperson")
    visibleControlID = 601

    chartGroupBox! = cast(BBjGroupBox, window!.getControl("chartGroupBox"))
    progressBarGroupBox!= cast(BBjGroupBox, window!.getControl("progressGroupBox"))
    chartGroupBox!.setSize(groupBoxWidth, groupBoxHeight)
    progressBarGroupBox!.setSize(groupBoxWidth, groupBoxHeight)

REM - Open a JDBC connection

    rem ' ******************************************************
    rem ' build the database URL
    rem ' ******************************************************
    dbserver$=stbl("+DBSERVER",err=*next)
    dbsqlport$=":"+stbl("+DBSQLPORT",err=*next)
    dbssl=num(stbl("+DBSSL",err=*next))
    dbtimeout$="&socket_timeout="+stbl("+DBTIMEOUT")
    
    if dbssl
        dbssl$="&ssl=true"
    else
        dbssl$="&ssl=false"
    endif

    url_user$="&user=guest"
    if stbl("!DSUDDB",err=*endif)<>"" then
        url_user$=""
    endif
	
    dbname$ = stbl("+DBNAME")
    dbname_api$ = stbl("+DBNAME_API")
    if pos("jdbc:apache"=cvs(dbname$,8))=1 then
        url$ = dbname$
    else
	if pos("jdbc:"=cvs(dbname$,8))=1 then			
            url$=dbname$+url_user$
	else
            url$ = "jdbc:basis:"+dbserver$+dbsqlport$+"?database="+dbname_api$+url_user$+dbssl$+dbtimeout$
	endif
    endif

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto gb__eoj
    endif

REM - get firm id and firm name
    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    title$ = window!.getTitle()
    title$ = title$ + " - " + firm_name$
    window!.setTitle(title$)

REM - get the accounting periods
    sql$ = "SELECT TOTAL_PERS, CURRENT_PER, CURRENT_YEAR, "
    sql$ = sql$ + "PER_ENDING_01, PER_ENDING_02, PER_ENDING_03, PER_ENDING_04, PER_ENDING_05, PER_ENDING_06, "
    sql$ = sql$ + "PER_ENDING_07, PER_ENDING_08, PER_ENDING_09, PER_ENDING_10, PER_ENDING_11, PER_ENDING_12, PER_ENDING_13 "
    sql$ = sql$ + "FROM GLS_PARAMS "
    sql$ = sql$ + "WHERE FIRM_ID = '" + firm_id$ + "'"

    params! = BBjAPI().createSQLRecordSet(url$,"",sql$)
    periods! = params!.getCurrentRecordData()
    period = num(periods!.getFieldValue("CURRENT_PER"))
    totalPeriods = num(periods!.getFieldValue("TOTAL_PERS"))
    currentYear = num(periods!.getFieldValue("CURRENT_YEAR"))

 REM - Get the Month indicator
    if totalPeriods = 13 then
        window!.getControl("12perSlider").setVisible(0)
        slider! = window!.getControl("13perSlider")
        slider!.setVisible(1)
        window!.getControl("12per01").setVisible(0)
        window!.getControl("12per02").setVisible(0)
        window!.getControl("12per03").setVisible(0)
        window!.getControl("12per04").setVisible(0)
        window!.getControl("12per05").setVisible(0)
        window!.getControl("12per06").setVisible(0)
        window!.getControl("12per07").setVisible(0)
        window!.getControl("12per08").setVisible(0)
        window!.getControl("12per09").setVisible(0)
        window!.getControl("12per10").setVisible(0)
        window!.getControl("12per11").setVisible(0)
        window!.getControl("12per12").setVisible(0)

        window!.getControl("13per01").setVisible(1)
        window!.getControl("13per02").setVisible(1)
        window!.getControl("13per03").setVisible(1)
        window!.getControl("13per04").setVisible(1)
        window!.getControl("13per05").setVisible(1)
        window!.getControl("13per06").setVisible(1)
        window!.getControl("13per07").setVisible(1)
        window!.getControl("13per08").setVisible(1)
        window!.getControl("13per09").setVisible(1)
        window!.getControl("13per10").setVisible(1)
        window!.getControl("13per11").setVisible(1)
        window!.getControl("13per12").setVisible(1)
        window!.getControl("13per13").setVisible(1)

    else
        slider! = window!.getControl("12perSlider")
    fi
    slider!.setValue(period)

    if totalPeriods = 12 then
        for x = 1 to totalPeriods
            switch x
                case 1
                    label$ = periods!.getFieldValue("PER_ENDING_01"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per01").setText(label$)
                    break
                case 2
                    label$ = periods!.getFieldValue("PER_ENDING_02"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per02").setText(label$)
                    break
                case 3
                    label$ = periods!.getFieldValue("PER_ENDING_03"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per03").setText(label$)
                    break
                case 4
                    label$ = periods!.getFieldValue("PER_ENDING_04"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per04").setText(label$)
                    break
                case 5
                    label$ = periods!.getFieldValue("PER_ENDING_05"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per05").setText(label$)
                    break
                case 6
                    label$ = periods!.getFieldValue("PER_ENDING_06"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per06").setText(label$)
                    break
                case 7
                    label$ = periods!.getFieldValue("PER_ENDING_07"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per07").setText(label$)
                    break
                case 8
                    label$ = periods!.getFieldValue("PER_ENDING_08"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per08").setText(label$)
                    break
                case 9
                    label$ = periods!.getFieldValue("PER_ENDING_09"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per09").setText(label$)
                    break
                case 10
                    label$ = periods!.getFieldValue("PER_ENDING_10"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per10").setText(label$)
                    break
                case 11
                    label$ = periods!.getFieldValue("PER_ENDING_11"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per11").setText(label$)
                    break
                case 12
                    label$ = periods!.getFieldValue("PER_ENDING_12"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("12per12").setText(label$)
                    break
            swend
        next x
    else
        for x = 1 to totalPeriods
            switch x
                case 1
                    label$ = periods!.getFieldValue("PER_ENDING_01"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per01").setText(label$)
                    break
                case 2
                    label$ = periods!.getFieldValue("PER_ENDING_02"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per02").setText(label$)
                    break
                case 3
                    label$ = periods!.getFieldValue("PER_ENDING_03"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per03").setText(label$)
                    break
                case 4
                    label$ = periods!.getFieldValue("PER_ENDING_04"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per04").setText(label$)
                    break
                case 5
                    label$ = periods!.getFieldValue("PER_ENDING_05"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per05").setText(label$)
                    break
                case 6
                    label$ = periods!.getFieldValue("PER_ENDING_06"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per06").setText(label$)
                    break
                case 7
                    label$ = periods!.getFieldValue("PER_ENDING_07"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per07").setText(label$)
                    break
                case 8
                    label$ = periods!.getFieldValue("PER_ENDING_08"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per08").setText(label$)
                    break
                case 9
                    label$ = periods!.getFieldValue("PER_ENDING_09"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per09").setText(label$)
                    break
                case 10
                    label$ = periods!.getFieldValue("PER_ENDING_10"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per10").setText(label$)
                    break
                case 11
                    label$ = periods!.getFieldValue("PER_ENDING_11"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per11").setText(label$)
                    break
                case 12
                    label$ = periods!.getFieldValue("PER_ENDING_12"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per12").setText(label$)
                    break
                case 13
                    label$ = periods!.getFieldValue("PER_ENDING_13"); label$ = label$(1,2) + "/" + label$(3,2)
                    window!.getControl("13per13").setText(label$)
                    break
            swend
        next x
    fi

REM - Get the Group box
    groupBox! = window!.getControl(101)

REM - set the year selections
    yearValue = num(date(0:"%Y"))
    yearList$ = str(yearValue) + $0A$
    if yearValue = currentYear then index = 10
    for x = 1 to 10
        yearValue = yearValue - 1
        yearList$ = str(yearValue) + $0A$ + yearList$
        if yearValue = currentYear then index = 10 - x
    next x
    year! = cast(BBjListButton, window!.getControl("year"))
    year!.insertItems(0, yearList$)
    year!.selectIndex(index)

REM - set fonts on labels
    font! = sysgui!.makeFont("Tahoma", 8, sysgui!.PLAIN)
    window!.getControl("12per01").setFont(font!)
    window!.getControl("12per02").setFont(font!)
    window!.getControl("12per03").setFont(font!)
    window!.getControl("12per04").setFont(font!)
    window!.getControl("12per05").setFont(font!)
    window!.getControl("12per06").setFont(font!)
    window!.getControl("12per07").setFont(font!)
    window!.getControl("12per08").setFont(font!)
    window!.getControl("12per09").setFont(font!)
    window!.getControl("12per10").setFont(font!)
    window!.getControl("12per11").setFont(font!)
    window!.getControl("12per12").setFont(font!)

    window!.getControl("13per01").setFont(font!)
    window!.getControl("13per02").setFont(font!)

REM - set font on the year list button
    window!.getControl(116).setFont(font!)

REM - set fonts on the group boxes
    font! = sysgui!.makeFont("Tahoma", 10, sysgui!.BOLD)
    window!.getControl(100).setFont(font!)
    window!.getControl(101).setFont(font!)
    window!.getControl(109).setFont(font!)
    window!.getControl(117).setFont(font!)

REM - create a hashmap for the month names

    declare java.util.HashMap months!
    months! = new java.util.HashMap()
    months!.put("1", "January")
    months!.put("2", "February")
    months!.put("3", "March")
    months!.put("4", "April")
    months!.put("5", "May")
    months!.put("6", "June")
    months!.put("7", "July")
    months!.put("8", "August")
    months!.put("9", "September")
    months!.put("10", "October")
    months!.put("11", "November")
    months!.put("12", "December")


window!.setVisible(1)

gosub UPDATE_GRAPHS

REM - Function to return which control was clicked on given the (x,y) coordinates of the mouse click
DEF FNHITTEST(ptx,pty)
    for i = 501 to 505
        control! = window!.getControl(i)
        x=control!.getX(),y=control!.getY(),w=control!.getWidth(),h=control!.getHeight()
        if ptx>=x and pty>=y and ptx<x+w and pty<y+h then
            return i
        endif
    next i
    return 0
FNEND
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 ()
   while gb__win_id$="101"
      if gb__event.code$="S" then
:        gosub W101_C0_WIN_RESIZE;
:        gb__event_handled=1;
:        break
      if gb__event.code$="X" then
:        gosub W101_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.code$="d" then
:        gosub W101_C0_MOUSE_DOWN;
:        gb__event_handled=1;
:        break
      if gb__event.id=102 and gb__event.code$="p" then
:        gosub W101_C102_SCROLL_MOVE;
:        gb__event_handled=1;
:        break
      if gb__event.id=116 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C116_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=118 and gb__event.code$="p" then
:        gosub W101_C118_SCROLL_MOVE;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------
rem ' UPDATE_GRAPHS
rem ' -----------------------------------------------------------------

UPDATE_GRAPHS:

REM - set wait cursor
    window!.setCursor(3)

    chartGroupBox!.setVisible(0)
    progressBarGroupBox!.setVisible(1)
    progressBar!.setValue(0)
    progressBar!.setVisible(1)

REM - Get the desired month to query upon
    
    gosub set_up_period

REM - clear graphs
    barChart1!.clearData()
    barChart1Big!.clearData()

    pieChart1!.clearData()
    pieChart1Big!.clearData()

    barChart2!.clearData()
    barChart2Big!.clearData()

    pieChart2!.clearData()
    pieChart2Big!.clearData()

    lineChart1!.clearData()
    lineChart1Big!.clearData()

REM - Monthly sales per SalesRep
    declare java.util.ArrayList SalesRepsA!

    SalesRepsA! = new java.util.ArrayList()

    rem ' load the salepserson list for the given period
    sql$ = "SELECT T1.SLSPSN_CODE, T2.CODE_DESC AS SLSPSN_NAME, ROUND(SUM(T1.TOTAL_SALES),0) AS TOTAL "
    sql$ = sql$ + "FROM OPT_INVHDR T1 "
    sql$ = sql$ + "INNER JOIN ARC_SALECODE T2 ON T1.FIRM_ID = T2.FIRM_ID AND T2.RECORD_ID_F = 'F' AND T1.SLSPSN_CODE = T2.SLSPSN_CODE "
    sql$ = sql$ + "WHERE T1.FIRM_ID = '" + firm_id$ + "' AND (T1.INVOICE_DATE BETWEEN '" + monthBeginDate$ + "' AND '" + monthEndDate$ + "') "
    sql$ = sql$ + "GROUP BY T1.SLSPSN_CODE, T2.CODE_DESC "
    sql$ = sql$ + "ORDER BY TOTAL DESC"

    rs! = BBjAPI().createSQLRecordSet(url$,"",sql$)
    progressBar!.setValue(1)

    seriesCount = rs!.getRecordCount()

    if seriesCount > 0 then
        rem ' re add the bar charts with the seriesCount
        barChart1!.destroy()
        barChart1Big!.destroy()

        barChart1! = window!.addBarChart(502, 15, 215, 135, 90, "", "", seriesCount, 50, 0, 1, 0); barChart1!.setTitle("Salesperson")
        barChart1Big! = window!.addBarChart(602, chartLeft, chartTop, chartWidth, chartHeight, "", "", seriesCount, 50, 1, 1, 0, $0010$); barChart1Big!.setTitle("Monthly Sales per Salesperson")

        rem ' manage the visiblity of the charts
        control! = window!.getControl(visibleControlID)
        control!.setVisible(1)

        counter = 0

        while 1
             data! = rs!.getCurrentRecordData()

             if num(data!.getFieldValue("TOTAL")) <> 0 then 

                 SalesRepsA!.add(counter, data!.getFieldValue("SLSPSN_NAME"))

                 barChart1!.setSeriesName(counter, str(counter))
                 barChart1Big!.setSeriesName(counter, cvs(data!.getFieldValue("SLSPSN_NAME"),3) + " - " + str(num(data!.getFieldValue("TOTAL")):"$###,##0.00-"))

                 counter = counter + 1

                 pieChart1!.setSliceValue(str(counter), num(data!.getFieldValue("TOTAL")))
                 pieChart1Big!.setSliceValue(cvs(data!.getFieldValue("SLSPSN_NAME"),3) + " - " + str(num(data!.getFieldValue("TOTAL")):"$###,##0.00-"), num(data!.getFieldValue("TOTAL")))

                 barChart1!.setCategoryName(counter, "")
                 barChart1!.setBarValue(SalesRepsA!.indexOf(data!.getFieldValue("SLSPSN_NAME")),counter,num(data!.getFieldValue("TOTAL")))

                 barChart1Big!.setCategoryName(counter, "")
                 barChart1Big!.setBarValue(SalesRepsA!.indexOf(data!.getFieldValue("SLSPSN_NAME")),counter,num(data!.getFieldValue("TOTAL")))

             fi

             rs!.next(err=*break)
        wend

    fi

    rs!.close()

REM - Monthly sales per Customer type
    declare java.util.ArrayList CustomersA!

    CustomersA! = new java.util.ArrayList()

    rem ' load the customer type list for the given period
    sql$ = "SELECT t2.CUSTOMER_TYPE, t3.CODE_DESC AS CUST_TYPE_DESC, round(sum(t1.TOTAL_SALES),0) as TOTAL "
    sql$ = sql$ + "FROM OPT_INVHDR t1 "
    sql$ = sql$ + "INNER JOIN ARM_CUSTDET t2 ON t1.FIRM_ID = t2.FIRM_ID and t1.CUSTOMER_ID = t2.CUSTOMER_ID "
    sql$ = sql$ + "INNER JOIN ARC_CUSTTYPE t3 on t2.FIRM_ID = t3.FIRM_ID and t3.RECORD_ID_L = 'L' and t2.CUSTOMER_TYPE = t3.CUSTOMER_TYPE "
    sql$ = sql$ + "WHERE t1.FIRM_ID = '" + firm_id$ + "' and (t1.INVOICE_DATE BETWEEN '" + monthBeginDate$ + "' AND '" + monthEndDate$ + "') "
    sql$ = sql$ + "GROUP BY t2.CUSTOMER_TYPE, t3.CODE_DESC ORDER BY TOTAL DESC"
    
    counter = 0

    rs! = BBjAPI().createSQLRecordSet(url$,"",sql$)
    progressBar!.setValue(2)

    seriesCount = rs!.getRecordCount()
 
    if seriesCount > 0 then
        rem ' re add the bar charts with the seriesCount
        barChart2!.destroy()
        barChart2Big!.destroy()

        barChart2! = window!.addBarChart(504, 15, 425, 135, 90, "", "", seriesCount, 90, 0, 1, 0); barChart2!.setTitle("Customer Type")
        barChart2Big! = window!.addBarChart(604, chartLeft, chartTop, chartWidth, chartHeight, "", "", seriesCount, 90, 1, 1, 0, $0010$); barChart2Big!.setTitle("Monthly Sales per Customer Type")

        rem ' manage the visiblity of the charts
        control! = window!.getControl(visibleControlID)
        control!.setVisible(1)
   
        while 1
             rem ' t$ = sqlfetch(chan,err=*BREAK)
             data! = rs!.getCurrentRecordData()         

             if num(data!.getFieldValue("TOTAL")) <> 0 then 

                 CustomersA!.add(counter, data!.getFieldValue("CUST_TYPE_DESC"))

                 barChart2!.setSeriesName(counter, str(counter))
                 barChart2Big!.setSeriesName(counter, data!.getFieldValue("CUST_TYPE_DESC"))

                 counter = counter + 1

                 pieChart2!.setSliceValue(str(counter), num(data!.getFieldValue("TOTAL")))
                 pieChart2Big!.setSliceValue(data!.getFieldValue("CUST_TYPE_DESC"), num(data!.getFieldValue("TOTAL")))

                 barChart2!.setCategoryName(counter, "")
                 barChart2!.setBarValue(CustomersA!.indexOf(data!.getFieldValue("CUST_TYPE_DESC")), counter, num(data!.getFieldValue("TOTAL")))

                 barChart2Big!.setCategoryName(counter, "")
                 barChart2Big!.setBarValue(CustomersA!.indexOf(data!.getFieldValue("CUST_TYPE_DESC")), counter, num(data!.getFieldValue("TOTAL")))
             fi

             rs!.next(err=*break)

        wend
    
    fi

    rs!.close()

REM - Sales Year To Date
    
    dim m[12]

    sql$ = "SELECT SUBSTRING(INVOICE_DATE, 5, 2) as MONTH, SUM(TOTAL_SALES) AS TOTAL FROM OPT_INVHDR "
    sql$ = sql$ + "WHERE FIRM_ID = '" + firm_id$ + "' and (INVOICE_DATE BETWEEN '" + yearStartDate$ + "' AND '" + monthEndDate$ + "') "
    sql$ = sql$ + "GROUP BY SUBSTRING(INVOICE_DATE, 5, 2) ORDER BY MONTH"
    
    rs! = BBjAPI().createSQLRecordSet(url$,"",sql$)
    progressBar!.setValue(3)

    if !(rs!.isEmpty()) then
        while 1
            data! = rs!.getCurrentRecordData()
            rem ' t$ = sqlfetch(chan,err=*BREAK)
            m[num(data!.getFieldValue("MONTH"))] = m[num(data!.getFieldValue("MONTH"))] + num(data!.getFieldValue("TOTAL"))

            rs!.next(err=*break)
        wend

        REM - turn array into a cummulative array instead of a month by month
        for x = 2 to 12
            m[x] = m[x] + m[x-1]
        next x

        lineChart1Big!.setSeriesName(0,"Yearly Sales " + str(m[12]:"$###,###,##0.00-"))
        if totalPeriods = 13 and period = 13 then
            limit = 12
        else
            limit = period
        fi
        for i = 0 to limit 
            lineChart1!.setXYValue(0,i,m[i])
            lineChart1Big!.setXYValue(0,i,m[i])
        next
    fi
    
    rs!.close()

    progressBar!.setVisible(0)
    progressBarGroupBox!.setVisible(0)    
    chartGroupBox!.setVisible(1)
    
REM - set normal cursor
    window!.setCursor(0)

return
rem ' -----------------------------------------------------------------
rem ' set_up_period
rem ' -----------------------------------------------------------------

set_up_period:

    period = slider!.getValue()
    totalPeriods = num(periods!.getFieldValue("TOTAL_PERS"))
    curYear = num(periods!.getFieldValue("CURRENT_YEAR"))
    curPeriod = num(periods!.getFieldValue("CURRENT_PER"))
    
    firstPerEnding$ = periods!.getFieldValue("PER_ENDING_01")
    
    switch period
    	case 1 
    		ending$ = periods!.getFieldValue("PER_ENDING_01") 
    		if totalPeriods = 12 then
    		    starting$ = periods!.getFieldValue("PER_ENDING_12")
    		else
    		    starting$ = periods!.getFieldValue("PER_ENDING_13")
    		fi
    		break
    	case 2; ending$ = periods!.getFieldValue("PER_ENDING_02"); starting$ = periods!.getFieldValue("PER_ENDING_01"); break
    	case 3; ending$ = periods!.getFieldValue("PER_ENDING_03"); starting$ = periods!.getFieldValue("PER_ENDING_02"); break
    	case 4; ending$ = periods!.getFieldValue("PER_ENDING_04"); starting$ = periods!.getFieldValue("PER_ENDING_03"); break
    	case 5; ending$ = periods!.getFieldValue("PER_ENDING_05"); starting$ = periods!.getFieldValue("PER_ENDING_04"); break
    	case 6; ending$ = periods!.getFieldValue("PER_ENDING_06"); starting$ = periods!.getFieldValue("PER_ENDING_05"); break
    	case 7; ending$ = periods!.getFieldValue("PER_ENDING_07"); starting$ = periods!.getFieldValue("PER_ENDING_06"); break
    	case 8; ending$ = periods!.getFieldValue("PER_ENDING_08"); starting$ = periods!.getFieldValue("PER_ENDING_07"); break
    	case 9; ending$ = periods!.getFieldValue("PER_ENDING_09"); starting$ = periods!.getFieldValue("PER_ENDING_08"); break
    	case 10; ending$ = periods!.getFieldValue("PER_ENDING_10"); starting$ = periods!.getFieldValue("PER_ENDING_09"); break
    	case 11; ending$ = periods!.getFieldValue("PER_ENDING_11"); starting$ = periods!.getFieldValue("PER_ENDING_10"); break
    	case 12; ending$ = periods!.getFieldValue("PER_ENDING_12"); starting$ = periods!.getFieldValue("PER_ENDING_11"); break
    	case 13; ending$ = periods!.getFieldValue("PER_ENDING_13"); starting$ = periods!.getFieldValue("PER_ENDING_12"); break
    swend
  
    startMonth = num(starting$(1,2))    
    startDay = num(starting$(3,2))

    endMonth = num(ending$(1,2))
    endDay = num(ending$(3,2))

    firstPerMonth = num(firstPerEnding$(1,2))

    index = year!.getSelectedIndex()
    year = num(year!.getItemAt(index))
   
    rem ' do we have a fiscal year that does not align with the calendar year
    if endMonth < firstPerMonth then 
        endYear = year + 1
    else
        endYear = year
    fi
    if startMonth < firstPerMonth then
        startYear = year + 1
    else
        startYear = year
    fi

    rem ' adjust the start by one day
    if startMonth = 12 and startDay = 31 then
	startDate = jul(startYear - 1, startMonth, startDay)
    else
        rem ' adjust for leap year
        if startMonth = 2 then
            if startDay = 29 and mod(startYear,4) <> 0 then startDay = 28
            if startDay = 28 and mod(startYear,4) = 0 then startDay = 29
        fi
    	startDate = jul(startYear, startMonth, startDay)
    fi
    startDate = startDate + 1
    startDay = num(date(startDate:"%D"))
    startMonth = num(date(startDate:"%M"))
    startYear = num(date(startDate:"%Y"))
    
    rem ' adjust for leap year
    if startMonth = 2 and startDay = 29 then startMonth = startMonth + 1, startDay = 1
    if endMonth = 2 and endDay = 28 and mod(endYear,4) = 0 then endDay = endDay + 1

    monthBeginDate$ = str(startYear:"0000") + str(startMonth:"00") + str(startDay:"00")
    monthEndDate$ = str(endYear:"0000") + str(endMonth:"00") + str(endDay:"00")
 
    rem ' sett the year start date
    if totalPeriods = 12 then
        starting$ = periods!.getFieldValue("PER_ENDING_12")
    else
        starting$ = periods!.getFieldValue("PER_ENDING_13")
    fi
    yearStartMonth = num(starting$(1,2))
    yearStartDay = num(starting$(3,2))
    yearStartDate = jul(year - 1, yearStartMonth, yearStartDay) + 1
    yearStartDate$ = date(yearStartDate:"%Y%Mz%Dz")
    
return

rem ' ---------------------------------------------------------------
rem ' Win=101  (Window) WIN_RESIZE (S)
rem ' ---------------------------------------------------------------

W101_C0_WIN_RESIZE:
rem ' Window resized

newWidth = window!.getWidth()
newHeight = window!.getHeight()

chartWidth = newWidth - chartWidthOffset
chartHeight = newHeight - chartHeightOffset
groupBoxWidth = newWidth - groupBoxWidthOffset
groupBoxHeight = newHeight - groupBoxHeightOffset

lineChart1Big!.setSize(chartWidth, chartHeight)
barChart2Big!.setSize(chartWidth, chartHeight)
pieChart2Big!.setSize(chartWidth, chartHeight)
barChart1Big!.setSize(chartWidth, chartHeight)
pieChart1Big!.setSize(chartWidth, chartHeight)

chartGroupBox!.setSize(groupBoxWidth, groupBoxHeight)
progressBarGroupBox!.setSize(groupBoxWidth, groupBoxHeight)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101  (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W101_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

release
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101  (Window) MOUSE_DOWN (d)
rem ' ---------------------------------------------------------------

W101_C0_MOUSE_DOWN:
rem ' Mouse button down

rem declare BBjControl gb__control!
gb__event! = cast(BBjMouseDownEvent,bbjapi().getSysGui().getLastEvent())
gb__control! = gb__event!.getControl()

rem ' Mouse button: gb__event!.getButton()
rem ' Mouse location: gb__event!.getX(), gb__event!.getY()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Alt pressed: gb__event!.isAltDown()

    event!=bbjapi().getSysGui().getLastEvent()
    ptx=event!.getX(),pty=event!.getY()

    controlID = FNHITTEST(ptx,pty)

if controlID > 500 and controlID < 600 then
    visibleControlID = controlID + 100
    control! = window!.getControl(controlID+100)
    control!.setVisible(1)
    for i = 601 to 605
        if i <> controlID + 100 then
            control! = window!.getControl(i)
            control!.setVisible(0)
        endif
    next i 
endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101  Ctl=102 12perSlider (Horizontal Slider) SCROLL_MOVE (p)
rem ' ---------------------------------------------------------------

W101_C102_SCROLL_MOVE:
rem ' Scroll bar moved

gb__event! = cast(BBjControlScrollEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Scroll location: gb__event!.getPosition()

if (gb__event!.isAdjusting() = 0) then 
    if slider!.getValue() <> period then 
        gosub UPDATE_GRAPHS
    endif
endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101  Ctl=116 year (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C116_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

index = year!.getSelectedIndex()
sYear$ = year!.getItemAt(index)
if sYear$ <> Year$ then
        gosub UPDATE_GRAPHS
endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101  Ctl=118 13perSlider (Horizontal Slider) SCROLL_MOVE (p)
rem ' ---------------------------------------------------------------

W101_C118_SCROLL_MOVE:
rem ' Scroll bar moved

gb__event! = cast(BBjControlScrollEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__event! = cast(BBjControlScrollEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Scroll location: gb__event!.getPosition()

if (gb__event!.isAdjusting() = 0) then 
    if slider!.getValue() <> period then 
        gosub UPDATE_GRAPHS
    endif
endif
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
