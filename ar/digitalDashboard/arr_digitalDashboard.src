   rem ' Program Name: arr_digitalDashboard.src
   rem ' Resource File: arr_digitalDashboard.arc
   rem ' Generated by GUIBuilder 4.0 (February 24, 2011 at 12:00:48)
   rem ' Portions Copyright (C) 1997-2011 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="arr_digitalDashboard.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file arr_digitalDashboard.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 1
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[1]:c(4*=10)"

gb__windows=1; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"ID101:I(2)"

gb__win.ID101=-1

dim gb__window$:"win_id[1]:c(8*=10),win_name[1]:c(16*=10),context[1]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="ID101",gb__window.context[1]=-1,gb__form.id$[1]="101"

gb__context = fngb__window("101"); rem ' 

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (ID101)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.ID101=gb__form_context[1]
         gb__window.context[1]=gb__win.ID101
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "ID100:C(1*=0):ID=100 TYPE=21 X=5 Y=85 W=155 H=555:,ID101:C(1*=0):ID=101 TYPE=21 X=170 Y=85 W=795 H=555:,ID102:C(1*=0):ID=102 TYPE=117 X=91 Y=25 W=869 H=30:,ID103:C(64*=0):ID=103 TYPE=17 X=90 Y=55 W=35 H=20:,ID104:C(64*=0):ID=104 TYPE=17 X=245 Y=55 W=35 H=20:,ID105:C(64*=0):ID=105 TYPE=17 X=400 Y=55 W=35 H=20:,ID106:C(64*=0):ID=106 TYPE=17 X=555 Y=55 W=35 H=20:,ID107:C(64*=0):ID=107 TYPE=17 X=710 Y=55 W=35 H=20:,ID108:C(64*=0):ID=108 TYPE=17 X=866 Y=55 W=35 H=20:,ID109:C(1*=0):ID=109 TYPE=21 X=5 Y=5 W=960 H=70:,ID110:C(64*=0):ID=110 TYPE=17 X=170 Y=55 W=35 H=20:,ID111:C(64*=0):ID=111 TYPE=17 X=325 Y=55 W=35 H=20:,ID112:C(64*=0):ID=112 TYPE=17 X=480 Y=55 W=35 H=20:,ID113:C(64*=0):ID=113 TYPE=17 X=635 Y=55 W=35 H=20:,ID114:C(64*=0):ID=114 TYPE=17 X=790 Y=55 W=35 H=20:,ID115:C(64*=0):ID=115 TYPE=17 X=940 Y=55 W=35 H=20:,YEAR:C(255*=0):ID=116 TYPE=19 X=14 Y=35 W=67 H=65:"
      return ""
   fnend

use ::UIManager.bbj::UIManager

declare BBjTopLevelWindow window!
declare UIManager uiManager!
declare BBjListButton year!

REM - modify the standard environment
    REM add to the prefix to find the support custom objects
    bbjhome$ = System.getProperty("basis.BBjHome") + "/"
    location$ = bbjhome$ + "demos/Workbench/"
    if pos(" " = location$) <> 0 then location$ = chr(34) + location$ + chr(34)
    prefix$ = pfx
    prefix$ = prefix$ + " " + location$
    prefix prefix$

REM - Get the window
    window! = cast(BBjTopLevelWindow,BBjAPI().getSysGui().getWindow(0))

REM - Register with the UIManager
    uiManager! = UIManager.getInstance()
    uiManager!.registerWindow(window!)

REM - Create the charts
    lineChart1! = window!.addLineChart(505, 15, 530, 135, 90, "", "", 1, 1); lineChart1!.setTitle("Year to Date Sales")
    lineChart1Big! = window!.addLineChart(605, 180, 110, 775, 515, "", "", 1, 1); lineChart1Big!.setTitle("Year to Date Sales")

    barChart2! = window!.addBarChart(504, 15, 425, 135, 90, "", "", 97, 90, 1, 1, 0); barChart2!.setTitle("Monthly Sales per Customer Type")
    barChart2Big! = window!.addBarChart(604, 180, 110, 775, 515, "", "", 97, 90, 1, 1, 0); barChart2Big!.setTitle("Monthly Sales per Customer Type")

    pieChart2! = window!.addPieChart(503, 15, 320, 135, 90, 1, 1); pieChart2!.setTitle("Monthly Sales per Customer Type")
    pieChart2Big! = window!.addPieChart(603, 180, 110, 775, 515, 1, 1); pieChart2Big!.setTitle("Monthly Sales per Customer Type")

    barChart1! = window!.addBarChart(502, 15, 215, 135, 90, "", "", 7, 50, 1, 1, 0); barChart1!.setTitle("Monthly Sales per Salesperson")
    barChart1Big! = window!.addBarChart(602, 180, 110, 775, 515, "", "", 7, 50, 1, 1, 0); barChart1Big!.setTitle("Monthly Sales per Salesperson")

    pieChart1! = window!.addPieChart(501, 15, 110, 135, 90, 1, 1); pieChart1!.setTitle("Monthly Sales per Salesperson")
    pieChart1Big! = window!.addPieChart(601, 180, 110, 775, 515, 1, 1); pieChart1Big!.setTitle("Monthly Sales per Salesperson")

REM - Get the Month indicator
    slider! = window!.getControl(102)
    thisMonth = num(date(0:"%M"))
    slider!.setValue(thisMonth)

REM - Get the Group box
    groupBox! = window!.getControl(101)

REM - set the year selections
    yearValue = num(date(0:"%Y"))
    yearList$ = str(yearValue) + $0A$
    for x = 1 to 10
        yearValue = yearValue - 1
        yearList$ = str(yearValue) + $0A$ + yearList$
    next x
    year! = cast(BBjListButton, window!.getControl("year"))
    year!.insertItems(0, yearList$)
    year!.selectIndex(10)

REM - Open a JDBC connection
    chan = sqlunt
    rem ' ******************************************************
    rem ' build the database URL
    rem ' ******************************************************
    dbserver$="localhost"
    dbsqlport$=":2001"
    dbtimeout$="&socket_timeout=5000"
  
    dbserver$=stbl("+DBSERVER",err=*next)
    dbsqlport$=":"+stbl("+DBSQLPORT",err=*next)
    dbssl=num(stbl("+DBSSL",err=*next))
    dbtimeout$="&socket_timeout="+stbl("+DBTIMEOUT")
    
    if dbssl
        dbssl$="&ssl=true"
    else
        dbssl$="&ssl=false"
    endif

    url_user$="&user=guest"
    if stbl("!DSUDDB",err=*endif)<>"" then
        url_user$=""
    endif
	
    dbname$ = stbl("+DBNAME")
    dbname_api$ = stbl("+DBNAME_API")
    if pos("jdbc:apache"=cvs(dbname$,8))=1 then
        url$ = dbname$
    else
	if pos("jdbc:"=cvs(dbname$,8))=1 then			
            url$=dbname$+url_user$
	else
            url$ = "jdbc:basis:"+dbserver$+dbsqlport$+"?database="+dbname_api$+url_user$+dbssl$+dbtimeout$
	endif
    endif
    sqlopen(chan)url$

REM - create a hashmap for the month names

    declare java.util.HashMap months!
    months! = new java.util.HashMap()
    months!.put("1", "January")
    months!.put("2", "February")
    months!.put("3", "March")
    months!.put("4", "April")
    months!.put("5", "May")
    months!.put("6", "June")
    months!.put("7", "July")
    months!.put("8", "August")
    months!.put("9", "September")
    months!.put("10", "October")
    months!.put("11", "November")
    months!.put("12", "December")

REM - get firm id and firm name
    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    title$ = window!.getTitle()
    title$ = title$ + " - " + firm_name$
    window!.setTitle(title$)

window!.setVisible(1)

gosub UPDATE_GRAPHS

REM - Function to return which control was clicked on given the (x,y) coordinates of the mouse click
DEF FNHITTEST(ptx,pty)
    for i = 501 to 505
        control! = window!.getControl(i)
        x=control!.getX(),y=control!.getY(),w=control!.getWidth(),h=control!.getHeight()
        if ptx>=x and pty>=y and ptx<x+w and pty<y+h then
            return i
        endif
    next i
    return 0
FNEND
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 ()
   while gb__win_id$="101"
      if gb__event.code$="X" then
:        gosub W101_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.code$="d" then
:        gosub W101_C0_MOUSE_DOWN;
:        gb__event_handled=1;
:        break
      if gb__event.id=102 and gb__event.code$="p" then
:        gosub W101_C102_SCROLL_MOVE;
:        gb__event_handled=1;
:        break
      if gb__event.id=116 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C116_LIST_SELECT;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------
rem ' UPDATE_GRAPHS
rem ' -----------------------------------------------------------------

UPDATE_GRAPHS:

REM - set wait cursor
    window!.setCursor(3)

REM - Get the desired month to query upon
    month$ = str(slider!.getValue())
    monthZeroBased$ = str(slider!.getValue() - 1)
    monthName$ = months!.get(month$)

    index = year!.getSelectedIndex()
    year$ = year!.getItemAt(index)
    yearStartDate$ = year$ + "01" + "01"
    monthBeginDate$ = year$ + str(num(month$):"00") + "01"
    
    theday = jul(num(year$),num(month$),1)
    while str(num(month$):"00") = str(num(date(theday:"%M")):"00")
        monthEndDay$ = str(date(theday:"%D"):"00")
        theDay = theDay + 1
    wend
    monthEndDate$ = year$ + str(num(month$):"00") + monthEndDay$

REM - clear graphs
    barChart1!.clearData()
    barChart1Big!.clearData()
    pieChart1!.clearData()
    pieChart1Big!.clearData()
    barChart2!.clearData()
    barChart2Big!.clearData()
    pieChart2!.clearData()
    pieChart2Big!.clearData()
    lineChart1!.clearData()
    lineChart1Big!.clearData()

REM - Monthly sales per SalesRep
    declare java.util.HashMap SalesReps!
    declare java.util.ArrayList SalesRepsA!

    SalesReps! = new java.util.HashMap()
    SalesRepsA! = new java.util.ArrayList()

    rem ' load the salepserson list for the given period
    sql$ = "SELECT T2.SLSPSN_CODE, T3.CODE_DESC AS SLSPSN_NAME, ROUND(SUM(T1.TOTAL_SALES),0) AS TOTAL "
    sql$ = sql$ + "FROM OPT_INVHDR T1 "
    sql$ = sql$ + "INNER JOIN ARM_CUSTDET T2 ON T1.FIRM_ID = T2.FIRM_ID AND T1.CUSTOMER_ID = T2.CUSTOMER_ID "
    sql$ = sql$ + "INNER JOIN ARC_SALECODE T3 ON T2.FIRM_ID = T3.FIRM_ID AND T2.SLSPSN_CODE = T3.SLSPSN_CODE "
    sql$ = sql$ + "WHERE T1.FIRM_ID = '" + firm_id$ + "' AND (T1.INVOICE_DATE BETWEEN '" + monthBeginDate$ + "' AND '" + monthEndDate$ + "') "
    sql$ = sql$ + "GROUP BY T2.SLSPSN_CODE, T3.CODE_DESC"

    sqlprep(chan)sql$
    sqlexec(chan)
    dim t$:sqltmpl(chan)
    counter = 0

    
    while 1
         t$ = sqlfetch(chan,err=*BREAK)

         if t.total = 0 then continue

         SalesReps!.put(str(counter), t.slspsn_name$)
         SalesRepsA!.add(counter, t.slspsn_name$)
         barChart1!.setSeriesName(counter, t.slspsn_name$)
         barChart1Big!.setSeriesName(counter, cvs(t.slspsn_name$,3) + " - " + str(t.total:"$###,##0.00-"))

         counter = counter + 1

         pieChart1!.setSliceValue(t.slspsn_name$,t.total)
         pieChart1Big!.setSliceValue(cvs(t.slspsn_name$,3) + " - " + str(t.total:"$###,##0.00-"),t.total)
    
         barChart1!.setCategoryName(counter, "")
         barChart1!.setBarValue(SalesRepsA!.indexOf(t.slspsn_name$),counter,t.total)

         rem barChart1Big!.setCategoryName(counter, SalesReps!.get(str(counter)))
         barChart1Big!.setCategoryName(counter, "")
         barChart1Big!.setBarValue(SalesRepsA!.indexOf(t.slspsn_name$),counter,t.total)

    wend

REM - Monthly sales per Customer type
    declare java.util.HashMap Customers!
    declare java.util.ArrayList CustomersA!

    Customers! = new java.util.HashMap()
    CustomersA! = new java.util.ArrayList()

    rem ' sql$ = "select trim(first_name) + ' ' + trim(last_name) as name from customer order by cust_num"

    rem ' load the customer type list for the given period
    sql$ = "SELECT t2.CUSTOMER_TYPE, t3.CODE_DESC AS CUST_TYPE_DESC, round(sum(t1.TOTAL_SALES),0) as TOTAL "
    sql$ = sql$ + "FROM OPT_INVHDR t1 "
    sql$ = sql$ + "INNER JOIN ARM_CUSTDET t2 ON t1.FIRM_ID = t2.FIRM_ID and t1.CUSTOMER_ID = t2.CUSTOMER_ID "
    sql$ = sql$ + "INNER JOIN ARC_CUSTTYPE t3 on t2.FIRM_ID = t3.FIRM_ID and t2.CUSTOMER_TYPE = t3.CUSTOMER_TYPE "
    sql$ = sql$ + "WHERE t1.FIRM_ID = '" + firm_id$ + "' and (t1.INVOICE_DATE BETWEEN '" + monthBeginDate$ + "' AND '" + monthEndDate$ + "') "
    sql$ = sql$ + "GROUP BY t2.CUSTOMER_TYPE, t3.CODE_DESC ORDER BY TOTAL"
    
    sqlprep(chan)sql$
    sqlexec(chan)
    dim t$:sqltmpl(chan)
    counter = 0
    
    while 1
         t$ = sqlfetch(chan,err=*BREAK)
         
         Customers!.put(str(counter), t.cust_type_desc$)
         CustomersA!.add(counter, t.cust_type_desc$)
         barChart2!.setSeriesName(counter, t.cust_type_desc$)
         barChart2Big!.setSeriesName(counter, t.cust_type_desc$)

         counter = counter + 1

         pieChart2!.setSliceValue(t.cust_type_desc$,t.total)
         pieChart2Big!.setSliceValue(t.cust_type_desc$,t.total)
 
         barChart2!.setCategoryName(counter, "")
         barChart2!.setBarValue(CustomersA!.indexOf(t.cust_type_desc$),counter,t.total)
 
         barChart2Big!.setCategoryName(counter, "")
         barChart2Big!.setBarValue(CustomersA!.indexOf(t.cust_type_desc$),counter,t.total)

    wend

REM - Sales Year To Date
    dim m[12]

    sql$ = "SELECT SUBSTRING(INVOICE_DATE, 5, 2) as MONTH, SUM(TOTAL_SALES) AS TOTAL FROM OPT_INVHDR "
    sql$ = sql$ + "WHERE FIRM_ID = '" + firm_id$ + "' and (INVOICE_DATE BETWEEN '" + yearStartDate$ + "' AND '" + monthEndDate$ + "') "
    sql$ = sql$ + "GROUP BY SUBSTRING(INVOICE_DATE, 5, 2) ORDER BY MONTH"
    
    sqlprep(chan)sql$
    sqlexec(chan)
    dim t$:sqltmpl(chan)

    while 1
        t$ = sqlfetch(chan,err=*BREAK)
        m[num(t.month$)] = m[num(t.month$)] + t.total
    wend

    REM - turn array into a cummulative array instead of a month by month
    for x = 2 to 12
        m[x] = m[x] + m[x-1]
    next x

    lineChart1Big!.setSeriesName(0,"Yearly Sales " + str(m[12]:"$###,###,##0.00-"))
    for i = 0 to num(month$) 
        lineChart1!.setXYValue(0,i,m[i])
        lineChart1Big!.setXYValue(0,i,m[i])
    next

REM - set normal cursor
        window!.setCursor(0)

return

rem ' ---------------------------------------------------------------
rem ' Win=101  (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W101_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

release
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101  (Window) MOUSE_DOWN (d)
rem ' ---------------------------------------------------------------

W101_C0_MOUSE_DOWN:
rem ' Mouse button down

rem declare BBjControl gb__control!
gb__event! = cast(BBjMouseDownEvent,bbjapi().getSysGui().getLastEvent())
gb__control! = gb__event!.getControl()

rem ' Mouse button: gb__event!.getButton()
rem ' Mouse location: gb__event!.getX(), gb__event!.getY()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Alt pressed: gb__event!.isAltDown()

    event!=bbjapi().getSysGui().getLastEvent()
    ptx=event!.getX(),pty=event!.getY()

    controlID = FNHITTEST(ptx,pty)

if controlID > 500 and controlID < 600 then
    control! = window!.getControl(controlID+100)
    control!.setVisible(1)
    for i = 601 to 605
        if i <> controlID + 100 then
            control! = window!.getControl(i)
            control!.setVisible(0)
        endif
    next i 
endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101  Ctl=102 (Horizontal Slider) SCROLL_MOVE (p)
rem ' ---------------------------------------------------------------

W101_C102_SCROLL_MOVE:
rem ' Scroll bar moved

gb__event! = cast(BBjControlScrollEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Scroll location: gb__event!.getPosition()

if (gb__event!.isAdjusting() = 0) then 
    if slider!.getValue() <> num(month$) then 
        gosub UPDATE_GRAPHS
    endif
endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101  Ctl=116 year (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C116_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

index = year!.getSelectedIndex()
sYear$ = year!.getItemAt(index)
if sYear$ <> Year$ then
        gosub UPDATE_GRAPHS
endif
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
