rem --- BILL OF MATERIALS RESEQUENCE DETAIL LINES
rem --- Program bmu_ca v8.0.0 21Jan2008 (bmu_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/21/2008 10:58:16)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+sysinfo",err=*next)
        milestone=num(stbl("+milestone",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=15,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="bmm-01",ids$[1]="BMM_BILLMAST"
        files$[2]="bmm-02",ids$[2]="BMM_BILLMAT"
        files$[3]="bmm-03",ids$[3]="BMM_BILLOPER"
        files$[4]="bmm-04",ids$[4]="BMX_BILLMAT"
        files$[5]="bmm-05",ids$[5]="BMM_BILLSUB"
        files$[6]="bmm-06",ids$[6]="BMX_BILLOPER"
        files$[7]="bmm-10",ids$[7]="BMC_RESEQ"
        files$[8]="bmm-22",ids$[8]="BMM_RESEQMAT"
        files$[9]="bmm-23",ids$[9]="BMM_RESEQOPS"
        files$[10]="bmm-24",ids$[10]="BMM_RESEQLNK"
        files$[11]="bmm-25",ids$[11]="BMM_RESEQSUB"
        files$[12]="bms-01a",ids$[12]="BMS_PARAMS"
        files$[13]="ivm-01",ids$[13]="IVM_ITEMMAST"
        files$[14]="ivm-14",ids$[14]="IVM_ITEMSYN"
        files$[15]="ivs_params",ids$[15]="IVS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        bmm01_dev=channels[1]
        bmm02_dev=channels[2]
        bmm03_dev=channels[3]
        bmm04_dev=channels[4]
        bmm05_dev=channels[5]
        bmm06_dev=channels[6]
        bmm10_dev=channels[7]
        bmm22_dev=channels[8]
        bmm23_dev=channels[9]
        bmm24_dev=channels[10]
        bmm25_dev=channels[11]
        bms01a_dev=channels[12]
        ivm01_dev=channels[13]
        ivm14_dev=channels[14]
        ivs01a_dev=channels[15]

rem --- Dimension string templates

        dim bmm01a$:templates$[1],bmm02a$:templates$[2],bmm03a$:templates$[3],
:       bmm04a$:templates$[4],bmm05a$:templates$[5],bmm06a$:templates$[6],
:       bmm10a$:templates$[7],bmm22a$:templates$[8],bmm23a$:templates$[9],
:       bmm24a$:templates$[10],bmm25a$:templates$[11],bms01a$:templates$[12],
:       ivm01a$:templates$[13],ivm14a$:templates$[14],ivs01a$:templates$[15]



rem --- Retrieve parameter records

        bms01a_key$=firm_id$+"BM00"
        find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$


rem --- Determine interface

        call pgmdir$+"syc_dg.bbx",sysgui_dev,event$,event_len,sysfin$,sysfin,ui$,status
        if status then goto std_exit

rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$
        find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
        goto Label_One
        find record (bms01a_dev,key=firm_id$+"BM00",dom=std_missing_params) bms01a$
        dim p[2],desc[3]
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$)
        p[0]=num(ivs01a.item_nbr_len$)
        p[1]=num(ivs01a.current_per$),p[2]=fnyy_year(ivs01a.current_year$)

Label_One:
        find record (ivs01a_dev,key=firm_id$+"IV"+"00",dom=std_missing_params) ivs01a$
        dim p[2],desc[3],params[3]
        desc[1]=num(ivs01a.desc_len_01$)
        params[1]=desc[1]
        desc[2]=num(ivs01a.desc_len_02$)
        params[2]=desc[2]
        desc[3]=num(ivs01a.desc_len_03$)
        params[3]=desc[3]
        p[0]=num(ivs01a.item_nbr_len$)
        p[1]=num(ivs01a.current_per$),p[2]=fnyy_year(ivs01a.current_year$)
        params[0]=p[0]

rem --- Init Data

        more=1
        l9=59
        l=l9+1
        dim phase$(4)
        dim a[11],b[10],c[11],d[9]
        dim iv_chans[14]
        iv_chans[1]=ivm01_dev
        iv_chans[2]=bmm01_dev,iv_chans[14]=ivm14_dev

rem --- Display Resource



rem --- This loop is created to transfer control to label:flow_control (removing goto statements)
while more
        dim resparams$[20],resparams[20]
        resaction$="O"
        resparams[0]=main_context,resparams$[0]=pgm(-2)
        call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
        rem gosub flow_initializations
        if status then goto std_exit
        rem goto flow_control
        break

rem --- Check for interrupted resequencing

        read (bmm10_dev,key=firm_id$,dom=*next)
        bmm10a_key$=key(bmm10_dev,end=Initial_Phase)

        if pos(firm_id$=bmm10_key$)=1 then

rem ------- let v0$="S",v1$="C",v2$="",v3$="",v4$="Interrupted Resequencing Process Detected. <Enter> To Continue Process. ",v0=1,v1=fnv(v4$),v2=22
rem ------- gosub std_input

            gosub resequence_msg
            read record (bmm10_dev,key=bmm10a_key$) bmm10a$
            goto end_input
           
        endif

Initial_Phase: rem --- Check For Initial Phase

        while more
                read (bmm22_dev,key=firm_id$,dom=*next)
                bmm22a_key$=key(bmm22_dev,end=Label_Two)
                if pos(firm_id$=bmm22a_key$)=1 then
                    gosub resequence_msg
                    break
                endif

Label_Two:
                read (bmm23_dev,key=firm_id$,dom=*next)
                bmm23a_key$=key(bmm23_dev,end=Label_Three)
                if pos(firm_id$=bmm23a_key$)=1 then
                    gosub resequence_msg
                    break
                endif


Label_Three:
                read (bmm25_dev,key=firm_id$,dom=*next)
                bmm25a_key$=key(bmm25_dev,end=*break)
                if pos(firm_id$=bmm25a_key$)<>1 then break
                gosub resequence_msg
                break
        wend

        v=bmm22_dev; call pgmdir$+"adc_clearpartial.aon","",v,firm_id$,status
        v=bmm23_dev; call pgmdir$+"adc_clearpartial.aon","",v,firm_id$,status
        v=bmm24_dev; call pgmdir$+"adc_clearpartial.aon","",v,firm_id$,status
        v=bmm25_dev; call pgmdir$+"adc_clearpartial.aon","",v,firm_id$,status
        rem goto flow_control
        break

billfrom: rem --- Starting Bill
    
        i0=0
        call pgmdir$+"ivc_ia.bbx","BDF",40,4,iv_chans[all],firm_id$,str(bmm10a.bill_no$),"Enter A Valid Starting Bill Number",params[all],item$[all],item[all],v3,i0,i0_done,validate,parent_context,event$
        on v3 goto Label_Four,Label_Four,Label_Five,Label_Four,Label_Five,Label_Four,Label_Five

Label_Four:
        if bmm10a.bill_no$<>"" and item$[0]>bmm10a.bill_no$ then goto billfrom
        r0$=item$[0]

Label_Five:
        rem goto flow_control
        break

billthru: rem --- Ending Bill

        call pgmdir$+"ivc_ia.bbx","BDL",40,5,iv_chans[all],firm_id$,str(bmm10a.bill_no$),"Enter A Valid Ending Bill Number",params[all],item$[all],item[all],v3,i0,i0_done,validate,parent_context,event$
        on v3 goto Label_Six,Label_Six,Label_Seven,Label_Six,Label_Seven,Label_Six,Label_Seven

Label_Six:
        if item$[0]<>"" and r0$>item$[0] then goto billthru
        bmm10a.bill_no$=item$[0]

Label_Seven:
        rem goto flow_control
        break

detail_type: rem --- Detail Type

        v0$="S"
        v1$="C",v2$=r2$,v3$="",v4$="Any Combination: M=Materials, O=Operations, S=Subcontracts, <F1>=All",v0=3,v1=40,v2=6,control_id=3002
        rem gosub std_input
        on v3 goto Label_Nine,Label_Eight,Label_Ten,detail_type,Label_Ten,Label_Nine,Label_Ten

Label_Eight:

        v$="MOS"

Label_Nine:

        if pos(" "<>v$)=0 then goto detail_type
        for x=1 to len(v$)
            if pos(v$(x,1)="MOS ")=0 then exitto detail_type
        next x
        bmm10a.bill_no$=v$
        call pgmdir$+"syc_rs.bbx","",my_context,3002,bmm10a.bill_no$,0,"",ignore_status

Label_Ten:  rem --- print @(v1,v2),r2$,'cl',

        rem goto flow_control
        break

res_factor: rem --- Resequence Factor

        if r3=0 then let r3=5
        v0$="N"
        v1$="CE"
        v2$=str(r3)
        v3$="##0"
        v4$="Enter Number To Resequence By"
        v0=3
        v1=40
        v2=7
        control_id=3003
        rem gosub std_input
        on v3 goto Label_Eleven,res_factor,Label_Twelve,res_factor,Label_Twelve,Label_Eleven,Label_Twelve

Label_Eleven:

        if v<1 then goto res_factor
        r3=v
        call pgmdir$+"syc_rs.bbx","",my_context,3003,str(r3:v3$),0,"",ignore_status

Label_Twelve: rem --- print @(v1,v2),r3,'cl',

        rem goto flow_control
        break

wend


flow_control: rem --- Flow Control

        switch v3
            case 0
            case 1
            case 3; let i0=i0+1; break
            case 2
            if i0<i0_nonkey1 then
                let i0=max(0,i0-1)
            else
                let i0=max(i0_nonkey1,i0-1)
            endif
            break
            case 4; exitto start_done
            case default; exitto done_v3
        swend

start_done:
        i0=i0_done

next_field:
        on i0 goto billfrom,billthru,detail_type,res_factor,done

done: rem --- Correct?

        if !validate then 
                v0$="S"
                v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=0,v2=22,control_id=i0-i0_done+1
                rem gosub std_input

done_v3:
                on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done

done_test:
                on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
     


validate_input:
                validate=1
                old_control_id=0

do_nonkey1:
                v3=0
                i0=i0_nonkey1
                goto next_field

cancel:
                goto std_exit
        else
end_input:      rem --- Printing
                validate=0
                run pgmdir$+"bmu_cb.bbx"
        endif

resequence_msg: rem --- Item Not In Warehouse

        dim message$[1]
        message$[0]="Interrupted Resequencing Process Detected"
        message$[1]="          Press <Enter> To Continue"
        call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
        return

rem --- Warn about restart

        let v0$="S",v1$="CE",v2$="",v3$="",v4$="Interrupted Resequencing Process Detected. <Enter> To Reselect Options. ",v0=1,v1=fnv(v4$),v2=22
        rem gosub std_input
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem --- #endinclude std_end.src

        end
