rem --- Phantom Blow-through for Inventory Production Register
rem --- Program bmc_fa v8.0.0 16Jan2008 (bmc_fa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/16/2008 09:41:11)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error
        enter channel[all],info$[all],info[all],headings$[all],parent$


rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=17,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="arc_distcode",ids$[1]="ARC_DISTCODE"
        files$[2]="bmm-01",ids$[2]="BMM_BILLMAST"
        files$[3]="bmm-02",ids$[3]="BMM_BILLMAT"
        files$[4]="bmm-03",ids$[4]="BMM_BILLOPER"
        files$[5]="bmm-05",ids$[5]="BMM_BILLSUB"
        files$[6]="bmm-08",ids$[6]="BMC_OPCODES"
        files$[7]="bms-01a",ids$[7]="BMS_PARAMS"
        files$[8]="glm-01",ids$[8]="GLM_ACCT"
        files$[9]="gls_params",ids$[9]="GLS_PARAMS"
        files$[10]="glt-14",ids$[10]="GLX_DAILYXRF"
        files$[11]="glw-11",ids$[11]="GLW_DAILYDETAIL"
        files$[12]="ivm-01",ids$[12]="IVM_ITEMMAST"
        files$[13]="ivm-02",ids$[13]="IVM_ITEMWHSE"
        files$[14]="ivm-04",ids$[14]="IVM_ITEMTIER"
        files$[15]="ivs_params",ids$[15]="IVS_PARAMS"
        files$[16]="ivw-04",ids$[16]="IVW_LFDET"
        files$[17]="ivw-05",ids$[17]="IVW_LFCOST"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        arm10_dev=channels[1]
        bmm01_dev=channels[2]
        bmm02_dev=channels[3]
        bmm03_dev=channels[4]
        bmm05_dev=channels[5]
        bmm08_dev=channels[6]
        bms01a_dev=channels[7]
        glm01_dev=channels[8]
        gls01a_dev=channels[9]
        glt14_dev=channels[10]
        glw11_dev=channels[11]
        ivm01_dev=channels[12]
        ivm02_dev=channels[13]
        ivm04_dev=channels[14]
        ivs01a_dev=channels[15]
        ivw04_dev=channels[16]
        ivw05_dev=channels[17]

rem --- Dimension string templates

        dim arm10a$:templates$[1],bmm01a$:templates$[2],bmm02a$:templates$[3],
:       bmm03a$:templates$[4],bmm05a$:templates$[5],bmm08a$:templates$[6],
:       bms01a$:templates$[7],glm01a$:templates$[8],gls01a$:templates$[9],
:       glt14a$:templates$[10],glw11a$:templates$[11],ivm01a$:templates$[12],
:       ivm02a$:templates$[13],ivm04a$:templates$[14],ivs01a$:templates$[15],
:       ivw04a$:templates$[16],ivw05a$:templates$[17]


rem --- Retrieve parameter records

        bms01a_key$=firm_id$+"BM00"
        find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open/Lock Files
rem --- Assign Channel Info

        item$=info$[0]
        ref1$=info$[1],ref2$=info$[2],ap$=info$[3],ar_dist$=info$[4]
        whse$=info$[6]
        pdate$=info$[7],update$=info$[8],gl$=info$[9]
        t1$=info$[10]
        ivacct$=info$[11]; rem "O2$=INFO$[5]
        quant=info[0]
        headings=info[3],level=info[9],h=info[10]
        glstatus=info[12]
        yield=info[13],value=info[14]

rem --- L=INFO(1), L9=INFO(2), SHORT=INFO(4), O1=INFO(5),  U0=INFO(7)
rem --- U1=INFO(8), STATUS=INFO(11)
rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$
        find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params)ivs01a$
        find record (bms01a_dev,key=firm_id$+"BM00",dom=std_missing_params) bms01a$
        find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
        dim p[4],g[4],desc[3]
        g[0]=num(gls01a.total_pers$)
        g[1]=num(gls01a.current_per$)
        g[2]=num(gls01a.current_year$)
        g[3]=num(gls01a.acct_length$)
        g[4]=num(gls01a.max_acct_len$)
   
        g[2]=fnyy_year(gls01a.current_year$)
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$) 
        p[0]=num(ivs01a.item_id_len$)
        p[1]=num(ivs01a.vendor_prd_len$),p[2]=num(p2$(5,2)),p[3]=num(ivs01a.ls_no_len$)

rem --- Init Data
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLSUB","PRIMARY",bmm05a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03a_key_tpl$,rd_table_chans$[all],status$
        dim bmm02a_key$:bmm02a_key_tpl$
        dim bmm05a_key$:bmm05a_key_tpl$
        dim bmm03a_key$:bmm03a_key_tpl$
        precision num(ivs01a.precision$)
        h0=132
        o1$=""
        when$=sysinfo.system_date$
        clock$=""
        dim dashes$(132,"-")
        errors=0
        call pgmdir$+"adc_sizemask.aon",ivs01a.amount_mask$,m1,6,15
        call pgmdir$+"adc_sizemask.aon",ivs01a.unit_mask$,m2,10,15
        call pgmdir$+"adc_sizemask.aon",ivs01a.cost_mask$,m3,5,10
        m0=p[0]
        units=0
        if m0<6 then let m0=6

rem --- Options

        u0$=bms01a.gl_wip_acct$

rem --- Heading Read

        ref3$="Prod Entry"

rem --- Get Cost Info

        i0$=item$
        gosub item_sub
        if  ivs01a.cost_method$<>"S" then 
         
    while more
            km02$=key(bmm02_dev,end= reading_file); rem "Save ptr
            break
            reading_file:
            read (bmm02_dev,key="",dom=*next); rem "On EOF reset ptr to beg of file
    wend
            call pgmdir$+"bmc_ea.bbx",item$,chann[all],1,pdate$,firm_id$,ap$,"Y",1,mat_cost,lab_cost,oh_cost,sub_cost,1,1,"Y",whse$,ea_status
            read (bmm02_dev,key=km02$); rem "Replace ptr

       endif

rem --- Additional Reads

        
        read record (bmm01_dev,key=firm_id$+item$,dom=*next) bmm01a$
        if yield=0 then let yield=100

rem --- Print Phantom

        if info[1]+6>info[2] then gosub report_heading
        print (printer_dev)@(9),dashes$(1,123),'lf',@(9),"Phantom Bill"
        u0$=ivm01a.gl_inv_acct$
        if level=1 then print (printer_dev)@(9),"*",
        print (printer_dev)@(11),item$
        print (printer_dev)@(11),ivm01a.item_desc$(1,30),@(34+m3),quant:m2$
        info[1]=info[1]+4

rem --- Component Items

        
        d0$=b0$
        if update$="Y" then gosub dist_code_sub
        read (bmm02_dev,key=b0$,dom=*next)
    while more
        bmm02a_key$=key(bmm02_dev,end=*break)
        if bmm02a_key.firm_id$<>firm_id$ then break
        if bmm02a_key.bill_no$<>ivm01a.item_id$ then break
        read record (bmm02_dev) bmm02a$
        if bmm02a.line_type$="M" then continue
        if bmm02a.effect_date$<>"   " then if pdate$<bmm02a.effect_date$ then continue
        if bmm02a.obsolt_date$<>"   " then if pdate$>=bmm02a.obsolt_date$ then continue
        find record (bmm01_dev,key=firm_id$+bmm02a.item_id$,dom=finding_record) bmm01a$
        if bmm01a.phantom_bill$="Y" then 
                gosub explode_sub
                read (bmm02_dev,key=bmm02a_key$)
                continue
        endif

finding_record:

        o1$=""
        i0$=bmm02a.item_id$
        gosub item_sub
        u1$=ivm01a.gl_inv_acct$
        find record (ivm02_dev,key=firm_id$+whse$+bmm02a.item_id$,dom=missing_record) ivm02a$
        goto distribution_sub

missing_record:

        o1$="** Missing Warehouse Record **"
        info[5]=1
        goto print_components
        distribution_sub:
        gosub distribution

print_components: rem --- Print Components

        if info[1]+2>info[2] then gosub report_heading
        i0$=bmm02a.item_id$; gosub item_sub
        print (printer_dev)@(14),bmm02a.item_id$," ",o1$
        if bmm02a.divisor=0 then let bmm02a.divisor=1
        print (printer_dev)@(14),ivm01a.item_desc$(1,30),@(132-4*m2),ivm02a.qty_on_hand-ivm02a.qty_commit:m2$,fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor)*quant:m2$,
        if ivm02a.qty_on_hand-ivm02a.qty_commit<fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor)*quant then print (printer_dev)@(132-2*m2),abs(ivm02a.qty_on_hand-ivm02a.qty_commit-fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor)*quant):m2$,; let info[4]=info[4]+1
        print (printer_dev)@(132-m2),ivm02a.qty_on_order:m2$
        info[1]=info[1]+2
    wend
        gosub operation_sub
        if ap$="Y" then gosub Subcontracts
        goto done

dist_code_sub: rem --- Dist Code

        if ar_dist$<>"N" then 
            read record (ivm02_dev,key=firm_id$+whse$+item$,dom=return_back) ivm02a$
            find record (arm10_dev,key=firm_id$+"D"+ivm02a.dist_code$,dom=*next) arm10d$
            u0$=arm10d.gl_inv_acct$
        endif

return_back:
        return

distribution: rem --- Distribution

        if ar_dist$<>"N" then 
            find record (arm10_dev,key=firm_id$+"D"+ivm02a.dist_code$,dom=*next) arm10d$
            u1$=arm10d.gl_inv_acct$
        endif

    rem --- Update G/L

        if update$="N" then let u0$=bms01a.gl_wip_acct$ else let u0$=ivacct$
        gldate$=pdate$
        account$=u0$,amount=unitcost*fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor)*quant,memo$="Item "+cvs(parent$,2)
        precision 2
        amount=amount*1
        value=value+amount
        gosub glrecap
        gldate$=pdate$
        account$=u1$,amount=(-1)*amount,memo$="Item "+i0$
        gosub glrecap
        precision num(ivs01a.precision$)
        return

done: rem --- Totals

        goto std_exit

report_heading: rem --- Report Heading

        info[1]=headings
        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
        if status then let info[11]=status; exitto std_exit
        if t9$<>"E" then gosub date_heading
        print (printer_dev)@(0),"Ref #",@(8),"Main Bill Number",@(34+m3-5),"Cost",@(34+m3+m2-4),"Qty",@(34+m3+m2+m1-6),"Total",
        print (printer_dev)@(132-3*m2-10),"Available",@(132-2*m2-9),"Required",@(132-m2-9),"Shortage",@(132-9),"On-Order",'lf'
        print (printer_dev)@(0),ref2$,
        info[1]=info[1]+2
        return

date_heading: rem --- Date Heading

        print (printer_dev)@(0),"Production Date: ",fndate$(t1$)
        if glstatus then call pgmdir$+"glc_datewarn.aon",printer_dev,t1$,glstatus,l,errors,status
        print (printer_dev)""
        info[1]=info[1]+2
        return

Subcontracts: rem --- Subcontracts

        
        read (bmm05_dev,key=firm_id$+item$,dom=*next)
    while more
        bmm05a_key$=key(bmm05_dev,end=*break)
        if bmm05a_key.firm_id$+bmm05a_key.bill_no$<>firm_id$+item$ then break
        read record (bmm05_dev) bmm05a$
        if bmm05a.effect_date$<>"   " then if pdate$<bmm05a.effect_date$ then continue
        if bmm05a.obsolt_date$<>"   " then if pdate$>=bmm05a.obsolt_date$ then continue
        if bmm05a.line_type$<>"S" then continue
        if update$="N" then let u0$=bms01a.gl_wip_acct$ else let u0$=ivacct$
        if bmm05a.divisor=0 then let bmm05a.divisor=1
        a0=quant*bmm05a.unit_cost*fnsub(bmm05a.qty_required,bmm05a.alt_factor,bmm05a.divisor)
        gldate$=pdate$
        account$=u0$,amount=a0,value=value+amount,memo$="Item "+cvs(parent$,2)+" "+bmm05a.ext_comments$
        gosub glrecap
        account$=bms01a.gl_pur_acct$
        amount=-a0
        gosub glrecap
    wend
        return

item_sub: rem --- Item

        dim ivm02a1$:tmpl(ivm02_dev)
        unitcost=0
        read record (ivm01_dev,key=firm_id$+i0$,dom=*next) ivm01a$
        ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        ivm01a.item_desc$=ivm01a.item_desc$+fill(62-len(ivm01a.item_desc$))
        read record (ivm02_dev,key=firm_id$+whse$+i0$,dom=*next) ivm02a1$
        return

operation_sub: rem --- Operation

        dim l[11]
        read record (bmm01_dev,key=firm_id$+item$,dom=*next) bmm01a$
        read (bmm03_dev,key=firm_id$+item$,dom=*next)

    while more
        bmm03a_key$=key(bmm03_dev,end=*break)
        if bmm03a_key.firm_id$+bmm03a_key.bill_no$<>firm_id$+item$ then break
        read record (bmm03_dev) bmm03a$
        if bmm03a.effect_date$<>"   " then if pdate$<bmm03a.effect_date$ then continue
        if bmm03a.obsolt_date$<>"   " then if pdate$>=bmm03a.obsolt_date$ then continue
        if bmm03a.line_type$="M" then continue
        find record (bmm08_dev,key=bmm03a_key.firm_id$+bmm03a.op_code$,dom=message) bmm08a$
        goto assignment

        message:
        info$[5]=info$[5]+"** Missing Operation Code In Bill Number "+bmm03a_key.bill_no$+" Sequence "+bmm03a_key.op_seq$+" **"+'lf';continue

        assignment:
        if bmm01a.std_lot_size=0 then let bmm01a.std_lot_size=1
        if quant<>0 then let a0=fnop2(quant,bmm03a.hrs_per_pce,bmm08a.direct_rate,bmm03a.pcs_per_hour,yield,bmm03a.setup_time) else let a0=0
        a1=a0*bmm08a.ovhd_factor

    rem --- Direct Labor

        precision 2
        a0=a0*1
        a1=a1*1
        gldate$=pdate$
        account$=bmm08a.gl_dir_lab$,amount=-a0,memo$="Item "+cvs(parent$,2)+" "+bmm08a.code_desc$
        gosub glrecap
        if update$="N" then let u0$=bms01a.gl_wip_acct$ else let u0$=ivacct$
        gldate$=pdate$
        account$=u0$,amount=a0,value=value+amount
        gosub glrecap

    rem --- Overhead

        gldate$=pdate$
        account$=bmm08a.gl_ovh_var$,amount=-a1
        gosub glrecap
        if update$="N" then let u0$=bms01a.gl_wip_acct$ else let u0$=ivacct$
        gldate$=pdate$
        account$=u0$,amount=a1,value=value+amount
        gosub glrecap
        precision num(ivs01a.precision$)
    wend
        return

explode_sub: rem --- Explode Phantoms

        info$[0]=bmm02a.item_id$
        info[0]=quant*bmm02a.qty_required,info[9]=level+1,info[10]=h,info[13]=yield*bmm01a.std_yield/100
        call pgmdir$+"bmc_fa.bbx",channel[all],info$[all],info[all],headings$[all],parent$
        if info[11]>0 then exitto std_exit
        info[9]=level
        h=info[10],info[13]=yield
        return

glrecap: rem --- Standard G/L Recap Routine

        if gl$="Y" then 
            call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
        endif
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
