rem --- Order/Production Register
rem --- Program bmr_ja v8.0.0 21Jan2008 (bmr_ja)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/21/2008 09:38:54)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


	seterr std_error
	setesc std_error

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- see if batching

	call stbl("+DIR_PGM")+"adc_getbatch.aon","",pgm(-2),rd_table_chans$[all]
    batch_no$=stbl("+BATCH_NO")
    process_id$=stbl("+PROCESS_ID")

rem --- set rd_alias_id$
    
    rd_alias_id$=pgm(-2)
    rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
    rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
	rd_alias_id$=rd_alias_id$(1,min(len(rd_alias_id$),16))

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

	num_files=10
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="ARM_CUSTMAST",open_opts$[1]="OTA"
	open_tables$[2]="ARS_PARAMS",open_opts$[2]="OTA"
	open_tables$[3]="BME_PRODUCT",open_opts$[3]="OTA"
	open_tables$[4]="BME_ORDER",open_opts$[4]="OTA"
	open_tables$[5]="BMM_BILLMAST",open_opts$[5]="OTA"
	open_tables$[6]="BMS_PARAMS",open_opts$[6]="OTA"
	open_tables$[7]="IVM_ITEMWHSE",open_opts$[7]="OTA"
	open_tables$[8]="IVS_PARAMS",open_opts$[8]="OTA"
	open_tables$[9]="OPE_ORDHDR",open_opts$[9]="OTA"
	open_tables$[10]="OPE_ORDDET",open_opts$[10]="OTA"
    
	gosub open_tables

	arm01_dev=num(open_chans$[1])
	bme01_dev=num(open_chans$[3])
	bme02_dev=num(open_chans$[4])
	bmm01_dev=num(open_chans$[5])
	bms01a_dev=num(open_chans$[6])
	ivm02_dev=num(open_chans$[7])
	ivs01a_dev=num(open_chans$[8])
	ope01_dev=num(open_chans$[9])
	ope11_dev=num(open_chans$[10])

rem --- Dimension string templates

    dim arm01a$:open_tpls$[1],bme01a$:open_tpls$[3]
	dim bme02a$:open_tpls$[4],bmm01a$:open_tpls$[5],bms01a$:open_tpls$[6]
	dim ivm02a$:open_tpls$[7],ivs01a$:open_tpls$[8],ope01a$:open_tpls$[9]
	dim ope11a$:open_tpls$[10]

rem --- Is General Ledger installed and being used?
 
	application$="BM"
	gl$="N"
	status=0
	source$=pgm(-2)
	call pgmdir$+"glc_ctlcreate.aon",err=*next,
:				source$,application$,glw11$,gl$,status
	if status 
		goto std_exit
	endif

rem --- Additional file opens

	num_files=3
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="GLM_ACCT",open_opts$[1]="OTA"
	open_tables$[2]="GLE_DAILYDETAIL",open_opts$[2]="OTA"
	open_tables$[3]="GLW_DAILYDETAIL",open_opts$[3]="OTA"

	if gl$="Y" gosub open_tables
	if status goto std_exit

	glm01_dev=num(open_chans$[1])
	glt04_dev=num(open_chans$[2])
	glw11_dev=num(open_chans$[3])

	rem --- Clear trans for this firm/process/batch from glw-11 work file (if not batching, batch_no$ is zero, and will clear all recs this firm/process)
 
	if gl$="Y"
		rec_pfx$=firm_id$+process_id$+batch_no$
		call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
	endif

rem --- Retrieve parameter records

	bms01a_key$=firm_id$+"BM00"
	find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
	ivs01a_key$=firm_id$+"IV00"
	find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

	dim r[4]
	find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
	call pgmdir$+"adc_application.aon","OP",info$[all]
	op$=info$[20]

    if op$="Y" then
		call pgmdir$+"adc_getmask.aon","","AR","I",imask$,custmask$,0,custlen
        call pgmdir$+"adc_application.aon","BM",info$[all]
        gl$=info$[9]

rem --- Init Data

        call stbl("+DIR_SYP")+"bac_key_template.bbj","BME_ORDER","PRIMARY",bme02a_key_tpl$,rd_table_chans$[all],status$
        dim bme02a_key$:bme02a_key_tpl$
        more=1
        precision num(ivs01a.precision$)
		headings=1
        dim headings$[headings]
        errors=0,glstatus=0
        when$=sysinfo.system_date$
        headings$[0]=sysinfo.firm_name$
		headings$[1]=sysinfo.task_desc$

		if num(batch_no$)<>0 then headings$[1]=headings$[1]+ " (Batch: "+batch_no$+")"		

rem --- Run Report?

        msg_id$="AON_RUN_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message
        if msg_opt$<>"Y" then goto std_exit

        call pgmdir$+"adc_progress.aon","N","","","","",0,bme02_dev,1,meter_num,status

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem ---  column heading
		columns=5
        dim columns$[columns,10]

		columns$[0,0]=Translate!.getTranslation("AON_PROD_DATE"),      columns$[0,1]="C",columns$[0,2]="8"
		columns$[1,0]=Translate!.getTranslation("AON_CUSTOMER_NUMBER"),columns$[1,1]="C",columns$[1,2]="10"
		columns$[2,0]=Translate!.getTranslation("AON_CUSTOMER_NAME"),  columns$[2,1]="C",columns$[2,2]="20"
		columns$[3,0]=Translate!.getTranslation("AON_ORDER_NUMBER"),   columns$[3,1]="C",columns$[3,2]="10"
		columns$[4,0]=Translate!.getTranslation("AON_REFERENCE"),      columns$[4,1]="C",columns$[4,2]="10"
		columns$[5,0]=Translate!.getTranslation("AON_UPDATE_FLAG"),    columns$[5,1]="C",columns$[5,2]="10"

		call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Initial Read

		read (bme02_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)
        
rem --- Heading Read
        while more
            bme02a_key$=key(bme02_dev,end=done)
            read record (bme02_dev,end=*break) bme02a$
rem --- Breaks
            if pos(firm_id$=bme02a_key$)<>1 then break
			if bme02a.batch_no$<>batch_no$ then break
            if bme02a.prod_date$<>t0$ then gosub date_break else OutVect!.addItem("")
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Get Customer Name

            x0$=Translate!.getTranslation("AON_***NOT_ON_FILE***")
            find record (arm01_dev,key=firm_id$+bme02a.customer_id$,dom=print_heading) arm01a$
            x0$=arm01a.customer_name$

print_heading:rem --- Print

            OutVect!.addItem(fnmask$(bme02a.customer_id$(1,custlen),custmask$))
            OutVect!.addItem(x0$)
            OutVect!.addItem(bme02a.order_no$)
            OutVect!.addItem(bme02a.bm_reference$)
			OutVect!.addItem(bme02a.update_flag$)
            t0=t0+1

rem --- Verify Date

            if gl$<>"Y" then continue
            when$=bme02a.prod_date$
            if gl$="Y" then call pgmdir$+"glc_datecheck.aon",when$,"N","","",glstatus
            if glstatus then call pgmdir$+"glc_datewarn.aon",printer_dev,when$,glstatus,l,errors,status

            if stbl("+DTWARN_MSG",err=*endif)<>""
                OutVect!.addItem(stbl("+DTWARN_MSG"))
                xwk=fnblank(5)
            endif
        wend

done: rem --- End

        if t0=0
            msg_id$="DOC_OUTPUT_NODATA"
            gosub disp_message
            goto std_exit_no_report
        endif

		xwk=fnblank(7)
		OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_ORDERS:_")+str(t0))
		xwk=fnblank(2)

		call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
		update$=pgmdir$+"bmu_ordproduction.aon"
		if errors
		    gosub Display_Message
		    if special_flag$<>"Y" then update$=""
	    endif

		overlay$=update$
		next_overlay$=overlay$
		if update$=""
		    goto std_exit_no_update
	    else
	        goto std_exit
        endif
		
	endif
 
rem --- OP Not Installed

	dim message$[1]
	message$[0]=Translate!.getTranslation("AON_ORDER_PROCESSING_IS_REQUIRED_IN_ORDER_TO_USE_THIS_TASK")
	message$[1]=Translate!.getTranslation("AON___________PRESS_<ENTER>_TO_CONTINUE")
	call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
	goto std_exit_no_report

date_heading: rem --- Date Heading

	xwk=fnblank(6)
	OutVect!.addItem(fndate$(bme02a.prod_date$))
	
	return

date_break: rem --- Date Break

	gosub date_heading
	t0$=bme02a.prod_date$
	
	return

Display_Message: rem --- Display Message Routine

    msg_id$="AON_REG_ERRS"
    gosub disp_message
    if pos("PASSVALID"=msg_opt$)<>0 special_flag$="Y"
    return

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
       msg_id$="ENTRY_OPEN_ERROR"
       dim msg_tokens$[1]
       msg_tokens$[1]=open_status$
       gosub disp_message
       rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
       release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

        def fndate$(q$)
            q1$=""
            q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
            if q1$="" q1$=q$
            return q1$
        fnend

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:

        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:

        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit_no_report:

    OutVect!=null();rem nothing to print, or some other err such that no report

std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif

std_exit: rem --- Standard program end (01Mar2006)
	
	call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
	run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
	release
rem --- #endinclude std_end.src
	
	end
