rem --- Enter Effective and Obsolete Dates
rem --- Program bmc_ba v8.0.0 10Jan2008 (bmc_ba)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/10/2008 02:12:12)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        seterr std_error
        setesc std_error
        enter effdate$,obsdate$


rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=2,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="bms-01a",ids$[1]="BMS_PARAMS"
        files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        bms01a_dev=channels[1]
        ivs01a_dev=channels[2]

rem --- Dimension string templates

        dim bms01a$:templates$[1],ivs01a$:templates$[2]

rem --- Retrieve parameter records

        bms01a_key$=firm_id$+"BM00"
        find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Determine Interface

        call pgmdir$+"syc_dg.bbx",sysgui_dev,sysgui$,sysgui,sysfin$,sysfin,ui$,status
        if status then goto std_exit

rem --- Initializations

        width=38
        height=8,win_x=28,win_y=13,heading$="Additional Options"
        effective$=effdate$
        obsolete$=obsdate$

rem --- Display Resource

        dim resparams$[20],resparams[20]
        resparams$[0]=pgm(-2)
        resparams$[1]=pgm(-2)
        resparams$[6]=heading$
        if ui$<>"W" then call pgmdir$+"syc_wa.bbx",0,width,height,win_x,win_y,resparams$[6],char_win$
        call pgmdir$+"syc_ra.bbx","P",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
        if status then goto std_exit
        gosub display_fields

Effect_Date: rem --- Effective Date

        v0$="D"
        v1$="C",v2$=effdate$,v3$="",v4$="",v0=3,v1=18,v2=0,control_id=3000
        on v3 goto Label_One,Effect_Date,Effect_Date,Effect_Date,flow_control,Label_One,flow_control


While more
Label_One:
                v$=v$+fill(3)
                v$=v$(1,3)
                if fnp$(v$)<>"" then
                    call pgmdir$+"syc_rs.bbx","",my_context,3000,fndate$(v$),0,"",status
                endif
                effdate$=v$
                break

Obsolt_Date: rem --- Obsolete Date

                v0$="D"
                v1$="C",v2$=obsdate$,v3$=""
                v4$="<F1> To Clear Date"
                v0=3,v1=18,v2=1,control_id=3001
                on v3 goto Label_Three,Label_Two,Effect_Date,Obsolt_Date,Fl_Control,Label_Three,Fl_Control

Label_Two:
                v$=""

Label_Three:
                v$=v$+fill(3)
                v$=v$(1,3)
                if fnp$(v$)<>"" then
                    if v$<=effdate$ then
                        goto Obsolt_Date
                    endif
                endif
                obsdate$=v$

Fl_Control:
                break
Wend


flow_control: rem --- Flow Control

        on v3 goto incr_i0,incr_i0,decr_i0,incr_i0,start_done,done_v3

decr_i0:
        if i0<i0_nonkey1 then
            let i0=max(0,i0-1)
        else
            let i0=max(i0_nonkey1,i0-1)
        endif
        goto next_field

incr_i0:
        i0=i0+1

next_field:
        on i0 goto Effect_Date,Obsolt_Date,done

start_done: 
        let i0=i0_italic

done: rem --- Is The Above Information Correct?

        if validate then
            let validate=0
            goto std_exit
        endif
        v0$="S"
        v1$="CER",v2$="Y",v3$="",v4$="Is The Above Information Correct (Y/N)?",v0=1,v1=fnv(v4$,w),v2=22,control_id=i0-i0_done+1
        rem gosub std_input

done_v3:
        on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done

done_test:
        rem on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
        Switch pos(v$="YN")
            case 0
            case 1; exitto flow_control
            case 2; validate=1; old_control_id=0; break
            case 3; i0=i0_nonkey1; v3=0; exitto next_field
        Swend

validate_input:
        validate=1
        old_control_id=0

cancel:
        v3=4; goto std_exit


end_input: rem --- User Input Completed

        goto std_exit

display_fields: rem --- Display fields

        if fnp$(effdate$)<>"" then call pgmdir$+"syc_rs.bbx","",my_context,3000,fndate$(effdate$),0,"",status
        if fnp$(obsdate$)<>"" then call pgmdir$+"syc_rs.bbx","",my_context,3001,fndate$(obsdate$),0,"",status
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fndate$(q$)
            q1$=""
            q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
            if q1$="" q1$=q$
            return q1$
        fnend

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem #endinclude std_functions.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

std_error:
        exit

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

        exit
rem #endinclude std_exit.src

        end
