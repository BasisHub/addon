rem --- Order/Production Update
rem --- Program bmu_ja v8.0.0 07Jan2008 (bmu_ja)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/07/2008 04:07:03)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Init Data

	precision num(ivs01a.precision$)

rem --- Options

	msg_id$="AON_UPDT_QUERY"
	dim x$:stbl("+SYSINFO_TPL")
	dim msg_tokens$[1]
	x$=stbl("+SYSINFO")                                                            
	msg_tokens$[1]=x.task_desc$
	gosub disp_message
	if msg_opt$<>"Y" then goto std_exit_no_update
	
rem --- Get Batch information for bme-01

	proc_id$=stbl("+PROCESS_ID")
	ord_batch$=stbl("+BATCH_NO")
	x$=stbl("+BATCH_NO",fill(len(ord_batch$),"0"))
	call stbl("+DIR_PGM")+"adc_getbatch.aon","BME_PRODUCT","",table_chans$[all]
	inv_batch$=stbl("+BATCH_NO")
	x$=stbl("+BATCH_NO",ord_batch$)
	x$=stbl("+PROCESS_ID",proc_id$)

	call pgmdir$+"adc_progress.aon","N","","","","",0,bme02_dev,1,meter_num,status
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BME_ORDER","PRIMARY",bme02a_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDDET","PRIMARY",ope11a_key_tpl$,rd_table_chans$[all],status$
	dim bme02a_key$:bme02a_key_tpl$
	dim ope11a_key$:ope11a_key_tpl$

 rem --- Main Read

    read (bme02_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)
	while more
        bme02a_key$=key(bme02_dev,end=*break)
        if pos(firm_id$=bme02a_key$)<>1 then break
        extract record (bme02_dev) bme02a$; rem --- Advisory locking
		if bme02a.batch_no$<>batch_no$ then break
        call pgmdir$+"adc_progress.aon","S","","","",fndate$(bme02a.prod_date$)+" "+bme02a.customer_id$,0,0,1,meter_num,status

rem --- Get Heading

        dim ope01a$:fattr(ope01a$)
        read record (ope01_dev,key=firm_id$+"  "+bme02a.customer_id$+bme02a.order_no$+ope01a.ar_inv_no$,dom=remove_datail) ope01a$
        if ope01a.ordinv_flag$="O" and ope01a.trans_status$="E" then 

rem --- Init Detail

            read (ope11_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$+ope01a.ar_inv_no$,dom=*next)
rem --- Read Detail
            while more

                ope11a_key$=key(ope11_dev,end=*break)
                if pos(ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$=ope11a_key$)<>1 then break
                read record (ope11_dev,key=ope11a_key$) ope11a$
                if pos(" "<>ope11a.item_id$)=0 or ope11a.trans_status$="E" then continue
                bme01a_key$=firm_id$+ope11a.warehouse_id$+bme02a.prod_date$+bme02a.bm_reference$+ope11a.item_id$
                bme01a.firm_id$=firm_id$
                bme01a.warehouse_id$=ope11a.warehouse_id$
                bme01a.prod_date$=bme02a.prod_date$
                bme01a.bm_reference$=bme02a.bm_reference$
                bme01a.item_id$=ope11a.item_id$
                bme01a.update_flag$=bme02a.update_flag$
                x0=ope11a.qty_ordered
                x1=ope11a.unit_cost*ope11a.qty_ordered
                find (bmm01_dev,key=firm_id$+ope11a.item_id$,dom=*continue)
                find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=*continue) ivm02a$
                x1=ope11a.qty_ordered*ivm02a_unitcost

rem --- Update

                extract record (bme01_dev,key=bme01a_key$,dom=*next) bme01a$
                bme01a.qty_ordered=bme01a.qty_ordered+x0
                bme01a.total_cost=bme01a.total_cost+x1
				bme01a.batch_no$=inv_batch$
                bme01a$=field(bme01a$)
                write record (bme01_dev) bme01a$
            wend
        endif

remove_datail: rem --- Remove Detail

        remove (bme02_dev,key=firm_id$+bme02a.prod_date$+bme02a.customer_id$+bme02a.order_no$,dom=*continue)
    wend

done: rem --- End

	if gl$="Y"
		call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,status
		call pgmdir$+"glc_ctlupdate.aon",status
		call pgmdir$+"glc_ctldelete.aon",status
	endif
	call pgmdir$+"adc_batchdelete.aon",err=*next,status

	call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
	call pgmdir$+"adc_batchdelete.aon",ignore_status
	goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message
	
std_exit_no_update:

	if num(batch_no$)<>0
		unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
		lock_status$=""
		call stbl("+DIR_SYP")+"bac_lock_record.bbj",
:			"ADM_PROCBATCHES",unlock_key$,"U","",rd_table_chan,
:			rd_table_chans$[all],lock_status$
	endif
	
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
