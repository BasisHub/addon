rem --- Bill Hard Copy
rem --- Program bmc_printbill v8.0.0 10Jan2008 (bmc_aa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/10/2008 09:55:29)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error
        enter o9,printer_dev,bill_no$,page,comment$,sub$,warehouse$,select$,pdate$,rd_table_chans$[all],OutVect!,status,TotVect!,columns

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)


rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=12,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="apm-01",ids$[1]="APM_VENDMAST"
        files$[2]="aps_params",ids$[2]="APS_PARAMS"
        files$[3]="bmm-01",ids$[3]="BMM_BILLMAST"
        files$[4]="bmm-02",ids$[4]="BMM_BILLMAT"
        files$[5]="bmm-03",ids$[5]="BMM_BILLOPER"
        files$[6]="bmm-05",ids$[6]="BMM_BILLSUB"
        files$[7]="bmm-08",ids$[7]="BMC_OPCODES"
        files$[8]="bmm-09",ids$[8]="BMM_BILLCMTS"
        files$[9]="bms_params",ids$[9]="BMS_PARAMS"
        files$[10]="ivm-01",ids$[10]="IVM_ITEMMAST"
        files$[11]="ivm-02",ids$[11]="IVM_ITEMWHSE"
        files$[12]="ivs_params",ids$[12]="IVS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        apm01_dev=channels[1]
        aps01a_dev=channels[2]
        bmm01_dev=channels[3]
        bmm02_dev=channels[4]
        bmm03_dev=channels[5]
        bmm05_dev=channels[6]
        bmm08_dev=channels[7]
        bmm09_dev=channels[8]
        bms01a_dev=channels[9]
        ivm01_dev=channels[10]
        ivm02_dev=channels[11]
        ivs01a_dev=channels[12]

rem --- Dimension string templates

    dim apm01a$:templates$[1],aps01a$:templates$[2],bmm01a$:templates$[3],
:       bmm02a$:templates$[4],bmm03a$:templates$[5],bmm05a$:templates$[6],
:       bmm08a$:templates$[7],bmm09a$:templates$[8],bms01a$:templates$[9],
:       ivm01a$:templates$[10],ivm02a$:templates$[11],ivs01a$:templates$[12]


rem --- Retrieve parameter records

        find record (bms01a_dev,key=firm_id$+"BM"+"00",dom=std_missing_params) bms01a$
        find record (ivs01a_dev,key=firm_id$+"IV"+"00",dom=std_missing_params) ivs01a$
        find record (aps01a_dev,key=firm_id$+"AP"+"00",dom=label_one) aps01a$
        vlen=num(aps01a.firm_id$)

label_one:

        dim p[2],desc[3]
        p[0]=num(ivs01a.item_id_len$)
        if num(ivs01a.precision$)>bms01a.bm_precision then  bms01a.bm_precision=num(ivs01a.precision$)

rem --- Initialize Data

        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLCMTS","PRIMARY",bmm09a_key_tpl$,rd_table_chans$[all],status$
        dim bmm02a_key$:bmm02a_key_tpl$
        dim bmm09a_key$:bmm09a_key_tpl$
        more=1
        if warehouse$="" then warehouse$=ivs01a.warehouse_id$
        t0=0
        dim j$(80,"-")
        dim z$(80," ")
        precision bms01a.bm_precision
        p9=len(ivs01a.PRICE_MASK$)
        m6$="###.00"
        p4$="###0"
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$) 
        pbufwidth=85

rem --- Additional File Opens

        dim info$[20]
        call pgmdir$+"adc_application.aon","SF",info$[all]
        wo$=info$[20]
        call pgmdir$+"adc_application.aon","AP",info$[all]
        ap$=info$[20]
        call pgmdir$+"adc_progress.aon","N","","","","",0,bmm01_dev,1,meter_num,status

rem --- Print Material Information

        read record (bmm01_dev,key=firm_id$+bill_no$,dom=std_exit) bmm01a$
        gosub lot_size_yield
        mattot=0
        if sub$<>"" then part$=sub$(1,20) else part$=bill_no$
        gosub material_heading
        read (bmm02_dev,key=firm_id$+part$,dom=*next)

    while more
        bmm02a_key$=key(bmm02_dev,end=*break)
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if pos(firm_id$+part$=bmm02a_key$)<>1 then break
        read record (bmm02_dev,key=bmm02a_key$) bmm02a$
        if select$<>"A" then
            if cvs(bmm02a.EFFECT_DATE$,3)<>"" and bmm02a.EFFECT_DATE$>pdate$ then continue
            if cvs(bmm02a.OBSOLT_DATE$,3)<>"" and bmm02a.OBSOLT_DATE$<=pdate$ then continue
        endif

        if bmm02a.LINE_TYPE$="M" then
                OutVect!.addItem(bmm02a.MATERIAL_SEQ$)
                OutVect!.addItem(bmm02a.EXT_COMMENTS$)
                xwk=fnblank(6)
        else
            find record (ivm01_dev,key=firm_id$+bmm02a.ITEM_ID$,dom=label_two) ivm01a$
            x0$(1)=fnitem$(ivm01a.ITEM_DESC$,desc[1],desc[2],desc[3])
label_two:
            subbill$=" "
            find (bmm01_dev,key=firm_id$+bmm02a.ITEM_ID$,dom=label_three)
            subbill$="*"
label_three:
            find record (ivm02_dev,key=firm_id$+warehouse$+bmm02a.ITEM_ID$,dom=*next) ivm02a$

            matcost=ivm02a.unit_cost*fnqty(bmm02a.QTY_REQUIRED,bmm02a.ALT_FACTOR,bmm02a.DIVISOR,yield,bmm02a.SCRAP_FACTOR)

            OutVect!.addItem(bmm02a.MATERIAL_SEQ$+subbill$)
            OutVect!.addItem(bmm02a.ITEM_ID$(1,p[0]))
            OutVect!.addItem(str(bmm02a.DIVISOR:bms01a.HRQTY_MASK$))
            OutVect!.addItem(str(bmm02a.QTY_REQUIRED:bms01a.HRQTY_MASK$))
            OutVect!.addItem(str(bmm02a.ALT_FACTOR:bms01a.MAT_FAC_MSK$))
            OutVect!.addItem(str(bmm02a.SCRAP_FACTOR:bms01a.MAT_FAC_MSK$))
            OutVect!.addItem(str(ivm02a.unit_cost:ivs01a.PRICE_MASK$))
            OutVect!.addItem(str(matcost:ivs01a.PRICE_MASK$))

            xwk=fnblank(1)
            OutVect!.addItem(ivm01a.item_desc$(1,30))
            xwk=fnblank(1)
            OutVect!.addItem("Op Seq: "+bmm02a.OP_SEQ$)
            OutVect!.addItem("U/M: "+bmm02a.UNIT_MEASURE$)
            OutVect!.addItem("Net Qty: "+str(fnqty(bmm02a.QTY_REQUIRED,bmm02a.ALT_FACTOR,bmm02a.DIVISOR,yield,bmm02a.SCRAP_FACTOR):bms01a.HRQTY_MASK$))
            xwk=fnblank(2)
            mattot=mattot+matcost
        endif
        if select$="C" then continue
    wend

    xwk=fnblank(8)

rem --- Print Operation Information

    dir_labtot=0
    oh_labtot=0,sub_cost=0
    gosub Operation_Heading
    read (bmm03_dev,key=firm_id$+part$,dom=*next)
    while more
        read record (bmm03_dev,end=*break) bmm03a$
        if firm_id$+part$<>bmm03a.FIRM_ID$+bmm03a.BILL_NO$ then break

        if select$<>"A" then
            if cvs(bmm03a.EFFECT_DATE$,3)<>"" and bmm03a.EFFECT_DATE$>pdate$ then continue
            if cvs(bmm03a.OBSOLT_DATE$,3)<>"" and bmm03a.OBSOLT_DATE$<=pdate$ then continue
            endif
        endif

        if bmm03a.LINE_TYPE$="M" then
            OutVect!.addItem(bmm03a.OP_SEQ$)
            OutVect!.addItem(cvs(bmm03a.EXT_COMMENTS$,3))
            xwk=fnblank(6)
        else 
            let bmm08a.CODE_DESC$="Not On File"
            bmm08a.DIRECT_RATE=0
            read record (bmm08_dev,key=bmm03a.FIRM_ID$+bmm03a.OP_CODE$,dom=*next) bmm08a$
            if bmm03a.PCS_PER_HOUR=0 then bmm03a.PCS_PER_HOUR=1
            if lot=0 then lot=1
            dir_labcost=fnop1(bmm03a.HRS_PER_PCE,bmm08a.DIRECT_RATE,bmm03a.PCS_PER_HOUR,yield,bmm03a.SETUP_TIME,lot)
            oh_labcost=dir_labcost*bmm08a.OVHD_FACTOR

                OutVect!.addItem(bmm03a.OP_SEQ$)
                OutVect!.addItem(bmm03a.OP_CODE$)
                if wo$="Y" then
                    OutVect!.addItem(str(bmm08a.QUEUE_TIME:m6$))
                else
                    xwk=fnblank(1)
                endif
                OutVect!.addItem(str(bmm03a.SETUP_TIME:m6$))
                OutVect!.addItem(str(bmm03a.HRS_PER_PCE:bms01a.HRQTY_MASK$))
                OutVect!.addItem(str(bmm03a.PCS_PER_HOUR:bms01a.MAT_FAC_MSK$))
                if wo$="Y" then
                    OutVect!.addItem(str(bmm03a.MOVE_TIME:m6$))
                else
                    xwk=fnblank(1)   
                endif
                OutVect!.addItem(str(100*(bmm03a.HRS_PER_PCE/bmm03a.PCS_PER_HOUR)/yield+bmm03a.SETUP_TIME/lot:bms01a.HRQTY_MASK$))

            xwk=fnblank(1)
            OutVect!.addItem(bmm08a.CODE_DESC$)
            xwk=fnblank(2)
            OutVect!.addItem(str(bmm08a.DIRECT_RATE:bms01a.HRQTY_MASK$))
            OutVect!.addItem(str(dir_labcost:ivs01a.PRICE_MASK$))
            OutVect!.addItem(str(oh_labcost:ivs01a.PRICE_MASK$))
            OutVect!.addItem(str(dir_labcost+oh_labcost:ivs01a.PRICE_MASK$))
            
            dir_labtot=dir_labtot+dir_labcost
            oh_labtot=oh_labtot+oh_labcost
        endif

        if select$="C" then continue
        xwk=fnblank(1)
        OutVect!.addItem("Effective: "+fndate$(bmm03a.EFFECT_DATE$))
        OutVect!.addItem("Obsolete: ")
        OutVect!.addItem(fndate$(bmm03a.OBSOLT_DATE$))
        xwk=fnblank(4)

    wend
    xwk=fnblank(8)

rem --- Print Subcontract Information

    if ap$<>"N" then
        gosub Subcontract_Heading
        read (bmm05_dev,key=firm_id$+part$,dom=*next)
        while more
            read record (bmm05_dev,end=*break) bmm05a$
            if firm_id$+part$<>bmm05a.FIRM_ID$+bmm05a.BILL_NO$ then break
            if select$<>"A" then
                if cvs(bmm05a.EFFECT_DATE$,3)<>"" and bmm05a.EFFECT_DATE$>pdate$ then continue
                if cvs(bmm05a.OBSOLT_DATE$,3)<>"" and bmm05a.OBSOLT_DATE$<=pdate$ then continue
            endif

            if bmm05a.LINE_TYPE$<>"S" then
                OutVect!.addItem(bmm05a.SUBCONT_SEQ$+" "+bmm05a.LINE_TYPE$)
                OutVect!.addItem(bmm05a.EXT_COMMENTS$)
                xwk=fnblank(6)
                continue
            endif
            find record (apm01_dev,key=firm_id$+bmm05a.VENDOR_ID$,dom=*next) apm01a$

            OutVect!.addItem(bmm05a.SUBCONT_SEQ$+" "+bmm05a.LINE_TYPE$)
            OutVect!.addItem(fnmask$(bmm05a.VENDOR_ID$(1,vlen),vmask$)+" "+apm01a.vendor_name$(1,25-len(vmask$)))
            OutVect!.addItem(str(bmm05a.DIVISOR:bms01a.HRQTY_MASK$))
            OutVect!.addItem(str(bmm05a.QTY_REQUIRED:bms01a.HRQTY_MASK$))
            OutVect!.addItem(str(bmm05a.ALT_FACTOR:bms01a.MAT_FAC_MSK$))
            OutVect!.addItem(str(bmm05a.UNIT_COST:ivs01a.PRICE_MASK$))
            OutVect!.addItem(str(bmm05a.UNIT_COST*fnsub(bmm05a.QTY_REQUIRED,bmm05a.ALT_FACTOR,bmm05a.DIVISOR):ivs01a.PRICE_MASK$))
            xwk=fnblank(1)

            xwk=fnblank(1)
            OutVect!.addItem(bmm05a.EXT_COMMENTS$(1,30))
            OutVect!.addItem("Ld: "+str(bmm05a.LEAD_TIME:p4$))
            OutVect!.addItem("U/M: "+bmm05a.UNIT_MEASURE$)
            OutVect!.addItem("Op: "+bmm05a.OP_SEQ$)
            OutVect!.addItem("Net Qty:"+str(fnsub(bmm05a.QTY_REQUIRED,bmm05a.ALT_FACTOR,bmm05a.DIVISOR):bms01a.HRQTY_MASK$))
            xwk=fnblank(2)

            sub_cost=sub_cost+bmm05a.UNIT_COST*fnsub(bmm05a.QTY_REQUIRED,bmm05a.ALT_FACTOR,bmm05a.DIVISOR)
            if select$="C" continue

            xwk=fnblank(1)
            OutVect!.addItem("Effective: "+fndate$(bmm05a.EFFECT_DATE$))
            OutVect!.addItem("Obsolete: ")
            OutVect!.addItem(fndate$(bmm05a.OBSOLT_DATE$))
            xwk=fnblank(4)
        wend
        xwk=fnblank(8)
    endif

rem --- Print Total Information

    gosub total_information

rem --- Comments

    if comment$="Y" then
        read (bmm09_dev,key=firm_id$+part$,dom=*next)
        gosub Comments_Line
        while more
            bmm09a_key$=key(bmm09_dev,end=*break)
            if pos(firm_id$+part$=bmm09a_key$)<>1 then break
            read record (bmm09_dev,key=bmm09a_key$) bmm09a$
            OutVect!.addItem(bmm09a.SEQUENCE_NUM$)
            OutVect!.addItem(bmm09a.STD_COMMENTS$)
            xwk=fnblank(6)
        wend
    endif

rem --- End

    goto std_exit

material_heading: rem --- Material Heading

    OutVect!.addItem(fill(10,"-"))
    OutVect!.addItem(fill(35,"-")+"Material Information----------")
    OutVect!.addItem(fill(15,"-"))
    OutVect!.addItem(fill(16,"-"))
    OutVect!.addItem(fill(16,"-"))
    OutVect!.addItem(fill(22,"-"))
    OutVect!.addItem(fill(16,"-"))
    OutVect!.addItem(fill(10,"-"))

    xwk=fnblank(3)
    OutVect!.addItem("Qty")
    OutVect!.addItem("Alt")
    OutVect!.addItem("Scarp")
    OutVect!.addItem("Unit")
    OutVect!.addItem("Unit")

    OutVect!.addItem("Seq")
    OutVect!.addItem("Item")
    OutVect!.addItem("Divisor")
    OutVect!.addItem("Reqd")
    OutVect!.addItem("Factor")
    OutVect!.addItem("Factor")
    OutVect!.addItem("Cost")
    OutVect!.addItem("Cost")

    xwk=fnblank(8)

return

operation_heading: rem --- Operation Heading

    OutVect!.addItem(fill(10,"-"))
    OutVect!.addItem(fill(35,"-")+"Operation Information----------")
    OutVect!.addItem(fill(15,"-"))
    OutVect!.addItem(fill(16,"-"))
    OutVect!.addItem(fill(16,"-"))
    OutVect!.addItem(fill(22,"-"))
    OutVect!.addItem(fill(15,"-"))
    OutVect!.addItem(fill(10,"-"))

    xwk=fnblank(1)
    OutVect!.addItem("Op Code")
    if wo$="Y" then
        OutVect!.addItem("Queue")
    else
        xwk=fnblank(1)
    endif
    OutVect!.addItem("Setup")
    OutVect!.addItem("Hrs/Piece")
    OutVect!.addItem("Piece/Hr")
    if wo$="Y" then
        OutVect!.addItem("Move")
    else
        xwk=fnblank(1)
    endif
    OutVect!.addItem("Net Hrs")

    OutVect!.addItem("Seq")
    OutVect!.addItem("Description")
    xwk=fnblank(2)
    OutVect!.addItem("Dir Rate")
    OutVect!.addItem("Dir Cost")
    OutVect!.addItem("O/H Cost")
    OutVect!.addItem("Tot Cost")
    xwk=fnblank(8)
    return

subcontract_heading: rem --- Subcontract Heading

    OutVect!.addItem(fill(10,"-"))
    OutVect!.addItem(fill(35,"-")+"Subcontract Information-------")
    OutVect!.addItem(fill(15,"-"))
    OutVect!.addItem(fill(16,"-"))
    OutVect!.addItem(fill(16,"-"))
    OutVect!.addItem(fill(22,"-"))
    OutVect!.addItem(fill(16,"-"))
    OutVect!.addItem(fill(10,"-"))

    xwk=fnblank(3)
    OutVect!.addItem("Qty")
    OutVect!.addItem("Alt")
    OutVect!.addItem("Unit")
    OutVect!.addItem("Total")
    xwk=fnblank(1)
    
    OutVect!.addItem("Seq C")
    OutVect!.addItem("Vendor/Service")
    OutVect!.addItem("Divisor")
    OutVect!.addItem("Required")
    OutVect!.addItem("Factor")
    OutVect!.addItem("Cost")
    OutVect!.addItem("Cost")
    xwk=fnblank(1)
    xwk=fnblank(8)
    return

total_information: rem --- Total Information

    OutVect!.addItem(fill(10,"-"))
    OutVect!.addItem(fill(35,"-")+"Total Information-------------")
    OutVect!.addItem(fill(15,"-"))
    OutVect!.addItem(fill(13,"-"))
    OutVect!.addItem(fill(13,"-"))
    OutVect!.addItem(fill(20,"-"))
    OutVect!.addItem(fill(15,"-"))
    OutVect!.addItem(fill(10,"-"))

    xwk=fnblank(1)
    OutVect!.addItem("Material     :  "+str(mattot:ivs01a.PRICE_MASK$))
    xwk=fnblank(6)

    xwk=fnblank(1)
    OutVect!.addItem("Direct Labor :  "+str(dir_labtot:ivs01a.PRICE_MASK$))
    xwk=fnblank(6)

    xwk=fnblank(1)
    OutVect!.addItem("Overhead     :  "+str(oh_labtot:ivs01a.PRICE_MASK$))
    xwk=fnblank(6)

    xwk=fnblank(1)
    OutVect!.addItem("Subcontract  :  "+str(sub_cost:ivs01a.PRICE_MASK$))
    xwk=fnblank(6)


    xwk=fnblank(8)
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))

    xwk=fnblank(1)
    OutVect!.addItem("Total        :  "+str(mattot+dir_labtot+oh_labtot+sub_cost:ivs01a.PRICE_MASK$))
    xwk=fnblank(6)

    return

comments_line: rem --- Comments

    OutVect!.addItem(fill(10,"-"))
    OutVect!.addItem("Comments"+"  "+"Seq")
    xwk=fnblank(6)
    xwk=fnblank(8)

    return

lot_size_yield: rem --- Get Lot Size and Yield for Non-Phantoms
    if sub$="" then 
        lot=bmm01a.STD_LOT_SIZE
        yield=bmm01a.EST_YIELD
        return
    endif
    if len(sub$)=20 then 
        lot=bmm01a.STD_LOT_SIZE
        yield=bmm01a.EST_YIELD
        return
    endif
    find record (bmm01_dev,key=firm_id$+sub$(21,20),dom=label_four) bmm01a$
    lot=bmm01a.STD_LOT_SIZE
    yield=bmm01a.EST_YIELD
    read record (bmm01_dev,key=firm_id$+bill_no$) bmm01a$
    return

label_four:
    lot=bmm01a.STD_LOT_SIZE
    yield=bmm01a.EST_YIELD
    return


rem ----#include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$
        def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))
        def fnop1(q1,q2,q3,q4,q5,q6)=100*(q1*q2/q3)/q4+q5*q2/q6
        def fnsub(q1,q2,q3)=q1*q2/q3

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #endinclude fndate.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem ----#endinclude std_functions.src

rem ----#include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem ----#endinclude std_error.src
rem ----#include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem ----#endinclude std_missing_params.src

rem ----#include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    for i=1 to 12
        close(channels[i])
     next i

     exit
rem ----#endinclude std_exit.src

        end
