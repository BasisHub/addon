rem --- Bill Material Availability Hard Copy
rem --- Program bmr_billmatavail_o1 v8.0.0 15Jan2008 (bmr_ib)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/15/2008 10:16:00)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyrights 1981-2011, BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Init Data

        more=1
        l9=59
        l=l9+1,h0=132,h=0,headings=5,when$=sysinfo.system_date$,clock$=""
        dim headings$[headings]
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__-_AVAILABILITY_OF_COMPONENTS_INQUIRY")
        headings$[2]=Translate!.getTranslation("AON_AS_OF_")+fndate$(pdate$)
		call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m2$,0,m2
		call stbl("+DIR_PGM")+"adc_getmask.aon","","BM","Q","",p1$,0,p1

rem --- Column Headings

        dim columns$[7,10]
        columns = 8
            columns$[0,0]=Translate!.getTranslation("AON_SEQ"),                columns$[0,1]="C",columns$[0,2]="7"
            columns$[1,0]=Translate!.getTranslation("AON_WH"),                 columns$[1,1]="C",columns$[1,2]="6"
            columns$[2,0]=Translate!.getTranslation("AON_ITEM_DESCRIPTION"),   columns$[2,1]="C",columns$[2,2]="30"
            columns$[3,0]=Translate!.getTranslation("AON_QTY_REQ"),            columns$[3,1]="N",columns$[3,2]="8",columns$[3,3]=p1$
            columns$[4,0]=Translate!.getTranslation("AON___ON_HAND"),          columns$[4,1]="N",columns$[4,2]="8",columns$[4,3]=m2$
            columns$[5,0]=Translate!.getTranslation("AON___COMMIT"),           columns$[5,1]="N",columns$[5,2]="8",columns$[5,3]=m2$
            columns$[6,0]=Translate!.getTranslation("AON___AVAIL"),            columns$[6,1]="N",columns$[6,2]="8",columns$[6,3]=m2$
            columns$[7,0]=Translate!.getTranslation("AON___ON_ORDER"),         columns$[7,1]="N",columns$[7,2]="8",columns$[7,3]=m2$


        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
        dim bmm02a_key$:bmm02a_key_tpl$
        call pgmdir$+"adc_progress.aon","N","","","","",0,bmm02a_dev,1,meter_num,status

rem --- Headings

        extractrecord(bmm01a_dev,key=firm_id$+bill_no$,dom=*next)bmm01a$
        readrecord(bmm01a_dev)bmm01a$
        find record (ivm01a_dev,key=firm_id$+bmm01a.bill_no$,dom=*next) ivm01a$
        bill_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        find record (ivm10c_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$
        x1$=ivm10c.short_name$
        headings$[3]=Translate!.getTranslation("AON_FOR_BILL_NUMBER:_")+bmm01a.bill_no$+"        "+bill_desc$
        headings$[4]=Translate!.getTranslation("AON_WAREHOUSE:_")+whse$+" "+x1$+"   "+Translate!.getTranslation("AON_FINISHED_QUANTITY:_")+str(qty:m2$)

rem --- Key

        read (bmm02a_dev,key=firm_id$+bmm01a.bill_no$,dom=*next)
        while more  
            bmm02a_key$=key(bmm02a_dev,end=*break)
            if pos(firm_id$+bmm01a.bill_no$=bmm02a_key$)<>1 then break
            read record (bmm02a_dev) bmm02a$
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            if bmm02a.line_type$<>"S" then continue
            if cvs(bmm02a.effect_date$,3)<>"" and bmm02a.effect_date$>pdate$ then continue
            if cvs(bmm02a.obsolt_date$,3)<>"" and bmm02a.obsolt_date$<=pdate$ then continue

rem --- Find Item Record

            dim d1$(60)
            find record (ivm01a_dev,key=firm_id$+bmm02a.item_id$,dom=*next) ivm01a$
            d1$(1)=ivm01a.item_desc$
            d1$(1)=fnitem$(d1$,desc[1],desc[2],desc[3])
            find record (ivm02a_dev,key=firm_id$+whse$+bmm02a.item_id$,dom=assign) ivm02a$
            gosub detail
            continue
assign:
            ivm02a.warehouse_id$="  "
            gosub detail
        wend

done: rem --- Overlay

        call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,meter_num,status
        goto std_exit

detail: rem --- Detail

        gosub verify_bill_no

        OutVect!.addItem(bmm02a_key.material_seq$)
        if qty*bmm02a.qty_required>ivm02a.qty_on_hand-ivm02a.qty_commit then
            OutVect!.addItem("--")
        endif

        OutVect!.addItem(ivm02a.warehouse_id$)
        OutVect!.addItem(r0$+" "+bmm02a.item_id$)
        OutVect!.addItem(str(qty*fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)))
        OutVect!.addItem(str(ivm02a.qty_on_hand))
        OutVect!.addItem(str(ivm02a.qty_commit))
        OutVect!.addItem(str(ivm02a.qty_on_hand-ivm02a.qty_commit))
        OutVect!.addItem(str(ivm02a.qty_on_order))
        xwk = fnblank(2)
        OutVect!.addItem(d1$(1,30))
        xwk = fnblank(5)
return

verify_bill_no: rem --- Verify if Item is a Bill Number

        r0$=" "
        find (bmm01a_dev,key=firm_id$+bmm02a.item_id$,dom=*return)
        r0$="*"
return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #endinclude fndate.src


rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
