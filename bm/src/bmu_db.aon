rem --- Bill of Material Component Item Replacement
rem --- Program bmu_db_new v8.0.0 11Feb2008 (bmu_db)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/11/2008 04:31:49)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    precision pre

rem --- Progress meter

    call pgmdir$+"adc_progress.aon","N","","","","",0,bmm02_dev,1,meter_num,ignore_status
rem --- Disallow 'M'enu option in Error Routine

    exit_ctrl=1

rem --- Initial Read

    read (bmm02_dev,key=firm_id$+r0$,dom=*next)
    call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02_key_tpl$,rd_table_chans$[all],status$

rem --- Main Read
    while more
        dim bmm02_key$:bmm02_key_tpl$
        bmm02_key$=key(bmm02_dev,end=*break)
        if pos(firm_id$=bmm02_key$)<>1 then break
        if r1$<>"" and bmm02_key.bill_no$>r1$ then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        read record (bmm02_dev,key=bmm02_key$) bmm02a$
        if bmm02a.obsalt_date$="   " or bmm02a.obsalt_date$>r5$ or bmm02a.effect_date$="   " or bmm02a.effect_date$<=r5$ or bmm02a.item_id$=r2$ then 
            seq=num(bmm02_key.material_seq$)+1
            flag=0
            dim bill_no$(p[0]+3)
            bill_no$=bmm02_key.bill_no$
            if seq>999 then 
                let error$=error$+"1"+bill_no$
            else    
                find (bmm02_dev,key=bmm02_key.firm_id$+bmm02_key.bill_no$+str(seq:"000"),dom=check_1)
                error$=error$+"1"+bill_no$
                flag=1
check_1:
            if flag = 0 then
                if bmm02_key.bill_no$=r3$ then let error$=error$+"2"+bill_no$
            endif
        endif
    wend

rem --- Display Phase 1 errors, if any
    flag=0
    while more
        if error$<>"" then 
            call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
            if len(error$)/(p[0]+4)*2<15 then let last_msg=1+len(error$)/(p[0]+4)*2 else let lst_msg=15
            l0=0
            ptr=1
            while more
                if error$(ptr,1)="1" then 
                    msg$[l0]="Sequence following component in Bill # "+error$(ptr+1,p[0])+" already used."
                    msg$[l0+1]="Resequence Bill or manually delete lines."
                endif
                if error$(ptr,1)="2" then 
                    msg$[l0]="Sequence Number "+error$(ptr+p[0]+1,3)+" for Bill Number "+error$(ptr+1,p[0])+" would be same as"
                    msg$[l0+1]="Bill Number. Cannot replace component."
                endif
                ptr=ptr+p[0]+4
                l0=l0+2
                if len(error$(ptr))=0 then 
                    gosub print_next_err
                    break
                endif
                if l0>last_msg then gosub print_next_err
            wend

            break
        endif
rem --- Phase 2
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        read (bmm02_dev,key=firm_id$+r0$,dom=*next)
rem --- Main Read
        main_1=0
        while more
            if main_1=0 then
                bmm02_key$=key(bmm02_dev,end=*break)
                if pos(firm_id$=bmm02_key$)<>1 then break
                if r1$<>"" then 
                    if bmm02_key.bill_no$>r1$ then break
                endif
                call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
                read record (bmm02_dev,key=bmm02_key$) bmm02a$
            endif
            if bmm02a.obsalt_date$<>"   " then 
                if bmm02a.obsalt_date$<=r5$ then continue
            endif
            if bmm02a.effect_date$<>"   " then 
                if bmm02a.effect_date$>r5$ then continue
            endif
            if bmm02a.item_id$<>r2$ then continue
            bmm02a.obsalt_date$=r5$
            write record (bmm02_dev,key=bmm02_key$) bmm02a$

rem --- Write New Record With Effective Date

            seq=num(bmm02_key.material_seq$)+1
            bmm02_key.material_seq$=str(seq:"000")
            bmm02a.material_seq$=str(seq:"000")
            bmm02a.effect_date$=r5$
            bmm02a.obsolt_date$=r5$
            bmm02a.item_id$=r3$
            bmm02a.qty_required=bmm02a.qty_required*r0
            write record (bmm02_dev,key=bmm02_key$) bmm02a$
            bmm04a.firm_id$=bmm02a.firm_id$
            bmm04a.item_id$=pad(r3$,20)
            bmm04a.bill_no$=bmm02a.bill_no$
            bmm04a.material_seq$=bmm02a.material_seq$

            write record (bmm04_dev,key=(bmm04a.firm_id$+bmm04a.item_id$+bmm04a.bill_no$+bmm04a.material_seq$)) bmm04a$
            if r4$="N" then continue
            
rem --- Rewrite Comments with Obsolete Date
            while more
                main_1=0
                bmm02_key$=key(bmm02_dev,end=done)
                if pos(firm_id$=bmm02_key$)<>1 then flag=1; break
                if r1$<>"" and bmm02_key.bill_no$>r1$ then flag=1; break
                if bmm02_key.bill_no$<>bmm02a.bill_no$ then break
                read record (bmm02_dev,key=bmm02_key$) bmm02a$
                if bmm02a.line_type$<>"M" then 
                    main_1=1
                    break
                endif
                if bmm02a.obsalt_date$<>"   " and bmm02a.obsalt_date$<=r5$ then continue
                if bmm02a.effect_date$<>"   " and bmm02a.effect_date$>r5$ then  continue
                bmm02a.obsalt_date$=r5$
                write record (bmm02_dev,key=bmm02_key$) bmm02a$
            wend
            if flag=1 then break
            if main_1=1 then continue
        wend
        if flag=1 then break
    wend 
done: rem --- End

    goto std_exit

print_next_err: rem --- Print next error screen

    msg$[lst_msg]="<Enter> To Continue"
    call pgmdir$+"adc_stdmessage.aon",3,msg$[all],last_msg,-1,-1,ignore$,v3
    if v3=4 then exitto std_exit
    l0=0
    return

rem --- #include "./aon/lib/std_input.src

std_input: rem --- standard input routine (12-mar-2003)

    if restart and vaction$="s" then let vaction$="sp",restart=0
    if vaction$="g" then let compare_control=num(str(grid_id)+str(grid_row:"000")+str(grid_col:"000")) else let compare_control=control_id
    if compare_control=old_control_id then let validate=0 else let old_control_id=compare_control
    dim vdata$[10],vdata[10],vinfo$[20],vinfo[20]
    vdata$[0]=v0$
    vdata$[1]=v1$,vdata$[2]=v2$,vdata$[3]=v3$,vdata$[4]=v4$
    vdata[0]=v0
    vdata[1]=v1,vdata[2]=v2,vdata[3]=v3,vdata[4]=v
    vinfo$[0]=pgm(-2)
    vinfo$[4]=event$,vinfo[2]=control_id,vinfo[3]=i0
    vinfo[4]=i0_nonkey1
    vinfo[5]=i0_done,vinfo[6]=my_context
    vinfo[7]=validate
    vinfo[8]=statusbar_context,vinfo[9]=parent_context
    vinfo[10]=tab_control_id
    vinfo[11]=tab_index,vinfo[12]=done_context
    vinfo[14]=grid_col
    vinfo[15]=grid_row
    vinfo$[11]=vtoken1$
    vinfo$[12]=vtoken2$,vinfo$[13]=vtoken3$
    vinfo$[14]=vtoken4$
    vinfo$[15]=vtoken5$,vinfo$[16]=vtoken6$
    vinfo$[17]=vtoken7$
    vinfo$[18]=vtoken8$,vinfo$[19]=vtoken9$

rem --- call standard input routine

    call pgmdir$+"syc_ig.bbx",vaction$,vdata$[all],vdata[all],vinfo$[all],vinfo[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],vstatus
    if vstatus=127 then goto std_input_escape
    if vstatus=999 then goto std_input_error
    goto std_input_exit

std_input_escape: rem --- escape during input

    call pgmdir$+"syc_es.bbx",err=std_input_error,pgm(-2),tcb(8),e$,e2,v3
    if v3<>127 then goto std_input
    print @(0,e2),'cl','cursor'("ON"),e$,'lf'

std_input_error: rem --- error during input

    escape
    goto std_input
rem --- assign local variables and return
std_input_exit:
    v$=vinfo$[1]
    event$=vinfo$[4],v=vinfo[0],v3=vinfo[1]
    let next_control=vinfo[2],i0=vinfo[3],next_context=vinfo[6]
    let validate=vinfo[7],grid_col=vinfo[14],grid_row=vinfo[15]
    let wants_to_edit_cell=vinfo[16],next_tab_index=vinfo[18]
    if wants_to_edit_cell then dim vnotice$:vinfo$[3]; let vnotice$=vinfo$[2]
    return
rem --- #end include
rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
