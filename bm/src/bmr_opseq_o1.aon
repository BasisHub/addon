rem --- Print Unlinked Operation Sequences in Mat/Subs
rem --- Program bmr_opseq_o1 v8.0.0 08Jan2008 (bmr_lb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/08/2008 11:50:31)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Init Data

        more=1
        h0=80
        h=0,headings=2,when$=sysinfo.system_date$,clock$=""
        dim headings$[headings]
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAST","PRIMARY",bmm01a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLSUB","PRIMARY",bmm05a_key_tpl$,rd_table_chans$[all],status$
        dim bmm01a_key$:bmm01a_key_tpl$
        dim bmm02a_key$:bmm02a_key_tpl$
        dim bmm05a_key$:bmm05a_key_tpl$

rem ---  column heading

        dim columns$[4,10]
        columns=4
            columns$[0,0]="Bill No.",                 columns$[0,1]="C",columns$[0,2]="10"
            columns$[1,0]="Type",                     columns$[1,1]="C",columns$[1,2]="20"
            columns$[2,0]="Seq",                      columns$[2,1]="C",columns$[2,2]="8"
            columns$[3,0]="Op Seq",                   columns$[3,1]="C",columns$[3,2]="8"
            columns$[4,0]="Comments",                 columns$[4,1]="C",columns$[4,2]="25"

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,bmm01_dev,1,meter_num,status

rem --- Initial Read Of Bill

        extractrecord (bmm01_dev,key=firm_id$+billfrom$,dom=*next)

read_material: rem --- Read Loop For Materials

        bmm01a_key$=key(bmm01_dev,end=done)
        if pos(firm_id$=bmm01a_key$)<>1 then goto done
        if billthru$<>"" then if bmm01a_key.bill_no$(1,len(billthru$))>billthru$ then goto done
        read (bmm01_dev)
        read (bmm02_dev,key=bmm01a_key.firm_id$+bmm01a_key.bill_no$,dom=*next)

    while more
        bmm02a_key$=key(bmm02_dev,end=*break)
        if pos(bmm01a_key$=bmm02a_key$)<>1 then break
        read record (bmm02_dev) bmm02a$
        count=count+1
        if mod(count,5)=0 then call pgmdir$+"adc_progress.aon","S","","","",bmm02a_key.bill_no$(1,p[0]),0,0,1,meter_num,status

rem --- Test for Print

        if bmm02a.op_seq$="   " then continue
        find record (bmm03_dev,key=bmm02a.firm_id$+bmm02a.bill_no$+bmm02a.op_seq$,dom=print_material_line) bmm03a$
        if bmm03a.line_type$<>"M" then continue

print_material_line: rem --- Print Material Line

        OutVect!.addItem(bmm02a.bill_no$)
        OutVect!.addItem("Material")
        OutVect!.addItem(bmm02a.material_seq$)
        OutVect!.addItem(bmm05a.op_seq$)
        if bmm03a.line_type$="M" then
            OutVect!.addItem("Linked to comment")
        else
            OutVect!.addItem("Unlinked line")
        endif
        t0=t0+1
    wend

        read (bmm05_dev,key=bmm01a_key.firm_id$+bmm01a_key.bill_no$,dom=*next)

rem --- Read Loop For Subcontracts

    while more 
        bmm05_key$=key(bmm05_dev,end=read_material)
        if pos(bmm01a_key$=bmm05_key$)<>1 then goto read_material
        read record (bmm05_dev) bmm05a$
        count=count+1
        if mod(count,5)=0 then call pgmdir$+"adc_progress.aon","S","","","",bmm05a_key.bill_no$(1,p[0]),0,0,1,meter_num,status

rem --- Test for Print

        if bmm05a.op_seq$="   " then continue
        find record (bmm03_dev,key=bmm05a.firm_id$+bmm05a.bill_no$+bmm05a.op_seq$,dom=print_subcontract) bmm03a$
        if bmm03a.line_type$<>"M" then continue
   
print_subcontract: rem --- Print Subcontract Line

        OutVect!.addItem(bmm02a.bill_no$)
        OutVect!.addItem("Subcontract")
        OutVect!.addItem(bmm05a.subcont_seq$)
        OutVect!.addItem(bmm05a.op_seq$)
        if bmm03a.line_type$="M" then
            OutVect!.addItem("Linked to comment")
        else
            OutVect!.addItem("Unlinked line")
        endif
        t0=t0+1
        
    wend

done: rem --- Totals

        xwk=fnblank(6)
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("Total Records:"+str(t0))
        xwk=fnblank(3)
        goto std_exit

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
        def fnblank(q0)
            for q1=1 to q0
                OutVect!.addItem("")
            next q1
            return q1
        fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
