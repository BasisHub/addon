rem --- Inventory Production Register
rem --- Program bmr_ha v8.0.0 15Jan2008 (bmr_ha)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/15/2008 01:44:23)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=21,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]

        files$[1]="bme-01",ids$[1]="BME_PRODUCT"
        files$[2]="bmm-01",ids$[2]="BMM_BILLMAST"
        files$[3]="bmm-02",ids$[3]="BMM_BILLMAT"
        files$[4]="bmm-03",ids$[4]="BMM_BILLOPER"
        files$[5]="bmm-08",ids$[5]="BMC_OPCODES"
        files$[6]="bms_params",ids$[6]="BMS_PARAMS"
        files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
        files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
        files$[9]="ivc_whsecode",ids$[9]="IVC_WHSECODE"
        files$[10]="ivs_params",ids$[10]="IVS_PARAMS"
        files$[11]="gls_params",ids$[11]="GLS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,11,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        bme01_dev=channels[1]
        bmm01_dev=channels[2]
        bmm02_dev=channels[3]
        bmm03_dev=channels[4]
        bmm08_dev=channels[5]
        bms01a_dev=channels[6]
        ivm01_dev=channels[7]
        ivm02_dev=channels[8]
        ivm10c_dev=channels[9]
        ivs01a_dev=channels[10]
        gls01a_dev=channels[11]

rem --- Dimension string templates

    dim bme01a$:templates$[1],bmm01a$:templates$[2],bmm02a$:templates$[3],
:       bmm03a$:templates$[4],bmm08a$:templates$[5],bms01a$:templates$[6],
:       ivm01a$:templates$[7],ivm02a$:templates$[8],ivm10c$:templates$[9],
:       ivs01a$:templates$[10],gls01a$:templates$[11]

rem --- Retrieve parameter records

        bms01a_key$=firm_id$+"BM00"
        find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$

rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$,source$=pgm(-2)
        dim r0$(36),info$[20]
        il=num(ivs01a.item_id_len$)
        
rem --- Is AR installed? then open files ars-01 and arm-10c

    call pgmdir$+"adc_application.aon","AR",info$[all]
    if info$[20]<>"N" then 
        files$[11]="arc_distcode",ids$[11]="ARC_DISTCODE"
        files$[12]="ars_params",ids$[12]="ARS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,11,12,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        arm10d_dev=channels[11],ars01a_dev=channels[12]
        dim arm10d$:templates$[11],ars01a$:templates$[12]
        ar_dist$="N"
        find record (ars01a_dev,key=firm_id$+"AR00",dom=initial) ars01a$
        if ars01a.dist_by_item$="Y" then ar_dist$="Y"
    endif  

initial:
        dim p[4],g[4],desc[3],info$[20]
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$)
        p[0]=num(ivs01a.item_id_len$)
        p[1]=num(ivs01a.vendor_prd_len$)
        p[2]=num(ivs01a.precision$)
        p[3]=num(ivs01a.ls_no_len$),lf$="N"
        if pos(ivs01a.lifofifo$="LF")>0 then lf$="Y"
        dim iv_chans[10]
        g[0]=num(gls01a.total_pers$)
        g[1]=num(gls01a.current_per$)
        g[2]=num(gls01a.current_year$)
        g[3]=num(gls01a.acct_length$)
        g[4]=num(gls01a.max_acct_len$)
        g[2]=num(gls01a.current_year$)

rem --- Init Data
    
        precision num(ivs01a.precision$)
        h0=132
        h1=120,h=0,h1$=n1$,h2$=n3$,o1$="",o2$="",o1=0
        l9=59
        l=l9+1,headings=3,when$=sysinfo.system_date$,clock$="",glstatus=0

        dim headings$[headings]
        dim a[1],s[10],k[11],lx[11],sub[9],b1$(60),c1$(64)
        headings$[0]=h1$
        headings$[1]=h2$,errors=0
        m1$=ivs01a.amount_mask$
        m2$=ivs01a.unit_mask$
        m3$=ivs01a.cost_mask$
        call pgmdir$+"adc_sizemask.aon",m1$,m1,6,15
        call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15
        call pgmdir$+"adc_sizemask.aon",m3$,m3,5,10
        dashes$=fill(m1,"-")
        wip_acct$=bms01a.gl_wip_acct$
        m0=p[0]
        units=0
        if m0<6 then m0=6
        places=num(ivs01a.precision$)
        more=1

rem --- Retrieve key templates
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BME_PRODUCT","PRIMARY",bme01a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLSUB","PRIMARY",bmm05a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03a_key_tpl$,rd_table_chans$[all],status$
        dim bme01a_key$:bme01a_key_tpl$
        dim bmm02a_key$:bmm02a_key_tpl$
        dim bmm05a_key$:bmm05a_key_tpl$
        dim bmm03a_key$:bmm03a_key_tpl$

rem --- Open Additional Files
   
    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]
    if ap$="Y" then 
        files$[13]="bmm-05",ids$[13]="BMM_BILLSUB"
        call pgmdir$+"adc_fileopen.aon",action,13,13,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        bmm05_dev=channels[13];dim bmm05a$:templates$[13]
    endif    
    if lf$="Y" then 
        files$[17]="ivm-04",ids$[14]="IVM_ITEMTIER"
        files$[20]="ivw-04",ids$[15]="IVW_LFDET"
        files$[21]="ivw-05",ids$[16]="IVW_LFCOST"
        call pgmdir$+"adc_fileopen.aon",action,14,16,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        ivm04_dev=channels[14],ivw04_dev=channels[15],ivw05_dev=channels[16]
        dim ivm04a$:templates$[14],ivw04a$:templates$[15],ivw05a$:templates$[16]
     endif   

    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status<>0 then goto std_exit
    if gl$="Y" then 
        files$[17]="glm-01",ids$[17]="GLM_ACCT"
        files$[18]=glw11$,ids$[18]="GLW_DAILYDETAIL",options$[18]="CL"
        call pgmdir$+"adc_fileopen.aon",action,17,18,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        glm01_dev=channels[17],glw11_dev=channels[18]
        dim glm01a$:templates$[17],glw11a$:templates$[18]

    endif    

rem --- Options

        u0$=wip_acct$

rem --- Run Report?

        msg_id$="AON_RUN_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message

        if msg_opt$<>"Y" then goto std_exit
    
        call pgmdir$+"adc_progress.aon","N","","","","",0,bme01_dev,1,meter_num,status

rem ---  column heading
rem ,columns$[4,10]="T"

        dim columns$[9,10]
        columns=9
        columns$[0,0]="Ref #",           columns$[0,1]="C",columns$[0,2]="20"
        columns$[1,0]="Main Bill Number",columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]="Cost",            columns$[2,1]="N",columns$[2,2]="8",columns$[2,3]=m3$,columns$[2,10]="T"
        columns$[3,0]="Qty",             columns$[3,1]="N",columns$[3,2]="8",columns$[3,3]=m2$,columns$[3,10]="T"
        columns$[4,0]="Total",           columns$[4,1]="N",columns$[4,2]="8",columns$[4,3]=m1$,columns$[4,10]="T"
        columns$[5,0]="Update?",         columns$[5,1]="C",columns$[5,2]="8"
        columns$[6,0]="Available",       columns$[6,1]="N",columns$[6,2]="8",columns$[6,3]=m2$
        columns$[7,0]="Required",        columns$[7,1]="N",columns$[7,2]="8",columns$[7,3]=m2$
        columns$[8,0]="Shortage",        columns$[8,1]="N",columns$[8,2]="8",columns$[8,3]=m2$
        columns$[9,0]="On-Order",        columns$[9,1]="N",columns$[9,2]="8",columns$[9,3]=m2$

rem --- Initial Read

        read (bme01_dev,key=firm_id$,dom=*next)
        bme01a_key$=key(bme01_dev,end=no_data)
        if pos(firm_id$=bme01a_key$)<>1 then goto no_data

rem --- Heading Read
    while more

        value=0
        read record (bme01_dev,end=done) bme01a$

rem --- Breaks

        if bme01a.firm_id$<>firm_id$ then goto done; rem " --- Company"
        if bme01a.warehouse_id$<>t0$ then gosub warehouse; rem " --- Warehouse"
        if bme01a.prod_date$<>t1$ then gosub date_sub; rem " --- Production Date"
        if bme01a.bm_reference$<>t2$ then gosub reference; rem " --- Reference Number"
        call pgmdir$+"adc_progress.aon","S","","","",bme01a.warehouse_id$+" "+bme01a.bm_reference$+" "+bme01a.item_id$,0,0,1,meter_num,status
        ref1$="Whse "+bme01a.warehouse_id$
        ref2$=bme01a.bm_reference$,ref3$="Prod Entry"

rem --- Get Item Info

        i0$=bme01a.item_id$
        gosub get_iteminfo
        ivacct$=ivm01a.gl_inv_acct$

rem --- Additional Reads

        read record (bmm01_dev,key=bme01a.firm_id$+bme01a.item_id$,dom=*next) bmm01a1$
        if bmm01a.est_yield=0 then bmm01a.est_yield=100

rem --- Print Bill

        u0$=ivm01a.gl_inv_acct$
        OutVect!.addItem(bme01a.bm_reference$)
        OutVect!.addItem(bme01a.item_id$)
        xwk=fnblank(9)
        OutVect!.addItem(b1$)
        xwk=fnblank(8)
        l=l+2

rem --- Component Items

        saveb0$=ivm01a.firm_id$+ivm01a.item_id$
        if bme01a.update_flag$="Y" then gosub dist_code
        read (bmm02_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next)
        while more
            bmm02a_key$=key(bmm02_dev,end=*break)
            if pos(saveb0$=bmm02a_key$)<>1 then break
            read record (bmm02_dev) bmm02a$
            if bmm02a.line_type$="M" then continue
            if cvs(bmm02a.effect_date$,3)<>"" and bme01a.prod_date$<bmm02a.effect_date$ then continue     
            if cvs(bmm02a.obsolt_date$,3)<>"" and bme01a.prod_date$>=bmm02a.obsolt_date$ then continue
            find record (bmm01_dev,key=firm_id$+bmm02a.item_id$,dom=item_info) bmm01a$
            if bmm01a.phantom_bill$="Y" then
                gosub explodephantoms
                read (bmm02_dev,key=bmm02a_key$)
                continue
            endif
item_info:
            skip=0
            o1$=""
            i0$=bmm02a.item_id$
            gosub get_iteminfo
            u1$=ivm01a.gl_inv_acct$
            find record (ivm02_dev,key=bme01a.firm_id$+bme01a.warehouse_id$+bmm02a.item_id$,dom=message) ivm02a$
            unitcost=ivm02a.unit_cost
            if lf$="Y" then 
                gosub lifo_fifo
                unitcost=ivw05a.unit_cost
            endif
            skip=1
            gosub distributions
message:
            if skip=0 then 
                o1$="** Missing Warehouse Record **"
                o1=1
            endif
                        
print_components: rem --- Print Components

            i0$=bmm02a.item_id$
            gosub get_iteminfo
            OutVect!.addItem("")
            OutVect!.addItem("   < "+bmm02a.item_id$+" "+o1$)
            xwk=fnblank(9)
            OutVect!.addItem("     "+b1$)
            xwk=fnblank(4)
            if bmm02a.divisor=0 then bmm02a.divisor=1
            OutVect!.addItem(str(ivm02a.qty_on_hand-ivm02a.qty_commit))
            OutVect!.addItem(str(fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered))
            if ivm02a.qty_on_hand-ivm02a.qty_commit<fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered then 
                OutVect!.addItem(str(abs(ivm02a.qty_on_hand-ivm02a.qty_commit-fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered)))
                short=short+1
            else
                OutVect!.addItem("")
            endif
            OutVect!.addItem(str(ivm02a.qty_on_order))
        wend
        memo$="Variance"

        gosub operation_sub
        if bme01a.qty_ordered=0 then div0=div0+1
        if ap$="Y" then gosub subcontracts
        if ivs01a.cost_method$<>"S" and bme01a.qty_ordered>0 then 
            cost=value/bme01a.qty_ordered
        else
            i0$=bme01a.item_id$
            gosub get_iteminfo
            gldate$=bme01a.prod_date$
            account$=bms01a.gl_prd_var$,cost=unitcost,amount=value-cost*bme01a.qty_ordered
            gosub glrecap
            if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
            account$=u0$
            amount=-amount
            gosub glrecap
        endif

rem --- Print Total for bme-01 record

        t0=t0+cost*bme01a.qty_ordered
        u0=u0+cost*bme01a.qty_ordered,u1=u1+cost*bme01a.qty_ordered

        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("Total")
        OutVect!.addItem(bme01a.item_id$)
        OutVect!.addItem(str(cost))
        OutVect!.addItem(str(bme01a.qty_ordered))
        OutVect!.addItem(str(cost*bme01a.qty_ordered))
        OutVect!.addItem(bme01a.update_flag$)
        xwk=fnblank(14)
        cost=0
    wend

dist_code: rem --- Dist Code

        if ar_dist$<>"N" then 
            read record (ivm02_dev,key=bme01a.firm_id$+bme01a.warehouse_id$+bme01a.item_id$,dom=*return) ivm02a2$
            find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=*next) arm10d$
            u0$=arm10d.gl_inv_acct$
            ivacct$=u0$
        endif
        return

distributions: rem --- Distribution

        if ar_dist$<>"N" then 
            find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=*next) arm10d$
            u1$=arm10d.gl_inv_acct$
        endif

rem --- Update G/L

        if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
        gldate$=bme01a.prod_date$
        account$=u0$
        amount=unitcost*fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered
        memo$="Item "+bme01a.item_id$
        precision 2
        amount=amount*1
        value=value+amount
        gosub glrecap
        gldate$=bme01a.prod_date$
        account$=u1$,amount=(-1)*amount,memo$="Item "+ivm02a.item_id$
        gosub glrecap
        precision num(ivs01a.precision$)
        return

done: rem --- Totals

        t9$="E"
        gosub warehouse
        if o1<>0 and o2$<>"" and div0<>0 then 
            BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
            if o1<>0 then 
                xwk=fnblank(21)
                OutVect!.addItem("*** Missing Warehouse Records, Can Not Proceed With Update At This Time")
                xwk=fnblank(8)
            endif
            if o2$<>"" then 
                xwk=fnblank(10)
                OutVect!.addItem(o2$)
                xwk=fnblank(21)
                OutVect!.addItem("*** Missing Operation Codes, Can Not Proceed With Update At This Time")
                xwk=fnblank(8)
            endif
            if div0<>0 then 
                xwk=fnblank(21)
                OutVect!.addItem("*** Records With Production Quantity Of 0 Exist. Can Not Proceed With Update At This Time")
                xwk=fnblank(8)
            endif 
            goto std_exit
        endif

        if short<>0 then
            BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
            xwk=fnblank(11)
            OutVect!.addItem("*** Warning - Amounts In The Shortage Column Will Create Negative On Hand Balances In Inventory.")
            xwk=fnblank(8)
            dim message$[1]
            message$[0]="Amounts In The Shortage Column Will Create Negative On Hand"
            message$[1]="Balances In Inventory (<Enter>=Continue)"
            call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
            if v3=4 then goto std_exit
        endif
        channel=bmw01_dev
        width=h0,page=h,update$="bmu_invproduction.aon"
        overlay$=update$
        if gl$="Y" then overlay$=pgmdir$+"glr_recap_DO.aon"
        out_action$="PRT-PDF"
        next_overlay$=overlay$
        goto std_exit

no_data: rem --- No Data

        t9$="E"
        xwk=fnblank(10)
        OutVect!.addItem("")
        OutVect!.addItem("*** Nothing To Report ***")
        OutVect!.addItem(8)
        goto std_exit

date_heading: rem --- Date Heading

        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("Production Date: "+fndate$(t1$))
        xwk=fnblank(19)
        if glstatus then call pgmdir$+"glc_datewarn.aon",printer_dev,t1$,glstatus,l,errors,status   
        return

subcontracts: rem --- Subcontracts

    dim sub[9]
    read (bmm05_dev,key=bme01a.firm_id$+bme01a.item_id$,dom=*next)

    while more
        bmm05a_key$=key(bmm05_dev,end=*break)
        if pos(bme01a.firm_id$+bme01a.item_id$=bmm05a_key$)<>1 then break
        read record (bmm05_dev) bmm05a$
        if cvs(bmm05a.effect_date$,3)<>"" and bme01a.prod_date$<bmm05a.effect_date$ then continue
        if cvs(bmm05a.obsolt_date$,3)<>"" and bme01a.prod_date$>=bmm05a.obsolt_date$ then continue
        if bmm05a.line_type$<>"S" then continue
        if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
        if bmm05a.divisor=0 then bmm05a.divisor=1
        a0=bme01a.qty_ordered*bmm05a.unit_cost*fnsub(bmm05a.qty_required,bmm05a.alt_factor,bmm05a.divisor)
        gldate$=bme01a.prod_date$
        account$=u0$,amount=a0,value=value+amount,memo$="Item "+cvs(bme01a.item_id$,2)+" "+bmm05a.ext_comments$
        gosub glrecap
        account$=bms01a.gl_pur_acct$
        amount=-a0
        gosub glrecap
    wend
    return

lifo_fifo: rem --- LIFO/FIFO

        dim item$[10]
        item$[0]=firm_id$
        item$[1]=bme01a.warehouse_id$,item$[2]=bmm02a.item_id$,type$="R",lf_date$=bme01a.prod_date$
        iv_chans[0]=ivm04_dev
        iv_chans[1]=ivw04_dev
        iv_chans[2]=ivm02_dev
        action$=ivs01a.lifofifo$+"I"
        qty=abs(fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered)
        cost=unitcost
        ivw05a.unit_cost=0
        if fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered<0 then 

rem --- Inquires For Tier Cost For Returned Items
        action$(2,1)="R"
        type$="I"
        call pgmdir$+"ivc_lf.aon",action$,type$,lf_date$,iv_chans[all],item$[all],places,qty,cost,ret_cost,status
        if ret_cost<>0 then cost=ret_cost
            type$="R"
        endif       

         call pgmdir$+"ivc_lf.aon",action$,type$,lf_date$,iv_chans[all],item$[all],places,qty,cost,ret_cost,status
         if ret_cost<>0 then ivw05a.unit_cost=ret_cost
         w9$=fill(17)+bmm02a.item_id$+bmmo2a.material_seq$
         write record (ivw05_dev,key=w9$) ivw05a$
         return

warehouse: rem --- Warehouse

        if t0$<>"" then 
            if t9$="" then t9$="A"
            gosub date_sub
            if t9$="A" then t9$=""
            xwk=fnblank(4)
            xwk=fnblank(7)

            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            OutVect!.addItem("Warehouse Total:")
            xwk=fnblank(2)
            OutVect!.addItem(str(t0))
            xwk=fnblank(5)
            t0=0,u0=0
        endif
        if t9$<>"" then return
        t0$=bme01a.warehouse_id$
        h3$="Not On File",t2$=bme01a.bm_reference$
        find record (ivm10c_dev,key=firm_id$+"C"+bme01a.warehouse_id$,dom=call_pgm) ivm10c$
        h3$=cvs((ivm10c.warehouse_id$)+" "+ivm10c.short_name$(1,20),2)
        headings$[2]="For Warehouse "+h3$
call_pgm:
        if gl$="Y" then call pgmdir$+"glc_datecheck.aon",t1$,"N",period$,year$,glstatus
        return

date_sub: rem --- Date

        if t1$<>"" then 
            gosub reference
            xwk=fnblank(4)
            xwk=fnblank(7)

            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            OutVect!.addItem("Date Total:")
            xwk=fnblank(2)
            OutVect!.addItem(str(u0))
            xwk=fnblank(5)
        endif
        if t9$<>"" then return
        u0=0
        t1$=bme01a.prod_date$
        if gl$="Y" then call pgmdir$+"glc_datecheck.aon",t1$,"N",period$,year$,glstatus
        gosub date_heading
        return

get_iteminfo: rem --- Item

        unitcost=0
        dim b1$(60),b6$(50),junk[10]
        read record (ivm01_dev,key=firm_id$+i0$,dom=*next) ivm01a$
        b1$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        b1$=b1$+fill(62-len(b1$))
        read record (ivm02_dev,key=firm_id$+bme01a.warehouse_id$+i0$,dom=*next) ivm02a$
        return

operation_sub: rem --- Operation

    dim x1$(50),x[13],k[11]
    read record (bmm01_dev,key=bme01a.firm_id$+bme01a.item_id$,dom=*next) bmm01a$
    read (bmm03_dev,key=bme01a.firm_id$+bme01a.item_id$,dom=*next)
    while more
        bmm03a_key$=key(bmm03_dev,end=*break)
        if pos(bme01a.firm_id$+bme01a.item_id$=bmm03a_key$)<>1 then break
        read record (bmm03_dev) bmm03a$
        if cvs(bmm03a.effect_date$,3)<>"" and bme01a.prod_date$<bmm03a.effect_date$ then continue
        if cvs(bmm03a.obsolt_date$,3)<>"" and bme01a.prod_date$>=bmm03a.obsolt_date$ then continue
        if bmm03a.line_type$="M" then continue
        find record (bmm08_dev,key=bmm03a.firm_id$+bmm03a.op_code$,dom=message1) bmm08a$
        goto assignment
message1:
        o2$=o2$+"** Missing Operation Code In Bill Number "+bmm03a.bill_no$+" Sequence "+bmm03a.op_seq$+" **"+'lf'
assignment:
        if bmm01a.std_lot_size=0 then bmm01a.std_lot_size=1
        if bmm03a.pcs_per_hour=0 then bmm03a.pcs_per_hour=1
        if bme01a.qty_ordered<>0 then 
            a0=fnop2(bme01a.qty_ordered,bmm03a.hrs_per_pce,bmm08a.direct_rate,
:           bmm03a.pcs_per_hour,bmm01a.est_yield,bmm03a.setup_time) 
        else 
            a0=0
        endif    
        a1=a0*bmm08a.ovhd_factor

rem --- Direct Labor

        precision 2
        a0=a0*1
        a1=a1*1
        gldate$=bme01a.prod_date$
        account$=bmm08a.gl_dir_lab$,amount=-a0,memo$="Item "+cvs(bme01a.item_id$,2)+" "+bmm08a.code_desc$
        gosub glrecap
        if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
        gldate$=bme01a.prod_date$
        account$=u0$,amount=a0,value=value+amount
        gosub glrecap

rem --- Overhead

        gldate$=bme01a.prod_date$
        account$=bmm08a.gl_ovh_var$,amount=-a1
        gosub glrecap
        if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
        gldate$=bme01a.prod_date$
        account$=u0$,amount=a1,value=value+amount
        gosub glrecap
        precision num(ivs01a.precision$)
    wend
    return

reference: rem --- Reference Total
     if t2$<>"" then 
        xwk=fnblank(4)
        xwk=fnblank(7)

        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("Reference Total:")
        xwk=fnblank(2)
        OutVect!.addItem(str(u1))
        xwk=fnblank(15)
     endif
         if t9$<>"" then return
         u1=0
         t2$=bme01a.bm_reference$
        return

explodephantoms: rem --- Explode Phantoms

        dim channel[15],info$[20],info[20]
        channel[0]=bmm01_dev
        channel[1]=bmm03_dev,channel[2]=bmm05_dev
        channel[3]=bmm08_dev
        channel[4]=ivm01_dev,channel[5]=ivm02_dev
        channel[6]=7
        channel[7]=sys01_dev,channel[8]=glm01_dev
        channel[9]=glw11_dev
        channel[10]=arm10d_dev,channel[11]=glt14_dev
        channel[12]=ivm04_dev,channel[13]=ivw04_dev,channel[14]=ivw05_dev
        channel[15]=bmm02_dev
        info$[0]=bmm02a.item_id$,info$[1]=ref1$,info$[2]=ref2$,info$[3]=ap$,info$[4]=ar_dist$
        info$[5]=o2$,info$[6]=bme01a.warwhouse_id$,info$[7]=bme01a.prod_date$,info$[8]=bme01a.update_flag$
        info$[9]=gl$,info$[10]=t1$,info$[11]=ivacct$
        info[0]=bme01a.qty_ordered*bmm02a.qty_required,info[1]=l,info[2]=l9,info[3]=headings
        info[4]=short,info[5]=o1,info[6]=0,info[7]=u0,info[8]=u1,info[9]=1
        info[10]=h,info[12]=glstatus,info[13]=bmm01a.est_yield*lbmm08a.setup_time/100,info[14]=value
        call pgmdir$+"bmc_fa.aon",channel[all],info$[all],info[all],headings$[all],bme01a.item_id$
        if info[11]>0 then exitto std_exit
        o2$=info$[5]
        l=info[1],short=info[4],o1=info[5],u0=info[7],u1=info[8],h=info[10],value=info[14]
        return

glrecap: rem --- Standard G/L Recap Routine

        if gl$="Y" then 
            call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
        endif
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))
    def fnop2(q1,q2,q3,q4,q5,q6)=q1*100*(q2*q3/q4)/q5+SGN(q1)*q6*q3
    def fnsub(q1,q2,q3)=q1*q2/q3

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
