rem --- Inventory Production Register
rem --- Program bmr_invproduction.aon v8.0.0 15Jan2008 (bmr_ha)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/15/2008 01:44:23)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

	setesc std_error
	seterr std_error

rem --- Document initializations

	OutVect!=bbjAPI().getSysGui().makeVector()
	HdrVect!=bbjAPI().getSysGui().makeVector()
	BrkVect!=bbjAPI().getSysGui().makeVector()
	TotVect!=bbjAPI().getSysGui().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- see if batching

	call stbl("+DIR_PGM")+"adc_getbatch.aon","",pgm(-2),rd_table_chans$[all]
    batch_no$=stbl("+BATCH_NO")
    process_id$=stbl("+PROCESS_ID")

rem --- set rd_alias_id$
    
    rd_alias_id$=pgm(-2)
    rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
    rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
	rd_alias_id$=rd_alias_id$(1,min(len(rd_alias_id$),16))

rem --- Prepare for call to bmc_explodephantoms.aon

	dim template$[16]
	
rem --- Open/Lock files

	num_files=11
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="BME_PRODUCT",open_opts$[1]="OTA"
	open_tables$[2]="BMM_BILLMAST",open_opts$[2]="OTA"
	open_tables$[3]="BMM_BILLMAT",open_opts$[3]="OTA"
	open_tables$[4]="BMM_BILLOPER",open_opts$[4]="OTA"
	open_tables$[5]="BMC_OPCODES",open_opts$[5]="OTA"
	open_tables$[6]="BMS_PARAMS",open_opts$[6]="OTA"
	open_tables$[7]="IVM_ITEMMAST",open_opts$[7]="OTA"
	open_tables$[8]="IVM_ITEMWHSE",open_opts$[8]="OTA"
	open_tables$[9]="IVC_WHSECODE",open_opts$[9]="OTA"
	open_tables$[10]="IVS_PARAMS",open_opts$[10]="OTA"
	open_tables$[11]="GLS_PARAMS",open_opts$[11]="OTA"

	if num(batch_no$)=0 open_opts$[1]=open_opts$[1]+"L";rem lock if not batching
	
	gosub open_tables

	bme01_dev=num(open_chans$[1])
	bmm01_dev=num(open_chans$[2])
	bmm02_dev=num(open_chans$[3])
	bmm03_dev=num(open_chans$[4])
	bmm08_dev=num(open_chans$[5])
	bms01a_dev=num(open_chans$[6])
	ivm01_dev=num(open_chans$[7])
	ivm02_dev=num(open_chans$[8])
	ivm10c_dev=num(open_chans$[9])
	ivs01a_dev=num(open_chans$[10])
	gls01a_dev=num(open_chans$[11])

rem --- Dimension string templates

	dim bme01a$:open_tpls$[1],bmm01a$:open_tpls$[2],bmm02a$:open_tpls$[3]
	dim bmm03a$:open_tpls$[4],bmm08a$:open_tpls$[5],bms01a$:open_tpls$[6]
	dim ivm01a$:open_tpls$[7],ivm02a$:open_tpls$[8],ivm10c$:open_tpls$[9]
	dim ivs01a$:open_tpls$[10],gls01a$:open_tpls$[11]

	template$[0]=open_tpls$[2]; rem bmm01a
	template$[1]=open_tpls$[4]; rem bmm03a
	template$[3]=open_tpls$[5]; rem bmm08a
	template$[4]=open_tpls$[7]; rem ivm01a
	template$[5]=open_tpls$[8]; rem ivm02a
	template$[6]=open_tpls$[10]; rem ivs01a
	template$[7]=open_tpls$[6]; rem bms01a
	template$[15]=open_tpls$[3]; rem bmm02a
	template$[16]=open_tpls$[11]; rem gls01a

rem --- Is General Ledger installed and being used?
 
	application$="IV"
	gl$="N"
	status=0
	source$=pgm(-2)
	call pgmdir$+"glc_ctlcreate.aon",err=*next,
:				source$,application$,glw11$,gl$,status
	if status 
		goto std_exit_no_update
	endif

rem --- Additional file opens

	num_files=3
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="GLM_ACCT",open_opts$[1]="OTA"
	open_tables$[2]="GLE_DAILYDETAIL",open_opts$[2]="OTA"
	open_tables$[3]="GLW_DAILYDETAIL",open_opts$[3]="OTA"

	if gl$="Y" gosub open_tables
	if status goto std_exit_no_update

	glm01_dev=num(open_chans$[1])
	glt04_dev=num(open_chans$[2])
	glw11_dev=num(open_chans$[3])

    dim glm01a$:open_tpls$[1]
    
rem --- Clear trans for this firm/process/batch from glw-11 work file (if not batching, batch_no$ is zero, and will clear all recs this firm/process)

	if gl$="Y"
		rec_pfx$=firm_id$+process_id$+batch_no$
		call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
	endif

rem --- Retrieve parameter records

	bms01a_key$=firm_id$+"BM00"
	find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
	ivs01a_key$=firm_id$+"IV00"
	find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
	gls01a_key$=firm_id$+"GL00"
	find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$

rem --- Parameters

	n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$,source$=pgm(-2)
	dim r0$(36),info$[20]
	il=ivs01a.item_id_len
        
rem --- Is AR installed? then open files ars-01 and arm-10c

    call pgmdir$+"adc_application.aon","AR",info$[all]
    if info$[20]<>"N" then 
		num_files=2
		dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
		open_tables$[1]="ARC_DISTCODE",open_opts$[1]="OTA"
		open_tables$[2]="ARS_PARAMS",open_opts$[2]="OTA"
		gosub open_tables
		arm10d_dev=num(open_chans$[1])
		ars01a_dev=num(open_chans$[2])
        dim arm10d$:open_tpls$[1]
		dim ars01a$:open_tpls$[2]
		template$[10]=open_tpls$[1]
        ar_dist$="N"
        find record (ars01a_dev,key=firm_id$+"AR00",dom=initial) ars01a$
        if ars01a.dist_by_item$="Y" then ar_dist$="Y"
    endif  

initial:
	dim p[4],g[4],desc[3],info$[20]
	desc[1]=num(ivs01a.desc_len_01$)
	desc[2]=num(ivs01a.desc_len_02$)
	desc[3]=num(ivs01a.desc_len_03$)
	
	p[0]=ivs01a.item_id_len
	p[1]=ivs01a.vendor_prd_len
	p[2]=num(ivs01a.precision$)
	p[3]=ivs01a.ls_no_len
	lf$="N"
	if pos(ivs01a.lifofifo$="LF")>0 then lf$="Y"

	g[0]=num(gls01a.total_pers$)
	g[1]=num(gls01a.current_per$)
	g[2]=num(gls01a.current_year$)
    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,acct_length
    g[3]=acct_length
	g[4]=max(10,g[3])

rem --- Init Data
    
	precision num(ivs01a.precision$)
	h=0,h1$=n1$,h2$=n3$,o1$="",o2$="",o1=0,noUpdate=0
	l9=59
	l=l9+1,headings=3,glstatus=0

	dim headings$[headings]
	dim a[1],s[10],k[11],lx[11],sub[9],b1$(60),c1$(64)
	headings$[0]=h1$
	headings$[1]=h2$,errors=0
	headings$[2]="[HEADER]"
	
	if num(batch_no$)<>0 then headings$[1]=headings$[1]+ " (Batch: "+batch_no$+")"

	call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,m1
	call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,m2
	call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,m3
	dashes$=fill(m1,"-")
	wip_acct$=bms01a.gl_wip_acct$
	m0=p[0]
	units=0
	if m0<6 then m0=6
	places=num(ivs01a.precision$)
	more=1

rem --- Retrieve key templates
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BME_PRODUCT","PRIMARY",bme01a_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLSUB","PRIMARY",bmm05a_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03a_key_tpl$,rd_table_chans$[all],status$
	dim bme01a_key$:bme01a_key_tpl$
	dim bmm02a_key$:bmm02a_key_tpl$
	dim bmm05a_key$:bmm05a_key_tpl$
	dim bmm03a_key$:bmm03a_key_tpl$

rem --- Open Additional Files
   
    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]
    if ap$="Y" then
		num_files=1
		dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
		open_tables$[1]="BMM_BILLSUB",open_opts$[1]="OTA"
		
		gosub open_tables
		
        bmm05_dev=num(open_chans$[1])
		dim bmm05a$:open_tpls$[1]
		template$[2]=open_tpls$[1]
    endif  

    if lf$="Y" then 
		num_files=3
		dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="IVM_ITEMTIER",open_opts$[1]="OTA"
        open_tables$[2]="IVW_LFDET",open_opts$[2]="OTA"
        open_tables$[3]="IVW_LFCOST",open_opts$[3]="OTA"

		gosub open_tables
        
        ivm04_dev=num(open_chans$[1])
		ivw04_dev=num(open_chans$[2])
		ivw05_dev=num(open_chans$[3])
        dim ivm04a$:open_tpls$[1],ivw04a$:open_tpls$[2],ivw05a$:open_tpls$[3]
		template$[12]=open_tpls$[1]; rem ivm04 IVM_ITEMTIER
		template$[13]=open_tpls$[2]; rem ivw04 IVW_LFDET
		template$[14]=open_tpls$[3]; rem ivw05 IVW_LFCOST
    endif   

    if gl$="Y" then 
		num_files=3
		dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="GLM_ACCT",open_opts$[1]="OTA"
		open_tables$[2]="GLE_DAILYDETAIL",open_opts$[2]="OTA"
		open_tables$[3]="GLW_DAILYDETAIL",open_opts$[3]="OTA"
    		
		gosub open_tables
		
        glm01_dev=num(open_chans$[1])
		glt04_dev=num(open_chans$[2])
		glw11_dev=num(open_chans$[3])
		dim glm01a$:open_tpls$[1]
		template$[8]=open_tpls$[1]
		template$[9]=open_tpls$[2]
		rec_pfx$=firm_id$+process_id$+batch_no$
		call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
	endif

rem --- Options

	u0$=wip_acct$

rem --- Run Report?

	msg_id$="AON_RUN_QUERY"
	dim x$:stbl("+SYSINFO_TPL")
	dim msg_tokens$[1]
	x$=stbl("+SYSINFO")                                                            
	msg_tokens$[1]=x.task_desc$
	gosub disp_message

	if msg_opt$<>"Y" then goto std_exit_no_report

	call pgmdir$+"adc_progress.aon","N","","","","",0,bme01_dev,1,meter_num,status

rem ---  column heading

	dim columns$[9,10]
	columns=9
	columns$[0,0]=Translate!.getTranslation("AON_REF_#"),           columns$[0,1]="C",columns$[0,2]="15"
	columns$[1,0]=Translate!.getTranslation("AON_MAIN_BILL_NUMBER"),columns$[1,1]="C",columns$[1,2]="20"
	columns$[2,0]=Translate!.getTranslation("AON_COST"),            columns$[2,1]="N",columns$[2,2]="12",columns$[2,3]=m3$,columns$[2,10]="T"
	columns$[3,0]=Translate!.getTranslation("AON_QTY"),             columns$[3,1]="N",columns$[3,2]="12",columns$[3,3]=m2$,columns$[3,10]="T"
	columns$[4,0]=Translate!.getTranslation("AON_TOTAL"),           columns$[4,1]="N",columns$[4,2]="12",columns$[4,3]=m1$,columns$[4,10]="T"
	columns$[5,0]=Translate!.getTranslation("AON_UPDATE?"),         columns$[5,1]="C",columns$[5,2]="8"
	columns$[6,0]=Translate!.getTranslation("AON_AVAILABLE"),       columns$[6,1]="N",columns$[6,2]="12",columns$[6,3]=m2$
	columns$[7,0]=Translate!.getTranslation("AON_REQUIRED"),        columns$[7,1]="N",columns$[7,2]="12",columns$[7,3]=m2$
	columns$[8,0]=Translate!.getTranslation("AON_SHORTAGE"),        columns$[8,1]="N",columns$[8,2]="12",columns$[8,3]=m2$
	columns$[9,0]=Translate!.getTranslation("AON_ON-ORDER"),        columns$[9,1]="N",columns$[9,2]="12",columns$[9,3]=m2$

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Initial Read

	read (bme01_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)
	bme01a_key$=key(bme01_dev,end=no_data)
	if pos(firm_id$=bme01a_key$)<>1 then goto no_data

rem --- Heading Read
    while more

        value=0
        read record (bme01_dev,end=*break) bme01a$

rem --- Breaks

        if bme01a.firm_id$<>firm_id$ then break; rem " --- Company"
		if bme01a.batch_no$<>batch_no$ then break; rem "--- Batch Number"
        if bme01a.warehouse_id$<>t0$ then gosub warehouse; rem " --- Warehouse"
        if bme01a.prod_date$<>t1$ then gosub date_sub; rem " --- Production Date"
        if bme01a.bm_reference$<>t2$ then gosub reference; rem " --- Reference Number"
        call pgmdir$+"adc_progress.aon","S","","","",bme01a.warehouse_id$+" "+bme01a.bm_reference$+" "+bme01a.item_id$,0,0,1,meter_num,status
        ref1$=Translate!.getTranslation("AON_WHSE_")+bme01a.warehouse_id$
        ref2$=bme01a.bm_reference$,ref3$=Translate!.getTranslation("AON_PROD_ENTRY")

rem --- Get Item Info

        i0$=bme01a.item_id$
        gosub get_iteminfo
        ivacct$=ivm01a.gl_inv_acct$
        if bme01a.update_flag$="Y" and ivm01a.lotser_item$="Y" and ivm01a.inventoried$="Y" then
            noUpdate=1
            OutVect!.addItem(Translate!.getTranslation("AON_***_CANNOT_UPDATE_INV_LS_ITEM"))
            xwk=fnblank(columns)
        endif

rem --- Additional Reads

        read record (bmm01_dev,key=bme01a.firm_id$+bme01a.item_id$,dom=*next) bmm01a1$
        if bmm01a.est_yield=0 then bmm01a.est_yield=100

rem --- Print Bill

        u0$=ivm01a.gl_inv_acct$
        OutVect!.addItem(bme01a.bm_reference$)
        OutVect!.addItem(bme01a.item_id$)
        xwk=fnblank(9)
        OutVect!.addItem(b1$)
        xwk=fnblank(8)
        l=l+2

rem --- Component Items

        saveb0$=ivm01a.firm_id$+ivm01a.item_id$
        if bme01a.update_flag$="Y" then gosub dist_code
        read (bmm02_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next)
        while more
            bmm02a_key$=key(bmm02_dev,end=*break)
            if pos(saveb0$=bmm02a_key$)<>1 then break
            read record (bmm02_dev) bmm02a$
            if bmm02a.line_type$="M" then continue
            if cvs(bmm02a.effect_date$,3)<>"" and bme01a.prod_date$<bmm02a.effect_date$ then continue     
            if cvs(bmm02a.obsolt_date$,3)<>"" and bme01a.prod_date$>=bmm02a.obsolt_date$ then continue
            find record (bmm01_dev,key=firm_id$+bmm02a.item_id$,dom=item_info) bmm01a$
            if bmm01a.phantom_bill$="Y" then
                gosub explodephantoms
                read (bmm02_dev,key=bmm02a_key$)
                continue
            endif
item_info:
            skip=0
            o1$=""
            i0$=bmm02a.item_id$
            gosub get_iteminfo
            u1$=ivm01a.gl_inv_acct$
            find record (ivm02_dev,key=bme01a.firm_id$+bme01a.warehouse_id$+bmm02a.item_id$,dom=message) ivm02a$
            unitcost=ivm02a.unit_cost
            if lf$="Y" then 
                gosub lifo_fifo
                unitcost=ivw05a.unit_cost
            endif
            skip=1
            gosub distributions
message:
            if skip=0 then 
                o1$=Translate!.getTranslation("AON_**_MISSING_WAREHOUSE_RECORD_**")
                o1=1
            endif
                        
print_components: rem --- Print Components

            i0$=bmm02a.item_id$
            gosub get_iteminfo
            if ivm01a.lotser_item$="Y" and ivm01a.inventoried$="Y" then
                noUpdate=1
                OutVect!.addItem(Translate!.getTranslation("AON_***_CANNOT_UPDATE_INV_LS_ITEM"))
                xwk=fnblank(columns)
            endif
            OutVect!.addItem("")
            OutVect!.addItem("   < "+bmm02a.item_id$+" "+o1$)
            xwk=fnblank(9)
            OutVect!.addItem("     "+b1$)
            xwk=fnblank(4)
            if bmm02a.divisor=0 then bmm02a.divisor=1
            OutVect!.addItem(str(ivm02a.qty_on_hand-ivm02a.qty_commit))
            OutVect!.addItem(str(fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered))
            if ivm02a.qty_on_hand-ivm02a.qty_commit<fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered then 
                OutVect!.addItem(str(abs(ivm02a.qty_on_hand-ivm02a.qty_commit-fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered)))
                short=short+1
            else
                OutVect!.addItem("")
            endif
            OutVect!.addItem(str(ivm02a.qty_on_order))
        wend
        memo$=Translate!.getTranslation("AON_VARIANCE")

        gosub operation_sub
        if bme01a.qty_ordered=0 then div0=div0+1
        if ap$="Y" then gosub subcontracts
        if ivs01a.cost_method$<>"S" and bme01a.qty_ordered>0 then 
            cost=value/bme01a.qty_ordered
        else
            i0$=bme01a.item_id$
            gosub get_iteminfo
            gldate$=bme01a.prod_date$
            account$=bms01a.gl_prd_var$,cost=unitcost,amount=value-cost*bme01a.qty_ordered
            gosub glrecap
            if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
            account$=u0$
            amount=-amount
            gosub glrecap
        endif

rem --- Print Total for bme-01 record

        t0=t0+cost*bme01a.qty_ordered
        u0=u0+cost*bme01a.qty_ordered,u1=u1+cost*bme01a.qty_ordered

        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem(Translate!.getTranslation("AON_TOTAL"))
        OutVect!.addItem(bme01a.item_id$)
        OutVect!.addItem(str(cost))
        OutVect!.addItem(str(bme01a.qty_ordered))
        OutVect!.addItem(str(cost*bme01a.qty_ordered))
        OutVect!.addItem(bme01a.update_flag$)
        xwk=fnblank(14)
        cost=0
    wend

rem --- Totals

	t9$="E"
	gosub warehouse
	if noUpdate or o1<>0 or o2$<>"" or div0<>0 then 
		BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
		HdrVect!.addItem(Translate!.getTranslation("AON_FOR_WAREHOUSE_")+h3$)
        if noUpdate then
            xwk=fnblank(21)
            OutVect!.addItem(Translate!.getTranslation("AON_***_CANNOT_UPDATE_INV_LS_ITEM")+" "+Translate!.getTranslation("AON_CANNOT_PROCEED_WITH_UPDATE"))
            xwk=fnblank(columns-1)
        endif
		if o1<>0 then
			xwk=fnblank(21)
			OutVect!.addItem(Translate!.getTranslation("AON_***_MISSING_WAREHOUSE_RECORDS,_CAN_NOT_PROCEED_WITH_UPDATE_AT_THIS_TIME"))
			xwk=fnblank(8)
		endif
		if o2$<>"" then
			xwk=fnblank(10)
			OutVect!.addItem(o2$)
			xwk=fnblank(21)
			OutVect!.addItem(Translate!.getTranslation("AON_***_MISSING_OPERATION_CODES,_CAN_NOT_PROCEED_WITH_UPDATE_AT_THIS_TIME"))
			xwk=fnblank(8)
		endif
		if div0<>0 then
			xwk=fnblank(21)
			OutVect!.addItem(Translate!.getTranslation("AON_***_RECORDS_WITH_PRODUCTION_QUANTITY_OF_0_EXIST._CAN_NOT_PROCEED_WITH_UPDATE_AT_THIS_TIME"))
			xwk=fnblank(8)
		endif 
		goto std_exit_no_update
	endif

	if short<>0 then
		BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
		HdrVect!.addItem(Translate!.getTranslation("AON_FOR_WAREHOUSE_")+h3$)
		xwk=fnblank(11)
		OutVect!.addItem(Translate!.getTranslation("AON_***_WARNING_-_AMOUNTS_IN_THE_SHORTAGE_COLUMN_WILL_CREATE_NEGATIVE_ON_HAND_BALANCES_IN_INVENTORY."))
		xwk=fnblank(8)
		dim message$[1]
		message$[0]=Translate!.getTranslation("AON_AMOUNTS_IN_THE_SHORTAGE_COLUMN_WILL_CREATE_NEGATIVE_ON_HAND")
		message$[1]=Translate!.getTranslation("AON_BALANCES_IN_INVENTORY_(<ENTER>=CONTINUE)")
		call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
		if v3=4 then goto std_exit_no_update
	endif
	channel=bmw01_dev
	width=132
	page=h
	update$="bmu_invproduction.aon"
	overlay$=update$

	if gl$="Y" then overlay$=pgmdir$+"glr_recap.aon"
	out_action$="PRT-PDF"
	next_overlay$=overlay$
	goto std_exit

no_data: rem --- No Data

        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report

date_heading: rem --- Date Heading

        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
		HdrVect!.addItem(Translate!.getTranslation("AON_FOR_WAREHOUSE_")+h3$)
        OutVect!.addItem(Translate!.getTranslation("AON_PRODUCTION_DATE:_")+fndate$(t1$))
        xwk=fnblank(19)
        if glstatus then call pgmdir$+"glc_datewarn.aon",printer_dev,t1$,glstatus,l,errors,status   
        return

dist_code: rem --- Dist Code

        if ar_dist$<>"N" then 
            read record (ivm02_dev,key=bme01a.firm_id$+bme01a.warehouse_id$+bme01a.item_id$,dom=*return) ivm02a2$
            find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=*next) arm10d$
            u0$=arm10d.gl_inv_acct$
            ivacct$=u0$
        endif
        return

distributions: rem --- Distribution

        if ar_dist$<>"N" then 
            find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=*next) arm10d$
            u1$=arm10d.gl_inv_acct$
        endif

rem --- Update G/L

        if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
        gldate$=bme01a.prod_date$
        account$=u0$
        amount=unitcost*fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered
        memo$=Translate!.getTranslation("AON_ITEM_")+bme01a.item_id$
        precision 2
        amount=amount*1
        value=value+amount
        gosub glrecap
        gldate$=bme01a.prod_date$
        account$=u1$,amount=(-1)*amount,memo$=Translate!.getTranslation("AON_ITEM_")+ivm02a.item_id$
        gosub glrecap
        precision num(ivs01a.precision$)
        return

subcontracts: rem --- Subcontracts

    dim sub[9]
    read (bmm05_dev,key=bme01a.firm_id$+bme01a.item_id$,dom=*next)

    while more
        bmm05a_key$=key(bmm05_dev,end=*break)
        if pos(bme01a.firm_id$+bme01a.item_id$=bmm05a_key$)<>1 then break
        read record (bmm05_dev) bmm05a$
        if cvs(bmm05a.effect_date$,3)<>"" and bme01a.prod_date$<bmm05a.effect_date$ then continue
        if cvs(bmm05a.obsolt_date$,3)<>"" and bme01a.prod_date$>=bmm05a.obsolt_date$ then continue
        if bmm05a.line_type$<>"S" then continue
        if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
        if bmm05a.divisor=0 then bmm05a.divisor=1
        a0=bme01a.qty_ordered*bmm05a.unit_cost*fnsub(bmm05a.qty_required,bmm05a.alt_factor,bmm05a.divisor)
        gldate$=bme01a.prod_date$
        account$=u0$,amount=a0,value=value+amount,memo$=Translate!.getTranslation("AON_ITEM_")+cvs(bme01a.item_id$,2)+" "+bmm05a.ext_comments$
        gosub glrecap
        account$=bms01a.gl_pur_acct$
        amount=-a0
        gosub glrecap
    wend
    return

lifo_fifo: rem --- LIFO/FIFO

		dim iv_tmpls$[10]
		iv_tmpls$[1]=template$[5];  rem ivm-02
		iv_tmpls$[2]=template$[12]; rem ivm04 IVM_ITEMTIER
		iv_tmpls$[3]=template$[13]; rem ivw04 IVW_LFDET
	
		dim iv_chans[10]
		iv_chans[1]=ivm02_dev
		iv_chans[2]=ivm04_dev
		iv_chans[3]=ivw04_dev
		
        dim item$[10]
        item$[0]=firm_id$
        item$[1]=bme01a.warehouse_id$
		item$[2]=bmm02a.item_id$
		
		type$="R"
		lf_date$=bme01a.prod_date$
		action$=ivs01a.lifofifo$+"I"
		
        qty=abs(fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered)
        cost=unitcost
        ivw05a.unit_cost=0
        
rem --- Inquires For Tier Cost For Returned Items
		if fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered<0 then 
			action$(2,1)="R"
			type$="I"
			call pgmdir$+"ivc_lifofifo.aon",action$,type$,lf_date$,iv_chans[all],iv_tmpls$[all],item$[all],places,qty,cost,ret_cost,status
			if ret_cost<>0 then cost=ret_cost
			type$="R"
		endif       

		call pgmdir$+"ivc_lifofifo.aon",action$,type$,lf_date$,iv_chans[all],iv_tmpls$[all],item$[all],places,qty,cost,ret_cost,status
		if ret_cost<>0 then ivw05a.unit_cost=ret_cost
		w9$=fill(17)+bmm02a.item_id$+bmm02a.material_seq$
        write record (ivw05_dev,key=w9$) ivw05a$
        return

warehouse: rem --- Warehouse

        if t0$<>"" then 
            if t9$="" then t9$="A"
            gosub date_sub
            if t9$="A" then t9$=""
            xwk=fnblank(4)
            xwk=fnblank(7)

            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            OutVect!.addItem(Translate!.getTranslation("AON_WAREHOUSE_TOTAL:"))
            xwk=fnblank(2)
            OutVect!.addItem(str(t0))
            xwk=fnblank(5)
            t0=0,u0=0
        endif
        if t9$<>"" then return
        t0$=bme01a.warehouse_id$
        h3$=Translate!.getTranslation("AON_NOT_ON_FILE"),t2$=bme01a.bm_reference$
        find record (ivm10c_dev,key=firm_id$+"C"+bme01a.warehouse_id$,dom=call_pgm) ivm10c$
        h3$=cvs((ivm10c.warehouse_id$)+" "+ivm10c.short_name$(1,20),2)
		BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
		HdrVect!.addItem(Translate!.getTranslation("AON_FOR_WAREHOUSE_")+h3$)

call_pgm:
        if gl$="Y" then call pgmdir$+"glc_datecheck.aon",t1$,"N",period$,year$,glstatus
        return

date_sub: rem --- Date

        if t1$<>"" then 
            gosub reference
            xwk=fnblank(4)
            xwk=fnblank(7)

            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            OutVect!.addItem(Translate!.getTranslation("AON_DATE_TOTAL:"))
            xwk=fnblank(2)
            OutVect!.addItem(str(u0))
            xwk=fnblank(5)
        endif
        if t9$<>"" then return
        u0=0
        t1$=bme01a.prod_date$
        if gl$="Y" then call pgmdir$+"glc_datecheck.aon",t1$,"N",period$,year$,glstatus
        gosub date_heading
        return

get_iteminfo: rem --- Item

        unitcost=0
        dim b1$(60),b6$(50),junk[10]
        read record (ivm01_dev,key=firm_id$+i0$,dom=*next) ivm01a$
        b1$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        b1$=b1$+fill(62-len(b1$))
        read record (ivm02_dev,key=firm_id$+bme01a.warehouse_id$+i0$,dom=*next) ivm02a$
        return

operation_sub: rem --- Operation

    dim x1$(50),x[13],k[11]
    read record (bmm01_dev,key=bme01a.firm_id$+bme01a.item_id$,dom=*next) bmm01a$
    read (bmm03_dev,key=bme01a.firm_id$+bme01a.item_id$,dom=*next)
    while more
        bmm03a_key$=key(bmm03_dev,end=*break)
        if pos(bme01a.firm_id$+bme01a.item_id$=bmm03a_key$)<>1 then break
        read record (bmm03_dev) bmm03a$
        if cvs(bmm03a.effect_date$,3)<>"" and bme01a.prod_date$<bmm03a.effect_date$ then continue
        if cvs(bmm03a.obsolt_date$,3)<>"" and bme01a.prod_date$>=bmm03a.obsolt_date$ then continue
        if bmm03a.line_type$="M" then continue
        find record (bmm08_dev,key=bmm03a.firm_id$+bmm03a.op_code$,dom=message1) bmm08a$
        goto assignment
message1:
        o2$=o2$+Translate!.getTranslation("AON_**_MISSING_OPERATION_CODE_IN_BILL_NUMBER_")+bmm03a.bill_no$+Translate!.getTranslation("AON__SEQUENCE_")+bmm03a.op_seq$+" **"+'lf'
assignment:
        if bmm01a.std_lot_size=0 then bmm01a.std_lot_size=1
        if bmm03a.pcs_per_hour=0 then bmm03a.pcs_per_hour=1
        if bme01a.qty_ordered<>0 then 
            a0=fnop2(bme01a.qty_ordered,bmm03a.hrs_per_pce,bmm08a.direct_rate,
:           bmm03a.pcs_per_hour,bmm01a.est_yield,bmm03a.setup_time) 
        else 
            a0=0
        endif    
        a1=a0*bmm08a.ovhd_factor

rem --- Direct Labor

        precision 2
        a0=a0*1
        a1=a1*1
        gldate$=bme01a.prod_date$
        account$=bmm08a.gl_dir_lab$,amount=-a0,memo$=Translate!.getTranslation("AON_ITEM_")+cvs(bme01a.item_id$,2)+" "+bmm08a.code_desc$
        gosub glrecap
        if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
        gldate$=bme01a.prod_date$
        account$=u0$,amount=a0,value=value+amount
        gosub glrecap

rem --- Overhead

        gldate$=bme01a.prod_date$
        account$=bmm08a.gl_ovh_var$,amount=-a1
        gosub glrecap
        if bme01a.update_flag$="N" then u0$=wip_acct$ else u0$=ivacct$
        gldate$=bme01a.prod_date$
        account$=u0$,amount=a1,value=value+amount
        gosub glrecap
        precision num(ivs01a.precision$)
    wend
    return

reference: rem --- Reference Total
     if t2$<>"" then 
        xwk=fnblank(4)
        xwk=fnblank(7)

        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem(Translate!.getTranslation("AON_REFERENCE_TOTAL:"))
        xwk=fnblank(2)
        OutVect!.addItem(str(u1))
        xwk=fnblank(15)
     endif
         if t9$<>"" then return
         u1=0
         t2$=bme01a.bm_reference$
        return

explodephantoms: rem --- Explode Phantoms

        dim channel[16],info$[20],info[20]
        channel[0]=bmm01_dev
        channel[1]=bmm03_dev,channel[2]=bmm05_dev
        channel[3]=bmm08_dev
        channel[4]=ivm01_dev,channel[5]=ivm02_dev
        channel[6]=ivs01a_dev
        channel[7]=bms01a_dev,channel[8]=glm01_dev
        channel[9]=glw11_dev
        channel[10]=arm10d_dev
        channel[12]=ivm04_dev,channel[13]=ivw04_dev,channel[14]=ivw05_dev
        channel[15]=bmm02_dev
		channel[16]=gls01a_dev
        info$[0]=bmm02a.item_id$,info$[1]=ref1$,info$[2]=ref2$,info$[3]=ap$,info$[4]=ar_dist$
        info$[5]=o2$,info$[6]=bme01a.warehouse_id$,info$[7]=bme01a.prod_date$,info$[8]=bme01a.update_flag$
        info$[9]=gl$,info$[10]=t1$,info$[11]=ivacct$
        info[0]=bme01a.qty_ordered*bmm02a.qty_required,info[1]=l,info[2]=l9,info[3]=headings
        info[4]=short,info[5]=o1,info[6]=0,info[7]=u0,info[8]=u1,info[9]=1
        info[10]=h,info[12]=glstatus,info[13]=bmm01a.est_yield*bmm08a.setup_time/100,info[14]=value
        call pgmdir$+"bmc_explodephantoms.aon",channel[all],info$[all],info[all],headings$[all],bme01a.item_id$,template$[all],outVect!,Translate!
        if info[11]>0 then exitto std_exit
        o2$=info$[5]
        l=info[1],short=info[4],o1=info[5],u0=info[7],u1=info[8],h=info[10],value=info[14]
        return

glrecap: rem --- Standard G/L Recap Routine

        if gl$="Y" then 
            call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
        endif
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))
    def fnop2(q1,q2,q3,q4,q5,q6)=q1*100*(q2*q3/q4)/q5+SGN(q1)*q6*q3
    def fnsub(q1,q2,q3)=q1*q2/q3

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
       msg_id$="ENTRY_OPEN_ERROR"
       dim msg_tokens$[1]
       msg_tokens$[1]=open_status$
       gosub disp_message
       rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
       release
    endif

    return

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit_no_report:

    OutVect!=null();rem nothing to print, or some other err such that no report
    
std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
	
std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
