rem --- Print Unlinked Operation Sequences in Mat/Subs
rem --- Program converted from bmr_lb, 28Jun2011
rem --- Created by Codeport Utility (06/28/2011 10:48:00)

rem --- AddonSoftware
rem --- Copyright (c) 1981-2011 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Init Data

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Document initializations

    headings=3
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]="Detail Exception Report"
    headings$[2]="From Bill "+bill_from$+" Through Bill "+bill_thru$
	
	OutVect!=bbjAPI().getSysGui().makeVector()
	HdrVect!=bbjAPI().getSysGui().makeVector()
	BrkVect!=bbjAPI().getSysGui().makeVector()
	TotVect!=bbjAPI().getSysGui().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)
	
	columns = 4
	dim columns$[columns,10]
	columns$[0,0]="Bill No.",columns$[0,1]="C",columns$[0,2]="15"
	columns$[1,0]="Type",columns$[1,1]="C",columns$[1,2]="10"
	columns$[2,0]="Seq",columns$[2,1]="C",columns$[2,2]="20"
	columns$[3,0]="Op Seq",columns$[3,1]="C",columns$[3,2]="20"
	columns$[4,0]="Comments",columns$[4,1]="C",columns$[4,2]="30"

rem --- Background

    call pgmdir$+"adc_progress.aon","NC","BMM_BILLMAST","","","",0,bmm01_dev,1,meter_num,status

rem --- Initial Read Of Bill

    read (bmm01_dev,key=firm_id$+billfrom$,dom=*next)

l1100: rem --- Read Loop For Materials
	while 1
		k$=key(bmm01_dev,end=*break)
		if pos(firm_id$=k$)<>1 break
		if billthru$<>"" if k$(3,len(billthru$))>billthru$ break
		read (bmm01_dev)
		read (bmm02_dev,key=k$(1,22),dom=*next)

		while 1
			k1$=key(bmm02_dev,end=*break)
			if pos(k$=k1$)<>1 break
			read record (bmm02_dev) bmm02a$
			if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

rem --- Test for Print

			if num(bmm02a.op_int_seq_ref$)=0 continue
			dim bmm03a$:fattr(bmm03a$)
			find record (bmm03_dev,key=firm_id$+bmm02a.bill_no$+bmm02a.op_int_seq_ref$,knum="AO_BILL_OPSEQ",dom=print_mat) bmm03a$
			if bmm03a.line_type$="M" goto print_mat
			continue

print_mat: rem --- Print Material Line

			OutVect!.addItem(bmm02a.bill_no$)
			OutVect!.addItem("Material")
			OutVect!.addItem(bmm02a.material_seq$)
			if bmm02a.line_type$="M"
				OutVect!.addItem(str(int(bmm02a.op_int_seq_ref$))+" - Msg: "+bmm02a.ext_comments$)
			else
				OutVect!.addItem(str(int(bmm02a.op_int_seq_ref$))+" - Item: "+bmm02a.item_id$)
			endif
			if bmm03a.line_type$="M" 
				OutVect!.addItem("Linked to comment")
			else
				OutVect!.addItem("Unlinked line")
			endif
			recs=recs+1
		wend

rem --- Initial Read Of Subcontracts

		read (bmm05_dev,key=k$(1,22),dom=*next)

rem --- Read Loop For Subcontracts

		while 1
			k1$=key(bmm05_dev,end=*break)
			if pos(k$=k1$)<>1 break
			read record (bmm05_dev) bmm05a$
			if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

rem --- Test for Print

			if num(bmm05a.op_int_seq_ref$)=0 continue
			dim bmm03a$:fattr(bmm03a$)
			find record (bmm03_dev,key=firm_id$+bmm05a.bill_no$+bmm05a.op_int_seq_ref$,knum="AO_BILL_OPSEQ",dom=print_sub) bmm03a$
			if bmm03a.line_type$="M" goto print_sub
			continue
			
print_sub: rem --- Print Subcontract Line

			OutVect!.addItem(bmm05a.bill_no$)
			OutVect!.addItem("Subcontract")
			OutVect!.addItem(bmm05a.subcont_seq$+" - Vendor: "+fnmask$(bmm05a.vendor_id$(1,vendor_size),m0$))
			OutVect!.addItem("Cmnt/Msg: "+cvs(bmm05a.ext_comments$,2))
			if bmm03a.line_type$="M" 
				OutVect!.addItem("Linked to comment")
			else 
				OutVect!.addItem("Unlinked line")
			endif
			recs=recs+1
		wend

	wend

rem --- Totals

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif
	
    OutVect!.addItem("Total Records: "+str(recs))
    goto std_exit

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend
	
rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
