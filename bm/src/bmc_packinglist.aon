rem --- Packing List
rem --- Program bmc_packinglist v8.0.0 10Jan2008 (bmc_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/10/2008 02:49:29)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        seterr std_error
        setesc std_error
        enter action$,printer_dev,bill_no$,page_no,pdate$,OutVect!,status

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=5,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="bmm-01",ids$[1]="BMM_BILLMAST"
        files$[2]="bmm-02",ids$[2]="BMM_BILLMAT"
        files$[3]="bms_params",ids$[3]="BMS_PARAMS"
        files$[4]="ivm-01",ids$[4]="IVM_ITEMMAST"
        files$[5]="ivs_params",ids$[5]="IVS_PARAMS"

        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        bmm01_dev=channels[1]
        bmm02_dev=channels[2]
        bms01a_dev=channels[3]
        ivm01_dev=channels[4]
        ivs01a_dev=channels[5]
   
rem --- Dimension string templates

        dim bmm01a$:templates$[1],bmm02a$:templates$[2],bms01a$:templates$[3],
:           ivm01a$:templates$[4],ivs01a$:templates$[5]

rem --- Retrieve parameter records

        bms01a_key$=firm_id$+"BM00"
        find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

        dim p[2],desc[3],a[11],b[10]
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$) 
        p[0]=ivs01a.item_id_len
        precision num(ivs01a.precision$)

rem --- Init Data

        more=1
        pbufwidth=85
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
        dim bmm02a_key$:bmm02a_key_tpl$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","AO_OPSEQ_BILL",bmm02a_altkey02_tpl$,rd_table_chans$[all],status$
        dim bmm02a_altkey$:bmm02a_altkey02_tpl$

rem --- Read

        if pos("D"=action$) then
            call pgmdir$+"adc_progress.aon","N","","","","",0,bmm01_dev,1,meter_num,status
        endif
        findrecord (bmm01_dev,key=firm_id$+bill_no$,dom=std_exit) bmm01a$

rem --- Heading

        find record (ivm01_dev,key=firm_id$+bill_no$,dom=*next) ivm01a$
        OutVect!.addItem("Bill Number: "+bill_no$)
        xwk=fnblank(4)

        OutVect!.addItem("Description: "+ivm01a.ITEM_DESC$(1,min(desc[1],36)))
        xwk=fnblank(3)
        OutVect!.addItem("Phantom Bill?: "+bmm01a.PHANTOM_BILL$)

        xwk=fnblank(1)
        OutVect!.addItem(ivm01a.ITEM_DESC$(desc[1]+1,min(desc[2],34)))
        xwk=fnblank(2)
        OutVect!.addItem("Unit Of Measure: "+bmm01a.UNIT_MEASURE$)

        xwk=fnblank(1)
        OutVect!.addItem(ivm01a.ITEM_DESC$(desc[1]+desc[2]+1,min(desc[3],32)))
        xwk=fnblank(2)
        OutVect!.addItem("Estimated Yield %: "+str(bmm01a.EST_YIELD:"##0.00"))

        OutVect!.addItem("Drawing Number: "+bmm01a.DRAWING_NO$)
        xwk=fnblank(3)
        OutVect!.addItem("Standard Lot Size: "+str(bmm01a.STD_LOT_SIZE))

        OutVect!.addItem("Drawing Revision:"+bmm01a.DRAWING_REV$)
        OutVect!.addItem("Revision Code: "+bmm01a.BILL_REV$)
        OutVect!.addItem("Created: "+fndate$(bmm01a.CREATE_DATE$))
        OutVect!.addItem("Revised: "+fndate$(bmm01a.LSTRVS_DATE$))
        OutVect!.addItem("As Of: "+fndate$(pdate$))

        OutVect!.addItem(fill(40,"-"))
        OutVect!.addItem(fill(20,"-"))
        OutVect!.addItem(fill(20,"-"))
        OutVect!.addItem(fill(20,"-"))
        OutVect!.addItem(fill(25,"-"))
        OutVect!.addItem(fill(20," ")+"Op Seq")
        OutVect!.addItem("Component")
        OutVect!.addItem("U/M")
        OutVect!.addItem("Quantity")
        OutVect!.addItem("Picked")
        OutVect!.addItem(fill(40,"-"))
        OutVect!.addItem(fill(20,"-"))
        OutVect!.addItem(fill(20,"-"))
        OutVect!.addItem(fill(20,"-"))
        OutVect!.addItem(fill(25,"-"))


rem --- Detail

        read (bmm02_dev,key=firm_id$+bill_no$,dom=*next)
        first_time$="Y"

rem --- Main Loop Starts
    while more

        bmm02a_altkey$=key(bmm02_dev,knum="AO_OPSEQ_BILL",end=*break)
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if first_time$="Y" then let first_time$="N",t0$=bmm02a_altkey.OP_SEQ$
        read record (bmm02_dev,key=bmm02a_altkey$,knum="AO_OPSEQ_BILL") bmm02a$
        if pos(bmm01a.FIRM_ID$+bmm01a.BILL_NO$=bmm02a.FIRM_ID$+bmm02a.BILL_NO$+bmm02a.MATERIAL_SEQ$)<>1 then break
        if cvs(bmm02a.EFFECT_DATE$,3)<>"" and bmm02a.EFFECT_DATE$>pdate$ then continue
        if cvs(bmm02a.OBSOLT_DATE$,3)<>"" and bmm02a.OBSOLT_DATE$<=pdate$ then continue

        if bmm02a.LINE_TYPE$<>"S" then
            xwk=fnblank(1)
            OutVect!.addItem(bmm02a.EXT_COMMENTS$)
            xwk=fnblank(3)
            continue
        endif

rem --- Standard Item

        r0$=" "
        find (bmm01_dev,key=firm_id$+bmm02a.ITEM_ID$,dom=addl_reads)
        r0$="*"

addl_reads: rem --- Additional Reads

        find record (ivm01_dev,key=firm_id$+bmm02a.ITEM_ID$,dom=*next) ivm01a$
        ivm01a.ITEM_DESC$=fnitem$(ivm01a.ITEM_DESC$,desc[1],desc[2],desc[3])

rem --- Print Detail

        OutVect!.addItem(fill(20," ")+bmm02a.OP_SEQ$)
        OutVect!.addItem(bmm02a.ITEM_ID$(1,p[0]))
        OutVect!.addItem(bmm02a.UNIT_MEASURE$)
        OutVect!.addItem(str(fnqty(bmm02a.QTY_REQUIRED,bmm02a.ALT_FACTOR,bmm02a.DIVISOR,bmm01a.EST_YIELD,bmm02a.SCRAP_FACTOR):bms01a.HRQTY_MASK$))
        OutVect!.addItem(fill(10,"_"))
        xwk=fnblank(1)
        OutVect!.addItem(ivm01a.ITEM_DESC$)
        xwk=fnblank(3)

rem --- Serial/Lot Numbers

        if ivm01a.LOTSER_ITEM$<>"Y" or ivs01a.LOTSER_FLAG$="N" then continue
        if ivs01a.LOTSER_FLAG$="S" then
            x$="Serial Number: "
        else
            x$="Lot Number: "
        endif
        if ivs01a.LOTSER_FLAG$="L" and bmm02a.QTY_REQUIRED>5 then bmm02a.QTY_REQUIRED=5
        for i=1 to bmm02a.QTY_REQUIRED
            xwk=fnblank(1)
            OutVect!.addItem(x$+fill(30,"_"))
            xwk=fnblank(3)
        next i

rem --- Main Loop Ends
    wend

rem --- Totals

    xwk=fnblank(5)
    xwk=fnblank(2)
    OutVect!.addItem("Assembled __________")
    xwk=fnblank(2)

    xwk=fnblank(2)
    OutVect!.addItem("Checked   __________")
    xwk=fnblank(2)

    xwk=fnblank(2)
    OutVect!.addItem("Packed    __________")
    xwk=fnblank(2)

rem --- End
    goto std_exit

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)
        def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fndate$(q$)
            q1$=""
            q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
            if q1$="" q1$=q$
            return q1$
        fnend
        
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #endinclude fndate.src

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry
std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
        for i=1 to files
            close(channels[i])
        next i
        exit
rem --- #endinclude std_exit.src

        end
