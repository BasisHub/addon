rem --- Packing List
rem --- Program bmc_packinglist v8.0.0 10Jan2008 (bmc_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/10/2008 02:49:29)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

	seterr std_error
	setesc std_error
	enter action$,printer_dev,bill_no$,page_no,pdate$,OutVect!,Translate!,status,columns,BrkVect!

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

	num_files=7
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="BMM_BILLMAST",open_opts$[1]="OTA"
	open_tables$[2]="BMM_BILLMAT",open_opts$[2]="OTA"
	open_tables$[3]="BMS_PARAMS",open_opts$[3]="OTA"
	open_tables$[4]="IVM_ITEMMAST",open_opts$[4]="OTA"
	open_tables$[5]="IVS_PARAMS",open_opts$[5]="OTA"
	open_tables$[6]="BMM_BILLOPER",open_opts$[6]="OTA"
	open_tables$[7]="BMC_OPCODES",open_opts$[7]="OTA"

	gosub open_tables

	bmm01_dev=num(open_chans$[1])
	bmm02_dev=num(open_chans$[2])
	bms01a_dev=num(open_chans$[3])
	ivm01_dev=num(open_chans$[4])
	ivs01a_dev=num(open_chans$[5])
	bmm03_dev=num(open_chans$[6])
	bmc_opcodes=num(open_chans$[7])
	
rem --- Dimension string templates

	dim bmm01a$:open_tpls$[1],bmm02a$:open_tpls$[2],bms01a$:open_tpls$[3]
	dim ivm01a$:open_tpls$[4],ivs01a$:open_tpls$[5],bmm03a$:open_tpls$[6]
	dim bmc_opcodes$:open_tpls$[7]

rem --- Retrieve parameter records

	bms01a_key$=firm_id$+"BM00"
	find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
	ivs01a_key$=firm_id$+"IV00"
	find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

        dim p[2],desc[3],a[11],b[10]
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$) 
        p[0]=ivs01a.item_id_len
        precision num(ivs01a.precision$)
		call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0

rem --- Init Data

        more=1
		gosub heading

rem --- Build list of Op Codes/internal_seq_no/occurrence used for this Bill
		op_code_len=len(bmm03a.op_code$)
		read (bmm03_dev,key=firm_id$+bill_no$,dom=*next)

		while 1
			read record (bmm03_dev,end=*break) bmm03a$
			if pos(firm_id$+bill_no$=bmm03a$)<>1 break
			if bmm03a.line_type$="S"
				occ=pos(bmm03a.op_code$=opcodes$,op_code_len+12+2,0)
				opcodes$=opcodes$+bmm03a.op_code$+bmm03a.internal_seq_no$+str(occ:"00")
			endif
		wend
		
rem --- Read

        if pos("D"=action$) then
            call pgmdir$+"adc_progress.aon","N","","","","",0,bmm01_dev,1,meter_num,status
        endif
        findrecord (bmm01_dev,key=firm_id$+bill_no$,dom=std_exit) bmm01a$

rem --- Add op_int_seq_ref to memo lines following 'S' lines

		read (bmm02_dev,key=firm_id$+bill_no$,dom=*next)
		seq_ref$=""
		
		while 1
			extract record (bmm02_dev,end=*break) bmm02a$; rem --- Advisory locking
			if pos(firm_id$+bill_no$=bmm02a$)<>1 break
			if bmm02a.line_type$="M"
				bmm02a.op_int_seq_ref$=seq_ref$
				write record (bmm02_dev) bmm02a$
				continue
			endif
			seq_ref$=bmm02a.op_int_seq_ref$
                        read (bmm02_dev)
		wend
		
rem --- Detail

		sql_prep$="select firm_id, bill_no, material_seq "
		sql_prep$=sql_prep$+"from bmm_billmat where firm_id = '"+firm_id$+"' and bill_no = '"+bill_no$+"' "
		sql_prep$=sql_prep$+"order by op_int_seq_ref, material_seq"
		sql_chan=sqlunt
		sqlopen(sql_chan,err=*next)stbl("+DBNAME")
		sqlprep(sql_chan)sql_prep$
		dim read_tpl$:sqltmpl(sql_chan)
		sqlexec(sql_chan)

rem --- Main Loop Starts
    while more

		read_tpl$ = sqlfetch(sql_chan,end=*break)
		read record (bmm02_dev,key=read_tpl.firm_id$+read_tpl.bill_no$+read_tpl.material_seq$) bmm02a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Page break
		if last_seq_ref$="" last_seq_ref$=bmm02a.op_int_seq_ref$
		if last_seq_ref$<>bmm02a.op_int_seq_ref$
			BrkVect!.addItem(str(OutVect!.size()/(columns)))
			last_seq_ref$=bmm02a.op_int_seq_ref$
			gosub heading
		endif

        if pos(bmm01a.firm_id$+bmm01a.bill_no$=bmm02a.firm_id$+bmm02a.bill_no$+bmm02a.material_seq$)<>1 then break
        if cvs(bmm02a.effect_date$,3)<>"" and bmm02a.effect_date$>pdate$ then continue
        if cvs(bmm02a.obsolt_date$,3)<>"" and bmm02a.obsolt_date$<=pdate$ then continue

        if bmm02a.line_type$<>"S" then
            xwk=fnblank(1)
            OutVect!.addItem(bmm02a.ext_comments$)
            xwk=fnblank(3)
            continue
        endif

rem --- Standard Item

        r0$=" "
        find (bmm01_dev,key=firm_id$+bmm02a.item_id$,dom=addl_reads)
        r0$="*"

addl_reads: rem --- Additional Reads

        find record (ivm01_dev,key=firm_id$+bmm02a.item_id$,dom=*next) ivm01a$
        ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
		dim bmm03a$:fattr(bmm03a$)
		find record (bmm03_dev,key=firm_id$+bmm02a.bill_no$+bmm02a.op_int_seq_ref$,knum="AO_BILL_OPSEQ",dom=*next)bmm03a$
		dim bmc_opcodes$:fattr(bmc_opcodes$)
		find record (bmc_opcodes,key=firm_id$+bmm03a.op_code$,dom=*next) bmc_opcodes$
		
rem --- Print Detail

        OutVect!.addItem(bmm03a.internal_seq_no$)
        OutVect!.addItem(bmm02a.item_id$(1,p[0]))
        OutVect!.addItem(bmm02a.unit_measure$)
        OutVect!.addItem(str(fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor):m2$)+$00$+"R")
        OutVect!.addItem(fill(13,"_"))
		out_desc$=""
		x=pos(bmm03a.op_code$+bmm02a.op_int_seq_ref$=opcodes$,op_code_len+12+2)
		if x>0
			occ=num(opcodes$(x+15,2))+1
			if occ>1
				out_desc$=bmm03a.op_code$+"("+str(occ)+") "+bmc_opcodes.code_desc$
			else
				out_desc$=bmm03a.op_code$+" "+bmc_opcodes.code_desc$
			endif
		endif
		OutVect!.addItem("  "+out_desc$)
        OutVect!.addItem("    "+ivm01a.item_desc$)
        xwk=fnblank(3)

rem --- Serial/Lot Numbers

        if ivm01a.lotser_item$<>"Y" or ivs01a.lotser_flag$="N" then continue
        if ivs01a.lotser_flag$="S" then
            x$=Translate!.getTranslation("AON_SERIAL_NUMBER:_")
        else
            x$=Translate!.getTranslation("AON_LOT_NUMBER:_")
        endif
        if ivs01a.lotser_flag$="L" and bmm02a.qty_required>5 then bmm02a.qty_required=5
        for i=1 to bmm02a.qty_required
            xwk=fnblank(1)
            OutVect!.addItem(x$+fill(30,"_"))
            xwk=fnblank(3)
        next i

rem --- Main Loop Ends
    wend

rem --- Totals

    xwk=fnblank(5)
    xwk=fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_ASSEMBLED___________"))
    xwk=fnblank(2)

    xwk=fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_CHECKED_____________"))
    xwk=fnblank(2)

    xwk=fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_PACKED______________"))
    xwk=fnblank(2)

rem --- End
    goto std_exit

rem --- Heading
	heading:
        out_action$="FORMAT"
        find record (ivm01_dev,key=firm_id$+bill_no$,dom=*next) ivm01a$
        OutVect!.addItem(Translate!.getTranslation("AON_BILL_NUMBER:_")+cvs(bill_no$,1+2))
        xwk=fnblank(4)

        OutVect!.addItem(Translate!.getTranslation("AON_DESCRIPTION:_")+ivm01a.ITEM_DESC$(1,min(desc[1],36)))
        xwk=fnblank(1)
        OutVect!.addItem(Translate!.getTranslation("AON_DRAWING_REVISION:")+bmm01a.DRAWING_REV$)
        xwk=fnblank(1)
        OutVect!.addItem(Translate!.getTranslation("AON_PHANTOM_BILL?:_")+bmm01a.PHANTOM_BILL$)

        xwk=fnblank(1)
        OutVect!.addItem(ivm01a.ITEM_DESC$(desc[1]+1,min(desc[2],34)))
        OutVect!.addItem(Translate!.getTranslation("AON_REVISION_CODE:_")+bmm01a.BILL_REV$)
        xwk=fnblank(1)
        OutVect!.addItem(Translate!.getTranslation("AON_UNIT_OF_MEASURE:_")+bmm01a.UNIT_MEASURE$)

        OutVect!.addItem(Translate!.getTranslation("AON_DRAWING_NUMBER:_")+bmm01a.DRAWING_NO$)
        OutVect!.addItem(ivm01a.ITEM_DESC$(desc[1]+desc[2]+1,min(desc[3],32)))
        OutVect!.addItem(Translate!.getTranslation("AON_CREATED:_")+fndate$(bmm01a.CREATE_DATE$))
        xwk=fnblank(1)
        OutVect!.addItem(Translate!.getTranslation("AON_ESTIMATED_YIELD_%:_")+str(bmm01a.EST_YIELD:"##0.00"))

      
        xwk=fnblank(2)
        OutVect!.addItem(Translate!.getTranslation("AON_REVISED:_")+fndate$(bmm01a.LSTRVS_DATE$))
        xwk=fnblank(1)
        OutVect!.addItem(Translate!.getTranslation("AON_STANDARD_LOT_SIZE:_")+str(bmm01a.STD_LOT_SIZE))

        xwk=fnblank(4)
        OutVect!.addItem(Translate!.getTranslation("AON_AS_OF:_")+fndate$(pdate$))

rem --- top dashed lines are just visually confusing...
        xwk=fnblank(5)
        
  
        OutVect!.addItem(Translate!.getTranslation("AON_OP_SEQ"))
        OutVect!.addItem(Translate!.getTranslation("AON_COMPONENT"))
        OutVect!.addItem("U/M")
        OutVect!.addItem(Translate!.getTranslation("AON_QUANTITY")+$00$+"R")
        OutVect!.addItem(Translate!.getTranslation("AON_PICKED"))
        OutVect!.addItem(fill(10,"_"))
        OutVect!.addItem(fill(45,"_"))
        OutVect!.addItem(fill(8,"_"))
        OutVect!.addItem(fill(30,"_")+$00$+"R")
        OutVect!.addItem(fill(15,"_"))
		xvk=fnblank(5)

	return
		
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
       msg_id$="ENTRY_OPEN_ERROR"
       dim msg_tokens$[1]
       msg_tokens$[1]=open_status$
       gosub disp_message
       rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
       release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return
	
rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)
        def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

        def fndate$(q$)
            q1$=""
            q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
            if q1$="" q1$=q$
            return q1$
        fnend
        
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #endinclude fndate.src

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

	num_files=5
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="BMM_BILLMAST",open_opts$[1]="C"
	open_tables$[2]="BMM_BILLMAT",open_opts$[2]="C"
	open_tables$[3]="BMS_PARAMS",open_opts$[3]="C"
	open_tables$[4]="IVM_ITEMMAST",open_opts$[4]="C"
	open_tables$[5]="IVS_PARAMS",open_opts$[5]="C"

	gosub open_tables
	exit
	
rem --- #endinclude std_exit.src

	end
