rem ==========================================================================
rem --- bmo_AO_BmUtils.aon 
rem --- AO_BmUtils class (BmUtils superclass)
rem --- BM helper superclass for collection of utilities.
rem --- 
rem --- AddonSoftware Version 11.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
rem ==========================================================================

class public AO_BmUtils

	rem /**
	rem  * Calculates Net Quantity Required.
	rem  *
	rem  * @param BBjNumber Quantity Required
	rem  * @param BBjNumber Alternate Factor
	rem  * @param BBjNumber Divisor
	rem  * @param BBjNumber Estimated Yield Percent
	rem  * @param BBjNumber Scrap Factor Percent
	rem  * @return BBjNumber
	rem  */
	method public static BBjNumber netQuantityRequired(BBjNumber qntyRequired, 
:													   BBjNumber altFactor, 
:													   BBjNumber divisor, 
:													   BBjNumber estYield, 
:													   BBjNumber scrapFactor)
		if divisor*estYield*(100-scrapFactor) = 0
			methodret 0
		else
			methodret 10000*qntyRequired*altFactor/(divisor*estYield*(100-scrapFactor))
		endif
	methodend
	
	method public static BBjNumber directCost	(BBjNumber hrsPerPiece,
:												BBjNumber dirRate, 
:												BBjNumber pcsPerHour, 
:												BBjNumber yieldPct, 
:												BBjNumber setupTime,
:												BBjNumber lotSize)
		if pcsPerHour = 0
			pcsPerHour = 1
		endif
		if yieldPct = 0
			yieldPct = 100
		endif
		if lotSize = 0
			lotSize = 1
		endif
		methodret 100*(hrsPerPiece*dirRate/pcsPerHour)/yieldPct+setupTime*dirRate/lotSize
	methodend
	
	method public static BBjNumber netSubQtyReq	(BBjNumber qtyReqd,
:												BBjNumber altFactor,
:												BBjNumber divisor)
		if divisor = 0
			methodret 0
		else
			methodret qtyReqd * altFactor / divisor
		endif
	methodend
	
classend
