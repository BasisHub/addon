rem --- Packing List
rem --- Program bmr_packinglist v8.0.0 09Jan2008 (bmr_ea)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/09/2008 12:57:49)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

	setesc std_error
	seterr std_error

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

	OutVect!=bbjAPI().getSysGui().makeVector()
	HdrVect!=bbjAPI().getSysGui().makeVector()
	BrkVect!=bbjAPI().getSysGui().makeVector()
	TotVect!=bbjAPI().getSysGui().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

	num_files=5
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="BMM_BILLMAST",open_opts$[1]="OTA"
	open_tables$[2]="BMS_PARAMS",open_opts$[2]="OTA"
	open_tables$[3]="IVM_ITEMMAST",open_opts$[3]="OTA"
	open_tables$[4]="IVM_ITEMSYN",open_opts$[4]="OTA"
	open_tables$[5]="IVS_PARAMS",open_opts$[5]="OTA"
	
	gosub open_tables
	
	bmm01_dev=num(open_chans$[1])
	bms01a_dev=num(open_chans$[2])
	ivm01_dev=num(open_chans$[3])
	ivm14_dev=num(open_chans$[4])
	ivs01a_dev=num(open_chans$[5])

rem --- Dimension string templates

	dim bmm01a$:open_tpls$[1]
	dim bms01a$:open_tpls$[2]
	dim ivm01a$:open_tpls$[3]
	dim ivm14a$:open_tpls$[4]
	dim ivs01a$:open_tpls$[5]

rem --- Assign form input values to local variables

        billfrom$=Option!.getOptionData("BILL_NO_1")
        billthru$=Option!.getOptionData("BILL_NO_2")
        pdate$=Option!.getOptionData("report_date")
rem   -  if no entry for last, plug with ~~~
       if cvs(billthru$,1)="" then
            let billthru$=fill(len(billthru$),"~")
       endif

       if cvs(pdate$,1)=""  then
           let pdate$=date(0,"%Yl%Mz%Dz")
       endif

rem --- Retrieve parameter records

        bms01a_key$=firm_id$+"BM00"
        find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

        dim p[2], desc[3], params[3]
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$) 
        p[0]=ivs01a.item_id_len
        params[0]=p[0]
        precision num(ivs01a.precision$)  

rem --- Headings and print positions

        headings=2
        dim headings$[headings]
        l9=45
        l=l9+1,h0=80,when$=sysinfo.system_date$,clock$=""
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$

        dim columns$[4,10]
        columns = 5
        columns$[0,0]=" ",columns$[0,1]="C",columns$[0,2]="15"
        columns$[1,0]=" ",columns$[1,1]="C",columns$[1,2]="45"
        columns$[2,0]=" ",columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]=" ",columns$[3,1]="C",columns$[3,2]="25"
        columns$[4,0]=" ",columns$[4,1]="C",columns$[4,2]="15"

        call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Init Data
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAST","PRIMARY",bmm01a_key_tpl$,rd_table_chans$[all],status$
	dim bmm01a_key$:bmm01a_key_tpl$
	more=1
	if pdate$="" then pdate$=sysinfo.system_date$

rem --- Print Loop
	extractrecord (bmm01_dev,key=firm_id$+billfrom$,dom=*next) bmm01a$
        
rem --- Main Read ----------------------------------
    while 1
        bmm01a_key$=key(bmm01_dev,end=*break)
        if bmm01a_key$(1,2)<>firm_id$ then break
        read record (bmm01_dev,key=bmm01a_key$) bmm01a$
        if billthru$<>"" and bmm01a.bill_no$>billthru$ then break            
    
        rem --- Print packing list
    
        BrkVect!.addItem(str(OutVect!.size()/(columns)))
        
        action$="B"
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        call pgmdir$+"bmc_packinglist.aon",action$,printer_dev,bmm01a.bill_no$,h,pdate$,OutVect!,Translate!,columns,BrkVect!,rd_table_chans$[all],status
        if status then break
    wend

done: rem --- All done

    goto std_exit

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
       msg_id$="ENTRY_OPEN_ERROR"
       dim msg_tokens$[1]
       msg_tokens$[1]=open_status$
       gosub disp_message
       rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
       release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)
    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	out_action$="FORMAT"
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
