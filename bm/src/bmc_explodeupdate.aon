rem --- Explode Phantoms for Inventory Production Update
rem --- Program bmc_ga v8.0.0 18Jan2008 (bmc_ga)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/18/2008 09:10:33)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

	seterr std_error
	setesc std_error
	enter channel[all],info$[all],info[all],parent$,table_chans$[all]

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Assign Channel numbers

	bmm01_dev=fnget_dev("BMM_BILLMAST")
	bmm03_dev=fnget_dev("BMM_BILLOPER")
	bmm05_dev=fnget_dev("BMM_BILLSUB")
	bmm08_dev=fnget_dev("BMC_OPCODES")
	ivm01_dev=fnget_dev("IVM_ITEMMAST")
	ivm02_dev=fnget_dev("IVM_ITEMWHSE")
	ivt04_dev=fnget_dev("IVT_ITEMTRAN")
	bms01_dev=fnget_dev("BMS_PARAMS")
	gls01_dev=fnget_dev("GLS_PARAMS")
	ivs01_dev=fnget_dev("IVS_PARAMS")
	glm01_dev=fnget_dev("GLM_ACCT")
	glt04_dev=fnget_dev("GLE_DAILYDETAIL")
	arm10_dev=fnget_dev("ARC_DISTCODE")
	glt05_dev=fnget_dev("GLT_BANKCHECKS")
	ivm04_dev=fnget_dev("IVM_ITEMTIER")
	ivm05_dev=fnget_dev("IVM_ITEMVEND")
	ivm07_dev=fnget_dev("IVM_LSMASTER")
	ivm12_dev=fnget_dev("IVM_ITEMACT")
	ivm17_dev=fnget_dev("IVM_LSACT")
	ivt01_dev=fnget_dev("IVT_LSTRANS")
	ivt04_dev=fnget_dev("IVT_ITEMTRAN")
	bmm02_dev=fnget_dev("BMM_BILLMAT")
	
rem --- Dimension string templates

	dim tpl$[23]
	tpl$[0]=fnget_tpl$("BMM_BILLMAST")
	tpl$[1]=fnget_tpl$("BMM_BILLOPER")
	tpl$[2]=fnget_tpl$("BMM_BILLSUB")
	tpl$[3]=fnget_tpl$("BMC_OPCODES")
	tpl$[4]=fnget_tpl$("IVM_ITEMMAST")
	tpl$[5]=fnget_tpl$("IVM_ITEMWHSE")
	tpl$[6]=fnget_tpl$("IVT_ITEMTRAN")
	tpl$[7]=fnget_tpl$("BMS_PARAMS")
	tpl$[8]=fnget_tpl$("GLM_ACCT")
	tpl$[9]=fnget_tpl$("GLE_DAILYDETAIL")
	tpl$[10]=fnget_tpl$("")
	tpl$[11]=fnget_tpl$("")
	tpl$[12]=fnget_tpl$("IVM_ITEMTIER")
	tpl$[13]=fnget_tpl$("IVM_ITEMVEND")
	tpl$[14]=fnget_tpl$("IVM_LSMASTER")
	tpl$[15]=fnget_tpl$("")
	tpl$[16]=fnget_tpl$("IVM_ITEMACT")
	tpl$[17]=fnget_tpl$("IVM_LSACT")
	tpl$[18]=fnget_tpl$("IVT_LSTRANS")
	tpl$[19]=fnget_tpl$("")
	tpl$[20]=fnget_tpl$("")
	tpl$[21]=fnget_tpl$("IVT_ITEMTRAN")
	tpl$[22]=fnget_tpl$("")
	tpl$[23]=fnget_tpl$("BMM_BILLMAT")
	dim bmm01a$:tpl$[0],bmm03a$:tpl$[1],bmm05a$:tpl$[2]
	dim bmm08a$:tpl$[3],ivm01a$:tpl$[4],ivm02a$:tpl$[5]
	dim ivt04a$:tpl$[6],bms01a$:tpl$[7],glm01a$:tpl$[8]
	dim glt04a$:tpl$[9]
	dim ivm04a$:tpl$[12],ivm05a$:tpl$[13],ivm07a$:tpl$[14]
	dim ivm12a$:tpl$[16],ivm17a$:tpl$[17]
	dim ivt01a$:tpl$[18]
	dim bmm02a$:tpl$[23]

rem --- Assign Channel Info

	subitem$=info$[0]
	ref1$=info$[1]
	ref2$=info$[2]
	ap$=info$[3]
	ar_dist$=info$[4]
	bmref$=info$[5]
	whse$=info$[6]
	pdate$=info$[7]
	update$=info$[8]
	gl$=info$[9]
	ivacct$=info$[10]
	quant=info[0]
	yield=info[1]

rem --- Parameters

	n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$
	dim ivs01a$:fnget_tpl$("IVS_PARAMS")
	find record (ivs01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
	dim bms01a$:fnget_tpl$("BMS_PARAMS")
	find record (bms01_dev,key=firm_id$+"BM00",dom=std_missing_params) bms01a$
	dim gls01a$:fnget_tpl$("GLS_PARAMS")
	find record (gls01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
	dim p[6],g[4]

	g[0]=num(gls01a.total_pers$)
	g[1]=num(gls01a.current_per$)
	g[2]=num(gls01a.current_year$)
	g[4]=num(gls01a.max_acct_len$)
	g[2]=num(gls01a.current_year$)
	p[0]=num(ivs01a.item_id_len$)
	p[1]=num(ivs01a.vendor_prd_len$)
	p[2]=num(ivs01a.precision$)
	p[3]=num(ivs01a.ls_no_len$)
	p[5]=num(ivs01a.current_per$)
	p[6]=num(ivs01a.current_year$)

rem --- Init Data

	more=1
	precision p[2]
	value=0
	dim files[44]
	parentgl$=firm_id$
	ref3$="Prod Entry"
	costmethod$=ivs01a.cost_method$
    call pgmdir$+"ivc_itemupdt.aon::init",files[all],ivs01a$,item$[all],refs$[all],refs[all],rd_table_chans$[all],ignore_status

rem --- ivc_ua.bbx Params

	dim params[10],params$[10],item$[3],ref$[11]
	params[0]=g[0]
	params$[0]=sysinfo.system_date$
	params$[1]=sysinfo.user_id$
	params$[2]=p2$
	params$[3]=p3$
	params$[4]=p4$
	item$[0]=firm_id$(1,2)
	item$[1]=whse$
	ref$[0]=pdate$
	ref$[2]=bmref$

rem --- Read BOM Header

	dim bmm01a$:fnget_tpl$("BMM_BILLMAST")
	read record (bmm01_dev,key=firm_id$+subitem$,dom=get_cost) bmm01a$
	phantom$=bmm01a.phantom_bill$
	if yield=0 then let yield=100

rem --- Item Number

	dim glacct$(g[4])
	dim ivm01a$:fnget_tpl$("IVM_ITEMMAST")
	find record (ivm01_dev,key=firm_id$+subitem$,dom=Children) ivm01a$
	parentgl$=ivm01a.gl_inv_acct$
	glacct$=parentgl$

Children: rem --- Children

	read (bmm02_dev,key=firm_id$+subitem$,dom=*next)

rem --- retrieve template for BMM_BILLMAT record key
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,table_chans$[all],status$
	dim bmm02a_key$:fnget_tpl$("BMM_BILLMAT")

rem --- retrieve template for BMM_BILLOPER record key
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03a_key_tpl$,table_chans$[all],status$
	dim bmm03a_key$:fnget_tpl$("BMM_BILLOPER")

rem --- retrieve template for BMM_BILLSUB record key
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLSUB","PRIMARY",bmm05a_key_tpl$,table_chans$[all],status$
	dim bmm05a_key$:fnget_tpl$("BMM_BILLSUB")

rem --- Main Loop
	while more

		bmm02a_key$=key(bmm02_dev,end=*break)
		read record (bmm02_dev) bmm02a$
		if cvs(bmm02a.effect_date$,3)<>"" and pdate$<bmm02a.effect_date$ then continue
		if cvs(bmm02a.obsolt_date$,3)<>"" and pdate$>=bmm02a.obsolt_date$ then continue
		if bmm02a.line_type$="M" then continue
		if bmm02a.firm_id$+bmm02a.bill_no$<>firm_id$+subitem$ then break
		find record (bmm01_dev,key=firm_id$+bmm02a.item_id$,dom=Label_One) bmm01a$
		if phantom$="Y" then
			gosub explode
			read (bmm02_dev,key=bmm02a_key$)
			continue
		endif

Label_One:
		dim glacct$(g[4])
		childgl$=ivm01a.gl_inv_acct$
		find record (ivm01_dev,key=firm_id$+bmm02a.item_id$,dom=*continue) ivm01a$
		childgl$=ivm01a.gl_inv_acct$
		glacct$=childgl$

rem --- Issue Children

		if bmm02a.divisor=0 then let bmm02a.divisor=1
		dim ivm02a$:fnget_tpl$("IVM_ITEMWHSE")
		find record (ivm02_dev,key=firm_id$+whse$+bmm02a.item_id$,dom=Label_Two) ivm02a$
		goto Label_Three

Label_Two:
		in_whse$="F"

Label_Three:
		qty=fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor)*quant
		iss_or_rec$="I"; rem "I==Issue, O==Receipt"
		unitcost=ivm02a.unit_cost
		curlist=ivm02a.cur_price
		item$=bmm02a.item_id$
		finished$=subitem$
		gosub atamo

rem --- Distribution

		if ar_dist$<>"N" and in_whse$<>"F" then
			dim childgl$(g[4],"0"),glacct$(g[4])
			dim arm10d2$:fnget_tpl$("ARC_DISTCODE")
			find record (arm10_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=update_gl) arm10d2$
			childgl$=arm10d2.gl_inv_acct$
			glacct$=childgl$
		endif

update_gl: rem --- Update G/L

		if update$="N" then
			parentgl$=bms01a.gl_wip_acct$
		else
			parentgl$=ivacct$
		endif

		account$=parentgl$
		when$=pdate$
		amount=unitcost*fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor)*quant
		units=fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,yield,bmm02a.scrap_factor)*quant
		precision 2
		amount=amount*1
		value=value+amount,memo$="Item "+parent$
		gosub glpost
		account$=childgl$
		amount=-amount,units=-units,memo$="Item "+bmm02a.item_id$(1,p[0])
		gosub glpost
		precision num(ivs01a.precision$)

rem --- Loop back for next record
	wend


rem --- Operation & Subcontract Distribution

	gosub operation
	if ap$="Y" then gosub subcontracts

rem --- Update Last Used Flag

	read record (bmm01_dev,key=firm_id$+subitem$,dom=get_cost) bmm01a$
	if pdate$>=bmm01a.lstact_date$ then
		bmm01a.lstact_date$=pdate$
		bmm01a.source_code$="B"
	endif
	bmm01a$=field(bmm01a$)
	write record (bmm01_dev,key=firm_id$+subitem$) bmm01a$

get_cost: rem --- Receive Parents(Subitems) - Non-Phantoms

	dim ivm02a$:fnget_tpl$("IVM_ITEMWHSE")
	find record (ivm02_dev,key=firm_id$+whse$+subitem$,dom=done) ivm02a$

rem --- Update IV

	if update$<>"Y" then goto std_exit
	qty=quant
	if phantom$="Y" qty=0; rem "So that when ATAMO processes phantoms, it won't change on-hand etc qtys in file
	iss_or_rec$="O"; rem "I==Issue, O==Receipt"
	unitcost=ivm02a.unit_cost
	curlist=ivm02a.cur_price
	tcost=unitcost*quant
	if costmethod$="A" then gosub Acc_WareHouse
	if costmethod$<>"S" and update$<>"N" and quant>0 then
		unitcost=value/quant
	endif
	item$=subitem$
	finished$=fill(20)
	gosub atamo

rem --- Get GL Acct by Dist Code - Non-Phantoms

	if ar_dist$="N" then goto std_exit
	dim parentgl$(g[4],"0")
	dim arm10d1$:fnget_tpl$("ARC_DISTCODE")
	find record (arm10_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=done) arm10d1$
	parentgl$=arm10d1.gl_inv_acct$

done: rem --- End

	goto std_exit

atamo: rem --- Item Number

	dim ref[5],b6$(g[4])
	action$="B"+iss_or_rec$
	item$[2]=item$
	ref$[7]=glacct$
	ref$[9]=finished$
	ref[0]=qty
	ref[1]=unitcost,ref[2]=curlist
	if iss_or_rec$="I" then let ref[0]=-qty

rem --- Inventory updates

	call pgmdir$+"ivc_itemupdt.aon",action$,files[all],ivs01a$,item$[all],ref$[all],ref[all],rd_table_chans$[all],status
	
	return

subcontracts: rem --- Subcontracts

	read (bmm05_dev,key=firm_id$+subitem$,dom=*next)

	while more
		bmm05a_key$=key(bmm05_dev,end=*break)
		if pos(firm_id$+subitem$=bmm05a_key$)<>1 then break
		dim bmm05a$:fnget_tpl$("BMM_BILLSUB")
		read record (bmm05_dev) bmm05a$
		if cvs(bmm05a.effect_date$,3)<>"" and pdate$<bmm05a.effect_date$ then continue
		if cvs(bmm05a.obsolt_date$,3)<>"" and pdate$>=bmm05a.obsolt_date$ then continue
		if bmm05a.line_type$<>"S" then continue
		if update$="N" then
			let parentgl$=bms01a.gl_wip_acct$
		else
			let parentgl$=ivacct$
		endif
		if bmm05a.divisor=0 then let bmm05a.divisor=1
		a0=quant*bmm05a.unit_cost*fnsub(bmm05a.qty_required,bmm05a.alt_factor,bmm05a.divisor)
		units=quant*bmm05a.unit_cost
		when$=pdate$
		account$=parentgl$
		amount=a0
		value=value+amount
		memo$=cvs(parent$,2)+" "+bmm05a.ext_comments$
		gosub glpost
		account$=bms01a.gl_pur_acct$
		amount=-a0
		units=-units
		gosub glpost
	wend

	return

Acc_WareHouse: rem --- Accumulation Of Warehouse Qtys For Average Cost

rem --- TONHANDQTY=Total On Hand Qty, UNITCOST=From ivm-02
rem --- QUANT=New Qty, TCOST=New Cost

	tonhandqty=0
	dim cost_chans[3],cost_item$[2],cost_whse$[2],cost_whse[20]
	cost_chans[2]=ivm02_dev
	cost_item$[0]=firm_id$
	cost_item$[1]=""
	cost_item$[2]=subitem$
	call pgmdir$+"ivc_whseinfo.aon","A",cost_chans[all],cost_item$[all],cost_whse$[all],cost_whse[all],cost_value,status,rd_table_chans$[all]
	tonhandqty=cost_whse[0]

rem --- Average Cost Calculation

	if tonhandqty<=0 then
		unitcost=tcost
		return
	endif
	v=cost_value+(quant*tcost)
	saveunitcost=unitcost
	if quant+tonhandqty>0 then let unitcost=v/(quant+tonhandqty)
	if unitcost=0 then let unitcost=saveunitcost
	if unitcost<0 then let unitcost=tcost
	tcost=unitcost*quant

	return

operation: rem --- Operation

	dim bmm01a$:fattr(bmm01a$)
	read record (bmm01_dev,key=firm_id$+subitem$,dom=*next) bmm01a$
	read (bmm03_dev,key=firm_id$+subitem$,dom=*next)

	while more
		bmm03a_key$=key(bmm03_dev,end=*break)
		if pos(firm_id$+subitem$=bmm03a_key$)<>1 then break
		dim bmm03a$:fnget_tpl$("BMM_BILLOPER")
		read record (bmm03_dev,key=bmm03a_key$) bmm03a$
		if cvs(bmm03a.effect_date$,3)<>"" and pdate$<bmm03a.effect_date$ then continue
		if cvs(bmm03a.obsolt_date$,3)<>"" and pdate$>=bmm03a.obsolt_date$ then continue
		if bmm03a.line_type$="M" then continue
		dim bmm08a$:fnget_tpl$("BMC_OPCODES")
		find record (bmm08_dev,key=bmm03a_key.firm_id$+bmm03a.op_code$,dom=*next) bmm08a$
		if bmm01a.std_lot_size=0 then let bmm01a.std_lot_size=1
		if quant<>0 then
			directcost=fnop2(quant,bmm03a.hrs_per_pce,bmm08a.direct_rate,bmm03a.pcs_per_hour,yield,bmm03a.setup_time)
			units=fnopu(quant,bmm03a.hrs_per_pce,bmm03a.pcs_per_hour,yield,bmm03a.setup_time)
		else
			directcost=0
			units=0
		endif
		ohcost=directcost*bmm08a.ovhd_factor
		ounits=units*bmm08a.ovhd_factor

rem ----------- Direct Labor

		precision 2
		directcost=directcost*1
		ohcost=ohcost*1
		account$=bmm08a.gl_dir_lab$
		when$=pdate$
		amount=-directcost
		units=-units
		memo$=parent$+" "+bmm08a.code_desc$
		gosub glpost
		account$=parentgl$
		amount=directcost,units=-units,value=value+directcost
		gosub glpost

rem ----------- Overhead

		account$=bmm08a.gl_ovh_var$
		amount=-ohcost,units=-ounits
		gosub glpost
		account$=parentgl$
		amount=ohcost,units=ounits,value=value+ohcost
		gosub glpost
		precision num(ivs01a.precision$)
	wend

	return

explode: rem --- Explode Phantoms

	info$[0]=bmm02a.item_id$
	info[0]=quant*bmm02a.qty_required
	info[1]=yield
	info$[11]=bmm02a.bill_no$
	call pgmdir$+"bmc_explodeupdate.aon",channel[all],info$[all],info[all],bmm02a.item_id$,table_chans$[all]
	info[0]=quant
	info[1]=yield
	value=value+info[2]

	return

glpost: rem --- Standard G/L Posting Routine

	if gl$<>"Y" then
		return
	endif
	call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,glt14_dev,account$,when$,ref1$,ref2$,ref3$,memo$,amount,units,status

	return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

	def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
	def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
	def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
	def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

	def fncenter(q$,q)=int((q-len(q$))/2)
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnop2(q1,q2,q3,q4,q5,q6)=q1*100*(q2*q3/q4)/q5+sgn(q1)*q6*q3
	def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))
	def fnsub(q1,q2,q3)=q1*q2/q3
	def fnopu(q1,q2,q3,q4,q5)=q1*100*(q2/q3)/q4+SGN(q1)*q5	

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

	def fnyy$(q$)=q$(3,2)
	def fnclock$(q$)=date(0:"%hz:%mz %p")
	def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

	def fnmask$(q1$,q2$)
		if q2$="" q2$=fill(len(q1$),"0")
		return str(-num(q1$,err=*next):q2$,err=*next)
		q=1
		q0=0
		while len(q2$(q))
			if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
			q=q+1
		wend
		if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
		return str(q1$:q2$)
        
	fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

	def fnbasename$(q$,q0$)
		q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
		if q then q$=q$(q+1)
		if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
		return q$
	fnend
	
rem --- fnglobal: Return numeric value of passed stbl variable

	def fnglobal(q$,q1)
		q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
		return q1
	fnend

rem --- fnglobal$: Return string value of passed STBL variable

	def fnglobal$(q$,q1$)
		q1$=stbl(q$,err=*next)
		return q1$
	fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release


rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

        exit
rem --- #endinclude std_exit.src

        end
