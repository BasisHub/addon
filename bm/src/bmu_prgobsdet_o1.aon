rem --- Bill of material Purge Obsolete Data
rem --- Program bmu_bb v8.0.0 08Feb2008 (bmu_bb) bmu_prgobsdet_o1.aon
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/08/2008 02:11:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$


rem --- Background
escape
    call pgmdir$+"adc_progress.aon","N","","","","",0,bmm01_dev,1,meter_num,ignore_status

rem --- Disallow 'M'enu option in Error Routine

    exit_ctrl=1
    more=1
    flag=0
rem --- Initial Read

    call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLSUB","PRIMARY",bmm05a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAST","PRIMARY",bmm01a_key_tpl$,rd_table_chans$[all],status$
escape
    read (bmm01_dev,key=firm_id$+billfrom$,dom=main)
    dim bmm01_key$:bmm01a_key_tpl$
    bmm01_key$=firm_id$+billfrom$
    flag=1

   

rem --- Main Read
main:
    while more
        if flag=0 then bmm01_key$=key(bmm01_dev,end=*break)
        flag=0
        if pos(firm_id$=bmm01_key$)<>1 then break
        if billthru$<>"" then 
            if bmm01_key.bill_no$>billthru$ then break
        endif
        read record (bmm01_dev,key=bmm01_key$) bmm01$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        
rem --- Material Detail Lines

        read (bmm02_dev,key=firm_id$+bmm01.bill_no$,dom=*next)

rem --- Material Detail Loop
        dim bmm02_key$:bmm02_key_tpl$
        while more
            bmm02_key$=key(bmm02_dev,end=*break)
            if pos(bmm01.firm_id$=bmm02_key.firm_id$)<>1 and
:              pos(bmm01.bill_no$=bmm02_key.bill_no$) then break
            read record (bmm02_dev,key=bmm02_key$) bmm02$
            if bmm02.obsolt_date$ <>"   " and bmm02.obsolt_date$<=r2$ 
                remove (bmm02_dev,key=bmm02_key$)
            endif
            if bmm02.obsolt_date$ <>"   " and bmm02.obsolt_date$<=r2$ 
                remove (bmm04_dev,key=bmm02.firm_id$+bmm02.item_id$+bmm02.bill_no$+bmm02.material_seq$,dom=*next)
            endif
        wend

rem --- Operation Detail Lines

        read (bmm03_dev,key=firm_id$+bmm01.bill_no$,dom=*next)

rem --- Operation Detail Loop
        dim bmm03_key$:bmm03_key_tpl$
        while more
            bmm03_key$=key(bmm03_dev,end=*break)
            if pos(bmm01.firm_id$=bmm03_key.firm_id$)<>1 and
:              pos(bmm01.bill_no$=bmm03_key.bill_no$) then break

            read record (bmm03_dev,key=bmm03_key$) bmm03$
            if bmm03.obsolt_date$<>"   " and bmm03.obsolt_date$<=r2$ 
                remove (bmm03_dev,key=bmm03_key$)
            endif
            if bmm03.obsolt_date$<>"   " and bmm03.obsolt_date$<=r2$ 
                remove (bmm06_dev,key=bmm03.firm_id$+bmm03.op_code$+bmm03.bill_no$+bmm03.op_seq$,dom=*next)
            endif
        wend

rem --- Subcontract Detail Lines

        read (bmm05_dev,key=firm_id$+bmm01.bill_no$,dom=*next)

rem --- Subcontract Detail Loop
        dim bmm05_key$:bmm05_key_tpl$
        while more
            bmm05_key$=key(bmm05_dev,end=*break)
            if pos(bmm01.firm_id$=bmm05_key.firm_id$)<>1 and
:              pos(bmm01.bill_no$=bmm05_key.bill_no$) then break
            read record (bmm05_dev,key=bmm05_key$) bmm05$
            if bmm05.obsolt_date$<>"   " and bmm05.obsolt_date$<=r2$ 
                remove (bmm05_dev,key=bmm05_key$)
            endif
        wend
    wend

done: rem --- End

    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
