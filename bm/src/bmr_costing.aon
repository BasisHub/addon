rem --- BOM Costing Report
rem Program ID: bmr_costing.aon 

rem --- AddonSoftware Version 11.11.0 - 02Sep2011
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    setesc std_error
    seterr std_error

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

    use ::sys/prog/bao_utilities.bbj::BarUtils

    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 50; rem -50 keeps it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 50
    
rem --- Get HashMap of Values in Options Entry Form

    params! = Option!.getOptionMap()

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Set document Directory

    docdir$=""
    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    user_id$=sysinfo.user_id$
    proc_date$=date(jul(num(sysinfo.system_date$(1,4)),num(sysinfo.system_date$(5,2)),num(sysinfo.system_date$(7,2))):stbl("+DATE_MASK"))
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$

rem --- Assign form input values to local variables

	from_bill$=Option!.getOptionData("BILL_NO_1")
	thru_bill$=Option!.getOptionData("BILL_NO_2")
	prod_date$=Option!.getOptionData("EFFECT_DATE")
	comments$=Option!.getOptionData("INCLUDE_COMMENTS")
	whse$=Option!.getOptionData("WAREHOUSE_ID")

rem --- Open Files    

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="bmm-01",ids$[1]="BMM_BILLMAST"
    files$[2]="bmm-02",ids$[2]="BMM_BILLMAT"
	files$[3]="bmm-03",ids$[3]="BMM_BILLOPER"
	files$[4]="bmm-05",ids$[4]="BMM_BILLSUB"
	files$[5]="bmm-08",ids$[5]="BMC_OPCODES"
	rem files$[6]="",ids$[6]=""
	files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
	files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
    files$[9]="bms_params",ids$[9]="BMS_PARAMS"
    files$[10]="ivs_params",ids$[10]="IVS_PARAMS"
	
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    bms_params_dev=channels[9]
    dim bms_params$:templates$[9]
    ivs_params_dev=channels[10]
    dim ivs_params$:templates$[10]

rem --- Get needed BM and IV parameters

    read record (bms_params_dev,key=firm_id$+"BM00") bms_params$
    params!.put("BM_PRECISION",str(bms_params.bm_precision))

    read record (ivs_params_dev,key=firm_id$+"IV00") ivs_params$
    params!.put("IV_PRECISION",ivs_params.precision$)

rem Create params for the report
    params!.put("FIRM_ID",firm_id$)
    params!.put("REPORT_NAME",sysinfo.task_desc$)
    params!.put("FIRM_NAME",firm_name$)
    params!.put("BARISTA_WD",dir(""))
    params!.put("BILL_NO_1",from_bill$)
    params!.put("BILL_NO_2",thru_bill$)
    params!.put("WHSE",whse$)
    params!.put("PROD_DATE",prod_date$)
    if comments$="Y"
        params!.put("COMMENT_YN","Y")
    else
        params!.put("COMMENT_YN","N")
    endif
    params!.put("ALL_DATES","N")

rem --- Add masks to params!

    mask$=""
    call stbl("+DIR_PGM")+"adc_getmask.aon","","BM","C","",msk$,0,0
    masks$=masks$+"bm_cost_mask^"+msk$+"|"
    call stbl("+DIR_PGM")+"adc_getmask.aon","","BM","H","",msk$,0,0
    masks$=masks$+"bm_hour_mask^"+msk$+"|"
    call stbl("+DIR_PGM")+"adc_getmask.aon","","BM","M","",msk$,0,0
    masks$=masks$+"bm_mFactor_mask^"+msk$+"|"
    call stbl("+DIR_PGM")+"adc_getmask.aon","","BM","R","",msk$,0,0
    masks$=masks$+"bm_rate_mask^"+msk$+"|"
    call stbl("+DIR_PGM")+"adc_getmask.aon","","BM","U","",msk$,0,0
    masks$=masks$+"bm_unit_mask^"+msk$+"|"
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",msk$,0,0
    masks$=masks$+"iv_cost_mask^"+msk$+"|"
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",msk$,0,0
    masks$=masks$+"iv_units_mask^"+msk$+"|"
    
    params!.put("MASKS",masks$)

rem --- Inventory In-Active Parameters
        rem "ITEM INACTIVE FEATURE"
        inactive$=option!.getOptionData("IV_ITEM_INACTIVE")
        if inactive$="Y" then
          params!.put("OPTION_ACTIVE","Y")
        else
          params!.put("OPTION_ACTIVE","N")
        endif
        params!.put("INACTIVE_ITEM",Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_ITEMS")+" = "+inactive$)

rem --- Make Document Archive Record and Get ID

    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=rd_alias_id$
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$="DOC_ID-NOREPRINT"
    gosub document_whse
    rd_archive_action$=""

rem --- Document Output Report Parameters

    params!.put("DOC_NO",rd_doc_id$)
    params!.put("DATE_REP",rep_date$+"  "+rep_time$)

rem --- Set Report Name & Subreport directory

	reportDir$ = stbl("+DIR_REPORTS",err=*next)
	reportTitle$="BOM Costing Report"
    repTitle!=sysinfo.task_desc$+"_"+rd_doc_id$
    repTitle$=repTitle!.replace(" ","_")
	temp = unt
	open (temp)reportDir$
	reportDir$ = fid(temp)(9)+"/"
	close (temp)
	reportBaseName$ = "BOMCosting"
	filename$ = reportDir$ + reportBaseName$ + ".jasper"

	declare BBJasperReport report!

rem --- Check for user authentication

    report! = BarUtils.getBBJasperReport(filename$,err=CONNECT_ERR)
    report!.putParams(params!)

rem --- Set Report Locale

    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)

    report!.setLocale(locale$)

rem --- Fill Report and Show
    rc=report!.fill(1)
    if rc<>BBJasperReport.getSUCCESS() then goto close_win
    
    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path
    
    declare BBJasperViewerWindow viewerWindow!
    viewerWindow! = new BBJasperViewerWindow(report!,0,0,screen_width,screen_height,repTitle$,$00080093$)

    viewerControl! = viewerWindow!.getViewerControl()
    viewerControl!.setGoogleDefaultDocument(repTitle$)
    viewerControl!.setDefaultSaveFolder(rd_doc_path$)
    viewerControl!.setDefaultSaveFile(repTitle$)
    viewerControl!.setFitWidth()

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    saveMenuButton! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    saveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnSaveMenuButton")

    emailToolButton! = viewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    emailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnEmailToolButton")
    
    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)
        
    declare BBjTopLevelWindow bbjWindow!
    bbjWindow!= viewerWindow!.getViewerWindow()
    cancelled=1
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"close_win",err=*next); cancelled=0
    if cancelled then goto close_win

rem --- Event Control

    process_events,err=*same

    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_tmp_dir$=stbl("+DOC_DIR_PDF",err=*endif)
        rd_temp_wd$=dsk("")+dir("")
        if pos(":"=rd_tmp_dir$) setdrive rd_tmp_dir$(1,pos(":"=rd_tmp_dir$)-1),err=*next
        chdir rd_tmp_dir$,err=*next
        rd_doc_path$=dsk("")+dir("")
        if pos(":"=rd_temp_wd$) setdrive rd_temp_wd$(1,pos(":"=rd_temp_wd$)-1)
        chdir rd_temp_wd$
    endif

    return

OnSaveMenuButton:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_name$=repTitle$+".pdf"
        rd_doc_ext$="PDF"
        report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif
    return    

OnEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

close_win:rem --- Viewer Window Closed
    viewerWindow!.destroy(err=*next)
    rdForm!.destroy(err=*next)
    if tcb(13) then exit
    release

all_done: rem --- Exit

    goto std_exit

	CONNECT_ERR:
	x = msgbox(errmes(-1),16,"Connection Failed")
	release

open_tables: rem --- Open Tables

	call sypdir$+"bac_open_tables.bbj",		open_beg,		open_end,		open_tables$[all],		open_opts$[all],		open_chans$[all],		open_tpls$[all],		table_chans$[all],		open_batch,		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message: rem --- Display Message Dialog

	call sypdir$+"bac_message.bbj",		msg_id$,		msg_tokens$[all],		msg_opt$,		table_chans$[all]

	return

rem --- Functions

    def fnline2y%(tmp0)=(tmp0*12)+12+top_of_detail+2

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	release

end
