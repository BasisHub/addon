rem --- Inventory Costing
rem --- Program bmu_ivcosting_o1 v8.0.0 07Jan2008 (bmr_fb/bmr_invcost_o1)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/07/2008 11:28:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Init Data

        circular_max=100; rem When reached, pgm assumes circular reference in a bill (explode routine)
		i0=0; rem cntr to check circular reference
        more=1
        dim tmpcosts[3]
        tmatcost=0
        tdircost=0,tohcost=0,tsubcost=0
        precision bms01a.bm_precision

rem -- Column heading

        call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMWHSE","PRIMARY",ivm02a_key_tpl$,rd_table_chans$[all],status$
        dim ivm02a_key$:ivm02a_key_tpl$
		
        call pgmdir$+"adc_progress.aon","N","","","","",0,bmm01_dev,1,meter_num,status

        extract record (bmm01_dev,key=firm_id$+billfrom$,dom=*next) bmm01a$

rem --- Read Master

    while more
        read record (bmm01_dev,end=done) bmm01a$
		if bmm01a.firm_id$<>firm_id$ then goto done
        if billthru$<>"" then
            if bmm01a.bill_no$>billthru$ then goto done
        endif

        find (ivm02_dev,key=firm_id$+whse$+bmm01a.bill_no$,dom=*continue); rem "Skip if not in specified whse
        h=0
        i0=0; rem cntr to check circular reference

		call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        gosub explode

rem --- Get Material Information

        while more

            if cvs(bill_list$,3)="" then break
            ivm02a_key$=firm_id$+whse$+bill_list$(len(bill_list$)-20+1,20)

            if len(bill_list$)>20 then
                bill_list$=bill_list$(1,len(bill_list$)-20)
            else
                if len(bill_list$)=20 then bill_list$=""
            endif
            read record (bmm01_dev2,key=firm_id$+ivm02a_key.item_id$,dom=*next) bmm01a2$
            
            tmatcost=0
            tdircost=0,tohcost=0,tsubcost=0
            read (bmm02_dev,key=firm_id$+ivm02a_key.item_id$,dom=*next)

            while more
                read record (bmm02_dev,end=*break) bmm02a$
                if pos(firm_id$+ivm02a_key.item_id$=bmm02a.firm_id$+bmm02a.bill_no$)<>1 then break
                if cvs(bmm02a.effect_date$,3)<>"" and bmm02a.effect_date$>pdate$ then continue
                if cvs(bmm02a.obsolt_date$,3)<>"" and bmm02a.obsolt_date$<=pdate$ then continue            
                find record (ivm02_dev,key=firm_id$+whse$+bmm02a.item_id$,dom=*continue) ivm02a$
                tmatcost=tmatcost+ivm02a.unit_cost
:				        *fnqty(bmm02a.qty_required,
:							   bmm02a.alt_factor,
:							   bmm02a.divisor,
:							   bmm01a2.est_yield,
:							   bmm02a.scrap_factor)
            wend

get_op_info: rem --- Get Operation Information

            read (bmm03_dev,key=firm_id$+ivm02a_key.item_id$,dom=*next)

            while more
                read record (bmm03_dev,end=*break) bmm03a$
                if pos(firm_id$+ivm02a_key.item_id$=bmm03a.firm_id$+bmm03a.bill_no$)<>1 then break
                if cvs(bmm03a.effect_date$,3)<>"" and bmm03a.effect_date$>pdate$ then continue
                if cvs(bmm03a.obsolt_date$,3)<>"" and bmm03a.obsolt_date$<=pdate$ then continue
             
				bmm08a.direct_rate=0
                read record (bmm08_dev,key=bmm03a.firm_id$+bmm03a.op_code$,dom=*next) bmm08a$
                if bmm01a2.std_lot_size=0 then bmm01a2.std_lot_size=1
                if bmm03a.pcs_per_hour<>0 then
                    directcost=fnop1(bmm03a.hrs_per_pce,
:									 bmm08a.direct_rate,
:									 bmm03a.pcs_per_hour,
:									 bmm01a2.est_yield,
:									 bmm03a.setup_time,
:									 bmm01a2.std_lot_size)
                else
                    directcost=0
                endif
                ohlabcost=directcost*bmm08a.ovhd_factor
                tdircost=tdircost+directcost
                tohcost=tohcost+ohlabcost
            wend

get_sub_info: rem --- Get Subcontract Information

            if ap$<>"N" then
                read (bmm05_dev,key=firm_id$+ivm02a_key.item_id$,dom=*next)
                while more
                    read record (bmm05_dev,end=*break) bmm05a$
                    if pos(firm_id$+ivm02a_key.item_id$=bmm05a.firm_id$+bmm05a.bill_no$)<>1 then break
                    if cvs(bmm05a.effect_date$,3)<>"" and bmm05a.effect_date$>pdate$ then continue
                    if cvs(bmm05a.obsolt_date$,3)<>"" and bmm05a.obsolt_date$<=pdate$ then continue
                    if bmm05a.divisor*bmm01a2.est_yield<>0 then
                        tsubcost=tsubcost+bmm05a.unit_cost*fnsub(bmm05a.qty_required,bmm05a.alt_factor,bmm05a.divisor)
                    endif
                wend
            endif

write_totals: rem --- Write Total Information

			savebmm01a2_est_yield=bmm01a2.est_yield; rem Save numerics in case they were changed
            savebmm01a2_std_lot_size=bmm01a2.std_lot_size; rem Save numerics in case they were changed
            
			if (bmm01a.firm_id$+bmm01a.bill_no$)=(firm_id$+ivm02a_key.item_id$) then
                bmm01a2$=bmm01a$; rem If main bill, use main bill strings when writing using bmm01a2$
             else
                 extract record (bmm01_dev2,key=firm_id$+ivm02a_key.item_id$,dom=*break)bmm01a2$; rem --- Advisory locking
                 read (bmm01_dev2)
            endif
			
			bmm01a2.est_yield=savebmm01a2_est_yield; rem use possibly-changed numerics when writing using bmm01a2$
            bmm01a2.std_lot_size=savebmm01a2_std_lot_size; rem use possibly-changed numerics when writing using bmm01a2$

            write record (bmm01_dev) bmm01a2$

rem --- Write Inventory Record - with new cost for Finished Good
rem --       Standard Cost: Always update
rem --    Replacement Cost: If bill is the original Parent, update
rem --                      If bill is sub-bill AND a Phantom, update
rem --        Average Cost: If bill is a Phantom, update

            if cost_param$<>"S" then
                if !(cost_param$="R" and pos(ivm02a_key.item_id$=bmm01a.bill_no$)=1) then
                    if bmm01a2.phantom_bill$<>"Y" continue
                endif
            endif

            extract record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
            tcost=tmatcost+tdircost+tohcost+tsubcost
            gosub calc_costs
			
			ivm02a.item_id$=ivm02a_key.item_id$
            write record (ivm02_dev) ivm02a$

rem Main Loop Ends

        wend

    wend

done: rem --- End

    goto std_exit

explode: rem --- Explode

    bill_list$=bmm01a.bill_no$
    billseq_list$=""
    curr_billnseq$=bmm01a.bill_no$

    while more
        read (bmm02_dev,key=firm_id$+curr_billnseq$,dom=*next)
        while more
            begin_flag=0
            read record (bmm02_dev,end=*break) bmm02a$
            if pos(bmm02a.bill_no$=curr_billnseq$)<>1 then break
            if pos(bmm02a.item_id$=bill_list$)<>0 then gosub check_circular_ref
            find (bmm01_dev2,key=firm_id$+bmm02a.item_id$,dom=*continue); rem Skip if the component is not a bill
            if pos(bmm02a.item_id$=bill_list$)<>0 then continue; rem Skip if component is a dup
            if cvs(bmm02a.effect_date$,3)<>"" and bmm02a.effect_date$>pdate$ then continue
            if cvs(bmm02a.obsolt_date$,2)<>"" and bmm02a.obsolt_date$<=pdate$ then continue
            bill_list$=bill_list$+bmm02a.item_id$
            billseq_list$=billseq_list$+curr_billnseq$(1,20)+bmm02a.material_seq$
            curr_billnseq$=bmm02a.item_id$
            begin_flag=1
            break
        wend
        if begin_flag=1 then continue
        if billseq_list$="" then break
        curr_billnseq$=billseq_list$(len(billseq_list$)-22,23)
        billseq_list$=billseq_list$(1,len(billseq_list$)-23)
    wend
    return

calc_costs: rem --- Calc IVM02 costs

rem --- Set Average cost

        ivm02a.avg_cost=tcost

rem --- Set replacement cost

        if tcost<>0 then ivm02a.rep_cost=tcost

rem --- Set Standard Cost

        ivm02a.std_cost=tcost

rem --- Set unit cost

        if cost_param$="A"
            ivm02a.unit_cost=ivm02a.avg_cost; rem "Average Costing
        endif
        if cost_param$="S"
            ivm02a.unit_cost=ivm02a.std_cost; rem "Standard Costing
        endif
        if cost_param$="R"
            ivm02a.unit_cost=ivm02a.rep_cost; rem "Replacement Costing
        endif
        return

check_circular_ref: rem --- Circular Reference
        i0=i0+1
        if i0<circular_max then
            return
        endif
        dim message$[1]
        message$[0]=Translate!.getTranslation("AON_CIRCULAR_REFERENCE_FOUND_FOR_THIS_BILL_NUMBER")
        call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3

        if v3=4 then exitto std_exit
        i0=0
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))
    def fnop1(q1,q2,q3,q4,q5,q6)=100*(q1*q2/q3)/q4+q5*q2/q6
    def fnsub(q1,q2,q3)=q1*q2/q3

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend


rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #endinclude fndate.src

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
