rem --- rem bmr Bill of Materials Indented Bills
rem --- Program bmr_indentedbill v8.0.0 09Jan2008 (bmr_za)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/09/2008 03:21:53)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        num_files=11
		dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="BMM_BILLMAST",open_opts$[1]="OTA"
        open_tables$[2]="BMM_BILLMAT",open_opts$[2]="OTA"
        open_tables$[3]="BMM_BILLOPER",open_opts$[3]="OTA"
        open_tables$[4]="BMM_BILLSUB",open_opts$[4]="OTA"
        open_tables$[5]="BMC_OPCODES",open_opts$[5]="OTA"
        open_tables$[6]="BMS_PARAMS",open_opts$[6]="OTA"
        open_tables$[7]="IVM_ITEMMAST",open_opts$[7]="OTA"
        open_tables$[8]="IVM_ITEMWHSE",open_opts$[8]="OTA"
        open_tables$[9]="IVC_PRODCODE",open_opts$[9]="OTA"
        open_tables$[10]="IVM_ITEMSYN",open_opts$[10]="OTA"
        open_tables$[11]="IVS_PARAMS",open_opts$[11]="OTA"

		gosub open_tables
		
        bmm01_dev=num(open_chans$[1])
        bmm02_dev=num(open_chans$[2])
        bmm03_dev=num(open_chans$[3])
        bmm05_dev=num(open_chans$[4])
        bmm08_dev=num(open_chans$[5])
        bms01a_dev=num(open_chans$[6])
        ivm01_dev=num(open_chans$[7])
        ivm02_dev=num(open_chans$[8])
        ivm10_dev=num(open_chans$[9])
        ivm14_dev=num(open_chans$[10])
        ivs01a_dev=num(open_chans$[11])

rem --- Dimension string templates

        dim bmm01a$:open_tpls$[1],bmm02a$:open_tpls$[2],bmm03a$:open_tpls$[3]
        dim bmm05a$:open_tpls$[4],bmm08a$:open_tpls$[5],bms01a$:open_tpls$[6]
        dim ivm01a$:open_tpls$[7],ivm02a$:open_tpls$[8],ivm10a$:open_tpls$[9]
        dim ivm14a$:open_tpls$[10],ivs01a$:open_tpls$[11]

        dim bmm01a2$:open_tpls$[1]
        bmm01_dev2=bmm01_dev

rem --- Assign form input values to local variables

        level$=Option!.getOptionData("level_selection")
        level=num(level$)
        showcost$=Option!.getOptionData("include_costinfo")
        billfrom$=Option!.getOptionData("bill_no_1")
        billthru$=Option!.getOptionData("bill_no_2")
        pdate$=Option!.getOptionData("effect_date")
        whse$=Option!.getOptionData("warehouse_id")

rem --- Retrieve parameter records

        bms01a_key$=firm_id$+"BM00"
        find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$
        find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
        find record (bms01a_dev,key=firm_id$+"BM00",dom=std_missing_params) bms01a$
        dim p[1],desc[3],params[3]
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$)
        desc[0]=desc[1]+desc[2]+desc[3]
        p[0]=ivs01a.item_id_len
        p[1]=num(ivs01a.current_per$)
        params[0]=p[0]

rem --- Init Data

        l9=59
        l=l9+1
        dim dashes$(80,"-")
        if level$="0"
			level=9
			level$="9"
		endif
        if pdate$="" pdate$=sysinfo.system_date$
        dim description$[1],field[1],position[1],length[1]
        number=1
        title$=Translate!.getTranslation("AON_WAREHOUSE_LOOKUP"),record$="C"
        description$[0]=Translate!.getTranslation("AON_WHSE")
        position[0]=4,length[0]=2
        description$[1]=Translate!.getTranslation("AON_DESCRIPTION")
        position[1]=6,length[1]=24
        field[0]=1
        field[1]=1,column=40,row=4

rem --- Run Overlay

        run pgmdir$+"bmr_indentedbill_o1.aon"

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
       msg_id$="ENTRY_OPEN_ERROR"
       dim msg_tokens$[1]
       msg_tokens$[1]=open_status$
       gosub disp_message
       rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
       release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
