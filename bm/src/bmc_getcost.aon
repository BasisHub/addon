rem --- Get Bill Cost
rem --- Program bmc_ea v8.0.0 16Jan2008 (bmc_ea)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/16/2008 09:40:26)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

	setesc std_error
	seterr std_error
	enter bill$,run_qty,pdate$,ap$,phantom$,level,mat_cost,lab_cost,oh_cost,sub_cost,setup_div,sub_qty,lfy$,wh$,ea_status

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Open/Lock files
	num_files=12
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="APS_PARAMS",open_opts$[1]="OTA"

	gosub open_tables

	open_tables$[1]="BMM_BILLMAST",open_opts$[1]="OTA"
	open_tables$[2]="BMM_BILLMAT",open_opts$[2]="OTA"
	open_tables$[3]="BMM_BILLOPER",open_opts$[3]="OTA"
	open_tables$[4]="BMM_BILLSUB",open_opts$[4]="OTA"
	open_tables$[5]="BMC_OPCODES",open_opts$[5]="OTA"
	open_tables$[6]="BMM_BILLCMTS",open_opts$[6]="OTA"
	open_tables$[7]="BMS_PARAMS",open_opts$[7]="OTA"
	open_tables$[8]="IVM_ITEMWHSE",open_opts$[8]="OTA"
	open_tables$[9]="IVM_ITEMTIER",open_opts$[9]="OTA"
	open_tables$[10]="IVS_PARAMS",open_opts$[10]="OTA"
	open_tables$[11]="IVW_LFDET",open_opts$[11]="OTA"
	open_tables$[12]="IVW_LFCOST",open_opts$[12]="OTA"
	gosub open_tables

	bmm01_dev=num(open_chans$[1])
	bmm02_dev=num(open_chans$[2])
	bmm03_dev=num(open_chans$[3])
	bmm05_dev=num(open_chans$[4])
	bmm08_dev=num(open_chans$[5])
	bmm09_dev=num(open_chans$[6])
	bms01a_dev=num(open_chans$[7])
	ivm02_dev=num(open_chans$[8])
	ivm04_dev=num(open_chans$[9])
	ivs01a_dev=num(open_chans$[10])
	ivw04_dev=num(open_chans$[11])
	ivw05_dev=num(open_chans$[12])

rem --- Dimension string templates

	dim bmm01a$:open_tpls$[1],bmm02a$:open_tpls$[2],bmm03a$:open_tpls$[3],
:	bmm05a$:open_tpls$[4],bmm08a$:open_tpls$[5],bmm09a$:open_tpls$[6],
:	bms01a$:open_tpls$[7],ivm02a$:open_tpls$[8],ivm04a$:open_tpls$[9],
:	ivs01a$:open_tpls$[10],ivw04a$:open_tpls$[11],ivw05a$:open_tpls$[12]

rem --- Retrieve parameter records

	bms01a_key$=firm_id$+"BM00"
	find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
	ivs01a_key$=firm_id$+"IV00"
	find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

	n2$="IV"
	find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$

rem --- Initialize Data
	more=1
	places=num(ivs01a.precision$)
	mat_cost=0
	lab_cost=0
	oh_cost=0
	sub_cost=0
	lf$="N"
	dim l[11],r[10],s[11]
	precision places
	if pos(ivs01a.lifofifo$="LF")>0 then let lf$="Y"
	dim iv_chans[10]
	iv_chans[0]=ivm04_dev
	iv_chans[1]=ivw04_dev,iv_chans[2]=ivm02_dev
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03a_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLSUB","PRIMARY",bmm05a_key_tpl$,rd_table_chans$[all],status$
	dim bmm02a_key$:bmm02a_key_tpl$
	dim bmm03a_key$:bmm03a_key_tpl$
	dim bmm05a_key$:bmm05a_key_tpl$

rem --- Get Header Record

	read record (bmm01_dev,key=firm_id$+bill$,dom=done) bmm01a$

rem --- Get Material Cost

	read (bmm02_dev,key=firm_id$+bill$,dom=*next)

	while more
		bmm02a_key$=key(bmm02_dev,end=*break)
		if pos(firm_id$+bill$=bmm02a_key$)<>1 then break
		read record (bmm02_dev) bmm02a$
		if bmm02a.line_type$<>"S" then  continue
		if cvs(bmm02a.effect_date$,2)<>"" then 
			if bmm02a.effect_date$>pdate$ then 
				continue
			endif
		endif
		if cvs(bmm02a.obsolt_date$,2)<>"" then 
			if bmm02a.obsolt_date$<=pdate$ then 
				continue
			endif
		endif
		if phantom$<>"N" then 
			find record (bmm01_dev,key=firm_id$+bmm02a.item_id$,dom=find_record) bmm01a$
			if l2$(40,1)="Y" then 
				gosub explodephantoms
				read (bmm02_dev,key=bmm02a_key$)
				continue
			endif
		endif
find_record:
		if bmm02a.divisor=0 then let bmm02a.divisor=1
		find record (ivm02_dev,key=firm_id$+wh$+bmm02a.item_id$,dom=not_in_whse) ivm02a$
		if lfy$="Y" and lf$="Y" then gosub lifo_fifo; let ivm02a.unit_cost=icost
		mat_cost=mat_cost+round(ivm02a.unit_cost*fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*run_qty,2)/run_qty
		if level>1 then let mat_cost=mat_cost*run_qty
		continue
not_in_whse:
		ea_status=11; rem "Not in whse"

	wend

rem --- Get Labor Costs

        read (bmm03_dev,key=firm_id$+bill$,dom=*next)
        while more
            bmm03a_key$=key(bmm03_dev,end=*break)
            if pos(firm_id$+bill$=bmm03a_key$)<>1 then break
            read record (bmm03_dev) bmm03a$
            if bmm03a.line_type$<>"S" then continue
            if cvs(bmm03a.effect_date$,3)<>"" and bmm03a.effect_date$>pdate$ then continue
            if cvs(bmm03a.obsolt_date$,3)<>"" and bmm03a.obsolt_date$<=pdate$ then continue
            find record (bmm08_dev,key=firm_id$+bmm03a.op_code$,dom=*continue) bmm08a$
            directcost=round(fnop1(bmm03a.hrs_per_pce,bmm08a.direct_rate,bmm03a.pcs_per_hour,bmm01a.est_yield,bmm03a.setup_time,setup_div)*run_qty,2)/run_qty
            ohcost=round(directcost*bmm08a.ovhd_factor*run_qty,2)/run_qty
            if level>1 then let directcost=directcost*run_qty,ohcost=ohcost*run_qty
            lab_cost=lab_cost+directcost
            oh_cost=oh_cost+ohcost
        wend

rem --- Get Subcontract Cost

        if ap$<>"N" then 
            read (bmm05_dev,key=firm_id$+bill$,dom=*next)
            while more
                bmm05a_key$=key(bmm05_dev,end=*break)
                if pos(firm_id$+bill$=bmm05a_key$)<>1 then break
                read record (bmm05_dev) bmm05a$
                if bmm05a.line_type$<>"S" then continue
                if cvs(bmm05a.effect_date$,3)<>"" and bmm05a.effect_date$>pdate$ then continue
                if cvs(bmm05a.obsolt_date$,3)<>"" and bmm05a.obsolt_date$<=pdate$ then continue
                if bmm05a.divisor=0 then let bmm05a.divisor=1
                if level>1 then let sub_cost=sub_cost+bmm05a.unit_cost*fnsub(bmm05a.qty_required,bmm05a.alt_factor,bmm05a.divisor)*sub_qty else let sub_cost=sub_cost+round(bmm05a.unit_cost*fnsub(bmm05a.qty_required,bmm05a.alt_factor,bmm05a.divisor)*sub_qty,2)/sub_qty
            wend
       endif

done: rem --- End Of Calculation

        goto std_exit

lifo_fifo: rem --- LIFO/FIFO

        dim item$[10]
        item$[0]=firm_id$
        item$[1]=wh$,item$[2]=bmm02a.item_id$,type$="R",lf_date$=pdate$
        action$=ivs01a.lifofifo$+"I"
        cost=ivm02a.unit_cost
        qty=abs(fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor))
        if fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)<0 then 

rem --- Inquires For Tier Cost For Returned Items

            action$(2,1)="R"
            type$="I"
            call pgmdir$+"ivc_lifofifo.aon",action$,type$,lf_date$,iv_chans[all],iv_tmpls$[all],item$[all],places,qty,cost,ret_cost,status
            if ret_cost<>0 then let cost=ret_cost
        endif
        call pgmdir$+"ivc_lifofifo.aon",action$,type$,lf_date$,iv_chans[all],iv_tmpls$[all],item$[all],places,qty,cost,ret_cost,status
        if ret_cost<>0 then let icost=ret_cost
        w9$=fill(17)+bmm02a.item_id$+bmm02a.material_seq$
        write record (ivw05_dev,key=w9$) ivw05a$
return

explodephantoms: rem --- Explode Phantoms

        run1_qty=fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*run_qty
        sub1_qty=sub_qty*bmm05a.qty_required
        while more
            km02$=key(bmm02_dev,end=reset_ptr); rem "Save ptr
            break
            reset_ptr:
            read (bmm02_dev,key="",dom=*next); rem "On EOF reset ptr to beg of file
        wend

        call pgmdir$+"bmc_getcost.aon",bmm02a.item_id$,run1_qty,pdate$,ap$,phantom$,level+1,mat1_cost,lab1_cost,oh1_cost,sub1_cost,setup_div,sub1_qty,lfy$,wh$,ea_status
        mat_cost=mat_cost+mat1_cost
        lab_cost=lab_cost+lab1_cost,oh_cost=oh_cost+oh1_cost,sub_cost=sub_cost+sub1_cost
        read (bmm02_dev,key=km02$); rem "Replace ptr
return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))
    def fnsub(q1,q2,q3)=q1*q2/q3
    def fnop1(q1,q2,q3,q4,q5,q6)=100*(q1*q2/q3)/q4+q5*q2/q6

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
