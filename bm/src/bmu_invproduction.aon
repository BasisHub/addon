rem --- Inventory Production Update
rem --- Program bmu_aa v8.0.0 28Jan2008 (bmu_aa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/28/2008 11:02:29)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

	setesc std_error
	seterr std_error

	next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
	OutVect!=null()

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Open/Lock files  

	num_files=9
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

	open_tables$[1]="IVM_ITEMTIER",open_opts$[1]="OTA"
	open_tables$[2]="IVM_ITEMVEND",open_opts$[2]="OTA"
	open_tables$[3]="IVM_LSMASTER",open_opts$[3]="OTA"
	open_tables$[4]="IVM_ITEMACT",open_opts$[4]="OTA"
	open_tables$[5]="IVM_LSACT",open_opts$[5]="OTA"
	open_tables$[6]="IVT_LSTRANS",open_opts$[6]="OTA"
	open_tables$[7]="IVT_ITEMTRAN",open_opts$[7]="OTA"
	open_tables$[8]="IVW_LFDET",open_opts$[8]="OTA"
	open_tables$[9]="IVW_LFCOST",open_opts$[9]="OTA"

	gosub open_tables

	ivm04_dev=num(open_chans$[1])
	ivm05_dev=num(open_chans$[2])
	ivm07_dev=num(open_chans$[3])
	ivm12_dev=num(open_chans$[4])
	ivm17_dev=num(open_chans$[5])
	ivt01_dev=num(open_chans$[6])
	ivt04_dev=num(open_chans$[7])
	ivw04_dev=num(open_chans$[8])
	ivw05_dev=num(open_chans$[9])

rem --- Dimension string templates

	dim ivm04a$:open_tpls$[1],ivm05a$:open_tpls$[2],ivm07a$:open_tpls$[3]
	dim ivm12a$:open_tpls$[4],ivm17a$:open_tpls$[5],ivt01a$:open_tpls$[6]
	dim ivt04a$:open_tpls$[7],ivw04a$:open_tpls$[8],ivw05a$:open_tpls$[9]

rem --- Retrieve parameter records

	ars01a_key$=firm_id$+"AR00"
	find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
	bms01a_key$=firm_id$+"BM00"
	find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
	gls01a_key$=firm_id$+"GL00"
	find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
	ivs01a_key$=firm_id$+"IV00"
	find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

	n1$=sysinfo.firm_name$,n2$="IV",n3$=sysinfo.task_desc$
	find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
	dim r0$(36),info$[20]
	find record (bms01a_dev,key=firm_id$+"BM00",dom=std_missing_params) bms01a$
	find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
	ar_dist$="N"
	find record (ars01a_dev,key=firm_id$+"AR00",dom=label1) ars01a$
	if ars01a.dist_by_item$="Y" then
		call pgmdir$+"adc_application.aon","AR",info$[all]
		if info$[20]<>"N" then 
			num_files=1
			dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
			open_tables$[1]="ARC_DISTCODE",open_opts$[1]="OTA"
				
			gosub open_tables

			arm10_dev=num(open_chans$[1]);dim arm10d$:open_tpls$[1]
		endif
		ar_dist$="Y"
	endif

label1:
	dim g[4],info$[20]
	for x=0 to 4
		g[x]=num(g2$(x*2+1,2),err=*next)
	next x

	call pgmdir$+"adc_application.aon","BM",info$[all]
	gl$=info$[9]
	call pgmdir$+"adc_application.aon","AP",info$[all]
	ap$=info$[20]

rem --- Init Data

	precision num(ivs01a.precision$)
	ref1$=""
	ref2$=""
	costmethod$=ivs01a.cost_method$
	lifofifo$=ivs01a.lifofifo$
	more=1
	call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03_key_tpl$,rd_table_chans$[all],status$

rem --- Additional File Opens

    if ap$="Y" then
		num_files=1
		dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
		open_tables$[1]="BMM_BILLSUB",open_opts$[1]="OTA"
		
		gosub open_tables
		
        bmm05_dev=num(open_chans$[1]);dim bmm05a$:open_tpls$[1]
    endif 

    if gl$="Y" then
        num_files=2
		dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
		open_tables$[1]="GLM_ACCT",open_opts$[1]="OTA"
		open_tables$[2]="GLE_DAILYDETAIL",open_opts$[2]="OTA"

        gosub open_tables
        
        glm01_dev=num(open_chans$[1]);dim glm01a$:open_tpls$[1]
        glt04_dev=num(open_chans$[2]);dim glt04a$:open_tpls$[2]
    endif 

rem --- Options

	msg_id$="AON_UPDT_QUERY"
	dim x$:stbl("+SYSINFO_TPL")
	dim msg_tokens$[1]
	x$=stbl("+SYSINFO")                                                            
	msg_tokens$[1]=x.task_desc$
	gosub disp_message
	if msg_opt$<>"Y" then goto std_exit_no_update
	if gl$="Y" then call pgmdir$+"glc_ctlupdate.aon",status

rem --- Clear LIFO/FIFO Work Files

    if lifofifo$<>"N" then
        call pgmdir$+"adc_clearfile.aon",ivw04_dev
        call pgmdir$+"adc_clearfile.aon",ivw05_dev
    endif 

rem --- Initial Read

    call pgmdir$+"ivc_itemupdt.aon::init",files[all],ivs01a$,item$[all],refs$[all],refs[all],rd_table_chans$[all],ignore_status
	call pgmdir$+"adc_progress.aon","N","","","","",0,bme01_dev,1,meter_num,status
	
	rem --- Main Loop

    read (bme01_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)
    while more 
        value=0
        k0$=key(bme01_dev,end=*break)
        if pos(firm_id$=k0$)<>1 then break
        extract record (bme01_dev) bme01a$; rem --- Advisory locking
		if bme01a.batch_no$<>batch_no$ then break
        parent$=bme01a.item_id$
        update$=bme01a.update_flag$,whse$=bme01a.warehouse_id$
		call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Additional Reads

        bill$="N"
        read record (bmm01_dev,key=firm_id$+parent$,dom=label2) bmm01a$
        bill$="Y"
label2:
        if bmm01a.est_yield=0 then let bmm01a.est_yield=100

rem --- Item Number

        find record (ivm01_dev,key=firm_id$+parent$,dom=warehose) ivm01a$
        ref1$=Translate!.getTranslation("AON_WHSE_")+whse$
        ref2$=bme01a.bm_reference$
        parentgl$=ivm01a.gl_inv_acct$
        ivacct$=ivm01a.gl_inv_acct$
        find record (ivm02_dev,key=bme01a.firm_id$+bme01a.warehouse_id$+parent$,dom=get_cost_info) ivm02a$
        unitcost=ivm02a.unit_cost
        curlist=ivm02a.cur_price

get_cost_info: rem --- Get Cost Info

		tcost=unitcost
		if bme01a.qty_ordered>=0 and costmethod$="A"
			call pgmdir$+"bmc_getcost.aon",parent$,bme01a.qty_ordered,bme01a.prod_date$,ap$,
:                   "N",1,mat_cost,lab_cost,oh_cost,sub_cost,bme01a.qty_ordered,bme01a.qty_ordered,"Y",whse$,ea_status
			tcost=mat_cost+lab_cost+oh_cost+sub_cost
		endif 

warehose: rem --- Warehouse

        find record (ivm02_dev,key=bme01a.firm_id$+bme01a.warehouse_id$+parent$,dom=init_detail) ivm02a$
        if update$="Y" then

rem --- Dist Code
            if ar_dist$<>"N" then 
                dim parentgl$(g[4],"0")
                find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=init_IV_update) arm10d1$
                parentgl$=arm10d.gl_inv_acct$
                ivacct$=parentgl$
            endif 

init_IV_update: rem --- Init for IV update for Finished Good

            fg_glacct$=parentgl$
        endif 

init_detail: rem --- Init Detail

        if bill$<>"N" then
            read (bmm02_dev,key=bme01a.firm_id$+parent$,dom=*next)

rem --- Read Detail
                    
            while more
                dim bmm01a2$:fattr(bmm01a$)
                read record (bmm02_dev,end=*break) bmm02a$
                if cvs(bmm02a.effect_date$,3)<>"" then if bme01a.prod_date$<bmm02a.effect_date$ then continue
                if cvs(bmm02a.obsolt_date$,3)<>"" then if bme01a.prod_date$>=bmm02a.obsolt_date$ then continue
                if bmm02a.line_type$="M" then continue
                if bmm02a.firm_id$+bmm02a.bill_no$<>bme01a.firm_id$+parent$ then break
                bmm01a2.est_yield=100
                find record (bmm01_dev,key=bme01a.firm_id$+bmm02a.item_id$,dom=label3) bmm01a2$
                if bmm01a2.phantom_bill$="Y" then 
                    gosub explode
                    read (bmm02_dev,key=bmm02a.firm_id$+bmm02a.bill_no$+bmm02a.material_seq$,dom=*next); rem " --- Reset bmm-02 Pointer
                    continue
                endif 
label3:
                dim glacct$(g[4])
                find record (ivm01_dev,key=bme01a.firm_id$+bmm02a.item_id$,dom=*continue) ivm01a$
                childgl$=ivm01a.gl_inv_acct$
                glacct$=childgl$

rem --- Update Warehouse By Issuing Children

                if bmm02a.divisor=0 then let bmm02a.divisor=1
                find record (ivm02_dev,key=bme01a.firm_id$+bme01a.warehouse_id$+bmm02a.item_id$,dom=updategl) ivm02a$
                units=fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered
                if phantom$="Y" units=0; rem "So that when ATAMO processes phantoms, it won't change on-hand etc qty's in file
                iss_or_rec$="I"; rem "I=Issue, O=Receipt
                unitcost=ivm02a.unit_cost
                curlist=ivm02a.cur_price
                finished$=parent$
                item$=bmm02a.item_id$
                if bme01a.qty_ordered<>0 gosub atamo; rem "Update IV unless qty ordered is 0"

rem --- Distribution  

                dim arm10d2$:fattr(arm10d$)
                if ar_dist$<>"N" then
                    dim childgl$(g[4],"0")
                    find record (arm10_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=updategl) arm10d2$
                    childgl$=arm10d2.gl_inv_acct$
                endif 

updategl: rem --- Update G/L

                if update$="N" then let parentgl$=bms01a.gl_wip_acct$ else let parentgl$=ivacct$
                amount=unitcost*fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered
                units=fnqty(bmm02a.qty_required,bmm02a.alt_factor,bmm02a.divisor,bmm01a.est_yield,bmm02a.scrap_factor)*bme01a.qty_ordered
                precision 2
                amount=amount*1
                value=value+amount
                amount=-amount
                units=-units
                precision num(ivs01a.precision$)

rem --- Loop back for next record
            wend 
rem --- Operation & Subcontract Distribution

            gosub operation
            if ap$="Y" then gosub subcontracts
            if costmethod$="R" and bme01a.qty_ordered>=0 then 
                let tcost=value/bme01a.qty_ordered
            else
                if costmethod$<>"A" and bme01a.qty_ordered<0 then 
                    find record (ivm01_dev,key=firm_id$+parent$,dom=update_last_used_flag) ivm01a$
                    find record (ivm02_dev,key=bme01a.firm_id$+bme01a.warehouse_id$+parent$,dom=*next) ivm02a$
                    unitcost=ivm02a.unit_cost
                    tcost=unitcost
                    amount=value-tcost*bme01a.qty_ordered
                    units=0
                    if update$="N" then let parentgl$=bms01a.gl_wip_acct$ else let parentgl$=ivacct$
                    amount=-amount
                endif
            endif 
        endif 
update_last_used_flag: rem --- Update Last Used Flag

		extract record (bmm01_dev,key=firm_id$+parent$,dom=remove_record) bmm01a$; rem --- Advisory locking
		if bme01a.prod_date$>=bmm01a.lstact_date$ then let bmm01a.lstact_date$=bme01a.prod_date$,bmm01a.source_code$="B"
		write record (bmm01_dev) bmm01a$

rem --- Update Inventory for Finished Goods

		find record (ivm01_dev,key=firm_id$+parent$,dom=remove_record) ivm01a$
		find record (ivm02_dev,key=bme01a.firm_id$+bme01a.warehouse_id$+parent$,dom=*next) ivm02a$
		unitcost=tcost
		curlist=ivm02a.cur_price
		units=bme01a.qty_ordered
		if update$<>"Y" units=0; rem "Only change qtys if Update flag=Y
		if costmethod$="S" or update$="N" or bme01a.qty_ordered<0 unitcost=ivm02a.unit_cost; rem  "Use whse cost in ATAMO call so cost won't update under these conditions"
		item$=parent$
		glacct$=fg_glacct$
		finished$=fill(20)
		iss_or_rec$="O"; rem "I==Issue, O==Receipt"
		if update$="Y" and bme01a.qty_ordered<>0 gosub atamo; rem "Update IV if qty ordered is > 0 and Finished Goods Update Flag = "y".

remove_record: rem --- Remove Record

		remove (bme01_dev,key=firm_id$+bme01a.warehouse_id$+bme01a.prod_date$+bme01a.bm_reference$+bme01a.item_id$,dom=*continue)
    wend
   
done: rem --- End

	if gl$="Y"
		call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,status
		call pgmdir$+"glc_ctlupdate.aon",status
		call pgmdir$+"glc_ctldelete.aon",status
	endif
	call pgmdir$+"adc_batchdelete.aon",status
	goto std_exit

atamo: rem --- Update IV

	dim ref[3],ref$[11],b6$(g[4])
	action$="B"+iss_or_rec$
	item$[1]=whse$
	item$[2]=item$
	ref$[0]=bme01a.prod_date$
	ref$[2]=bme01a.bm_reference$
	ref$[7]=glacct$
	ref$[9]=finished$
	ref[0]=units
	ref[1]=unitcost,ref[2]=curlist
	if iss_or_rec$="I" then let ref[0]=-units

rem --- Inventory updates

	call pgmdir$+"ivc_itemupdt.aon",action$,files[all],ivs01a$,item$[all],ref$[all],ref[all],rd_table_chans$[all],status
	return

subcontracts: rem --- Subcontracts

	read (bmm05_dev,key=bme01a.firm_id$+bme01a.item_id$,dom=*next)
	while more
		k1$=key(bmm05_dev,end=*break)
		if pos(bme01a.firm_id$+parent$=k1$)<>1 then break
		read record (bmm05_dev) bmm05a$
		if cvs(bmm05a.effect_date$,3)<>"" then if bme01a.prod_date$<bmm05a.effect_date$ then continue
		if cvs(bmm05a.obsolt_date$,3)<>"" then if bme01a.prod_date$>=bmm05a.obsolt_date$ then continue
		if bmm05a.line_type$<>"S" then continue
		if update$="N" then let parentgl$=bms01a.gl_wip_acct$ else let parentgl$=ivacct$
		if bmm05a.divisor=0 then let bmm05a.divisor=1
		a0=bme01a.qty_ordered*bmm05a.unit_cost*fnsub(bmm05a.qty_required,bmm05a.alt_factor,bmm05a.divisor)
		units=bme01a.qty_ordered*fnsub(bmm05a.qty_required,bmm05a.alt_factor,bmm05a.divisor)
		amount=a0
		value=value+amount
		amount=-a0
		units=-units
	wend
	
	return

operation: rem --- Operation

	dim bmm01a1$:fattr(bmm01a$)
	dim bmm03_key$:bmm03_key_tpl$ 
	read record (bmm01_dev,key=bme01a.firm_id$+parent$,dom=*next) bmm01a1$
	read (bmm03_dev,key=bme01a.firm_id$+parent$,dom=*next)
	while more
		bmm03_key$=key(bmm03_dev,end=*break)
		if pos(bme01a.firm_id$+parent$=bmm03_key$)<>1 then break
		read record (bmm03_dev) bmm03a$
		if cvs(bmm03a.effect_date$,3)<>"" then if bme01a.prod_date$<bmm03a.effect_date$ then continue
		if cvs(bmm03a.obsolt_date$,3)<>"" then if bme01a.prod_date$>=bmm03a.obsolt_date$ then continue
		if bmm03a.line_type$="M" then continue
		find record (bmm08_dev,key=bmm03_key.firm_id$+bmm03a.op_code$,dom=*next) bmm08a$
		if bmm01a1.std_lot_size=0 then let bmm01a1.std_lot_size=1
		if bme01a.qty_ordered<>0 then 
			let directcost=fnop2(bme01a.qty_ordered,bmm03a.hrs_per_pce,bmm08a.direct_rate,bmm03a.pcs_per_hour,bmm01a1.est_yield,bmm03a.setup_time)
			units=fnopu(bme01a.qty_ordered,bmm03a.hrs_per_pce,bmm03a.pcs_per_hour,bmm01a1.est_yield,bmm03a.setup_time) 
		else 
			let directcost=0
			units=0
		endif
		ohcost=directcost*bmm08a.ovhd_factor
		ounits=units*bmm08a.ovhd_factor

rem --- Direct Labor

		precision 2
		directcost=directcost*1
		ohcost=ohcost*1
		amount=-directcost
		units=-units
		amount=directcost
		units=-units
		value=value+directcost

rem --- Overhead

		amount=-ohcost,units=-ounits
		amount=ohcost
		units=ounits
		value=value+ohcost
		precision num(ivs01a.precision$)
	wend 
	
	return

explode: rem --- Explode Phantom Bills

	dim channel[23],info$[11],info[20]
	info$[0]=bmm02a.item_id$,info$[1]=ref1$,info$[2]=ref2$,info$[3]=ap$
	info$[4]=ar_dist$,info$[5]=bme01a.bm_reference$,info$[6]=whse$
	info$[7]=bme01a.prod_date$,info$[8]=update$,info$[9]=gl$,info$[10]=ivacct$
	info[0]=bme01a.qty_ordered*bmm02a.qty_required,info[1]=bmm01a.est_yield*bmm01a2.est_yield/100
	call pgmdir$+"bmc_explodeupdate.aon",channel[all],info$[all],info[all],bme01a.item_id$,rd_table_chans$[all],Translate!
	value=value+info[2]
	
	return

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
       msg_id$="ENTRY_OPEN_ERROR"
       dim msg_tokens$[1]
       msg_tokens$[1]=open_status$
       gosub disp_message
       rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
       release
    endif

    return
    	
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnqty(q1,q2,q3,q4,q5)=10000*q1*q2/(q3*q4*(100-q5))
    def fnsub(q1,q2,q3)=q1*q2/q3
    def fnop2(q1,q2,q3,q4,q5,q6)=q1*100*(q2*q3/q4)/q5+SGN(q1)*q6*q3
    def fnopu(q1,q2,q3,q4,q5)=q1*100*(q2/q3)/q4+SGN(q1)*q5

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

	if num(batch_no$)<>0
		unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
		lock_status$=""
		call stbl("+DIR_SYP")+"bac_lock_record.bbj",
:			"ADM_PROCBATCHES",unlock_key$,"U","",rd_table_chan,
:			rd_table_chans$[all],lock_status$
	endif

	call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
