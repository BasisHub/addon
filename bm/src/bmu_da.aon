rem --- Bill of Materials Component Item Replacement
rem --- Program bmu_da v8.0.0 08Feb2008 (bmu_da)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/08/2008 02:19:58)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="bmm-01",ids$[1]="BMM_BILLMAST"
    files$[2]="bmm-02",ids$[2]="BMM_BILLMAT"
    files$[3]="bmm-04",ids$[3]="BMX_BILLMAT"
    files$[4]="bms-01a",ids$[4]="BMS_PARAMS"
    files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
    files$[6]="ivm-14",ids$[6]="IVM_ITEMSYN"
    files$[7]="ivs_params",ids$[7]="IVS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    bmm01a_dev=channels[1]
    bmm02a_dev=channels[2]
    bmm04a_dev=channels[3]
    bms01a_dev=channels[4]
    ivm01a_dev=channels[5]
    ivm14a_dev=channels[6]
    ivs01a_dev=channels[7]

rem --- Dimension string templates

    dim bmm01a$:templates$[1],bmm02a$:templates$[2],bmm04a$:templates$[3],
:       bms01a$:templates$[4],ivm01a$:templates$[5],ivm14a$:templates$[6],
:       ivs01a$:templates$[7]


rem --- Retrieve parameter records

    bms01a_key$=firm_id$+"BM00"
    find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$


rem --- Parameters

    dim t$:stbl("+TASK_TMPL")
    t$=stbl("+TASK")
    firm_id$=t.f0$(16,2),n2$="IV"
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (bms01a_dev,key=firm_id$+"BM00",dom=std_missing_params) bms01a$
    dim p[5],desc[3],params[3]
    p[0]=ivs01a.item_id_len
    p[1]=num(ivs01a.current_per$)
    p[2]=fnyy_year(ivso1a.current_year$)
    for i=1 to 3
        desc[i]=num(FIELD(ivs01a$,"desc_len_"+str(i:"00")))
        params[i]=desc[i]
    next i
    params[0]=p[0]

rem --- Init Data

    words$="*Tenths*Hundredths*Thousandths*Ten Thousandths*Hundred Thousandths*Millionths*Ten Millionths*Hundred Millionths*Billionths*"
    r0=1
    dim iv_chans[14]
    iv_chans[1]=ivm01_dev
    iv_chans[2]=bmm01_dev,iv_chans[14]=ivm14_dev
    dim w[10]
    m0=len(bms01a.firm_id$+bms01a.bm$+bms01a.sequence_00$+bms01a.gl_wip_acct$+bms01a.gl_pur_acct$+bms01a.gl_prd_var$)
    r5$=sysinfo.system_date$,r2$="",r3$="",r4$="Y"
    if p9<=0 then let r6$="X"
    dim r6$(p9,"X")
    r6$="."+r6$

rem --- Assign form input values to local variables

    r0$=Option!.getOptionData("Beginning Bill Number:")
    r1$=Option!.getOptionData("Ending Bill Number:")
    r2$=Option!.getOptionData("Old Item Number:")
    r3$=Option!.getOptionData("New Item Number:")
    ro=num(Option!.getOptionData("Conversion Factor"))
    r6$=Option!.getOptionData("Rounding Precision:")
    r4$=Option!.getOptionData("Obsolete Comments:")
    r5$=Option!.getOptionData("Effective Date:")
   
rem --- Printing

    run pgmdir$+"bmu_db.bbx"


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
