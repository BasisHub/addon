rem --- Operations Where Used Listing
rem --- Program bmr_oplist_o1 v8.0.0 07Jan2008 (bmr_db)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/07/2008 08:58:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyrights 1981-2011, BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
        precision num(ivs01a.precision$)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Init Data

        more=1
        h0=132
        h=0,headings=3,when$=sysinfo.system_date$,clock$=""
        dim d1$(60),headings$[headings]
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$
		if cvs(opfrom$,3)="" headings$[2]=Translate!.getTranslation("AON_FROM_FIRST_OP_CODE_THROUGH_") else headings$[2]=Translate!.getTranslation("AON_FROM_OP_CODE_")+cvs(opfrom$,3)+Translate!.getTranslation("AON__THROUGH_")
		if cvs(opthru$,3)="" headings$[2]=headings$[2]+Translate!.getTranslation("AON_LAST_OP_CODE") else headings$[2]=headings$[2]+Translate!.getTranslation("AON_OP_CODE_")+cvs(opthru$,3)
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","AO_OPCODE_BILL",bmm03a_key_tpl$,rd_table_chans$[all],status$
        dim bmm03a_key$:bmm03a_key_tpl$

rem ---  column heading
        dim columns$[8,10]
            columns=8
            columns$[0,0]=Translate!.getTranslation("AON_OP_CODE_&^_______DESCRIPTION"),columns$[0,1]="C",columns$[0,2]="15"
            columns$[1,0]=Translate!.getTranslation("AON_BILL_NO"),                     columns$[1,1]="C",columns$[1,2]="7"
            columns$[2,0]=Translate!.getTranslation("AON_DESCRIPTION"),                 columns$[2,1]="C",columns$[2,2]="20"
            columns$[3,0]=Translate!.getTranslation("AON_EFFECT_DATE"),                 columns$[3,1]="C",columns$[3,2]="8"
            columns$[4,0]=Translate!.getTranslation("AON_OBSOLETE_DATE"),               columns$[4,1]="C",columns$[4,2]="8"
            columns$[5,0]=Translate!.getTranslation("AON_HOURS/PIECE"),                 columns$[5,1]="N",columns$[5,2]="12";columns$[5,3]=p1$
            columns$[6,0]=Translate!.getTranslation("AON_PIECES/HOUR"),                 columns$[6,1]="N",columns$[6,2]="12";columns$[6,3]=p2$
            columns$[7,0]=Translate!.getTranslation("AON_NET_HOURS"),                   columns$[7,1]="N",columns$[7,2]="12";columns$[7,3]=p1$
            columns$[8,0]=Translate!.getTranslation("AON_SEQ"),                         columns$[8,1]="C",columns$[8,2]="3"

rem --- Background

         call pgmdir$+"adc_progress.aon","N","","","","",0,bmm03a_dev,1,meter_num,status

rem --- Initial Read

        extractrecord (bmm03a_dev,key=firm_id$+opfrom$,knum="AO_OPCODE_BILL",dom=*next)
        
rem --- Read Where Used File

        while more         
            bmm03a_key$=key(bmm03a_dev,knum="AO_OPCODE_BILL",end=done)
            readrecord (bmm03a_dev)bmm03a$
            
rem --- Breaks

            if bmm03a_key.firm_id$<>firm_id$ then break
            if cvs(bmm03a_key.op_code$,3)="" then continue
            if opthru$<>"" then if bmm03a_key.op_code$>opthru$ then break
            read record (bmm01a_dev,key=bmm03a_key.firm_id$+bmm03a_key.bill_no$,dom=*continue) bmm01a$
            if bmm03a_key.firm_id$+bmm03a_key.op_code$<>t0$ then gosub item_break
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            let ivm01a.item_desc$=Translate!.getTranslation("AON_***_NOT_ON_FILE_***")
            find record (ivm01a_dev,key=bmm01a.firm_id$+bmm01a.bill_no$,dom=printing) ivm01a$
            ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])+fill(60)

printing: rem --- Print

            xwk=fnblank(1)
            OutVect!.addItem(bmm01a.bill_no$)
            OutVect!.addItem(ivm01a.item_desc$(1,30))
            OutVect!.addItem(fndate$(cvs(bmm03a.effect_date$,3)))
			if cvs(bmm03a.obsolt_date$,3)=""
				OutVect!.addItem("")
			else
				OutVect!.addItem(fndate$(bmm03a.obsolt_date$))
			endif
            OutVect!.addItem(str(bmm03a.hrs_per_pce))
            OutVect!.addItem(str(bmm03a.pcs_per_hour))
            value=fnop(bmm03a.hrs_per_pce,bmm03a.pcs_per_hour,bmm01a.est_yield,bmm03a.setup_time,bmm01a.std_lot_size)
            OutVect!.addItem(str(value))
            OutVect!.addItem(bmm03a.op_seq$)
 
            t0=t0+1
        wend

done: rem --- Totals

            t9$="E"
            gosub item_break
            OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_RECORDS:_")+str(t0))
            xwk=fnblank(8)
            goto std_exit

sub_heading: rem --- Sub Heading

            OutVect!.addItem(bmm08a.op_code$+fill(5-len(bmm08a.op_code$))+h3$)
            xwk=fnblank(8)
            return

item_break: rem --- Item Break
            
            if t0$<>"" then 
                xwk=fnblank(9)
            endif
            if t9$<>"" then return
            t0$=bmm03a_key.firm_id$+bmm03a_key.op_code$
            h3$=Translate!.getTranslation("AON_***NOT_ON_FILE***")
            find record (bmm08a_dev,key=t0$,dom=*return) bmm08a$
            h3$=bmm08a.code_desc$
            gosub sub_heading
            return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$
    
rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnop(q1,q2,q3,q4,q5)=100*(q1/q2)/q3+q4/q5

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
