rem --- Bill of Material Resequence Detail Lines
rem --- Program bmu_cb v8.0.0 07Feb2008 (bmu_cb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/07/2008 03:25:09)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
        precision 9

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=13,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="bmm-01",ids$[1]="BMM_BILLMAST"
        files$[2]="bmm-02",ids$[2]="BMM_BILLMAT"
        files$[3]="bmm-03",ids$[3]="BMM_BILLOPER"
        files$[4]="bmm-04",ids$[4]="BMX_BILLMAT"
        files$[5]="bmm-05",ids$[5]="BMM_BILLSUB"
        files$[6]="bmm-06",ids$[6]="BMX_BILLOPER"
        files$[7]="bmm-10",ids$[7]="BMC_RESEQ"
        files$[8]="bmm-22",ids$[8]="BMM_RESEQMAT"
        files$[9]="bmm-23",ids$[9]="BMM_RESEQOPS"
        files$[10]="bmm-24",ids$[10]="BMM_RESEQLNK"
        files$[11]="bmm-25",ids$[11]="BMM_RESEQSUB"
        files$[12]="bms-01a",ids$[12]="BMS_PARAMS"
        files$[13]="ivs_params",ids$[13]="IVS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        bmm01_dev=channels[1]
        bmm02_dev=channels[2]
        bmm03_dev=channels[3]
        bmm04_dev=channels[4]
        bmm05_dev=channels[5]
        bmm06_dev=channels[6]
        bmm10_dev=channels[7]
        bmm22_dev=channels[8]
        bmm23_dev=channels[9]
        bmm24_dev=channels[10]
        bmm25_dev=channels[11]
        bms01a_dev=channels[12]
        ivs01a_dev=channels[13]

rem --- Dimension string templates

        dim bmm01a$:templates$[1],bmm02a$:templates$[2],bmm03a$:templates$[3],
:       bmm04a$:templates$[4],bmm05a$:templates$[5],bmm06a$:templates$[6],
:       bmm10a$:templates$[7],bmm22a$:templates$[8],bmm23a$:templates$[9],
:       bmm24a$:templates$[10],bmm25a$:templates$[11],bms01a$:templates$[12],
:       ivs01a$:templates$[13]

rem --- Assign form input values to local variables

        rem value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

        bms01a_key$=firm_id$+"BM00"
        find record (bms01a_dev,key=bms01a_key$,err=std_missing_params) bms01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Restart Logic

        phase_max=25
        key_max=20
        if phase$(4,1)="R" then goto Write_Control_Record
        if phase$(4,1)="D" then goto Write_Ctrl_Record
        if ui$<>"W" then print 'sb',@(31,11),"Phase 1:",'sf',
        if ui$="W" then call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
        if ui$="W" then call pgmdir$+"adc_progress.aon","N",n3$,pad("Phase 1:",phase_max,"C"),"Processing","",key_max,bmm01_dev_dev,1,meter_num,status

rem --- Disallow 'M'enu option in Error Routine

        exit_ctrl=1
        more=1
rem --- Initial Read

        read (bmm01_dev,key=firm_id$+bmm10a.bill_no_1$,dom=Main_Read)
        k0$=firm_id$+bmm10a.bill_no_1$
        goto Label_One


rem --- retrieve template for BMM_BILLMAST record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAST","PRIMARY",bmm01a_key_tpl$,table_chans$[all],status$
        dim bmm01a_key$:bmm01a_key_tpl$

rem --- retrieve template for BMM_BILLMAT record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLMAT","PRIMARY",bmm02a_key_tpl$,table_chans$[all],status$
        dim bmm02a_key$:bmm02a_key_tpl$

rem --- retrieve template for BMM_BILLOPER record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLOPER","PRIMARY",bmm03a_key_tpl$,table_chans$[all],status$
        dim bmm03a_key$:bmm03a_key_tpl$

rem --- retrieve template for BMM_BILLSUB record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_BILLSUB","PRIMARY",bmm05a_key_tpl$,table_chans$[all],status$
        dim bmm05a_key$:bmm05a_key_tpl$

rem --- retrieve template for BMM_RESEQMAT record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_RESEQMAT","PRIMARY",bmm22a_key_tpl$,table_chans$[all],status$
        dim bmm22a_key$:bmm22a_key_tpl$

rem --- retrieve template for BMM_RESEQOPS record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_RESEQOPS","PRIMARY",bmm23a_key_tpl$,table_chans$[all],status$
        dim bmm23a_key$:bmm23a_key_tpl$

rem --- retrieve template for BMM_RESEQSUB record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","BMM_RESEQSUB","PRIMARY",bmm25a_key_tpl$,table_chans$[all],status$
        dim bmm25a_key$:bmm25a_key_tpl$


Main_Read: rem --- Main Read
 while more

        bmm01a_key$=key(bmm01_dev,end=*break)

Label_One:

        if pos(firm_id$=bmm01a_key$)<>1 then break
        if fnp$(bmm10a.bill_no_2$)<>"" then
            if bmm01a_key.bill_no$>bmm10a.bill_no_2$ then
                break
            endif
        endif
        read record (bmm01_dev,key=bmm01a_key$) bmm01a$

        if ui$<>"W" then print @(40,11),bmm01a.bill_no$(1,p[0]),
        if ui$="W" then call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Material Detail Lines

        if pos("M"=bmm10a.select_opts$)<>0 then
            read (bmm02_dev,key=firm_id$+bmm01a.bill_no$,dom=*next)
            x=r3

rem --- Material Detail Loop
            while more
                bmm02a_key$=key(bmm02_dev,end=*break)
                if pos(bmm10a.firm_id$+bmm01a.bill_no$=bmm02a_key$)<>1 then break
                read record (bmm02_dev,key=bmm02a_key$) bmm02a$
                x=x+r3
                if x>999 then
                    error$=error$+"M"+bmm02a_key.bill_no$(1,p[0])
                    break
                endif
            wend
        endif

rem --- Operation Detail Lines

        if pos("O"=bmm10a.select_opts$)<>0 then
            read (bmm03_dev,key=firm_id$+bmm01a.bill_no$,dom=*next)
            x=r3

rem --- Operation Detail Loop
            while more
                bmm03a_key$=key(bmm03_dev,end=*break)
                if pos(bmm10a.firm_id$+bmm01a.bill_no$=bmm03a_key$)<>1 then break
                read record (bmm03_dev,key=bmm03a_key$) bmm03a$
                x=x+r3
                if x>999 then
                    error$=error$+"O"+bmm03a_key.bill_no$(1,p[0])
                    break
                endif
            wend
        endif

rem --- Subcontract Detail Lines

        if pos("S"=bmm10a.select_opts$)<>0 then
            read (bmm05_dev,key=firm_id$+bmm01a.bill_no$,dom=*next)
            x=r3

rem ------- Subcontract Detail Loop
            while more
                bmm05a_key$=key(bmm05_dev,end=*break)
                if pos(bmm10a.firm_id$+bmm01a.bill_no$=bmm05a_key$)<>1 then break
                read record (bmm05_dev,key=bmm05a_key$) bmm05a$
                x=x+r3
                if x>999 then
                    error$=error$+"S"+bmm05a_key.bill_no$(1,p[0])
                    break
                endif
            wend
        endif
    wend

rem --- Prepare for Phase 2

        if error$<>"" then
            l0=13
            x=1,x$="Material   Operation  Subcontract"
            while more
                x=x+p[0]+1
                l0=l0+1
                if len(error$(x))=0 then gosub Print_Next_Screen; goto std_exit
                if l0>20 then gosub Print_Next_Screen
            wend
        endif

rem --- Phase 2

        if ui$<>"W" then print 'sb',@(31,11),"Phase 2:",'sf','cl',
        if ui$="W" then call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
        if ui$="W" then call pgmdir$+"adc_progress.aon","N",n3$,pad("Phase 2:",phase_max,"C"),"Processing","",key_max,bmm02_dev_dev,1,meter_num,status

rem --- Read Material Detail Lines

        if pos("M"=bmm10a.select_opts$)<>0 then
            read (bmm02_dev,key=firm_id$+bmm10a.bill_no_1$,dom=*next)
            t0$=""

rem ------- Material Detail Loop
            While more
                bmm02a_key$=key(bmm02_dev,end=*break)
                if pos(firm_id$=bmm02a_key$)<>1 then break
                if fnp$(bmm10a.bill_no_2$)<>"" then
                    if bmm02a_key.bill_no$>bmm10a.bill_no_2$ then
                        break
                    endif
                endif
                if t0$<>bmm02a_key.bill_no$ then
                    t0$=bmm02a_key.bill_no$
                    x=r3
                endif
                read record (bmm02_dev,key=bmm02a_key$) bmm02a$
                bmm02a.material_seq$=str(x:"000")
                bmm02a_key.material_seq$=str(x:"000")
                if ui$<>"W" then print @(40,11),bmm02a.bill_no$(1,p[0]),
                if ui$="W" then call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                write record (bmm22_dev,key=bmm02a_key$) bmm02a$
                x=x+r3
            Wend
        endif

rem --- Read Operation Detail Lines

        if pos("O"=bmm10a.select_opts$)<>0 then
            read (bmm03_dev,key=firm_id$+bmm10a.bill_no_1$,dom=*next)
            t0$=""

rem ------- Operation Detail Loop
            while more
                bmm03a_key$=key(bmm03_dev,end=*break)
                if pos(firm_id$=bmm03a_key$)<>1 then break
                if fnp$(bmm10a.bill_no_2$)<>"" then
                    if bmm03a_key.bill_no$>bmm10a.bill_no_2$ then
                        break
                    endif
                endif
                if t0$<>bmm03a_key.bill_no$ then
                    t0$=bmm03a_key.bill_no$
                    x=r3
                endif
                read record (bmm03_dev,key=bmm03a_key$) bmm03a$

                bmm24a.firm_id$=firm_id$
                bmm24a.bill_no$=bmm03a.bill_no$
                bmm24a.old_op_seq$=bmm03a.op_seq$
                x1$=str(x:"000")
                write record (bmm24_dev,key=bmm24a.firm_id$+bmm24a.bill_no$+bmm24a.old_op_seq$) bmm24a$
                bmm03a.material_seq$=str(x:"000")
                bmm03a_key.material_seq$=str(x:"000")
                if ui$<>"W" then print @(40,11),bmm03a.bill_no$(1,p[0]),
                write record (bmm23_dev,key=bmm03a_key$) bmm03a$
                x=x+r3
            wend
        endif

rem --- Read Subcontract Detail Lines

        if pos("S"=bmm10a.select_opts$)<>0 then
            read (bmm05_dev,key=firm_id$+bmm10a.bill_no_1$,dom=*next)
            t0$=""

rem ------- Subcontract Detail Loop

            while more
                bmm05a_key$=key(bmm05_dev,end=*break)
                if pos(firm_id$=bmm05a_key$)<>1 then break
                if fnp$(bmm10a.bill_no_2$)<>"" then
                    if bmm05a_key.bill_no$>bmm10a.bill_no_2$ then
                        break
                    endif
                endif
                if t0$<>bmm05a_key.bill_no$ then
                    t0$=bmm05a_key.bill_no$
                    x=r3
                endif
                read record (bmm05_dev,key=bmm05a_key$) bmm05a$
                bmm05a.subcont_seq$=str(x:"000")
                bmm05a_key.subcont_seq$=str(x:"000")
                if ui$<>"W" then print @(40,11),bmm05a.bill_no$(1,p[0]),
                write record (bmm25_dev,key=bmm05a_key$) bmm05a$
                x=x+r3
            wend
        endif



Write_Control_Record: rem --- Write control record

        k2$=firm_id$+"AR"
        write record (bmm10_dev,key=bmm05a_key.effect_date$) bmm10a$
        if ui$<>"W" then print 'sb',@(31,11),"Phase 3:",'sf','cl',
        if ui$="W" then call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
        if ui$="W" then call pgmdir$+"adc_progress.aon","N",n3$,pad("Phase 3:",phase_max,"C"),"Processing","",key_max,bmm02_dev_dev,1,meter_num,status

rem --- Delete Material Lines

        while more
            if pos("M"=bmm10a.select_opts$)=0 then break
            read (bmm02_dev,key=firm_id$+bmm10a.bill_no_1$,dom=*next)
            bmm02a_key$=key(bmm02_dev,end=*break)
            read record (bmm02_dev,key=bmm02a_key$) bmm02a$
            if pos(firm_id$=bmm02a_key$)<>1 then break
            if fnp$(bmm10a.bill_no_2$)<>"" then
                if bmm02a_key.bill_no$>bmm10a.bill_no_2$ then
                    break
                endif
            endif
            remove (bmm02_dev,key=bmm02a_key$)
            remove (bmm04_dev,key=firm_id$+b1$+bmm02a.bill_no$+bmm02a.material_seq$,dom=*next)

            if ui$<>"W" then print @(40,11),bmm02a_key.bill_no$(1,p[0]),
        wend

rem --- Delete Operation Lines

        while more
            if pos("O"=bmm10a.select_opts$)=0 then break
            read (bmm03_dev,key=firm_id$+bmm10a.bill_no_1$,dom=*next)
            bmm03a_key$=key(bmm03_dev,end=*break)
            read record (bmm03_dev,key=bmm03a_key$) bmm03a$
            if pos(firm_id$=bmm03a_key$)<>1 then break
            if fnp$(bmm10a.bill_no_2$)<>"" then
                if bmm03a_key.bill_no$>bmm10a.bill_no_1$ then
                    break
                endif
            endif
            remove (bmm03_dev,key=bmm03a_key$)
            remove (bmm06_dev,key=firm_id$+bmm03a.op_code$+bmm03a.bill_no$+bmm03a.op_seq$,dom=*next)

            if ui$<>"W" then print @(40,11),bmm03a_key.bill_no$(1,p[0]),
        wend

rem --- Delete Subcontract Lines

        while more
            if pos("S"=bmm10a.select_opts$)=0 then break
            read (bmm05_dev,key=firm_id$+bmm10a.bill_no_1$,dom=*next)
            bmm05a_key$=key(bmm05_dev,end=*break)
            if pos(firm_id$=bmm05a_key$)<>1 then break
            if fnp$(bmm10a.bill_no_2$)<>"" then
                if bmm05a_key$.bill_no$>bmm10a.bill_no_1$ then
                    break
                endif
            endif
            remove (bmm05_dev,key=bmm05a_key$)

            if ui$<>"W" then print @(40,11),bmm05a_key.bill_no$(1,p[0]),
        wend


Write_Ctrl_Record: rem --- Write control record

        k2$=firm_id$+"AD"
        write record (bmm10_dev,key=bmm05a.effect_date$) bmm10a$
        if ui$<>"W" then print 'sb',@(31,11),"Phase 4:",'sf','cl',
        if ui$="W" then call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
        if ui$="W" then call pgmdir$+"adc_progress.aon","N",n3$,pad("Phase 4:",phase_max,"C"),"Processing","",key_max,bmm22_dev_dev,1,meter_num,status

rem --- Update Material Lines

        if pos("M"=bmm10a.select_opts$)<>0 then
            read (bmm22_dev,key=firm_id$,dom=*next)
            while more
                bmm22a_key$=key(bmm22_dev,end=*break)
                if pos(firm_id$=bmm22a_key$)<>1 then break
                read record (bmm22_dev,key=bmm22a_key$) bmm02a$
                write record (bmm02_dev,key=bmm22a_key$) bmm02a$

                bmm04a.firm_id$=firm_id$
                bmm04a.item_id$=bmm02a.item_id$
                bmm04a.bill_no$=bmm02a.bill_no$
                bmm04a.material_seq$=bmm02a.material_seq$
                if bmm02a.line_type$="S" then write record (bmm04_dev,key=bmm04a.firm_id$+bmm04a.item_id$+bmm04a.bill_no$+bmm04a.material_seq$) bmm04a$
                remove (bmm22_dev,key=bmm22a_key$)

                if ui$<>"W" then print @(40,11),bmm22a_key.bill_no$(1,p[0]),
            wend
        endif

rem --- Update Operation Lines

        if pos("O"=bmm10a.select_opts$)<>0 then
            read (bmm23_dev,key=firm_id$,dom=*next)

            while more
                bmm23a_key$=key(bmm23_dev,end=*break)
                if pos(firm_id$=bmm23a_key$)<>1 then break
                read record (bmm23_dev,key=bmm23a_key$) bmm03a$
                write record (bmm03_dev,key=bmm23a_key$) bmm03a$

                bmm06a.firm_id$=firm_id$
                bmm06a.op_code$=bmm03a.op_code$
                bmm06a.bill_no$=bmm03a.bill_no$
                bmm06a.op_seq$=bmm03a.op_seq$
                if bmm03a.line_type$="S" then write record (bmm06_dev,key=bmm06a.firm_id$+bmm06a.op_code$+bmm06a.bill_no$+bmm06a.op_seq$) bmm06a$
                remove (bmm23_dev,key=bmm23a_key$)

                if ui$<>"W" then print @(40,11),bmm23a_key.bill_no$(1,p[0]),
            wend
        endif

rem --- Update Subcontract Lines

        if pos("S"=bmm10a.select_opts$)<>0 then
            read (bmm25_dev,key=firm_id$,dom=*next)
            while more
                bmm25a_key$=key(bmm25_dev,end=*break)
                if pos(firm_id$=bmm25a_key$)<>1 then break
                read record (bmm25_dev,key=bmm25a_key$) bmm05a$
                write record (bmm05_dev,key=bmm25a_key$) bmm05a$
                remove (bmm25_dev,key=bmm25a_key$)

                if ui$<>"W" then print @(40,11),bmm25a_key.bill_no$(1,p[0]),
            wend
        endif

rem --- Rewrite Material records with new Op sequence

        if pos("O"=bmm10a.select_opts$)<>0 then
            read (bmm02_dev,key=firm_id$,dom=*next)
            while more
                bmm02a_key$=key(bmm02_dev,end=*break)
                if pos(firm_id$=bmm02a_key$)<>1 then break
                read record (bmm02_dev,key=bmm02a_key$) bmm02a$
                if ui$<>"W" then print @(40,11),bmm02a.bill_no$(1,p[0]),
                read record (bmm24_dev,key=bmm02a.firm_id$+bmm02a.bill_no$+bmm02a.op_seq$,dom=*continue) bmm24a$
                bmm02a.op_seq$=bmm24a.new_op_seq$
                write record (bmm02_dev,key=bmm02a_key$) bmm02a$
            wend
        endif

rem --- Rewrite Subcontract record with new Op sequence

        if pos("O"=bmm10a.select_opts$)<>0 then
            read (bmm05_dev,key=firm_id$,dom=*next)
            while more
                bmm05a_key$=key(bmm05_dev,end=*break)
                if pos(firm_id$=bmm05a_key$)<>1 then break
                read record (bmm05_dev,key=bmm05a_key$) bmm05a$
                if ui$<>"W" then print @(40,11),bmm05a.bill_no$(1,p[0]),
                read record (bmm24_dev,key=bmm05a.firm_id$+bmm05a.bill_no$+bmm05a.op_seq$,dom=*continue) bmm24a$
                bmm05a.op_seq$=bmm24a.new_op_seq$
                write record (bmm05_dev,key=bmm05a_key$) bmm05a$
            wend
        endif

rem --- Remove Control Record

        remove (bmm10_dev,key=firm_id$+"A")

rem --- Now Rebuild Cross References
        goto std_exit

Print_Next_Screen: rem --- Print next screen

        dim message$[1]
        message$[0]="Bill Number "+error$(x+1,p[0])+" "+fnp$(x$(pos(error$(x,1)=x$),11))+" lines cannot be resequenced by "+str(r3)
        message$[1]="          Press <Enter> To Continue"
        call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
        if v3=4 then exitto std_exit
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem --- #endinclude std_end.src

        end
