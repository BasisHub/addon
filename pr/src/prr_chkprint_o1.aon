rem --- Check Printing 2/Moore Form #6040A.O.
rem --- Program prr_chkprint_o1.aon v8.0.0 18Jun2008 (prr_gb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/18/2008 12:10:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    precision p[4]
    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$


rem --- Init Data

    dim curpaytot[paycodelen],curdedtot[dedcodelen]
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status=1 goto std_exit

test_patt: rem --- Test Pattern

    while more
        msg_id$="PRINT_TEST_PATTERN"
        dim msg_tokens$[1]
        gosub disp_message
        if msg_opt$="Y" then
            dim cur_pay[paycodelen],units[paycodelen],ytd_pay[paycodelen],cur_ded[dedcodelen],ytd_ded[dedcodelen],totals[5]
            prm01a.employee_no$=fill(12,"9")
            pre01a.check_date$=check_date$
            x0=1,x1=1
            x9=paycodelen
            l=0,t0=0
            if dedcodelen<x9 x9=dedcodelen
            if x9>10 x9=10
            for x=0 to x9-1
                cur_pay[x]=9999.9
                units[x]=999,ytd_pay[x]=99999.99,cur_ded[x]=999.99,ytd_ded[x]=9999.99,prm01a.soc_sec_no$="999999999"
            next x
            gosub stub
            gosub detail
            prw01a.firm_id$=firm_id$
            prw01a.check_no$=pre01a.check_no$
            prw01a.pr_chk_type$="V"
            prw01a.check_date$=pre01a.check_date$
            prw01a.employee_no$=pre01a.employee_no$
            prw01a.sequence_num$=pre01a.sequence_num$
            prw01a$=field(prw01a$)
            gosub void
            gosub write_prw01
            gosub step_checknum
            continue
        endif
        break
    wend

    call pgmdir$+"adc_progress.aon","CN",sysinfo.task_desc$,"","Printing:","",m0,pre01a_dev,1,0,ignore_status

rem --- Init Read

    read (pre01a_dev,key=firm_id$,dom=*next)
    if pos(emp_no$="SR")<>0 read (pre01a_dev,key=firm_id$+emp_no$,dom=*next)

rem --- Main Read

    while more
        pre01a_key$=key(pre01a_dev,end=*break)
        if pre01a_key.firm_id$<>firm_id$ then break
        read record (pre01a_dev) pre01a$
        if option$="S" and pre01a_key.employee_no$<>emp_no$ then break

rem --- Breaks

        call pgmdir$+"adc_progress.aon","S","","","",fnmask$(pre01a.employee_no$,m0$),0,0,1,0,ignore_status

rem --- Type

        if pre01a.check_type$<>"C" then

rem --- Non-Printing

            prw01a.firm_id$=firm_id$
            prw01a.check_no$=pre01a.check_no$
            prw01a.pr_chk_type$=pre01a.check_type$
            prw01a.check_date$=pre01a.check_date$
            prw01a.employee_no$=pre01a.employee_no$
            prw01a.sequence_num$=pre01a.sequence_num$
            prw01a$=field(prw01a$)
            gosub write_prw01
            continue
        endif

employee: rem --- Employee

        if option$="M" then continue
        dim i[paycodelen],j[dedcodelen]
        find record (prm01a_dev,key=pre01a.firm_id$+pre01a.employee_no$,dom=*continue) prm01a$
        gosub get_rate
        x1$=cvs(prm01a.empl_surname$,2)+", "+cvs(prm01a.empl_givname$,2)
        x2$=cvs(prm01a.empl_givname$,2)+" "+cvs(prm01a.empl_surname$,2)
        if len(x1$)>25 x1$=x1$(1,25)

rem --- YTD

        if lastempl$=pre01a.employee_no$ then
            for i=1 to paycodelen; let curpaytot[i]=curpaytot[i]+cur_pay[i]; next i
            for i=1 to dedcodelen; let curdedtot[i]=curdedtot[i]+cur_ded[i]; next i
        endif

        dim cur_pay[paycodelen],units[paycodelen],ytd_pay[paycodelen],cur_ded[dedcodelen],ytd_ded[dedcodelen],totals[5],y[4]
        if lastempl$=pre01a.employee_no$ then 
            for i=1 to paycodelen; let ytd_pay[i]=ytd_pay[i]+curpaytot[i]; next i
            for i=1 to dedcodelen; let ytd_ded[i]=ytd_ded[i]+curdedtot[i]; next i
        else
            lastempl$=pre01a.employee_no$
            dim curpaytot[paycodelen],curdedtot[dedcodelen]
        endif

rem --- Employee Detail Hist

        read (prt01a_dev,key=pre01a.firm_id$+pre01a.employee_no$,dom=*next)
        while more
            prt01a_key$=key(prt01a_dev,end=*break)
            if prt01a.firm_id$+prt01a.employee_no$<>pre01a.firm_id$+pre01a.employee_no$ then break
            read record (prt01a_dev) prt01a$
            x=pos(ptr01a.pay_code$=paycodes$,2)
            if x>0 x=int(x/2)+1
            if x=0 x=paycodelen/2+1
            ytd_pay[x]=ytd_pay[x]+prt01a.qtr_amt_01+prt01a.qtr_amt_02+prt01a.qtr_amt_03+prt01a.qtr_amt_04
        wend

rem --- read prt11

        read (prt11a_dev,key=pre01a.firm_id$+pre01a.employee_no$,dom=*next)
        while more
            prt11a_key$=key(prt11a_dev,end=*break)
            if prt11a.firm_id$+prt11a.employee_no$<>pre01a.firm_id$+pre01a.employee_no$ then break
            read record (prt11a_dev) prt11a$
            x=pos(prt11a.deduct_code$=u6$,3)
            if x<>0 then
                x=int(x/3)+1
                x=pos(prt11a.record_id_b$+u7$(x*2-1,2)=dedcodes$,3)
                if x>0 x=int(x/3)+1
            endif
            if x=0 x=dedcodelen/3+1
            ytd_ded[x]=ytd_ded[x]+prt11a.qtr_amt_01+prt11a.qtr_amt_02+prt11a.qtr_amt_03+prt11a.qtr_amt_04
        wend

rem --- read prt-21

        read (prt21a_dev,key=pre01a.firm_id$+pre01a.employee_no$,dom=*next)
        while more
            prt21a_key$=key(prt21a_dev,end=*break)
            if prt21a.firm_id$+prt21a.employee_no$<>pre01a.firm_id$+pre01a.employee_no$ then break
            read record (prt21a_dev) prt21a$
            x=pos("C"+prt21a.tax_code$=u6$,3)
            if x<>0 then 
                x=int(x/3)+1
                x=pos(prt21a.record_id_c$+u7$(x*2-1,2)=dedcodes$,3)
                if x>0 x=int(x/3)+1
            endif
            if x=0 x=dedcodelen/3+1
            ytd_ded[x]=ytd_ded[x]+prt21a.qtr_gross_01+prt21a.qtr_gross_02+prt21a.qtr_gross_03+prt21a.qtr_gross_04
        wend

rem --- Detail

        for x=0 to paycodelen
            ytd_pay[x]=ytd_pay[x]+i[x]
        next x
        for x=0 to dedcodelen
            ytd_ded[x]=ytd_ded[x]+j[x]
        next x

rem --- Accumulate
rem --- Earnings

        read (pre11a_dev,key=pre01a_key$,dom=*next)
        while more
            pre11a_key$=key(pre11a_dev,end=*break)
            if pre11a_key.firm_id$+pre11a_key.employee_no$+pre11a_key.check_type$+pre11a_key.sequence_num$+pre11a_key.check_no$<>pre01a_key$ then break
            read record (pre11a_dev) pre11a$
            x=0
            read record (prm10a_dev,key=firm_id$+"A"+pre11a.pay_code$,dom=calc_earnings) prm10a$
            x=pos(pre11a.pay_code$=paycodes$,2)
            if x>0 x=int(x/2)+1
calc_earnings:
            if x=0 x=paycodelen/2+1
            units[x]=units[x]+pre11a.units
            ytd_pay[x]=ytd_pay[x]+pre11a.extended_amt
            t0=t0+pre11a.extended_amt
            i[x]=i[x]+pre11a.extended_amt
            cur_pay[x]=cur_pay[x]+pre11a.extended_amt
        wend

rem --- Deducts

        read (pre21a_dev,key=pre01a_key$,dom=*next)
        while more
            pre21a_key$=key(pre21a_dev,end=*break)
            if pre21a_key.firm_id$+pre21a_key.employee_no$+pre21a_key.check_type$+pre21a_key.sequence_num$+pre21a_key.check_no$<>pre01a_key$ then break
            read record (pre21a_dev) pre21a$
            x=0
            read record (prm10b_dev,key=firm_id$+"B"+pre21a.deduct_code$,dom=calc_deducts) prm10b$
            x=pos("B"+prm10b.report_code$=dedcodes$,3)
            if x>0 x=int(x/3)+1
calc_deducts:
            if x=0 x=dedcodelen/3+1
            ytd_ded[x]=ytd_ded[x]+pre21a.deduct_amt
            j[x]=j[x]+pre21a.deduct_amt
            cur_ded[x]=cur_ded[x]+pre21a.deduct_amt
        wend

rem --- Taxes

        read (pre31a_dev,key=pre01a_key$,dom=*next)
        while more
            pre31a_key$=key(pre31a_dev,end=*break)
            if pre31a_key.firm_id$+pre31a_key.employee_no$+pre31a_key.check_type$+pre31a_key.sequence_num$+pre31a_key.check_no$<>pre01a_key$ then break
            read record (pre31a_dev) pre31a$
            x=0
            read record (prm10c_dev,key=firm_id$+"C"+pre31a.tax_code$,dom=calc_tax) prm10c$
            x=pos("C"+prm10c.report_code$=dedcodes$,3)
            if x>0 x=int(x/3)+1
calc_tax:
            if x=0 x=dedcodelen/3+1
            ytd_ded[x]=ytd_ded[x]+pre31a.tax_amount
            j[x]=j[x]+pre31a.tax_amount
            cur_ded[x]=cur_ded[x]+pre31a.tax_amount
        wend

print: rem --- Print

        if pos(" "<>pre01a.comp_chk_no$)<>0 gosub restart
        pre01a.comp_chk_no$=check_no$
        prw01a.firm_id$=firm_id$
        prw01a.check_no$=check_no$
        prw01a.pr_chk_type$="C"
        prw01a.check_date$=check_date$
        prw01a.employee_no$=pre01a.employee_no$
        prw01a.sequence_num$=pre01a.sequence_num$
        prw01a$=field(prw01a$)
        x0=1,x1=1
        l=0
        t0=0
        dim totals[5]
        gosub stub
        gosub detail
        gosub check
        write record (pre01a_dev,key=pre01a_key$) pre01a$
        gosub write_prw01
        gosub step_checknum
    wend

done: rem --- Done

    goto std_exit

stub: rem --- Stub

    l=0
    q9$=fnmask$(prm01a.employee_no$,m0$); if len(q9$)<8 q7$=q9$+fill(9-len(q9$))+x1$
    if len(q9$)>=8 q7$=q9$+" "+x1$
    if len(q7$)>33 q7$=q7$(1,34)

rem --- NOTE: Changed Line 5030 to print ending period & check date instead            of beginning period & ending period

    print (printer_dev)'lf',@(h0+0),q7$,@(h0+34),fnmask$(prm01a.soc_sec_no$,m7$),@(h0+46),fndate$(p5$),@(h0+55),fndate$(check_date$),@(h0+64),check_no$,
    print (printer_dev)'lf'
    return

detail: rem --- Detail

    while more

        if x0>paydesclen/12 and x1>deddesclen/10 then break
        while more
            if x0>paydesclen/12 then break
            if cur_pay[x0]<>0 or units[x0]<>0 or ytd_pay[x0]<>0 then break
            x0=x0+1
        wend
        if x0<=paydesclen/12 then 
            if l>=l9 gosub overflow
            print (printer_dev)@(h0+0),paydescs$(12*(x0-1)+1,12),@(h0+16),units[x0]:m2$,@(h0+23),cur_pay[x0]:m1$,@(h0+34),ytd_pay[x0]:m1$,
            totals[0]=totals[0]+cur_pay[x0]
            totals[1]=totals[1]+units[x0],totals[2]=totals[2]+ytd_pay[x0],t0=t0+cur_pay[x0]
        endif
        while more
            if x1>deddesclen/10 then break
            if cur_ded[x1]<>0 or ytd_ded[x1]<>0 then break
            x1=x1+1
        wend
        if x1<=deddesclen/10 then 
            print (printer_dev)@(h0+46),deddescs$(10*(x1-1)+1,10),@(h0+80-m1*2+2),cur_ded[x1]:m1$(2),@(h0+80-m1+1),ytd_ded[x1]:m1$(2),
            totals[3]=totals[3]+cur_ded[x1]
            totals[4]=totals[4]+ytd_ded[x1],t0=t0-cur_ded[x1]
        endif

        print (printer_dev)'lf',
        l=l+1
        x0=x0+1,x1=x1+1
    wend

totals: rem --- Totals

    if l9-l<0 l=l9
    print (printer_dev)h9$(1,l9-l)
    print (printer_dev)@(h0+0),payrate:m3$,@(h0+11),totals[0]:m1$,@(h0+23),totals[3]:m1$,@(h0+35),totals[0]-totals[3]:m1$(2),@(h0+49),totals[2]:m1$,@(h0+80-m1*2+1),totals[4]:m1$(2),@(h0+80-m1),totals[2]-totals[4]:m1$
    return

rem --- Check
check: rem --- T0 = Net Check Amount, TOTALS[0] = Gross Earnings

    if t0>=0 then 
        precision 2
        t0=t0*1
        precision p[4]
        print (printer_dev)h9$(1,3)
        print (printer_dev)@(h0+61),check_no$,'lf','lf'
        print (printer_dev)@(h0+59),fndate$(check_date$),@(h0+80-m9),t0:m9$,'lf','lf'
        x0$=str(fpt(t0)*100:"00")
        if x0$="00" x0$="NO"
        if t0>0 print (printer_dev)@(h0+6),"Exactly",int(t0):m8$,"*Dollars*And*",x0$,"*Cents***"
        if t0<=0 print (printer_dev)@(h0+6),"***Void***Void***Void***Void***"
        print (printer_dev)h9$(1,1)
        q6$=prm01a.state_code$
        q8$=prm01a.city$+"  "
        q8$=q8$(1,pos("  "=q8$)-1)+", "+q6$+" "
        print (printer_dev)@(h0+10),x2$,'lf',@(h0+10),prm01a.addr_line_1$,'lf',@(h0+10),prm01a.addr_line_2$,'lf',@(h0+10),q8$,fnzipcode$(prm01a.zip_code$),h9$(1,7)
        return
    endif

void: rem --- Void Check

    print (printer_dev)h9$(1,3)
    print (printer_dev)@(h0+61),check_no$,'lf','lf'
    print (printer_dev)@(h0+59),fndate$(check_date$),@(h0+69),"***Void***",'lf','lf'
    print (printer_dev)@(h0+6),"***Void***Void***Void***Void***"
    print (printer_dev)h9$(1,12)
    prw01a.pr_chk_type$="V"
    return

write_prw01: rem --- Write

    if prw01a.pr_chk_type$<>"V" then remove (prw01a_dev,key=prw01a.firm_id$+prw01a.check_no$+"V",dom=*next)
    write record (prw01a_dev,key=prw01a.firm_id$+prw01a.check_no$+prw01a.pr_chk_type$) prw01a$
    return

step_checknum: rem --- Increment Check Number

    x=num(check_no$)+1
    if x>9999999 x=1
    check_no$=str(x:"0000000")
    return

restart: rem --- Restart

    find record (prw01a_dev,key=firm_id$+pre01a.comp_chk_no$+"C",dom=*return) prw01a$
    if prw01a.employee_no$<>pre01a.employee_no$ then return
    remove (prw01a_dev,key=prw01a.firm_id$+prw01a.check_no$+prw01a.pr_chk_type$,dom=*next)
    prw01a.firm_id$=firm_id$
    prw01a.check_no$=pre01a.comp_chk_no$
    prw01a.pr_chk_type$="V"
    prw01a.check_date$=check_date$
    prw01a.employee_no$=pre01a.employee_no$
    prw01a.sequence_num$=pre01a.sequence_num$
    prw01a$=field(prw01a$)
    gosub write_prw01
    return

get_rate: rem --- Get Rate

    payrate=0
    find record (prm02a_dev,key=pre01a.firm_id$+pre01a.employee_no$+prm01a.normal_title$,dom=find_rate) prm02a$
    payrate=prm02a.std_rate
find_rate:
    if payrate=0 then
        find record (prm10f_dev,key=pre01a.firm_id$+"F"+prm01a.normal_title$,dom=*return) prm10f$
        payrate=prm10f.std_rate
    endif  
    return

overflow: rem --- Overflow

    print (printer_dev)h9$(1,1)
    gosub void
    gosub write_prw01
    gosub step_checknum
    prw01a.check_no$=check_no$
    prw01a.pr_chk_type$="C"
    gosub stub
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
