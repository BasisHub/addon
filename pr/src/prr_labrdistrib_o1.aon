rem --- Labor Distribution Report (Report Overlay)
rem --- Program prr_labrdistrib_o1.aon v8.0.0 04Jun2008 (prr_eb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/04/2008 09:58:23)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    headings=4
    clock$="",width=132
    dim headings$[headings],head$[10]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=h4$
    headings$[3]=h3$
    headings$[4]="[HEADER]"
    p9=pos(p9$="M1234Y")-1
    more=1
    
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_RPRTCODE","PRIMARY",prm10h_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRW_LABORDST","PRIMARY",prw04_key_tpl$,rd_table_chans$[all],status$
    
rem --- Build Headings

    u0$=""
    u1$=""
    cnt=1
    dim prm10h_key$:prm10h_key_tpl$
    read (prm10h_dev,key=firm_id$+"H"+p7$,dom=*next)
    while more
        prm10h_key$=key(prm10h_dev,end=*break)
        if prm10h_key.firm_id$+prm10h_key.record_id_h$+prm10h_key.report_type$<>firm_id$+"H"+p7$ then break
        read record (prm10h_dev) prm10h$
        u0$=u0$+prm10h.report_code$
        head$[cnt]=prm10h.pr_rpt_title$
        cnt=cnt+1
    wend 
    
rem --- Column Headings

    dim columns$[cnt+1,10]
    columns = cnt+2
    columns$[0,0]="Employee No & Name", columns$[0,1]="C",columns$[0,2]="20"
    for i=1 to cnt-1
        columns$[i,0]=head$[i],           columns$[i,1]="N",columns$[i,2]="8",columns$[i,3]=m1$,columns$[i,10]="T"
    next i
    columns$[cnt,0]="Other Pay",          columns$[cnt,1]="N",columns$[cnt,2]="8",columns$[cnt,3]=m1$,columns$[cnt,10]="T"
    columns$[cnt+1,0]="Total Pay",        columns$[cnt+1,1]="N",columns$[cnt+1,2]="8",columns$[cnt+1,3]=m1$,columns$[cnt+1,10]="T"

rem --- Init Read
    
    read (prw04a_dev,key=firm_id$,dom=*next)

rem --- Main Read

    while more 
        dim prw04a_key$:prw04_key_tpl$
        prw04a_key$=key(prw04a_dev,end=*break)
        if prw04a_key.firm_id$<>firm_id$ then break
        read record (prw04a_dev) prw04a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Breaks

        if prw04a_key.dept_code$<>t0$ then gosub dept_break
        if prw04a_key.title_code$<>t1$ then gosub title_break
        if prw04a_key.employee_no$<>t2$ then gosub emp_break

rem --- Accumulate

        find record (prm10a_dev,key=firm_id$+"A"+prw04a.pay_code$,dom=*next) prm10a$
        if when$>p9$ then 
            a[2]=a[6]
            a[3]=a[7]
            a[4]=a[4]+a[6]
            a[5]=a[5]+a[7]
        endif
        x=pos(prm10a.report_code$=u0$,2)
        if x>0 then let x=int(x/2)+1
        if x>6 then let x=0
        x[x]=x[x]+prw04a.extended_amt
        y[x]=y[x]+prw04a.units
        t[x]=t[x]+prw04a.extended_amt
        u[x]=u[x]+prw04a.units
        r[x]=r[x]+prw04a.extended_amt
        s[x]=s[x]+prw04a.units
        v[x]=v[x]+prw04a.extended_amt
        w[x]=w[x]+prw04a.units
        x[7]=x[7]+prw04a.extended_amt
        y[7]=y[7]+prw04a.units
        t[7]=t[7]+prw04a.extended_amt
        u[7]=u[7]+prw04a.units
        r[7]=r[7]+prw04a.extended_amt
        s[7]=s[7]+prw04a.units
        v[7]=v[7]+prw04a.extended_amt
        w[7]=w[7]+prw04a.units
    wend 

done: rem --- Totals

    t9$="E"
    gosub dept_break
    
    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns)))
    OutVect!.addItem("      Grand Totals:")
    for f=1 to 6
        OutVect!.addItem(str(t[f]))
    next f
    OutVect!.addItem(str(t[0]))
    OutVect!.addItem(str(t[7]))
    OutVect!.addItem("")
    for f=1 to 6
        OutVect!.addItem(str(u[f]))
    next f
    OutVect!.addItem(str(u[0]))
    OutVect!.addItem(str(u[7]))

    x0=u0-t[7]
    x1=u1-u[7]
    
    xwk=fnblank(columns)
    OutVect!.addItem("      Budget:")
    xwk=fnblank(columns-2)
    OutVect!.addItem(str(u0))
    xwk=fnblank(columns-1)
    OutVect!.addItem(str(u1))

    OutVect!.addItem("      Variance:")
    xwk=fnblank(columns-2)
    OutVect!.addItem(str(x0))
    xwk=fnblank(columns-1)
    OutVect!.addItem(str(x1))
    goto std_exit

sub_head: rem --- Sub Heading

    xwk=fnblank(columns)
    OutVect!.addItem(h5$)
    xwk=fnblank(columns-1)
    return

dept_break: rem --- Dept Break

    if t0$<>"" then 
        t9$="0"
        gosub title_break
        if t9$="0" then let t9$=""
        
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem("      Dept Totals:")
        for f=1 to 6
            OutVect!.addItem(str(r[f]))
        next f
        OutVect!.addItem(str(r[0]))
        OutVect!.addItem(str(r[7]))
        OutVect!.addItem("")
        for f=1 to 6
            OutVect!.addItem(str(s[f]))
        next f
        OutVect!.addItem(str(s[0]))
        OutVect!.addItem(str(s[7]))

        x1=prm10e.budget_hrs*p8
        x0=prm10ebud_hr_cost*x1
        x2=x0-r[7]
        x3=x1-s[7]
        
        xwk=fnblank(columns)
        OutVect!.addItem("      Budget:")
        xwk=fnblank(columns-2)
        OutVect!.addItem(str(x0))
        xwk=fnblank(columns-1)
        OutVect!.addItem(str(x1))

        OutVect!.addItem("      Variance:")
        xwk=fnblank(columns-2)
        OutVect!.addItem(str(x2))
        xwk=fnblank(columns-1)
        OutVect!.addItem(str(x3))
        
        u0=u0+x0
        u1=u1+x1
    endif
    if t9$="E" then return
    dim r[7],s[7]
    t0$=prw04a.dept_code$
    t1$=""
    h3$=""
    find record (prm10e_dev,key=firm_id$+"E"+prw04a.dept_code$,dom=*return) prm10e$
    h3$=prm10e.code_desc$
    x=pos("  "=h3$)
    if x>1 then let h3$=h3$(1,x-1)
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(t0$+" "+h3$)
    return

emp_break: rem --- Employee Break

    if t2$<>"" then 
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        xwk=fnblank(columns)
        OutVect!.addItem("   "+fnmask$(t2$(1,p[0]),m0$))
        for f=1 to 6
            if x[f]<>0 then OutVect!.addItem(str(x[f])) else OutVect!.addItem("")
        next f
        if x[0]<>0 then OutVect!.addItem(str(x[0])) else OutVect!.addItem("")
        OutVect!.addItem(str(x[7]))
        OutVect!.addItem("   "+x1$)
        for f=1 to 6
            if y[f]<>0 then OutVect!.addItem(str(y[f])) else OutVect!.addItem("")
        next f
        if y[0]<>0 then OutVect!.addItem(str(y[0])) else OutVect!.addItem("")
        OutVect!.addItem(str(y[7])) 
        l1=l1+1
    endif 
    if t9$<>"" then return
    t2$=prw04a.employee_no$
    dim x[7],y[7]
    x1$="Not On File"
    find record (prm01a_dev,key=firm_id$+t2$,dom=*return) prm01a$
    q=pos("  "=prm01a.empl_surname$)-1
    if q<1 then let q=16
    x1$=prm01a.empl_surname$(1,q)+", "+prm01a.empl_givname$(1,1)+"."
    return

title_break: rem --- Title Break

    if t1$<>"" then 
        if t9$="" then let t9$="1"
        gosub emp_break
        if t9$="1" then let t9$=""
        if l1<>1 then             
            xwk=fnblank(columns+1)
            TotVect!.addItem(str(OutVect!.size()/(columns)))
            for f=1 to 6
                OutVect!.addItem(str(v[f]))
            next f
            OutVect!.addItem(str(v[0]))
            OutVect!.addItem(str(v[7]))
            OutVect!.addItem("")
            for f=1 to 6
                OutVect!.addItem(str(w[f]))
            next f
            OutVect!.addItem(str(w[0]))
            OutVect!.addItem(str(w[7]))
        endif 
    endif 
    if t9$<>"" then return
    t1$=prw04a_key.title_code$
    h5$="Not On File",l1=0,t2$=""
    dim v[7],w[7]
    find record (prm10f_dev,key=firm_id$+"F"+t1$,dom=print_title_subhead) prm10f$
    h5$=prm10f.code_desc$
print_title_subhead:
    gosub sub_head
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
