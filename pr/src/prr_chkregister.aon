rem --- Check Register
rem --- Program prr_ha v8.0.0 11Jun2008 (prr_ha)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/11/2008 09:44:06)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=16,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]="gls_params",ids$[2]="GLS_PARAMS"
    files$[3]="pre-01",ids$[3]="PRE_PAYROLL"
    files$[4]="pre-11",ids$[4]="PRE_PAYEARNG"
    files$[5]="pre-21",ids$[5]="PRE_PAYDDCT"
    files$[6]="pre-31",ids$[6]="PRE_PAYTAX"
    files$[7]="pre-41",ids$[7]="PRE_PAYCONT"
    files$[8]="prm-01",ids$[8]="PRM_EMPLMAST"
    files$[9]="prm-10",ids$[9]="PRC_RPRTCODE"
    files$[10]="prs_params",ids$[10]="PRS_PARAMS"
    files$[11]="prs_period",ids$[11]="PRS_PERIOD"
    files$[12]="prw-01",ids$[12]="PRW_CHCKWORK"
    files$[13]="prm-10",ids$[13]="PRC_PAYCODE"
    files$[14]="prm-10",ids$[14]="PRC_DDCTCODE"
    files$[15]="prm-10",ids$[15]="PRC_TAXCODE"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    gls01a_dev=channels[2]
    pre01_dev=channels[3]
    pre11_dev=channels[4]
    pre21_dev=channels[5]
    pre31_dev=channels[6]
    pre41_dev=channels[7]
    prm01_dev=channels[8]
    prm10h_dev=channels[9]
    prs01a_dev=channels[10]
    prs01b_dev=channels[11]
    prw01_dev=channels[12]

    prm10a_dev=channels[13]
    prm10b_dev=channels[14]
    prm10c_dev=channels[15]

rem --- Dimension string templates

    dim glm01a$:templates$[1],gls01a$:templates$[2],
:       pre01a$:templates$[3],pre11a$:templates$[4],pre21a$:templates$[5],
:       pre31a$:templates$[6],pre41a$:templates$[7],prm01a$:templates$[8],
:       prm10h$:templates$[9],prs01a$:templates$[10],
:       prs01b$:templates$[11],prw01a$:templates$[12],prm10a$:templates$[13],
:       prm10b$:templates$[14],prm10c$:templates$[15]


rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$

rem --- Parameters
    dim p[6],g[4]
    n1$=sysinfo.firm_name$,n2$="PR",n3$=sysinfo.task_desc$,source$=pgm(-2)
    find record (prs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) prs01a$
    find record (prs01b_dev,key=firm_id$+n2$+"01",dom=std_missing_params) prs01b$
    p[0]=num(prs01a.empl_no_len$)
    p[1]=num(prs01a.max_empl_no$)
    p[3]=num(prs01a.dept_size$)

    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$

    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_per$)
    g[2]=num(gls01a.current_year$)
    g[3]=num(gls01a.acct_length$)
    g[4]=num(gls01a.max_acct_len$)

    p[0]=num(prs01a.empl_no_len$)
    p[1]=num(prs01a.max_empl_no$)
    p[3]=num(prs01a.dept_size$)
    p[5]=num(prs01a.current_per$)
    p[6]=num(prs01a.current_year$)

rem --- retrieve template for FILE record key
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRW_CHCKWORK","PRIMARY",prw01a_key_tpl$,table_chans$[all],status$
    dim prw01a_key$:prw01a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYEARNG","PRIMARY",pre11a_key_tpl$,table_chans$[all],status$
    dim pre11a_key$:pre11a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYDDCT","PRIMARY",pre21a_key_tpl$,table_chans$[all],status$
    dim pre21a_key$:pre21a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYTAX","PRIMARY",pre31a_key_tpl$,table_chans$[all],status$
    dim pre31a_key$:pre31a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_RPRTCODE","PRIMARY",prm10h_key_tpl$,table_chans$[all],status$
    dim prm10h_key$:prm10h_key_tpl$


initializations: rem --- Initializations

    l9=59
    l=l9+1,headings=3,width=132,when$=sysinfo.system_date$,clock$=""
    dim t[8],r[8],x[8],headings$[headings]
    gldate$=prs01b.pay_end_date$
    headings$[0]=sysinfo.firm_name$,headings$[1]=sysinfo.task_desc$
    if len(prs01a.amount_mask$)>12 then prs01a.amount_mask$="####,##0.00-"
    x=pos("CR"=prs01a.amount_mask$)
    if x>1 then prs01a.amount_mask$=prs01a.amount_mask$(1,x-1)+"-"
    m0=25
    m1=len(prs01a.amount_mask$)
    update$="pru_chkupdate_ca.aon"
    m1$=prs01a.amount_mask$
    more=1

rem --- Additional File Opens

    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status then goto std_exit

    files$[16]=glw11$,ids$[16]="GLW_DAILYDETAIL",options$[16]="CL"
    call pgmdir$+"adc_fileopen.aon",action,16,16,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glw11_dev=channels[16]
    dim glw11a$:templates$[16]

    m1$=prs01a.amount_mask$

    dim columns$[8,7]
    columns = 9

    columns$[0,0]="Emp.No & Name/Check Date",   columns$[0,1]="C",columns$[0,2]="30"
    columns$[1,0]="Earnings",                   columns$[1,1]="C",columns$[1,2]="8",columns$[1,3]=m1$
    columns$[2,0]="Deductions",                 columns$[2,1]="C",columns$[2,2]="8",columns$[2,3]=m1$
    columns$[3,0]="Taxble Ded",                 columns$[3,1]="C",columns$[3,2]="8",columns$[3,3]=m1$
    columns$[4,0]="Federal",                    columns$[4,1]="C",columns$[4,2]="8",columns$[4,3]=m1$
    columns$[5,0]="FICA",                       columns$[5,1]="C",columns$[5,2]="8",columns$[5,3]=m1$
    columns$[6,0]="State",                      columns$[6,1]="C",columns$[6,2]="8",columns$[6,3]=m1$
    columns$[7,0]="SDI/WC",                     columns$[7,1]="C",columns$[7,2]="8",columns$[7,3]=m1$
    columns$[8,0]="Total",                      columns$[8,1]="C",columns$[8,2]="8",columns$[8,3]=m1$

std_stock_loaded: rem --- Standard stock loaded?

    v4$="Has standard stock been loaded in the printer"
    call pgmdir$+"adc_yesno.aon",1,v4$,2,v$,v3
    on v3 goto label_one,std_stock_loaded,std_stock_loaded,std_stock_loaded,std_exit,label_one,std_exit

label_one:
    if v$<>"Y" then goto std_exit

run_report: rem --- Run Report?

    v4$="Do you want to print the "+sysinfo.task_desc$
    call pgmdir$+"adc_yesno.aon",1,v4$,2,v$,v3
    on v3 goto label_two,run_report,run_report,run_report,std_exit,label_two,std_exit

label_two:
    if v$<>"Y" then goto std_exit

rem --- File Initializations

    gosub build_headings

rem --- Init Read

    call pgmdir$+"adc_progress.aon","N","","","","",0,prw01_dev,1,meter_num,status
    read (prw01_dev,key=firm_id$,dom=*next)

rem --- Main Read

mainloop:
   
    prw01a_key$=key(prw01_dev,end=done)
    if prw01a_key.firm_id$<>firm_id$ then goto done
    read record (prw01_dev) prw01a$
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Type

    if prw01a.pr_chk_type$="C" then
        if len(c0$)=25 then goto type_one
    endif

    if prw01a.pr_chk_type$<>"V" then goto get_employee

type_one:

    OutVect!.addItem(prw01a.check_no$,"  *Void*")
    xwk=fnblank(8)

    l=l+2
    continue

get_employee: rem --- Get Employee

    pre01a.firm_id$=firm_id$
    pre01a.employee_no$=prw01a.employee_no$
    pre01a.check_type$=prw01a.pr_chk_type$
    pre01a.sequence_num$=prw01a.sequence_num$
    pre01a.check_no$=prw01a.check_no$

    if prw01a.pr_chk_type$="C" then pre01a.check_no$=""
    read record (pre01_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*continue) pre01a$
    if pre01a.check_type$="V" then continue

rem --- Get Name

    x1$="**** Not On File ****"
    find record (prm01_dev,key=pre01a.firm_id$+pre01a.employee_no$,dom=get_name) prm01a$
    q=pos("  "=prm01a.empl_surname$)-1

get_name:
    if q<1 then q=16
    x1$=prm01a.empl_surname$(1,q)+", "+prm01a.empl_givname$

rem --- Print Heading

    OutVect!.addItem(fnmask$(pre01a.employee_no$(1,p[0]),prs01a.empl_output$)+" "+x1$)
    xwk=fnblank(8)

    l=l+2

rem --- Detail

    dim x[8]

rem --- Earnings

    read (pre11_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next)
    tblename=0
    while more
        pre11a_key$=key(pre11_dev,end=*break)
        if pre11a_key.firm_id$+pre11a_key.employee_no$+pre11a_key.check_type$+pre11a_key.sequence_num$+pre11a_key.check_no$<>pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$ then break
        read record (pre11_dev) pre11a$
        ra$=pre11a.record_id_a$
        code$=pre11a.pay_code$
        tblename=11
        gosub accumulate
    wend

rem --- Deductions

    read (pre21_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next)

    while more
        pre21a_key$=key(pre21_dev,end=*break)
        if pre21a_key.firm_id$+pre21a_key.employee_no$+pre21a_key.check_type$+pre21a_key.sequence_num$+pre21a_key.check_no$<>pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$ then break
        read record (pre21_dev) pre21a$
        ra$=pre21a.record_id_b$
        code$=pre21a.deduct_code$
        tblename=21
        gosub accumulate
    wend

rem --- Taxes

    read (pre31_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next)

    while more
        pre31a_key$=key(pre31_dev,end=*break)
        if pre31a_key.firm_id$+pre31a_key.employee_no$+pre31a_key.check_type$+pre31a_key.sequence_num$+pre31a_key.check_no$<>pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$ then break
        read record (pre31_dev) pre31a$

        ra$=pre31a.record_id_c$
        code$=pre31a.tax_code$
        tblename=31
        gosub accumulate
    wend

print: rem --- Print

    OutVect!.addItem("               "+prw01a.check_no$+"  "+fndate$(prw01a.check_date$))
    OutVect!.addItem(str(x[1]:prs01a.amount_mask$))
    OutVect!.addItem(str(x[2]:prs01a.amount_mask$))
    OutVect!.addItem(str(x[3]:prs01a.amount_mask$))
    OutVect!.addItem(str(x[4]:prs01a.amount_mask$))
    OutVect!.addItem(str(x[5]:prs01a.amount_mask$))
    OutVect!.addItem(str(x[6]:prs01a.amount_mask$))
    OutVect!.addItem(str(x[7]:prs01a.amount_mask$))
    OutVect!.addItem(str(x[8]:prs01a.amount_mask$))
    xwk=fnblank(9)

    l=l+1
    goto mainloop

done: rem --- Totals

    OutVect!.addItem("        Grand Totals:")
    OutVect!.addItem(str(t[1]:prs01a.amount_mask$))
    OutVect!.addItem(str(t[2]:prs01a.amount_mask$))
    OutVect!.addItem(str(t[3]:prs01a.amount_mask$))
    OutVect!.addItem(str(t[4]:prs01a.amount_mask$))
    OutVect!.addItem(str(t[5]:prs01a.amount_mask$))
    OutVect!.addItem(str(t[6]:prs01a.amount_mask$))
    OutVect!.addItem(str(t[7]:prs01a.amount_mask$))
    OutVect!.addItem(str(t[8]:prs01a.amount_mask$))

    action$="D"
    run pgmdir$+"prr_chkregister_o1.aon"

build_headings: rem --- Build Headings

    u0$=""
    u1$=""
    read (prm10h_dev,key=firm_id$+"H",dom=*next)

    while more
        prm10h_key$=key(prm10h_dev,end=*break)
        if prm10h_key.firm_id$+prm10h_key.record_id_h$<>firm_id$+"H" then break
        read record (prm10h_dev) prm10h$
        if prm10h_key.report_type$<="C" then
            u0$=u0$+prm10h.report_type$+prm10h.report_code$
            u2$=u2$+prm10h.chk_reg_col$
        endif

        if prm10h_key.report_type$<>"F" then continue
        u3$=u3$+prm10h.report_code$
        x$=prm10h.pr_rpt_title$

        for x=1 to 10
            if x$(10,1)<>" " then break
            x$=" "+x$(1,9)
        next x

        u1$=u1$+x$
    wend

    dim x$(80)
    x$(1)=u1$
    x$(71)="     Total",u1$=x$
    return

accumulate: rem --- Accumulate

    x=0
    sign=-1
    if tblename=11 then
        find record (prm10a_dev,key=firm_id$+ra$+code$,dom=label_three) prm10a$
    else
        if tblename=21 then
            find record (prm10b_dev,key=firm_id$+ra$+code$,dom=label_three) prm10b$
        else
            if tblename=31 then
                find record (prm10c_dev,key=firm_id$+ra$+code$,dom=label_three) prm10c$
            endif
        endif
    endif

    x=pos(ra$+x$(22,2)=u0$)
    if x=0 then goto print
    x$=u2$(int(x/3)*2+1,2)
    x=pos(x$=u3$)
    if x>0 then x=int(x/2)+1

label_three:

    if x>7 then x=0
    if x=0 then x=1
    if ra$="A" then sign=1

    if tblename=11 then
        x[x]=x[x]+pre11a.extended_amt
        t[x]=t[x]+pre11a.extended_amt
        r[x]=r[x]+pre11a.extended_amt
        x[8]=x[8]+sign*pre11a.extended_amt
        t[8]=t[8]+sign*pre11a.extended_amt
        r[8]=r[8]+sign*pre11a.extended_amt
    else    
        if tblename=21 then
            x[x]=x[x]+pre21a.deduct_amt
            t[x]=t[x]+pre21a.deduct_amt
            r[x]=r[x]+pre21a.deduct_amt
            x[8]=x[8]+sign*pre21a.deduct_amt
            t[8]=t[8]+sign*pre21a.deduct_amt
            r[8]=r[8]+sign*pre21a.deduct_amt
        else
            if tblename=31 then
                x[x]=x[x]+pre31a.tax_amount
                t[x]=t[x]+pre31a.tax_amount
                r[x]=r[x]+pre31a.tax_amount
                x[8]=x[8]+sign*pre31a.tax_amount
                t[8]=t[8]+sign*pre31a.tax_amount
                r[8]=r[8]+sign*pre31a.tax_amount
            endif
        endif
    endif    

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)


rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend


rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
