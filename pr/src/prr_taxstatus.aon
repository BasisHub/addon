rem --- Tax Status Report
rem --- Program prr_ka v8.0.0 02Jun2008 (prr_ka)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/02/2008 09:47:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)


rem --- Open/Lock files

        files=4,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="prm-01",ids$[1]="PRM_EMPLMAST"
        files$[2]="prm-10",ids$[2]="PRC_TAXCODE"
        files$[3]="prs_params",ids$[3]="PRS_PARAMS"
        files$[4]="prt-21",ids$[4]="PRT_EMPLTAX"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        prm01a_dev=channels[1]
        prm10c_dev=channels[2]
        prs01a_dev=channels[3]
        prt21a_dev=channels[4]

rem --- Dimension string templates

        dim prm01a$:templates$[1],prm10c$:templates$[2],prs01a$:templates$[3],
:       prt21a$:templates$[4]

rem --- Assign form input values to local variables

        p9=num(Option!.getOptionData("quarter"))
        p8$=Option!.getOptionData("tax_code")

rem --- Retrieve parameter records

        prs01a_key$=firm_id$+"PR00"
        find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$

rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="PR",n4$=sysinfo.task_desc$
        find record (prs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) prs01a$
        dim p[2]
        p[0]=num(prs01a.empl_no_len$)
        p[1]=num(prs01a.current_per$)
        p[2]=num(prs01a.current_year$)

initializations: rem --- Initializations
        call pgmdir$+"adc_getmask.aon","","PR","A","",m1$,0,0
        l9=59
        l=l9+1,headings=4,width=132,page=0,when$=sysinfo.system_date$,clock$=""
        dim headings$[headings]
        headings$[0]=n1$
        headings$[1]=n4$
        headings$[2]="Quarter "+str(p9)
        headings$[3]="[HEADER]"
        m0$=prs01a.empl_output$
        m1$=m1$
        dim t[2],u[2],v[2],y[17],z[0]
        m0=max(11,len(prs01a.empl_output$))

        call pgmdir$+"adc_sizemask.aon",m1$,m1,8,12
        m9$="000-00-0000"
        more=1

rem --- Column Heading

            dim columns$[11,10]
            columns =11
            columns$[0,0]="Employee ^ Number",        columns$[0,1]="C",columns$[0,2]="10"
            columns$[1,0]="Name ",                    columns$[1,1]="C",columns$[1,2]="15"
            columns$[2,0]="Gross",                    columns$[2,1]="N",columns$[2,2]="10", columns$[2,3]=m1$,columns$[2,10]="T"
            columns$[3,0]="Current Month ^ Taxable",  columns$[3,1]="N",columns$[3,2]="10", columns$[3,3]=m1$,columns$[3,10]="T"
            columns$[4,0]="SS Number",                columns$[4,1]="C",columns$[4,2]="10"
            columns$[5,0]="Tax ",                     columns$[5,1]="N",columns$[5,2]="8",  columns$[5,3]=m1$,columns$[5,10]="T"
            columns$[6,0]="Gross",                    columns$[6,1]="N",columns$[6,2]="10", columns$[6,3]=m1$,columns$[6,10]="T"
            columns$[7,0]="Current Quarter ^ Taxable",columns$[7,1]="N",columns$[7,2]="15", columns$[7,3]=m1$,columns$[7,10]="T"
            columns$[8,0]="Tax ",                     columns$[8,1]="N",columns$[8,2]="8",  columns$[8,3]=m1$,columns$[8,10]="T"
            columns$[9,0]="Gross",                    columns$[9,1]="N",columns$[9,2]="10", columns$[9,3]=m1$,columns$[9,10]="T"
            columns$[10,0]="Year-To-Date ^ Taxable",  columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m1$,columns$[10,10]="T"
            columns$[11,0]="Tax ",                    columns$[11,1]="N",columns$[11,2]="8", columns$[11,3]=m1$,columns$[11,10]="T"


rem retrieve template for FILE record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_TAXCODE","PRIMARY",prm10c_key_tpl$,table_chans$[all],status$
        dim prm10c_key$:prm10c_key_tpl$
        call pgmdir$+"adc_progress.aon","N","","","","",0,prm10c_dev,1,meter_num,status
        
rem --- Init Read

         read (prm10c_dev,key=firm_id$+"C",dom=*next)
         BrkVect!.addItem(str(OutVect!.size()/(columns+1))) 

rem --- Main Read
  while more

        prm10c_key$=key(prm10c_dev,end=*break)
        if prm10c_key.firm_id$+prm10c_key.record_id_c$<>firm_id$+"C" then break
        read record (prm10c_dev) prm10c$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if p8$<>"" then if p8$<>prm10c.tax_code$ then continue
        l=l9+1
        l1=0
rem        gosub subheading

        read (prm01a_dev,key=firm_id$,dom=*next)

rem --- Employee
    while more 

        read record (prm01a_dev,end=*break) prm01a$
        if prm01a.firm_id$<>firm_id$ then break
        x1$=prm01a.empl_surname$
        x=pos("  "=x1$)
        if x>1 then let x1$=x1$(1,x-1)
        if len(x1$)=16 then
            if x1$(16,1)=" " then
                x1$=x1$(1,15)
            endif
        endif
        x1$=x1$+", "+prm01a.empl_givname$
        
rem --- Get Detail

        read record (prt21a_dev,key=prm01a.firm_id$+prm01a.employee_no$+prm10c.record_id_c$+prm10c.tax_code$,dom=*continue) prt21a$
        y0=0
        y1=0,y2=0
        for x=1 to p9
            y0=y0+num(FIELD(prt21a$,"qtr_gross_"+str(x:"00")))
            y1=y1+num(FIELD(prt21a$,"qtr_taxable_"+str(x:"00")))
            y2=y2+num(FIELD(prt21a$,"quarter_tax_"+str(x:"00")))
            v[0]=v[0]+num(FIELD(prt21a$,"qtr_gross_"+str(x:"00")))
            v[1]=v[1]+num(FIELD(prt21a$,"qtr_taxable_"+str(x:"00")))
            v[2]=v[2]+num(FIELD(prt21a$,"quarter_tax_"+str(x:"00")))
        next x

rem --- Print

                      
                        OutVect!.addItem(fnmask$(prm01a.firm_id$+prm01a.employee_no$,m0$))
                        OutVect!.addItem(x1$)
                        OutVect!.addItem(str(prt21a.mtd_gross))
                        OutVect!.addItem(str(prt21a.mtd_taxable))
                        OutVect!.addItem(fnmask$(prm01a.soc_sec_no$,m9$))
                        OutVect!.addItem(str(prt21a.mtd_tax))
                        OutVect!.addItem(str(num(FIELD(prt21a$,"qtr_gross_"+str(p9:"00")))))
                        OutVect!.addItem(str(num(FIELD(prt21a$,"qtr_taxable_"+str(p9:"00")))))
                        OutVect!.addItem(str(num(FIELD(prt21a$,"quarter_tax_"+str(p9:"00")))))
                        OutVect!.addItem(str(y0))
                        OutVect!.addItem(str(y1))
                        OutVect!.addItem(str(y2))

        l1=l1+1
        for x=0 to 2
            if x=0 then
                t[x]=t[x]+prt21a.mtd_gross
                u[x]=u[x]+num(FIELD(prt21a$,"qtr_gross_"+str(p9:"00")))
            endif
            if x=1 then
                t[x]=t[x]+prt21a.mtd_taxable
                u[x]=u[x]+num(FIELD(prt21a$,"qtr_taxable_"+str(p9:"00")))
            endif
            if x=2 then
                t[x]=t[x]+prt21a.mtd_tax
                u[x]=u[x]+num(FIELD(prt21a$,"quarter_tax_"+str(p9:"00")))
            endif
        next x
      wend
      gosub sub_total

      
    wend

        goto std_exit

sub_total: rem --- Subtotal     

        if l1=0 then return
                xwk = fnblank(12)
                TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                OutVect!.addItem("")
                OutVect!.addItem("Totals:")
                OutVect!.addItem(str(t[0]))
                OutVect!.addItem(str(t[1]))
                OutVect!.addItem("")
                OutVect!.addItem(str(t[2]))
                OutVect!.addItem(str(u[0]))
                OutVect!.addItem(str(u[1]))
                OutVect!.addItem(str(u[2]))
                OutVect!.addItem(str(v[0]))
                OutVect!.addItem(str(v[1]))
                OutVect!.addItem(str(v[2]))
                BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
                subheading$="Tax Code: "+prm10c.tax_code$+" "+prm10c.pr_code_desc$
                HdrVect!.addItem(subheading$)
        dim t[2],u[2],v[2]
        return



rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")


rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
