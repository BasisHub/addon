rem --- Check Update
rem --- Program pru_cb v8.0.0 02Jun2008 (pru_cb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/02/2008 09:43:06)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=23,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]="glt-04",ids$[2]="GLE_DAILYDETAIL"
    files$[3]="glt-05",ids$[3]="GLT_BANKCHECKS"
rem    files$[4]="glt-14",ids$[4]="GLX_DAILYXRF"
    files$[4]="pre-01",ids$[4]="PRE_PAYROLL"
    files$[5]="pre-11",ids$[5]="PRE_PAYEARNG"
    files$[6]="pre-21",ids$[6]="PRE_PAYDDCT"
    files$[7]="pre-31",ids$[7]="PRE_PAYTAX"
    files$[8]="pre-41",ids$[8]="PRE_PAYCONT"
    files$[9]="pre-51",ids$[9]="PRE_PAYACCRL"
    files$[10]="prm-01",ids$[10]="PRM_EMPLMAST"
    files$[11]="prm-10",ids$[11]="PRC_PAYCODE"
    files$[12]="prm-10",ids$[12]="PRC_DDCTCODE"
    files$[13]="prm-10",ids$[13]="PRC_DEPTCODE"
    files$[14]="prm-10",ids$[14]="PRC_UNNCODE"
    files$[15]="prs_params",ids$[15]="PRS_PARAMS"
    files$[16]="prt-01",ids$[16]="PRT_EMPLEARN"
    files$[17]="prt-02",ids$[17]="PRT_EMPLCHCK"
    files$[18]="prt-03",ids$[18]="PRT_MNTHCHCK"
    files$[19]="prt-04",ids$[19]="PRT_UNNHIST"
    files$[20]="prt-11",ids$[20]="PRT_EMPLDDCT"
    files$[21]="prt-21",ids$[21]="PRT_EMPLTAX"
    files$[22]="prt-31",ids$[22]="PRT_EMPLCONT"
    files$[23]="prw-01",ids$[23]="PRW_CHCKWORK"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01a_dev=channels[1]
    glt04a_dev=channels[2]
    glt05a_dev=channels[3]
rem    glt14a_dev=channels[4]
    pre01a_dev=channels[4]
    pre11a_dev=channels[5]
    pre21a_dev=channels[6]
    pre31a_dev=channels[7]
    pre41a_dev=channels[8]
    pre51a_dev=channels[9]
    prm01a_dev=channels[10]
    prm10a_dev=channels[11]
    prm10b_dev=channels[12]
    prm10e_dev=channels[13]
    prm10j_dev=channels[14]
    prs01a_dev=channels[15]
    prt01a_dev=channels[16]
    prt02a_dev=channels[17]
    prt03a_dev=channels[18]
    prt04a_dev=channels[19]
    prt11a_dev=channels[20]
    prt21a_dev=channels[21]
    prt31a_dev=channels[22]
    prw01a_dev=channels[23]

rem --- Dimension string templates

rem glt14a$:templates$[4],

    dim glm01a$:templates$[1],glt04a$:templates$[2],glt05a$:templates$[3],
:       pre01a$:templates$[4],pre11a$:templates$[5],
:       pre21a$:templates$[6],pre31a$:templates$[7],pre41a$:templates$[8],
:       pre51a$:templates$[9],prm01a$:templates$[10],prm10a$:templates$[11],
:       prm10b$:templates$[12],prm10e$:templates$[13],prm10j$:templates$[14],
:       prs01a$:templates$[15],prt01a$:templates$[16],prt02a$:templates$[17],
:       prt03a$:templates$[18],prt04a$:templates$[19],prt11a$:templates$[20],
:       prt21a$:templates$[21],prt31a$:templates$[22],prw01a$:templates$[23]



rem --- Retrieve parameter records

    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$

rem --- Initialization

    t1$="365052026024012004001"
    t2$="DWBSMQA"
    more=1

rem retrieve template for FILE record key
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRW_CHCKWORK","PRIMARY",prw01a_key_tpl$,table_chans$[all],status$
    dim prw01a_key$:prw01a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYEARNG","PRIMARY",pre11a_key_tpl$,table_chans$[all],status$
    dim pre11a_key$:pre11a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYDDCT","PRIMARY",pre21a_key_tpl$,table_chans$[all],status$
    dim pre21a_key$:pre21a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYTAX","PRIMARY",pre31a_key_tpl$,table_chans$[all],status$
    dim pre31a_key$:pre31a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYCONT","PRIMARY",pre41a_key_tpl$,table_chans$[all],status$
    dim pre41a_key$:pre41a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYACCRL","PRIMARY",pre51a_key_tpl$,table_chans$[all],status$
    dim pre51a_key$:pre51a_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYROLL","PRIMARY",pre01a_key_tpl$,table_chans$[all],status$
    dim pre01a_key$:pre01a_key_tpl$


rem --- Disallow 'M'enu option in Error Routine

    exit_ctrl=1
    call pgmdir$+"adc_progress.aon","N","","","","",0,prw01_dev,1,meter_num,status

rem --- Init Read

    read (prw01_dev,key=firm_id$,dom=*next)

rem --- Main Read

    while more
            t0=0
            t1=0,t2=0
            prw01a_key$=key(prw01_dev,end=*break)
            read record (prw01_dev) prw01a$
            if prw01a.firm_id$<>firm_id$ then break
            call pgmdir$+"adc_progress.aon","S","","","",prw01a.check_no$,0,0,1,0,ignore_status
            if prw01a.pr_chk_type$<>"V" then 

rem --- Check Header

                    dim u[7],i[50],r1$(240),q[20]
                    find record (prm01_dev,key=firm_id$+prw01a.employee_no$,dom=*next) prm01a$
                    pre01a.firm_id$=prw01a.firm_id$
                    pre01a.employee_no$=prw01a.employee_no$
                    pre01a.check_type$=prw01a.pr_chk_type$
                    pre01a.sequence_num$=prw01a.sequence_num$
                    pre01a.check_no$=prw01a.check_no$
                    if prw01a.pr_chk_type$="C" then  pre01a.check_no$=""
                    read record (pre01_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=header_remove) pre01a$
                    t0=0
                    t1=0,t2=0,t3=0,t9$="",t9$="E"
                    p9$=prw01a.check_date$
rem                    p9=pos(fnyy_yy21$(fnc2$(p9$))<=p7$,4)
                    p9=pos(p9$<=p7$,4)
                    p9=int((p9+3)/4),q9$=""; rem "P9=Calendar qtr in which check date was written"
                    per=num(t1$(pos(pre01a.pay_period$=t2$)*3-2,3))
                    gosub process_anniv
                    v0$=prm01a.dept_code$
                    memo$=cvs(prm01a.empl_givname$,2)+" "+cvs(prm01a.empl_surname$,2)
                    gosub dept
                    t9$=""
                    z3$=prm10e.gl_cash_acct$,z4$=prm10e.gl_accr_acct$,j7$=""

rem --- Check Detail
rem --- Earnings

                    read (pre11_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next)
                while more
                    pre11a_key$=key(pre11_dev,end=*break)
                    if pre11a_key.firm_id$+pre11a_key.employee_no$+pre11a_key.check_type$+pre11a_key.sequence_num$+pre11a_key.check_no$<>pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$ then break
                    read record (pre11_dev) pre11a$
                    if pre01a.check_type$<>"V" then 
                            ref1$=fnmask$(prm01a.employee_no$(1,p[0]),prs01a.empl_output$)
                            ref2$=prw01a.check_no$,units=0; rem "GL Inits"
                            fl$=pre11a.record_id_a$
                            fl2$=pre11a.pay_code$
                            gosub check_hist
                            precision p[3]
                            prt01a.firm_id$=pre01a.firm_id$
                            prt01a.employee_no$=pre01a.employee_no$
                            prt01a.record_id_a$="A"
                            prt01a.pay_code$=pre11a.pay_code$
                            extract record (prt01_dev,key=prt01a.firm_id$+prt01a.employee_no$+prt01a.record_id_a$+prt01a.pay_code$,dom=*next) prt01a$
                            if p9$<=g9$ then
                                prt01a.mtd_amount=prt01a.mtd_amount+pre11a.extended_amt
                                prt01a.mtd_units=prt01a.mtd_units+pre11a.units
                            endif
                            if p9$>g9$ then
                                prt01a.nmtd_amt=prt01a.nmtd_amt+pre11a.extended_amt
                                prt01a.nmtd_units=prt01a.nmtd_units+pre11a.units
                            endif

                            if p9>0 then
                                if p9=1 then
                                    prt01a.qtr_amt_01=prt01a.qtr_amt_01+pre11a.extended_amt
                                    prt01a.qtr_units_01=prt01a.qtr_units_01+pre11a.units
                                endif
                                if p9=2 then
                                    prt01a.qtr_amt_02=prt01a.qtr_amt_02+pre11a.extended_amt
                                    prt01a.qtr_units_02=prt01a.qtr_units_02+pre11a.units
                                endif
                                if p9=3 then
                                    prt01a.qtr_amt_03=prt01a.qtr_amt_03+pre11a.extended_amt
                                    prt01a.qtr_units_03=prt01a.qtr_units_03+pre11a.units
                                endif
                                if p9=4 then
                                    prt01a.qtr_amt_04=prt01a.qtr_amt_04+pre11a.extended_amt
                                    prt01a.qtr_units_04=prt01a.qtr_units_04+pre11a.units
                                endif

                            endif
                            find record (prm10a_dev,key=firm_id$+"A"+pre11a.pay_code$,dom=write_rec1) prm10a$
                            if prm10a.calc_type$<>"N" then
                                if pos(prm10a.calc_type$="FU")<>0 then  z[4]=z[4]+pre11a.units
                                if pos(prm10a.calc_type$="D")<>0 then  z[4]=z[4]+pre11a.extended_amt
                            endif
write_rec1:
                            write record (prt01_dev,key=prt01a.firm_id$+prt01a.employee_no$+prt01a.record_id_a$+prt01a.pay_code$) prt01a$
                            precision 2
                            v$=pre11a.record_id_a$
                            gosub union_hist
                            v0$=pre11a.dept_code$
                            t0=t0+pre11a.extended_amt*1
                            gosub Accumulate_Depts
                            dpts$=pre11a.record_id_a$
                            gosub dept
                      endif

delete11:               remove (pre11_dev,key=pre11a_key$)

                wend

read_pre21: rem --- Deductions.

                    read (pre21_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next)
                while more
                        pre21a_key$=key(pre21_dev,end=*break)
                        if pre21a_key.firm_id$+pre21a_key.employee_no$+pre21a_key.check_type$+pre21a_key.sequence_num$+pre21a_key.check_no$<>pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$ then break
                        read record (pre21_dev) pre21a$
                        if  pre01a.check_type$<>"V" then 
                            ref1$=fnmask$(prm01a.employee_no$(1,p[0]),prs01a.empl_output$)
                            ref2$=prw01a.check_no$,units=0; rem "GL Inits"
                            fl$=pre21a.record_id_b$
                            fl2$=pre21a.deduct_code$
                            gosub check_hist
                            prt11a.firm_id$=pre01a.firm_id$
                            prt11a.employee_no$=pre01a.employee_no$
                            prt11a.record_id_b$="B"
                            prt11a.deduct_code$=pre21a.deduct_code$
                            extract record (prt11_dev,key=prt11a.firm_id$+prt11a.employee_no$+prt11a.record_id_b$+prt11a.deduct_code$,dom=*next) prt11a$

                            if p9$<=g9$ then prt11a.mtd_amount=prt11a.mtd_amount+pre21a.deduct_amt
                            if p9$>g9$ then  prt11a.nmtd_amt=prt11a.nmtd_amt+pre21a.deduct_amt

                            if p9>0 then
                                if p9=1 then
                                    prt11a.qtr_amt_01=prt11a.qtr_amt_01+pre21a.deduct_amt
                                endif
                                if p9=2 then
                                    prt11a.qtr_amt_02=prt11a.qtr_amt_02+pre21a.deduct_amt
                                endif
                                if p9=3 then
                                    prt11a.qtr_amt_03=prt11a.qtr_amt_03+pre21a.deduct_amt
                                endif
                                if p9=4 then
                                    prt11a.qtr_amt_04=prt11a.qtr_amt_04+pre21a.deduct_amt
                                endif
rem                                y[p9]=y[p9]+pre21a.deduct_amt
                            endif

rem --- Reduces the balance on Ded w/balance

                            if pos("B"=prt11a.bal_or_limit$)<>0 and prt11a.qtr_amt_01<>0 then
                                prt11a.qtr_amt_01=prt11a.qtr_amt_01-pre21a.deduct_amt
                            endif
                            if prt11a.qtr_amt_01<0 then  prt11a.qtr_amt_01=0
                            write record (prt11_dev,key=prt11a.firm_id$+prt11a.employee_no$+prt11a.record_id_b$+prt11a.deduct_code$) prt11a$
                            v$=pre21a.record_id_b$
                            gosub union_hist
                            t1=t1+pre21a.deduct_amt
                            v0$=prm01a.dept_code$
                            dpt$=pre21a.record_id_b$
                            gosub dept
                       endif
                       remove (pre21_dev,key=pre21a_key$)

                wend

rem --- Tax

                    read (pre31_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next)

                while more
                        pre31a_key$=key(pre31_dev,end=read_pre41)
                        if pre31a_key.firm_id$+pre31a_key.employee_no$+pre31a_key.check_type$+pre31a_key.sequence_num$+pre31a_key.check_no$=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$ then 
                            read record (pre31_dev) pre31a$
                            if pre01a.check_type$<>"V" then 
                                ref1$=fnmask$(prm01a.employee_no$(1,p[0]),prs01a.empl_output$)
                                ref2$=prw01a.check_no$,units=0; rem "GL Inits"
                                fl$=pre31a.record_id_c$
                                fl2$=pre31a.tax_code$
                                gosub check_hist
                                prtx$=pre31a.record_id_c$
                                prtxcd$=pre31a.tax_code$
                                gosub process_taxnded
                            endif
                            remove (pre31_dev,key=pre31a_key$)

                          continue

                        endif
read_pre41: rem --- Contributions

                        read (pre41_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next)
                        pre41a_key$=key(pre41_dev,end=*break)
                        if pre41a_key.firm_id$+pre41a_key.employee_no$+pre41a_key.check_type$+pre41a_key.sequence_num$+pre41a_key.check_no$<>pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$ then break
                        read record (pre41_dev) pre41a$
                        if pre01a.check_type$<>"V" then 
                            ref1$=fnmask$(prm01a.employee_no$(1,p[0]),prs01a.empl_output$)
                            ref2$=prw01a.check_no$,units=0; rem "GL Inits"
                            prtx$=pre41a.record_id_d$
                            prtxcd$=pre41a.contrib_code$
                            gosub process_taxnded
                        endif
delete41:               remove (pre41_dev,key=pre41a_key$)

                wend

rem --- Accruals

                    read (pre51_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next)

                while more
                    pre51a_key$=key(pre51_dev,end=*break)
                    if pre51a_key.firm_id$+pre51a_key.employee_no$+pre51a_key.check_type$+pre51a_key.sequence_num$+pre51a_key.check_no$<>pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$ then break
                    read record (pre51_dev) pre51a$
                    if pre01a.check_type$<>"V" then 
                        ref1$=fnmask$(prm01a.employee_no$(3,p[0]),prs01a.empl_output$)
                        ref2$=prw01a.check_no$,units=0; rem "GL Inits"
                        precision p[3]

                         prt01a.firm_id$=pre01a.firm_id$
                         prt01a.employee_no$=pre01a.employee_no$
                         prt01a.record_id_a$="A"
                         prt01a.pay_code$=pre11a.pay_code$
                        extract record (prt01_dev,key=prt01a.firm_id$+prt01a.employee_no$+prt01a.record_id_a$+prt01a.pay_code$,dom=*next) prt01a$
                        find record (prm10_dev,key=firm_id$+"A"+pre11a.pay_code$,dom=initilize_1) prm10a$
                        if prm10a.accr_basis$="A" then 
                            z[1]=z[1]+pre51a.accr_uamt*1
                        else

                            if p9>0 then  z[1]=z[1]+pre51a.accr_uamt
initilize_1:
                            if p9<=0 then  z[2]=z[2]+pre51a.accr_uamt
                        endif
                        write record (prt01_dev,key=prt01a.firm_id$+prt01a.employee_no$+prt01a.record_id_a$+prt01a.pay_code$) prt01a$

                    endif
                    remove (pre51_dev,key=pre51a_key$)

                wend

rem --- Write Check History

                    precision 2
                    if prw01a.pr_chk_type$<>"V" then 
                           prt02a.firm_id$=pre01a.firm_id$
                           prt02a.employee_no$=pre01a.employee_no$
                           prt02a.check_no$=prw01a.check_no$
                           prt02a.check_date$=prw01a.check_date$
                           prt02a.pr_chk_type$=prw01a.pr_chk_type$
                            dim d[7]
                            extract record (prt02_dev,key=prt02a.firm_id$+prt02a.employee_no$+prt02a.check_no$,dom=*next) prt02a$
                            prt02a.check_amount=prt02a.check_amount+t0-t1-t2
                            for x=1 to 7
                                 d[x]=num(FIELD(prt02a$,"earndeduct_"+str(x:"00")))+u[x]
                            next x
                            write record (prt02_dev,key=prt02a.firm_id$+prt02a.employee_no$+prt02a.check_no$) prt02a$

rem --- GL Cash

                            account$=z3$
                            when$=p9$,ref3$="Payroll",amount=(-t0)+t1+t2,units=0
                            gosub glpost
                            account$=z4$
                            amount=-amount
                            gosub glpost
                    endif
            endif

rem --- Write Open Check

            if prw01a.pr_chk_type$="V" then  p9$=prw01a.check_date$
            prt03a.firm_id$=prw01a.firm_id$
            prt03a.check_no$=prw01a.check_no$
            prt03a.check_type$=prw01a.pr_chk_type$
            prt03a.check_date$=prw01a.check_date$
            prt03a.employee_no$=prw01a.employee_no$
            prt03a.pay_end_date$=p9$
            extract record (prt03_dev,key= prt03a.firm_id$+prt03a.check_no$,dom=*next) prt03a$
            prt03a.check_amount=prt03a.check_amount+t0-t1-t2
            prt03a.firm_id$=prw01a.firm_id$
            prt03a.check_no$=prw01a.check_no$
            prt03a.check_type$=prw01a.pr_chk_type$
            prt03a.check_date$=prw01a.check_date$
            prt03a.employee_no$=prw01a.employee_no$
            prt03a.pay_end_date$=p9$
            write record (prt03_dev,key=prt03a.firm_id$+prt03a.check_no$) prt03a$
            if prs01a.br_installed$="Y" and gl$="Y" then gosub bank_rec

header_remove: rem --- Remove Header

            if prw01a.pr_chk_type$<>"V" then 
                remove (pre01_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=remove_header)
                read (pre01_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next)
            endif
remove_header: remove (prw01_dev,key=prw01a_key$)

            read (prw01_dev,key=prw01a_key$,dom=*next)
    wend

rem --- Clear Remainder

            read (pre01_dev,key=firm_id$,dom=*next)

        while more
            pre01a_key$=key(pre01_dev,end=*break)
            if pre01a_key.firm_id$<>firm_id$ then break
            remove (pre01_dev,key=pre01a_key$)
        wend

            read (pre11_dev,key=firm_id$,dom=*next)

        while more
            pre11a_key$=key(pre11_dev,end=*break)
            if pre11a_key.firm_id$<>firm_id$ then break
            remove (pre11_dev,key=pre11a_key$)
        wend

            read (pre21_dev,key=firm_id$,dom=*next)

        while more
            pre21a_key$=key(pre21_dev,end=*break)
            if pre21a_key.firm_id$<>firm_id$ then break
            remove (pre21_dev,key=pre21a_key$)
        wend

            read (pre31_dev,key=firm_id$,dom=*next)

        while more
            pre31a_key$=key(pre31_dev,end=*break)
            if pre31a_key.firm_id$<>firm_id$ then break
            remove (pre31_dev,key=pre31a_key$)
        wend
    
            read (pre41_dev,key=firm_id$,dom=*next)

        while more
            pre41a_key$=key(pre41_dev,end=*break)
            if pre41a_key.firm_id$<>firm_id$ then break
            remove (pre41_dev,key=pre41a_key$)
        wend    

            read (pre51_dev,key=firm_id$,dom=*next)

        while more
            pre51a_key$=key(pre51_dev,end=*break)
            if pre51a_key.firm_id$<>firm_id$ then break
            remove (pre51_dev,key=pre51a_key$)
        wend

rem --- Next Overlay

            run pgmdir$+"pru_chkupdate.aon"
            goto std_exit

bank_rec: rem --- Bank Rec

        if prw01a.pr_chk_type$="V" then 
            x9$=x9$+prt03a.check_no$
            return
        endif

write_voids: rem --- Write Voids

        while more

            if x9$="" then break
            glt05a.firm_id$=firm_id$
            glt05a.gl_cash_acct$=z3$
            glt05a.check_no$=x9$(1,7)

            glt05a.check_type$="P"
            glt05a.paid_code$="V"
            glt05a.bnk_chk_date$=fnyy_yy21$(fndate$(fndate$(prt03a.check_date$)))
            glt05a.description$="Void"

            write record (glt05_dev,key=glt05a.firm_id$+glt05a.gl_cash_acct$+glt05a.check_no$) glt05a$
            if len(x9$)>8 then
                x9$=x9$(8)
            else
                x9$=""
            endif
        wend

rem --- Detail


            glt05a.firm_id$=firm_id$
            glt05a.gl_account$=z3$
            glt05a.check_no$=prt03a.check_no$

            glt05a.check_type$="P"
            glt05a.paid_code$="O"
rem            glt05a.bnk_chk_date$=fndate$(prt03a.check_date$)
            glt05a.bnk_chk_date$=prt03a.check_date$
            glt05a.description$=memo$

            find record (glt05_dev,key=glt05a.firm_id$+glt05a.gl_account$+glt05a.check_no$,dom=*next) glt05a$
            glt05a.check_amount=glt05a.check_amount+t0-t1-t2
            if prt03a.check_type$="R" then  glt05a.paid_code$="R"
            write record (glt05_dev,key=glt05a.firm_id$+glt05a.gl_account$+glt05a.check_no$) glt05a$
            dim x[3]
            return

Accumulate_Depts: rem --- Accumulate Depts

        while more
            x=pos(v0$=q9$)
            if x=0 then  q9$=q9$+v0$;continue
            break
        wend
            q[int(x/2)]=q[int(x/2)]+w[2]
            return

union_hist: rem --- Update Union History File (PRT-04)

            if prs01a.union_hist$<>"Y" then return
            find record (prm10j_dev,key=firm_id$+"J"+prm01a.union_code$,dom=*return) prm10j$
            prt04a.firm_id$=firm_id$
            prt04a.union_code$=prm01a.union_code$
            prt04a.empl_surname$=prm01a.empl_surname$
            prt04a.empl_givname$=prm01a.empl_givname$
            prt04a.employee_no$=pre01a.employee_no$
            prt04a.pay_end_date$=p8$

            prt04a.soc_sec_no$=prm01a.soc_sec_no$
            extract record (prt04_dev,key=prt04a.firm_id$+prt04a.union_code$+prt04a.empl_surname$+prt04a.empl_givname$+prt04a.employee_no$+prt04a.pay_end_date$,dom=*next) prt04a$

            for i=1 to 10
                if v$="A" and pos(pre11a.pay_code$=FIELD(prm10j$,"pay_code_"+str(i:"00")),2)<>0 then  
                        prt04a.total_units=prt04a.total_units+pre11a.units
                        prt04a.tot_earn_amt=prt04a.tot_earn_amt+pre11a.extended_amt
                endif
            next i

           for i=1 to 10
                if v$="B" and pos(pre21a.deduct_code$=FIELD(prm10j$,"deduct_code_"+str(i:"00")),2)<>0 then  
                        prt04a.tot_ded_amt=prt04a.tot_ded_amt+pre21a.deduct_amt
                endif
            next i

            for i=1 to 20
                if v$="D" and pos(pre41a.contrib_code$=FIELD(prm10j$,"contrib_code_"+str(i:"00")),2)<>0 then
                        prt04a.tot_cont_amt=prt04a.tot_cont_amt+pre41a.contrib_amt
                endif
            next i


            write record (prt04_dev,key=prt04a.firm_id$+prt04a.union_code$+prt04a.empl_surname$+prt04a.empl_givname$+prt04a.employee_no$+prt04a.pay_end_date$) prt04a$
            return

Accrued_Payroll: rem --- Accrued Payroll

    account$=z1$
    when$=z9$
    precision p[3]
    anndol=pre11a.extended_amt*per
    annunt=pre11a.units*per
    daydol=anndol/365
    dayunt=annunt/365
    precision 2
    amount=p8*daydol
    units=p8*dayunt
    gosub glpost
    when$=z7$
    amount=-amount,units=-units
    gosub glpost
    account$=z2$
    amount=-amount,units=0
    gosub glpost
    when$=z9$
    amount=-amount,units=0
    gosub glpost
    return

dept: rem --- Department

    if v0$<>k2$ then 
        k2$=v0$
        dim z0$(g[4],"0"),s1$(g[4]*2,"0")
        find record (prm10e_dev,key=firm_id$+"E"+k2$,dom=*next) prm10e$
    endif
    if t9$="E" then return
    dim z1$(g[4],"0"),z2$(g[4],"0")
    v1=0
    z9$=p9$
    if prs01a.tax_acc_flag$="Y" then  z9$=p8$

action=pos(dpt$="ABCD")
switch (action)

case 0
        break
case 1

    	assign_1:
              	z2$=z4$
              	z9$=p8$,ref3$=pre11a.paycode$+" "+pre11a.title_code$+" "+pre11a.dept_code$
              	x=pos(pre11a.paycode$=prm10e.pay_code$,2)
                fl$=pre11a.record_id_a$
              	if x<>0 then 
                 	z1$=prm10e.gl_pay_acct$(int(x/2)*g[4]+1,g[4])
                 	if p8<>0 then gosub Accrued_Payroll
                	v1=pre11a.units
              	endif
		break
case 2
	find_1:

            	if pre21a.deduct_code$<>k5$ then 
                	k5$=pre21a.deduct_code$
                	prm10b.gl_account$=z1$
                	find record (prm10b_dev,key=firm_id$+"B"+k5$,dom=*next) prm10b$
            	endif
            	z2$=z4$
            	z1$=prm10b.gl_account$,ref3$="Deduct "+pre21a.deduct_code$
                fl$=pre21a.record_id_b$
            	break
case 3
	assign_2:

            	x=pos(pre31a.tax_code$=prm10e.tax_code$,2)
            	z2$=z4$,ref3$="Tax "+pre31a.tax_code$
            	if x<>0 then
                      z1$=FIELD(prm10e$,"gl_tax_acct_"+str(x:"00"))
		endif
                fl$=pre31a.record_id_c$
		break

case 4
	assign_3:
                x=pos(pre41a.contrib_code$=prm10e.contrib_code$,2)
                ref3$="Contrib "+pre41a.contrib_code$
                if x<>0 then 
                    z2$=FIELD(prm10e$,"gl_cont_acc_"+str(x:"00"))
                    z1$=FIELD(prm10e$,"gl_cont_exp_"+str(x:"00"))
                endif
                fl$=pre41a.record_id_d$
		break
	swend
		
assign_4:
    account$=z1$
    when$=z9$,amount=w[2]
rem    if pos(w0$(22,1)="BC")<>0 then  amount=-amount
    if pos(fl$="BC")<>0 then  amount=-amount
    gosub glpost
    account$=z2$
    amount=-amount,units=0
    gosub glpost
    return

check_hist: rem --- Check History

    x=pos(fl$+fl2$=u0$,3)
    if x<>0 then 
        x0=pos(u1$(x,3)=u2$,3)
        if x0<>0 then 
            x0=int((x0+2)/3)
            x=pos(u3$(x0*2-1,2)=u4$)
            if x<>0 then 
                x=int((x+1)/2)
                if x>0 and x<7 then goto assign_5
            endif
        endif
    endif
    x=7
assign_5:
    u[x]=u[x]+w[2]
    return

process_anniv: rem --- Anniversary Processing

    if p8$<=prm01a.anniv_date$ then return
rem    r1$(164,1)=fni$(fnyy_year(fndate$(r1$(164,1),r1$(164,3)))+1); rem "Increment anniversary year
    dt=num(prm01a.anniv_date$(1,4))+1
    dt$=str(dt)+prm01a.anniv_date$(5,4)

    prm01a.anniv_date$=dt$
    write record (prm01_dev,key=r0$) prm01a$

rem --- Roll Accruals

    precision p[3]
    dim y[11],z[4],y0$(14)
    read (prt01_dev,key=pre01a.firm_id$+pre01a.employee_no$+"A",dom=*next)
while more
    k$=key(prt01_dev,end=*break)
    if k$(1,12)<>pre01a.firm_id$+pre01a.employee_no$+"A" then break
    read record (prt01_dev,end=*break) prt01a$
    find record (prm10a_dev,key=firm_id$+"A"+y0$(13,2),dom=*continue) prm10a$
    if prm10a.calc_type$="N" then continue
    if prm10a.accr_basis$="C" then continue
    z[0]=z[0]+z[1]-z[4]
    z[1]=z[2],z[2]=0,z[4]=0
    write record (prt01_dev,key=k$) prt01a$
wend
    precision 2
    return

process_taxnded: rem --- Process Taxes & Contributions

    if prtx$="C" then
        dim y0$(48),y[17],z[0]
    else
        dim y0$(19),y[17],z[1]
    endif
rem    y0$(1,14)=b0$(1,11)+w0$(22,1)+w0$(25,2)
    prt01a.firm_id$=pre01a.firm_id$
    prt01a.employee_no$=pre01a.employee_no$
    prt01a.record_id_a$=prtx$
    prt01a.pay_code$=prtxcd$
    
    if prtx$="C" then
    q0=pre31a.taxable_amt
    q1=pre31a.tax_rate
    q2=pre31a.tax_amount
    q3=t0
    q7=0
    endif

    if prtx$="D" then
    q0=pre41a.basis
    q1=pre41a.rate
    q2=pre41a.contrib_amt
    q3=t0
    q7=0
    endif

    precision p[3]
    if prtx$="C" then extract record (prt21_dev,key=prt21a.firm_id$+prt21a.employee_no$+prt21a.record_id_c$+prt21a.tax_code$,dom=assign_6) prt21a$
    if prtx$="D" then extract record (prt31_dev,key=prt31a.firm_id$+prt31a.employee_no$+prt31a.record_id_d$+prt31a.contrib_code$,dom=*next) prt31a$
assign_6:
    precision 2
    if prtx$="C" then
        if p9$<=g9$ then
            prt21a.mtd_gross=prt21a.mtd_gross+t0
            prt21a.mtd_taxable=prt21a.mtd_taxable+pre31a.taxable_amt
            prt21a.mtx_tax=prt21a.mtx_tax+pre31a.tax_amount
        endif
        if p9$>g9$ then
            prt21a.nmtd_gross=prt21a.nmtd_gross+t0
            prt21a.nmtd_taxable=prt21a.nmtd_taxable+pre31a.taxable_amt
            prt21a.nmtd_tax=prt21a.nmtd_tax+pre31a.tax_amount
        endif
        if p9>0 then
            if p9=1 then
                prt21a.qtr_gross_01=prt21a.qtr_gross_01+t0
                prt21a.qtr_taxable_01=prt21a.qtr_taxable_01+pre31a.taxable_amt
                prt21a.quarter_tax_01=prt21a.quarter_tax_01+pre31a.tax_amount
            endif
            if p9=2 then
                prt21a.qtr_gross_02=prt21a.qtr_gross_02+t0
                prt21a.qtr_taxable_02=prt21a.qtr_taxable_02+pre31a.taxable_amt
                prt21a.quarter_tax_02=prt21a.quarter_tax_02+pre31a.tax_amount
            endif
            if p9=3 then
                prt21a.qtr_gross_03=prt21a.qtr_gross_03+t0
                prt21a.qtr_taxable_03=prt21a.qtr_taxable_03+pre31a.taxable_amt
                prt21a.quarter_tax_03=prt21a.quarter_tax_03+pre31a.tax_amount
            endif
            if p9=4 then
                prt21a.qtr_gross_04=prt21a.qtr_gross_04+t0
                prt21a.qtr_taxable_04=prt21a.qtr_taxable_04+pre31a.taxable_amt
                prt21a.quarter_tax_04=prt21a.quarter_tax_04+pre31a.tax_amount
            endif
        endif
    endif

    if prtx$="D" then
        if p9$<=g9$ then
            prt31a.mtd_gross=prt31a.mtd_gross+t0
            prt31a.mtd_basis=prt31a.mtd_basis+pre41a.basis
            prt31a.mtd_amount=prt31a.mtd_amount+pre41a.contrib_amt
        endif
        if p9$>g9$ then
            prt31a.nmtd_gross=prt31a.nmtd_gross+t0
            prt31a.nmtd_basis=prt31a.nmtd_basis+pre41a.basis
            prt31a.nmtd_amt=prt31a.nmtd_amt+pre41a.contrib_amt
        endif
        if p9>0 then
            if p9=1 then
                prt31a.qtr_gross_01=prt31a.qtr_gross_01+t0
                prt31a.qtr_basis_01=prt31a.qtr_basis_01+pre41a.basis
                prt31a.qtr_contrib_01=prt31a.qtr_contrib_01+pre41a.contrib_amt
            endif
            if p9=2 then
                prt31a.qtr_gross_02=prt31a.qtr_gross_02+t0
                prt31a.qtr_basis_02=prt31a.qtr_basis_02+pre41a.basis
                prt31a.qtr_contrib_02=prt31a.qtr_contrib_02+pre41a.contrib_amt
            endif
            if p9=3 then
                prt31a.qtr_gross_03=prt31a.qtr_gross_03+t0
                prt31a.qtr_basis_03=prt31a.qtr_basis_03+pre41a.basis
                prt31a.qtr_contrib_03=prt31a.qtr_contrib_03+pre41a.contrib_amt
            endif
            if p9=4 then
                prt31a.qtr_gross_04=prt31a.qtr_gross_04+t0
                prt31a.qtr_basis_04=prt31a.qtr_basis_04+pre41a.basis
                prt31a.qtr_contrib_04=prt31a.qtr_contrib_04+pre41a.contrib_amt
            endif
        endif
    endif

    precision p[3]
    if prtx$="C" then
        write record (prt21_dev,key=prt21a.firm_id$+prt21a.employee_no$+prt21a.record_id_c$+prt21a.tax_code$) prt21a$
    endif
    if prtx$="D" then
        write record (prt31_dev,key=prt31a.firm_id$+prt31a.employee_no$+prt31a.record_id_d$+prt31a.contrib_code$) prt31a$
    endif

    precision 2
    v$=prtx$
    gosub union_hist
    if prtx$="C" then  t2=t2+pre31a.tax_amount
    if q3=0 then  q9$=""
    if q9$="" then
        q9$=prm01a.dept_code$
        if prtx$="C" then
            q[0]=pre31a.tax_amount
            q3=pre31a.tax_amount
        endif
        if prtx$="D" then
            q[0]=pre41a.contrib_amt
            q3=pre41a.contrib_amt
        endif
    endif
    for q9=1 to len(q9$) step 2
        v0$=q9$(q9,2)
        q4=0
        if q3<>0 then  q4=q[int(q9/2)]*100/q3
        if q0*q4<>0 then  w[0]=q0*q4/100
        if q1*q4<>0 then  w[1]=q1*q4/100
        if q2*q4<>0 then  w[2]=q2*q4/100
        if q9+2>len(q9$) then if q7+w[2]<>q2 then  w[2]=q2-q7
        q7=q7+w[2]
        gosub dept
    next q9
    return

rem --- Standard G/L Posting Routine
glpost:
    if gl$="Y" then 
        call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,glt14_dev,account$,when$,ref1$,ref2$,ref3$,memo$,amount,units,status
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")
    def fni$(q)=chr(q+32)

rem " --- Un-Convert 21st Century 2-Char Year to 2-Char Year"
    def fnyy21_yy$(q1$)
    let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
    fnend


rem " --- Convert 2-Char Year to 21st Century Numeric Year"
    def fnyy_year(q$)
    let q=num(fnyy21_yy$(q1$)),q9=10,q9=num(STBL("+Y2K_UPPER_LIMIT",err=*next),err=*next)
    if q<q9 then let q=q+100
    return q
    fnend



rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
