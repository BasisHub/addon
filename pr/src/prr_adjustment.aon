rem --- Deduction/Tax/Contrib/Accrual Report
rem --- Program prr_adjustment.aon v8.0.0 10Jun2008 (prr_ba)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/10/2008 10:10:07)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]

    files$[1]="pre-01",ids$[1]="PRE_PAYROLL"
    files$[2]="pre-21",ids$[2]="PRE_PAYDDCT"
    files$[3]="pre-31",ids$[3]="PRE_PAYTAX"
    files$[4]="pre-41",ids$[4]="PRE_PAYCONT"
    files$[5]="pre-51",ids$[5]="PRE_PAYACCRL"
    files$[6]="prm-01",ids$[6]="PRM_EMPLMAST"
    files$[7]="prc_paycode",ids$[7]="PRC_PAYCODE"
    files$[8]="prc_ddctcode",ids$[8]="PRC_DDCTCODE"
    files$[9]="prc_taxcode",ids$[9]="PRC_TAXCODE"
    files$[10]="prc_contcode",ids$[10]="PRC_CONTCODE"
    files$[11]="prc_deptcode",ids$[11]="PRC_DEPTCODE"
    files$[12]="prc_rprtcode",ids$[12]="PRC_RPRTCODE"
    files$[13]="prs_params",ids$[13]="PRS_PARAMS"
    files$[14]="prs_period",ids$[14]="PRS_PERIOD"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    pre01a_dev=channels[1]
    pre21a_dev=channels[2]
    pre31a_dev=channels[3]
    pre41a_dev=channels[4]
    pre51a_dev=channels[5]
    prm01a_dev=channels[6]
    prm10a_dev=channels[7]
    prm10b_dev=channels[8]
    prm10c_dev=channels[9]
    prm10d_dev=channels[10]
    prm10e_dev=channels[11]
    prm10h_dev=channels[12]
    prs01a_dev=channels[13]
    prs01b_dev=channels[14]

rem --- Dimension string templates

    dim pre01a$:templates$[1],pre21a$:templates$[2],pre31a$:templates$[3],
:       pre41a$:templates$[4],pre51a$:templates$[5],prm01a$:templates$[6],
:       prm10a$:templates$[7],prm10b$:templates$[8],prm10c$:templates$[9],
:       prm10d$:templates$[10],prm10e$:templates$[11],prm10h$:templates$[12],
:       prs01a$:templates$[13],prs01b$:templates$[14]

rem --- Assign form input values to local variables

    selection$=Option!.getOptionData("report_option")

rem --- Retrieve parameter records

    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$
    prs01b_key$=firm_id$+"PR01"
    find record (prs01b_dev,key=prs01b_key$,err=std_missing_params) prs01b$

rem --- Parameters

    dim p[4]
    h4$="Pay Period Ending "+fndate$(prs01b.pay_end_date$)
    p[0]=num(prs01a.empl_no_len$)
    p[1]=num(prs01a.max_empl_no$)
    p[3]=num(prs01a.dept_size$)

initializations: rem --- Initializations

    h0=131
    h=0,headings=3,when$=sysinfo.system_date$,clock$=""
    dim headings$[headings],head$[10]
    headings$[0]=sysinfo.firm_name$
    headings$[2]=h4$
    more=1, line=0

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYROLL","PRIMARY",pre01_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_RPRTCODE","PRIMARY",prm10h_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYDDCT","PRIMARY",pre21_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYTAX","PRIMARY",pre31_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYCONT","PRIMARY",pre41_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYACCRL","PRIMARY",pre51_key_tpl$,rd_table_chans$[all],status$

rem --- Report initializations

    if selection$="D" then  
        entry_dev=pre21a_dev
        prm10_dev=prm10b_dev
        rpt_type$="B",recid$="B"
        headings$[1]="Payroll Deduction Report"
        dim entry_tmpl$:templates$[2],prm10_tmpl$:templates$[8],entry_key$:pre21_key_tpl$
    endif
    if selection$="T" then
        entry_dev=pre31a_dev
        prm10_dev=prm10c_dev
        rpt_type$="C",recid$="C"
        headings$[1]="Payroll Tax Report"
        dim entry_tmpl$:templates$[3],prm10_tmpl$:templates$[9],entry_key$:pre31_key_tpl$
    endif
    if selection$="C" then
        entry_dev=pre41a_dev
        prm10_dev=prm10d_dev
        rpt_type$="D",recid$="D"
        headings$[1]="Payroll Contribution Report"
        dim entry_tmpl$:templates$[4],prm10_tmpl$:templates$[10],entry_key$:pre41_key_tpl$
    endif
    if selection$="A" then 
        entry_dev=pre51a_dev
        prm10_dev=prm10a_dev
        rpt_type$="E",recid$="A"
        headings$[1]="Payroll Accrual Report"
        dim entry_tmpl$:templates$[5],prm10_tmpl$:templates$[7],entry_key$:pre51_key_tpl$
    endif

rem --- Get the fieldnames from entry_tmpl$; code$ = pay_code or contrib_code or distrib_code or tax_code
:                                            amount= accr_uamt or contrib_amt or distrib_amt or tax_amount

    fields$=fattr(entry_tmpl$,"")
    code$=fields$(pos("pr_entry_seq"=cvs(fields$,8)))
    code$=code$(pos($0A$=code$)+1)
    code$=code$(1,pos($0A$=code$)-1)

    amount$=fields$(1,pos($0A$=fields$,-1)-1)
    amount$=amount$(pos($0A$=amount$,-1)+1)

rem --- Build Headings

    dim t[7],r[7],x[7]
    t0$="",t9$=""
	call stbl("+DIR_PGM")+"adc_getmask.aon","","PR","A","",m1$,0,m1
	call stbl("+DIR_PGM")+"adc_getmask.aon","","PR","I","",m0$,0,0
    p[4]=num(prs01a.precision$)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    call pgmdir$+"adc_progress.aon","CN",sysinfo.task_desc$,"","Printing","",len(m0$),pre01a_dev,1,0,ignore_status
    

    u0$=""
    cnt=1
    dim prm10h_key$:prm10h_key_tpl$
    read (prm10h_dev,key=firm_id$+"H"+rpt_type$,dom=*next)
    while more
        prm10h_key$=key(prm10h_dev,end=*break)
        if prm10h_key.firm_id$+prm10h_key.record_id_h$+prm10h_key.report_type$<>firm_id$+"H"+rpt_type$ then break
        read record (prm10h_dev) prm10h$
        u0$=u0$+prm10h.report_code$
        head$[cnt]=prm10h.pr_rpt_title$
        cnt=cnt+1
    wend
    if cnt>7 then cnt=7

rem --- Column Headings

    dim columns$[cnt+1,10]
    columns = cnt+2
    columns$[0,0]="Employee No & Name", columns$[0,1]="C",columns$[0,2]="20"
    for i=1 to cnt-1
        columns$[i,0]=head$[i],         columns$[i,1]="N",columns$[i,2]="10",columns$[i,3]=m1$,columns$[i,10]="T"
    next i
    if selection$="T" x$=" Other Tax" else x$="Other"
    columns$[cnt,0]=x$,                 columns$[cnt,1]="N",columns$[cnt,2]="10",columns$[cnt,3]=m1$,columns$[cnt,10]="T"
    columns$[cnt+1,0]="Total",          columns$[cnt+1,1]="N",columns$[cnt+1,2]="10",columns$[cnt+1,3]=m1$,columns$[cnt+1,10]="T"
    

rem --- Init Read

    precision p[4]
    read (pre01a_dev,key=firm_id$,dom=*next)
    dim pre01a_key$:pre01_key_tpl$

rem --- Main Read

    while more
        pre01a_key$=key(pre01a_dev,end=*break)
        if pre01a_key.firm_id$<>firm_id$ break
        read record (pre01a_dev) pre01a$
        if len(pre01a_key$)>21 then continue
        call pgmdir$+"adc_progress.aon","S","","","",fnmask$(pre01a.employee_no$,m0$),0,0,1,0,ignore_status

rem --- Get Name

        x1$="Not On File"
        find record (prm01a_dev,key=pre01a.firm_id$+pre01a.employee_no$,dom=detail_read) prm01a$
        q=pos("  "=prm01a.empl_surname$)-1
        if q<1 then q=16
        x1$=prm01a.empl_surname$(1,q)+", "+prm01a.empl_givname$(1,1)+"."

detail_read: rem --- Breaks

        if pre01a.employee_no$(1,p[3])<>t0$ gosub dept_break

rem --- Detail

        read (entry_dev,key=pre01a_key$+recid$,dom=*next)
        dim x[7]
        while more
            entry_key$=key(entry_dev,end=*break)
            if entry_key.firm_id$+entry_key.employee_no$+entry_key.check_type$+entry_key.sequence_num$+entry_key.check_no$<>pre01a_key$ then break
            record_id$="record_id_"+recid$
            if field(entry_key$,record_id$)<>rpt_type$ read (entry_dev,key=pre01a_key$+"Z",dom=*break)
            read record (entry_dev) entry_tmpl$
            code_value$=field(entry_tmpl$,code$)
            amount=nfield(entry_tmpl$,amount$)
            find record (prm10_dev,key=firm_id$+recid$+code_value$,dom=*continue) prm10_tmpl$
            if selection$="C" then x=pos(prm10_tmpl.check_code$=u0$,2) else x=pos(prm10_tmpl.report_code$=u0$,2)
            if x>0 x=int(x/2)+1
            if x>6 x=0
            x[x]=x[x]+amount
            t[x]=t[x]+amount
            r[x]=r[x]+amount
            x[7]=x[7]+amount
            t[7]=t[7]+amount
            r[7]=r[7]+amount
        wend

rem --- Print

        for f=0 to 7
            if x[f]<>0 exitto notzero
        next f
        continue
notzero:
    OutVect!.addItem(fnmask$(pre01a.employee_no$,m0$)+"   "+x1$)
    for f=1 to cnt-1
        if x[f]<>0 then OutVect!.addItem(str(x[f])) else OutVect!.addItem("")
    next f
    if x[0]<>0 then OutVect!.addItem(str(x[0])) else OutVect!.addItem("")
    OutVect!.addItem(str(x[7]))
wend

rem --- Totals

    t9$="E"
    gosub dept_break
    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns)))
    OutVect!.addItem("    Grand Totals:")
    for f=1 to cnt-1
        OutVect!.addItem(str(t[f]))
    next f
    OutVect!.addItem(str(t[0]))
    OutVect!.addItem(str(t[7]))
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    goto std_exit


sub_heading:rem --- Sub Heading

    if p[3]=0 return
    xwk=fnblank(columns)
    OutVect!.addItem(t0$+" "+h3$)
    xwk=fnblank(columns-1)
    xwk=fnblank(columns)
    return

dept_break: rem --- Dept Break

    if t0$<>"" and p[3]<>0 then
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem("    Dept Totals:")
        for f=1 to cnt-1
            OutVect!.addItem(str(r[f]))
        next f
        OutVect!.addItem(str(r[0]))
        OutVect!.addItem(str(r[7]))
    endif
    
    if t9$="E" return
    dim r[7]
    t0$=pre01a.employee_no$(1,p[3])
    if p[3]=0 return
    h3$=""
    find record (prm10e_dev,key=firm_id$+"E"+prm01a.dept_code$,dom=print_subhead) prm10e$
    h3$=prm10e.code_desc$
print_subhead:
    gosub sub_heading
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
