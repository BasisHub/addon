rem --- Department Maintenance Listing
rem --- Program prm_ee v8.0.0 02Jun2008 (prm_ee)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/02/2008 05:06:27)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=8,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]="prc_paycode",ids$[2]="PRC_PAYCODE"
    files$[3]="prc_taxcode",ids$[3]="PRC_TAXCODE"
    files$[4]="prc_contcode",ids$[4]="PRC_CONTCODE"
    files$[5]="prc_deptcode",ids$[5]="PRC_DEPTCODE"
    files$[6]="prs_params",ids$[6]="PRS_PARAMS"
    files$[7]="gls_params",ids$[7]="GLS_PARAMS"
    files$[8]="prc_ddctcode",ids$[8]="PRC_DDCTCODE"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01a_dev=channels[1]
    prm10a_dev=channels[2]
    prm10c_dev=channels[3]
    prm10d_dev=channels[4]
    prm10e_dev=channels[5]
    prs01a_dev=channels[6]
    gls01a_dev=channels[7]
    prm10b_dev=channels[8]

rem --- Dimension string templates

    dim glm01a$:templates$[1],prm10a$:templates$[2],prm10c$:templates$[3],
:       prm10d$:templates$[4],prm10e$:templates$[5],prs01a$:templates$[6],
:       gls01a$:templates$[7],prm10b$:templates$[8]
:       glm01a1$:templates$[1]
rem ,glmo1a2$:templates$[1],glmo1a3$:templates$[1]

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$

    dim p[1],g[4]

    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_per$)
    g[2]=num(gls01a.current_year$)
    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,acct_length
    g[3]=acct_length
    g[4]=max(10,g[3])

    call stbl("+DIR_PGM")+"adc_getmask.aon","EMPLOYEE_NO","","","",m0$,0,empl_no_len
    p[0]=empl_no_len
    p[1]=num(prs01a.max_empl_no$)


rem --- Open/Lock Files

    precision num(prs01a.precision$)

    dim info$[20]
    call pgmdir$+"adc_application.aon","PR",info$[all]
    gl$=info$[9]

    n1$=sysinfo.firm_name$,n2$="PR",n4$=sysinfo.task_desc$

rem --- Initializations

    l9=55
    l=l9+1,headings=2,width=132,page=0,when$=sysinfo.system_date$,clock$=""
    l=2
    dim headings$[headings]
    headings$[0]=n1$
    headings$[1]=n4$+" Listing"
    t0=0
    more=1

    dim columns$[4,10]
    columns = 5
    columns$[0,0]="Department",                                     columns$[0,1]="C",columns$[0,2]="13"
    columns$[1,0]="Cash Account ^Accrual Account",                  columns$[1,1]="C",columns$[1,2]="20"
    columns$[2,0]="Pay Codes ^Tax Codes ^Contribution Codes",       columns$[2,1]="C",columns$[2,2]="20"
    columns$[3,0]="Budget Hrs ^Budget Rate",                        columns$[3,1]="N",columns$[3,2]="10"
    columns$[4,0]="GL Expense Account       GL Accrual Account",    columns$[4,1]="C",columns$[4,2]="60"



rem retrieve template for FILE record key
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_DEPTCODE","PRIMARY",prm10e_key_tpl$,table_chans$[all],status$
    dim prm10e_key$:prm10e_key_tpl$



rem --- Display Resource

    call pgmdir$+"adc_getmask.aon","","PR","A","",m1$,0,m1

    call pgmdir$+"adc_progress.aon","N","","","","",0,prm10e_dev,1,meter_num,status
    
rem --- Initial Read

    read (prm10e_dev,key=firm_id$+"E",dom=*next)

rem --- Main Read
    while more
        prm10e_key$=key(prm10e_dev,end=*break)
        if pos(firm_id$+"E"=prm10e_key$)<>1 then break
        read record (prm10e_dev) prm10e$

rem --- Breaks

        if prm10e.firm_id$+prm10e.record_id_e$<>firm_id$+"E" then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        
rem --- GL Description

        if gl$="Y" then find record (glm01a_dev,key=firm_id$+prm10e.gl_cash_acct$,dom=*next) glm01a$
        if gl$="Y" then find record (glm01a_dev,key=firm_id$+prm10e.gl_accr_acct$,dom=*next) glm01a1$
        
rem --- Print

        OutVect!.addItem(prm10e.dept_code$+" "+prm10e.code_desc$)
        if gl$="Y" then
            OutVect!.addItem(fnmask$(prm10e.gl_cash_acct$,gls01a.acct_output$)+" "+cvs(glm01a.gl_acct_desc$,2))
            xwk=fnblank(1)
        else
            xwk=fnblank(2)
        endif
        OutVect!.addItem(str(prm10e.budget_hrs:m1$))
        xwk=fnblank(1)
        if gl$="Y" then
            xwk=fnblank(1)
            OutVect!.addItem(fnmask$(prm10e.gl_accr_acct$,gls01a.acct_output$)+" "+cvs(glm01a1.gl_acct_desc$,2))
            xwk=fnblank(1)
        else
            xwk=fnblank(2)
        endif
        OutVect!.addItem(str(prm10e.bud_hr_cost:m1$))
        xwk=fnblank(1)

        l=l+2
        t0=t0+1

rem --- Pay Codes - 1

        v0=pos("  "=prm10e.pay_code_01$,2)
        if v0=0 and len(prm10e.pay_code_01$)>0 then v0=len(prm10e.pay_code_01$)+1
        if v0>1 then
            v0=12
            for x=1 to v0-2
                if l+1>l9 then gosub overflow
                v2$=FIELD(prm10e$,"pay_code_"+str(x:"00"))

                find record (prm10a_dev,key=firm_id$+"A"+v2$,dom=*next) prm10a$

                if gl$="Y" then
                    find record (glm01a_dev,key=firm_id$+FIELD(prm10e$,"gl_pay_acct_"+str(x:"00")),dom=*next) glm01a$
                endif

                xwk=fnblank(2)
                OutVect!.addItem(v2$+" "+prm10a.pr_code_desc$)
                xwk=fnblank(1)

                if gl$="Y" then 
                    OutVect!.addItem(fnmask$(FIELD(prm10e$,"gl_pay_acct_"+str(x:"00")),gls01a.acct_output$)+" "+cvs(glm01a.gl_acct_desc$,2))
                else 
                    xwk=fnblank(1)
                endif    
                l=l+1
            next x

            if l+1<=l9 then 
                xwk=fnblank(5)
                l=l+1
            endif    
        endif

rem --- Tax Codes - 2

        v0=pos("  "=prm10e.tax_code_01$,2)
        if v0=0 and len(prm10e.tax_code_01$)>0 then v0=len(prm10e.tax_code_01$)+1
        if v0>1 then
            v0=9
            for x=1 to v0-1 
                if l+1>l9 then gosub overflow
                v2$=FIELD(prm10e$,"tax_code_"+str(x:"00"))

                find record (prm10c_dev,key=firm_id$+"C"+v2$,dom=*next) prm10c$

                if gl$="Y" then find record (glm01a_dev,key=firm_id$+FIELD(prm10e$,"gl_tax_acct_"+str(x:"00")),dom=*next) glm01a$

                xwk=fnblank(2)
                OutVect!.addItem(v2$+" "+prm10c.pr_code_desc$)
                xwk=fnblank(1)
                if gl$="Y" then 
                    OutVect!.addItem(fnmask$(FIELD(prm10e$,"gl_tax_acct_"+str(x:"00")),gls01a.acct_output$)+" "+cvs(glm01a.gl_acct_desc$,2))
                else 
                    xwk=fnblank(1)
                endif
                l=l+1
            next x
            if l+1<=l9 then
                xwk=fnblank(5)
                let l=l+1
            endif
        endif

rem --- Contribution Codes - 3


        v0=pos("  "=prm10e.contrib_code_01$,2)
        if v0=0 and len(prm10e.contrib_code_01$)>0 then v0=len(prm10e.contrib_code_01$)+1

        if v0>1 then
            v0=9
            for x=1 to v0-1
                if l+1>l9 then gosub overflow
                v2$=FIELD(prm10e$,"contrib_code_"+str(x:"00"))
                find record (prm10d_dev,key=firm_id$+"D"+v2$,dom=*next) prm10d$

                if gl$="Y" then find record (glm01a_dev,key=firm_id$+FIELD(prm10e$,"gl_cont_exp_"+str(x:"00")),dom=*next) glm01a$
                if gl$="Y" then find record (glm01a_dev,key=firm_id$+FIELD(prm10e$,"gl_cont_acc_"+str(x:"00")),dom=*next) glm01a1$

                xwk=fnblank(2)
                OutVect!.addItem(v2$+" "+prm10d.pr_code_desc$)
                xwk=fnblank(1)

                if gl$="Y" then 
                    OutVect!.addItem(fnmask$(FIELD(prm10e$,"gl_cont_exp_"+str(x:"00")),gls01a.acct_output$)+" "+cvs(glm01a.gl_acct_desc$,2)+" - "+
:                                   fnmask$(FIELD(prm10e$,"gl_cont_acc_"+str(x:"00")),gls01a.acct_output$)+" "+cvs(glm01a1.gl_acct_desc$,2))
                else 
                    xwk=fnblank(1)
                endif
                l=l+1
            next x
            if l+1<=l9 then
                xwk=fnblank(5)
                l=l+1
            endif
        endif
        read (prm10e_dev,key=prm10e_key$)
    wend

done: rem --- Options

    xwk=fnblank(5)
    xwk=fnblank(1)
    TotVect!.addItem(str(OutVect!.size()/(columns)))
    OutVect!.addItem("Total Records :  "+str(t0))
    xwk=fnblank(3)
    l=l+2
    goto std_exit

overflow: rem --- Overflow

    l=l+2
    l=headings+1

    OutVect!.addItem(prm10e.dept_code$+" "+prm10e.code_desc$)
    OutVect!.addItem("*CONTINUED*")
    xwk=fnblank(3)
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status  
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
