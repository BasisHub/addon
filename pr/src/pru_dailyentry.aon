rem --- Daily Entry Update
rem --- Program pru_dailyentry.aon v8.0.0 03Jun2008 (pru_fa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/03/2008 09:44:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGm",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=6,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="pre-01",ids$[1]="PRE_PAYROLL"
        files$[2]="pre-02",ids$[2]="PRE_DAYTIME"
        files$[3]="pre-11",ids$[3]="PRE_PAYEARNG"
        files$[4]="prm-01",ids$[4]="PRM_EMPLMAST"
        files$[5]="prc_paycode",ids$[5]="PRC_PAYCODE"
        files$[6]="prs_params",ids$[6]="PRS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        pre01_dev=channels[1]
        pre02_dev=channels[2]
        pre11_dev=channels[3]
        prm01_dev=channels[4]
        prm10_dev=channels[5]
        prs01a_dev=channels[6]

rem --- Dimension string templates

        dim pre01a$:templates$[1],pre02a$:templates$[2],pre11a$:templates$[3],
:       prm01a$:templates$[4],prm10a$:templates$[5],prs01a$:templates$[6]

rem --- Retrieve parameter records

        prs01a_key$=firm_id$+"PR00"
        find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$

rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="PR",n3$=sysinfo.task_desc$
        dim p[3]
        p[0]=num(prs01a.empl_no_len$)
        p[3]=num(prs01a.precision$)

rem --- Initializations

        more=1
        precision p[3]
        dim j1$(40," ")
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

rem --- Options

        msg_id$="AON_UPDT_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message
        if msg_opt$<>"Y" then goto std_exit
       
        call pgmdir$+"adc_progress.aon","N","","","","",0,pre02_dev,1,meter_num,status

rem --- Init Read

        read (pre02_dev,key=firm_id$,dom=*next)

rem --- Main Read

        while more

            read record (pre02_dev,end=*break) pre02a$
            if pre02a.firm_id$<>firm_id$ then break
            if through_date$<>"" and pre02a.trans_date$>through_date$ then continue
              
rem --- Breaks

            if pre02a.firm_id$+pre02a.employee_no$<>t0$ then gosub employee_break
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Create Detail

            pre11a.firm_id$=pre02a.firm_id$
            pre11a.employee_no$=pre02a.employee_no$
            pre11a.check_type$="C"
            pre11a.sequence_num$="01"
            pre11a.check_no$=j1$(1,7)
            pre11a.record_id_a$="A"
            pre11a.pr_entry_seq$=pre02a.pr_time_seq$(2,2)
            pre11a.pay_code$=pre02a.pay_code$
            pre11a.title_code$=pre02a.title_code$
            pre11a.dept_code$=pre02a.dept_code$
            pre11a.reserved_str$=j1$(1,4)

            pre11a.pr_job_no$=pre02a.pr_job_no$
            pre11a.rate=pre02a.rate
            pre11a.units=pre02a.units
            pre11a.extended_amt=pre02a.extended_amt
            pre11a.base_rate=pre11a.rate

            precision 2
            pre11a.extended_amt=pre02a.rate*pre02a.units*1
            precision p[3]
            find record (prm10_dev,key=firm_id$+"A"+pre02a.pay_code$,dom=label_two) prm10a$
            if prm10a.prem_factor<>0 pre11a.base_rate=pre11a.rate/prm10a.prem_factor; rem "Regular portion of OT pay

            while more
label_two:
                    write record (pre11_dev,key=pre11a.firm_id$+pre11a.employee_no$+pre11a.check_type$+pre11a.sequence_num$+pre11a.check_no$+pre11a.record_id_a$+pre11a.pr_entry_seq$,dom=increment) pre11a$
                    break

increment: rem --- Increment

                    prm10a.calc_rtamt=num(pre11a.pr_entry_seq$)+1
                    if prm10a.calc_rtamt>99 then let prm10a.calc_rtamt=1
                    pre11a.pr_entry_seq$=str(prm10a.calc_rtamt:"00")
                    continue
            wend

remove_rec: rem --- Remove

            remove (pre02_dev,key=pre02a.firm_id$+pre02a.employee_no$+pre02a.pr_time_seq$)
        wend

done: rem --- Done

            goto std_exit

employee_break: rem --- Employee Break


            t0$=pre02a.firm_id$+pre02a.employee_no$
            find record (prm01_dev,key=t0$,dom=*next) prm01a$

            pre01a.firm_id$=pre02a.firm_id$
            pre01a.employee_no$=pre02a.employee_no$
            pre01a.check_type$="C"
            pre01a.sequence_num$="01"
            pre01a.check_no$=j1$(1,10)
            pre01a.pay_period$=prm01a.pay_period$
            pre01a.comp_chk_no$=j1$(1,7)

            write record (pre01_dev,key=pre01a.firm_id$+pre01a.employee_no$+pre01a.check_type$+pre01a.sequence_num$+pre01a.check_no$,dom=*next) pre01a$
            return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")
    def fndate$(q$)
        if cvs(q$,2)="" return ""
        if pos("9"<>q$)=0 return q$
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        return testdate$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
