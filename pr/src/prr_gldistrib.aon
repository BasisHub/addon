rem --- G/L Distribution Report
rem --- Program prr_gldistrib.aon v8.0.0 17Jun2008 (prr_ta)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/17/2008 10:18:13)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="pre-01",ids$[2]="PRE_PAYROLL"
    files$[3]="pre-11",ids$[3]="PRE_PAYEARNG"
    files$[4]="pre-21",ids$[4]="PRE_PAYDDCT"
    files$[5]="pre-31",ids$[5]="PRE_PAYTAX"
    files$[6]="pre-41",ids$[6]="PRE_PAYCONT"
    files$[7]="prm-01",ids$[7]="PRM_EMPLMAST"
    files$[8]="prc_paycode",ids$[8]="PRC_PAYCODE"
    files$[9]="prc_ddctcode",ids$[9]="PRC_DDCTCODE"
    files$[10]="prc_deptcode",ids$[10]="PRC_DEPTCODE"
    files$[11]="prs_params",ids$[11]="PRS_PARAMS"
    files$[12]="prs_period",ids$[12]="PRS_PERIOD"
    call pgmdir$+"adc_fileopen.aon",action,begfile,12,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    
    gls01a_dev=channels[1]
    pre01a_dev=channels[2]
    pre11a_dev=channels[3]
    pre21a_dev=channels[4]
    pre31a_dev=channels[5]
    pre41a_dev=channels[6]
    prm01a_dev=channels[7]
    prm10a_dev=channels[8]
    prm10b_dev=channels[9]
    prm10e_dev=channels[10]
    prs01a_dev=channels[11]
    prs01b_dev=channels[12]

rem --- Dimension string templates

    dim gls01a$:templates$[1],pre01a$:templates$[2],pre11a$:templates$[3],
:       pre21a$:templates$[4],pre31a$:templates$[5],pre41a$:templates$[6],
:       prm01a$:templates$[7],prm10a$:templates$[8],prm10b$:templates$[9],
:       prm10e$:templates$[10],prs01a$:templates$[11],prs01b$:templates$[12]

rem --- Assign form input values to local variables

    check_date$=Option!.getOptionData("check_date")

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$
    prs01b_key$=firm_id$+"PR01"
    find record (prs01b_dev,key=prs01b_key$,err=std_missing_params) prs01b$

rem --- Parameters

    dim p[6],g[4]
    n2$="PR",source$=pgm(-2)
    h0=132,h=0
    dim info$[20]
    call pgmdir$+"adc_application.aon","GL",info$[all]
    if info$[20]<>"Y" 
rem --- No GL Installed
        dim mess$[1]
        let mess$[0]="GL Must Be Installed To Run This Report. <Enter> To Continue."
        call pgmdir$+"adc_stdmessage.aon",2,mess$[all],0,22,-1,v$,v3
        goto std_exit
    endif

    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_per$)
    g[2]=num(gls01a.current_year$)
    g[3]=num(gls01a.acct_length$)

    p[0]=num(prs01a.empl_no_len$)
    p[1]=num(prs01a.max_empl_no$)
    p[3]=num(prs01a.dept_size$)
    p[5]=num(prs01a.current_per$)
    p[6]=num(prs01a.current_year$)

    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status<>0 goto std_exit

    files$[13]="glm-01",ids$[13]="GLM_ACCT"
    files$[14]=glw11$,ids$[14]="GLW_DAILYDETAIL",options$[13]="C"
    call pgmdir$+"adc_fileopen.aon",action,13,14,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01a_dev=channels[13],glw11_dev=channels[14]
    dim glm01a$:templates$[13],glw11a$:templates$[14]

initializations: rem --- Initializations

    dim headings$[3],channels[3],channels$[2],info$[20],info[20]
    page=0
    more=1
    width=132,headings=3,errors=0,gldate$=prs01b.pay_end_date$
    m0$=prs01a.empl_output$
    m0=len(m0$)
    units=0,ref3$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]="Pay Period Ending "+fndate$(gldate$)
    channels[0]=glm01a_dev
    channels[1]=glw11_dev
    channels[2]=prm10b_dev
    channels[3]=prm10e_dev
    channels$[0]=templates$[9]
    channels$[1]=templates$[10]
    info[0]=g[4]
    info[1]=num(prs01b.accrual_days$)
    info$[2]=prs01a.tax_acc_flag$
    info$[3]=prs01b.pay_end_date$
    info$[4]=check_date$
    if cvs(info$[4],3)="" then info$[4]=info$[3]
    gosub get_dates; let info$[8]=end$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYROLL","PRIMARY",pre01_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYEARNG","PRIMARY",pre11_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYDDCT","PRIMARY",pre21_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYTAX","PRIMARY",pre31_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_PAYCONT","PRIMARY",pre41_key_tpl$,rd_table_chans$[all],status$
    
rem --- File Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","CN",sysinfo.task_desc$,"","Sorting","",m0,pre01a_dev,1,0,ignore_status

rem --- Position File

    read (pre01a_dev,key=firm_id$,dom=*next)

rem --- Read next pre-01 header
    
    dim pre01a_key$:pre01_key_tpl$
    dim pre11a_key$:pre11_key_tpl$
    dim pre21a_key$:pre21_key_tpl$
    dim pre31a_key$:pre31_key_tpl$
    dim pre41a_key$:pre41_key_tpl$
    
    while more
        pre01a_key$=key(pre01a_dev,end=done)
        if pre01a_key.firm_id$<>firm_id$ then break
        read record (pre01a_dev) pre01a$
        call pgmdir$+"adc_progress.aon","S","","","",fnmask$(pre01a.employee_no$,m0$),0,pre01a_dev,1,0,ignore_status

rem --- Employee break?

        if pre01a.employee_no$<>t0$ gosub empl_break

rem --- Perform G/L Initializations

        t0=0,t1=0,t2=0,info$[0]=fnmask$(pre01a.employee_no$,m0$)
        info$[1]=memo$
        info$[5]=pre01a$,info$[6]=s0$
        call pgmdir$+"prc_genglposting.aon",0,channels[all],info$[all],info[all],channels$[all]

rem --- Read Payroll detail
rem --- Earnings

        read (pre11a_dev,key=pre01a_key$,dom=*next)
        while more
            pre11a_key$=key(pre11a_dev,end=*break)
            if pos(pre01a_key$=pre11a_key$)<>1 then break
            read record (pre11a_dev) pre11a$
            info$[5]=pre11a_key$+pre11a.pay_code$+pre11a.title_code$+pre11a.dept_code$+pre11a.reserved_str$
            info$[6]=pre11a.dept_code$
            info[2]=pre11a.extended_amt,info[3]=pre11a.units
            find record (prm10a_dev,key=firm_id$+"A"+pre11a.pay_code$,dom=*next) prm10a$
            if pos(prm10a.productive$="AC")=0 info[3]=0
            call pgmdir$+"prc_genglposting.aon",2,channels[all],info$[all],info[all],channels$[all]
            v0$=pre11a.dept_code$
            gosub accumulate_dept
        wend

rem --- Deductions

        read (pre21a_dev,key=pre01a_key$,dom=*next)
        while more
            pre21a_key$=key(pre21a_dev,end=*break)
            if pos(pre01a_key$=pre21a_key$)<>1 then break
            read record (pre21a_dev) pre21a$
            info$[5]=pre21a_key$+pre21a.deduct_code$+pre21a.reserved_str$
            info$[6]=s0$
            info[2]=pre21a.deduct_amt
            info[3]=0,t1=t1+pre21a.deduct_amt
            call pgmdir$+"prc_genglposting.aon",2,channels[all],info$[all],info[all],channels$[all]
        wend

rem --- Taxes

        read (pre31a_dev,key=pre01a_key$,dom=*next)
        while more
            pre31a_key$=key(pre31a_dev,end=*break)
            if pos(pre01a_key$=pre31a_key$)<>1 then break
            read record (pre31a_dev) pre31a$
            info$[5]=pre31a_key$+pre31a.tax_code$+pre31a.tax_tbl_code$+pre31a.reserved_str$
            info$[6]=s0$
            q0=pre31a.tax_amount
            q2=pre31a.tax_amount,q3=t0,q7=0
            if q3=0 q9$=""
            if q9$="" q9$=prm01a.dept_code$,q[0]=pre31a.tax_amount,q3=pre31a.tax_amount
            for q9=1 to len(q9$) step 2
                info$[6]=q9$(q9,2)
                q4=0
                if q3<>0 q4=q[int(q9/2)]*100/q3
                v0=q0*q4/100
                v1=0
                if q9+2>len(q9$) if q7+v0<>q2 v0=q2-q7
                q7=q7+v0
                info[2]=v0
                call pgmdir$+"prc_genglposting.aon",2,channels[all],info$[all],info[all],channels$[all]
                if pre31a.record_id_c$="C" t2=t2+v0
            next q9
        wend

rem --- Contributions

        read (pre41a_dev,key=pre01a_key$,dom=*next)
        while more
            pre41a_key$=key(pre41a_dev,end=*break)
            if pos(pre01a_key$=pre41a_key$)<>1 then break
            read record (pre41a_dev) pre41a$
            info$[5]=pre41a_key$+pre41a.contrib_code$+pre31a.reserved_str$
            info$[6]=s0$
            q0=pre41a.contrib_amt
            q2=pre41a.contrib_amt,q3=t0,q7=0
            if q3=0 q9$=""
            if q9$="" q9$=prm01a.dept_code$,q[0]=pre41a.contrib_amt,q3=pre41a.contrib_amt
            for q9=1 to len(q9$) step 2
                z0$=q9$(q9,2)
                q4=0
                if q3<>0 q4=q[int(q9/2)]*100/q3
                v0=q0*q4/100
                v1=0
                if q9+2>len(q9$) if q7+v0<>q2 v0=q2-q7
                q7=q7+v0
                info[2]=v0
                call pgmdir$+"prc_genglposting.aon",2,channels[all],info$[all],info[all],channels$[all]
                if pre41a.record_id_d$="C" t2=t2+pre41a.contrib_amt
            next q9
        wend

rem --- Generate summary posting for check

        info[2]=(-t0)+t1+t2
        call pgmdir$+"prc_genglposting.aon",1,channels[all],info$[all],info[all],channels$[all]

    wend

done: rem --- All Done

rem --- Run next overlay

    if gl$<>"Y" goto std_exit
    width=h0,page=h
    overlay$=pgmdir$+"glr_recap.aon"
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit
       
accumulate_dept: rem --- Accumulate departments

    while more
        x=pos(v0$=q9$)
        if x=0 
            q9$=q9$+v0$
            continue
        endif
        q[int(x/2)]=q[int(x/2)]+pre11a.extended_amt
        t0=t0+pre11a.extended_amt
        break
    wend
    return

empl_break: rem --- Employee Break

    dim q[20]
    t0$=pre01a.employee_no$
    s0$="  ",memo$="Unknown Employee",q9$=""
    find record (prm01a_dev,key=firm_id$+t0$,dom=*return) prm01a$
    s0$=prm01a.dept_code$
    memo$=cvs(prm01a.empl_givname$,2)+" "+cvs(empl_surname$,2)
    return

get_dates: rem --- Accrual Date (End Date Of Next Period)

    let period=p[5]+1,fisc_yr=p[6]
    if period>g[0] period=1,fisc_yr=fisc_yr+1
    call pgmdir$+"adc_perioddates.aon",gls01a_dev,period,fisc_yr,begin$,end$,status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
