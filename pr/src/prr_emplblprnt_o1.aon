rem --- Employee Label Printing 2
rem --- Program prr_pb v8.0.0 12Jun2008 (prr_pb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/12/2008 04:06:40)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock Files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status=1 then goto std_exit

rem --- Initializations

    more=1
    headings=0 
    dim headings$[headings]
    dim w0$(w1),w1$(w1),w2$(w1),w3$(w1)

    dim columns$[0,10]
    columns = 1

    columns$[0,0]=" ",columns$[0,1]="C",columns$[0,2]="120"

rem --- retrieve template for FILE record key
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRM_EMPLMAST","AO_SURNAME_EMP",prm01a_altkey01_tpl$,table_chans$[all],status$
    dim prm01a_altkey01$:prm01a_altkey01_tpl$


test_pattern: rem --- Test Pattern Query

     call pgmdir$+"adc_yesno.aon",1,"PRINT_TEST_PATTERN",1,v$,v3
     if v3=4 then goto std_exit

     Switch pos(v$="YN")
        case 0; exitto test_pattern
        case 1; exitto print_test_pattern
        case 2; exitto determine_start
     Swend

print_test_pattern: rem --- Print Test Pattern

     dim y0$(w1*w0,"X")
     y1$=y0$
     y2$=y0$,y3$=y0$
     gosub print_rep
     goto test_pattern

determine_start: rem --- Determine Start


    call pgmdir$+"adc_progress.aon","N","","","","",0,prm01_dev,1,meter_num,status

    if p7$="N" then
rem --- Numeric Sequence
        read (prm01_dev,key=firm_id$,dom=*next)
        y0$=""
        y1$="",y2$="",y3$="",y0=0
rem --- Main Read
        while more
            call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status; rem "Check printing interrupt
            if status then goto std_exit
            read record (prm01_dev,end=*break) prm01a$
            if prm01a.firm_id$<>firm_id$ then break
            gosub first_last_name

            p1=pos(" "=v$)
            p2=pos("  "=v$)
            s$=v$(1,p1-1)+" "+v$(p1+1,p2-(p1+1))
            prm01a.empl_surname$=v$(1,p1-1)
            prm01a.empl_givname$=v$(p1+1,p2-(p1+1))
rem --- Setup
            gosub prepare_address
        wend

    endif


    if p7$="A" then
rem --- Alternate Sequence
        read (prm01_dev,key=firm_id$,knum="AO_SURNAME_EMP",dom=*next)

rem --- Main Read
        while more
            prm01a_altkey01$=key(prm01_dev,knum="AO_SURNAME_EMP",end=*break)
            if prm01a_altkey01.firm_id$<>firm_id$ then break
            read (prm01_dev,knum="AO_SURNAME_EMP")
            find record (prm01_dev,key=firm_id$+prm01a_altkey01.empl_surname$+prm01a_altkey01.employee_no$,knum="AO_SURNAME_EMP",dom=*continue) prm01a$
rem --- Setup

            gosub first_last_name

            p1=pos(" "=v$)
            p2=pos("  "=v$)
            s$=v$(1,p1-1)+" "+v$(p1+1,p2-(p1+1))
            prm01a.empl_surname$=v$(1,p1-1)
            prm01a.empl_givname$=v$(p1+1,p2-(p1+1))

            gosub prepare_address
        wend
    endif

done: rem --- Totals

    if y0>0 then gosub print_rep
    goto std_exit

prepare_address: rem --- Prepare Address

    a9$=prm01a.state_code$+" "+fnzipcode$(prm01a.zip_code$)
    if pos(" "<>prm01a.city$)=0 then
        prm01a.city$=a9$
        a9$=""
    endif
    q=pos("  "=prm01a.city$)
    if q>1 then
        prm01a.city$=prm01a.city$(1,q-1)
        prm01a.state_code$=", "
        prm01a.zip_code$=a9$
    endif
    x0$=""
    x1$=""
    find record (prm10e_dev,key=firm_id$+"E"+prm01a.dept_code$,dom=label_two) prm10e$
    x1$=prm10e.code_desc$

label_two:
    find record (prm10f_dev,key=firm_id$+"F"+prm01a.normal_title$,dom=assemble) prm10f$
    x0$=prm10f.code_desc$

assemble: rem --- Assemble

    
    x0=0
    w0$(1)=s$
    w1$(1)=fnmask$(prm01a.employee_no$,prs01a.empl_output$)+" "+x0$
    w2$(1)=x1$
    w3$(1)=fndate$(p6$)
    

    if p8$="Y" then
        s1=pos(" "=prm01a.city$)
        s2=pos(" "=prm01a.state_code$)
        w1$(1)=prm01a.addr_line_1$
        w2$(1)=prm01a.addr_line_2$
        w3$(1)=prm01a.city$(1,s1-1)+prm01a.state_code$(1,s2-1)+" "+a9$
    endif

    if pos(" "<>w2$)=0 then w2$=w3$
rem ***    dim w3$(w1)
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

    while more
        if y0>=w0 then gosub print_rep
        if x0>=w3 then break
        y0$=y0$+w0$
        y1$=y1$+w1$
        y2$=y2$+w2$
        y3$=y3$+w3$
        y0=y0+1
        x0=x0+1
    wend

    return


print_rep: rem --- Print

    OutVect!.addItem(y0$)
    OutVect!.addItem(y1$)
    OutVect!.addItem(y2$)
    OutVect!.addItem(y3$)

    l=4
    while more
        if l>=w2 then break
        xwk=fnblank(1)
        l=l+1
    wend

    y0$=""
    y1$="",y2$="",y3$="",y0=0
    return

first_last_name: rem --- First/Last Name

    v$=prm01a.empl_givname$
    v=pos("  "=v$)
    if v>1 then v$=v$(1,v-1)
    if v$(len(v$),1)<>" " then v$=v$+" "
    if pos(" "<>v$)=0 then v$=""
    v$=v$+prm01a.empl_surname$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
   
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
