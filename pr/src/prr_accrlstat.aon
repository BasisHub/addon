rem --- Accrual Status Report
rem --- Program prr_na v8.0.0 02Jun2008 (prr_na)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/02/2008 09:49:04)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=6,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="prm-01",ids$[1]="PRM_EMPLMAST"
        files$[2]="prm-02",ids$[2]="PRM_EMPLPAY"
        files$[3]="prc_paycode",ids$[3]="PRC_PAYCODE"
        files$[4]="prc_titlcode",ids$[4]="PRC_TITLCODE"
        files$[5]="prs_params",ids$[5]="PRS_PARAMS"
        files$[6]="prt-01",ids$[6]="PRT_EMPLEARN"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        prm01a_dev=channels[1]
        prm02a_dev=channels[2]
        prm10a_dev=channels[3]
        prm10f_dev=channels[4]
        prs01a_dev=channels[5]
        prt01a_dev=channels[6]

rem --- Dimension string templates

        dim prm01a$:templates$[1],prm02a$:templates$[2],prm10a$:templates$[3],
:           prm10f$:templates$[4],prs01a$:templates$[5],prt01a$:templates$[6]


rem --- Retrieve parameter records

        prs01a_key$=firm_id$+"PR00"
        find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$


rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="PR",n4$=sysinfo.task_desc$
        find record (prs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) prs01a$
        dim p[3]
        p[0]=num(prs01a.empl_no_len$)
        p[1]=num(prs01a.current_per$),p[2]=num(prs01a.current_year$),p[3]=num(prs01a.precision$)

rem --- Initializations

        call pgmdir$+"adc_getmask.aon","","PR","A","",m1$,0,0
        call pgmdir$+"adc_getmask.aon","","PR","R","",m3$,0,0
        precision p[3]
        l9=59
        l=l9+1,headings=2,width=132,page=0,when$=sysinfo.system_date$,clock$=""
        dim headings$[headings]
        headings$[0]=n1$
        headings$[1]=n4$
        headings$[2]="[HEADER]"
        dim t[5],y[11],z[4],a[3]
        m0=max(11,len(prs01a.empl_output$))
        m1=len(m1$),m3=len(m3$)
        r0$="DWBSMQA"
        r1$="365052026024012004001"
        more=1

rem --- Column Heading

        dim columns$[9,10]
            columns =9
            columns$[0,0]="Employee ^ Number",        columns$[0,1]="C",columns$[0,2]="10"
            columns$[1,0]="Name ",                    columns$[1,1]="C",columns$[1,2]="15"
            columns$[2,0]="Anniv ^ Date",             columns$[2,1]="C",columns$[2,2]="10"
            columns$[3,0]="Hire ^ Date",              columns$[3,1]="C",columns$[3,2]="10"
            columns$[4,0]="Accrual ^ Rate",           columns$[4,1]="C",columns$[4,2]="10",columns$[4,3]=m3$
            columns$[5,0]="Last-Yr ^ Earned ",        columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"
            columns$[6,0]="This-Yr ^ Accrued",        columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
            columns$[7,0]="Used",                     columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$,columns$[7,10]="T"
            columns$[8,0]="Due ",                     columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m1$,columns$[8,10]="T"
            columns$[9,0]="Liability",                columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"

rem --- retrieve template for PRC_PAYCODE record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_PAYCODE","PRIMARY",prm10a_key_tpl$,table_chans$[all],status$
        dim prm10a_key$:prm10a_key_tpl$

rem --- Open Printer

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit
        call pgmdir$+"adc_progress.aon","CN","","","","",0,prm10a_dev,1,meter_num,status

rem --- Init read

        read (prm10a_dev,key=firm_id$+"A",dom=*next)
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
rem --- Main Read

        while more 

            prm10a_key$=key(prm10a_dev,end=*break)
            if prm10a_key.firm_id$+prm10a_key.record_id_a$<>firm_id$+"A" then break
            read record (prm10a_dev) prm10a$
            if prm10a.calc_type$="N" then continue
            
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            l=l9+1
            l1=0
            read (prm01a_dev,key=firm_id$,dom=*next)

rem --- Employee
               
                while more 
                   
                    read record (prm01a_dev,end=*break) prm01a$
                    if prm01a.firm_id$<>firm_id$ then break                 
                    x0$=prm01a.empl_surname$
                    x=pos("  "=x0$)
                    if x>1 then  x0$=x0$(1,x-1)
                    x0$=x0$+", "+prm01a.empl_givname$(1,1)+"."

rem --- Rate
                    
                    std_rate=0
                    find record (prm02a_dev,key=prm01a.firm_id$+prm01a.employee_no$+prm01a.normal_title$,dom=*next) prm02a$
		    std_rate=prm02a.std_rate
                    if  std_rate=0 then 
			find record (prm10f_dev,key=firm_id$(1,2)+"F"+prm01a.normal_title$,dom=get_detail) prm10f$
			std_rate=prm10f.std_rate
	            endif
                    if prm01a.hrlysalary$="S" then 
                        x=pos(prm01a.normal_title$=r0$)
                        if x>1 then  std_rate=std_rate/(2080/num(r1$(3*(x-1)+1,3)))
                    endif

get_detail: rem --- Get Detail

                    read record (prt01a_dev,key=prm01a.firm_id$+prm01a.employee_no$+prm10a.record_id_a$+prm10a.pay_code$,dom=*continue) prt01a$
                    y0=0
                    for x=1 to 4
                        if pos(prm10a.calc_type$="FU")<>0 then  y0=y0+num(FIELD(prt01a$,"qtr_units_"+str(x:"00")))
                        if pos(prm10a.calc_type$="FU")=0 then   y0=y0+num(FIELD(prt01a$,"qtr_amt_"+str(x:"00")))
                    next x
                    if prm10a.accr_basis$="A" then  y0=prt01a.qtr_amt_04
                    if prt01a.qtr_amt_03=0 then  prt01a.qtr_amt_03=prm10a.accr_ramt

rem --- Special Modifications

                    z8=0
                    z0=prt01a.mtd_amount+prt01a.qtr_amt_01-y0; rem "Due=(Prior Yr Acc)+(Curr Yr Acc)-(Curr Yr Used)
                    precision 2
                    if pos(prm10a.calc_type$="FU")>0 then  x9=std_rate*z0 else  x9=std_rate*1
                    precision p[3]

rem --- Print
                    
                    if prt01a.mtd_amount+prt01a.qtr_amt_01+y0+z0+x9+z8=0 then continue

                    OutVect!.addItem(fnmask$(prm01a.employee_no$(1,p[0]),prs01a.empl_output$))
                    OutVect!.addItem(x0$)
                    OutVect!.addItem(fndate$(prm01a.anniv_date$))
                    OutVect!.addItem(fndate$(prm01a.hire_date$))
                    OutVect!.addItem(str(prt01a.qtr_amt_03))
                    OutVect!.addItem(str(prt01a.mtd_amount))
                    OutVect!.addItem(str(prt01a.qtr_amt_01))
                    OutVect!.addItem(str(y0))
                    OutVect!.addItem(str(z0))
                    OutVect!.addItem(str(x9))
                                        
                    l=l+2
                    l1=l1+1
                    t[0]=t[0]+prt01a.mtd_amount
                    t[1]=t[1]+prt01a.qtr_amt_01,t[2]=t[2]+y0,t[3]=t[3]+z0,t[4]=t[4]+x9,t[5]=t[5]+y8
                 wend
            

sub_total: rem --- Subtotal

            gosub subtotal

        wend

rem --- Totals

rem --- Done
    
        goto std_exit
         
subtotal: rem --- Subtotal

        if l1=0 then return
                    xwk = fnblank(10)
                    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                    OutVect!.addItem("Totals:")
                    xwk = fnblank(4)
                    OutVect!.addItem(str(t[0]))
                    OutVect!.addItem(str(t[1]))
                    OutVect!.addItem(str(t[2]))
                    OutVect!.addItem(str(t[3]))
                    OutVect!.addItem(str(t[4]))
                    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
                    subheading$="Accrual: "+prm10a.pr_code_desc$
                    HdrVect!.addItem(subheading$)
        l=l+1
        dim t[5]
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

   rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

  
rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
