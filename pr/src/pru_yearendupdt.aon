rem --- Year End Update
rem --- Program pru_yearendupdt v8.0.0 04Jun2008 (pru_ea)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/04/2008 10:32:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=13,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="prm-01",ids$[2]="PRM_EMPLMAST"
    files$[3]="prm-02",ids$[3]="PRM_EMPLPAY"
    files$[4]="prm-03",ids$[4]="PRX_NAMEEMPL"
    files$[5]="prm-10",ids$[5]="PRC_PAYCODE"
    files$[6]="prm-12",ids$[6]="PRM_EMPLCHNG"
    files$[7]="prs_params",ids$[7]="PRS_PARAMS"
    files$[8]="prt-01",ids$[8]="PRT_EMPLEARN"
    files$[9]="prt-02",ids$[9]="PRT_EMPLCHCK"
    files$[10]="prt-05",ids$[10]="PRT_LABORDST"
    files$[11]="prt-11",ids$[11]="PRT_EMPLDDCT"
    files$[12]="prt-21",ids$[12]="PRT_EMPLTAX"
    files$[13]="prt-31",ids$[13]="PRT_EMPLCONT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01a_dev=channels[1]
    prm01a_dev=channels[2]
    prm02a_dev=channels[3]
    prm03a_dev=channels[4]
    prm10a_dev=channels[5]
    prm12a_dev=channels[6]
    prs01a_dev=channels[7]
    prt01a_dev=channels[8]
    prt02a_dev=channels[9]
    prt05a_dev=channels[10]
    prt11a_dev=channels[11]
    prt21a_dev=channels[12]
    prt31a_dev=channels[13]

rem --- Dimension string templates

    dim gls01a$:templates$[1],prm01a$:templates$[2],prm02a$:templates$[3],
:       prm03a$:templates$[4],prm10a$:templates$[5],prm12a$:templates$[6],
:       prs01a$:templates$[7],prt01a$:templates$[8],prt02a$:templates$[9],
:       prt05a$:templates$[10],prt11a$:templates$[11],prt21a$:templates$[12],
:       prt31a$:templates$[13]

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$

rem --- Parameters

    dim g[0],p[4]
    g[0]=num(gls01a.total_pers$)
    p[0]=num(prs01a.employee_no_len$)
    p[1]=num(prs01a.max_empl_no$)
    p[2]=num(fndate$(prs01a.current_year$))
    p[3]=num(prs01a.precision$)
    p[4]=num(prs01a.current_per$)

initializations: rem --- Initializations

    precision p[3]
    m0=len(m0$)

rem --- Get key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_PAYCODE","PRIMARY",prm10a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLEARN","PRIMARY",prt01a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLDDCT","PRIMARY",prt11a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLTAX","PRIMARY",prt21a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLCONT","PRIMARY",prt31a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLCHCK","PRIMARY",prt02a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRM_EMPLMAST","PRIMARY",prm01a_prikey_tpl$,rd_table_chans$[all],status$
    dim prm10a_key$:prm10a_prikey_tpl$
    dim prt01a_key$:prt01a_prikey_tpl$
    dim prt11a_key$:prt11a_prikey_tpl$
    dim prt21a_key$:prt21a_prikey_tpl$
    dim prt31a_key$:prt31a_prikey_tpl$
    dim prt02a_key$:prt02a_prikey_tpl$
    dim prm01a_key$:prm01a_prikey_tpl$

rem --- Determine Calendar Year

    call pgmdir$+"adc_perioddates.aon",gls01a_dev,p[4],p[2],v0$,v9$,status
    p8$=v9$; rem "Current period end date
    p[4]=p[4]-1
    if p[4]=0 then let p[4]=g[0],p[2]=p[2]-1
    call pgmdir$+"adc_perioddates.aon",gls01a_dev,p[4],p[2],v0$,v9$,status
    p9$=v9$; rem "Previous period end date
    p9$=p9$(1,1)
    if p9$(2)<=p8$(2) then
rem --- December Not Closed
        msg_id$="YEAREND_UPDATE_ERROR"
        gosub disp_message
        goto std_exit
    endif

rem --- Get Accrual Codes

    call pgmdir$+"adc_progress.aon","CN","","","","",0,prm10a_dev,1,meter_num,status
    read (prm10a_dev,key=firm_id$+"A",dom=*next)

    while more
        prm10a_key$=key(prm10a_dev,end=*break)
        if prm10a_key.firm_id$+prm10a_key.record_id_a$<>firm_id$+"A" then break
        read record (prm10a_dev) prm10a$
        if prm10a.calc_type$="N" then continue
        if prm10a.accr_basis$<>"C" then continue
        acc_code$=acc_code$+prm10a.pay_code$
    wend

rem --- Earnings

    gosub clear_term; rem "Clear terminated employees
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","CN","","","","",0,prt01a_dev,1,meter_num,status
    read (prt01a_dev,key=firm_id$,dom=*next)

    while more
        prt01a_key$=key(prt01a_dev,end=*break)
        if prt01a_key.firm_id$<>firm_id$ then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,prt01a_dev,1,meter_num,status
        read record (prt01a_dev) prt01a$
        if pos(prt01a.pay_code$=acc_code$,2)<>0
            prt01a.mtd_amount=prt01a.mtd_amount+prt01a.qtr_amt_01-prt01a.qtr_amt_04
            prt01a.qtr_amt_01=prt01a.qtr_amt_02
            prt01a.qtr_amt_02=0
            prt01a.qtr_amt_04=0
        endif
        prt01a.qtr_amt_01=0
        prt01a.qtr_amt_02=0
        prt01a.qtr_amt_03=0
        prt01a.qtr_amt_04=0

        prt01a.qtr_units_01=0
        prt01a.qtr_units_02=0
        prt01a.qtr_units_03=0
        prt01a.qtr_units_04=0
        write record (prt01a_dev,key=prt01a_key$) prt01a$
    wend

rem --- Deductions

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","CN","","","","",0,prt11a_dev,1,meter_num,status
    read (prt11a_dev,key=firm_id$,dom=*next)

    while more
        prt11a_key$=key(prt11a_dev,end=*break)
        if prt11a_key.firm_id$<>firm_id$ then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,prt11a_dev,1,meter_num,status
        read record (prt11a_dev) prt11a$
        prt01a.qtr_amt_01=0
        prt01a.qtr_amt_02=0
        prt01a.qtr_amt_03=0
        prt01a.qtr_amt_04=0
        write record (prt11a_dev,key=prt11a_key$) prt11a$
    wend

rem --- Taxes

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","CN","","","","",0,prt21a_dev,1,meter_num,status
    read (prt21a_dev,key=firm_id$,dom=*next)

    while more
        prt21a_key$=key(prt21a_dev,end=*break)
        if prt21a_key.firm_id$<>firm_id$ then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,prt21a_dev,1,meter_num,status
        read record (prt21a_dev) prt21a$
        prt21a.qtr_gross_01=0
        prt21a.qtr_gross_02=0
        prt21a.qtr_gross_03=0
        prt21a.qtr_gross_04=0

        prt21a.qtr_taxable_01=0
        prt21a.qtr_taxable_02=0
        prt21a.qtr_taxable_03=0
        prt21a.qtr_taxable_04=0

        prt21a.quarter_tax_01=0
        prt21a.quarter_tax_02=0
        prt21a.quarter_tax_03=0
        prt21a.quarter_tax_04=0
        write record (prt21a_dev,key=prt21a_key$) prt21a$
    wend

rem --- Contributions

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","CN","","","","",0,prt31a_dev,1,meter_num,status
    read (prt31a_dev,key=firm_id$,dom=*next)

    while more
        prt31a_key$=key(prt31a_dev,end=*break)
        if prt31a_key.firm_id$<>firm_id$ then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,prt31a_dev,1,meter_num,status
        read record (prt31a_dev) prt31a$
        prt31a.qtr_gross_01=0
        prt31a.qtr_gross_02=0
        prt31a.qtr_gross_03=0
        prt31a.qtr_gross_04=0

        prt31a.qtr_basis_01=0
        prt31a.qtr_basis_02=0
        prt31a.qtr_basis_03=0
        prt31a.qtr_basis_04=0
        
        prt31a.qtr_contrib_01=0
        prt31a.qtr_contrib_02=0
        prt31a.qtr_contrib_03=0
        prt31a.qtr_contrib_04=0
        write record (prt31a_dev,key=k0$) prt31a$
    wend

rem --- Clear Checks

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","CN","","","","",0,prt02a_dev,1,meter_num,status
    read (prt02a_dev,key=firm_id$,dom=*next)

rem --- Main Check Read

    while more
        prt02a_key$=key(prt02a_dev,end=*break)
        if prt02a_key.firm_id$<>firm_id$ then break
        read record (prt02a_dev) prt02a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Keep Or Remove

        if prt02a.check_date$>p9$ then continue

rem --- Remove Check
        remove (prt02a_dev,key=prt02a_key$)
    wend

rem --- Labor Dist

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","CN","","","","",0,prt05a_dev,1,meter_num,status
    read (prt05a_dev,key=firm_id$,dom=*next)

rem --- Main Labor Dist Read

    while more
        dim c[11]
        prt05a_key$=key(prt05a_dev,end=*break)
        read record (prt05a_dev,end=*break) prt05a$
        if pos(firm_id$=prt05a_key$)<>1 then break
        call pgmdir$+"adc_progress.aon","S","","","","",prm01a_dev,0,1,meter_num,status
        find (prm01a_dev,key=firm_id$+prt05a.employee_no$,dom=label2)
        prt05a.qtr_amt_01=0
        prt05a.qtr_amt_02=0
        prt05a.qtr_amt_03=0
        prt05a.qtr_amt_04=0

        prt05a.qtr_units_01=0
        prt05a.qtr_units_02=0
        prt05a.qtr_units_03=0
        prt05a.qtr_units_04=0

        if prt05a.mtd_amount<>0 then exitto label1
        for x0=1 to 4
            if num(field(prt05a$,"qtr_amt_"+str(x0:"00")))<>0 then exitto label1
        next x0
        if prt05a.nmtd_amt<>0 then exitto label1
        if prt05a.mtd_units<>0 then exitto label1
        for x0=1 to 4
            if num(field(prt05a$,"qtr_units_"+str(x0:"00")))<>0 then exitto label1
        next x0
        if prt05a.nmtd_units<>0 then exitto label1
label2: 
        remove (prt05a_dev,key=prt05a_key$,dom=*next)
        break
label1:
        write record (prt05a_dev,key=c0$) prt05a$
    wend

done: rem --- Done

    goto std_exit

clear_term: rem --- Clear Terminated

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","CN","","","Terminating","",m0,prm01a_dev,1,meter_num,status
    read (prm01a_dev,key=firm_id$,dom=*next)
    
    while more
        prm01a_key$=key(prm01a_dev,end=*break)
        if prm01a_key.firm_id$<>firm_id$ then break
        read record (prm01a_dev) prm01a$
        if prm01a_key.term_date$="   " then continue
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        remove (prm03a_dev,key=prm01a.firm_id$+"A"+prm01a.empl_surname$+prm01a.employee_no$,dom=*next)
        remove (prm03a_dev,key=prm01a.firm_id$+"B"+prm01a.alt_sequence$+prm01a.employee_no$,dom=*next)

rem --- Remove Pay Rate Detail

        read (prm02a_dev,key=prm01a_key$,dom=*next)

        while more
            prm02a_key$=key(prm02a_dev,end=*break)
            if pos(prm01a_key$=prm02a_key$)<>1 then break
            remove (prm02a_dev,key=prm02a_key$)
        wend

rem --- Remove Pay Change Detail

        read (prm12a_dev,key=prm01a_key$,dom=*next)

        while more
            prm12a_key$=key(prm12a_dev,end=*break)
            if pos(prm01a_key$=prm12a_key$)<>1 then break
            remove (prm12a_dev,key=prm12a_key$)
        wend

rem --- Remove Earnings History

        read (prt01a_dev,key=prm01a_key$,dom=*next)

        while more
            prt01a_key$=key(prt01a_dev,end=*break)
            if pos(prm01a_key$=prt01a_key$)<>1 then break
            remove (prt01a_dev,key=prt01a_key$)
        wend

rem --- Remove Deduction History

        read (prt11a_dev,key=prm01a_key$,dom=*next)

        while more
            prm11a_key$=key(prt11a_dev,end=*break)
            if pos(prm01a_key$=prm11a_key$)<>1 then break
            remove (prt11a_dev,key=prm11a_key$)
        wend

rem --- Remove Tax History

        read (prt21a_dev,key=prm01a_key$,dom=*next)

        while more
            prm21a_key$=key(prt21a_dev,end=*break)
            if pos(prm01a_key$=prm21a_key$)<>1 then break
            remove (prt21a_dev,key=prm21a_key$)
        wend

rem --- Remove Contribuion History

        read (prt31a_dev,key=prm01a_key$,dom=*next)

        while more
            prm31a_key$=key(prt31a_dev,end=*break)
            if pos(prm01a_key$=prm31a_key$)<>1 then break
            remove (prt31a_dev,key=prm31a_key$)
        wend

rem --- Remove Employee Master

        remove (prm01a_dev,key=prm01a_key$)
    wend
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
