rem --- Export Year-end W2 to txt for 3rd party print product (Employer)
rem --- Program prx_exportw2totext v8.0.0 04Jun2008 (prx_yb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/04/2008 10:31:36)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="prs_params",ids$[1]="PRS_PARAMS"
    files$[2]="prs_report",ids$[2]="PRS_REPORT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    prs01a_dev=channels[1]
    prs01c_dev=channels[2]

rem --- Dimension string templates

    dim prs01a$:templates$[1],prs01c$:templates$[2]

rem --- Retrieve parameter records

    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$
    prs01c_key$=firm_id$+"PR00"
    find record (prs01c_dev,key=prs01c_key$,err=std_missing_params) prs01c$

rem --- Init Data

    gosub init_var; rem "Initialize export variables

rem --- Fix Up Fed ID Number (Strip out all but the 9 digits)

    tin_type$="EIN"
    for i=1 to len(prs01c.federal_id$)
        if prs01c.federal_id$(i,1)>="0" and prs01c.federal_id$(i,1)<="9" then let taxpayer_id$=taxpayer_id$+prs01c.federal_id$(i,1)
    next i
    taxpayer_id$=pad(taxpayer_id$,9)

rem --- Client (ie Employer) data

    client_id$=fndequote$(sysyear$+"PR"+firm_id$)
    name1$=fndequote$(prs01c.name$)
    corp_name1$=name1$

rem --- Street Address Format

    address1$=fndequote$(prs01c.addr_line_01$)
    corp_address1$=address1$
    address2$=fndequote$(prs01c.addr_line_02$)
    corp_address2$=address2$

rem --- City Name

    city$=fndequote$(prs01c.city$)
    corp_city$=city$

rem --- State Code

    state$=prs01c.state_code$
    corp_state$=state$

rem --- Fix Up Zip Code

    tmp_zip$=prs01c.zip_code$
    if tmp_zip$<>fill(9)
        for i=1 to len(tmp_zip$)
            if tmp_zip$(i,1)<>" " and tmp_zip$(i,1)<>"-" then let zip$=zip$+tmp_zip$(i,1)
        next i
        zip$=pad(zip$,9)
        corp_zip$=zip$

rem --- State ID

        state1$=fndequote$(prs01c.state_code$)
        state1_id$=fndequote$(prs01c.state_id$)
    endif

rem --- Write to Client export file

    rec$=$22$+client_id$+$22$+","
    rec$=rec$+$22$+name1$+$22$+","
    rec$=rec$+$22$+name2$+$22$+","
    rec$=rec$+$22$+address1$+$22$+","
    rec$=rec$+$22$+address2$+$22$+","
    rec$=rec$+$22$+city$+$22$+","
    rec$=rec$+$22$+state$+$22$+","
    rec$=rec$+$22$+zip$+$22$+","
    rec$=rec$+$22$+corp_name1$+$22$+","
    rec$=rec$+$22$+corp_name2$+$22$+","
    rec$=rec$+$22$+corp_address1$+$22$+","
    rec$=rec$+$22$+corp_address2$+$22$+","
    rec$=rec$+$22$+corp_city$+$22$+","
    rec$=rec$+$22$+corp_state$+$22$+","
    rec$=rec$+$22$+corp_zip$+$22$+","
    rec$=rec$+$22$+report_corp_2irs$+$22$+","
    rec$=rec$+$22$+combo_fedst$+$22$+","
    rec$=rec$+$22$+final_return$+$22$+","
    rec$=rec$+$22$+name_control$+$22$+","
    rec$=rec$+$22$+tin_type$+$22$+","
    rec$=rec$+$22$+taxpayer_id$+$22$+","
    rec$=rec$+$22$+rt_num$+$22$+","
    rec$=rec$+$22$+phone$+$22$+","
    rec$=rec$+$22$+main_contact$+$22$+","
    rec$=rec$+$22$+fax$+$22$+","
    rec$=rec$+$22$+email$+$22$+","
    rec$=rec$+$22$+establish$+$22$+","
    rec$=rec$+$22$+other_ein$+$22$+","
    rec$=rec$+$22$+state1$+$22$+","
    rec$=rec$+$22$+state1_id$+$22$+","
    rec$=rec$+$22$+state2$+$22$+","
    rec$=rec$+$22$+state2_id$+$22$+","
    rec$=rec$+$22$+state3$+$22$+","
    rec$=rec$+$22$+state3_id$+$22$+","
    rec$=rec$+$22$+state4$+$22$+","
    rec$=rec$+$22$+state4_id$+$22$+","
    rec$=rec$+$22$+state5$+$22$+","
    rec$=rec$+$22$+state5_id$+$22$+$0d$
    print (client_dev)rec$

rem --- Done with client record

rem --- Overlay

    run pgmdir$+"prx_exportw2totext_o1.aon"

init_var: rem --- Init variables for Client text file

rem --- NOTE: 'Client' equates to Employer

    client_id$=""
    name1$=""
    name2$=""
    address1$=""
    address2$=""
    city$=""
    state$=""
    zip$=""
    corp_name1$=""
    corp_name2$=""
    corp_address1$=""
    corp_address2$=""
    corp_city$=""
    corp_state$=""
    corp_zip$=""
    report_corp_2irs$=""
    combo_fedst$=""
    final_return$=""
    name_control$=""
    tin_type$=""
    taxpayer_id$=""
    rt_num$=""
    phone$=""
    main_contact$=""
    fax$=""
    email$=""
    establish$=""
    other_ein$=""
    state1$=""
    state1_id$=""
    state2$=""
    state2_id$=""
    state3$=""
    state3_id$=""
    state4$=""
    state4_id$=""
    state5$=""
    state5_id$=""
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
