rem --- Check Update
rem --- Program pru_ca v8.0.0 10Jun2008 (pru_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/10/2008 03:22:54)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()


rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=25,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]="gls_params",ids$[2]="GLS_PARAMS"
    files$[3]="glt-04",ids$[3]="GLE_DAILYDETAIL"
    files$[4]="glt-05",ids$[4]="GLT_BANKCHECKS"
    files$[5]="pre-01",ids$[5]="PRE_PAYROLL"
    files$[6]="pre-11",ids$[6]="PRE_PAYEARNG"
    files$[7]="pre-21",ids$[7]="PRE_PAYDDCT"
    files$[8]="pre-31",ids$[8]="PRE_PAYTAX"
    files$[9]="pre-41",ids$[9]="PRE_PAYCONT"
    files$[10]="pre-51",ids$[10]="PRE_PAYACCRL"
    files$[11]="prm-01",ids$[11]="PRM_EMPLMAST"
    files$[12]="prm-10",ids$[12]="PRC_PAYCODE"
    files$[13]="prm-10",ids$[13]="PRC_RPRTCODE"
    files$[14]="prs_params",ids$[14]="PRS_PARAMS"
    files$[15]="prs_period",ids$[15]="PRS_PERIOD"
    files$[16]="prt-01",ids$[16]="PRT_EMPLEARN"
    files$[17]="prt-02",ids$[17]="PRT_EMPLCHCK"
    files$[18]="prt-03",ids$[18]="PRT_MNTHCHCK"
    files$[19]="prt-04",ids$[19]="PRT_UNNHIST"
    files$[20]="prt-05",ids$[20]="PRT_LABORDST"
    files$[21]="prt-11",ids$[21]="PRT_EMPLDDCT"
    files$[22]="prt-21",ids$[22]="PRT_EMPLTAX"
    files$[23]="prt-31",ids$[23]="PRT_EMPLCONT"
    files$[24]="prw-01",ids$[24]="PRW_CHCKWORK"
    files$[25]="prw-04",ids$[25]="PRW_LABORDST"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    gls01a_dev=channels[2]
    glt04_dev=channels[3]
    glt05_dev=channels[4]
    pre01_dev=channels[5]
    pre11_dev=channels[6]
    pre21_dev=channels[7]
    pre31_dev=channels[8]
    pre41_dev=channels[9]
    pre51_dev=channels[10]
    prm01_dev=channels[11]
    prm10a_dev=channels[12]
    prm10h_dev=channels[13]
    prs01a_dev=channels[14]
    prs01b_dev=channels[15]
    prt01_dev=channels[16]
    prt02_dev=channels[17]
    prt03_dev=channels[18]
    prt04_dev=channels[19]
    prt05_dev=channels[20]
    prt11_dev=channels[21]
    prt21_dev=channels[22]
    prt31_dev=channels[23]
    prw01_dev=channels[24]
    prw04_dev=channels[25]

rem --- Dimension string templates


    dim glm01a$:templates$[1],gls01a$:templates$[2],glt04a$:templates$[3],
:       glt05a$:templates$[4],pre01a$:templates$[5],
:       pre11a$:templates$[6],pre21a$:templates$[7],pre31a$:templates$[8],
:       pre41a$:templates$[9],pre51a$:templates$[10],prm01a$:templates$[11],
:       prm10a$:templates$[12],prm10h$:templates$[13],prs01a$:templates$[14],
:       prt01a$:templates$[15],prt02a$:templates$[16],
:       prt03a$:templates$[17],prt04a$:templates$[18],prt05a$:templates$[19],
:       prt11a$:templates$[20],prt21a$:templates$[21],prt31a$:templates$[22],
:       prw01a$:templates$[23],prw04a$:templates$[24]


rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$

rem --- Parameters

    dim p[6],g[4]
    n1$=sysinfo.firm_name$,n2$="PR",n3$=sysinfo.task_desc$
    find record (prs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) prs01a$
    find record (prs01b_dev,key=firm_id$+n2$+"01",dom=std_missing_params) prs01b$
    call pgmdir$+"adc_application.aon",n2$,info$[all]
    gl$=info$[9]
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$

    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_per$)
    g[2]=num(gls01a.current_year$)
    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,acct_length
    g[3]=acct_length
    g[4]=max(10,g[3])

    g[2]=num(gls01a.current_year$)

initializations: rem --- Initializations

    call stbl("+DIR_PGM")+"adc_getmask.aon","EMPLOYEE_NO","","","",m0$,0,empl_no_len
    p[0]=empl_no_len
    p[5]=num(prs01a.current_per$)
    p[6]=num(prs01a.current_year$)
    p8$=prs01b.pay_end_date$
    p8=num(prs01b.accrual_days$)
    p[3]=num(prs01a.precision$)
    more=1
   


    dim w[2]
    call pgmdir$+"adc_perioddates.aon",gls01a_dev,p[5],p[6],begin$,g9$,status

    gldate$=p8$

    gosub accrual_date; z7$=end$


    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_RPRTCODE","PRIMARY",prm10h_key_tpl$,table_chans$[all],status$
    dim prm10h_key$:prm10h_key_tpl$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_TAXCODE","PRIMARY",prm10c_key_tpl$,table_chans$[all],status$
    dim prm10c_key$:prm10c_key_tpl$


options: rem --- Options

    v4$="Are You Ready To Update The Check Register"
    call pgmdir$+"adc_yesno.aon",0,v4$,0,v$,v3
    on v3 goto label_one,options,options,options,std_exit,label_one,std_exit
label_one:
    if v$="NO" then goto std_exit
    if v$<>"YES" then goto options

    gosub check_history

done: rem --- Overlay

    run pgmdir$+"pru_chkupdate_cb.aon"

check_history: rem --- Check History

    u0$=""
    u1$="",u2$="",u3$="",u4$=""
    read (prm10h_dev,key=firm_id$+"H",dom=*next)

    while more
        prm10h_key$=key(prm10h_dev,end=*break)
        if prm10h_key.firm_id$+prm10h_key.record_id_h$>firm_id$+"H" then break
        read record (prm10h_dev) prm10h$

        if len(prm10h.firm_id$+prm10h.record_id_h$+prm10h.report_type$+prm10h.report_code$+prm10h.pr_rpt_title$+prm10h.chk_reg_col$+prm10h.chk_hist_col$)<20 then continue
        if prm10h_key.report_type$<="C" then
            u2$=u2$+prm10h_key.report_type$+prm10h_key.report_code$
            u3$=u3$+prm10h.chk_hist_col$
        endif
        if prm10h_key.report_type$="H" then
            u4$=u4$+prm10h_key.report_code$
        endif
    wend

    read (prm10a_dev,key=firm_id$+"A",dom=*next)
    while more
        prm10c_key$=key(prm10c_dev,end=*break)
        if prm10c_key.firm_id$+prm10c_key.record_id_c$>firm_id$+"C" then break
        read record (prm10c_dev) prm10abc$
        if len(x0$)<23 then continue
        u0$=u0$+prm10c_key.record_id_c$+prm10c_key.tax_code$
        u1$=u1$+prm10c_key.record_id_c$+prm10c.report_code$
    wend

    return

accrual_date: rem --- Accrual Date (End Date Of Next Period)

    period=p[5]+1
    fisc_yr=p[6]
    if period>g[0] then period=1,fisc_yr=fisc_yr+1
    call pgmdir$+"adc_perioddates.aon",gls01a_dev,period,fisc_yr,begin$,end$,status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
