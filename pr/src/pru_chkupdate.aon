rem --- Check Update (Labor Distribution)
rem --- Program pru_cc v8.0.0 03Jun2008 (pru_cc)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/03/2008 09:43:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=3,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="prs_params",ids$[1]="PRS_PARAMS"
        files$[2]="prt-05",ids$[2]="PRT_LABORDST"
        files$[3]="prw-04",ids$[3]="PRW_LABORDST"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        prs01a_dev=channels[1]
        prt05_dev=channels[2]
        prw04_dev=channels[3]

rem --- Dimension string templates

        dim prs01a$:templates$[1],prt05a$:templates$[2],prw04a$:templates$[3]

rem --- Retrieve parameter records

        prs01a_key$=firm_id$+"PR00"
        find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$

rem --- Initializations
        more=1
        p8=pos(fnyy_yy21$(fnc2$(p8$))<=p7$,4)
        p8=int((p8+3)/4)

rem --- Display Resource

        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
        call pgmdir$+"adc_progress.aon","N","","","","",0,prw04_dev,1,meter_num,status


rem retrieve template for FILE record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","PRW_LABORDST","PRIMARY",prw04a_key_tpl$,table_chans$[all],status$
        dim prw04a_key$:prw04a_key_tpl$

rem --- Accumulate Labor Dist

        read (prw04_dev,key=firm_id$,dom=*next)

rem --- Main Read
        while more

            prw04a_key$=key(prw04_dev,end=*break)
            read record (prw04_dev) prw04a$
            if prw04a.firm_id$<>firm_id$ then break
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Update

            prt05a.firm_id$=prw04a.firm_id$
            prt05a.dept_code$=prw04a.dept_code$
            prt05a.title_code$=prw04a.title_code$
            prt05a.employee_no$=prw04a.employee_no$
            prt05a.pay_code$=prw04a.pay_code$

            find record (prt05_dev,key=prt05a.firm_id$+prt05a.dept_code$+prt05a.title_code$+prt05a.employee_no$+prt05a.pay_code$,dom=*next) prt05a$
            if p8$<=g9$ then
                prt05a.mtd_amount=prt05a.mtd_amount+prw04a.extended_amt
                prt05a.mtd_units=prt05a.mtd_units+prw04a.units
            endif
            if p8<>0 then

                if p8=1 then
                    prt05a.qtr_amt_01=prt05a.qtr_amt_01+prw04a.extended_amt
                    prt05a.qtr_units_07=prt05a.qtr_units_07+prw04a.units
                endif
                if p8=2 then
                    prt05a.qtr_amt_02=prt05a.qtr_amt_02+prw04a.extended_amt
                    prt05a.qtr_units_08=prt05a.qtr_units_08+prw04a.units
                endif
                if p8=3 then
                    prt05a.qtr_amt_03=prt05a.qtr_amt_03+prw04a.extended_amt
                    prt05a.qtr_units_09=prt05a.qtr_units_09+prw04a.units
                endif
                if p8=4 then
                    prt05a.qtr_amt_04=prt05a.qtr_amt_04+prw04a.extended_amt
                    prt05a.qtr_units_10=prt05a.qtr_units_10+prw04a.units
                endif

            endif

            if p8$>g9$ then
                prt05a.nmtd_amt=prt05a.nmtd_amt+prw04a.extended_amt
                prt05a.nmtd_units=prt05a.nmtd_units+prw04a.units
            endif

            write record (prt05_dev,key=prt05a.firm_id$+prt05a.dept_code$+prt05a.title_code$+prt05a.employee_no$+prt05a.pay_code$) prt05a$

rem --- Remove
            remove (prw04_dev,key=prw04a_key$)

        wend

done: rem --- End

        if gl$="Y" then call pgmdir$+"glc_ctlupdate.aon",status
        goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

    def fna$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fnc2$(q1$)=fna$(q1$(1),q1$)+fna$(q1$(2),q1$)

rem " --- Convert 2-Char Year to 21st Century 2-Char Year" 
    def fnyy_yy21$(q1$)
    let q9=10,q9=num(STBL("+Y2K_UPPER_LIMIT",err=*next),err=*next)
    if num(q1$(1,2),err=8133)<q9 then let q1$(1,1)=chr(int(num(q1$(1,2))/10)+65)
    return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
