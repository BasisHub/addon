rem --- Archive Year-End Totals
rem --- Program prm_ya v8.0.0 04Jun2008 (prm_ya)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/04/2008 10:21:46)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="prm-01",ids$[1]="PRM_EMPLMAST"
    files$[2]="prm-03",ids$[2]="PRX_NAMEEMPL"
    files$[3]="prs_params",ids$[3]="PRS_PARAMS"
    files$[4]="prt-01",ids$[4]="PRT_EMPLEARN"
    files$[5]="prt-11",ids$[5]="PRT_EMPLDDCT"
    files$[6]="prt-21",ids$[6]="PRT_EMPLTAX"
    files$[7]="prt-31",ids$[7]="PRT_EMPLCONT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    prm01a_dev=channels[1]
    prm03a_dev=channels[2]
    prs01a_dev=channels[3]
    prt01a_dev=channels[4]
    prt11a_dev=channels[5]
    prt21a_dev=channels[6]
    prt31a_dev=channels[7]

rem --- Dimension string templates

    dim prm01a$:templates$[1],prm03a$:templates$[2],prs01a$:templates$[3],
:       prt01a$:templates$[4],prt11a$:templates$[5],prt21a$:templates$[6],
:       prt31a$:templates$[7]

rem --- Assign form input values to local variables

    year$=Option!.getOptionData("payroll_calendar_year")
    archive_name$=Option!.getOptionData("new_archive_name")

rem --- Retrieve parameter records

    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$

rem --- Parameters

    call pgmdir$+"syc_dg.bbx",err=*next,sysgui_dev,sysgui$,sysgui,sysfin$,sysfin,ui$,status
    if status then goto std_exit
    dim p[4],x9$(40)
    p[0]=num(prs01a.empl_no_len$)
    p[1]=num(prs01a.current_per$),p[2]=fnyy_year(prs01a.current_year$),p[3]=num(prs01a.zip_length$)
    for i=1 to len(prs01a.empl_input$)
        if prs01a.empl_input$(i,1)="#" then let prs01a.empl_input$(i,1)="0"
    next i

initializations: rem --- Initializations

    more=1

rem --- Get key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRM_EMPLMAST","PRIMARY",prm01a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLEARN","PRIMARY",prt01a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLDDCT","PRIMARY",prt11a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLTAX","PRIMARY",prt21a_prikey_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLCONT","PRIMARY",prt31a_prikey_tpl$,rd_table_chans$[all],status$
    dim prm01a_key$:prt01a_prikey_tpl$
    dim prt01a_key$:prt01a_prikey_tpl$
    dim prt11a_key$:prt11a_prikey_tpl$
    dim prt21a_key$:prt21a_prikey_tpl$
    dim prt31a_key$:prt31a_prikey_tpl$

rem --- Archive prt-01 Earnings

    dim msg_tokens$[1],archive$[1],opt$[1],chan[1]
    msg_id$="REPLACE_ARCHIVE"
    msg_tokens$[0]=year$
    archive$[1]="PRT0"+year$(3,2)+firm_id$
    like$="prt-01"
    gosub open_archive
    if msg_opt$="Y"
        arcprt01_dev=chan[1]

rem --- Copy Year-End Earnings From prt-01 To PRT0'YY'+N0$

        read (prt01_dev,key=firm_id$,dom=*next)
        while more
            prt01a_key$=key(prt01_dev,end=*break)
            if prt01a_key.firm_id$<>firm_id$ then break
            read record(prt01_dev,key=prt01a_key$)prt01a$
            write record(arcprt01_dev,key=prt01a_key$)prt01a$
        wend
    endif

rem --- Archive prt-11 Deductions

    msg_id$="YEAREND_DED_ARCHIVED"
    msg_tokens$[0]=year$
    archive$[1]="PRT1"+year$(3,2)+firm_id$
    like$="prt-11"
    gosub open_archive
    if msg_opt$="Y"
        arcprt11_dev=chan[1]

rem --- Copy Year-End Deductions From prt-11 To PRT1'YY'+N0$

        read (prt11_dev,key=firm_id$,dom=*next)
        while more
            prt11a_key$=key(prt11_dev,end=*break)
            if prt11a_key.firm_id$<>firm_id$ then break
            read record(prt11_dev,key=prt11a_key$)prt11a$
            write record(arcprt11_dev,key=prt11a_key$)prt11a$
        wend
    endif

rem --- Archive prt-21 Taxes

    msg_id$="YEAREND_TAX_ARCHIVED"
    msg_tokens$[0]=year$
    archive$[1]="PRT2"+year$(3,2)+firm_id$
    like$="prt-21"
    gosub open_archive
    if msg_opt$="Y"
        arcprt21_dev=chan[1]

rem --- Copy Year-End Taxes From prt-21 To PRT2'YY'+N0$

        read (prt21_dev,key=firm_id$,dom=*next)
        while more
            prt21a_key$=key(prt21_dev,end=*break)
            if prt21a_key.firm_id$<>firm_id$ then break
            read record(prt21_dev,key=prt21a_key$)prt21a$
            write record(arcprt21_dev,key=prt21a_key$)prt21a$
        wend
    endif

rem --- Archive prt-31 Contributions

    msg_id$="YEAREND_CON_ARCHIVED"
    msg_tokens$[0]=year$
    archive$[1]="PRT3"+year$(3,2)+firm_id$
    like$="prt-31"
    gosub open_archive
    if msg_opt$="Y"
        arcprt31_dev=chan[1]

rem --- Copy Year-End Contributions From prt-31 To PRT3'YY'+N0$

        read (prt31_dev,key=firm_id$,dom=*next)
        while more
            prt31a_key$=key(prt31_dev,end=*break)
            if prt31a.firm_id$<>firm_id$ then break
            read record(prt31_dev,key=prt31a_key$)prt31a$
            write record(arcprt31_dev,key=prt31a_key$)prt31a$
        wend
    endif
   
rem --- Archive prm-01 Masterfile

    msg_id$="MASTERFILE_ARCHIVED"
    msg_tokens$[0]=year$
    archive$[1]="PRMA"+year$(3,2)+firm_id$
    like$="prm-01"
    gosub open_archive
    if msg_opt$="Y"
        arcprm01_dev=chan[1]

rem --- Copy Masterfile From prm-01 To PRMA'YY'+N0$

        read (prm01_dev,key=firm_id$,dom=*next)
        while more
            prm01a_key$=key(prm01_dev,end=*break)
            if prm01a_key.firm_id$<>firm_id$ then break
            read record(prm01_dev,key=prm01a_key$)prm01a$
            write record(arcprm01_dev,key=k$)prm01a$
        wend
    endif
    
rem --- Archive prm-03 Alpha Sort

    msg_id$="ALT_SORT_ARCHIVED"
    msg_tokens$[0]=year$
    archive$[1]="PRMS"+year$(3,2)+firm_id$
    like$="prm-03"
    gosub open_archive
    action=pos(msg_opt$="YN")
    if msg_opt$="Y"
        arcprm03_dev=chan[1]

rem --- Copy Alpha Sort From prm-01 To PRMS'YY'+N0$

        read (prm01_dev,key=firm_id$,dom=*next)
        while more
            prm01a_key$=key(prm01_dev,end=*break)
            if prm01a_key.firm_id<>firm_id$ then break
            read record (prm01_dev,key=prm01a_key$) prm01a$
            prm03a$=firm_id$+"A"+prm01a.empl_surname$+prm01a.employee_no$
            write record (arcprm03_dev,key=prm03a$) prm03a$
        wend
    endif

done:

    goto std_exit

open_archive: rem --- Open Archive File

    while more
        opt$[1]="F"
        call pgmdir$+"adc_fileopen.aon",1,1,1,archive$[all],opt$[all],chan[all],batch,status
        if status then exitto std_exit
        if chan[1]=0 gosub create_archive; continue; rem "Create archive file
        k$=key(chan[1],end=*break)
        if ui$="W" gosub gui_archive; break; rem " GUI Archive already exists"
        if ui$<>"W" gosub archive_exists; rem " CHUI Archive already exists"
    wend
    return

create_archive: rem --- Create Archive File

    call pgmdir$+"syc_ml.bbx",archive$[1],like$,status
    if status<>0 then
        msg_id$="CREATE_ARCHIVE_ERROR"
        msg_tokens$[0]=archive$[1]
        gosub disp_message
        exitto std_exit
    endif
    return

archive_exists: rem --- CHUI Archive File Already Exists

    while more
        gosub disp_message
        if msg_opt$="R" then gosub rename_archive; break
    wend
    return

rename_archive: rem --- Rename Archive File

    msg_id$="REN_ARC_NAM_CONFLICT"
    msg_tokens$[0]=archive$[1]
    gosub disp_message

    dim target$[1],flag$[1]
    target$[1]=archive_name$
    close (chan[1],err=*next)
    call pgmdir$+"syc_rn.bbx",archive$[all],target$[all],flag$[all],1,status
    if status<>0 continue
    return

gui_archive: rem --- CHUI Archive File Already Exists

    call pgmdir$+"syc_xo.bbx::init",in$,out$,ignore_status
    in.type$="S"
    in.opts$="",in.mask$="",in.length=8,in.row=-1
    in.msg$=year$+" Year-End Earnings Already Archived."+" Replace (Y/N/Rename)"
    in.default=1
    in.opt_display$[1]="Yes"
    in.opt_return$[1]="Y",in.opt_fkey[1]=5
    in.opt_display$[2]="No"
    in.opt_return$[2]="N",in.opt_fkey[2]=6
    in.opt_display$[3]="Rename"
    in.opt_return$[3]="R",in.opt_fkey[3]=7
    
    while more
        call pgmdir$+"syc_xo.bbx",in$,out$,status
        if status then continue
        let v$=out.selection$,v3=out.fkey
        if v3=4 then exitto std_exit
        if v3=5 then let arc$=v$; break
        if v3=6 then let arc$=v$; break
        if v3=7 then let arc$=v$
        if arc$="R" then gosub rename_archive; break
    wend
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
