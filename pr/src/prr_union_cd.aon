rem --- Union Code Maintenance Listing
rem --- Program prm_je v8.0.0 06Jun2008 (prm_je)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/06/2008 05:39:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="PRC_UNNCODE",ids$[1]="PRC_UNNCODE"
    files$[2]="PRS_PARAMS",ids$[2]="PRS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    prcunncode_dev=channels[1]
    prsparams_dev=channels[2]

rem --- Dimension string templates

    dim prcunncode$:templates$[1],prsparams$:templates$[2]

rem --- Retrieve parameter records

    prsparams_key$=firm_id$+"PR00"
    find record (prsparams_dev,key=prsparams_key$,err=std_missing_params) prsparams$

rem --- Initializations

    headings=2,width=80,page=0,when$=sysinfo.system_date$,clock$=""
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" Listing"
    t0=0
    more=1
    M7$="00000"
    if prsparams.zip_length$="9" then m7$=m7$+"-0000"
    m8$="(###)-###-####"

    dim columns$[0,10]
    columns$[0,1]="",columns$[0,1]="C",columns$[0,2]="80"
    columns=0

    call pgmdir$+"adc_progress.aon","CN","","","","",0,prcunncode_dev,1,meter_num,ignore_status
    

rem --- Initial Read

    read (prcunncode_dev,key=firm_id$+"J",dom=*next)

rem --- Main Read

    while more

        k$=key(prcunncode_dev,end=*break)
        if pos(firm_id$+"J"=k$)<>1 then break
        read record (prcunncode_dev) prcunncode$

rem --- Print

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
       
        OutVect!.addItem("")
        dim pbuf$(80)
        pbuf$(4)="Union Code: "+prcunncode.union_code$
        OutVect!.addItem(pbuf$)
        dim pbuf$(80)
        pbuf$(4)="Union Name: "+prcunncode.description$
        OutVect!.addItem(pbuf$)
        dim pbuf$(80)
        pbuf$(7)="Address: "+prcunncode.addr_line_1$
        pbuf$(46)="Telephone: "+fnmask$(prcunncode.phone_no$,m8$)
        OutVect!.addItem(pbuf$)
        dim pbuf$(80)
        pbuf$(14)=": "+prcunncode.addr_line_2$
        pbuf$(48)="Contact: "+prcunncode.contact_name$
        OutVect!.addItem(pbuf$)
        dim pbuf$(80)
        pbuf$(14)=": "+prcunncode.addr_line_3$
        OutVect!.addItem(pbuf$)
        dim pbuf$(80)
        pbuf$(6)="Zip Code: "+fnmask$(prcunncode.zip_code$,m7$)
        pbuf$(36)="Employer License No: "+prcunncode.union_id_no$
        OutVect!.addItem(pbuf$)
        t0=t0+1

rem --- Pay Codes

        dim pbuf$(80)
        pbuf$(5)="Pay Codes: "
        for x=1 to 10
            pbuf$(3*(x-1)+16)=field(prcunncode$,"pay_code_"+str(x:"00"))
        next x
        OutVect!.addItem(pbuf$)
        
rem --- Deduction Codes

        dim pbuf$(80)
        pbuf$(2)="Deduct Codes: "
        for x=1 to 10
            pbuf$(3*(x-1)+16)=field(prcunncode$,"deduct_code_"+str(x:"00"))
        next x
        OutVect!.addItem(pbuf$)
        
rem --- Contribution Codes

        dim pbuf$(80)
        pbuf$(1)="Contrib Codes: "
        for x=1 to 20
            pbuf$(3*(x-1)+16)=field(prcunncode$,"contrib_code_"+str(x:"00"))
        next x
        OutVect!.addItem(pbuf$)

    wend

done: rem --- Totals

    OutVect!.addItem("")
    OutVect!.addItem("")
    OutVect!.addItem("Total Records:"+str(t0))
    OutVect!.addItem("")
    goto std_exit


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
