rem --- Tax Code Maintenance Listing
rem --- Program prm_cc v8.0.0 03Jun2008 (prm_cc)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/03/2008 04:31:18)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
 
rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem ---  column heading

    l=headings+1
    if status<>0 then exitto std_exit

    dim columns$[17,17]
    columns=17
    columns$[0,0]="Tax^Code",       columns$[0,1]="C",  columns$[0,2]="10"
    columns$[1,0]="Desc",           columns$[1,1]="C",  columns$[1,2]="10"
    columns$[2,0]="RC",             columns$[2,1]="C",  columns$[2,2]="4"  
    columns$[3,0]="T",              columns$[3,1]="C",  columns$[3,2]="2"   
    columns$[4,0]="Period^Taken",   columns$[4,1]="C",  columns$[4,2]="5"
    columns$[5,0]="P",              columns$[5,1]="C",  columns$[5,2]="2"
    columns$[6,0]="TC",             columns$[6,1]="C",  columns$[6,2]="4"
    columns$[7,0]="Spl",            columns$[7,1]="C",  columns$[7,2]="4"
    columns$[8,0]="Tax^Rate",       columns$[8,1]="N",  columns$[8,2]="5",  columns$[8,3]=m3$
    columns$[9,0]="Min^Limit",      columns$[9,1]="N",  columns$[9,2]="4",  columns$[9,3]=m1$
    columns$[10,0]="Max^Limit",     columns$[10,1]="N", columns$[10,2]="5", columns$[10,3]=m1$
    columns$[11,0]="W-2^Name",      columns$[11,1]="C", columns$[11,2]="9"
    columns$[12,0]="W-2^Type",      columns$[12,1]="C", columns$[12,2]="4"
    columns$[13,0]="Employer^ID",   columns$[13,1]="C", columns$[13,2]="10"
    columns$[14,0]="Calc^Seq",      columns$[14,1]="C", columns$[14,2]="5"
    columns$[15,0]="State ID^Code", columns$[15,1]="C", columns$[15,2]="7"
    columns$[16,0]="Total^To",      columns$[16,1]="C", columns$[16,2]="8"
    columns$[17,0]="Total^Op",      columns$[17,1]="C", columns$[17,2]="5"
    l=l+4

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="prc_taxcode",ids$[1]="PRC_TAXCODE"
    files$[2]="prs_params",ids$[2]="PRS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    prctaxcode_dev=channels[1]
    prsparams_dev=channels[2]

rem --- Dimension string templates

    dim prctaxcode$:templates$[1],prsparams$:templates$[2]

rem --- Retrieve parameter records

    prsparams_key$=firm_id$+"PR00"
    find record (prsparams_dev,key=prsparams_key$,err=std_missing_params) prsparams$

    call pgmdir$+"adc_getmask.aon","","PR","A","",m1$,0,0
    m1=len(m1$)
    call pgmdir$+"adc_getmask.aon","","PR","A","",m3$,0,0
    m3=len(m3$)

rem --- Initializations

    h0=80
    h=0
    headings=2
    when$=sysinfo.system_date$
    clock$=""
    l9=59
    l=l9+1,t0=0
    dim headings$[headings]
    headings$[0]=n1$
    headings$[1]=n4$+" Listing"
    more=1

rem --- Initial Read

    read (prctaxcode_dev,key=firm_id$+"C",dom=*next)

rem --- Main Read

    while more
        k$=key(prctaxcode_dev,end=*break)
        if pos(firm_id$+"C"=k$)<>1 then break
        read record (prctaxcode_dev) prctaxcode$

        xyz=fnblank(18)
        OutVect!.addItem(prctaxcode.tax_code$)
        OutVect!.addItem(prctaxcode.pr_code_desc$)
        OutVect!.addItem(prctaxcode.report_code$)
        OutVect!.addItem(prctaxcode.calc_type$)
        OutVect!.addItem(prctaxcode.pers_taken$)
        OutVect!.addItem(prctaxcode.regprem_flg$)
        OutVect!.addItem(prctaxcode.basis_tot_cd$)
        OutVect!.addItem(prctaxcode.special_flag$)
        OutVect!.addItem(str(prctaxcode.calc_rtamt))
        OutVect!.addItem(str(prctaxcode.min_limit))
        OutVect!.addItem(str(prctaxcode.max_limit))
        OutVect!.addItem(prctaxcode.tax_juris$)
        OutVect!.addItem(prctaxcode.tax_jur_type$)
        OutVect!.addItem(prctaxcode.federal_id$)
        OutVect!.addItem(prctaxcode.pr_calc_seq$)
        OutVect!.addItem(prctaxcode.state_id$)

        total_to$=""
        for x=1 to 5
            total_to$=total_to$+FIELD(prctaxcode$,"pr_total_to_"+str(x:"00"))+"  "
        next x
        OutVect!.addItem(total_to$)
        total_oper$=""
        for x=1 to 5
             total_oper$=total_oper$+FIELD(prctaxcode$,"pr_tot_oper_"+str(x:"00"))+"  "
        next x
        OutVect!.addItem(total_oper$)
        l=l+2
        t0=t0+1

    wend

done: rem --- End Of File

        xyz=fnblank(18)
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        xyz=fnblank(1)
        OutVect!.addItem("Total Records:")
        OutVect!.addItem(str(t0))
        xyz=fnblank(17)
    goto std_exit
 
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
