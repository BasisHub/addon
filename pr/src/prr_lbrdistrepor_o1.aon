rem --- Labor Distribution Report 2
rem --- Program prr_ib v8.0.0 02Jun2008 (prr_ib)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/02/2008 09:45:21)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock Files

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status=1 then goto std_exit

rem --- Initializations

        more=1
        l9=59
        l=l9+1,headings=4,width=132,page=0,when$=sysinfo.system_date$,clock$=""
        dim headings$[headings]
        headings$[0]=n1$
        headings$[1]="Payroll Distribution History Report"
        headings$[2]=h4$
        headings$[3]="[HEADER]"
        dim j$(120,"-"),t[7],u[7],r[7],s[7],x[7],y[7],a[11]
        m1$=prs01a.amount_mask$
        call pgmdir$+"adc_sizemask.aon",m1$,m1,10,13
        m0=20
        p9=pos(p9$="M1234NY")-1

        dim columns$[8,10]
        columns = 8

        columns$[0,0]="Employee ^No & Name",   columns$[0,1]="C",columns$[0,2]="30"
        columns$[1,0]="Regular",                columns$[1,1]="N",columns$[1,2]="10",columns$[1,3]=m1$
        columns$[2,0]="Overtime",               columns$[2,1]="N",columns$[2,2]="10",columns$[2,3]=m1$
        columns$[3,0]="Sick Pay",               columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m1$
        columns$[4,0]="Vacation",               columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m1$
        columns$[5,0]="Holiday",                columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$
        columns$[6,0]="Other Pay",              columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$
        columns$[7,0]="Other Pay",              columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$,columns$[7,10]="T"
        columns$[8,0]="Total Pay",              columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m1$,columns$[8,10]="T"

rem     retrieve template for FILE record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_PAYCODE","PRIMARY",prm10a_key_tpl$,table_chans$[all],status$
        dim prm10a_key$:prm10a_key_tpl$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_LABORDST","PRIMARY",prt05a_key_tpl$,table_chans$[all],status$
        dim prt05a_key$:prt05a_key_tpl$

rem --- Display Resource

        call pgmdir$+"adc_progress.aon","N","","","","",0,prm10a_dev,1,meter_num,status

rem --- Build Headings

        u0$=""
        u1$=""
        read (prm10a_dev,key=firm_id$+"HA",dom=*next)

    while more
        prm10a_key$=key(prm10a_dev,end=*break)
        if pos(firm_id$+"HA"=prm10a_key$)<>1 then break
        read record (prm10h_dev) prm10h$
        u0$=u0$+prm10h.report_code$
        x$=prm10h.pr_rpt_title$
        for x=1 to 10
            if x$(10,1)<>" " then exitto initial
            x$=" "+x$(1,9)
        next x
initial:
        u1$=u1$+x$
    wend

        dim x$(80)
        x$(1)=u1$
        x$(61)=" Other Pay Total Pay",u1$=x$

rem --- Init Read

        read (prt05a_dev,key=firm_id$,dom=*next)

rem --- Main Read

    while more

        prt05a_key$=key(prt05a_dev,end=done)
        if prt05a_key.firm_id$<>firm_id$ then goto done
        read record (prt05a_dev) prt05a$

rem --- Breaks

        if prt05a_key.dept_code$<>t0$ then gosub Dept_Break
        if prt05a_key.title_code$<>t1$ then gosub title_break
        if prt05a_key.employee_no$<>t2$ then gosub Employee_Break

rem --- Accumulate

        find record (prm10a_dev,key=firm_id$+"A"+prt05a.pay_code$,dom=*next) prm10a$
        x=pos(prm10a.report_code$=u0$,2)
        if x>0 then let x=int(x/2)+1
        if x>6 then let x=0
        if p9$<>"Y" then 

            if p9=0 then
                x[x]=x[x]+prt05a.mtd_amount
                y[x]=y[x]+prt05a.mtd_units

                t[x]=t[x]+prt05a.mtd_amount
                u[x]=u[x]+prt05a.mtd_units

                r[x]=r[x]+prt05a.mtd_amount
                s[x]=s[x]+prt05a.mtd_units

                v[x]=v[x]+prt05a.mtd_amount
                w[x]=w[x]+prt05a.mtd_units

                x[7]=x[7]+prt05a.mtd_amount
                y[7]=y[7]+prt05a.mtd_units

                t[7]=t[7]+prt05a.mtd_amount
                u[7]=u[7]+prt05a.mtd_units

                r[7]=r[7]+prt05a.mtd_amount
                s[7]=s[7]+prt05a.mtd_units

                v[7]=v[7]+prt05a.mtd_amount
                w[7]=w[7]+prt05a.mtd_units
            endif

            if p9=5 then
                x[x]=x[x]+prt05a.nmtd_amt
                y[x]=y[x]+prt05a.nmtd_units

                t[x]=t[x]+prt05a.nmtd_amt
                u[x]=u[x]+prt05a.nmtd_units

                r[x]=r[x]+prt05a.nmtd_amt
                s[x]=s[x]+prt05a.nmtd_units

                v[x]=v[x]+prt05a.nmtd_amt
                w[x]=w[x]+prt05a.nmtd_units

                x[7]=x[7]+prt05a.nmtd_amt
                y[7]=y[7]+prt05a.nmtd_units

                t[7]=t[7]+prt05a.nmtd_amt
                u[7]=u[7]+prt05a.nmtd_units

                r[7]=r[7]+prt05a.nmtd_amt
                s[7]=s[7]+prt05a.nmtd_units

                v[7]=v[7]+prt05a.nmtd_amt
                w[7]=w[7]+prt05a.nmtd_units
            endif

            if p9>=1 and p9<=4 then
                x[x]=x[x]+num(FIELD(prt05a$,"qtr_amt_"+str(p9:"00")))
                y[x]=y[x]+num(FIELD(prt05a$,"qtr_units_"+str(p9:"00")))

                t[x]=t[x]+num(FIELD(prt05a$,"qtr_amt_"+str(p9:"00")))
                u[x]=u[x]+num(FIELD(prt05a$,"qtr_units_"+str(p9:"00")))

                r[x]=r[x]+num(FIELD(prt05a$,"qtr_amt_"+str(p9:"00")))
                s[x]=s[x]+num(FIELD(prt05a$,"qtr_units_"+str(p9:"00")))

                v[x]=v[x]+num(FIELD(prt05a$,"qtr_amt_"+str(p9:"00")))
                w[x]=w[x]+num(FIELD(prt05a$,"qtr_units_"+str(p9:"00")))

                x[7]=x[7]+num(FIELD(prt05a$,"qtr_amt_"+str(p9:"00")))
                y[7]=y[7]+num(FIELD(prt05a$,"qtr_units_"+str(p9:"00")))

                t[7]=t[7]+num(FIELD(prt05a$,"qtr_amt_"+str(p9:"00")))
                u[7]=u[7]+num(FIELD(prt05a$,"qtr_units_"+str(p9:"00")))

                r[7]=r[7]+num(FIELD(prt05a$,"qtr_amt_"+str(p9:"00")))
                s[7]=s[7]+num(FIELD(prt05a$,"qtr_units_"+str(p9:"00")))

                v[7]=v[7]+num(FIELD(prt05a$,"qtr_amt_"+str(p9:"00")))
                w[7]=w[7]+num(FIELD(prt05a$,"qtr_units_"+str(p9:"00")))
            endif

            continue
        endif
        
rem --- YTD

        x0=prt05a.qtr_amt_01+prt05a.qtr_amt_02+prt05a.qtr_amt_03+prt05a.qtr_amt_04
        x1=prt05a.qtr_units_01+prt05a.qtr_units_02+prt05a.qtr_units_03+prt05a.qtr_units_04
        x[x]=x[x]+x0
        y[x]=y[x]+x1
        t[x]=t[x]+x0
        u[x]=u[x]+x1
        r[x]=r[x]+x0
        s[x]=s[x]+x1
        v[x]=v[x]+x0
        w[x]=w[x]+x1

        x[7]=x[7]+x0
        y[7]=y[7]+x1
        t[7]=t[7]+x0
        u[7]=u[7]+x1
        r[7]=r[7]+x0
        s[7]=s[7]+x1
        v[7]=v[7]+x0
        w[7]=w[7]+x1

    wend

done: rem --- Totals

        t9$="E"
        h5$=""
        gosub Dept_Break
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        OutVect!.addItem("Grand Totals:")
        OutVect!.addItem(str(t[1]:m1$))
        OutVect!.addItem(str(t[2]:m1$))
        OutVect!.addItem(str(t[3]:m1$))
        OutVect!.addItem(str(t[4]:m1$))
        OutVect!.addItem(str(t[5]:m1$))
        OutVect!.addItem(str(t[6]:m1$))
        OutVect!.addItem(str(t[0]:m1$))
        OutVect!.addItem(str(t[7]:m1$))
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk=fnblank(1)
        OutVect!.addItem(str(u[1]:m1$))
        OutVect!.addItem(str(u[2]:m1$))
        OutVect!.addItem(str(u[3]:m1$))
        OutVect!.addItem(str(u[4]:m1$))
        OutVect!.addItem(str(u[5]:m1$))
        OutVect!.addItem(str(u[6]:m1$))
        OutVect!.addItem(str(u[0]:m1$))
        OutVect!.addItem(str(u[7]:m1$))
        
        x0=u0-t[7]
        x1=u1-u[7]

        OutVect!.addItem("Budget")
        xwk=fnblank(7)
        OutVect!.addItem(str(u0:m1$))
        xwk=fnblank(8)
        OutVect!.addItem(str(u1:m1$))

        OutVect!.addItem("Variance")
        xwk=fnblank(7)
        OutVect!.addItem(str(x0:m1$))
        xwk=fnblank(8)
        OutVect!.addItem(str(x1:m1$))

        goto std_exit


sub_heading: rem --- Subheading

        OutVect!.addItem(h5$)
        xwk=fnblank(8)
        l=l+2
        return

dept_break: rem --- Dept Break


        if t0$<>"" then 
            t9$="0"
            gosub title_break
            if t9$="0" then let t9$=""

            xwk=fnblank(9)
            TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
            OutVect!.addItem("Dept Totals:")
            OutVect!.addItem(str(r[1]:m1$))
            OutVect!.addItem(str(r[2]:m1$))
            OutVect!.addItem(str(r[3]:m1$))
            OutVect!.addItem(str(r[4]:m1$))
            OutVect!.addItem(str(r[5]:m1$))
            OutVect!.addItem(str(r[6]:m1$))
            OutVect!.addItem(str(r[0]:m1$))
            OutVect!.addItem(str(r[7]:m1$))

            TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
            OutVect!.addItem("          ")
            OutVect!.addItem(str(s[1]:m1$))
            OutVect!.addItem(str(s[2]:m1$))
            OutVect!.addItem(str(s[3]:m1$))
            OutVect!.addItem(str(s[4]:m1$))
            OutVect!.addItem(str(s[5]:m1$))
            OutVect!.addItem(str(s[6]:m1$))
            OutVect!.addItem(str(s[0]:m1$))
            OutVect!.addItem(str(s[7]:m1$))

            x1=p8*prm10e.budget_hrs
            x0=x1*prm10e.bud_hr_cost,x2=x0-r[7],x3=x1-s[7]

            OutVect!.addItem("Budget")
            xwk=fnblank(7)
            OutVect!.addItem(str(x0:m1$))
            xwk=fnblank(8)
            OutVect!.addItem(str(x1:m1$))

            OutVect!.addItem("Variance")
            xwk=fnblank(7)
            OutVect!.addItem(str(x2:m1$))
            xwk=fnblank(8)
            OutVect!.addItem(str(x3:m1$))

            u0=u0+x0
            u1=u1+x1
            l=l9+1
        endif
        if t9$="E" then return
        dim r[7],s[7]
        t0$=prt05a.dept_code$
        t1$=""
        h3$=""
        find record (prm10e_dev,key=firm_id$+"E"+prt05a.dept_code$,dom=header) prm10e$
        h3$=prm10e.code_desc$
        x=pos("  "=h3$)
        if x>1 then let h3$=prm10e.code_desc$(1,x-1)
header:

        subheading$=h3$
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        HdrVect!.addItem(subheading$)
        return

employee_break: rem --- Employee Break

        if t2$<>"" then 

                call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                x0=0
                for x=1 to 7
                    if x[x]<>0 then exitto report_print
                next x
report_print:


                OutVect!.addItem(fnmask$(t2$(1,p[0]),m0$))
                xwk=fnblank(6)

                for f=1 to 6

                    if x[f]<>0 then
                        OutVect!.addItem(str(x[f]:m1$))
                    endif

                next f

                if x[0]<>0 then
                    OutVect!.addItem(str(x[0]:m1$))
                endif
                
                OutVect!.addItem(str(x[7]:m1$))


                OutVect!.addItem(x1$)
                xwk=fnblank(6)

                for f=1 to 6
                    if y[f]<>0 then
                        OutVect!.addItem(str(y[f]:m1$))
                    endif
                next f

                if y[0]<>0 then
                    OutVect!.addItem(str(y[0]:m1$))
                endif

                OutVect!.addItem(str(y[7]:m1$))

                l=l+3
                l1=l1+1
                dim x[7],y[7]
        endif

        if t9$<>"" then return
        t2$=prt05a.employee_no$
        dim x[7],y[7]
        x1$="Not On File"
        find record (prm01a_dev,key=firm_id$+t2$,dom=return_1) prm01a$
        q9=pos("  "=prm01a.empl_surname$)-1
        if q9<1 then let q9=16
        x1$=prm01a.empl_surname$(1,q9)+", "+prm01a.empl_givname$+"."
return_1:

        return

title_break: rem --- Title Break

        if t1$<>"" then 
            if t9$="" then let t9$="1"
            gosub employee_break
            if t9$="1" then let t9$=""
            if l1<>1 then 

            xwk=fnblank(9)
            OutVect!.addItem("          ")
            OutVect!.addItem(str(v[1]:m1$))
            OutVect!.addItem(str(v[2]:m1$))
            OutVect!.addItem(str(v[3]:m1$))
            OutVect!.addItem(str(v[4]:m1$))
            OutVect!.addItem(str(v[5]:m1$))
            OutVect!.addItem(str(v[6]:m1$))
            OutVect!.addItem(str(v[0]:m1$))
            OutVect!.addItem(str(v[7]:m1$))

            OutVect!.addItem("          ")
            OutVect!.addItem(str(w[1]:m1$))
            OutVect!.addItem(str(w[2]:m1$))
            OutVect!.addItem(str(w[3]:m1$))
            OutVect!.addItem(str(w[4]:m1$))
            OutVect!.addItem(str(w[5]:m1$))
            OutVect!.addItem(str(w[6]:m1$))
            OutVect!.addItem(str(w[0]:m1$))
            OutVect!.addItem(str(w[7]:m1$))

            l=l+3
            endif
            dim v[7],w[7]
        endif
        if t9$<>"" then return
        t1$=prt05a_key.title_code$
        h5$="Not On File**",l1=0,t2$=""
        dim v[7],w[7]
        find record (prm10f_dev,key=firm_id$+"F"+t1$,dom=header_1) prm10f$
        h5$=prm10f.code_desc$

header_1:
        gosub sub_heading
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
