rem --- Daily Entry Register
rem --- Program prr_ua v8.0.0 02Jun2008 (prr_ua)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/02/2008 09:44:06)
rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
rem 11Nov96 JJD: Allow "through date" transaction qualification for printing and updating (705-785) (Requires corresponding SCN to PRU.FA)


        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=6,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="pre-02",ids$[1]="PRE_DAYTIME"
        files$[2]="prm-01",ids$[2]="PRM_EMPLMAST"
        files$[3]="prm-10",ids$[3]="PRC_DEPTCODE"
        files$[4]="prm-10",ids$[4]="PRC_RPRTCODE"
        files$[5]="prs_params",ids$[5]="PRS_PARAMS"
        files$[6]="prs_period",ids$[6]="PRS_PERIOD"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        pre02a_dev=channels[1]
        prm01a_dev=channels[2]
        prm10e_dev=channels[3]
        prm10h_dev=channels[4]
        prs01a_dev=channels[5]
        prs01b_dev=channels[6]

rem --- Dimension string templates

        dim pre02a$:templates$[1],prm01a$:templates$[2],prm10e$:templates$[3],
:       prm10h$:templates$[4],prs01a$:templates$[5],prs01b$:templates$[6]

rem --- Assign form input values to local variables

        through_date$=Option!.getOptionData("report_date")

rem --- Retrieve parameter records

        prs01a_key$=firm_id$+"PR00"
        find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$
        prs01b_key$=firm_id$+"PR01"
        find record (prs01b_dev,key=prs01b_key$,err=std_missing_params) prs01b$

rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="PR",n3$=sysinfo.task_desc$
        find record (prs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) prs01a$
        find record (prs01b_dev,key=firm_id$+n2$+"01",dom=std_missing_params) prs01b$
        h4$="Pay Period Ending "+fndate$(prs01b.pay_end_date$)
        dim p[4]
        p[0]=num(prs01a.empl_no_len$)
        p[1]=num(prs01a.max_empl_no$)
        p[3]=num(prs01a.dept_size$)
        p[4]=num(prs01a.precision$)

initializations: rem --- Initializations

        dim a[2],t[2],s[2],u[2],headings$[3]
        l9=59
        l=l9+1,page=0,width=80,headings=3,when$=sysinfo.system_date$,clock$=""
        headings$[0]=n1$
        headings$[1]=n3$,headings$[2]=h4$
		call stbl("+DIR_PGM")+"adc_getmask.aon","","PR","A","",m1$,0,m1
		call stbl("+DIR_PGM")+"adc_getmask.aon","","PR","I","",m0$,0,m0
		call stbl("+DIR_PGM")+"adc_getmask.aon","","PR","U","",m2$,0,m2
		call stbl("+DIR_PGM")+"adc_getmask.aon","","PR","R","",m3$,0,m3
        if through_date$="" then
            headings$[3]="All Transactions"
        else
            headings$[3]="All Transactions Through "+fndate$(through_date$)
        endif
        more=1

        dim columns$[6,10]
        columns = 6

        columns$[0,0]="Emp.No & Name",      columns$[0,1]="C",columns$[0,2]="30"
        columns$[1,0]="Seq",                columns$[1,1]="C",columns$[1,2]="8"
        columns$[2,0]="Date",               columns$[2,1]="C",columns$[2,2]="8"
        columns$[3,0]="EC  TC  DC",         columns$[3,1]="C",columns$[3,2]="8"
        columns$[4,0]="Rate",               columns$[4,1]="N",columns$[4,2]="8",columns$[4,3]=m3$
        columns$[5,0]="      Units",        columns$[5,1]="N",columns$[5,2]="8",columns$[5,3]=m2$,columns$[5,10]="T"
        columns$[6,0]=" Amount",            columns$[6,1]="N",columns$[6,2]="8",columns$[6,3]=m1$,columns$[6,10]="T"

rem retrieve template for FILE record key

         call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_RPRTCODE","PRIMARY",prm10h_key_tpl$,table_chans$[all],status$
         dim prm10h_key$:prm10h_key_tpl$

         call stbl("+DIR_SYP")+"bac_key_template.bbj","PRE_DAYTIME","PRIMARY",pre02a_key_tpl$,table_chans$[all],status$
         dim pre02a_key$:pre02a_key_tpl$



rem --- Run Report?
        
        msg_id$="AON_RUN_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message
        if msg_opt$<>"Y" then goto std_exit


rem --- Display Resource

        
build_headings: rem --- Build Headings

        
        call pgmdir$+"adc_progress.aon","N","","","","",0,prm10h_dev,1,meter_num,status
        u0$=""
        u1$=""
        read (prm10h_dev,key=firm_id$+"H"+"A",dom=*next)
        prm10h_key$=key(prm10h_dev,end=init_read)
        if prm10h.firm_id$+prm10h.record_id_h$+prm10h.report_type$=firm_id$+"H"+"A" then 
            read record (prm10h_dev) prm10h$
            u0$=u0$+prm10h.report_code$
            x$=prm10h.pr_rpt_title$
        endif

init_read: rem --- Init Read
        
        precision p[4]
        read (pre02a_dev,key=firm_id$,dom=*next)

rem --- Main Read

        while more
            
            pre02a_key$=key(pre02a_dev,end=done)
            if pre02a_key.firm_id$<>firm_id$ then goto done
            read record (pre02a_dev) pre02a$
            if through_date$<>"" then
                if pre02a.trans_date$>through_date$ then
                    continue
                endif
            endif
            precision 2; let pre02a.extended_amt=pre02a.rate*pre02a.units*1; precision p[4]
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            if pre02a_key.firm_id$<>firm_id$ then goto done

rem --- Employee

            dim b1$(240)
            find record (prm01a_dev,key=pre02a.firm_id$+pre02a.employee_no$,dom=*next) prm01a$

rem --- Breaks

            if pre02a_key.employee_no$(1,p[3])<>t0$ then gosub dept_break
            if pre02a_key.employee_no$<>t1$ then gosub employee_break

rem --- Print


            
            xwk=fnblank(1)
            OutVect!.addItem(pre02a.pr_time_seq$)
            OutVect!.addItem(fndate$(pre02a.trans_date$))
            OutVect!.addItem(pre02a.pay_code$+" "+pre02a.title_code$+" "+pre02a.dept_code$)
            OutVect!.addItem(str(pre02a.rate:m3$))
            OutVect!.addItem(str(pre02a.units:m2$))
            OutVect!.addItem(str(pre02a.extended_amt:m1$))

            l=l+1

            t[1]=t[1]+pre02a.units
            u[1]=u[1]+pre02a.units
            s[1]=s[1]+pre02a.units
            t[2]=t[2]+pre02a.extended_amt
            u[2]=u[2]+pre02a.extended_amt
            s[2]=s[2]+pre02a.extended_amt

rem --- Next

        wend

done: rem --- Totals

            t9$="E"
            gosub dept_break
            TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
            OutVect!.addItem("Grand Totals:")
            xwk=fnblank(4)
            OutVect!.addItem(str(u[1]:m2$))
            OutVect!.addItem(str(u[2]:m1$))
            run pgmdir$+"pru_dailyentry.aon"


dept_heading: rem --- Dept Heading

            if p[3]=0 then return
                OutVect!.addItem(t0$+" "+h3$)
                xwk=fnblank(6)
                l=l+2
                return

employee_heading: rem --- Employee Heading



            OutVect!.addItem(fnmask$(t1$(1,p[0]),m0$)+" "+h5$)
            xwk=fnblank(6)
            l=l+1
            return

dept_break: rem --- Dept Break

            if t0$<>"" then 
                if t9$="" then let t9$="D"
                gosub employee_break
                if t9$="D" then let t9$=""
                t1$=""
                if p[3]<>0 then 

                    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                    OutVect!.addItem("Dept Totals:")
                    xwk=fnblank(4)
                    OutVect!.addItem(str(s[1]:m2$))
                    OutVect!.addItem(str(s[2]:m1$))

                    l=l+2
                endif
            endif
            if t9$="E" then return
            dim s[2]
            t0$=pre02a.employee_no$(1,p[3])
            if p[3]=0 then return
            h3$=""
            find record (prm10e_dev,key=firm_id$+"E"+prm01a.dept_code$,dom=head_dept) prm10e$
            h3$=prm10e.code_desc$
head_dept:
            gosub dept_heading
            return

employee_break: rem --- Employee Break

            if t1$<>"" then 

                    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                    OutVect!.addItem("Employee Totals:")
                    xwk=fnblank(4)
                    OutVect!.addItem(str(t[1]:m2$))
                    OutVect!.addItem(str(t[2]:m1$))
                    xwk=fnblank(7)

                l=l+1
            endif
            if t9$<>"" then return
            dim t[2]
            t1$=pre02a.employee_no$
            h5$="***Not On File***",l2=0
            h5$=prm01a.empl_surname$+prm01a.empl_givname$
            x=pos("  "=h5$(1,16))
            if x>1 then let h5$=prm01a.empl_surname$(1,x-1)+", "+prm01a.empl_givname$
            if x<=1 then let h5$=prm01a.empl_surname$+", "+prm01a.empl_givname$
            gosub employee_heading
            return



rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend


rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src
rem #include disp_message.src

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return
	
rem #endinclude disp_message.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
