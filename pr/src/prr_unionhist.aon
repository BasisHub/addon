rem --- Union History Report
rem --- Program prr_unionhist v8.0.0 10Jun2008 (prr_va)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/10/2008 03:24:00)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="prm-01",ids$[2]="PRM_EMPLMAST"
    files$[3]="prc_unncode",ids$[3]="PRC_UNNCODE"
    files$[4]="prs_params",ids$[4]="PRS_PARAMS"
    files$[5]="prs_report",ids$[5]="PRS_REPORT"
    files$[6]="prt-04",ids$[6]="PRT_UNNHIST"
    files$[7]="prc_contcode",ids$[7]="PRC_CONTCODE"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01a_dev=channels[1]
    prm01a_dev=channels[2]
    prm10j_dev=channels[3]
    prs01a_dev=channels[4]
    prs01c_dev=channels[5]
    prt04a_dev=channels[6]
    prm10d_dev=channels[7]

rem --- Dimension string templates

    dim gls01a$:templates$[1],prm01a$:templates$[2],prm10j$:templates$[3],
:       prs01a$:templates$[4],prs01c$:templates$[5],prt04a$:templates$[6],
:       prm10d$:templates$[7]

rem --- Assign form input values to local variables

    from_union$=Option!.getOptionData("union_code_1")
    thru_union$=Option!.getOptionData("union_code_2")
    year_month$=Option!.getOptionData("year_month")
    sundays$=""
    for i=1 to 5
        a$=Option!.getOptionData("ending_date_"+str(i))
        if a$<>"" then sundays$=sundays$+a$
    next i

    
rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    prs01a_key$=firm_id$+"PR00"
    find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$
    prs01c_key$=firm_id$+"PR02"
    find record (prs01c_dev,key=prs01c_key$,err=std_missing_params) prs01c$

rem --- Parameters

    dim p[4]
    p[0]=num(prs01a.empl_no_len$)
    p[1]=num(prs01a.max_empl_no$),p[3]=num(prs01a.dept_size$)
    find record (prs01c_dev,key=firm_id$+"PR"+"02",dom=*next) prs01c$

initializations: rem --- Initializations

    h1$=sysinfo.firm_name$
    h2$=sysinfo.task_desc$
    l9=59
    l=l9+1
    dashline$=fill(80,"-")
    unders$=fill(35,"_")
    dim s[10],t[10],w[10]
    m2$="###- "
    m9$="000-00-0000"
    m0=20
    m1$=prs01a.amount_mask$
    m3$=prs01a.rate_mask$
    m1=len(m1$),g5=len(g5$)
    x=pos("-"=p1$)
    if x>0 then let p[4]=x-1
    m7$="00000"
    m7=num(prs01a.zip_length$)
    if m7=9 then let m7$=m7$+"-0000"
    h8$="N"
    if sysinfo.printer_id$(1,1)="L" then x=0 else x=1
    if x>0 then let h8$="Y"
    more=1

rem --- Get Date For Monday Of First Week

    juldate=jul(num(year_month$(3,4)),num(year_month$(1,2)),1)
    h6$=date(juldate:"%Ml %Yl")
    xday=juldate
    xmonth$=year_month$(1,2),monday$=""
    while more
        xday$=date(xday:"%Ds%Yl%Mz%Dz")
        xday=xday-1
        if xday$(1,3)<>"Mon" then continue
        break
    wend
    monday$=xday$(4,4)+xday$(8)


done: rem --- Correct?

    run pgmdir$+"prr_unionhist_o1.aon"
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
