rem --- Check History Report
rem --- Program prr_db v8.0.0 04Jun2008 (prr_db)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/04/2008 03:16:09)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$


        call pgmdir$+"adc_progress.aon","N","","","","",0,prt02_dev,1,meter_num,status

rem retrieve template for FILE record key

        call stbl("+DIR_SYP")+"bac_key_template.bbj","PRC_RPRTCODE","PRIMARY",prm10h_key_tpl$,table_chans$[all],status$
        dim prm10h_key$:prm10h_key_tpl$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","PRT_EMPLCHCK","PRIMARY",prt02a_key_tpl$,table_chans$[all],status$
        dim prt02a_key$:prt02a_key_tpl$


rem --- Build Headings

        more=1
        width=132
        page=0,headings=4,clock$="",when$=sysinfo.system_date$
        dim headings$[headings]
        l9=59
        l=l9+1,headings$[0]=n1$,headings$[1]=n3$
        x0$="First Date"
        x1$="Last Date"
        if fromdate$<>"" then let x0$=fndate$(fromdate$)
        if thrudate$<>"" then let x1$=fndate$(thrudate$)
        h4$="From: "+x0$+" Thru: "+x1$
        x0$="First Employee"
        x1$="Last Employee"
        if fromempl$<>"" then let x0$="Employee: "+fnmask$(fromempl$(1,p[0]),m0$)
        if thruempl$<>"" then let x1$="Employee: "+fnmask$(thruempl$(1,p[0]),m0$)
        h5$="From: "+x0$+" Thru: "+x1$
        headings$[2]=h4$
        headings$[3]=h5$
               
rem --- Build Column Headings from PRM-10H
        
        rptheads$="    "
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        read (prm10h_dev,key=firm_id$+"H",dom=*next)

        while more
           
            prm10h_key$=key(prm10h_dev,end=*break)
            if prm10h_key.firm_id$+prm10h_key.record_id_h$<>firm_id$+"H" then break
            read record (prm10h_dev) prm10h$
            if prm10h_key.report_type$<>"H" then continue
            x$=prm10h.pr_rpt_title$
            for x=1 to 10
                if x$(10,1)<>" " then break
                x$=" "+x$(1,9) 
            next x

            rptheads$=rptheads$+"     "+x$
        wend

            dim X$(132)
            x$(1)=rptheads$
            x$(120)="   Total"
            rptheads$=x$

rem --- Column Heading

            dim columns$[3,10]
                columns = 3
                columns$[0,0]="Employee No & Name",      columns$[0,1]="C",columns$[0,2]="15"
                columns$[1,0]="Check ",                  columns$[1,1]="C",columns$[1,2]="8"
                columns$[2,0]="Date",                    columns$[2,1]="C",columns$[2,2]="12"
                columns$[3,0]=rptheads$,                 columns$[3,1]="N",columns$[3,2]="98"      

rem --- Init Data

            read (prt02_dev,key=firm_id$+fromempl$,dom=*next)
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status


rem --- Main Read

        while more
            prt02a_key$=key(prt02_dev,end=*break)
            if prt02a_key.firm_id$<>firm_id$ then break
            read record (prt02_dev) prt02a$
            if thruempl$<>"" then if thruempl$<prt02a.employee_no$(1,len(thruempl$)) then break
                
rem --- Breaks

            if len(prt02a.firm_id$+prt02a.employee_no$+prt02a.check_no$+prt02a.check_date$+prt02a.pr_chk_type$)<22 then continue
            if fromdate$<>"" then if prt02a.check_date$<fromdate$ then  continue
            if thrudate$<>"" then if prt02a.check_date$>thrudate$ then  continue  
            if prt02a_key.employee_no$(1,p[0])<>t0$ then gosub emp_break

            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

print_heading: rem --- Print Heading


rem --- Add for Totals

            for i=0 to 7
                if i=0 then
                    emptot[i]=emptot[i]+prt02a.check_amount
                    grandtot[i]=grandtot[i]+prt02a.check_amount
                else
                    emptot[i]=emptot[i]+num(FIELD(prt02a$,"earndeduct_"+str(i:"00")))
                    grandtot[i]=grandtot[i]+num(FIELD(prt02a$,"earndeduct_"+str(i:"00")))
                endif
            next i

rem --- Print
                   
                   OutVect!.addItem("")
                   OutVect!.addItem(prt02a.check_no$)
                   OutVect!.addItem(fndate$(prt02a.check_date$))
                   OutVect!.addItem("       "+str(prt02a.earndeduct_01:m1$)+str(prt02a.earndeduct_02:m1$)+"   "+str(prt02a.earndeduct_03:m1$)+"  "+str(prt02a.earndeduct_04:m1$)+"    "+str(prt02a.earndeduct_05:m1$)+str(prt02a.earndeduct_06:m1$)+"   "+str(prt02a.earndeduct_07:m1$)+"     "+str(prt02a.check_amount:m1$))
            l=l+1
        wend

rem --- Totals
                    t9$="E"
                    gosub emp_break
                    xwk = fnblank(4)
                    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                    xwk = fnblank(2)
                    OutVect!.addItem("Grand Totals:")
                    OutVect!.addItem("       "+str(grandtot[1]:m1$)+str(grandtot[2]:m1$)+"   "+str(grandtot[3]:m1$)+"  "+str(grandtot[4]:m1$)+"    "+str(grandtot[5]:m1$)+str(grandtot[6]:m1$)+"   "+str(grandtot[7]:m1$)+"     "+str(grandtot[0]:m1$))
                    goto std_exit

sub_heading: rem --- Sub Heading

                    OutVect!.addItem(prt02a.employee_no$+" "+x1$)
                    xwk = fnblank(3)
                    l=l+2
                    return

emp_break: rem --- Emp Break

            if t0$<>"" then
                if p[0]<>0 then

                    xwk = fnblank(4)
                    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                    xwk = fnblank(2)
                    OutVect!.addItem("Emp Totals:")
                    OutVect!.addItem("       "+str(emptot[1]:m1$)+str(emptot[2]:m1$)+"   "+str(emptot[3]:m1$)+"  "+str(emptot[4]:m1$)+"    "+str(emptot[5]:m1$)+str(emptot[6]:m1$)+"   "+str(emptot[7]:m1$)+"     "+str(emptot[0]:m1$))

                    l=l+2
                endif
            endif

            if t9$="E" then return
            dim emptot[7]
            t0$=prt02a_key.employee_no$(1,p[0])
            if p[0]=0 then return

rem --- Get Name

            x1$="**** Not On File ****"
            find record (prm01_dev,key=prt02a.firm_id$+prt02a.employee_no$,dom=print_heading) prm01a$
            q=pos("  "=prm01a.empl_surname$)-1
            if q<1 then let q=16
            x1$=prm01a.empl_surname$(1,q)+", "+prm01a.empl_givname$(1,1)+"."
            gosub sub_heading
            return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
