rem glr - Account/Financial Report Xref
rem Program glr_acctxref v8.0.0 20May2006 (glr_gb)
rem Created by adx_progconv.bbx v1.0.3 (05/20/2006 03:26:07)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- This program produces the Account/Report cross-reference report.
rem --- It's run by two different front ends, gle_acctxref for the regular
rem --- Account/Report xref and by gle_consacctxref for the consolidated
rem --- report.

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif
	rd_alias_id$=cvs(rd_alias_id$,4)

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="glm-01",ids$[2]="GLM_ACCT"
    files$[3]="glm-10",ids$[3]="GLM_ACCTBREAKS"
    files$[4]="glm-11",ids$[4]="GLM_FINASSIGN"
    files$[5]="glm-21",ids$[5]="GLM_COFINASSIGN"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[2]
    glm10_dev=channels[3]
    glm11_dev=channels[4]
    glm21_dev=channels[5]

rem --- Dimension string templates

    dim glm10a$:templates$[3]
    dim glm01a$:templates$[2],glm11a$:templates$[4],glm21a$:templates$[5]

rem --- Retrieve parameter records

    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",m0$,0,m0
    headings=1
    call stbl("+DIR_PGM")+"glc_regroup.aon",glm10_dev,firm_id$,break$,desc$

rem --- Initializations

    consolidated$="Y"
    dim headings$[headings],o[6]
    m=max(8,m0)
    h0=132
    when$=sysinfo.system_date$
    clock$=""
    page=0
    l9=59
    l=l9+1
    more=1
    moredetail=1
    headings$[0]=cvs(sysinfo.firm_name$,2)
    headings$[1]=cvs(sysinfo.task_desc$,2)

rem --- Headings and print positions

    dim columns$[11,10]
    columns = 11

    columns$[0,0]=Translate!.getTranslation("AON_ACCOUNT"),            columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),        columns$[1,1]="C",columns$[1,2]="25"
    columns$[2,0]=Translate!.getTranslation("AON_ASSIGN_1"),       columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_ASSIGN_2"),       columns$[3,1]="C",columns$[3,2]="10"
    columns$[4,0]=Translate!.getTranslation("AON_ASSIGN_3"),       columns$[4,1]="C",columns$[4,2]="10"
    columns$[5,0]=Translate!.getTranslation("AON_ASSIGN_4"),       columns$[5,1]="C",columns$[5,2]="10"
    columns$[6,0]=Translate!.getTranslation("AON_ASSIGN_5"),       columns$[6,1]="C",columns$[6,2]="10"
    columns$[7,0]=Translate!.getTranslation("AON_ASSIGN_6"),       columns$[7,1]="C",columns$[7,2]="10"
    columns$[8,0]=Translate!.getTranslation("AON_ASSIGN_7"),       columns$[8,1]="C",columns$[8,2]="9"
    columns$[9,0]=Translate!.getTranslation("AON_ASSIGN_8"),       columns$[9,1]="C",columns$[9,2]="9"
    columns$[10,0]=Translate!.getTranslation("AON_ASSIGN_9"),      columns$[10,1]="C",columns$[10,2]="9"
    columns$[11,0]=Translate!.getTranslation("AON_ASSIGN_10"),     columns$[11,1]="C",columns$[11,2]="9"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Print positions

    o[0]=5
    o[1]=o[0]+m+1
    o[6]=h0-13
    for x=5 to 2 step -1
        o[x]=o[x+1]-15
    next x
    width=o[2]-o[1]
    if width>35 width=35

rem --- Get user approval to proceed

        msg_id$="AON_RUN_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message
        if msg_opt$<>"Y" then goto std_exit

rem --- Open printer, start progress meter and position files

    call pgmdir$+"adc_progress.aon","NC","","","","",0,glm01_dev,1,0,ignore_status
    read (glm01_dev,key=firm_id$,dom=*next)

rem --- Read next glm-01 record

    while more
          glm01_key$=key(glm01_dev,end=*break)
          if pos(firm_id$=glm01_key$)<>1 break
          read record (glm01_dev)glm01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          account_break: rem --- Chart of Account Break?

          if break$<>"" if glm01a.gl_account$<break$(1,10) goto format
          if break$="" goto format

          rem --- Print subtotal and new heading

          title$=cvs(desc$(1,20),2)
          if l+4>l9 gosub set_linecount
:              else gosub subheading
  
new_heading: rem --- Strip current heading

          if len(break$)>10 break$=break$(10+1),desc$=desc$(21)
          if len(break$)<=10 break$="",desc$=""
          if break$<>"" if pos(" "<>break$(1,10))=0 goto new_heading
          goto account_break

          format: rem --- Format print line: Regular

          dim buf$[10]
          cnt=1
          if consolidated$="Y" goto consolidated
          read (glm11_dev,key=glm01_key$,dom=*next)
          while moredetail
                k$=key(glm11_dev,end=*break)
                if pos(glm01_key$=k$(1,12))<>1 or cnt>10 break
                read record (glm11_dev,key=k$)glm11a$
                check$=glm11a.gl_rpt_no$+glm11a.gl_rpt_line$
                if cvs(check$,2)<>"" buf$[cnt]=glm11a.gl_rpt_no$+"-"+glm11a.gl_rpt_line$
                cnt=cnt+1
          wend
          goto print_detail

          consolidated: rem --- Format print line: Consolidated

          read (glm21_dev,key=glm01_key$,dom=*next)
          while moredetail
                k$=key(glm21_dev,end=*break)
                if pos(glm01_key$=k$(1,12))<>1 or cnt>10 break
                read record (glm21_dev,key=k$)glm21a$
                check$=glm21a.gl_co_rpt_no$+glm21a.gl_co_rpt_line$
                if cvs(check$,2)<>"" buf$[cnt]=glm21a.gl_co_rpt_no$+"-"+glm21a.gl_co_rpt_line$
                cnt=cnt+1
          wend

          print_detail: rem --- Print detail lines

          if l+2>l9 gosub set_linecount
          OutVect!.addItem(str(fnmask$(glm01a.gl_account$(1,m0),m0$)))
          OutVect!.addItem(glm01a.gl_acct_desc$(1,width))
          OutVect!.addItem(buf$[1])
          OutVect!.addItem(buf$[2])
          OutVect!.addItem(buf$[3])
          OutVect!.addItem(buf$[4])
          OutVect!.addItem(buf$[5])
          OutVect!.addItem(buf$[6])
          OutVect!.addItem(buf$[7])
          OutVect!.addItem(buf$[8])
          OutVect!.addItem(buf$[9])
          OutVect!.addItem(buf$[10])
   
          l=l+1
    wend

rem --- All done

    goto std_exit

set_linecount: rem --- Set Line count

    l=headings+1
    l=l+3

subheading: rem --- Subheading
    
    OutVect!.addItem(title$)
    xwk = fnblank(11)

    l=l+3
    return

rem --- Functions

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return
    
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
