rem glr - 13 Period Financial Report Printing (Report Overlay)
rem Program glr_13period v8.0.0 09Jun2006 (glr_fc)
rem Created by adx_progconv.bbx v1.0.3 (06/09/2006 03:06:52)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- This program is the second overlay of the report generation
rem --- cycle. A list of financial reports to be produced is contained
rem --- in the 13 Period Financial Report Selections (gle-05) file.
rem --- The preceding overlay (glr_headings) reads the next report
rem --- from the file, assembles the report headings and then runs
rem --- this program. Once the report is printed, this program runs
rem --- glr_headings and the cycle is repeated until the last report
rem --- in the 13 Period Financial Report Selections (gle-05) file
rem --- has been run.

    setesc std_error
    seterr std_error

rem --- Initializations

	width = 132
    dim a[mp],u[mp],pa[mp],pu[mp],ta[mp],tu[mp],h$(width)
    more=1
    last$=""
    m1$="-#######"
    m1=len(m1$)
    total_recs=0    

rem --- Build 13 period headings

	dim print_pers$[mp]
    headings=3
    n=period+(fiscal_pers-12)
    for x=1 to mp-1
        x$=str(n)+" "+field(gls01a$,"abbr_name_"+str(n:"00"))
        p=24+m1*x 
        y=len(x$)-1
        h$(p-y)=x$
		print_pers$[x]=x$
        n=n+1
        if n>fiscal_pers then n=1
    next x
    x$=Translate!.getTranslation("AON_TOTAL")
    p=24+m1*x
    y=len(x$)-1
    h$(p-y)=x$
	print_pers$[mp]=x$
    heading$[headings]=h$
	gosub report_heading
	
rem --- Position Financial Report Detail (glm-22) file

    glm22_key$=gle04a.firm_id$+gle04a.gl_rpt_no$
    read record (glm22_dev,key=glm22_key$,dom=*next) glm22a$

rem --- Read next Financial Report Detail (glm-22) record

    while more
          k$=key(glm22_dev,end=*break)
          if pos(glm22_key$=k$)<>1 break
          read record (glm22_dev) glm22a$
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status                    
          editing_code$=glm22a.editing_code$
          input_total$=glm22a.input_total$
          output$=""
          for x=1 to 5
              output$=output$+field(glm22a$,"output_total_"+str(x:"00"))
          next x
          for x=1 to 5
              output$=output$+pad(field(glm22a$,"output_oper_"+str(x:"00")),1); rem fixed length field at end of sting problem
          next x

          rem --- If it's a heading line just go print it

          if glm22a.line_type$="H" goto print_line

          rem --- This section of the program deals with retrieving the period
          rem --- record for the line, performing any totaling and then updating
          rem --- the totals record for the line.

          rem --- Retrieve 13 Period Financial Report Amount (gle-08) record

          dim pa[mp],pu[mp]
          gle08_key$=k$
          dim gle08a$:fattr(gle08a$)
          extract record (gle08_dev,key=gle08_key$,dom=*next) gle08a$; rem Advisory Locking
          if gle08a.gl_updt_seq$<>sequence$
             gle08a.firm_id$=glm22a.firm_id$
             gle08a.gl_rpt_no$=glm22a.gl_rpt_no$
             gle08a.gl_rpt_line$=pad(glm22a.gl_rpt_line$,4); rem fixed length field at end of sting problem
             gle08a.gl_updt_seq$=sequence$
             gle08a$=field(gle08a$)
             write record (gle08_dev) gle08a$
          else
             read(gle08_dev,dom=*next)
          endif

          rem --- Move amounts and units to working arrays

          for x=0 to mp-1
              pa[x]=nfield(gle08a$,"period_amt_"+str(x+1:"00"))
              pu[x]=nfield(gle08a$,"period_units_"+str(x+1:"00"))
              a[x]=pa[x]
              u[x]=pu[x]
          next x

          rem --- If an input total exists for this line, retrieve the
          rem --- Report Totals (gle-09) record and add them to the working
          rem --- array values.

          totalnumber$=input_total$
          if pos(totalnumber$="   000",3)=0
             totalnumber$=input_total$
             update_sequence$=printflag$
             gosub get_totals
             gosub totals_to_line
             gosub totals_to_period
          endif

          rem --- Accumulate balance if specified

          if pos("B"=editing_code$)=0 goto total_out
          bucket=total_pers+2
          if bucket>12 bucket=bucket-12
          for x=1 to mp
              if bucket<>x and (bucket<>1 or x<>mp) 
                 pa[x]=pa[x]+pa[x-1]
                 pu[x]=pu[x]+pu[x-1]
                 a[x]=pa[x]
                 u[x]=pu[x]
              endif
          next x

          total_out: rem --- Update Report Totals (gle-09) records as required

          if cvs(output$,2)="" goto print_line
          for x=0 to 4
              totalnumber$=output$(x*3+1,3)
              operator$=output$(x+16,1)
              if pos(totalnumber$="   000",3) continue
              update_sequence$=printflag$
              sign=1
              if operator$="-" sign=-1
              gosub get_totals
              if pos("C"=editing_code$) dim ta[mp],tu[mp]
              gosub period_to_totals
              gle09a.firm_id$=firm_id$
              gle09a.totals_type$="T"
              gle09a.total_no$=totalnumber$
              gle09a.gl_updt_seq$=update_sequence$
              gle09_key$=gle09a.firm_id$+gle09a.totals_type$+gle09a.total_no$
              for y=1 to mp
                  field gle09a$,"period_amt_"+str(y:"00")=ta[y-1]
                  field gle09a$,"period_units_"+str(y:"00")=tu[y-1]
              next y
              gle09a$=field(gle09a$)
              write record (gle09_dev) gle09a$
          next x

          print_line: rem --- Perform any required editing and print the line

          rem --- Editing code definitions:

          rem --- S = Space (blank line)
          rem --- U = Underline
          rem --- D = Double underline
          rem --- P = Page break
          rem --- - = Change sign
          rem --- C = Clear totals
          rem --- F = Favorable (reverses sign of a variance column)
          rem --- $ = $ mask

          rem --- Page break?

          if pos("P"=editing_code$)
			BrkVect!.addItem(str(OutVect!.size()/(columns+1))); rem gosub report_heading
		  endif

          rem --- Blank line?

          if pos("S"=editing_code$)
			  x=fnblank(columns+1)
              l=l+1
          endif

          rem --- Underline?

          char$=""
          dim print_buf$(width)
          if pos("U"=editing_code$) char$=fill(int(m1*1.7),"-")
          if pos("D"=editing_code$) char$=fill(m1,"=")
          if char$<>""
			OutVect!.addItem("")
             for x=1 to mp
                 dim underline$(m1,char$)
				 OutVect!.addItem(char$)
             next x
             l=l+1
          endif
 
          rem --- Change sign?

          if pos("-"=editing_code$)
             for x=0 to mp
                 a[x]=-a[x]
             next x
          endif

          rem --- Non-printing line?
 
          if glm22a.line_type$="N" continue

          rem --- Print line description
 
          line_desc$=cvs(glm22a.gl_line_desc$,2)
          dim print_buf$(width)
          if line_desc$<>"" 
			print_buf$(num(glm22a.default_pos$)+1,len(line_desc$))=line_desc$
		  endif	
		OutVect!.addItem(cvs(print_buf$,2))			
          rem --- If this isn't a heading line, print amounts

          if glm22a.line_type$<>"H"
             tot_line=0
             first=iff(fiscal_pers=13,1,0)
             last=iff(fiscal_pers=13,mp-1,mp-2)
             for x=first to last
					OutVect!.addItem(str(a[x]))
                    tot_line=tot_line+a[x]
             next x
			 OutVect!.addItem(str(tot_line))
		  else
		     x=fnblank(columns)
          endif

          l=l+1

          rem --- Loop back for next record

    wend

rem --- Run report headings overlay to get the next report

    next_overlay$=pgmdir$+"glr_headings.aon"
    goto std_exit

    rem run pgmdir$+"glr_headings.aon"

report_heading: rem --- Report heading

    if OutVect!=null()
        rem --- Document initializations
        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

		columns=mp
        dim columns$[columns,10];rem dummy, since won't actually have docout column headings
        columns$[0,0]="  ",columns$[0,1]="C",columns$[0,2]="20"
		for i=1 to mp
            columns$[i,0]=print_pers$[i],columns$[i,1]="N",columns$[i,2]="8",columns$[i,3]=m1$
		next i

		call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]
	endif
        rem Create a new page
        l=headings+1
        page=page+1
        clock$=date(0:"%hz:%mz %p")
		headings$[0]=cvs(sysinfo.firm_name$,2)
		headings$[1]=cvs(heading$[1],3) + " " + audit$

        rem --- Print remaining heading lines

        if headings<2 return
        for i=2 to headings - 1
			headings$[i]=cvs(heading$[i],3)
        next i

return

get_totals: rem --- Retrieve Report Totals (gle-09) record

    if totalnumber$=last$ return
    dim ta[mp],tu[mp]
    dim gle09a$:fattr(gle09a$)
    gle09a.firm_id$=firm_id$
    gle09a.totals_type$="T"
    gle09a.total_no$=totalnumber$
    gle09_key$=gle09a.firm_id$+gle09a.totals_type$+gle09a.total_no$
    extract record (gle09_dev,key=gle09_key$,dom=*next) gle09a$; rem Advisory Locking
    if gle09a.gl_updt_seq$=update_sequence$
       for y=0 to mp-1
           ta[y]=nfield(gle09a$,"period_amt_"+str(y+1:"00"))
           tu[y]=nfield(gle09a$,"period_units_"+str(y+1:"00"))
       next y
    endif
    last$=totalnumber$
    gle09a.gl_updt_seq$=update_sequence$
    return

totals_to_line: rem --- Add total amounts to line amounts

    for y=0 to mp
        a[y]=a[y]+ta[y]
        u[y]=u[y]+tu[y]
        if pos("F"=editing_code$) 
           a[y]=-a[y]
           u[y]=-u[y]
        endif
    next y
    return

period_to_totals: rem --- Add period amounts to total amounts

    for y=0 to mp
        ta[y]=ta[y]+pa[y]*sign
        tu[y]=tu[y]+pu[y]*sign
    next y
    return

totals_to_period: rem --- Add total amounts to period amounts

    for y=0 to mp
        pa[y]=pa[y]+ta[y]
        pu[y]=pu[y]+tu[y]
    next y
    return

rem --- Functions

    def fnppos(q,q$)=q-min(1,pos("$"=q$))
    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fnclock$(q$)=date(0:"%hz:%mz %p")

	rem --- Create blank cell(s) in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
