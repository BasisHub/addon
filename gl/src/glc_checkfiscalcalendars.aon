rem --- Check For Required Fiscal Calendars
rem --- Program glc_checkfiscalcalendars.aon

rem --- AddonSoftware Version 17.00 - Apr2017
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- theFirm$     : The firm ID to check. Use blank ("") for all firms. (input)
rem --- Translate!   : bbtranslator.bbj::BBTranslator
rem --- status       : Status/0=No error (returned)

    seterr std_error
    setesc std_error

    use ::bbtranslator.bbj::BBTranslator
    declare BBTranslator Translate!
    
    enter theFirm$,Translate!,status

rem --- Initializations

    status=0

rem --- Get program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="gls_calendar",ids$[2]="GLS_CALENDAR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],
:                           templates$[all],channels[all],batch,status
    if status goto std_exit
    gls_params_dev=channels[1]
    gls_calendar_dev=channels[2]

    dim gls_params$:templates$[1]
    dim gls_calendar$:templates$[2]

rem --- Check for fiscal calendars for current firm
    read(gls_params_dev,key=theFirm$,dom=*next)
    while 1
        readrecord(gls_params_dev,end=*break)gls_params$
        if cvs(theFirm$,2)<>"" and  gls_params.firm_id$<>theFirm$ then break
        if gls_params.gl$+gls_params.sequence_00$<>"GL00" then continue
        fiscal_year=num(gls_params.current_year$)

        if gls_params.gl_yr_closed$<>"Y" then
            fiscal_year=fiscal_year-1
        endif

        rem --- Check for fiscal calendars for prior/current/next year
        for yr=-1 to 1
            calendar_missing=1
            read(gls_calendar_dev,key=gls_params.firm_id$+str(fiscal_year+yr),dom=*next); calendar_missing=0
            if calendar_missing then
                msg_id$="GL_FIRM_MISSING_CAL"
                dim msg_tokens$[2]
                msg_tokens$[1]=gls_params.firm_id$
                if gls_params.gl_yr_closed$="Y" then
                    switch yr
                        case -1
                            year$=Translate!.getTranslation("AON_PRIOR","Prior")+" ("+str(fiscal_year+yr)+")"
                            break
                        case 0
                            year$=Translate!.getTranslation("AON_CURRENT","Current")+" ("+str(fiscal_year+yr)+")"
                            break
                        case 1
                            year$=Translate!.getTranslation("AON_NEXT","Next")+" ("+str(fiscal_year+yr)+")"
                            break
                    swend
                else
                    switch yr
                        case -1
                            year$=Translate!.getTranslation("AON_PRIOR","Prior")
                            year$=year$+"-"+year$+" ("+str(fiscal_year+yr)+")"
                            break
                        case 0
                            year$=Translate!.getTranslation("AON_PRIOR","Prior")+" ("+str(fiscal_year+yr)+")"
                            break
                        case 1
                            year$=Translate!.getTranslation("AON_CURRENT","Current")+" ("+str(fiscal_year+yr)+")"
                            break
                    swend
                endif
                msg_tokens$[2]=year$
                gosub disp_message
            endif
        next yr
    wend

done: rem --- All done

    close(gls_params_dev,err=*next)
    close(gls_calendar_dev,err=*next)
    goto std_exit

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    return
   
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src