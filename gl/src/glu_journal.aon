rem glu - Journal Entry Update
rem Program glu_journal v8.0.0 24Apr2006 (glu_ga)
rem Created by adx_progconv.bbx v1.0.1 (04/24/2006 03:32:40)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

    next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    task$=cvs(sysinfo.task_desc$,2)

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glt-04",ids$[1]="GLE_DAILYDETAIL"
    files$[2]="aps_params",ids$[2]="APS_PARAMS";rem "aps-01 for Bank Recon Flag"
    files$[3]="glm-05",ids$[3]="GLM_BANKMASTER";rem "glm-05 for Bank-GL Accts"
    files$[4]="glt-15",ids$[4]="GLT_BANKOTHER"
    files$[5]="ars_params",ids$[5]="ARS_PARAMS";rem --- also check AR Params for Bank Recon Flag

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_update

    glt04_dev=channels[1]
    aps01_dev=channels[2]
    glm05_dev=channels[3]
    glt15_dev=channels[4]
    ars01_dev=channels[5]
 
rem --- Retrieve templates

    glcontrol_template$=stbl("+GLCONTROL_TPL",err=*next)
    dim glcontrol$:glcontrol_template$
    dim aps01a$:templates$[2],glm05a$:templates$[3],glt15a$:templates$[4],ars01a$:templates$[5]

	
rem --- Retrieve parameter records	
	aps01a_key$=firm_id$+"AP00"
	find record (aps01_dev,key=aps01a_key$,err=*next) aps01a$

	ars01a_key$=firm_id$+"AR00"
	find record (ars01_dev,key=ars01a_key$,err=*next) ars01a$
    
    if aps01a.br_interface$="Y" or ars01a.br_interface$="Y" then bankrec=1
	
rem --- Parameters

    dim info$[20]
    call pgmdir$+"adc_application.aon","GL",info$[all]
    gl$=info$[9]

rem --- Initializations

    more=1
    last$=""
    action$="N"
	
rem --- Build List of GL Codes that have Bank Reconciliation Enabled
    bank_gl_codes$=""
    if bankrec then
      read (glm05_dev,key=firm_id$,dom=*next)
      while 1
        readrecord(glm05_dev,end=*break)glm05a$
        if firm_id$<>glm05a.firm_id$ then
           break
        endif
        bank_gl_codes$=bank_gl_codes$+glm05a.gl_account$
      wend
    endif	

rem --- Options

    msg_id$="AON_UPDT_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" goto std_exit_no_update

rem --- Start up progress meter

    call pgmdir$+"adc_progress.aon","N","","",Translate!.getTranslation("AON_UPDATING"),"",13,glw11_dev,1,meter_num,status

rem --- Position gle-01

    read (gle01_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)

rem --- Read through the work file and post the records to the daily detail file

    while more
          k$=key(gle01_dev,end=*break)
          if pos(firm_id$+batch_no$=k$)<>1 break
          read record(gle01_dev) gle01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status

          rem --- Set Journal ID in +GLCONTROL

          if gle01a.journal_id$<>last$ 
               last$=gle01a.journal_id$
               glm03_key$=firm_id$+gle01a.journal_id$
               find record (glm03_dev,key=glm03_key$,dom=*next)glm03a$
               glcontrol$=stbl("+GLCONTROL",err=*next)
               glcontrol.journal_id$=glm03a.journal_id$
               glcontrol.permit_je$="Y"
               glcontrol.post_yr_end$=glm03a.post_yr_end$
               glcontrol.post_locked$=glm03a.post_locked$
               x$=stbl("+GLCONTROL",glcontrol$)
          endif

          rem --- Position gle-11
          
          read(gle11_dev,key=gle01a.firm_id$+gle01a.journal_id$+gle01a.je_trans_id$,dom=*next)

          rem --- Loop through gle-11

          while more
                        
              k1$=key(gle11_dev,end=*break)
              if pos(gle01a.firm_id$+gle01a.journal_id$+gle01a.je_trans_id$=k1$)<>1 break
              read record(gle11_dev) gle11a$    
              if cvs(gle01a.cycle_code$,3)<>"" 
                ref3$=Translate!.getTranslation("AON_CYCLE_")+gle01a.cycle_code$
              else
                ref3$=""
              endif
              post_amt=gle11a.debit_amt-gle11a.credit_amt

              rem --- Post record in the daily detail file

              call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,notused,gle11a.gl_account$,gle01a.trans_date$,
:               gle01a.je_trans_id$,gle11a.line_no$,ref3$,
:               gle11a.memo_1024$,post_amt,gle11a.units,status
	        if bankrec then
                  trans_date$=gle01a.trans_date$
                  gosub bank_rec
                endif

              rem --- Reversal?

              if cvs(gle01a.reverse_date$,2)<>"" 
                post_amt=-post_amt
                gle11a.units=-gle11a.units
                call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,notused,
:                   gle11a.gl_account$,gle01a.reverse_date$,
:                   gle01a.je_trans_id$,gle11a.line_no$,
:                   ref3$,gle11a.memo_1024$,
:                   post_amt,gle11a.units,status
	            if bankrec then
                       trans_date$=gle01a.reverse_date$
                       gosub bank_rec
                    endif
              endif
              remove(gle11_dev,key=k1$)
          wend
          remove(gle01_dev,key=gle01a.firm_id$+gle01a.journal_id$+gle01a.je_trans_id$)
    wend

rem --- All done

    rem --- For reasons I don't quite understand, JE register creates glw-11 (which is fine),
    rem --- but here in the update we aren't calling glc_update to forward glw-11 to glt-04.
    rem --- We're calling glc_glpost to write directly to glt-04,
    rem --- so need to clearpartial on glw-11 (to make up for the fact that glc_update would've removed the glw-11 recs).

    rem --- Clear trans for this firm/process/batch from glw-11 work file (if not batching, batch_no$ is zero, and will clear all recs this firm/process)
    if gl$="Y"
        rec_pfx$=firm_id$+process_id$+batch_no$
        call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
    endif

    call pgmdir$+"glc_ctlupdate.aon",status
    call pgmdir$+"glc_ctldelete.aon",status
    call pgmdir$+"adc_batchdelete.aon",status
    goto std_exit

bank_rec:
    if pos(gle11a.gl_account$=bank_gl_codes$,10) then
        redim glt15a$
        glt15a.firm_id$=firm_id$
        glt15a.gl_account$=gle11a.gl_account$
        glt15a.trans_type$="A"
        glt15a.posted_code$="O"
        glt15a.cash_rec_cd$=""
        glt15a.trns_date$=trans_date$
        glt15a.trans_amt=post_amt
        glt15a.trans_no$=str(jul(num(trans_date$(1,4)),num(trans_date$(5,2)),num(trans_date$(7,2))):"0000000")
        glt15a.description$=gle11a.gl_post_memo$
        seq_write:
        glt15a.trans_no$=str(num(glt15a.trans_no$)+1)
        glt15a$=field(glt15a$)
        writerecord(glt15_dev,dom=seq_write)glt15a$
    endif
return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
