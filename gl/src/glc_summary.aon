rem glc - Return/Update GL account summary numeric values
rem Program glc_summary v8.0.0 11May2006

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- This program accepts the templated GL summary record
rem --- (and optional amount and units arrays) and either returns
rem --- the numeric values from the record in those arrays or
rem --- sets the templated fields using the contents of them.

rem --- ACTION$: Action code (Input)
rem ---          R=Return summary record numerics in A[ALL]/U[ALL]
rem ---          U=Update summary record with numerics in A[ALL]/U[ALL]
rem --- REC$   : GL Account summary record (Input/Returned)
rem --- A[ALL] : Amounts (Input/Returned)
rem --- U[ALL] : Units (Input/Returned)
rem --- STATUS : Status/0=No Error (Returned)

    seterr std_error
    setesc std_error
    enter action$,rec$,a[all],u[all],status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Get the record template and summary record

    template$=fattr(rec$)
    dim glm02a$:template$
    glm02a$=rec$

rem --- Initializations

    mp=13
    action=pos(action$="RU")
    return_values=1
    update_values=2

rem --- Either extract the numerics and return them or set the template
rem --- variables based on the values passed in.

    switch action
           case return_values
                dim a[mp],u[mp]
                a[0]=glm02a.begin_amt
                u[0]=glm02a.begin_units
                for x=1 to mp
                    a[x]=nfield(glm02a$,"period_amt_"+str(x:"00"))
                    u[x]=nfield(glm02a$,"period_units_"+str(x:"00"))
                next x
                break
           case update_values
                field glm02a$,"begin_amt"=a[0]
                field glm02a$,"begin_units"=u[0]
                for x=1 to mp
                    field glm02a$,"period_amt_"+str(x:"00")=a[x]
                    field glm02a$,"period_units_"+str(x:"00")=u[x]
                next x
           break
           case default
           break
     swend           

rem --- All done

    rec$=glm02a$
    goto std_exit

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
