rem glr - Chart Of Accounts Listing
rem Program glr_acctlist v8.0.0 12Apr2006 (glr_kb)
rem Created by adx_progconv.bbx v1.0.0 (04/12/2006 10:26:13)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)    

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="glm-01",ids$[2]="GLM_ACCT"
    files$[3]="glm-10",ids$[3]="GLM_ACCTBREAKS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],                           templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01_dev=channels[1]
    glm01_dev=channels[2]
    glm10_dev=channels[3]

rem --- Dimension string templates

    dim gls01a$:templates$[1],glm01a$:templates$[2]

rem --- Parameters

    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    rem m0$=gls01a.acct_output$ -- getting mask from Barista masks file instead
    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",m0$,0,m0
    break$=""
    desc$=""
    call pgmdir$+"glc_regroup.aon",glm10_dev,firm_id$,break$,desc$
    headings=2

rem --- Assign input values to local variables

    begacct$=cvs(Option!.getOptionData("GL_ACCOUNT_1"),2)
    endacct$=cvs(Option!.getOptionData("GL_ACCOUNT_2"),2)
    wildcard$=Option!.getOptionData("GL_WILDCARD")

  rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    dim headings$[headings]
    headings$[0]=cvs(sysinfo.firm_name$,2)
    headings$[1]=cvs(sysinfo.task_desc$,2)
    when$=sysinfo.system_date$
    clock$=""
    h3$=""
    width=80
    page=0
    l9=59
    l=l9+1
    number=0
    more=1
    total_recs=0
    alice$="Asset    LiabilityIncome   Capital  Expense  "

rem --- Account range heading

    x$=Translate!.getTranslation("AON_FROM_")
    y$=""
    if begacct$="" y$=Translate!.getTranslation("AON_FIRST"),x$=x$+y$+Translate!.getTranslation("AON__ACCOUNT")       else y$=fnmask$(begacct$(1,m0),m0$),x$=x$+Translate!.getTranslation("AON_ACCOUNT_")+y$
    x$=x$+Translate!.getTranslation("AON__THROUGH_"),y$=""
    if endacct$="" y$=Translate!.getTranslation("AON_LAST"),x$=x$+y$+Translate!.getTranslation("AON__ACCOUNT")      else y$=fnmask$(endacct$(1,m0),m0$),x$=x$+Translate!.getTranslation("AON_ACCOUNT_")+y$
    headings$[2]=x$

rem --- Document columns

    columns=3
    dim columns$[columns,3]
    columns$[0,0]=Translate!.getTranslation("AON_ACCOUNT_BREAK"),columns$[0,1]="C",columns$[0,2]="30"
    columns$[1,0]=Translate!.getTranslation("AON_ACCOUNT"),columns$[1,1]="C",columns$[1,2]=str(m0)
    columns$[2,0]=Translate!.getTranslation("AON_DESCRIPTION"),columns$[2,1]="C",columns$[2,2]="30"
    columns$[3,0]=Translate!.getTranslation("AON_TYPE"),columns$[3,1]="C",columns$[3,2]="15"
	
rem --- Open printer, start progress meter and position files

    call pgmdir$+"adc_progress.aon","NC","GLM_ACCT","","","",0,glm01_dev,1,meter_num,status
    k$=firm_id$+begacct$
    if begacct$<>"" then k$=k$(1,len(k$)-1)
    read (glm01_dev,key=k$,dom=*next)

rem --- Top Of Loop

    while more
          k$=key(glm01_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (glm01_dev)glm01a$
          if endacct$<>"" if glm01a.gl_account$>endacct$ break
          gosub wildcard
          if status continue
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
          number=number+1

          breaks: rem --- Breaks

          if break$="" goto print_rec
          if break$<>"" if glm01a.gl_account$<break$(1,10) goto print_rec
          h3$=desc$(1,20)    
          h4$=h3$

          next_break: rem --- Position to next chart of accounts break

          if len(break$)>=10
             break$=break$(11)
             desc$=desc$(21)
          endif
          if len(break$)<10 break$=""
          if break$<>"" if cvs(break$(1,10),2)="" goto next_break
          goto breaks

          print_rec: rem --- Print record

          if h3$<>"" 
            gosub subheading
          else
            OutVect!.addItem("")
          endif

          OutVect!.addItem(fnmask$(glm01a.gl_account$,m0$))
          OutVect!.addItem(glm01a.gl_acct_desc$)
          OutVect!.addItem(alice$(pos(glm01a.gl_acct_type$=alice$,9),9))

rem --- Loop back for next record

    wend

rem --- All done

    if number=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    xwk=fnblank(4)
    OutVect!.addItem("")
    OutVect!.addItem(str(number))
    OutVect!.addItem(Translate!.getTranslation("AON_ACCOUNTS_LISTED"))
    OutVect!.addItem("")
    goto std_exit

subheading: rem --- Subheading

    xwk=fnblank(4)
    OutVect!.addItem(h3$)    
    h3$=""
    return

wildcard: rem --- Test account number against specified wildcard mask

    status=0
    if wildcard$="" return
    if wildcard<>len(wildcard$) wildcard=len(wildcard$)
    x$=fnmask$(glm01a.gl_account$(1,m0),m0$)
    for x=1 to wildcard
        if wildcard$(x,1)="?" continue
        if x$(x,1)<>wildcard$(x,1) status=1
    next x
    return

rem --- Functions

rem --- Create blank line in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" let q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") let q0=q0+1 else let q2$(q,1)="X"
              let q=q+1
        wend
        if len(q1$)>len(q2$)-q0 let q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end