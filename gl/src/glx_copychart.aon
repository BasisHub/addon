rem glx - Copy G/L Account Numbers
rem Program glx_copychart v8.0.0 12May2006 (glx_ba)
rem Created by adx_progconv.bbx v1.0.3 (05/12/2006 05:19:12)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT";rem "glm-01"
    files$[2]="glm-01",ids$[2]="GLM_ACCT";rem "glm-01"
    files$[3]="glm-11",ids$[3]="GLM_FINASSIGN";rem "glm-11"
    files$[4]="glm-11",ids$[4]="GLM_FINASSIGN";rem "glm-11"
    files$[5]="glm-21",ids$[5]="GLM_COFINASSIGN";rem "glm-21"
    files$[6]="glm-21",ids$[6]="GLM_COFINASSIGN";rem "glm-21"
    files$[7]="gls_params",ids$[7]=files$[7]; rem "gls-01


    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_update
    glm01_dev1=channels[1]
    glm01_dev2=channels[2]
    glm11_dev1=channels[3]
    glm11_dev2=channels[4]
    glm21_dev1=channels[5]
    glm21_dev2=channels[6]
    gls01_dev=channels[7]

rem --- Dimension string templates

    dim glm01a$:templates$[1],glm11a$:templates$[3],glm21a$:templates$[5],gls01a$:templates$[7]

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    
    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",m0$,0,m0            

rem --- Assign input values to local variables

    begfirm$=Option!.getOptionData("COMPANY_ID_FROM")
    endfirm$=Option!.getOptionData("COMPANY_ID_TO")
    begacct$=Option!.getOptionData("GL_ACCOUNT_1")
    endacct$=Option!.getOptionData("GL_ACCOUNT_2")
    wildcard$=Option!.getOptionData("GL_WILDCARD")
    overwrite$=Option!.getOptionData("YN_PROMPT")

rem --- Initializations

    more=1
    moredetail=1

rem --- Start progress meter and position file

    call pgmdir$+"adc_progress.aon","N","","","","",m0,glm01_dev1,1,meter_num,status
    read (glm01_dev1,key=begfirm$,dom=*next)

rem --- Copy accounts

    while more
          k$=key(glm01_dev1,end=*break)
          if pos(begfirm$=k$)<>1 break
          read record (glm01_dev1,key=k$)glm01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          if begacct$<>"" if k$(3)<begacct$ continue
          if endacct$<>"" if k$(3)>endacct$ break
          gosub wildcard
          if status continue
          glm01a.firm_id$=endfirm$
          glm01a_key2$=glm01a.firm_id$+glm01a.gl_account$
          extract record (glm01_dev2,key=glm01a_key2$,dom=*next)x$; rem Advisory Locking

          rem --- Copy Financial Report Assignments

          read (glm11_dev1,key=k$,dom=*next)
          while moredetail
                k11$=key(glm11_dev1,end=*break)
                if pos(k$=k11$)<>1 break
                read record (glm11_dev1,key=k11$)glm11a$
                glm11a.firm_id$=endfirm$
                glm11a_key2$=glm11a.firm_id$+glm11a.gl_account$+glm11a.assign_no$
                extract record (glm11_dev2,key=glm11a_key2$,dom=*next)x$; rem Advisory Locking
                if overwrite$="Y" 
                    write record (glm11_dev2)glm11a$
                else 
                    write record (glm11_dev2,dom=*next)glm11a$
                endif
          wend

          rem --- Copy Consolidated Financial Report Assignments

          read (glm21_dev1,key=k$,dom=*next)
          while moredetail
                k11$=key(glm21_dev1,end=*break)
                if pos(k$=k21$)<>1 break
                read record (glm21_dev1,key=k11$)glm21a$
                glm21a.firm_id$=endfirm$
                glm21a_key2$=glm21a.firm_id$+glm21a.gl_account$+glm21a.assign_no$
                extract record (glm21_dev2,key=glm21a_key2$,dom=*next)x$; rem Advisory Locking
                if overwrite$="Y" 
                    write record (glm21_dev2)glm21a$
                else 
                    write record (glm21_dev2,dom=*next)glm21a$
                endif
          wend

          rem --- Copy account master

          if overwrite$="Y" 
                write record (glm01_dev2)glm01a$
          else
                write record (glm01_dev2,dom=*next)glm01a$
          endif
    wend

rem --- All done

    goto std_exit

wildcard: rem --- Test account number against specified wildcard mask

    status=0
    if wildcard$="" return
    if wildcard<>len(wildcard$) wildcard=len(wildcard$)
    x$=fnmask$(glm01a.gl_account$(1,m0),m0$)
    for x=1 to wildcard
        if wildcard$(x,1)="?" continue
        if x$(x,1)<>wildcard$(x,1) status=1
    next x
    return

rem --- Functions

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    call stbl("+DIR_PGM")+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
