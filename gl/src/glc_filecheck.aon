rem glc - Period/Year End File Verification
rem Program glc_filecheck v8.0.0 15Apr2006 (glc_ia)
rem Created by adx_progconv.bbx v1.0.0 (04/15/2006 12:16:45)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- FIRM_ID$            : Firm for which year is being closed (Input)
rem --- RD_TABLE_CHANS$[ALL]: Barista's rd_table_chans$[all]
rem --- STATUS              : 0=No error (Returned)

    seterr std_error
    setesc std_exit
    enter firm_id$,rd_table_chans$[all],status

rem --- Get Translator Object

    use ::bbtranslator.bbj::BBTranslator
    declare BBTranslator Translate!
    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)

rem --- Open/Lock files

    num_files=3
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="GLE_JRNLHDR",open_opts$[1]="OTA"
    open_tables$[2]="GLE_ALLOCHDR",open_opts$[2]="OTA"
    open_tables$[3]="GLE_DAILYDETAIL",open_opts$[3]="OTA"
    
    gosub open_tables

rem --- Initializations

    dim descriptions$[num_files],message$[1]
    descriptions$[1]=Translate!.getTranslation("AON_JOURNAL_ENTRY")
    descriptions$[2]=Translate!.getTranslation("AON_ACCOUNT_ALLOCATION")
    descriptions$[3]=Translate!.getTranslation("AON_DAILY_DETAIL")

rem --- Check files to make sure they're empty and not in use

    for x=1 to num_files

        rem --- Is file empty?

        k$=key(num(open_chans$[x]),end=lock_file)
        if pos(firm_id$=k$)=1
           status=1
           message$[0]=descriptions$[x]+Translate!.getTranslation("AON__REGISTER_AND_UPDATE_MUST_BE_RUN.")
           break
        endif
 
        lock_file: rem --- Is file in use?

        lock (num(open_chans$[x]),err=file_in_use)
        unlock (num(open_chans$[x]),err=*next)
        continue

        file_in_use: rem --- File can't be locked

        status=2
        message$[0]=descriptions$[x]+Translate!.getTranslation("AON__IS_CURRENTLY_IN_USE.")
        break

        rem --- Next file
    
    next x

rem --- All Done

    if status call pgmdir$+"adc_stdmessage.aon",2,message$[all],0,0,0,v$,v3
    goto std_exit

open_tables: rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        goto std_exit
    endif

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    close (gle01_dev,err=*next)
    close (gle03_dev,err=*next)
    close (glt04_dev,err=*next)
    exit

rem #endinclude std_exit.src

    end
