rem glu - Close Fiscal Period
rem Program glu_periodend v8.0.0 08May2006 (glu_ca)
rem Created by adx_progconv.bbx v1.0.2 (05/08/2006 03:36:40)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=1,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01_dev=channels[1]

rem " --- Set templates

    dim gls01a$:templates$[1]

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    current_period=num(gls01a.current_per$)
    current_year=num(gls01a.current_year$)
    call pgmdir$+"adc_perioddates.aon",gls01_dev,current_period,current_year,begdate$,
:                                      enddate$,status

rem --- Parameters

    total_pers=num(gls01a.total_pers$)
    mp=13

rem --- Assign input values to local variables

    period$=gls01a.current_per$
    period=num(period$)
    year$=gls01a.current_year$
    year=num(year$)

rem --- Initializations

    period_name$=cvs(field(gls01a$,"period_name_"+str(period:"00")),2)

rem --- All transaction files empty?

    call pgmdir$+"glc_filecheck.aon",firm_id$,status
    if status goto std_exit_no_update

rem --- Confirm that this user REALLY wants to close the fiscal period

    msg_id$="CLOSE_PERIOD"
    dim msg_tokens$[2]
    msg_tokens$[0]=str(current_period)
    msg_tokens$[1]=fndate$(begdate$)
    msg_tokens$[2]=fndate$(enddate$)
    gosub disp_message
    if msg_opt$="N" goto std_exit_no_update

rem --- Close period

    field gls01a$,"locked_flag_"+str(period:"00")="Y"
    field gls01a$,"locked_date_"+str(period:"00")=sysinfo.system_date$
    if period=total_pers goto close_last_period
    if period=period period=period+1
                     gls01a.current_per$=str(period:"00")
    endif
    goto update_calendar

close_last_period: rem --- Closing last period of year

    for x=1 to mp    
        field gls01a$,"locked_flag_"+str(x:"00")="N"
        field gls01a$,"locked_date_"+str(x:"00")=""
    next x
    gls01a.gl_yr_closed$="N"
    gls01a.current_per$="01"
    year=year+1
    gls01a.current_year$=str(year:"0000")

update_calendar: rem --- Update fiscal calendar

    write record (gls01_dev,key=gls01a_key$)gls01a$

rem --- All done

    goto std_exit

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- Date function

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
