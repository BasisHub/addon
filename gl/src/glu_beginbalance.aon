rem glu - Update Beginning Balances
rem Program glu_beginbalance v8.0.0 12May2006 (glu_ka)
rem Created by adx_progconv.bbx v1.0.3 (05/12/2006 12:44:49)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- This program is run from two different menu options:

rem --- gle_beginbalance - Update Beginning Balances
rem --- gle_yearend      - Year End Update

rem --- The following arguments are supplied by these front-end programs:

rem --- PROGRAM$: Overlay to be run after the beginning balances program
rem ---         : (glu_beginbalance) finishes.
rem ---         : The Update Beginning Balances task passes bas_process_end.bbj
rem ---         : The Year End Update program passes glu_yearend.aon
rem --- PROMPT$ : Y=Update Beginning Balances (prompt for permission to update
rem ---         :   the register).
rem ---         : N=Year End Update (don't prompt for permission to update the
rem ---         :   register, update is automatically performed).
rem --- UPDATE$ : Y=Year End Update (user prompted for permission to close year).
rem ---         : N=Update Beginning Balances (user prompted for approval to
rem ---         :   produce the register).

    setesc std_error
    seterr std_error

rem --- Initializations

    next_overlay$="";rem --- clear next_var and outvect! so bas_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()
    more=1

rem --- Options

    if prompt$="Y" 
        msg_id$="AON_UPDT_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message
        if msg_opt$<>"Y" goto std_exit_no_update
    endif

rem --- Position File

    call pgmdir$+"adc_progress.aon","N","",Translate!.getTranslation("AON_UPDATE_BALS"),"","",m0,glw03_dev,1,meter_num,status
    total_recs=0
    read (glw03_dev,key=firm_id$,dom=*next)

rem --- Read next glw-03 record

    while more
          k$=key(glw03_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (glw03_dev,key=k$)glw03a$
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

          rem --- Retrieve glm-02 record

          dim glm02a$:fattr(glm02a$)
          glm02a.firm_id$=firm_id$
          glm02a.gl_account$=glw03a.gl_account$
          glm02a.record_id$="4"
          extract record (glm02_dev,key=glm02a.firm_id$+glm02a.gl_account$+glm02a.record_id$,dom=*next)glm02a$; rem Advisory Locking
          glm02a.begin_amt=glw03a.begin_amt
          glm02a.begin_units=glw03a.begin_units
          glm02a$=field(glm02a$)
          write record (glm02_dev)glm02a$
    wend

rem --- All done

    if prompt$="Y"
        msg_id$="UPDATE_COMPLETE"
        dim msg_tokens$[1]
        msg_opt$=""
        gosub disp_message
    endif
    
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    wait 1;rem --- give this progress meter a chance to clear before displaying next one
    
    run program$,err=std_exit

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
