rem glc - Determine the Balance of a GL Account
rem Program glc_balance v8.0.0 16Apr2006 (glc_ja)
rem Created by adx_progconv.bbx v1.0.0 (04/16/2006 06:14:43)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- ACCOUNT$ : GL Account to find the balance for (Input)
rem --- BALANCE  : Balance of this GL account as of the current GL period (Returned)
rem --- STATUS   : Status (Returned) 
rem ---            0 = No Error
rem ---            1 = +GLCONTROL global not found
rem ---            2 = GL Account master record not found
rem ---            3 = adc_fileopen call failed

    seterr std_error
    setesc std_error
    enter account$,balance,status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]="glm-02",ids$[2]="GLM_ACCTSUMMARY"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    glm02_dev=channels[2]

rem --- Dimension string templates

    dim glm01a$:templates$[1],glm02a$:templates$[2]

rem --- Parameters

    status=1
    glcontrol_template$=stbl("+GLCONTROL_TPL",err=std_exit)
    dim glcontrol$:glcontrol_template$
    glcontrol$=stbl("+GLCONTROL",err=std_exit)
    period=num(glcontrol.gl_period$)

rem --- Get Account Number

    status=2
    glm01_key$=firm_id$+account$
    find record (glm01_dev,key=glm01_key$,dom=std_exit)glm01a$

rem --- Determine year, get account summaries

    dim amounts[13],units[13]
    action$="R"
    if glcontrol.gl_yr_closed$="Y" glm02_key$=glm01_key$+"0" 
:                             else glm02_key$=glm01_key$+"4"
    find record (glm02_dev,key=glm02_key$,dom=*next)glm02a$
    call pgmdir$+"glc_summary.aon",action$,glm02a$,amounts[all],units[all],status

rem --- Add up balance

    balance=glm02a.begin_amt
    for x=1 to period
        balance=balance+amounts[x]
    next x

rem --- All done

    status=0
    goto std_exit

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    close (glm01_dev,err=*next)
    close (glm02_dev,err=*next)
    exit

rem #endinclude std_exit.src

    end
