rem glr - GL Daily Detail Register (Report Overlay)
rem Program glr_dailydetail v8.0.0 14May2006 (glr_db)
rem Created by adx_progconv.bbx v1.0.3 (05/14/2006 01:11:35)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)  
    
rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="glm-01",ids$[2]="GLM_ACCT"
    files$[3]="glm-03",ids$[3]="GLC_JOURNALCODE"
    files$[4]="glt-04",ids$[4]="GLE_DAILYDETAIL",options$[4]="L"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01_dev=channels[1]
    glm01_dev=channels[2]
    glm03_dev=channels[3]
    glt04_dev=channels[4]

rem --- Dimension string templates

    dim gls01a$:templates$[1],glm01a$:templates$[2],glm03a$:templates$[3],glt04a$:templates$[4]

rem --- Assign input values to local variables

    begacct$=Option!.getOptionData("GL_ACCOUNT_1")
    endacct$=Option!.getOptionData("GL_ACCOUNT_2")
    wildcard$=Option!.getOptionData("GL_WILDCARD")
    journal$=Option!.getOptionData("JOURNAL_ID_ENTRY")
    sequence$=Option!.getOptionData("REPORT_SEQ_DA")
    begaudit$=Option!.getOptionData("GL_ADT_NO_1")
    endaudit$=Option!.getOptionData("GL_ADT_NO_2")
    begdate$=Option!.getOptionData("TRNS_DATE_1")
    enddate$=Option!.getOptionData("TRNS_DATE_2")
    pagebreak$=Option!.getOptionData("PAGE_BREAK")
    if cvs(sequence$,2)="" sequence$="A"

rem --- Retrieve parameter records

    gls01a_key$=sysinfo.firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    total_periods=num(gls01a.total_pers$)
    period=num(gls01a.current_per$)
    year=num(gls01a.current_year$)
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","I","",m0$,0,acctlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","A","",m1$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","U","",m2$,0,0
    m0=len(m0$)
    headings=5
    width=132
    glm03a.firm_id$=firm_id$
    glm03a.journal_id$=journal$
    glm03a.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    glm03_key$=glm03a.firm_id$+glm03a.journal_id$
    if cvs(journal$,2)<>"" find record (glm03_dev,key=glm03_key$,dom=*next) glm03a$

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()  
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    dim headings$[headings],o[12],at[2],dt[2],jt[2],rt[2],xt[2]
    if pagebreak$="Y" dim headings$[headings+1]
    number=0
    more=1
    keynum$="PRIMARY"
    if sequence$="D" keynum$="AO_TRDAT_PROCESS"
    t0$=""
    t1$=""
    t2$=""
    t3$=""
    h0$=""
    h1$=""
    h2$=""
    recs=0
    total_recs=0

rem --- Document columns

    if sequence$="A"

        columns=6
        dim columns$[6,10]
        columns$[0,0]=Translate!.getTranslation("AON_DATE"),columns$[0,1]="C",columns$[0,2]="8"
        columns$[1,0]=Translate!.getTranslation("AON_ACCOUNT"),columns$[1,1]="C",columns$[1,2]=str(acctlen),columns$[1,3]=m0$
        columns$[2,0]=Translate!.getTranslation("AON_DESCRIPTION"),columns$[2,1]="C",columns$[2,2]="30"
        columns$[3,0]=Translate!.getTranslation("AON_MEMO/REFERENCE"),columns$[3,1]="C",columns$[3,2]="40"
        columns$[4,0]=Translate!.getTranslation("AON_DEBITS"),columns$[4,1]="N",columns$[4,2]=str(len(m1$)),columns$[4,3]=m1$,columns$[4,10]="T"
        columns$[5,0]=Translate!.getTranslation("AON_CREDITS"),columns$[5,1]="N",columns$[5,2]=str(len(m1$)),columns$[5,3]=m1$,columns$[5,10]="T"
        columns$[6,0]=Translate!.getTranslation("AON_UNITS"),columns$[6,1]="N",columns$[6,2]=str(len(m1$)),columns$[6,3]=m2$,columns$[6,10]="T"

    endif

    if sequence$="D"

        columns=8
        dim columns$[8,10]
        columns$[0,0]=Translate!.getTranslation("AON_ACCOUNT"),columns$[0,1]="C",columns$[0,2]=str(acctlen),columns$[0,3]=m0$
        columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),columns$[1,1]="C",columns$[1,2]="30"
        columns$[2,0]=Translate!.getTranslation("AON_MEMO/REFERENCE"),columns$[2,1]="C",columns$[2,2]="40"
        columns$[3,0]=Translate!.getTranslation("AON_PER"),columns$[3,1]="C",columns$[3,2]="5"
        columns$[4,0]=Translate!.getTranslation("AON_YR"),columns$[4,1]="C",columns$[4,2]="5"
        columns$[5,0]=Translate!.getTranslation("AON_AUDIT_#"),columns$[5,1]="C",columns$[5,2]="10"
        columns$[6,0]=Translate!.getTranslation("AON_DEBITS"),columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
        columns$[7,0]=Translate!.getTranslation("AON_CREDITS"),columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$,columns$[7,10]="T"
        columns$[8,0]=Translate!.getTranslation("AON_UNITS"),columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m2$,columns$[8,10]="T"

    endif

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Build report headings

    seqdesc$=Translate!.getTranslation("AON_AUDIT_NUMBER")
    acct1$=Translate!.getTranslation("AON_BEGINNING_ACCOUNT:_")
    acct2$=Translate!.getTranslation("AON____ENDING_ACCOUNT:_")
    aud1$=Translate!.getTranslation("AON_BEGINNING_AUDIT_NUMBER:_")
    aud2$=Translate!.getTranslation("AON____ENDING_AUDIT_NUMBER:_")
    date1$=Translate!.getTranslation("AON_BEGINNING_DATE:_")
    date2$=Translate!.getTranslation("AON____ENDING_DATE:_")
    jrnl$=Translate!.getTranslation("AON_FOR_ALL_JOURNALS")
    wild$=""

    if cvs(begacct$,2)="" acct1$=acct1$+Translate!.getTranslation("AON_FIRST_--")
:       else acct1$=acct1$+fnmask$(begacct$(1,acctlen),m0$)
    if cvs(endacct$,2)="" acct2$=acct2$+Translate!.getTranslation("AON_LAST")
:       else acct2$=acct2$+fnmask$(endacct$(1,acctlen),m0$)
    acct$=acct1$+acct2$

    if cvs(begdate$,2)="" date1$=date1$+Translate!.getTranslation("AON_FIRST_--")
:       else date1$=date1$+fndate$(begdate$)
    if cvs(enddate$,2)="" date2$=date2$+Translate!.getTranslation("AON_LAST")
:       else date2$=date2$+fndate$(enddate$)
    dates$=date1$+date2$

    if cvs(begaudit$,2)="" aud1$=aud1$+Translate!.getTranslation("AON_FIRST_--")
:       else aud1$=aud1$+begaudit$
    if cvs(endaudit$,2)="" aud2$=aud2$+Translate!.getTranslation("AON_LAST")
:       else aud2$=aud2$+endaudit$
    aud$=aud1$+aud2$

    if cvs(journal$,2)<>"" jrnl$=Translate!.getTranslation("AON_FOR_JOURNAL_")+glm03a.journal_id$+" "+cvs(glm03a.code_desc$,2)
    if cvs(wildcard$,2)<>"" wild$=Translate!.getTranslation("AON_WILDCARD_")+$22$+cvs(wildcard$,2)+$22$
    val$=aud$

    if sequence$="D" seqdesc$=Translate!.getTranslation("AON_TRANSACTION_DATE"),
:   val$=dates$

    m=max(len(val1$),len(val2$))-1
    headings$[0]=cvs(sysinfo.firm_name$,2)
    headings$[1]=cvs(sysinfo.task_desc$,2)+Translate!.getTranslation("AON__BY_")+seqdesc$
    headings$[2]=jrnl$
    if wild$<>""
        headings$[3]=wild$
        headings$[4]=acct$
        headings$[5]=val$
    else
        headings$[3]=acct$
        headings$[4]=val$
    fi

    if pagebreak$="Y" headings$[6]="[HEADER]"
    
rem --- Start the progress meter

    call pgmdir$+"adc_progress.aon","NC","","","","",0,glt04_dev,1,meter_num,status;rem --- don't include filename here since file is locked; causes pause in adc_progress while SQL stmts time out on err 0
    k$=firm_id$
    if sequence$="D" k$=firm_id$+begdate$
    read (glt04_dev,key=k$,knum=keynum$,dom=*next)

rem --- Read next daily detail record
            
    while more

          k$=key(glt04_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          
          read record (glt04_dev,key=k$)glt04a$

          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

rem --- Range tests

          if begacct$<>"" if glt04a.gl_account$<begacct$ continue
          if endacct$<>"" if glt04a.gl_account$>endacct$ continue
          if journal$<>"" if glt04a.journal_id$<>journal$ continue
          gosub wildcard
          if status continue
          if begaudit$<>"" if glt04a.gl_adt_no$<begaudit$ continue
          if endaudit$<>"" if glt04a.gl_adt_no$>endaudit$ continue
          if begdate$<>"" if glt04a.trns_date$<begdate$ continue
          if enddate$<>"" if glt04a.trns_date$>enddate$ continue
          recs=recs+1

rem --- Level breaks?

		  if glt04a.trns_date$<>t0$ gosub date_break
		  if glt04a.journal_id$<>t1$ gosub journal_break
		  if glt04a.gl_adt_no$+glt04a.posting_year$+glt04a.posting_per$<>t2$ gosub audit_break
		  if glt04a.gl_account$(1,acctlen)<>t3$ gosub account_break

rem --- Print subheadings

		  if h0$<>"" gosub date_heading
		  if h1$<>"" gosub journal_heading
		  if h2$<>"" gosub audit_heading

rem --- Retrieve the account master

          dim description$(35)
          glm01a.firm_id$=glt04a.firm_id$
          glm01a.gl_account$=glt04a.gl_account$
          glm01a.gl_acct_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
          glm01_key$=glm01a.firm_id$+glm01a.gl_account$
          find record (glm01_dev,key=glm01_key$,dom=*next) glm01a$
          description$(1)=glm01a.gl_acct_desc$

rem --- Format detail line fields

          debits=0
          credits=0
          units=glt04a.units
          debit$=""
          credit$=""
          unit$=""
          if glt04a.trans_amt>0 debits=glt04a.trans_amt,
:                               debit$=str(glt04a.trans_amt)
          if glt04a.trans_amt<0 credits=glt04a.trans_amt,
:                               credit$=str(abs(glt04a.trans_amt))
          if gls01a.units_flag$="Y" 
:            if units<>0 unit$=str(units)

rem --- Detail line by audit number

        if sequence$="A"

            OutVect!.addItem(fndate$(glt04a.trns_date$))
            OutVect!.addItem(fnmask$(glt04a.gl_account$(1,acctlen),m0$))
            OutVect!.addItem(description$)
            OutVect!.addItem(glt04a.description$)
            OutVect!.addItem(debit$)
            OutVect!.addItem(credit$)
            OutVect!.addItem(unit$)

        endif 

 rem --- Detail line by date
        if sequence$="D"

            m$=""
            m=num(glt04a.posting_per$,err=*proceed)
            if m then m$=field(gls01a$,"abbr_name_"+str(m:"00"))

            OutVect!.addItem(fnmask$(glt04a.gl_account$(1,acctlen),m0$))
            OutVect!.addItem(description$)
            OutVect!.addItem(glt04a.description$)
            OutVect!.addItem(m$)
            OutVect!.addItem(glt04a.posting_year$(3,2))
            OutVect!.addItem(glt04a.gl_adt_no$)
            OutVect!.addItem(debit$)
            OutVect!.addItem(credit$)
            OutVect!.addItem(unit$)

        endif

rem --- Any reference fields?

          ref$=""
          number=number+1
          if cvs(glt04a.reference_01$,2)<>"" ref$=ref$+Translate!.getTranslation("AON_REF_1_")+glt04a.reference_01$+" "
          if cvs(glt04a.reference_02$,2)<>"" ref$=ref$+Translate!.getTranslation("AON_REF_2_")+glt04a.reference_02$+" "
          if cvs(glt04a.reference_03$,2)<>"" ref$=ref$+Translate!.getTranslation("AON_REF_3_")+glt04a.reference_03$
          if ref$<>""
            if sequence$="A"
                xwk=fnblank(3)
                OutVect!.addItem(ref$)
                xwk=fnblank(columns-3)
            else
                xwk=fnblank(2)
                OutVect!.addItem(ref$)
                xwk=fnblank(columns-2)
            endif
          endif

rem --- Accumulate totals

          at[0]=at[0]+debits
          at[1]=at[1]+credits
          at[2]=at[2]+units
          dt[0]=dt[0]+debits
          dt[1]=dt[1]+credits
          dt[2]=dt[2]+units
          jt[0]=jt[0]+debits
          jt[1]=jt[1]+credits
          jt[2]=jt[2]+units
          rt[0]=rt[0]+debits
          rt[1]=rt[1]+credits
          rt[2]=rt[2]+units
          xt[0]=xt[0]+debits
          xt[1]=xt[1]+credits
          xt[2]=xt[2]+units

rem --- Loop back for next daily detail record

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    if sequence$="A" gosub journal_break
    if sequence$="D" gosub date_break
    total$=Translate!.getTranslation("AON_TOTAL_FOR_REPORT")+$00$+"B"
    debits=rt[0]
    credits=rt[1]
    units=rt[2]
    gosub print_totals

rem --- In balance?

    balance=rt[0]+rt[1]
    debits=0
    credits=0
    if balance=0 goto balanced
    if balance>0 debits=balance
    if balance<0 credits=balance
    total$=Translate!.getTranslation("AON_THIS_REPORT_IS_OUT_OF_BALANCE_BY")
    gosub print_totals
    dim msg$[1]
    balance$=str(balance:m1$)
    balance$=cvs(balance$,1+2)
    msg$[0]=total$+" "+balance$
rem    call pgmdir$+"adc_stdmessage.aon",2,msg$[all],0,0,0,v$,v3
    msg_id$="AON_REG_ERRS"
    gosub disp_message
    if pos("PASSVALID"=msg_opt$)=0 goto std_exit

balanced: rem --- No update if any ranges were selected

    if number=0 goto std_exit

    if begacct$<>"" goto std_exit
    if endacct$<>"" goto std_exit
    if journal$<>"" goto std_exit
    if begdate$<>"" goto std_exit
    if enddate$<>"" goto std_exit
    if wildcard$<>"" goto std_exit
    if begaudit$<>"" goto std_exit
    if endaudit$<>"" goto std_exit

rem --- Run update overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    next_overlay$=pgmdir$+"glu_dailydetail.aon"
    goto std_exit

date_heading: rem --- Date heading

	xwk=fnblank(columns+1)
	outVect!.addItem(h0$)
	xwk=fnblank(columns)
	h0$=""
	gosub journal_heading
	return
	
journal_heading:

    if pagebreak$="Y"
	    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
	    HdrVect!.addItem(h1$)
	else
		xwk=fnblank(2)
		OutVect!.addItem(h1$+$00$+"B")
		xwk=fnblank(columns-2)
		xwk=fnblank(columns+1)
	endif

	h1$=""
	return
	
audit_heading:

	xwk=fnblank(columns+1)
	outVect!.addItem(h2$)
	xwk=fnblank(columns)
	h2$=""
	return

date_break: rem --- Date break

    if sequence$="A" return
    if t0$="" goto new_date
	gosub account_break
    gosub journal_break
    total$=Translate!.getTranslation("AON_TOTALS_FOR_")+fndate$(t0$)
    debits=dt[0]
    credits=dt[1]
    units=dt[2]
    gosub print_totals

new_date: rem --- New date

    if done return
    dim dt[2]
    t0$=glt04a.trns_date$
    h0$=Translate!.getTranslation("AON_DATE_")+fndate$(t0$)
    return

journal_break: rem --- Journal break

    if t1$="" goto new_journal
    if sequence$="A"
		gosub audit_break
    endif
    total$=Translate!.getTranslation("AON_TOTAL_FOR_JOURNAL_")+glm03a.journal_id$+" "+cvs(glm03a.code_desc$,2)+$00$+"B"
    debits=jt[0]
    credits=jt[1]
    units=jt[2]
    gosub print_totals

new_journal: rem --- New Journal ID

    if done return
    dim jt[2],b[2]
    glm03a.firm_id$=glt04a.firm_id$
    glm03a.journal_id$=glt04a.journal_id$
    glm03a.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    glm03_key$=glm03a.firm_id$+glm03a.journal_id$
    find record (glm03_dev,key=glm03_key$,dom=*next) glm03a$
    t1$=glt04a.journal_id$
    gosub journal_subheading
    return

audit_break: rem --- Audit number break

    if sequence$="D" return
	if t2$="" goto new_audit
    gosub account_break
    period=num(glt04a.posting_per$)
    x$=cvs(t2$(1,7),2)
    if x$="" x$="NONE"
    total$=Translate!.getTranslation("AON_TOTAL_FOR_AUDIT_NUMBER_")+x$+Translate!.getTranslation("AON__-_PERIOD_")+t2$(12,2)+" ("+period_name$+" "+t2$(8,4)+")"+$00$+"B"
    debits=at[0]
    credits=at[1]
    units=at[2]
    gosub print_totals
    if pagebreak$<>"Y"
        goto new_audit
    endif
    gosub journal_subheading

new_audit: rem --- New audit number

    if done return
    dim at[2]
    t2$=glt04a.gl_adt_no$+glt04a.posting_year$+glt04a.posting_per$
    period=num(glt04a.posting_per$)
    period_name$=field(gls01a$,"abbr_name_"+str(period:"00"))
    x$=cvs(t2$(1,7),2)
    if x$="" x$="NONE"
    h2$=Translate!.getTranslation("AON_AUDIT_NUMBER_")+x$+Translate!.getTranslation("AON__-_PERIOD_")+t2$(12,2)+" ("+period_name$+" "+t2$(8,4)+")"
    return

account_break: rem --- Account number break

    if t3$="" goto new_account
    total$=Translate!.getTranslation("AON_TOTAL_FOR_ACCOUNT_NUMBER_")+fnmask$(t3$,m0$)
    debits=xt[0]
    credits=xt[1]
    units=xt[2]
    gosub print_totals

new_account: rem --- New account

    if done return
    dim xt[2]
    let t3$=glt04a.gl_account$(1,acctlen)
    return

journal_subheading: rem --- Build journal subheading

    h1$=Translate!.getTranslation("AON_JOURNAL_")+glm03a.journal_id$+" "+cvs(glm03a.code_desc$,2)
rem --- move this to journal_heading
rem    if pagebreak$="Y"
rem	    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
rem	    HdrVect!.addItem(h1$)
rem	else
rem		xwk=fnblank(2)
rem		OutVect!.addItem(h1$+$00$+"B")
rem		xwk=fnblank(columns-2)
rem		xwk=fnblank(columns+1)
rem	endif
    return

wildcard: rem --- Test account number against specified wildcard mask

    let status=0
    if wildcard$="" return
    if wildcard<>len(wildcard$) wildcard=len(wildcard$)
    let x$=fnmask$(glt04a.gl_account$(1,acctlen),m0$)
    for x=1 to wildcard
        if wildcard$(x,1)="?" continue
        if x$(x,1)<>wildcard$(x,1) status=1
    next x
    return

print_totals: rem --- Print totals line

    debit$=str(debits)
    credit$=str(abs(credits))
    unit$=""
    if gls01a.units_flag$="Y" unit$=str(units)

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))

    if sequence$="A"
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem(total$)
        OutVect!.addItem(debit$)
        OutVect!.addItem(credit$)
        OutVect!.addItem(unit$)
    endif

    if sequence$="D"
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem(total$)
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem(debit$)
        OutVect!.addItem(credit$)
        OutVect!.addItem(unit$)
    endif

    return

rem --- Functions

    def fncenter(q$,q)=int((q-len(q$))/2)

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- Create blank cell(s) in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	out_action$="FORMAT"
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    OutVect!=null()
    goto std_exit

rem #endinclude std_end.src

    end
