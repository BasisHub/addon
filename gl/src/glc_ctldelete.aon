rem --- GL Audit Control (Update Audit Control table and delete +GLCONTROL)
rem --- Program glc_ctldelete v8.0.0 16Apr2006 (glc_da)
rem --- Created by adx_progconv.bbx v1.0.0 (04/16/2006 01:05:36)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- This program is called at the end of a task in order to update
rem --- the GL Audit Control table (if necessary) and to delete the +GLCONTROL
rem --- global variable. The update flag is set by glc_ctlupdate, which is 
rem --- normally called upon successful completion of an update process.

rem --- status: 0=No error (returned)

    seterr std_error
    setesc std_exit
    enter status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Initializations

    status=0
    updating=1

rem --- Update the GL Audit Control (glm-06) record if necessary

    while updating

          rem --- Retrieve the contents of +GLCONTROL and set the local
          rem --- variables accordingly

          glcontrol_template$=stbl("+GLCONTROL_TPL",err=*break) 
          dim glcontrol$:glcontrol_template$
          glcontrol$=stbl("+GLCONTROL",err=*break)
          if glcontrol.update_flag$<>"Y" break
          firm_id$=glcontrol.firm_id$
          program$=glcontrol.program_name$
          process$=glcontrol.process_id$
          if pos(".aon"=program$)=0 then 
              keynum$="AO_ALIAS_PROCESS" 
              program$=program$(1,16);rem --- if no .aon, we're looking at alias name vs backend program name
          else 
              keynum$="AO_PROG_PROCESS"
          endif  
          rem --- Open files

          files=1,begfile=1,endfile=files
          dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
          files$[1]="glm-06",ids$[1]="ADM_AUDITCONTROL"
          call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                         ids$[all],templates$[all],channels[all],batch,status
          if status break
          glm06_dev=channels[1]

          rem --- Dimension string templates

          dim glm06a$:templates$[1]

          rem --- Retrieve and update the GL Audit Control entry for this application

          read (glm06_dev,key=firm_id$+program$+process$,knum=keynum$,dom=*next)
          k$=key(glm06_dev,end=*break); extract record(glm06_dev)glm06a$; rem Advisory Locking
          if pos(firm_id$+program$+process$=k$)<>1 then read(glm06_dev); break
          glm06a.lstupd_date$=glm06a.lstuse_date$
          glm06a.lstupd_time$=glm06a.lstuse_time$
          write record (glm06_dev) glm06a$
          break
          
    wend

rem --- All done.

    goto std_exit

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    x$=stbl("!CLEAR","+GLCONTROL",err=*next)
    x$=stbl("!CLEAR","+GLCONTROL_TPL",err=*next)
    close (glm06_dev,err=*next)
    exit

rem #endinclude std_exit.src

    end
