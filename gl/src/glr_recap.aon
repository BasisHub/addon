rem glr - GL Recap Report
rem Program glr_recap v8.0.0 22Apr2006 (glr_xa)
rem Created by adx_progconv.bbx v1.0.1 (04/22/2006 02:14:21)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- This report overlay prints the standard AddonSoftware GL Summary
rem --- Modified for DocOut 9/29/07.CAH
rem --- Reports that are DocOut'd run glr_recap_DO
rem --- Reports that are NOT DocOut'd run regular glr_recap

rem --- Values expected as being set (besides pgmdir$ and sysinfo$) 

rem --- PAGE        : Current report page number
rem --- WIDTH       : Report width in characters
rem --- UPDATE$     : Name of update overlay to run (or null)
rem --- GLW11_DEV   : Summary work file channel number
rem --- HEADINGS$[*]: Standard report headings array
rem --- ACTION$     : D = Perform date verification
rem --- +BATCH_NO   : batch# stbl, zero if not batching
rem --- +PROCESS_ID : process id stbl (shouldn't be in here if not part of a process)

    setesc std_error
    seterr std_error

    rd_alias_id$="<GL_RECAP>";rem dummy id to allow save for column size settings
    next_overlay$="";rem --- clear next_var and outvect! so bas_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]=files$[1]
    files$[2]="glm-01",ids$[2]="GLM_ACCT"
    files$[3]="glm-03",ids$[3]="GLC_JOURNALCODE"
    files$[4]="gls_calendar",ids$[4]="GLS_CALENDAR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto remove_locks_and_exit
    gls01_dev=channels[1]
    glm01_dev=channels[2]
    glm03_dev=channels[3]
    gls_calendar_dev=channels[4]

rem --- Dimension string templates

    dim gls01a$:templates$[1],glm01a$:templates$[2],glm03a$:templates$[3]
    dim gls_calendar$:templates$[4]

rem --- Retrieve miscellaneous templates

    files=1,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="glw-11:GLW_DAILYDETAIL"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto remove_locks_and_exit

rem --- Dimension miscellaneous string templates

    dim glw11a$:templates$[1]

rem --- Retrieve parameter records

    gls01a_key$=sysinfo.firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$

rem --- Parameters

    glcontrol_tpl$=stbl("+GLCONTROL_TPL",err=next_overlay)
    dim glcontrol$:glcontrol_tpl$
    glcontrol$=stbl("+GLCONTROL",err=*next)
    if glcontrol.gl_work_file$<>"Y" goto next_overlay

rem --- OutVect! for DocOut, date/time 

    OutVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)
    rep_title$=rep_title$+"_GLrecap"; rem --- Update document archive filename

rem --- Initializations

    dim hdr$(width),o[5],at[1],dt[1],rt[1],gt[1]
    account_length=num(glcontrol.acct_length$)
    report$=glcontrol.prt_gl_sum$
    gl_post_code$=glcontrol.gl_post_code$
    use_suspense$=glcontrol.use_suspense$
    suspense_account$=glcontrol.gl_account$
    max_limit=num(glcontrol.max_lim_str$)
    max_balance=num(glcontrol.max_bal_str$)
    glm0$=glcontrol.acct_output$
    glm1$=glcontrol.amount_mask$
    glm2$=glcontrol.unit_mask$
    m0=len(glm0$)
    m1=len(glm1$)
    when$=sysinfo.system_date$
    clock$=""
    sequence$="A"
    if gl_post_code$="D" sequence$="D"
    t0$=""
    t1$=""
    t2$=""
    t3$=""
    lf$="N"
    h0$=""
    h2$=""
    more=1
    number=0
rem    errors=0
    done=0
    l9=59
    l=l9+1
    l1=0
    m=m0
    if m<8 m=8
    process_id$=pad(stbl("+PROCESS_ID"),len(glcontrol.process_id$),"L"," ")
    batch_no$=stbl("+BATCH_NO")
    recs=0
    total_recs=0
    if milestone=0 then milestone=50

rem --- column headings

    columns=5
    dim columns$[5,10]
    columns$[0,0]=Translate!.getTranslation("AON_DATE"),          columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_ACCOUNT"),       columns$[1,1]="C",columns$[1,2]="10"
    columns$[2,0]=Translate!.getTranslation("AON_DESCRIPTION"),   columns$[2,1]="C",columns$[2,2]="35"
    columns$[3,0]=Translate!.getTranslation("AON_MEMO/REFERENCE"),columns$[3,1]="C",columns$[3,2]="35"
    columns$[4,0]=Translate!.getTranslation("AON_DEBITS"),        columns$[4,1]="N",columns$[4,2]=str(len(glm1$)),columns$[4,3]=glm1$,columns$[4,10]="T"
    columns$[5,0]=Translate!.getTranslation("AON_CREDITS"),       columns$[5,1]="N",columns$[5,2]=str(len(glm1$)),columns$[5,3]=glm1$,columns$[5,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Initialize Print Positions

    o[5]=width-m1
    o[4]=o[5]-m1
    if sequence$="A" o[1]=9
    if sequence$="D" o[1]=0
    o[2]=o[1]+m+1
    if width>80 then o[3]=o[2]+37,
:       w=35
:       else o[3]=o[2],
:       w=o[4]-o[2]-2,
:       w=min(w,35)

rem --- Build heading strings

    if sequence$="A" hdr$(o[0]+3)=Translate!.getTranslation("AON_DATE")
    hdr$(o[1]+1)=Translate!.getTranslation("AON_ACCOUNT")
    hdr$(o[2]+1)=Translate!.getTranslation("AON_DESCRIPTION/MEMO/REFERENCE")
    if width>80 hdr$(o[2]+1)=Translate!.getTranslation("AON_DESCRIPTION")
    hdr$(o[3]+1)=Translate!.getTranslation("AON_MEMO/REFERENCE")
    hdr$(o[4]+1+m1-7)=Translate!.getTranslation("AON_DEBITS")
    hdr$(o[5]+1+m1-8)=Translate!.getTranslation("AON_CREDITS")

rem --- Display Resource

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","NC","",Translate!.getTranslation("AON_GL_RECAP"),"","",0,glw11_dev,1,0,status

rem --- Report Headings

    dim work$[1]
    work$[0]=headings$[0]
    work$[1]=headings$[1]
    headings=2
    dim headings$[headings+1]
    headings$[0]=work$[0]
    headings$[1]=work$[1]
    headings$[2]=Translate!.getTranslation("AON_GENERAL_LEDGER_SUMMARY")
    headings$[3]="[HEADER]"

rem --- Position File

    read (glw11_dev,key=firm_id$+process_id$+batch_no$,dom=*next)

rem --- Get next glw-11 key

    while more

        k$=key(glw11_dev,end=*break)
        if pos(firm_id$+process_id$+batch_no$=k$)<>1 break
        glstatus=0

    rem --- Read next glw-11 record

        read record (glw11_dev,key=k$)glw11a$
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

    rem --- Level breaks?

        if glw11a.trns_date$<>t0$ gosub date_break
        if glw11a.journal_id$<>t1$ gosub journal_break
        if glw11a.posting_per$+glw11a.posting_year$<>t2$ gosub period_break
        if glw11a.trns_date$+glw11a.gl_account$<>t3$ gosub account_break

    rem --- Print subheadings

        if h0$<>"" gosub date_heading
        if h2$<>"" gosub period_heading

    rem --- Format detail line fields

        debits=0
        credits=0
        debit$=""
        credit$=""
        number=number+1
        amount=glw11a.trans_amt
        if amount>=0 debits=amount,debit$=str(amount)
        if amount<0 credits=amount,credit$=str(abs(amount))
        memo$=glw11a.description$
        ref1$=glw11a.reference_01$
        ref2$=glw11a.reference_02$
        ref3$=glw11a.reference_03$

    rem --- Print detail line

        if report$<>"Y" goto check_date

        if sequence$="A" 
            OutVect!.addItem(fndate$(glw11a.trns_date$))
        else
            OutVect!.addItem("")
        endif
        if cvs(glw11a.gl_account$,2)="" glw11a.gl_account$=fill(10,"0")
        OutVect!.addItem(fnmask$(glw11a.gl_account$(1,account_length),glm0$))
        OutVect!.addItem(description$)
        OutVect!.addItem(memo$)
        OutVect!.addItem(debit$)
        OutVect!.addItem(credit$)
    rem          if lf$<>"" 
    rem             xwk=fnblank(6)
    rem             lf$=""
    rem          endif
        l1=l1+1
        recs=recs+1

    rem --- Print reference information?

        ref$=ref1$+" "+ref2$+" "+ref3$
        if cvs(ref$,2)="" goto check_date
        xwk=fnblank(3)
        OutVect!.addItem(ref$)
        xwk=fnblank(2)

    check_date: rem --- Test date?

        if glstatus goto date_message
        if pos("D"=action$)=0 goto date_message
        call pgmdir$+"glc_datecheck.aon",glw11a.trns_date$,"N",period$,year$,glstatus

    date_message: rem --- Print error message (if necessary)

        if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,glw11a.trns_date$,glstatus,
:           l,errors,status
        if stbl("+DTWARN_MSG",err=*endif)<>"" and report$="Y"
            xwk=fnblank(2)
            OutVect!.addItem(stbl("+DTWARN_MSG"))
            xwk=fnblank(3)
			x$=stbl("+DTWARN_MSG","")
        endif

    rem --- Accumulate totals

        at[0]=at[0]+debits
        at[1]=at[1]+credits
        dt[0]=dt[0]+debits
        dt[1]=dt[1]+credits
        gt[0]=gt[0]+debits
        gt[1]=gt[1]+credits
        rt[0]=rt[0]+debits
        rt[1]=rt[1]+credits

    rem --- Loop back for next glw-11 record

    wend

rem --- All Done

	if recs=0 and report$="Y"
		headings$[3]=""
	endif

    done=1
    if sequence$="A" gosub journal_break
    if sequence$="D" gosub date_break
    total$=Translate!.getTranslation("AON_TOTAL_FOR_REPORT")
    debits=rt[0]
    credits=rt[1]
    balance=debits+credits
    if balance<>0 report$="Y"
    if report$<>"Y" goto date_errors
    if l+2>l9 gosub report_heading
    gosub print_totals

rem --- Debits = Credits?

    if balance=0 goto date_errors
    if l+1>l9 gosub report_heading
    xwk=fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_WARNING:_OUT_OF_BALANCE_BY_")+str(balance:glm1$))
    xwk=fnblank(3)
    if use_suspense$<>"Y" goto register_errors
    if cvs(suspense_account$,2)="" goto register_errors
    if max_limit and abs(balance)>max_limit goto register_errors

rem --- Determine GL Suspense account balance

    call pgmdir$+"glc_balance.aon",suspense_account$,suspense_balance,status
    if status goto register_errors
    if max_balance and abs(suspense_balance)>max_balance goto register_errors

rem --- Write to glw-11

    when$=glcontrol.trns_date$
    ref1$=glcontrol.process_id$
    ref2$=glcontrol.gl_adt_no$
    ref3$=""
    memo$=Translate!.getTranslation("AON_OUT_OF_BALANCE_CORRECTION")
    if cvs(ref1$,2)="" ref1$=glcontrol.program_name$
    call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,0,suspense_account$,when$,ref1$,ref2$,ref3$,
:       memo$,-balance,0,status
    if status goto register_errors

date_errors: rem --- Any GL transaction date errors detected in lead overlay?

    if errors=0 goto next_overlay

register_errors: rem --- Register errors

    errors=errors+1    
    msg_id$="AON_REG_ERRS"
    gosub disp_message
    if pos("PASSVALID"=msg_opt$)=0 then update$=""


next_overlay: rem --- Run update overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

    if OutVect!<>null() then
        next_overlay$=update$
        rem --- if register was set up for automated email/fax, send recap along as well
        if reportControl!<>null() and stbl("+AUTO_SEND",err=*endif)<>""
            overlay$=update$
            next_overlay$=reportControl!.getNextOverlay()
        endif       
        out_action$="PRT"
        goto std_exit
    else
        dummy$=stbl("+AUTO_SEND","")
        next_overlay$=""
        out_action$=""
        run update$,err=remove_locks_and_exit
    endif

rem --- run update$,err=remove_locks_and_exit -- DocOut will run next pgm for us

report_heading: rem --- Report Heading

rem ---     l=headings+1
rem ---     call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
rem ---     if status exitto remove_locks_and_exit
    if sequence$="D" goto date_subheading

rem --- By Audit Number

    if report$<>"Y" goto report_heading_exit
    xwk=fnblank(6)
    OutVect!.addItem(h2$)
    xwk=fnblank(5)
    goto report_heading_exit

date_subheading: rem --- By Date

    if report$<>"Y" goto report_heading_exit
    xwk=fnblank(6)
    OutVect!.addItem(h0$)
    xwk=fnblank(5)

report_heading_exit: rem --- Report heading completed

    return

date_heading: rem --- Date Heading

    if report$<>"Y" goto date_heading_exit
    xwk=fnblank(6)
    OutVect!.addItem(h0$)
    xwk=fnblank(5)
    h0$=""
    
date_heading_exit: 

    return

period_heading: rem --- Period Heading

    if report$<>"Y" goto period_heading_exit
    xwk=fnblank(6)
    OutVect!.addItem(h2$)
    xwk=fnblank(5)
    h2$=""
    
period_heading_exit: 

    return

date_break: rem --- Date break

    if sequence$="A" goto date_break_exit
    if t0$="" goto new_date
    gosub account_break
    total$=Translate!.getTranslation("AON_TOTALS_FOR_")+fndate$(t0$)
    debits=dt[0]
    credits=dt[1]
    gosub print_totals
    gosub journal_break        

new_date: rem --- New date

    if done goto date_break_exit
    dim dt[1]
    t0$=glw11a.trns_date$
    h0$=Translate!.getTranslation("AON_DATE_")+fndate$(t0$)
    lf$=""
    
date_break_exit: 

    return

journal_break: rem --- Journal break

    if t1$="" then goto new_journal
    if sequence$="A" gosub period_break

new_journal: rem --- New Sequence

    if done goto journal_break_exit
    dim jt[1],b[2]
    glm03a.journal_id$=glw11a.journal_id$
    glm03a.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    glm03_key$=firm_id$+glm03a.journal_id$
    t1$=glw11a.journal_id$
    lf$=""
    find record (glm03_dev,key=glm03_key$,dom=*next)glm03a$
    jh$=Translate!.getTranslation("AON_JOURNAL_")+glm03a.journal_id$+" "+cvs(glm03a.code_desc$,2),l=l9+1
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(jh$)
    
journal_break_exit: 

    return

period_break: rem --- Period break

    if sequence$="D" goto period_break_exit
    if t2$="" goto new_period
    gosub account_break
    total$=Translate!.getTranslation("AON_TOTALS_FOR_")+ph$
    debits=at[0]
    credits=at[1]
    gosub print_totals

new_period: rem --- New period

    if done goto period_break_exit
    dim at[1]
    t2$=glw11a.posting_per$+glw11a.posting_year$
    find record (gl_calendar_dev,key=firm_id$+glw11a.posting_year$,err=*next) gls_calendar$
    if cvs(gls_calendar.firm_id$,2)="" then
        msg_id$="AD_NO_FISCAL_CAL"
        dim msg_tokens$[1]
        msg_tokens$[1]=glw11a.posting_year$
        gosub disp_message
        goto std_exit_no_report
    endif
    period=num(t2$(1,2))
    abbrev$=field(gls_calendar$,"abbr_name_"+str(period:"00"))
    h2$=Translate!.getTranslation("AON_PERIOD_")+t2$(1,2)+" ("+abbrev$+" "+t2$(3,4)+")"
    ph$=h2$
    lf$=""
    
period_break_exit: 

    return

account_break: rem --- Account break

    if t3$="" goto new_account
    if l1=1 goto new_account
    total$=Translate!.getTranslation("AON_SUBTOTAL_FOR_ACCOUNT_")+fnmask$(t3$(len(glw11a.trns_date$)+1,account_length),glm0$)
    debits=gt[0]
    credits=gt[1]
    gosub print_totals

new_account: rem --- New GL info

    if done goto account_break_exit
    dim gt[1],description$(w)
    glm01a.gl_account$=glw11a.gl_account$
    glm01a.gl_acct_desc$=glm01a.gl_account$+Translate!.getTranslation("AON__(NOT_ON_FILE)")
    glm01_key$=firm_id$+glm01a.gl_account$
    glstatus=104
    find record (glm01_dev,key=glm01_key$,dom=*next)glm01a$; glstatus=0
    description$(1)=glm01a.gl_acct_desc$
    t3$=glw11a.trns_date$+glw11a.gl_account$
    l1=0
    if number>0 lf$="Y"
    if glstatus>99 errors=errors+1
    
account_break_exit: 

    return

print_totals: rem --- Print totals line

    if report$<>"Y" goto print_totals_exit
    debit$=str(debits)
    credit$=str(abs(credits))
    unit$=""
    while len(credit$)>m1 
        credit$=credit$(2)
    wend
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk=fnblank(3)
    OutVect!.addItem(total$)
    OutVect!.addItem(debit$)
    OutVect!.addItem(credit$)
    
print_totals_exit: 

    return

rem --- Functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:           else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
    alpha_mask: 
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- Create blank cell(s) in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 
    goto remove_locks_and_exit

remove_locks_and_exit: rem --- Remove soft locks and exit
    if lockKeys! <> null() and lockKeys!.size() > 0 then
        for lck=0 to lockKeys!.size()-1
            lckk$=cast(BBjString, lockKeys!.getItem(lck))
            call stbl("+DIR_SYP")+"bac_lock_record.bbj","POE_INVHDR",lckk$,"X","",0,table_chans$[all],lock_stat$
        next lck
    endif

    release

    end
