rem glr - Financial Report Printing (Report Overlay)
rem Program glr_financials v8.0.0 09Jun2006 (glr_fb)
rem Created by adx_progconv.bbx v1.0.3 (06/09/2006 03:06:29)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- This program is the second overlay of the report generation
rem --- cycle. A list of financial reports to be produced is contained
rem --- in the Financial Report Selections (gle-04) file. The preceding
rem --- overlay (glr_headings) reads the next report from the file,
rem --- assembles the report headings and then runs this program. 
rem --- Once the report is printed, this program runs glr_headings and
rem --- the cycle is repeated until the last report in the Financial
rem --- Report Selections (gle-04) file has been run.

    setesc std_error
    seterr std_error

rem --- Parameters

    mc=7
    mo=5
    mx=8
    my=1
    mz=1
    mt=3
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    m4=len(m4$)
    numcols=colmax
    headings=3

rem --- Initializations

    cpn$="CPN"
    pqy$="PQY"
    last$=""
    total_recs=0

rem --- Dimension matrices for financial reports

rem --- Matrix definitions for S[X,Y,Z] and T[X,Y,Z]
rem --- X: 0=C-PERIOD/1=C-QTR/2=C-YEAR (Current year period, quarter and year totals)
rem ---    3=P-PERIOD/4=P-QTR/5=P-YEAR (Prior year period, quarter and year totals)
rem ---    6=N-PERIOD/7=N-QTR/8=N-YEAR (Next year period, quarter and year totals)
rem --- Y: 0=Actual/1=Budget
rem --- Z: 0=Amount/1=Units

    dim s[mx,my,mz],t[mx,my,mz]

rem --- A[column,type]: Column=report column
rem ---               : Type=0 for period
rem ---               :      1 for actual/budget/variance
rem ---               :      2 for amounts or units
rem ---               :      3 for default position

    dim a[colmax-1,3]
    dim colinfo$((colmax+1)*mc)

rem --- Get Report Columns (glm-32) information for this report
    col=0
    glm32_key$=gle04a.firm_id$+gle04a.gl_rpt_no$
    read (glm32_dev,key=glm32_key$,dom=*next)
    while 1
        glm32_key$=key(glm32_dev,end=*break)
        if pos(gle04a.firm_id$+gle04a.gl_rpt_no$=glm32_key$)<>1 break
        read record (glm32_dev,key=glm32_key$) glm32a$
        if col>=colmax break
        colinfo$(col*mc+1,mc)=glm32a.per_type_cde$+glm32a.actbud$+glm32a.amt_or_units$+glm32a.ratiopct$

        value=pos(glm32a.per_type_cde$="PQYABC")
        if value=0 
           a[col,0]=9
        else
            a[col,0]=value-1
            value=pos(glm32a.actbud$="ABV")
            if value=0 value=1
            a[col,1]=value-1
            value=pos(glm32a.amt_or_units$="AU")
            if value=0 value=1
            a[col,2]=value-1
            a[col,3]=num(glm32a.sequence_no$)
        endif
        
        col=col+1
    wend

    gosub report_heading

rem     print colinfo
rem --- Position Financial Report Detail (glm-22) file

    read record (glm22_dev,key=gle04a.firm_id$+gle04a.gl_rpt_no$,dom=*next) glm22a$

rem --- Read next Financial Report Detail (glm-22) record

    while 1
        glm22_key$=key(glm22_dev,end=*break)
        if pos(gle04a.firm_id$+gle04a.gl_rpt_no$=glm22_key$)<>1 break
        read record (glm22_dev) glm22a$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status          
        line_type$=glm22a.line_type$
        editing_code$=glm22a.editing_code$
        input_total$=glm22a.input_total$
        output$=""
        for x=1 to 5
            output$=output$+field(glm22a$,"output_total_"+str(x:"00"))
        next x
        for x=1 to 5
            output$=output$+pad(field(glm22a$,"output_oper_"+str(x:"00")),1)
        next x

        rem --- Transfer Financial Report Amounts (gle-06) from 
        rem --- the record to the s[x,y,z] working array

        dim s[mx,my,mz]
        read (gle06_dev,key=glm22_key$,dom=*next)
        while 1
            k$=key(gle06_dev,end=*break)
            if pos(glm22_key$=k$)<>1 break
            read record (gle06_dev) gle06a$
            x=(pos(gle06a.gl_pcn_flag$=cpn$)*mt-mt)+(pos(gle06a.gl_pqy_flag$=pqy$)-1)
            s[x,0,0]=gle06a.actual_amt
            s[x,0,1]=gle06a.actual_units
            s[x,1,0]=gle06a.budget_amt
            s[x,1,1]=gle06a.budget_units

        wend

        rem --- If it's a heading line just go print it

        if line_type$="H" then goto print_line

        rem --- This section of the program deals with accumulating the detail
        rem --- for the line, performing any totaling and then updating the
        rem --- totals record for the line.

        rem --- Check to see if this is a new update sequence

        dim values[7]
        if glm22a.gl_updt_seq$<>sequence$ dim y[mt],s[mx,my,mz]

        rem --- Accumulate detail for this line

        rem --- A[column,type]: Column=report column
        rem ---               : Type=0 for period
        rem ---               :      1 for actual/budget/variance
        rem ---               :      2 for amounts or units
        rem ---               :      3 for default position

        for n=0 to 7
        rem --- Totals line?

            if line_type$="T" continue

            a[n,3]=num(field(glm22a$,"gl_rpt_col_"+str(n+1:"00")))

        rem --- Assign array indices from A[column,type]

            x=a[n,0]
            y=a[n,1]
            z=a[n,2]
            if x=9 continue

        rem --- Actual or budget?

            if y=0 or y=1 values[n]=s[x,y,z]

        rem --- Variance?

            if y=2 values[n]=s[x,1,z]-s[x,0,z]
     
        next n

        rem --- If an input total exists for this line, retrieve the
        rem --- Report Totals (gle-07) record and add them to the working
        rem --- array values.

        totalnumber$=input_total$
        if pos(totalnumber$="   000",3)=0
            typecode$="T"
            update_sequence$=printflag$
            gosub get_totals
            gosub line_totals
            gosub include_totals
        endif

        rem --- Check for ratio/percent

        input_percnt$=glm22a.input_percnt$
        if pos(input_percnt$="   000",3)=0
            typecode$="P"
            totalnumber$=input_percnt$
            update_sequence$=sequence$
            gosub get_totals
        endif

        rem --- Calculate ratio/percent
        for x=0 to 7
            ratiopct$=colinfo$(x*mc+4,1)
            if ratiopct$=" " continue
            pqy=a[x,0]
            actbud=a[x,1]
            amtunits=a[x,2]
            ratiopct=0
            divisor=0
            if ratiopct$="R" amtunits=abs(sgn(amtunits)-1)
            if pqy=9
                divisor=0 
            else
                if actbud=0 or actbud=1
                    divisor=t[pqy,actbud,amtunits]
                endif
            endif
            if actbud>1 and ratiopct$="P" divisor=s[pqy,1,amtunits]
            if ratiopct$="P" values[x]=values[x]*100
            if divisor ratiopct=values[x]/divisor
            values[x]=ratiopct
            if ratiopct$="%" 
                if x>1 and values[x-1]
                    values[x]=values[x-2]*100/values[x-1]
                else
                    values[x]=0
                endif
            endif
            if ratiopct$="$" 
                if x>1
                    values[x]=values[x-1]-values[x-2]
                else
                    values[x]=0
                endif
            endif
        next x

        if cvs(output$,2)="" goto print_line
        for w=0 to 4
            totalnumber$=output$(w*3+1,3)
            operator$=output$(w+16,1)
            if pos(totalnumber$="   000",3) continue
            typecode$="T"
            update_sequence$=printflag$
            sign=1
            if operator$="-" sign=-1
            gosub get_totals

            rem --- Clear totals first?
            if pos("C"=editing_code$) dim t[mx,my,mz]
    
            rem --- Accumulate totals and write Report Totals (gle-07) records

            for x=0 to mx
                n=0
                for y=0 to my
                    for z=0 to mz
                        t[x,y,z]=t[x,y,z]+s[x,y,z]*sign
                    next z
                next y
            next x
            for x=0 to mx
                gle07a.gl_pcn_flag$=cpn$(int(x/mt)+1,1)
                gle07a.gl_pqy_flag$=pqy$(mod(x,mt)+1,1)
                gle07_key$=gle07a.firm_id$+gle07a.tot_type_cde$+
:                          gle07a.total_no$+gle07a.gl_pcn_flag$+
:                          gle07a.gl_pqy_flag$
                extract record (gle07_dev,key=gle07_key$,dom=*next) gle07a$; rem Advisory Locking
                gle07a.actual_amt=t[x,0,0]
                gle07a.actual_units=t[x,0,1]
                gle07a.budget_amt=t[x,1,0]
                gle07a.budget_units=t[x,1,1]
                gle07a$=field(gle07a$)
                write record (gle07_dev) gle07a$
            next x
        next w

print_line: rem --- Perform any required editing and print the line

        rem --- Editing code definitions:
        rem --- S = Space (blank line)
        rem --- U = Underline
        rem --- D = Double underline
        rem --- P = Page break
        rem --- - = Change sign
        rem --- C = Clear totals
        rem --- F = Favorable (reverses sign of a variance column)
        rem --- $ = $ mask

        rem --- Page break?

        if pos("P"=editing_code$)
            BrkVect!.addItem(str(OutVect!.size()/(numcols+1)))
        endif

        rem --- Blank line?
        if pos("S"=editing_code$)
            x=fnblank(9)
            l=l+1
        endif

        rem --- Underline?

        char$=""
        if pos("U"=editing_code$) char$="-",lenfactor=1.7
        if pos("D"=editing_code$) char$="=",lenfactor=1

        if char$<>""
            OutVect!.addItem("")
            for x=0 to 7
                if a[x,3]=0 
                    OutVect!.addItem("")
                else
                    amtunit$=colinfo$(x*mc+3,1)
                    ratiopct$=colinfo$(x*mc+4,1)
                    if amtunit$="U" dim underline$(int(m2*lenfactor),char$)
                    if amtunit$="A" dim underline$(int(m1*lenfactor),char$)
                    if pos(ratiopct$="P%") dim underline$(int(m4*lenfactor),char$)
                    if ratiopct$="R" dim underline$(int(m3*lenfactor),char$)
                    if ratiopct$="$" 
:                      if x and colinfo$((x-1)*mc+3,1)="U" dim underline$(int(m2*lenfactor),char$) 
:                                              else dim underline$(int(m1*lenfactor),char$)
                    if l+1>l9 gosub report_heading
                    if underline$<>""
                        OutVect!.addItem(underline$)
                    else
                        OutVect!.addItem("")
                    endif
                    l=l+1
                endif
            next x
        endif
        rem --- Change sign?

        if pos("-"=editing_code$)
            for x=0 to 7
                values[x]=-values[x]
            next x
        endif

        rem --- Non-printing line?
 
        if line_type$="N" continue

        rem --- Print line description
 
        line_desc$=cvs(glm22a.gl_line_desc$,2)
        dim print_buf$(width)

        if line_desc$<>"" 
            print_buf$(num(glm22a.default_pos$)+1,len(line_desc$))=line_desc$
        endif

        OutVect!.addItem(cvs(print_buf$,2))

        rem --- If this isn't a heading line, print amounts

        if line_type$<>"H"

            for x=0 to 7
                mask$="##,###,###.00-"
                if values[x]=0 or a[x,0]=9 or a[x,3]=0 
                    OutVect!.addItem("")
                    continue
                endif

                p=x*mc
                amtunit$=colinfo$(p+3,1)
                ratiopct$=colinfo$(p+4,1)
                if a[x,1]>1 and pos("F"=editing_code$) values[x]=-values[x]
                if pos(ratiopct$="BC$%")=0
                    if (ratiopct$<>" " and pos(input_percnt$="   000",3)) or
:                       values[x]=0 or a[x,0]=9 or a[x,3]=0
						OutVect!.addItem("")
						continue
					endif
                endif

                if amtunit$="A" mask$=m1$
                if amtunit$="U" mask$=m2$
                if ratiopct$="R" mask$=m3$
                if pos(ratiopct$="P%")>0 
                    mask$=m4$
                    if abs(values[x])>999.99
                        values[x]=sgn(values[x])*999.99
                    endif
                endif
                if ratiopct$="$" if x and colinfo$((x-1)*mc+3,1)="U" mask$=m2$
:                      else mask$=m1$
                if pos(ratiopct$="PR%")=0 and pos(amtunit$="AR") and pos("$"=editing_code$)
                    xpos=pos("#"=mask$)
                    if xpos mask$=mask$(1,xpos-1)+"$"+mask$(xpos); fi
    
                endif

                OutVect!.addItem(str(values[x]))
            next x 
        else 
            xvf=fnblank(8)
        endif

        l=l+1

    wend

rem --- Run report headings overlay to get the next report

    next_overlay$=pgmdir$+"glr_headings.aon"
    goto std_exit

report_heading: rem --- Report Heading

    if OutVect!=null()
        rem --- Document initializations
        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

        dim columns$[numcols,11];rem now actual docout headings
        columns$[0,0]="  ",columns$[0,1]="C",columns$[0,2]="25"
        columns$[1,0]=col_hdg$[1],columns$[1,1]="N",columns$[1,2]="12",columns$[1,3]=m1$,columns$[1,5]=col_hdg_align$[1],columns$[1,11]=col_hdg_span$[1]
        columns$[2,0]=col_hdg$[2],columns$[2,1]="N",columns$[2,2]="12",columns$[2,3]=m1$,columns$[2,5]=col_hdg_align$[2],columns$[2,11]=col_hdg_span$[2]
        columns$[3,0]=col_hdg$[3],columns$[3,1]="N",columns$[3,2]="12",columns$[3,3]=m1$,columns$[3,5]=col_hdg_align$[3],columns$[3,11]=col_hdg_span$[3]
        columns$[4,0]=col_hdg$[4],columns$[4,1]="N",columns$[4,2]="12",columns$[4,3]=m1$,columns$[4,5]=col_hdg_align$[4],columns$[4,11]=col_hdg_span$[4]
        columns$[5,0]=col_hdg$[5],columns$[5,1]="N",columns$[5,2]="12",columns$[5,3]=m1$,columns$[5,5]=col_hdg_align$[5],columns$[5,11]=col_hdg_span$[5]
        columns$[6,0]=col_hdg$[6],columns$[6,1]="N",columns$[6,2]="12",columns$[6,3]=m1$,columns$[6,5]=col_hdg_align$[6],columns$[6,11]=col_hdg_span$[6]
        columns$[7,0]=col_hdg$[7],columns$[7,1]="N",columns$[7,2]="12",columns$[7,3]=m1$,columns$[7,5]=col_hdg_align$[7],columns$[7,11]=col_hdg_span$[7]
        columns$[8,0]=col_hdg$[8],columns$[8,1]="N",columns$[8,2]="12",columns$[8,3]=m1$,columns$[8,5]=col_hdg_align$[8],columns$[8,11]=col_hdg_span$[8]
        for z=1 to 8
            if cvs(col_hdg$[z],2)=""
                columns$[z,0]=""
                columns$[z,1]="C"
                columns$[z,2]="2"
                columns$[z,3]=""
            endif
        next z
    endif
        rem Create a new page
        l=headings+1
        page=page+1
        clock$=date(0:"%hz:%mz %p")
        headings$[0]=cvs(sysinfo.firm_name$,2)
        headings$[1]=cvs(heading$[1],3) + " " + audit$
        rem --- Print remaining heading lines

        if headings<2 return
        for i=2 to headings - 1
            headings$[i]=cvs(heading$[i],3)
        next i

return

get_totals: rem --- Retrieve Report Totals (gle-07) record

    if typecode$+totalnumber$=last$ return
    notfound=1
    gle07a.firm_id$=firm_id$
    gle07a.tot_type_cde$=typecode$
    gle07a.total_no$=totalnumber$
    gle07_key$=gle07a.firm_id$+gle07a.tot_type_cde$+gle07a.total_no$
    read (gle07_dev,key=firm_id$+typecode$+totalnumber$,dom=*next)
    while 1
          k$=key(gle07_dev,end=*break)
          if pos(gle07_key$=k$)<>1 break
          read record (gle07_dev,key=k$)gle07a$
          if gle07a.gl_updt_seq$<>update_sequence$ continue
          notfound=0
          x=(pos(gle07a.gl_pcn_flag$=cpn$)*mt-mt)+(pos(gle07a.gl_pqy_flag$=pqy$)-1)
          t[x,0,0]=gle07a.actual_amt
          t[x,0,1]=gle07a.actual_units
          t[x,1,0]=gle07a.budget_amt
          t[x,1,1]=gle07a.budget_units
    wend
    if notfound dim t[mx,my,mz]
    last$=typecode$+totalnumber$
    gle07a.gl_updt_seq$=update_sequence$
    return

line_totals: rem --- Accumulate from total

    for n=0 to 7
        x=a[n,0]
        y=a[n,1]
        z=a[n,2]
        if x=9 continue
        if y=0 or y=1 values[n]=values[n]+t[x,y,z]
        if y=2 values[n]=values[n]+t[x,1,z]-t[x,0,z]
    next n
    return

include_totals: rem --- Retrieve total

    for x=0 to mx
        for y=0 to my
            for z=0 to mz
                s[x,y,z]=s[x,y,z]+t[x,y,z]
            next z
        next y
    next x
    return

rem --- Functions

    def fnppos(q,q$)=q-min(1,pos("$"=q$))
    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fnclock$(q$)=date(0:"%hz:%mz %p")

rem --- Create blank cell(s) in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
