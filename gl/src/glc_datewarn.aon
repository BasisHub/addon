rem --- Print transaction date error/warning message
rem --- Program glc_datewarn v8.0.0 11Apr2006 (glc_ga)
rem --- Created by adx_progconv.bbx v1.0.0 (04/11/2006 05:00:32)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- This routine is used to print a standardized error or warning
rem --- message on a register or update when glc_datecheck has determined
rem --- that one exists. Note that it does NOT check for a page break.
rem --- Page breaks and headings are the responsibility of the caller.

rem --- printer_dev: Printer channel (Input)
rem --- when$      : Transaction date (Input)
rem --- number     : Transaction date error/warning number (Input)
rem --- lines      : Line counter (Input)
rem --- errors     : Total number of errors (Input/Returned)
rem --- status     : 0=No error (Returned)

rem --- Note: "errors" is initialized at the start of the register that
rem --- calls this routine and passed back and forth, so it will be the
rem --- total number of errors in the entire register.

    setesc std_exit
    seterr std_error
    enter printer_dev,when$,number,lines,errors,status

rem --- Get Translator Object

    use ::bbtranslator.bbj::BBTranslator
    declare BBTranslator Translate!
    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif
    
rem --- Initializations

    error=0
    warning=0
    status=0
    prefix$=""
    message$=""
    transaction$=Translate!.getTranslation("AON__THE_")+fndate$(when$)+Translate!.getTranslation("AON__TRANSACTION_DATE")
    if number
       warning=number<100
       error=number>100
    endif
    x$=stbl("!CLEAR","+DTWARN_MSG",err=*next)

rem --- Initialize warning message based on number

    while warning
          prefix$="WARNING:"
          switch number
                 case 1
                      message$=Translate!.getTranslation("AON_OCCURS_PRIOR_TO_THE_CURRENT_PERIOD")
                 break
                 case 2
                      message$=Translate!.getTranslation("AON_OCCURS_AFTER_THE_NEXT_PERIOD")
                 break
                 case 3
                      message$=Translate!.getTranslation("AON_FALLS_INTO_A_PRIOR_GL_PERIOD")
                 break
                 case default
                 break
          swend
          break
    wend

rem --- Initialize error message based on number

    while error
          prefix$="ERROR:"
          errors=errors+1
          switch number
                 case 101
                      message$=Translate!.getTranslation("AON_IS_NOT_IN_THE_PRIOR,_CURRENT_OR_NEXT_GL_YEAR")
                 break
                 case 102
                      message$=Translate!.getTranslation("AON_FALLS_INTO_A_LOCKED_GL_PERIOD")
                 break
                 case 103
                      message$=Translate!.getTranslation("AON_FALLS_INTO_A_CLOSED_FISCAL_YEAR")
                 break
                 case 104
                      message$=Translate!.getTranslation("AON_THIS_GL_ACCOUNT_DOES_NOT_EXIST")
                      transaction$=""
                 break
                 case 105
                      message$=Translate!.getTranslation("AON_FALLS_INTO_THE_PRIOR_FISCAL_YEAR")
                      transaction$=""
                 break
                 case default
                 break
          swend
          break
    wend

rem --- Print warning/error message

    while cvs(message$,2)<>""
          message$="---> "+prefix$+transaction$+" "+message$+"."
          if printer_dev > 0
              print (printer_dev) message$
              lines=lines+1
          else
              x$=stbl("+DTWARN_MSG",message$)
          break
    wend

rem --- All done

    goto std_exit

rem --- Functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
