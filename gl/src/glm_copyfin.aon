rem --- General Ledger Copy Financial Statements
rem --- Program glm_copyfin v8.0.0 01Jan2007 (glm_ja)
rem --- Created by adx_codeport.bbx v1.1.5 (01/01/2007 11:07:44)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-12",ids$[1]="GLM_FINMASTER"
    files$[2]="glm-22",ids$[2]="GLM_FINDETAIL"
    files$[3]="glm-32",ids$[3]="GLM_FINCOLUMNS"
    files$[4]="gle-06",ids$[4]="GLE_FINANCIALAMT"
    files$[5]="glm-12",ids$[5]="GLM_FINMASTER"
    files$[6]="glm-22",ids$[6]="GLM_FINDETAIL"
    files$[7]="glm-32",ids$[7]="GLM_FINCOLUMNS"
    files$[8]="gle-06",ids$[8]="GLE_FINANCIALAMT"
    files$[9]="gls_params",ids$[9]="GLS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    glm12_dev=channels[1]
    glm22_dev=channels[2]
    glm32_dev=channels[3]
    gle06_dev=channels[4]
    glm12_dev2=channels[5]
    glm22_dev2=channels[6]
    glm32_dev2=channels[7]
    gle06_dev2=channels[8]
    gls01_dev=channels[9]

rem --- Dimension string templates

    dim glm12a$:templates$[1],glm22a$:templates$[2],glm32a$:templates$[3]
    dim gle06a$:templates$[4],gls01a$:templates$[9]

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$

rem --- Retrieve data from Options screen

    fromfirm$=option!.getOptionData("FROM_FIRM_ID")
    fromreport$=option!.getOptionData("FROM_GL_RPT_NO")
    tofirm$=option!.getOptionData("TO_FIRM_ID")
    toreport$=option!.getOptionData("TO_GL_RPT_NO")

rem --- validate options

    if cvs(fromfirm$,2)="" or cvs(fromreport$,2)="" or cvs(tofirm$,2)="" or cvs(toreport$,2)=""
        dim msg$[1]
        msg$[0]="Invalid selection criteria. All fields must have a value."
        call pgmdir$+"adc_stdmessage.aon",0,msg$[all],1,0,0,x$,0
        release
    endif

    find(glm12_dev,key=tofirm$+toreport$,dom=approve)
        dim msg$[1]
        msg$[0]="You cannot copy to an existing report."
        call pgmdir$+"adc_stdmessage.aon",0,msg$[all],1,0,0,x$,0
        release
    rem endif

rem --- Get user approval to proceed
approve:

    more=1
    msg_id$="GL_CPY_FIN"
    dim msg_tokens$[4]
    msg_tokens$[1]=fromfirm$
    msg_tokens$[2]=fromreport$
    msg_tokens$[3]=tofirm$
    msg_tokens$[4]=toreport$

    gosub disp_message
    if msg_opt$="N" goto std_exit_no_copy

    
rem --- Start progress meter

    call pgmdir$+"adc_progress.aon","N","","","","",0,glm12_dev,1,0,status

rem  --- Copy Header"

    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

    glm12_key$=fromfirm$+fromreport$
    read record (glm12_dev,key=glm12_key$,dom=done)glm12a$
    glm12a.firm_id$=tofirm$,glm12a.gl_rpt_no$=toreport$
    glm12_key$=glm12a.firm_id$+glm12a.gl_rpt_no$
    write record (glm12_dev2,key=glm12_key$)glm12a$

rem --- COpy detail records
    
    read (glm22_dev,key=fromfirm$+fromreport$,dom=*next)
    while more
        glm22_key$=key(glm22_dev,end=*break)
        if pos(fromfirm$+fromreport$=glm22_key$)<>1 break
        read record (glm22_dev)glm22a$
        glm22a.firm_id$=tofirm$,glm22a.gl_rpt_no$=toreport$
        glm22_key$=glm22a.firm_id$+glm22a.gl_rpt_no$+glm22a.gl_rpt_line$
        write record (glm22_dev2,key=glm22_key$)glm22a$
    wend

rem --- Copy Column records

    read (glm32_dev,key=fromfirm$+fromreport$,dom=*next)
    while more
        glm32_key$=key(glm32_dev,end=*break)
        if pos(fromfirm$+fromreport$=glm32_key$)<>1 break
        read record (glm32_dev,key=glm32_key$)glm32a$
        glm32a.firm_id$=tofirm$,glm32a.gl_rpt_no$=toreport$
        glm32a_key$=glm32a.firm_id$+glm32a.gl_rpt_no$+glm32a.sequence_no$
        write record (glm32_dev2,key=glm32_key$)glm32a$
    wend

rem --- Copy Numerics

    read (gle06_dev,key=fromfirm$+fromreport$,dom=*next)
    while more
        gle06_key$=key(gle06_dev,end=*break)
        if pos(fromfirm$+fromreport$=gle06_key$)<>1 break
        read record (gle06_dev,key=gle06_key$)gle06a$
        gle06a.firm_id$=tofirm$,gle06a.gl_rpt_no$=toreport$
        gle06_key$=gle06a.firm_id$+gle06a.gl_rpt_no$+gle06a.gl_rpt_line$+gle06a.gl_pcn_flag$+gle06a.gl_pqy_flag$
        write record (gle06_dev2,key=gle06_key$)gle06a$
    wend

done: rem --- Done processing

    goto std_exit

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_copy:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    exit

rem #endinclude std_end.src

    end
