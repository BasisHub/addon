
rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

            setesc std_error
            seterr std_error

rem --- Document initializations

            OutVect!=bbjAPI().getSysGui().makeVector()
            HdrVect!=bbjAPI().getSysGui().makeVector()
            BrkVect!=bbjAPI().getSysGui().makeVector()
            TotVect!=bbjAPI().getSysGui().makeVector()
            rep_date$=date(0:"%Mz/%Dz/%Yd")
            rep_date_stamp$=date(0:"%Yd%Mz%Dz")
            rep_time$=date(0:"%hz:%mz %p")
            rep_time_stamp$=date(0:"%Hz%mz%sz")
            rep_prog$=pgm(-2)

rem --- set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif

    if export_format$="Y"
        if len(rd_alias_id$)>15 rd_alias_id$=rd_alias_id$(1,15)
        rd_alias_id$=rd_alias_id$+"X"
    endif

rem --- Initializations for the GL Account Distribution

            BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
            dim arm01a$:fattr(arm01a$),o[7],h[7],account[1],bydate[1],totals[1]
            journal=0
            distribution=1
            done=0
            lines=maxlines+1
            lastdate$=""
            lastaccount$=""
            headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__-_GL_ACCOUNT_DISTRIBUTION")
			call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","A","",m1$,0,m1
            morecustomers=1

rem --- column heading

         
            columns=8
            dim columns$[columns,10]
                
                columns$[0,0]=Translate!.getTranslation("AON_GL_ACCOUNT"),    columns$[0,1]="C",columns$[0,2]="10"
                columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),    columns$[1,1]="C",columns$[1,2]="20"
                columns$[2,0]=Translate!.getTranslation("AON_RECEIPT_DT"),  columns$[2,1]="C",columns$[2,2]="10"
                columns$[3,0]=Translate!.getTranslation("AON_CUST_ID"),      columns$[3,1]="C",columns$[3,2]="10"
                columns$[4,0]=Translate!.getTranslation("AON_NAME"),      columns$[4,1]="C",columns$[4,2]="20"
                columns$[5,0]=Translate!.getTranslation("AON_CHK_NUMBER"),    columns$[5,1]="C",columns$[5,2]="10"
                columns$[6,0]=Translate!.getTranslation("AON_INVOICE_NO"),columns$[6,1]="C",columns$[6,2]="10"
                columns$[7,0]=Translate!.getTranslation("AON_DEBIT"),         columns$[7,1]="N",columns$[7,2]=str(len(m1$)),columns$[7,3]=m1$,columns$[7,10]="T"
                columns$[8,0]=Translate!.getTranslation("AON_CREDIT"),        columns$[8,1]="N",columns$[8,2]=str(len(m1$)),columns$[8,3]=m1$,columns$[8,10]="T"
              
 
rem --- Define print positions

            o[0]=0
            o[7]=width-m1
            o[6]=o[7]-m1
            o[5]=o[6]-8
            o[4]=o[5]-9
            o[3]=o[4]-32
            o[2]=o[3]-m0-1
            o[1]=o[2]-10
            for x=0 to 5
                h[x]=o[x]
            next x
            h[6]=o[6]+m1-6
            h[7]=o[7]+m1-7

rem --- Start progress meter and position GL Distribution (arw-07) file

            call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
            call pgmdir$+"adc_progress.aon","NC","","","","",0,arw07_dev,1,meter_num,status

            read (arw07_dev,key=firm_id$,dom=*next)

rem --- reposition custmast as well, in case we used alt seq (different knum) in prev program
            
            read (arm01_dev,key="",knum="PRIMARY",dom=*next)

rem --- Read next GL Distribution (arw-07) record

    while morecustomers
   
          k$=key(arw07_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (arw07_dev,key=k$) arw07a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Level breaks?

          if arw07a.receipt_date$<>lastdate$ gosub date_break
          if arw07a.gl_account$<>lastaccount$ gosub account_break

rem --- Retrieve the Customer Master

          if arw07a.customer_id$<>arm01a.customer_id$
             dim arm01a$:fattr(arm01a$)
             arm01a.firm_id$=arw07a.firm_id$
             arm01a.customer_id$=arw07a.customer_id$
             arm01a.customer_name$=nf$
             k$=arm01a.firm_id$+arm01a.customer_id$
             find record (arm01_dev,key=k$,dom=*next) arm01a$
          endif



rem --- Print the detail line and accumulate totals

          debit$=""
          credit$=""
          index=0
          amount=arw07a.gl_post_amt
          if amount>=0 debit$=str(amount)
          if amount<0
             credit$=str(abs(amount))
             index=1
          endif
          bydate[index]=bydate[index]+amount
          account[index]=account[index]+amount
          totals[index]=totals[index]+amount

rem --- Print account subheading if the account has changed

          if export_format$="Y"
              OutVect!.addItem(account$)
              OutVect!.addItem(glm01a.gl_acct_desc$)            
          else
              if account_heading$<>""
                 xwk=fnblank(columns+1)
                 OutVect!.addItem(account_heading$)
                 OutVect!.addItem(glm01a.gl_acct_desc$)
                 xwk=fnblank(columns-1)
                 xwk=fnblank(columns+1)
                 xwk=fnblank(2)
                 account_heading$=""
              else
                 xwk=fnblank(2)
              endif
          endif

          OutVect!.addItem(fndate$(arw07a.receipt_date$))
          OutVect!.addItem(fnmask$(arm01a.customer_id$(1,customer_size),m0$))
          OutVect!.addItem(arm01a.customer_name$)
          OutVect!.addItem(arw07a.ar_check_no$)
          OutVect!.addItem(arw07a.ar_inv_no$)
          OutVect!.addItem(debit$)
          OutVect!.addItem(credit$)

rem --- Loop back for next GL Distribution record

    wend

rem --- Print report totals


        if export_format$<>"Y"
            done=1
            gosub date_break
            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            x$=Translate!.getTranslation("AON_TOTALS_FOR_REPORT")
            xwk=fnblank(1)
            OutVect!.addItem(x$)
            xwk=fnblank(5)
            OutVect!.addItem(str(totals[0]))
            OutVect!.addItem(str(abs(totals[1])))
        endif

rem --- Run next overlay

        if gl$<>"Y" goto std_exit
        next_overlay$="glr_accttotals.aon"
        goto std_exit

date_break: rem --- Date break

        gosub account_break
        print_totals=lastdate$<>""
        if export_format$<>"Y"
            while print_totals
                  TotVect!.addItem(str(OutVect!.size()/(columns+1)))
                  x$=Translate!.getTranslation("AON_TOTALS_FOR_")+fndate$(lastdate$)
                  xwk=fnblank(1)
                  OutVect!.addItem(x$)
                  xwk=fnblank(5)
                  OutVect!.addItem(str(bydate[0]))
                  OutVect!.addItem(str(abs(bydate[1])))
                  break
            wend
        endif
        if done return
        dim bydate[1]
        lastdate$=arw07a.receipt_date$
        return

account_break: rem --- GL Account break

            print_totals=lastaccount$<>""
            if export_format$<>"Y"
                while print_totals
                      TotVect!.addItem(str(OutVect!.size()/(columns+1)))
                      x$=Translate!.getTranslation("AON_TOTALS_FOR_")+account$
                      xwk=fnblank(1)
                      OutVect!.addItem(x$)
                      xwk=fnblank(5)
                      OutVect!.addItem(str(account[0]))
                      OutVect!.addItem(str(abs(account[1])))
                      break
                wend
            endif
            if done return
            dim glm01a$:fattr(glm01a$),account[1]
            lastaccount$=arw07a.gl_account$
            glm01a.firm_id$=arw07a.firm_id$
            glm01a.gl_account$=arw07a.gl_account$
            glm01a.gl_acct_desc$=nf$
            k$=glm01a.firm_id$+glm01a.gl_account$
            find record (glm01_dev,key=k$,dom=*next) glm01a$
            account$=fnmask$(glm01a.gl_account$(1,account_length),g0$)
            account_heading$=account$
            return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
