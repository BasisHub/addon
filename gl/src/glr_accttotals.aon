rem glr - GL Account Totals Report Overlay
rem Program glr_accttotals.aon v8.0.0 03Aug2006 (glr_xb)
rem Created by adx_progconv.bbx v1.0.3 (08/03/2006 03:24:42)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- This report overlay prints standard GL Account Totals and
rem --- is used as a back end for a number of different reports in
rem --- all applications.

rem --- Input Arguments:

rem --- width               : Report width in characters (optional)
rem --- headings            : Maximum element number in heading array
rem --- headings$[*]        : Standard report headings array
rem --- retain$             : Retain full report heading array if not NULL
rem --- gls01_dev           : G/L param file channel
rem --- glw04_dev           : G/L work file channel
rem --- glm01_dev           : G/L master file channel
rem --- glw04a$             : A templated string for the records of glw-04
rem --- glm01a$             : Same but for glm-01

    setesc std_error
    seterr std_error

rem --- clear next_var and outvect! so bas_process_end doesn't loop...i.e., don't run anything after this

    next_overlay$=""
    
rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!

    if OutVect!<>null() then OutVect!=null()
  
    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

    rd_alias_id$="<GLR_ACCTTOTALS>";rem dummy id to allow save for column size settings
    
rem --- Delete old progress meter

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status

rem --- Parameters

    find record (gls01_dev, key=firm_id$+"GL00", err=std_missing_params) gls01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","I","",m0$,0,m0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","A","",m1$,0,m1

rem --- Headings and print positions

    dim columns$[3,10]
    columns = 3

    columns$[0,0]=Translate!.getTranslation("AON_ACCOUNT"),     columns$[0,1]="C", columns$[0,2]="15"
    columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"), columns$[1,1]="C", columns$[1,2]="30"
    columns$[2,0]=Translate!.getTranslation("AON_DEBIT"),       columns$[2,1]="N", columns$[2,2]="10", columns$[2,3]=m1$, columns$[2,10]="T"
    columns$[3,0]=Translate!.getTranslation("AON_CREDIT"),      columns$[3,1]="N", columns$[3,2]="10", columns$[3,3]=m1$, columns$[3,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Initializations

    dim o[3]
    more=1
    balance=0
    maxlines=59
    lines=maxlines+1
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    total_recs=0
    if milestone=0 then milestone=50

rem --- Define print positions

    o[0]=0
    o[1]=max(m0,8)+1
    o[2]=o[1]+35
    o[3]=o[2]+m1
    if o[3]+m1>width o[3]=width-m1,o[2]=o[3]-m1

rem --- Adjust report headings

    if retain$="" headings=3 
:            else headings=headings+1
    dim work$[headings]
    for x=0 to headings-2
        work$[x]=headings$[x]
    next x
    dim headings$[headings]
    for x=0 to headings-2
        headings$[x]=work$[x]
    next x
    headings$[headings-1]=Translate!.getTranslation("AON_GENERAL_LEDGER_ACCOUNT_TOTALS")

rem --- Start progress meter and position file

    call pgmdir$+"adc_progress.aon","NC","GLW_DAILYDETAIL",Translate!.getTranslation("AON_GL_SUMMARY"),"","",0,glw04_dev,1,meter_num,status
    read (glw04_dev,key=firm_id$,dom=*next)

rem --- Get next GL Summary (glw-04) record

    while more
        k$=key(glw04_dev,end=*break)
        if pos(firm_id$=k$)<>1 break
        read record (glw04_dev,key=k$) glw04a$
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        amount=glw04a.gl_post_amt

        rem --- Retrieve account description

        dim glm01a$:fattr(glm01a$)
        glm01a.firm_id$=firm_id$
        glm01a.gl_account$=glw04a.gl_account$
        glm01a.gl_acct_desc$=nf$
        
        find record (glm01_dev, key=firm_id$+glw04a.gl_account$, dom=*next) glm01a$
        description$=glm01a.gl_acct_desc$

        rem --- Format detail line fields

        debit$=""
        credit$=""
        account$=fnmask$(glw04a.gl_account$(1,m0),m0$)

        if amount>0 then 
            debits=debits+amount
            debit$=str(amount)
        endif

        if amount<0 then 
            credits=credits+amount
            credit$=str(abs(amount))
        endif

        rem --- Print detail line

        if lines+1>maxlines gosub set_lines

        OutVect!.addItem(account$)
        OutVect!.addItem(description$)
        OutVect!.addItem(debit$)
        OutVect!.addItem(credit$)

        lines=lines+1

        rem --- Loop back for next summary record

    wend

rem --- All done

    balance=debits+credits
    total$=Translate!.getTranslation("AON_TOTAL_FOR_REPORT")
    debit$=str(debits)
    credit$=str(abs(credits))
    gosub print_total
    
    if balance then
        debit$=""
        credit$=""
        total$=Translate!.getTranslation("AON_BALANCE")
        if balance>0 then debit$=str(balance)
        if balance<0 then credit$=str(abs(balance))
        gosub print_total
    endif
    
    goto std_exit

set_lines: rem --- Set the line count

    lines=headings+1
    lines=lines+2
    return

print_total: rem --- Print total/subtotal

    if lines+2>maxlines gosub set_lines
  
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))

    xwk = fnblank(1)

    OutVect!.addItem(total$)
    OutVect!.addItem(debit$)
    OutVect!.addItem(credit$)
    
    lines=lines+2
    return

rem --- Functions

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
