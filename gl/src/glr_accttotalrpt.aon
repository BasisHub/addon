rem --- G/L Account Totals Report Overlay
rem --- Program glr_xb v8.0.0 05Mar2008 (glr_xb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (03/05/2008 03:55:13)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Delete old progress meter

        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status

rem --- Parameters

        dim p[4]

rem --- Initializations

        dim t[1],o[3],p[4]
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1 
        m0=len(m0$)
        m1=len(m1$),m=max(m0,8),l9=59,l=l9+1

rem -- column heading

        dim columns$[3,10]
        columns=3
        columns$[0,0]="Account",     columns$[0,1]="C",columns$[0,2]="10"
        columns$[1,0]="Description", columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]="Debit",       columns$[2,1]="N",columns$[2,2]="10",columns$[2,3]=m1$,columns$[2,10]="T"
        columns$[3,0]="Credit",      columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m1$,columns$[3,10]="T"


rem --- Initialize Print Positions

        o[0]=0
        o[1]=m+1
        o[2]=o[1]+35
        o[3]=o[2]+m1
        if o[3]+m1>width then  o[3]=width-m1,o[2]=o[3]-m1

rem --- Report Headings

        if retain$="" then
            headings=3
        else
            headings=headings+1
        endif
        dim work$[headings]
        for i=0 to headings-2
            work$[i]=headings$[i]
        next i
        dim headings$[headings]
        for i=0 to headings-2
            headings$[i]=work$[i]
        next i

        headings$[headings-1]="General Ledger Account Totals"
        h9$="*** Summary ***"
        headings$[2]=h9$
            
rem --- Position File

        call pgmdir$+"adc_progress.aon","N","","","","",0,glw04_dev,1,meter_num,status

        glw04a.firm_id$=firm_id$
        read (glw04_dev,key=glw04a.firm_id$,dom=*next,err=done)

rem --- Get next glw-04 key

 while more

        glw04a_key$=key(glw04_dev,end=*break)
        if pos(firm_id$=glw04a_key$)=0 then goto done

rem --- Read next glw-04 record

        read record (glw04_dev,key=glw04a_key$) glw04a$

rem --- Display account being processed

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Retrieve account description

        glm01a.firm_id$=glw04a.firm_id$
        glm01a.gl_account$=glw04a.gl_account$
        glm01a.gl_acct_desc$="Unknown G/L Account Number"
        find record (glm01_dev,key=glm01a.firm_id$+glm01a.gl_account$,dom=*next) glm01a$

rem --- Format detail line fields

        account$=fnmask$(glw04a.gl_account$,m0$)
        description$=glm01a.gl_acct_desc$
        debit$=""
        credit$=""
        if glw04a.gl_post_amt>0 then
            t[0]=t[0]+glw04a.gl_post_amt
            debit$=str(glw04a.gl_post_amt)
        endif
        if glw04a.gl_post_amt<0 then
            t[1]=t[1]+glw04a.gl_post_amt
            credit$=str(abs(glw04a.gl_post_amt))
        endif

rem --- Print detail line

        xwk = fnblank(4)
        OutVect!.addItem(account$)
        OutVect!.addItem(description$)
        OutVect!.addItem(debit$)
        OutVect!.addItem(credit$)
        l=l+1

rem --- Loop back for next glw-04 record

 wend

done: rem --- All Done

        total$="Total For Report"
        balance=t[0]+t[1]
        debit$=str(t[0])
        credit$=str(t[1])
        gosub Print_Total
        if balance=0 then goto exit_report
        total$="Balance"
        debit$="",credit$=""
        if balance>0 then  debit$=str(balance)
        if balance<0 then  credit$=str(abs(balance))
        gosub Print_Total
        

rem --- Run next overlay

exit_report:
        next_overlay$=""
        goto std_exit

print_Total: rem --- Print total/subtotal
        xwk = fnblank(5)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        OutVect!.addItem(total$)
        OutVect!.addItem(debit$)
        OutVect!.addItem(credit$)
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
