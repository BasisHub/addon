rem Journal Entry Detail Callpoint Program
rem Proprietary Software.  AddonSoftware
rem Program ID: gle_jrnldet.aon  <Apr 28, 2006>

	if stbl("+USE_SETERR")="YES" seterr error_proc

rem --- Enter Arguments

	enter
:		rd_callpoint_tpl$,
:		rd_aon_tpl$,
:		rdAONObj!,
:		rd_user_tpl$,
:		rdUserObj!,
:		rd_gui_dev,
:		rdSysGUI!,
:		rdForm!,
:		rd_attr_tbl$[all],
:		rd_attr_col$[all],
:		rd_attr_def_tbl$[all],
:		rd_attr_def_col$[all],
:		rd_rec_data$,
:		rd_rec_data$[all],
:		rd_table_chans$[all],
:		rd_dtlg_param$[all],
:		rdGridVect!,err=*next

rem --- Functions

	def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp1)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp1)+rd_tmp1-1)/rd_tmp1)
	def fngett_attr$(rd_att0$)=rd_attr_tbl$[fnstr_pos(rd_att0$,rd_attr_def_tbl$,5)]
	def fngetc_attr$(rd_att0,rd_att0$)=rd_attr_col$[rd_att0,fnstr_pos(rd_att0$,rd_attr_def_col$,5)]
	def fngetv_attr$(rd_att0$,rd_att1$)=rd_attr_col$[fnstr_pos(rd_att0$,rd_attr_col$[0,1],16),fnstr_pos(rd_att1$,rd_attr_def_col$,5)]
	def fnget_rec$(rd_att0$)=rd_rec_data$[fnstr_pos(rd_att0$,rd_attr_col$[0,1],16),0]

rem --- directory stbls

	rd_dir_cpt$=stbl("+DIR_CPT")
	rd_dir_pgm$=stbl("+DIR_PGM")
	rd_dir_frm$=stbl("+DIR_FRM")
	rd_dir_img$=stbl("+DIR_IMG")
	rd_dir_wrk$=stbl("+DIR_WRK")
	rd_file_usr$=stbl("+FILE_USR"),rd_file_usr$=stbl("+DIR_USR",err=*next)+"aon_"+cvs(stbl("+USER_ID",err=*next),138)+".usr"
	rd_file_set$=stbl("+FILE_SET")

route_callpoint:rem --- Route Callpoint to Correct Subroutine

	cp_callpoint_str$="BSHO;AVAL;AGDS;AGCL;BWRI;AWRI;"
	switch fnstr_pos(rd_callpoint_tpl.callpoint_id$(1,4),cp_callpoint_str$,5)
		case fnstr_pos("BSHO",cp_callpoint_str$,5)
			rd_num_files=1
			dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
			rd_open_tables$[1]="ADS_MASKS",rd_open_opts$[1]="OTA"
			gosub open_tables
			rd_ads_masks=num(rd_open_chans$[1]);dim rd_ads_masks$:rd_open_tpls$[1]
			readrecord(rd_ads_masks,key=stbl("+FIRM_ID")+"GLA")rd_ads_masks$
			gosub get_controls
			cpDebitCtl!.setMask(rd_ads_masks.dd_mask_def$)
			cpCreditCtl!.setMask(rd_ads_masks.dd_mask_def$)
			cpBalanceCtl!.setMask(rd_ads_masks.dd_mask_def$)
			readrecord(rd_ads_masks,key=stbl("+FIRM_ID")+"GLU")rd_ads_masks$
			cpUnitsCtl!.setMask(rd_ads_masks.dd_mask_def$)
		break
		case fnstr_pos("AVAL",cp_callpoint_str$,5)
			gosub get_controls
			gosub calc_totals
			gosub display_totals
		break
		case fnstr_pos("AGDS",cp_callpoint_str$,5)
			gosub get_controls
			gosub calc_totals
			gosub display_totals
		break
		case fnstr_pos("AGCL",cp_callpoint_str$,5)
			gosub get_controls
			gosub calc_totals
			gosub display_totals
		break
		case fnstr_pos("BWRI",cp_callpoint_str$,5)
		case fnstr_pos("AWRI",cp_callpoint_str$,5)
			gosub calc_totals
			if cp_debit_amt-cp_credit_amt<>0
				rd_msg_id$="GL_JOURNAL_OOB"
				dim rd_msg_tokens$[1]
				rd_msg_tokens$[1]=cvs(str(cp_debit_amt-cp_credit_amt:"###,###,###.00-"),3)
				gosub disp_message
				if rd_msg_opt$<>"Y" rd_callpoint_stat$="ABORT"
			endif
		break
		case default
		break
	swend

	goto exit_prog

get_controls:rem --- Get Additional Controls

	cpDebitCtl!=rdForm!.getControl(3006)
	cpCreditCtl!=rdForm!.getControl(3007)
	cpBalanceCtl!=rdForm!.getControl(3008)
	cpUnitsCtl!=rdForm!.getControl(3009)

	return

calc_totals:rem --- Calculate Totals

	rdRecVect!=rdGridVect!.getItem(0)
	dim cp_grid_data$:rd_dtlg_param$[1,3],err=*return
	cp_debit_amt=0
	cp_credit_amt=0
	cp_balance=0
	cp_units=0
	if rdRecVect!<>null() and rdRecVect!.size()<>0
		for cp_grid_rec=1 to rdRecVect!.size()
			cp_grid_data$=rdRecVect!.getItem(cp_grid_rec-1)
			cp_debit_amt=cp_debit_amt+nfield(cp_grid_data$,"debit_amt",err=*next)
			cp_credit_amt=cp_credit_amt+nfield(cp_grid_data$,"credit_amt",err=*next)
			cp_units=cp_units+nfield(cp_grid_data$,"units",err=*next)
		next cp_grid_rec
	endif

	return

display_totals:rem --- Display Additional Totals

	cpDebitCtl!.setValue(cp_debit_amt)
	cpCreditCtl!.setValue(cp_credit_amt)
	cpBalanceCtl!.setValue(cp_debit_amt-cp_credit_amt)
	cpUnitsCtl!.setValue(cp_units)

	return

open_tables:rem -----<Open Tables

	call rd_dir_pgm$+"rdc_open_tables.aon",
:		rd_open_beg,
:		rd_open_end,
:		rd_open_tables$[all],
:		rd_open_opts$[all],
:		rd_open_chans$[all],
:		rd_open_tpls$[all],
:		rd_table_chans$[all],
:		rd_open_batch,
:		rd_open_status$

	if rd_open_status$<>""
		rd_msg_id$="ENTRY_OPEN_ERROR"
		dim rd_msg_tokens$[1]
			rd_msg_tokens$[1]=rd_open_status$
		gosub disp_message
		goto exit_prog
	endif

	return

disp_message:rem --- Display Message Dialog

	call rd_dir_pgm$+"adc_message.aon",
:		rd_msg_id$,
:		rd_msg_tokens$[all],
:		rd_msg_opt$,
:		rd_table_chans$[all]

	return

error_proc:rem --- Error Processing Routine

	rd_err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))

	call stbl("+DIR_SYP")+"bac_error.bbj",err=error_proc,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
	if pos("EXIT"=rd_err_act$)<>0 goto exit_prog
	if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
	if pos("RETRY"=rd_err_act$)<>0 retry

exit_prog:rem --- Exit Program

	exit
