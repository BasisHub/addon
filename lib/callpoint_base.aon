rem Callpoint program for <<TITLE>>
rem Program <<PROGRAM>>

rem AddonSoftware Version 8.0.0
rem Copyright (c) 1981-2007 AddonSoftware
rem All Rights Reserved

	seterr std_error
	setesc std_error

	enter
:		callpoint!,
:		aon_tpl$,
:		AONObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		hrec_data$[all],
:		err=*next

rem --- Directory STBLs

	dir_cpt$=stbl("+DIR_CPT")
	dir_pgm$=stbl("+DIR_PGM")
	dir_frm$=stbl("+DIR_FRM")
	dir_def$=stbl("+DIR_DEF")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$ 

rem --- Callpoints and tables handled by this program

	callpoint_event$=callpoint!.getCallpointEvent()

	callpoint_event_str$=
<<CALLPOINT_EVENT_STR>>

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
<<CALLPOINT_BODY>>
		case default
		break
	swend

rem --- All done

	goto std_exit

<<CALLPOINT_CUSTOM>>

open_tables:rem --- Open Tables

	call stbl("+DIR_PGM")+"rdc_open_tables.aon",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_PGM")+"adc_message.aon",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_PGM")+"rdm_message.aon",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"rdm_prog_bar.aon",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(tmp0$=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[int(pos(tmp0$=table_chans$[0,0],20)/20)+1,0]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

	err_text$=""
	if tcb(5)<>0 and pgm(-1)=pgm(-2) err_text$=pgm(tcb(5),err=*next)
	pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
	call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
	if pos("EXIT"=err_act$) goto std_error_exit
	if pos("ESCAPE"=err_act$) seterr 0;setesc 0
	if pos("RETRY"=err_act$) retry

std_error_exit:
	
	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ escape
	
std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) exit 
	release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

rem #endinclude std_exit.src

	end
