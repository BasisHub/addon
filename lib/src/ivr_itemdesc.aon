rem ivr - Inventory Description Listing
rem Program ivr_itemdesc v8.0.0 01Apr2006 (ivr_tb)
rem Created by adx_progconv.bbx v1.0.0 (04/01/2006 08:55:19)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

rem --- Get program path

    pgmdir$=fnglobal$("+DIR_PGM","")

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],
:                           templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]

rem --- Dimension string templates

    dim ivm01a$:templates$[2]

rem --- Retrieve miscellaneous templates

    files=1,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivs01a$:templates$[1]

rem --- Retrieve sysinfo data

    sysinfo_template$=fnglobal$("+SYSINFO_TPL","")
    dim sysinfo$:sysinfo_template$
    sysinfo$=fnglobal$("+SYSINFO","")

rem --- Retrieve parameter records

    dim p[5]
    ivs01a_key$=sysinfo.firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    p[0]=num(ivs01a.item_id_len$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    segment1$=cvs(ivs01a.user_desc_lb_01$,2)
    segment2$=cvs(ivs01a.user_desc_lb_02$,2)
    segment3$=cvs(ivs01a.user_desc_lb_03$,2)
    segment1=max(p[3],len(segment1$))
    segment2=max(p[4],len(segment2$))
    segment3=max(p[5],len(segment3$))

rem --- Assign input values to local variables

    begprod$=rd_rec_data$[1,0]
    endprod$=rd_rec_data$[2,0]
    begitem$=rd_rec_data$[3,0]
    enditem$=rd_rec_data$[4,0]
    type$=rd_rec_data$[5,0]

rem --- Initializations

    dim headings$[7]
    headings$[0]=cvs(sysinfo.firm_name$,2)
    headings$[1]=cvs(sysinfo.task_desc$,2)
    when$=sysinfo.system_date$
    clock$=""
    width=80
    page=0
    l9=59
    l=l9+1
    headings=7
    number=0
    if p[0]+segment1+segment2+segment3+3>80 width=132

rem --- Initialize HEADINGS$

    dim h3$(width),h4$(width),h6$(width)
    x1$="First"
    x2$="First"
    x2=5
    if begitem$<>"" x1$=begitem$
    if begprod$<>"" x2$=begprod$,x2=3
    if endprod$="" if x2=3 x2=4
    h3$(1)="From Item: "+x1$
    h3$(width-x2-13)="From Product: "+x2$
    x1$="Last"
    x2$="Last"
    x3$="All Item Types"
    if enditem$<>"" x1$=enditem$
    if endprod$<>"" x2$=endprod$
    if type$<>"" x3$="Item Type "+type$
    h4$(1)="  To Item: "+x1$
    h4$(fncenter(x3$,width))=x3$
    h4$(width-x2-13)="  To Product: "+x2$
    h6$(1)="Item",h6$(p[0]+2)=segment1$
    if p[4]>0 h6$(p[0]+segment1+2)=segment2$
    if p[5]>0 h6$(p[0]+segment1+segment2+3)=segment3$
    headings$[3]=h3$
    headings$[4]=h4$
    headings$[6]=h6$

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC",sysinfo.task_desc$,"","Printing","",p[0],ivm01_dev,1,0,ignore_status
    read record (ivm01_dev,key=sysinfo.firm_id$+begitem$,dom=next_ivm01)ivm01a$
    goto range_checks

next_ivm01: rem --- Next Item

    k$=key(ivm01_dev,end=done)
    if pos(sysinfo.firm_id$=k$)<>1 goto done
    if enditem$<>"" if k$(3)>enditem$ goto done
    read record (ivm01_dev)ivm01a$

range_checks: rem --- Update progress meter and perform range checks

    call pgmdir$+"adc_progress.aon","S","","","",ivm01a.item_id$(1,p[0]),0,0,1,0,ignore_status
    if begprod$<>"" if ivm01a.product_type$<begprod$ goto ivm01_loop
    if endprod$<>"" if ivm01a.product_type$>endprod$ goto ivm01_loop
    if type$<>"" if ivm01a.item_class$<>type$ goto ivm01_loop

rem --- Print detail line

    if l+1>l9 gosub report_heading
    print (printer_dev)@(0),ivm01a.item_id$(1,p[0]),@(p[0]+1),ivm01a.item_desc$(1,p[3]),
:                      @(p[0]+segment1+1),ivm01a.item_desc$(p[3]+1,p[4]),
:                      @(p[0]+segment1+segment2+2),ivm01a.item_desc$(p[3]+p[4]+1,p[5])
    l=l+1
    number=number+1

ivm01_loop: rem --- Loop back for next record

    goto next_ivm01

done: rem --- All done

    if l+2>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)number," Item(s) Listed"
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    return

rem --- Functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=globalstr_exit)
        globalstr_exit:
        return q1$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
