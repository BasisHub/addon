rem ivr - LIFO/FIFO Tier Report
rem Program ivr_xb v8.0.0 23Oct2006 (ivr_xb)
rem Created by adx_codeport.bbx v1.1.1 (10/23/2006 01:01:25)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem This report has been modified for output to vector/grid (OutVect!), instead of directly to printer

rem --- The following IOLIST's were removed from this program:

rem --- ivm01a: iolist a0$(1),a1$(1),a2$(1),a3$(1),a4$,a5$,a6$,a[all]
rem --- ivm04a: iolist b0$(1),b1$(1),b2$,b[all]
rem --- ivm10a: iolist x0$(1)
rem --- ivm10c: iolist x0$(1)
rem --- ivs01a: iolist i0$,i1$,i2$,i3$,i4$,m0$,m1$,m2$,m3$,m4$,m5$
rem --- sys01t: iolist x$,f0$,x$,x$,x$,f4$,f5$


    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    sys_date$=sysinfo.system_date$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01"
    files$[3]="ivm-03"
    files$[4]="ivm-04"
    files$[5]="ivm-10"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm03_dev=channels[3]
    ivm04_dev=channels[4]
    ivm10_dev=channels[5]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm04a$:templates$[4],
:       ivm10a$:templates$[5]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivm-10C"
    ids$[2]="ivs-01A"
    ids$[3]="ivm-03C"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivm10c$:templates$[1],ivs01a$:templates$[2],ivm03c$:templates$[3]

rem --- Assign form input values to local variables
    
    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"PICK_DATE_1")
    value_02$=fnget_fld_data$(table$,"PICK_DATE_2")
    value_03$=fnget_fld_data$(table$,"WAREHOUSE_ID_1")
    value_04$=fnget_fld_data$(table$,"WAREHOUSE_ID_2")
    value_05$=fnget_fld_data$(table$,"PRODUCT_TYPE_1")
    value_06$=fnget_fld_data$(table$,"PRODUCT_TYPE_2")
    value_07$=fnget_fld_data$(table$,"ITEM_ID_1")
    value_08$=fnget_fld_data$(table$,"ITEM_ID_2")
    value_09$=fnget_fld_data$(table$,"ITEM_TYPE")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    dim p[5]
    P[0]=ivs01a.item_id_len
    p[1]=num(ivs01a.precision$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$

rem --- rem for testing, until param maint works...if pos(ivs01a.lifofifo$="LF")=0 then goto nolifofifo

rem --- init from old pgm ivr_xa

    DIM FILES[15],HEADINGS$[4],O[10],IPARAMS[5]
    LET IPARAMS[0]=P[0],IPARAMS[1]=P[3],IPARAMS[2]=P[4],IPARAMS[3]=P[5]
    DIM A0$(22),A1$(60),A2$(64),A3$(40),A4$(21),A[12],PRODUCT[1],REPORT[1],X0$(32),Y0$(5),Y1$(20)
    DIM B0$(30),B1$(16),B[5],ITEM[1],TOTAL[1],WAREHOUSE[1],TYPES$[10]
    LET FILES[1]=IVM01_DEV,FILES[10]=IVM10_DEV,FILES[14]=IVM14_DEV
    LET PAGE=0
    LET HEADINGS$[0]=firm_name$,HEADINGS$[1]=task_desc$,CLOCK$="",H9$=""
    LET WIDTH=132,L9=59,L=L9+1,HEADINGS=8,SOURCE$="BBBOTAOPRCTIWOIAIIIRPH"
    LET TYPES$[0]="Conv",TYPES$[1]="BOM",TYPES$[2]="Tier",TYPES$[3]="Sale"
    LET TYPES$[4]="P.O.",TYPES$[5]="Xfer",TYPES$[6]="W.O.",TYPES$[7]="Adj"
    LET TYPES$[8]="Iss",TYPES$[9]="Rec",TYPES$[10]="Phys"
    LET DONE=0,FILES[15]=IVM15_DEV

rem --- print positions

    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,15

    LET O[1]=P[0]+1,O[10]=WIDTH-M1,O[9]=O[10]-M3,O[8]=O[9]-M2;rem -- print positions
    LET O[7]=O[8]-3,O[6]=O[7]-11,O[5]=O[6]-6,O[4]=O[5]-9
    LET O[3]=O[4]-4,O[2]=O[3]-4,O[1]=O[0]+P[0],SPLIT=0
    IF P[0]+P[3]+P[4]+P[5]>O[2] THEN LET SPLIT=1

rem --- GOSUB 5800

    begdate$=value_01$
    enddate$=value_02$
    begwhse$=value_03$
    endwhse$=value_04$
    begprod$=value_05$
    endprod$=value_06$
    begitem$=value_07$
    enditem$=value_08$
    type$=value_09$

    gosub l5800; rem --- Initialize HEADINGS$

rem --- Position files

    call pgmdir$+"adc_progress.aon","S","","","","Printing",0,0,1,meter_num,status
    first$=firm_id$+"C"
    ivm03c.firm_id$=firm_id$,ivm03c.record_id_c$="C"
    if begwhse$<>"" then ivm03c.warehouse_id$=begwhse$
    if begwhse$<>"" and begprod$<>"" ivm03c.product_type$=begprod$
    if begprod$<>"" and begitem$<>"" ivm03c.item_id$=begitem$

    read (ivm03_dev,key=ivm03c$,dom=*next)

l1000: rem --- Get next sort record

    k$=key(ivm03_dev,end=done)
    if pos(first$=k$)<>1 goto done
    read (ivm03_dev)
    whse$=k$(4,2)
    product$=k$(6,3)
    item$=k$(9)

rem --- Valid Warehouse/Product/Item?

    if endwhse$<>"" if cvs(whse$,3)>endwhse$ goto done
    if begprod$<>"" if cvs(product$,3)<begprod$ goto l1200
    if endprod$<>"" if cvs(product$,3)>endprod$ goto l1250
    if begitem$<>"" if cvs(item$,3)<begitem$ goto l1300
    if enditem$<>"" if cvs(item$,3)>enditem$ goto l1350
    whse$=k$(4,2)
    product$=k$(6,3)
    item$=k$(9)
    goto l1400

l1200: rem --- Skip to beginning product for this warehouse'

    read (ivm03_dev,key=k$(1,5)+begprod$,dom=l3900)
    goto l3900

l1250: rem --- Skip to next warehouse

    read (ivm03_dev,key=k$(1,5)+$FF$,dom=l3900)
    goto l3900

l1300: rem --- Skip to beginning item

    read (ivm03_dev,key=k$(1,8)+begitem$,dir=0,dom=l3900)
    goto l3900

l1350: rem --- Skip to next product

    read (ivm03_dev,key=k$(1,8)+$FF$,dom=l3900)
    goto l3900

l1400: rem --- Level breaks?

    call pgmdir$+"adc_progress.aon","S","","","",whse$+" "+product$+" "+item$(1,p[0]),0,0,1,meter_num,status
    if whse$<>t0$ gosub l6000
    if product$<>t1$ gosub l6200

rem --- Retrieve item

    a0$(1)=firm_id$+item$
    needed=split
    find record (ivm01_dev,key=a0$,dom=l3900) ivm01a$
    if type$<>"" if ivm01a.item_type$<>type$ goto l3900
    description$=cvs(ivm01a.item_desc$,3)
rem --- old format using params: description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
    um$=ivm01a.unit_of_sale$
    if split=0 goto l1600
    if len(description$)>o[2] description$=description$(1,o[2]-1)

l1600: rem --- Position file for reading LIFO/FIFO records

    dim item[1]
    x$=firm_id$+whse$+item$
    b0$(1)=x$+begdate$
    tier=0
    read (ivm04_dev,key=b0$,dom=*next)

l2000: rem --- Read next LIFO/FIFO record

    k$=key(ivm04_dev,end=l3000)
    if pos(x$=k$)<>1 goto l3000
    read record (ivm04_dev) ivm04a$
    if enddate$<>"" if ivm04a.receipt_date$>enddate$ goto l3000
    if ivm04a.qty_on_hand=0 goto l3000

rem --- Format print fields

    l=l+1+needed
    tier=tier+1
    d$=""
    value=ivm04a.qty_on_hand*ivm04a.unit_cost
    if split=0 if tier=1 d$=description$,x=o[1]
    if split>0 if tier>1 d$=description$,x=o[0]+3
    if tier=1 l=l+1
    x=pos(ivm04a.trans_source$=source$,2)
    trans$=ivm04a.trans_source$
    if x>0 trans$=types$[(x-1)/2]

rem --- Print detail line

    if h9$<>""
        OutVect!.addItem(h9$)
        h9$=""
        for x=1 to 10
            OutVect!.addItem("")
        next x
    endif; rem --- sub-headings for product
	OutVect!.addItem(item$)
	OutVect!.addItem(d$)
	OutVect!.addItem(um$)
	OutVect!.addItem(str(tier:"##0"))
	OutVect!.addItem(fndate$(ivm04a.receipt_date$))
	OutVect!.addItem(trans$)
	OutVect!.addItem(ivm04a.trans_ref$)
	OutVect!.addItem(ivm04a.sequence_no$)
	OutVect!.addItem(str(ivm04a.qty_on_hand:m2$))
	OutVect!.addItem(str(ivm04a.unit_cost:m3$))
	OutVect!.addItem(str(value:m1$))
    item$="",um$="",needed=0

rem --- Accumulate totals

    item[0]=item[0]+ivm04a.qty_on_hand
    item[1]=item[1]+value
    report[1]=report[1]+value
    product[0]=product[0]+1
    product[1]=product[1]+value
    warehouse[0]=warehouse[0]+1
    warehouse[1]=warehouse[1]+value

rem --- Loop back for next tier record

    goto l2000

l3000: rem --- Print item totals

    if tier=0 goto l3900

    if split>0
        if tier<2
            OutVect!.addItem("")
            OutVect!.addItem(description$)
            for x=1 to 9;OutVect!.addItem("");next x
        endif
    endif
    if tier=1 goto l3900
    total$="Total For Item "+ivm01a.item_id$
    total[0]=item[0]
    total[1]=item[1]
    l1=1
    gosub l6900

l3900: rem --- Loop back for next record

    goto l1000

done: rem --- All done

    done=1
    gosub l6000
    total$="Total For Report"
    total[1]=report[1]
    l1=2
    gosub l6900
    goto std_exit

nolifofifo: rem --- LIFO/FIFO not set in parameter record

    call pgmdir$+"ivc_warnings.aon","F",status
    goto std_exit

l5800: rem --- Initialize HEADINGS$

rem --- date/time 
	OutVect!=bbjAPI().getSysGui().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
		rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
		rep_time_stamp$=date(0:"%Hz%mz%sz")

rem ---  miscellaneous report hdgs
    x1$="First"
    x2$="First"
    if begitem$<>"" x1$=begitem$
    if begprod$<>"" x2$=begprod$
    h1$="Item: from "+x1$
    h3$="Product: from "+x2$
    x1$="Last"
    x2$="Last"
    x3$="All Item Types"
    if enditem$<>"" x1$=enditem$
    if endprod$<>"" x2$=endprod$
    if type$<>"" x3$="Item Type "+type$
    h1$=h1$+" to "+x1$   
    h3$=h3$+" to "+x2$
    h5$=x3$
    headings$[2]=h1$
    headings$[3]=h3$
    headings$[4]=h5$

rem --- column headings
	dim columns$[10,10]
		columns$[0,0]="Item",columns$[0,1]="C",columns$[0,2]="30"
		columns$[1,0]="Description",columns$[1,1]="C",columns$[1,2]="30"
		columns$[2,0]="UM",columns$[2,1]="C",columns$[2,2]="5"
		columns$[3,0]="Tier",columns$[3,1]="C",columns$[3,2]="5",columns$[3,3]="##0"
		columns$[4,0]="Date",columns$[4,1]="C",columns$[4,2]="10"
		columns$[5,0]="Type",columns$[5,1]="C",columns$[5,2]="5"
		columns$[6,0]="Reference",columns$[6,1]="C",columns$[6,2]="15"
		columns$[7,0]="Seq",columns$[7,1]="C",columns$[7,2]="5"
		columns$[8,0]="Quantity",columns$[8,1]="N",columns$[8,2]="15",columns$[8,3]=m2$
		columns$[9,0]="Unit Cost",columns$[9,1]="N",columns$[9,2]="15",columns$[9,3]=m3$
		columns$[10,0]="Extension",columns$[10,1]="N",columns$[10,2]="15",columns$[10,3]=m1$

    return

l6000: rem --- Warehouse Break

    if t0$="" goto l6100
    gosub l6200
    total$="Total For Warehouse "+t0$
    total[1]=warehouse[1]
    l1=2
    if warehouse[0]>0 gosub l6900
l6100:
    if done goto l6190
    dim x0$(32),warehouse[1]
    t0$=whse$
    x0$(6,24)="(Not on File)"
    l=l9+1
    find record (ivm10_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    let x0$(6,24)=ivm10c.short_name$,x$="Warehouse "+t0$+" "+cvs(x0$(6,24),2)
    OutVect!.addItem(x$)
    for x=1 to 10
        OutVect!.addItem("")
    next x

l6190:
    return

l6200: rem --- Product break

    if t1$="" goto l6300
    let total$="Total For Product "+t1$,total[1]=product[1],l1=2
    if product[0]>0 gosub l6900
l6300:
    if done goto l6390
    dim x0$(32),product[1]
    let t1$=product$,x0$(7,20)="(Not on File)"
    find record (ivm10_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    x0$(7,20)=ivm10a.code_desc$
    let h9$="Product Type "+t1$+" "+x0$(7,20)
l6390:
    return
l6900: rem --- Print total line

    let x1$="",x2$=str(total[1]:m1$),total$=cvs(total$,2)
    if total[0]<>0 x1$=str(total[0]:m2$)

    OutVect!.addItem(total$)
    for x=1 to 7
        OutVect!.addItem("")
    next x
    OutVect!.addItem(x1$)
    OutVect!.addItem("")
    OutVect!.addItem(x2$)
    for x=1 to 11;OutVect!.addItem("");next x;rem "blank line after tots
    let l=l+l1,total[0]=0,total[1]=0
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Find length of field
    def fnfldlen(q$,q1$)
        wkq$=fattr(q$,q1$)
        wkq=dec(wkq$(10,2))
    return wkq

rem --- Format inventory item description

    def fnitem$(q$)=cvs(q$,32)
rem --- old format using params: def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
