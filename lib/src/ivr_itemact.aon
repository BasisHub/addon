rem ivr - Inventory Activity Report (Report Overlay)
rem Program ivr_eb v8.0.0 26Oct2006 (ivr_eb)
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 11:47:41)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- The following IOLIST's were removed from this program:

rem --- ivm01a: iolist a0$(1),a1$(1),a2$(1),a3$(1),a4$,a5$,a6$,a[all]
rem --- ivm10a: iolist x0$(1)
rem --- ivm10c: iolist x0$(1)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$
    sys_date$=sysinfo.system_date$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01"
    files$[3]="ivm-03"
    files$[4]="ivm-10"
    files$[5]="ivm-12"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm03_dev=channels[3]
    ivm10_dev=channels[4]
    ivm12_dev=channels[5]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm10a$:templates$[4],
:       ivm12a$:templates$[5]

rem --- Retrieve miscellaneous templates

    files=4,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivm-10C"
    ids$[2]="ivs-01A"
    ids$[3]="ivm-03C"
    ids$[4]="gls-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivm10c$:templates$[1],ivs01a$:templates$[2],ivm03c$:templates$[3],gls01a$:templates$[4]

rem --- Assign form input values to local variables
    
    table$=fnget_table$("")
    begper$=fnget_fld_data$(table$,"PERIOD_YEAR_1")
    begyear$=begper$(3),begper$=begper$(1,2)
    endper$=fnget_fld_data$(table$,"PERIOD_YEAR_2")
    endyear$=endper$(3),endper$=endper$(1,2)
    begwhse$=fnget_fld_data$(table$,"WAREHOUSE_ID_1")
    endwhse$=fnget_fld_data$(table$,"WAREHOUSE_ID_2")
    begprod$=fnget_fld_data$(table$,"PRODUCT_TYPE_1")
    endprod$=fnget_fld_data$(table$,"PRODUCT_TYPE_2")
    begitem$=fnget_fld_data$(table$,"ITEM_ID_1")
    enditem$=fnget_fld_data$(table$,"ITEM_ID_2")
    type$=fnget_fld_data$(table$,"ITEM_TYPE")
    level$=fnget_fld_data$(table$,"RPT_LEVEL")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    gls01a_key$=firm_id$+"GL00"
    find record (ads01_dev,key=gls01a_key$,err=std_missing_params) gls01a$

rem --- Open printer
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Initializations
    dim p[5],g[1]
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    g[0]=num(gls01a.total_pers$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    m2$=ivs01a.unit_mask$

    precision p[1]
    dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12]
    dim period$[1],headings$[6],o[8]
    headings$[0]=firm_name$
    headings$[1]=task_desc$
    when$=sys_date$
    clock$=""
    h9$=""
    width=132
    page=0
    l9=59
    l=l9+1
    dw=p[3]+p[4]+p[5]
    selection$="END"
    headings=6
    ih$="Item"
    dh$="Description"
    m9$="00"
    number=0
    period$[0]=begyear$+begper$
    period$[1]=endyear$+endper$
    headings$[2]="From Period "+begper$+" "+fnyy$(begyear$)+" Through Period "+endper$+" "+fnyy$(endyear$)

rem --- Print positions

    call pgmdir$+"adc_sizemask.aon",m2$,m2,12,15
    o[8]=width-m2
    for x=7 to 3 step -1
        o[x]=o[x+1]-m2
    next x
    o[2]=o[3]-3
    o[1]=p[0]+1
    split=0
    x=o[2]-o[1]
    if x>dw goto l700
    o[1]=o[2]-1
    dw=o[2]-3
    split=1
    ih$="Item/Description"
    dh$=""

l700: rem --- Background

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",7+p[0],ivm03_dev,1,0,ignore_status

rem --- Report headings

    dim h1$(width),h2$(width)
    if level$="I" headings$[1]=headings$[1]+" By Item"
    if level$="W" headings$[1]=headings$[1]+" By Warehouse"
    x1$="First"
    x2$="First"
    x2=5
    if begitem$<>"" x1$=begitem$
    if begprod$<>"" x2$=begprod$,x2=3
    if endprod$="" if x2=3 x2=4
    h1$(1)="From Item: "+x1$
    h1$(width-x2-13)="From Product: "+x2$
    x1$="Last"
    x2$="Last"
    x3$="All Item Types"
    if enditem$<>"" x1$=enditem$
    if endprod$<>"" x2$=endprod$
    if type$<>"" x3$="Item Type "+type$
    h2$(1)="  To Item: "+x1$
    h2$(fncenter(x3$,width))=x3$
    h2$(width-x2-13)="  To Product: "+x2$
    headings$[4]=h1$
    headings$[5]=h2$

rem --- Position files

    first$=firm_id$+"A"
    k$=first$+begprod$
    p=0
    if level$="W" first$=firm_id$+"C",k$=first$+begwhse$,p=2
    read (ivm03_dev,key=k$,dom=*next)

l1000: rem --- Get next sort record

    k$=key(ivm03_dev,end=done)
    if pos(first$=k$)<>1 goto done
    whse$=k$(4,2)
    product$=k$(4+p,3)
    item$=k$(7+p)
    if level$="W" goto l1200

rem --- By Item: Valid Product/Item?

    if endprod$<>"" if cvs(product$,3)>endprod$ goto done
    if begitem$<>"" if cvs(item$,3)<begitem$ goto l1400
    if enditem$<>"" if cvs(item$,3)>enditem$ goto l1450
    x$=product$+" "+item$(1,p[0])
    goto l1500

l1200: rem --- By Warehouse: Valid Warehouse/Product/Item?

    if endwhse$<>"" if cvs(whse$,3)>endwhse$ goto done
    if begprod$<>"" if cvs(product$,3)<begprod$ goto l1300
    if endprod$<>"" if cvs(product$,3)>endprod$ goto l1350
    if begitem$<>"" if cvs(item$,3)<begitem$ goto l1400
    if enditem$<>"" if cvs(item$,3)>enditem$ goto l1450
    x$=whse$+" "+product$+" "+item$(1,p[0])
    goto l1500

l1300: rem --- Skip to beginning product for this warehouse'

    read (ivm03_dev,key=k$(1,5)+begprod$,dom=l3900)
    goto l3900

l1350: rem --- Skip to next warehouse

    read (ivm03_dev,key=k$(1,5)+$FF$,dom=l3900)
    goto l3900

l1400: rem --- Skip to beginning item

    read (ivm03_dev,key=k$(1,6+p)+begitem$,dir=0,dom=l3900)
    goto l3900

l1450: rem --- Skip to next product

    read (ivm03_dev,key=k$(1,6+p)+$FF$,dom=l3900)
    goto l3900

l1500: rem --- Level breaks?

    call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,meter_num,status
    if level$="W" if whse$<>t0$ gosub l6000
    if product$<>t1$ gosub l6200
    read (ivm03_dev)

rem --- Retrieve item and activity

    dim item$[2],activity[12],description$(dw)
    a0$(1)=firm_id$+item$
    find record (ivm01_dev,key=a0$,dom=l3900) ivm01a$
    if type$<>"" if ivm01a.item_type$<>type$ goto l3900
    description$(1)=cvs(ivm01a.item_desc$,3)
rem --- old format using params: description$(1)=fnitem$(a1$,p[3],p[4],p[5])
    action$="A"
    item$[0]=firm_id$
    item$[2]=item$
    if level$="W" action$="",item$[1]=whse$
rem --- old call pgms were ivc_wb.bbx and ivc_pa.bbx

    call pgmdir$+"ivc_whseact.aon",action$,files[all],item$[all],period$[all],activity[all],status
    call pgmdir$+"ivc_periodqty.aon",selection$,activity[all],balance

rem --- Print detail line

    needed=2
    x$=""
    if h9$<>"" needed=needed+2
    if l+needed>l9 gosub report_heading
    if h9$<>"" gosub l5200
    if split=0 x$=description$
    print (printer_dev)@(o[0]),ivm01a.item_id$,@(o[1]),x$,@(o[2]),ivm01a.unit_of_sale$,@(o[3]),activity[0]:m2$,
:       @(o[4]),activity[1]:m2$,@(o[5]),activity[3]:m2$,@(o[6]),activity[5]:m2$,@(o[7]),activity[7]:m2$,
:       @(o[8]),balance:m2$
    if split>0 x$=description$ else x$=""
    print (printer_dev)@(o[0]+3),x$,@(o[4]),activity[2]:m2$,@(o[5]),activity[4]:m2$,@(o[6]),activity[6]:m2$,
:       @(o[7]),activity[8]:m2$
    l=l+2
    number=number+1

l3900: rem --- Loop back for next record

    goto l1000

done: rem --- All done

    if number>0 goto std_exit
    gosub report_heading
    print (printer_dev)"No Inventory Activity Found"
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+4
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[3]+m2-10),"Beginning",@(o[4]+m2-9),"Received",@(o[5]+m2-7),"Sold &",@(o[6]+m2-11),
:       "Adjustments",@(o[7]+m2-9),"Transfers",@(o[8]+m2-8),"Ending"
    print (printer_dev)@(o[0]),ih$,@(o[1]),dh$,@(o[2]),"UM",@(o[3]+m2-10),"Balance",@(o[4]+m2-9),"& Built",
:       @(o[5]+m2-7),"Issued",@(o[6]+m2-11),"& Returns",@(o[7]+m2-9),"In & Out",@(o[8]+m2-8),"Balance"
    print (printer_dev)""
    return

l5200: rem --- Product subheading

    if l+2>l9 gosub report_heading
    print (printer_dev)h9$
    print (printer_dev)""
    let l=l+2,h9$=""
    return

l6000: rem --- Warehouse Break

    if t0$="" goto l6100
    gosub l6200
l6100:
    dim x0$(32)
    let t0$=whse$,x0$(6,24)="(Not on File)",l=l9+1
    find record (ivm10_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x0$(6,24)=ivm10c.short_name$
    let x$="Warehouse "+t0$+" "+cvs(x0$(6,24),2)
    let headings$[4]=h1$,headings$[4](fncenter(x$,width),len(x$))=x$
    return
rem --- Product break
l6200:
    dim x0$(32)
    let t1$=product$,x0$(7,20)="(Not on File)"
    find record (ivm10_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    x0$(7,20)=ivm10a.code_desc$
    let h9$="Product Type "+t1$+" "+x0$(7,20)
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$)=cvs(q$,32)
rem --- old format using params: def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
