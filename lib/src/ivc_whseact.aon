rem ivc - Return Warehouse Activity
rem Program ivc_wb v8.0.0 26Oct2006 (ivc_wb)
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 11:47:22)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- The following cross-reference files are being referenced:

rem --- Cross-reference file ivm-03 referenced (Line 0078)
rem --- Cross-reference file ivm-03 referenced (Line 0117)
rem --- Cross-reference file ivm-03 referenced (Line 0135)
rem --- Cross-reference file ivm-03 referenced (Line 0139)
rem --- Cross-reference file ivm-03 referenced (Line 0141)

rem --- The following cross-reference records are being referenced:

rem --- Cross-reference record ivm03a replaced by index on ivm-01 (Line 0083)

rem --- The following IOLIST's were removed from this program:

rem --- ivm12a: iolist b0$(1),b1$,b2$,b[all]

rem --- The following channel references have been identified:

rem --- ivm03a: Channel reference (Line 0119)
rem --- ivs01a: (Generated by CodePort)

rem --- ACTION$    : Action to perform (input)
rem --- ""  = Return info for specific warehouse
rem --- "A" = Return info for all warehouses
rem --- "T" = Return total beginning balance instead of first
rem --- "L" = Return info for lot/serial number
rem --- CHANNELS[N]: Channel Numbers (input)
rem --- [2] = ivm-12 or ivm-17
rem --- [3] = ivm-03
rem --- ITEM$[n]   : Inventory Item Information
rem --- [0] = Firm ID
rem --- [1] = Warehouse ID (optional)
rem --- [2] = Inventory Item Number
rem --- [3] = Lot/Serial Number
rem --- PERIOD$[n] : Period Range (input)
rem --- [0] = Beginning Period/Year (YYMM)
rem --- [1] = Ending Period/Year (YYMM)
rem --- ACTIVITY[n]: Warehouse Activity (returned)
rem --- [0] to [12] = IVM-12/17 numerics
rem --- STATUS     : Status Code (returned)

    seterr std_error
    setesc std_error
    enter action$,channels[all],item$[all],period$[all],activity[all],status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-03"
    files$[3]="ivm-12"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm03_dev=channels[2]
    ivm12_dev=channels[3]

rem --- Dimension string templates

    dim ivm03a$:templates$[2],ivm12a$:templates$[3]

rem --- Retrieve miscellaneous templates

    files=1,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivs01a$:templates$[1]

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    keylen=28
    period=25
    if pos("L"=action$)>0 keylen=48,period=45

rem --- Initializations

    dim b0$(keylen),b[12]
    firm_id$=item$[0]
    warehouse$=item$[1]
    item$=item$[2]
    status=0
    if pos("L"=action$)>0 lotser$=item$[3]
    for x=0 to 12
        activity[x]=0
    next x

rem --- Single Warehouse

    if pos("A"=action$)>0 goto l1900
    gosub l6000
    goto done

l1900: rem --- Position warehouse file

    read (ivm03_dev,key=firm_id$+"G"+item$,dom=*next)

l2000: rem --- All Warehouses

    k$=key(ivm03_dev,end=done)
    if pos(firm_id$+"G"+item$=k$)<>1 goto done
    read (ivm03_dev)
    warehouse$=k$(24,2)
    gosub l6000
    goto l2000

done: rem --- All done

    goto std_exit

l6000: rem --- Position activity file to beginning period/year

    b0$(1)=firm_id$+warehouse$
    b0$(5)=item$
    b0$(period)=period$[0]
    first=1
    if pos("L"=action$)>0 b0$(25,20)=lotser$
    read record (ivm12_dev,key=b0$,dom=l6100) ivm12a$
    goto l6150

l6100: rem --- Read activity record(s) and accumulate totals

    k$=key(ivm12_dev,end=l6190)
    if pos(b0$(1,keylen-4)=k$)<>1 goto l6190
    if k$(keylen-3)>period$[1] goto l6190
    read record (ivm12_dev) ivm12a$
l6150:

    dim names$:"name[100]:c(40*)"
    names$=fattr(ivm12a$,"")
    startx=1
    while names.name$[startx] <> "BEG_BALANCE"
        startx=startx+1
    wend
    for x=0 to 12
        name$=names.name$[x+startx]
        activity[x]=activity[x]+nfield(ivm12a$,name$)
    next x
    if first activity[0]=activity[0]+ivm12a.beg_balance
    if pos("T"=action$)=0 first=0
    goto l6100
l6190:
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
