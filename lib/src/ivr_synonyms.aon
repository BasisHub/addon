rem ivr - Inventory Synonyms Listing (Report Overlay)
rem Program ivr_synonyms v8.0.0 05Apr2006 (ivr_sb)
rem Created by adx_progconv.bbx v1.0.0 (04/05/2006 10:24:28)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- The following IOLIST's were removed from this program:

rem --- ivm01a: iolist a0$(1),ivm01a.item_desc$(1),a2$(1),a3$(1),a4$,a5$,a6$,a[all]
rem --- sys01t: iolist x$,f0$,x$,x$,x$,f4$,f5$
rem --- ivs01a: iolist i0$,i1$,i2$,i3$,i4$,m0$,m1$,m2$,m3$,m4$,m5$

    seterr std_error
    setesc std_error

rem --- Get program path

    pgmdir$=fnglobal$("+DIR_PGM","")

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01"
    files$[3]="ivm-14"
    files$[4]="ivm-24"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],
:                           templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm14_dev=channels[3]
    ivm24_dev=channels[4]

rem --- Dimension string templates

    dim ivm01a$:templates$[2]

rem --- Retrieve miscellaneous templates

    files=1,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivs-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivs01a$:templates$[1]

rem --- Retrieve sysinfo data

    sysinfo_template$=fnglobal$("+SYSINFO_TPL","")
    dim sysinfo$:sysinfo_template$
    sysinfo$=fnglobal$("+SYSINFO","")
    firm_id$=sysinfo.firm_id$

rem --- Retrieve parameter records

    dim p[5]
    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    p[0]=ivs01a.item_id_len
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)

rem --- Assign input values to local variables

    sequence$=rd_rec_data$[1,0]
    begsyn$=rd_rec_data$[2,0]
    endsyn$=rd_rec_data$[3,0]
    begprod$=rd_rec_data$[4,0]
    endprod$=rd_rec_data$[5,0]
    begitem$=rd_rec_data$[6,0]
    enditem$=rd_rec_data$[7,0]
    type$=rd_rec_data$[8,0]
    if cvs(sequence$,2)="" sequence$="I"

rem --- Open/Lock Files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Initializations

    dim headings$[7],o[3]
    headings$[0]=cvs(sysinfo.firm_name$,2)
    headings$[1]=cvs(sysinfo.task_desc$,2)
    when$=sysinfo.system_date$
    clock$=""
    width=80
    page=0
    l9=59
    l=l9+1
    headings=7
    number=0
    last$=""

rem --- Print positions

    o[0]=1
    if sequence$="S" o[1]=22,o[2]=o[1]+p[0]+1,o[3]=width-3
    if sequence$="I" o[1]=p[0]+2,o[3]=width-20,o[2]=o[3]-4

rem --- Background

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",20,ivm14_dev,1,0,ignore_status

rem --- Initialize HEADINGS$

    dim h1$(width),h2$(width),h6$(width)
    if sequence$="S" headings$[1]=headings$[1]+" By Synonym"
    if sequence$="I" headings$[1]=headings$[1]+" By Item"
    x1$="First",x2$="First",x2=5
    if begitem$<>"" x1$=begitem$
    if begprod$<>"" x2$=begprod$,x2=3
    if endprod$="" if x2=3 x2=4
    h1$(1)="From Item: "+x1$,h1$(width-x2-13)="From Product: "+x2$
    x1$="Last",x2$="Last",x3$="All Item Types"
    if enditem$<>"" x1$=enditem$
    if endprod$<>"" x2$=endprod$
    if type$<>"" x3$="Item Type "+type$
    headings$[1]=headings$[1]+" For "+x3$
    h2$(1)="  To Item: "+x1$,h2$(width-x2-13)="  To Product: "+x2$
    if sequence$="S"
       h6$(o[0])="Synonym",h6$(o[1])="Item"
       h6$(o[2])="Description",h6$(o[3])="Prd"
    endif
    if sequence$="I"
       h6$(o[0])="Item",h6$(o[1])="Description"
       h6$(o[2])="Prd",h6$(o[3])="Synonym"
    endif
    headings$[3]=h1$
    headings$[4]=h2$
    headings$[6]=h6$

rem --- Position files

    read (ivm14_dev,key=firm_id$+begsyn$,dom=position_ivm24)
position_ivm24:
    read (ivm24_dev,key=firm_id$+begitem$,dom=next_record)

next_record: rem --- Next Synonym

    if sequence$="I" goto next_item
    k$=key(ivm14_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    if endsyn$<>"" if k$(3,len(endsyn$))>endsyn$ goto done
    read (ivm14_dev)
    if begitem$<>"" if k$(23,len(begitem$))<begitem$ goto beginning_item
    if enditem$<>"" if k$(23,len(enditem$))>enditem$ goto next_synonym
    synonym$=k$(3,20)
    item$=k$(23)
    x$=synonym$
    goto read_item

beginning_item: rem --- Skip to beginning item

    read (ivm14_dev,key=k$(1,22)+begitem$(1,len(begitem$)-1)+$FF$,dom=record_loop)
    goto record_loop

next_synonym: rem --- Skip to next synonym

    read (ivm14_dev,key=k$(1,22)+$FF$,dom=record_loop)
    goto record_loop

next_item: rem --- Next Item

    k$=key(ivm24_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    if enditem$<>"" if k$(3,len(enditem$))>enditem$ goto done
    read (ivm24_dev)
    if begsyn$<>"" if k$(23,len(begsyn$))<begsyn$ goto next_synonym
    if endsyn$<>"" if k$(23,len(endsyn$))>endsyn$ goto next_synonym_item
    synonym$=k$(23,20)
    item$=k$(3,20)
    x$=item$
    goto read_item

beginning_synonym: rem --- Skip to beginning synonym

    read (ivm24_dev,key=k$(1,22)+begsyn$(1,len(begsyn$)-1)+$FF$,dom=record_loop)
    goto record_loop

next_synonym_item: rem --- Skip to next item

    read (ivm24_dev,key=k$(1,22)+$FF$,dom=record_loop)
    goto record_loop

read_item: rem --- Retrieve item

    call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,meter_num,status
    ivm01_key$=firm_id$+item$
    find record (ivm01_dev,key=ivm01_key$,dom=record_loop)ivm01a$
    if begprod$<>"" if ivm01a.product_type$<begprod$ goto record_loop
    if endprod$<>"" if ivm01a.product_type$>endprod$ goto record_loop
    if type$<>"" if ivm01a.item_type$<>type$ goto record_loop

rem --- Format detail line

    dim buffer$(width)
    description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
    if sequence$="I"
       buffer$(o[0])=item$
       buffer$(o[1])=description$
       char$=item$(1,1)
       buffer$(o[2])=ivm01a.product_type$
       buffer$(o[3])=synonym$
    endif
    if sequence$="S"
       buffer$(o[0])=synonym$
       buffer$(o[1])=item$
       char$=synonym$(1,1)
       buffer$(o[2])=description$
       buffer$(o[3])=ivm01a.product_type$
    endif

rem --- Skip a line?

    if char$=last$ goto print_detail_line
    if l+1>l9 goto print_detail_line
    print (printer_dev)""
    l=l+1
    last$=char$

print_detail_line: rem --- Print detail line

    if l+1>l9 gosub report_heading
    print (printer_dev)buffer$
    l=l+1
    number=number+1

record_loop: rem --- Loop back for next record

    goto next_record

done: rem --- All done

    if l+2>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)number," Synonyms Listed"
    goto std_exit

report_heading: rem --- Report Heading

    let l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if char$<>"" last$=char$
    return

rem --- Functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=globalstr_exit)
        globalstr_exit:
        return q1$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
