rem ivc - Inventory Item Update (ATAMO Routine)
rem Program ivc_itemupdt v8.0.0 08Nov2006 (ivc_ua)
rem Created by adx_codeport.bbx v1.1.2 (11/08/2006 12:22:14)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- ivm-03/ivm-08 writes can probably be deleted.CAH

rem --- The following IOLIST's were removed from this program:

rem --- ivm01a: iolist a0$(1),a1$(1),a2$(1),a3$(1),a4$(1),a5$,a6$(1),a[all]
rem --- ivm02a: iolist b0$(1),b1$(1),b2$,b[all]
rem --- ivm03h: iolist x0$(1)
rem --- ivm04a: iolist b0$(1),b1$(1),b2$,b[all]
rem --- ivm05a: iolist b0$(1),b1$(1),b2$(1),b[all]
rem --- ivm07a: iolist b0$(1),b1$(1),b[all]
rem --- ivm08a: iolist x0$(1)
rem --- ivm12a: iolist b0$(1),b1$,b2$,b[all]
rem --- ivm17a: iolist b0$(1),b1$,b2$,b[all]
rem --- ivt01a: iolist b0$(1),b1$(1),b2$(1),b3$,b[all]
rem --- ivt02a: iolist x0$(1)
rem --- ivt03a: iolist x0$(1)
rem --- ivt04a: iolist b0$(1),b1$(1),b2$(1),b3$,b[all]

rem --- enter statement data:
rem --- ACTION$    : Transaction Type (input)
rem --- BB       = Beginning Balance
rem --- BI/BO    = BOM Production Entry (BI=Issue/BO=Receipt)
rem --- IA/IC    = Inventory Transaction Adjustment/Commit
rem --- IR/II    = Inventory Transaction Receipt/Issue
rem --- PH       = Physical Inventory
rem --- PO/RC/PI = PO Entry/Receipt/Invoice
rem --- OE/OP    = OP Entry/Invoice
rem --- TI/TO/TA = Transfer In/Out/Tier Adjustment
rem --- WI/WO    = Work Orders (WI=Issue/WO=Receipt)
rem --- CO/UC/OO = Commit/Uncommit/Adjust On Order
rem --- CHANNELS[n]: Channel Numbers (input)
rem --- changed to tblchans$[all] for file open pgm adc_open_tables.aon.CAH
rem --- [0] = sys-01      [7] = ivm-07    [42] = ivt-02
rem --- [1] = ivm-01      [8] = ivm-08    [43] = ivt-03
rem --- [2] = ivm-02     [12] = ivm-12    [44] = ivt-04
rem --- [4] = ivm-04     [17] = ivm-17    [40] = ivw-04
rem --- [5] = ivm-05     [41] = ivt-01    [03] = ivm-03
rem --- PARAMS[n]  : Numeric Parameters (input)
rem --- [0] = Total Periods
rem --- PARAMS$[n] : String Parameters (input)
rem --- [0] = Terminal Date (YMD)
rem --- [1] = Operator ID
rem --- [2] = Inventory Parameter String (P2$)
rem --- [3] = Inventory Parameter String (P3$)
rem --- [4] = Inventory Parameter String (P4$)
rem --- ITEMS$[n]  : Item Information (input)
rem --- [0] = Firm ID        [2] = Item Number
rem --- [1] = Warehouse ID   [3] = Lot/Serial Number
rem --- REFS$[n]   : Reference Information (input)
rem --- [0] = Date (3 or 6)    [7] = GL Account Number
rem --- [1] = Reference 1      [8] = Transaction Comment
rem --- [2] = Reference 2      [9] = Finished Item (BI/WI/WO)
rem --- [3] = Reference 3     [10] = Lot/Serial Location
rem --- [4] = Reference 4     [11] = Lot/Serial Comment
rem --- [5] = Sequence Nbr    [12] = Drop Ship Flag
rem --- [6] = OP/PO Line Code
rem --- REFS[n]    : Reference Information (input)
rem --- [0] = Quantity       [3] = Actual Lead Time
rem --- [1] = Unit Cost      [4] = Landed Cost
rem --- [2] = Unit Price     [5] = Physical Count
rem --- STATUS     : Status Code (Returned)
rem --- tblchans$[n,n]: used by file open routine to determine if file(s) is/are already open

    seterr std_error
    setesc std_error
    enter action$,tblchans$[all],params[all],params$[all],items$[all],refs$[all],refs[all],status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],chans$[files],templates$[files]
    files$[1]="IVS_PARAMS"; rem --- "ads-01"
    files$[2]="IVM_ITEMMAST"; rem --- "ivm-01"
    files$[3]="IVM_ITEMWHSE"; rem --- "ivm-02"
    files$[4]="IVX_ITEMVEND"; rem --- "ivm-03"
    files$[5]="IVM_ITEMTIER"; rem --- "ivm-04"
    files$[6]="IVM_ITEMVEND"; rem --- "ivm-05"
    files$[7]="IVM_LSMASTER"; rem --- "ivm-07"
    files$[8]="IVM_LSXREF"; rem --- "ivm-08"
    files$[9]="IVM_ITEMACT"; rem --- "ivm-12"
    files$[10]="IVM_LSACT"; rem --- "ivm-17"
    files$[11]="IVT_LSTRANS"; rem --- "ivt-01"
    files$[12]="IVX_LSCUST"; rem --- "ivt-02"
    files$[13]="IVX_LSVEND"; rem --- "ivt-03"
    files$[14]="IVT_ITEMTRAN"; rem --- "ivt-04"

    for wkx=begfile to endfile
        options$[wkx]="OTA"
    next wkx

    call pgmdir$+"adc_open_tables.aon",begfile,endfile,files$[all],options$[all],
:                                   chans$[all],templates$[all],tblchans$[all],batch,status$

rem ---     call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
rem --- :                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=num(chans$[1])
    ivm01_dev=num(chans$[2])
    ivm02_dev=num(chans$[3])
    ivm03_dev=num(chans$[4])
    ivm04_dev=num(chans$[5])
    ivm05_dev=num(chans$[6])
    ivm07_dev=num(chans$[7])
    ivm08_dev=num(chans$[8])
    ivm12_dev=num(chans$[9])
    ivm17_dev=num(chans$[10])
    ivt01_dev=num(chans$[11])
    ivt02_dev=num(chans$[12])
    ivt03_dev=num(chans$[13])
    ivt04_dev=num(chans$[14])

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm03h$:templates$[4],
:       ivm04a$:templates$[5],ivm05a$:templates$[6],ivm07a$:templates$[7],
:       ivm08a$:templates$[8],ivm12a$:templates$[9],ivm17a$:templates$[10],
:       ivt01a$:templates$[11],ivt02a$:templates$[12],ivt03a$:templates$[13],
:       ivt04a$:templates$[14]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivs-01A"
    ids$[2]="sys-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivs01a$:templates$[1],sys01a$:templates$[2]

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sys01a_key$=firm_id$+"SY00"
    find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Parameters

    dim p[5]
    p2$=params$[2]
    p3$=params$[3]
    p4$=params$[4]
    p[0]=num(p2$(1,2));rem --- item# size
    p[1]=num(p2$(5,1));rem --- precision
    p[2]=num(p2$(7,2));rem --- lot/ser# length
    ls=pos(p3$(17,1)="LS")>0;rem --- lotted/serialized flag (LSN)
    lf=pos(p3$(3,1)="LF")>0;rem --- lifo/fifo code (LFN)

rem --- Initializations

    precision p[1]
    dim whse$(2),item$(20),lotser$(20)
    dropship=(pos(action$="OPRC",2) and refs$[12]="Y")
    qty=refs[0]
    cost=refs[1]
    firm_id$=items$[0]
    whse$(1)=items$[1]
    item$(1)=items$[2]
    lotser$(1)=items$[3]
    status=0
    last=0
    trans$="BBBMBMIT  ITITPH    OPPOTITOWIWO        "

rem --- Validate arguments

    code=pos(action$="BBBIBOIAICIIIRPHPOOEOPRCTITOWIWOCOUCTAOOPI",2)
    if code=0 goto l4900
    when$=refs$[0]
    clock$=""
    ymd$=fndate$(when$)
    if pos(action$="ICPOOECOUCTAOOPI",2) goto l900
    call pgmdir$+"adc_peryear.aon",firm_id$,sys01_dev,ymd$,period$,year$
    if period$="" period$=p4$(1,2),year$=p4$(3)
    clock$=fntime$(clock$)
l900:
    dim last$[8]
    last$[1]="LSTREC_DATE"
    last$[2]="LSTBLT_DATE"
    last$[3]="LSTSAL_DATE"
    last$[4]="LSTISS_DATE"
    last$[5]="LSTADJ_DATE"
    last$[6]="LSTXIN_DATE"
    last$[7]="LSTXOT_DATE"
    last$[8]="LSTRET_DATE"
    dim action$[8]
    action$[1]="QTY_RECEIVED"
    action$[2]="QTY_BUILT"
    action$[3]="QTY_SOLD"
    action$[4]="QTY_ISSUED"
    action$[5]="QTY_ADJUST"
    action$[6]="QTY_XFER_IN"
    action$[7]="QTY_XFER_OUT"
    action$[8]="QTY_RETURNED"
    if pos(action$="IRRC",2) last=1
    if pos(action$="BOWO",2) last=2
    if action$="OP" last=3
    if pos(action$="BIIIWI",2) last=4
    if pos(action$="IAPH",2) last=5
    if action$="TI" last=6
    if action$="TO" last=7
    if action$="OP" if qty>0 last=8
    action=last

rem --- Retrieve ivm-01 Item Master

    ivm01k0$=firm_id$+item$
    find record (ivm01_dev,key=ivm01k0$,dom=l4950) ivm01a$
    if ls ls=ivm01a.lotser_item$="Y"

rem --- ivm-01 Item Master

    if dropship goto l1200
    if last=0 goto l1200
    ivm01a.lstrec_date$=fnl$(ivm01a.lstrec_date$,ymd$)
    write record (ivm01_dev,key=ivm01k0$) ivm01a$

l1200: rem --- ivm-02 Warehouse

    if dropship and action$<>"RC" goto l3700
    if action$="TA" goto l1400
    ivm02k0$=firm_id$+whse$+item$
    find record (ivm02_dev,key=ivm02k0$,dom=l4950) ivm02a$
    offset=27
    lastphys=16
    physical=8
    unit=11
    avg=12
    rep=14
    commit=2
    curfile=ivm02_dev
    gosub l6400
    if action gosub l6500

rem --- Adjust remaining fields

    location$=ivm02a.location$
    if action$="PI" ivm02a.landed_cost=refs[4]
    if action$="PH" and cvs(lotser$,2)="" ivm02a.lstphy_date$=ymd$,ivm02a.select_phys$="N",ivm02a.physical_cnt=refs[5]
    write record (ivm02_dev,key=ivm02k0$) ivm02a$

l1400: rem --- ivm-04 LIFO/FIFO

    if dropship goto l3700
    if lf=0 goto l1900
    if pos(action$="BBICPOOECOUCOOPI",2) goto l1900
    if action$="TA" onhandqty=qty else onhandqty=ivm02a.qty_on_hand
    dim r$(16)
    ivm04a.firm_id$=firm_id$,ivm04a.warehouse_id$=whse$,ivm04a.item_id$=item$
    ivm04a.receipt_date$=ymd$
    r$(1,2)=action$
    r$(3,7)=refs$[2]
    r$(10,3)=refs$[5]
    if pos(action$="OPRC",2) r$(3,7)=refs$[3]
    if qty<0 goto l1700
    read (ivm04_dev,key=ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$+ivm04a.receipt_date$,dom=*next)

l1500: rem --- For receipts, add to existing tier or create new one

    k$=key(ivm04_dev,end=l1550)
    if pos(ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$+ivm04a.receipt_date$=k$)<>1 goto l1550
    read record (ivm04_dev) ivm04a$
    if ivm04a.unit_cost<>cost goto l1500
    if cvs(r$,2)<>ivm04a.trans_source$+ivm04a.trans_ref$+ivm04a.line_no$ goto l1500
    goto l1600

l1550: rem --- Create new tier

    ivm04a.sequence_no$=str(num(ivm04a.sequence_no$)+1:"000")
    ivm04a.trans_source$=action$
    ivm04a.trans_ref$=refs$[2]
    ivm04a.line_no$=refs$[5]
    if pos(action$="OPRC",2) ivm04a.trans_ref$=refs$[3]

l1600: rem --- Update tier record

    ivm04a.qty_on_hand=ivm04a.qty_on_hand+qty+min(onhandqty-qty,0)
    ivm04a.unit_cost=cost
    if ivm04a.qty_on_hand>0 goto l1650
    remove (ivm04_dev,key=ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$+
:       ivm04a.receipt_date$+ivm04a.sequence_no$,dom=l1900)

    goto l1900
l1650:
    write record (ivm04_dev,key=ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$+
:       ivm04a.receipt_date$+ivm04a.sequence_no$) ivm04a$
    goto l1900

l1700: rem --- For issues, decrement existing tier(s)

    amount=abs(qty)
    x=pos(p3$(3,1)="FL")
    avg=0
    number=0
    if x=1 read (ivm04_dev,key=ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$,dom=l1740)
    if x=2 read (ivm04_dev,key=ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$+$FF$,dom=*next)
l1740:
    while amount>0
          on x goto l1880,l1760,l1780
      l1760:
          k$=key(ivm04_dev,end=l1880)
          if pos(ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$=k$)<>1 goto l1880
          goto l1800 
      l1780:
          k$=keyp(ivm04_dev,end=l1880)
          if pos(ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$=k$)<>1 goto l1880
      l1800:
          extract record (ivm04_dev,key=k$) ivm04a$
          if amount<=ivm04a.qty_on_hand goto l1850
          amount=amount-ivm04a.qty_on_hand
          total=(avg*number)+(ivm04a.qty_on_hand*ivm04a.unit_cost)
          number=number+ivm04a.qty_on_hand
          avg=total/number
          refs[1]=avg
          remove (ivm04_dev,key=ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$+
:           ivm04a.receipt_date$+ivm04a.sequence_no$,dom=l1890)
      
          goto l1890
      l1850:
          ivm04a.qty_on_hand=ivm04a.qty_on_hand-amount
          total=(avg*number)+(amount*ivm04a.unit_cost)
          number=number+amount
          avg=total/number
          refs[1]=avg
          if ivm04a.qty_on_hand=0 goto l1870
          write record (ivm04_dev,key=ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$+
:           ivm04a.receipt_date$+ivm04a.sequence_no$) ivm04a$
          goto l1880
      l1870: remove (ivm04_dev,key=ivm04a.firm_id$+ivm04a.warehouse_id$+ivm04a.item_id$+
:           ivm04a.receipt_date$+ivm04a.sequence_no$,dom=*next)
      
      l1880:
          amount=0
      l1890:
    wend

l1900: rem --- ivm-05 Vendor Information

    if action$<>"RC" goto l2000
    ivm05a.firm_id$=firm_id$,ivm05a.vendor_id$=refs$[1]
    ivm05a.item_id$=item$
    ivm05a.prisec_flag$="S"
    ivm03h.firm_id$=firm_id$,ivm03h.record_id_h$="H",ivm03h.item_id$=ivm05a.item_id$,ivm03h.vendor_id$=ivm05a.vendor_id$
    find record (ivm05_dev,key=ivm05a.firm_id$+ivm05a.vendor_id$+ivm05a.item_id$,dom=l1950) ivm05a$
    goto l1960
l1950:
rem --- assume ivm-03,"H" key replaced by index on ivm-05, so can probably remove.CAH
    write record (ivm03_dev,key=ivm03h$) ivm03h$
l1960:
    ivm05a.last_po_date$=ymd$
    ivm05a.last_po_cost=refs[1]
    ivm05a.last_po_lead=refs[3]
    ivm05a.lead_time=refs[3]
    write record (ivm05_dev,key=ivm05a.firm_id$+ivm05a.vendor_id$+ivm05a.item_id$) ivm05a$

l2000: rem --- ivm-12 Inventory Activity

    if pos(action$="ICPOOECOUCTAOOPI",2) goto l2200
    ivm12a.firm_id$=firm_id$,ivm12a.warehouse_id$=whse$,ivm12a.item_id$=item$,
:       ivm12a.year$=year$,ivm12a.period$=period$
    amount=qty
    if pos(action$="BIIIWI",2)>0 amount=-qty
    if pos(action$="OPTO",2)>0 amount=abs(qty)
    find record (ivm12_dev,key=ivm12a.firm_id$+ivm12a.warehouse_id$+ivm12a.item_id$+
:       ivm12a.year$+ivm12a.period$,dom=*next) ivm12a$
    if action=0 if cvs(lotser$,2)="" ivm12a.beg_balance=amount
    if action=0 if cvs(lotser$,2)<>"" ivm12a.beg_balance=ivm12a.beg_balance+amount
    if action>0 field ivm12a$,action$[action]=str(nfield(ivm12a$,action$[action])+amount)
    write record (ivm12_dev,key=ivm12a.firm_id$+ivm12a.warehouse_id$+ivm12a.item_id$+
:       ivm12a.year$+ivm12a.period$) ivm12a$

l2200: rem --- ivt-04 Inventory Transactions

    if pos(action$="ICPOOECOUCTAOOPI",2) goto l3000
    dim x$(96)
    ivt04a.firm_id$=firm_id$,ivt04a.warehouse_id$=whse$,ivt04a.item_id$=item$,ivt04a.trans_date$=ymd$
    x$(1,2)=trans$(code,2)
    x$(3,6)=refs$[1]
    x$(9,7)=refs$[2]
    x$(16,7)=refs$[3]
    x$(23,2)=refs$[4]
    x$(25,3)=refs$[5]
    x$(28,1)=refs$[6]
    x$(29,2)=ivm01a.unit_of_sale$
    if pos(action$="PORC",2) x$(28,1)="",x$(91,2)=refs$[6]
    k$=keyp(ivt04_dev,end=l2400)
    if pos(ivt04a.firm_id$+ivt04a.warehouse_id$+ivt04a.item_id$+ivt04a.trans_date$=k$)<>1 goto l2400
    read record (ivt04_dev,key=k$,dom=l2400) ivt04a$
    if pos(x$(1,30)=ivt04a.trans_source$+ivt04a.trans_ref_1$+ivt04a.trans_ref_2$+ivt04a.trans_ref_3$+
:       ivt04a.trans_ref_4$+ivt04a.trans_seq$+ivt04a.line_code$+ivt04a.unit_measure$)<>1 goto l2400

rem --- Update existing ivt-04 record

    ivt04a.trans_qty=ivt04a.trans_qty+qty
    if action$="BB" and cvs(lotser$,2)="" ivt04a.trans_qty=qty
    if cost<>0 ivt04a.unit_cost=cost
    if refs[2]<>0 ivt04a.unit_price=refs[2]
    write record (ivt04_dev,key=ivt04a.firm_id$+ivt04a.warehouse_id$+ivt04a.item_id$+
:       ivt04a.trans_date$+ivt04a.iv_hist_seq$) ivt04a$
    goto l3000

l2400: rem --- Write new ivt-04 record

    ivt04k0$=firm_id$+whse$+item$+ymd$
    channel=ivt04_dev
    x=28
    if qty=0 if action$<>"BB" goto l3000
    gosub l6000
    write record (ivt04_dev,key=ivt04a.firm_id$+ivt04a.warehouse_id$+
:       ivt04a.item_id$+ivt04a.trans_date$+ivt04a.iv_hist_seq$) ivt04a$

l3000: rem --- ivm-07 Lot/Serial Number

    if ls=0 or cvs(lotser$,2)="" goto done
    if ivm01a.inventoried$<>"Y" goto l3700
    if pos(action$="BBOOPOTAPI",2) goto l3600
    ivm07a.firm_id$=firm_id$,ivm07a.warehouse_id$=whse$,ivm07a.item_id$=item$,ivm07a.lotser_no$=lotser$
    find record (ivm07_dev,key=ivm07a.firm_id$+ivm07a.warehouse_id$+ivm07a.item_id$+
:       ivm07a.lotser_no$,dom=l3100) ivm07a$
    goto l3500

l3100: rem --- Create ivm-07 Lot/Serial Master

    if pos(action$="BOIAIRPHRCOPTIWO",2)=0 goto l3600
    ivm07a.ls_location$=refs$[10]
    ivm07a.ls_comments$=refs$[11]
    ivm07a.std_cost=cost
    if action$="RC" ivm07a.vendor_id$=refs$[1]
    if cvs(ivm07a.ls_location$,2)="" ivm07a.ls_location$=location$
    if cvs(ivm07a.ls_comments$,2)<>"" goto l3400

rem --- Generate lot/serial comment

    x$="Generated By "
    if action$="BO" x$=x$+"Production Entry"
    if action$="IA" x$=x$+"Inventory Adjustment"
    if action$="IR" x$=x$+"Inventory Receipt"
    if action$="PH" x$=x$+"Physical Inventory"
    if action$="RC" x$="PO Number "+refs$[2]+" - Line "+refs$[5]
    if action$="OP" x$="Sales Return"
    if action$="TI" x$=x$+"Inventory Transfer"
    if action$="WO" x$="Completed Work Order"
    ivm07a.ls_comments$=x$

l3400: rem --- Create ivm-08 Lot/Serial Xref
rem --- assuming ivm-08 will now just be mkey of ivm-07
rem --- can probably remove this routine.CAH
    ivm08a.firm_id$=firm_id$,ivm08a.lotser_no$=lotser$,ivm08a.warehouse_id$=whse$,ivm08a.item_id$=item$
    write record (ivm08_dev,key=ivm08a$) ivm08a$

l3500: rem --- Update lot/serial master

    offset=63
    lastphys=61
    commit=1
    physical=2
    unit=3
    avg=4
    rep=6
    curfile=ivm07_dev
    gosub l6400
    if action gosub l6500
    if action$="PH" ivm07a.lstphy_date$=ymd$,ivm07.physical_cnt=refs[5]
    vendor$=ivm07a.vendor_id$
    if ivm07.qty_on_hand=0 ivm07a.closed_flag$="C" else ivm07a.closed_flag$=""
    write record (ivm07_dev,key=ivm07a.firm_id$+ivm07a.warehouse_id$+ivm07a.item_id$+
:       ivm07a.lotser_no$) ivm07a$

l3600: rem --- ivm-17 Lot/Serial Activity

    if pos(action$="ICPOOEOOCOUCTAPI",2) goto l3700
    ivm17a.firm_id$=firm_id$,ivm17a.warehouse_id$=whse$,ivm17a.item_id$=item$,
:       ivm17a.lotser_no$=lotser$,ivm17a.year$=year$,ivm17a.period$=period$
    amount=qty
    if pos(action$="BIIIWI",2)>0 amount=-qty
    if pos(action$="OPTO",2)>0 amount=abs(qty)
    find record (ivm17_dev,key=ivm17a.firm_id$+ivm17a.warehouse_id$+ivm17a.item_id$+
:       ivm17a.lotser_no$+ivm17a.year$+ivm17a.period$,dom=*next) ivm17a$
    if action=0 ivm17a.beg_balance=amount
    if action>0 field ivm17a$,action$[action]=str(nfield(ivm17a$,action$[action])+amount)
    write record (ivm17_dev,key=ivm17a.firm_id$+ivm17a.warehouse_id$+ivm17a.item_id$+
:       ivm17a.lotser_no$+ivm17a.year$+ivm17a.period$) ivm17a$

l3700: rem --- ivt-01 Lot/Serial Transactions

    if ls=0 goto done
    if pos(action$="ICPOOECOUCTAOOPI",2) goto l3800
    if qty=0 and action$<>"BB" goto done
    ivt01a.firm_id$=firm_id$,ivt01a.warehouse_id$=whse$,ivt01a.item_id$=item$,
:       ivt01a.lotser_no$=lotser$,ivt01a.trans_date$=ymd$
    channel=ivt01_dev
    x=48
    if dropship location$="Drop Ship"
    gosub l6000
    write record (ivt01_dev,key=ivt01a.firm_id$+ivt01a.warehouse_id$+ivt01a.item_id$+
:       ivt01a.lotser_no$+ivt01a.trans_date$+ivt01a.iv_hist_seq$) ivt01a$

l3800: rem --- ivt-02 Lot/Serial By Customer Xref

    if action$<>"OP" goto l3900
    gosub l6200
    write record (ivt02_dev,key=ivt02a$) ivt02a$

l3900: rem --- ivt-03 Lot/Serial By Vendor Xref

    if pos(action$="OPRC",2)=0 goto done
    if ivm01.inventoried$<>"Y" goto done
    gosub l6300
    if action$="OP" ivt03a.vendor_id$=vendor$
    if pos(" "<>ivt03a.vendor_id$)=0 goto done
    write record (ivt03_dev,key=ivt03a$) ivt03a$

done: rem --- All done

    goto std_exit

l4900: rem --- Argument errors

    status=917
    goto std_exit

l4950: rem --- Missing record

    status=11
    goto std_exit

l6000: rem --- Initialize IVT-01/IVT-04 Transaction History Record

    if channel=ivt01_dev dim ivtwk$:fattr(ivt01a$);ivtwk$=ivt01a$
    if channel=ivt04_dev dim ivtwk$:fattr(ivt04a$);ivtwk$=ivt04a$
    ivtwk.trans_source$=trans$(code,2)
    ivtwk.trans_ref_1$=refs$[1]
    ivtwk.trans_ref_2$=refs$[2]
    ivtwk.trans_ref_3$=refs$[3]
    ivtwk.trans_ref_4$=refs$[4]
    ivtwk.trans_seq$=refs$[5]
    ivtwk.line_code$=refs$[6]
    ivtwk.unit_measure$=ivm01a.unit_of_sale$
    ivtwk.trans_cmt$=refs$[8]
    ivtwk.finish_item$=refs$[9]
    ivtwk.gl_account$=refs$[7]
    ivtwk.location$=location$
    if pos(action$="PORC",2) ivtwk.line_code$="",ivtwk.po_line_code$=refs$[6]
    ivtwk.oper_id$=params$[1]
    ivtwk.system_date$=params$[0]
    ivtwk.system_time$=clock$
    ivtwk.terminal_id$=fid(0)
    ivtwk.trans_qty=qty
    ivtwk.unit_cost=cost
    ivtwk.unit_price=refs[2]
    if cvs(refs$[10],2)<>"" ivtwk.location$=refs$[10]

rem --- Find next available key

    let ivtwk.iv_hist_seq$="00000"
    if action$="BB" goto l6190
    read (channel,key=ivtwk$(1,len(ivtwk$)-len(ivtwk.iv_hist_seq$))+$FF$,dom=*next) 
    let k$=keyp(channel,end=l6160)
    if pos(ivtwk$(1,len(ivtwk$)-len(ivtwk.iv_hist_seq$))=k$)=1 
:       ivtwk.iv_hist_seq$=k$(len(k$)-len(ivtwk.iv_hist_seq$)+1) 
l6160:
    let ivtwk.iv_hist_seq$=str(num(ivtwk.iv_hist_seq$)+1:"00000")
l6190:

    if channel=ivt01_dev ivt01a$=ivtwk$
    if channel=ivt04_dev ivt04a$=ivtwk$
    return

l6200: rem --- Initialize IVT-02 Transaction Xref Record
rem --- as of 11/13/06, ivt-02/03 aren't defined... making mods as if files will be there

    ivt02a.firm_id$=firm_id$,ivt02a.customer_id$=refs$[1],ivt02a.product_type$=ivm01a.product_type$,
:       ivt02a.lotser_no$=lotser$,ivt02a.trans_date$=ymd$,ivt02a.warehouse_id$=whse$,ivt02a.item_id$=item$,
:       ivt02a.iv_hist_seq$=ivt01a.iv_hist_seq$
    return

l6300: rem --- Initialize IVT-03 Transaction Xref Record

    ivt03a.firm_id$=firm_id$,ivt03a.vendor_id$=refs$[1],ivt03a.product_type$=ivm01a.product_type$,
:       ivt03a.lotser_no$=lotser$,ivt03a.trans_date$=ymd$,ivt03a.warehouse_id$=whse$,ivt03a.item_id$=item$,
:       ivt03a.iv_hist_seq$=ivt01a.iv_hist_seq$
    return

l6400: rem --- Update IVM-02/IVM-07 committed and on order

    if curfile=ivm02_dev dim ivmwk$:fattr(ivm02a$);ivmwk$=ivm02a$
    if curfile=ivm07_dev dim ivmwk$:fattr(ivm07a$);ivmwk$=ivm07a$
    if dropship goto l6430
    if pos(action$="COICIIOEOPTOWI",2) ivmwk.qty_commit=ivmwk.qty_commit+qty
    if pos(action$="UC",2) ivmwk.qty_commit=ivmwk.qty_commit-qty
l6430:
    if curfile<>ivm02_dev goto l6490
    if action$="OO" ivmwk.qty_on_order=ivmwk.qty_on_order+qty
    if action$="PO" ivmwk.qty_on_order=ivmwk.qty_on_order+qty
    if action$="RC" ivmwk.qty_on_order=ivmwk.qty_on_order-qty
l6490:

    if curfile=ivm02_dev ivm02a$=ivmwk$
    if curfile=ivm07_dev ivm07a$=ivmwk$
    return

l6500: rem --- ivm-02 Warehouse/IVM-07 Lot/Serial Number Updates

    if curfile=ivm02_dev dim ivmwk$:fattr(ivm02a$);ivmwk$=ivm02a$
    if curfile=ivm07_dev dim ivmwk$:fattr(ivm07a$);ivmwk$=ivm07a$
    if dropship goto l6990
    if last>0 field ivmwk$,last$[last]=fn1$(field(ivmwk$,last$[last]),ymd$)

rem --- Recalculate average cost

    let amount=(ivmwk.qty_on_hand*ivmwk.avg_cost)+(qty*cost),number=ivmwk.qty_on_hand+qty,x=ivmwk.avg_cost
    if number>0 ivmwk.avg_cost=amount/number
    if ivmwk.avg_cost=0 ivmwk.avg_cost=x
    if ivmwk.avg_cost<0 ivmwk.avg_cost=cost
    if ivmwk.qty_on_hand<=0 ivmwk.avg_cost=cost 

rem --- Set replacement cost
    if pos(action$="IAPH",2) goto l6800
    if qty<0 goto l6800
    if refs[1]<>0 ivmwk.rep_cost=refs[1]

rem --- Set Last PO Cost
l6800:
    if action$="RC" ivmwk.last_po_cost=cost

rem --- Set unit cost
    switch pos(p3$(8,1)="ASR")
        case 1
            ivmwk.unit_cost=ivmwk.avg_cost
        break
        case 2
            ivmwk.unit_cost=ivmwk.std_cost
        break
        case 3
            ivmwk.unit_cost=ivmwk.rep_cost
        break
        case default
        break
    swend

l6990: rem --- Update quantity on hand
    let ivmwk.qty_on_hand=ivmwk.qty_on_hand+qty

    if curfile=ivm02_dev ivm02a$=ivmwk$
    if curfile=ivm07_dev ivm07a$=ivmwk$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_table_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Yd%Mz%Dz")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnl$: return greater of two dates, or spaces if both dates null/empty
    def fnl$(q1$,q2$)
        if cvs(q1$,2)="" dim q1$(8,"Z")
        if cvs(q2$,2)="" dim q2$(8,"Z")
        q$=q1$
        if q2$>q1$ q$=q2$
        if pos("Z"<>q$)=0 dim q$(8)
        return q$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
