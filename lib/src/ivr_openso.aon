rem ivr - Open Sales Orders Report

rem Created from ivr_lifofifo, ivr_mm and ivr_lm 10/31/2006.CAH

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem This report has been modified for output to vector/grid (OutVect!), instead of directly to printer

rem --- The following IOLIST's were removed from this program:

rem --- ivm01a: iolist a0$(1),a1$(1),a2$(1),a3$(1),a4$,a5$,a6$,a[all]

rem --- ivs01a: iolist i0$,i1$,i2$,i3$,i4$,m0$,m1$,m2$,m3$,m4$,m5$
rem --- sys01t: iolist x$,f0$,x$,x$,x$,f4$,f5$


    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    sys_date$=sysinfo.system_date$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="ivm-01"
    files$[3]="ope-01"
    files$[4]="ope-11"
    files$[5]="ivm-10"
    files$[6]="ivm-03"
    files$[7]="arm-01"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    ivm01_dev=channels[2]
    ope01_dev=channels[3]
    ope11_dev=channels[4]
    ivm10_dev=channels[5]
    ivm03_dev=channels[6]
    arm01_dev=channels[7]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ope01a$:templates$[3],ope11a$:templates$[4],
:       ivm10a$:templates$[5],ivm03a$:templates$[6],arm01a$:templates$[7]

rem --- Retrieve miscellaneous templates

    files=2,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivs-01A"
    ids$[2]="ivm-10C"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivs01a$:templates$[1],ivm10c$:templates$[2]

rem --- retrieve templates for record keys

    call pgmdir$+"adc_key_template.aon","OPE_ORDDET","ALT_KEY_01",key_tpl$,rd_table_chans$[all],rd_status$
    dim ope11k1$:key_tpl$
    call pgmdir$+"adc_key_template.aon","OPE_ORDHDR","PRIMARY",key_tpl$,rd_table_chans$[all],rd_status$
    dim ope01k0$:key_tpl$

rem --- Assign form input values to local variables
    
    table$=fnget_table$("")
    value_01$=fnget_fld_data$(table$,"PICK_DATE_1")
    value_02$=fnget_fld_data$(table$,"PICK_DATE_2")
    value_03$=fnget_fld_data$(table$,"WAREHOUSE_ID")
    value_04$=fnget_fld_data$(table$,"ITEM_ID")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

    dim p[5]
    P[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$

    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,15
rem --- took these masks from another program... perhaps should use quantity mask from order params?.CAH
rem --- Initializations

    dim o[3],d[1],b0$(200),b[13],c0$(52),c1$(64),c[17],d0$(8),d1$(30)
    width=132,h0=width-1,l9=59,l=l9+1
    o[2]=h0-m1
    o[1]=o[2]-4
    o[0]=o[1]-m2
    d[1]=o[0]-9
    d[0]=d[1]-9
    dw=d[0]-15


    begdate$=value_01$
    enddate$=value_02$
    whse$=value_03$
    begitem$=value_04$

    gosub l5800;rem "initialize headings

rem --- Position files

    call pgmdir$+"adc_progress.aon","S","","","","Printing",0,0,1,meter_num,status

    read (ope11_dev,key=firm_id$+whse$+begitem$,knum=1,dom=*next)
read_ope11:
    ope11k1$=key(ope11_dev,end=done)
    if ope11k1.firm_id$+ope11k1.warehouse_id$+cvs(ope11k1.item_id$,3)<>firm_id$+whse$+begitem$ goto done
    readrecord (ope11_dev)ope11a$
    ope01k0$=ope11k1.firm_id$+ope11k1.ar_type$+ope11k1.customer_id$+ope11k1.order_no$+"000"
    find record (ope01_dev,key=ope01k0$,dom=next_ope11) ope01a$
    if begdate$<>"" if ope01a.order_date$<begdate$ goto next_ope11
    if enddate$<>"" if ope01a.order_date$>enddate$ goto next_ope11
    dim customer$(dw),status$(3)
    find record (arm01_dev,key=ope11a.firm_id$+ope11a.customer_id$,dom=*next) arm01a$


   
rem --- Assign data

    ordnum$=ope11a.order_no$
    orddate$=fndate$(ope01a.order_date$)
    shipdate$=fndate$(ope11a.est_shp_date$)
    if ope01a.order_date$=fill(3) orddate$=fill(8)
    if ope11a.est_shp_date$=fill(3) if ope01a.shipmnt_date$=fill(3) shipdate$=fill(8) else shipdate$=fndate$(ope01a.shipmnt_date$)
    commit$=ope11a.commit_flag$
    ext=ope11a.ext_price
    qty=ope11a.qty_ordered
    totqty=totqty+qty
    totext=totext+ext

rem --- Determine and assign Status

    if ope01a.credit_flag$="C" if ope01a.ordinv_flag$="O" ope01a.ordinv_flag$="C"
    status$(1,1)=ope01a.ordinv_flag$
    if ope01a.invoice_type$="P" status$(1,1)="Q"
    if ope01a.print_status$="Y" status$(2,1)="P"
    if ope01a.lock_status$="Y" status$(3,1)="L"
    if pos(ope01a.lock_status$="YN")>0 status$(3,1)=ope01a.lock_status$

l2500: rem --- Store detail line

    dim customer$(dw)
    customer$(1)=arm01a.customer_id$+" "+arm01a.customer_name$
    OutVect!.addItem(ordnum$)
    OutVect!.addItem(status$)
    OutVect!.addItem(customer$)
    OutVect!.addItem(orddate$)
    OutVect!.addItem(shipdate$)
    OutVect!.addItem(str(qty:m2$))
    OutVect!.addItem(commit$)
    OutVect!.addItem(str(ext:m1$))

    l=l+1

next_ope11: rem --- Loop back for next record

    goto read_ope11

done: rem --- All done

    wkx=fnblank(2)
    OutVect!.addItem("Total")
    wkx=fnblank(2)
    OutVect!.addItem(str(totqty:m2$))
    OutVect!.addItem(str(totext:m1$))
    goto std_exit


l5800: rem --- Initialize HEADINGS$

rem --- date/time 
	OutVect!=bbjAPI().getSysGui().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
		rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
		rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- miscellaneous headings

    dim h1$(width),h2$(width),h6$(width),headings$[3]
    ivm01a.firm_id$=firm_id$,ivm01a.item_id$=begitem$
    find record(ivm01_dev,key=ivm01a.firm_id$+pad(ivm01a.item_id$,fnfldlen(fattr(ivm01a$),"ITEM_ID")),dom=*next)ivm01a$
    find record (ivm10_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$
    x$="Warehouse: "+whse$+" "+cvs(ivm10c.short_name$,2)
    desc$=cvs(ivm01a.item_desc$,3)
    x1$="Item: "
    if begitem$<>"" x1$=x1$+begitem$ else x1$=x1$+"First"
    x1$=x1$+" "+desc$
    h1$=x1$
    h2$=x$
    headings$[0]=firm_name$
    headings$[1]=task_desc$
    headings$[2]=h1$
    headings$[3]=h2$

rem --- column headings
	dim columns$[7,10]
		columns$[0,0]="Order #",columns$[0,1]="C",columns$[0,2]="15"
		columns$[1,0]="Sts",columns$[1,1]="C",columns$[1,2]="5"
		columns$[2,0]="Customer",columns$[2,1]="C",columns$[2,2]="30"
		columns$[3,0]="Ordered",columns$[3,1]="C",columns$[3,2]="15"
		columns$[4,0]="Ship",columns$[4,1]="C",columns$[4,2]="15"
		columns$[5,0]="Quantity",columns$[5,1]="C",columns$[5,2]="15",columns$[7,3]=m2$
		columns$[6,0]="Com?",columns$[6,1]="N",columns$[6,2]="5"
		columns$[7,0]="Extension",columns$[7,1]="N",columns$[7,2]="15",columns$[7,3]=m1$

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$)=cvs(q$,32)
rem --- old format using params: def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- Find length of field
    def fnfldlen(q$,q1$)
        dim q2$:q$
        wkq$=fattr(q2$,q1$)
        wkq=dec(wkq$(10,2))
        return wkq
    fnend

rem --- Create blank line in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
