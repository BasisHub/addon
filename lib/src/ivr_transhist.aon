rem ivr - Inventory Transaction History Listing (Report Overlay)
rem Program ivr_transhist v8.0.0 26Oct2006 (ivr_qb)
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 12:56:00)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem This report has been modified for output to vector/grid (OutVect!), instead of directly to printer

rem --- The following IOLIST's were removed from this program:

rem ---     ivt04a1: iolist a0$,a1$,a2$,a3$,a[all]
rem ---     ivm01a: iolist b0$,b1$,b2$,b3$,b4$,b5$,b6$,b[all]
rem ---     ivt04a2: iolist l0$,l1$,l2$,l3$,l[all]
rem ---     ivm10a: iolist x0$(1)
rem ---     ivm10c: iolist x0$(1)

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$
    sys_date$=sysinfo.system_date$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ads-01"
    files$[2]="apm-01"
    files$[3]="arm-01"
    files$[4]="glm-01"
    files$[5]="ivm-01"
    files$[6]="ivm-10"
    files$[7]="ivt-04"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ads01_dev=channels[1]
    apm01_dev=channels[2]
    arm01_dev=channels[3]
    glm01_dev=channels[4]
    ivm01_dev=channels[5]
    ivm10_dev=channels[6]
    ivt04_dev=channels[7]

rem --- Dimension string templates

    dim apm01a$:templates$[2],arm01a$:templates$[3],
:       glm01a$:templates$[4],ivm01a$:templates$[5],ivm10a$:templates$[6],
:       ivt04a$:templates$[7],ivt04a1$:templates$[7],ivt04a2$:templates$[7]

rem --- Retrieve miscellaneous templates

    files=6,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivm-10C"
    ids$[2]="ivs-01A"
    ids$[3]="ivm-03C"
    ids$[4]="aps-01A"
    ids$[5]="ars-01A"
    ids$[6]="gls-01A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivm10c$:templates$[1],ivs01a$:templates$[2],ivm03c$:templates$[3],aps01a$:templates$[4],
:       ars01a$:templates$[5],gls01a$:templates$[6]

rem --- Assign form input values to local variables

    dim ttypes$[9]
    table$=fnget_table$("")
    beg_date$=fnget_fld_data$(table$,"PICK_DATE_1")
    end_date$=fnget_fld_data$(table$,"PICK_DATE_2")
    beg_whse$=fnget_fld_data$(table$,"WAREHOUSE_ID_1")
    end_whse$=fnget_fld_data$(table$,"WAREHOUSE_ID_2")
    beg_prod$=fnget_fld_data$(table$,"PRODUCT_TYPE_1")
    end_prod$=fnget_fld_data$(table$,"PRODUCT_TYPE_2")
    beg_item$=fnget_fld_data$(table$,"ITEM_ID_1")
    end_item$=fnget_fld_data$(table$,"ITEM_ID_2")
    item_type$=fnget_fld_data$(table$,"ITEM_TYPE")
    ttypes$[0]=fnget_fld_data$(table$,"TRAN_HST_ALL")
    ttypes$[1]=fnget_fld_data$(table$,"TRAN_HST_PO")
    ttypes$[2]=fnget_fld_data$(table$,"TRAN_HST_OP")
    ttypes$[3]=fnget_fld_data$(table$,"TRAN_HST_IT")
    ttypes$[4]=fnget_fld_data$(table$,"TRAN_HST_PH")
    ttypes$[5]=fnget_fld_data$(table$,"TRAN_HST_TI")
    ttypes$[6]=fnget_fld_data$(table$,"TRAN_HST_TO")
    ttypes$[7]=fnget_fld_data$(table$,"TRAN_HST_WI")
    ttypes$[8]=fnget_fld_data$(table$,"TRAN_HST_WO")
    ttypes$[9]=fnget_fld_data$(table$,"TRAN_HST_BM")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ads01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- check application settings

    call pgmdir$+"adc_application.aon","IV",info$[all]
    gl$=info$[9];rem --- post to GL?
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]; rem --- AR installed?
    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]; rem --- AP installed?

rem --- Initializations

    dim p[7]
    P[0]=ivs01a.item_id_len
    P[1]=ivs01a.vendor_prd_len
    p[2]=num(ivs01a.precision$)
    p[3]=ivs01a.ls_no_len
    p[5]=num(ivs01a.desc_len_01$)
    p[6]=num(ivs01a.desc_len_02$)
    p[7]=num(ivs01a.desc_len_03$)
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$

    if ar$<>"Y" goto ar_not_installed
    find record (ads01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
    x8=num(ars01a.customer_size$)
    x9$=ars01a.customer_output$, x9=len(x9$)
ar_not_installed:
    if ap$<>"Y" goto ap_not_installed
    find record (ads01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    x6=num(aps01a.vendor_size$)
    x7$=aps01a.vendor_output$,x7=len(x7$)
ap_not_installed:
    find record (ads01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g2$=gls01a.max_acct_len$
    g5$=gls01a.acct_output$

    alltypes$="POOPITPHTITOWIWOBM"
    for x=1 to 9
        if ttypes$[x] = "Y" ttype$=ttype$+alltypes$((x-1)*2+1,2)
    next x

    h0=60
    h1=115
    h=0
    h1$=firm_name$
    h2$=task_desc$
    IF ttype$="" all$="Y"
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,10,12

    precision p[2]
    headings=8
    when$=sys_date$
    clock$=""
    h9$=""
    dim headings$[headings],o[6],a[4],b[12],l[4]
    dim files[4],params[6],masks$[3]
    headings$[0]=firm_name$
    headings$[1]=task_desc$
    width=132
    page=0
    l9=59
    l=l9+1
    done=0
    files[0]=ivm01_dev
    files[1]=ivm10_dev
    files[2]=arm01_dev
    files[3]=apm01_dev
    files[4]=glm01_dev
    params[0]=p[0]
    params[1]=x8
    params[2]=x6
    params[3]=num(g2$)
    params[4]=p[5]
    params[5]=p[6]
    params[6]=p[7]
    masks$[0]=firm_id$
    masks$[1]=x9$
    masks$[2]=x7$
    masks$[3]=g5$

rem --- Print positions

    o[0]=p[0]+1
    o[1]=o[0]+9
    o[2]=o[1]+5
    o[6]=width-m2
    o[5]=o[6]-m1
    o[4]=o[5]-m3
    o[3]=o[4]-m2
    gosub l5800;rem "initialize headings

rem --- Position files

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",3+p[0],ivt04_dev,1,0,ignore_status
    read (ivt04_dev,key=firm_id$+beg_whse$,dom=*next)

l1000: rem --- Get next record

    k$=key(ivt04_dev,end=done)
    if pos(firm_id$+beg_whse$=k$)<>1 goto done
    whse$=k$(3,2)
    item$=k$(5,20)

rem --- Valid Warehouse/Item?

    if end_whse$<>"" if whse$>end_whse$ goto done
    if beg_item$<>"" if cvs(item$,3)<beg_item$ read (ivt04_dev,key=k$(1,4)+beg_item$,dom=l3900)
    if end_item$<>"" if cvs(item$,3)>end_item$ read (ivt04_dev,key=k$(1,4)+$FF$,dom=l3900)

rem --- Valid Product/Type/Date?

    read record (ivt04_dev,key=k$) ivt04a1$
    find record (ivm01_dev,key=firm_id$+item$,dom=l3900) ivm01a$
    if beg_prod$<>"" if ivm01a.product_type$<beg_prod$ goto l3900
    if end_prod$<>"" if ivm01a.product_type$>end_prod$ goto l3900
    if item_type$<>"" if ivm01a.item_type$<>item_type$ goto l3900
    if all$<>"Y" if pos(ivt04a1.trans_source$=ttype$,2)=0 goto l3900
    if ivt04a1.trans_source$="BB" goto l3900
    if beg_date$<>"" if ivt04a1.trans_date$<beg_date$ read (ivt04_dev,key=k$(1,24)+beg_date$,dom=l3900)
    if end_date$<>"" if ivt04a1.trans_date$>end_date$ read (ivt04_dev,key=k$(1,24)+$FF$,dom=l3900)

rem --- Level breaks?

    if all$="Y" and item$<>t1$ gosub l6500
    call pgmdir$+"adc_progress.aon","S","","","",k$(3,2)+" "+k$(5,p[0]),0,0,1,0,ignore_status
    if whse$<>t0$ gosub l6000
    if item$<>t1$ gosub l6200
    balance=balance+ivt04a1.trans_qty

rem --- Get Reference Block

    dim desc$[2]
    call pgmdir$+"ivc_transdata.aon",ivt04a1$,files[all],params[all],masks$[all],type$,desc$[all]
    if type$="" goto l3900

rem --- Build Totals Array

    if ivt04a1.trans_source$="BB" goto l2200
l2120:
    x=pos(type$=item_tot$,4)
    if x=0 item_tot$=item_tot$+type$; goto l2120
    x=(x+3)/4
    item_qty[x]=item_qty[x]+ivt04a1.trans_qty
    item_ext[x]=item_ext[x]+ivt04a1.trans_qty*ivt04a1.unit_cost

l2200: rem --- Print subheading?

    if subhead1$="" goto l3000
    OutVect!.addItem(subhead1$)
    for x=1 to 2;OutVect!.addItem("");next x
    OutVect!.addItem(subhead2$)
    for x=1 to 4;OutVect!.addItem("");next x
    l=l+1
    subhead1$="",subhead2$=""

l3000: rem --- Print detail line

    needed=1
    if cvs(desc$[1],2)<>"" needed=needed+1
    OutVect!.addItem("")
    OutVect!.addItem(fndate$(ivt04a1.trans_date$))
    OutVect!.addItem(type$)
    OutVect!.addItem(desc$[0])
    OutVect!.addItem(str(ivt04a1.trans_qty:m2$))
    OutVect!.addItem(str(ivt04a1.unit_cost:m3$))
    OutVect!.addItem(str(ivt04a1.trans_qty*ivt04a1.unit_cost:m1$))
    if all$="Y" then OutVect!.addItem(str(balance:m2$)) else OutVect!.addItem("")
    l=l+1
    if cvs(desc$[1],2)="" goto l3900
    for x=1 to 3;OutVect!.addItem("");next x
    OutVect!.addItem(cvs(desc$[1],2))
    for x=1 to 4; OutVect!.addItem("");next x
    l=l+1

l3900: rem --- Loop back for next record

    goto l1000

done: rem --- All done

    done=1
    gosub l6200
    goto std_exit

l5800: rem --- Initialize HEADINGS$

rem --- date/time 
	OutVect!=bbjAPI().getSysGui().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
		rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
		rep_time_stamp$=date(0:"%Hz%mz%sz")

rem -- miscellaneous headings
    dim h1$(width),h2$(width),h7$(width)
    x1$="First Date"
    x2$="Last Date"
    if beg_date$<>"" x1$=fndate$(beg_date$)
    if end_date$<>"" x2$=fndate$(end_date$)
    headings$[2]="From "+x1$+" Through "+x2$
    if all$="Y" headings$[3]="For All Transaction Types"; goto l5850 else headings$[3]="For Transaction Types "
    for x=0 to len(ttype$)-1 step 2; let headings$[3]=headings$[3]+ttype$(x+1,2)+" "; next x
        headings$[3]=cvs(headings$[3],2)
    l5850:
        x1$="First"
        x2$="First"
        if beg_item$<>"" x1$=beg_item$
        if beg_prod$<>"" x2$=beg_prod$
        h1$="Item:  from "+x1$
        h2$="Product:  from "+x2$
        x1$="Last"
        x2$="Last"
        x3$="All Item Types"
        if end_item$<>"" x1$=end_item$
        if end_prod$<>"" x2$=end_prod$
        if item_type$<>"" x3$="Item Type "+item_type$
        h1$=h1$+" to "+x1$
        h3$=x3$
        h2$=h2$+" to "+x2$

        headings$[4]=h1$
        headings$[5]=h2$
        headings$[6]=h3$

rem --- column headings
	dim columns$[7,3]
		columns$[0,0]="Item",columns$[0,1]="C",columns$[0,2]="35"
		columns$[1,0]="Date",columns$[1,1]="C",columns$[1,2]="15"
		columns$[2,0]="Type",columns$[2,1]="C",columns$[2,2]="5"
		columns$[3,0]="Reference Information",columns$[3,1]="C",columns$[3,2]="40"
		columns$[4,0]="Quantity",columns$[4,1]="C",columns$[4,2]="15",columns$[4,3]=m2$
		columns$[5,0]="Unit Cost",columns$[5,1]="C",columns$[5,2]="15",columns$[5,3]=m3$
		columns$[6,0]="Extension",columns$[6,1]="C",columns$[6,2]="15",columns$[6,3]=m1$
		columns$[7,0]="Balance",columns$[7,1]="C",columns$[7,2]="15",columns$[7,3]=m2$

        return
    
    l6000: rem --- Warehouse Break
    
        dim x0$(32)
        gosub l6200
        t0$=whse$
        x0$(6,24)="(Not on File)"
        l=l9+1
        find record (ivm10_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
        let x0$(6,24)=ivm10c.short_name$
    l6050:
        x$="Warehouse "+t0$+" "+cvs(x0$(6,24),2)
        OutVect!.addItem(x$)
            for x=1 to 7
                OutVect!.addItem("")
            next x

        return
    
    l6200: rem --- Item Break
    
        if t1$="" goto l6300
        if len(item_tot$)=0 goto l6270
        for x1=1 to 8;OutVect!.addItem("");next x1;rem "blank line before totals
        for x=1 to len(item_tot$) step 4
            for x1=1 to 2;OutVect!.addItem("");next x1
            OutVect!.addItem(item_tot$(x,4))
            OutVect!.addItem("Total")           
            OutVect!.addItem(str(item_qty[(x+3)/4]:m2$))
            OutVect!.addItem("")
            OutVect!.addItem(str(item_ext[(x+3)/4]:m1$))
            OutVect!.addItem("")
            net_qty=net_qty+item_qty[(x+3)/4]
            net_ext=net_ext+item_ext[(x+3)/4]
            l=l+1
        next x
        if all$="N" goto l6270
        for x1=1 to 3;OutVect!.addItem("");next x1
        OutVect!.addItem("Net Change")
        OutVect!.addItem(str(net_qty:m2$))
        OutVect!.addItem("")
        OutVect!.addItem(str(net_ext:m1$))
        OutVect!.addItem("")
        for x1=1 to 8;OutVect!.addItem("");next x1;rem "blank line
        l=l+1
    l6270:
    l6300:
        if done goto l6390
        dim item_qty[9],item_ext[9]
        t1$=ivt04a1.item_id$
        item_tot$=""
        net_qty=0
        net_ext=0
        wkdesc$=fnitem$(ivm01a.item_desc$)
rem --- old format using params: wkdesc$=fnitem$(wkdesc$,p[5],p[6],p[7])
        subhead1$=t1$(1,p[0])+" "+wkdesc$
        subhead2$="Product type: "+ivm01a.product_type$
    l6390:
        return
    
    l6500: rem --- Determine starting beginning balance
    
        if item_type$<>"" goto l6990
        balance=0
        x$=k$
        read (ivt04_dev,key=firm_id$+whse$+item$+beg_date$,dom=*next)
    l6580:
        let k01$=key(ivt04_dev,end=l6900)
        goto l6630
    
    l6600: rem --- Read backwards thru file until BB record is found
    
        let k01$=keyp(ivt04_dev,end=l6900)
        if k01$(1,24)<>firm_id$+whse$+item$ goto l6900
    l6630:
        extract record (ivt04_dev,key=k01$) ivt04a2$
        if ivt04a2.trans_source$<>"BB" goto l6600
        let balance=ivt04a2.trans_qty
    
    l6700: rem --- Read forward until first record for BEGDATE$
    
        let k01$=key(ivt04_dev,end=l6900)
        if k01$(1,24)<>firm_id$+whse$+item$ goto l6900
        if k01$(25,8)>=beg_date$ goto l6900
        read record (ivt04_dev,key=k01$) ivt04a2$
        let balance=balance+ivt04a2.trans_qty
        goto l6700
    l6900: rem --- Reread original record
    
        let k$=x$
        read record (ivt04_dev,key=k$) ivt04a1$
    l6990:
        return
    
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$)=cvs(q$,32)
rem --- old format w/ params: def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- Find length of field
    def fnfldlen(q$,q1$)
        dim q2$:q$
        wkq$=fattr(q2$,q1$)
        wkq=dec(wkq$(10,2))
        return wkq
    fnend

rem --- Create blank line in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src
    
        end
