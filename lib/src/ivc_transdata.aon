rem ivc - Format Standard Transaction References
rem Program ivc_td v8.0.0 26Oct2006 (ivc_td)
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 01:10:51)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist b0$(1),b1$(1)
rem --- arm01a: iolist b0$(1),b1$(1)
rem --- glm01a: iolist c0$(1),c1$(1)
rem --- ivm01a: iolist a0$(1),a1$(1)
rem --- ivm10b: iolist x0$(1)
rem --- ivm10c: iolist x0$(1)


rem --- TRANS$         : IVT-01/04 second string (A1$) (input)
rem --- CHANNELS[n]    : Channel Numbers (input)
rem --- [0] = ivm-01
rem --- [1] = ivm-10
rem --- [2] = arm-01 (if installed)
rem --- [3] = apm-01 (if installed)
rem --- [4] = glm-01 (if installed)
rem --- PARAMS[n]      : Masking parameters (input)
rem --- [0] = Item number length
rem --- [1] = Customer number length (if installed)
rem --- [2] = Vendor number length (if installed)
rem --- [3] = GL account number length (if installed)
rem --- [4] = Item description segment 1 length
rem --- [5] = Item description segment 2 length
rem --- [6] = Item description segment 3 length
rem --- MASKS$[n]      : Firm ID and display masks (input)
rem --- [0] = Firm ID
rem --- [1] = Customer mask (if installed)
rem --- [2] = Vendor mask (if installed)
rem --- [3] = GL account mask (if installed)
rem --- TYPE$          : Abbreviated transaction type (returned)
rem --- DESCRIPTION$[n]: Three line description block (returned)

    seterr std_error
    setesc std_error
    enter trans$,channels[all],params[all],masks$[all],type$,description$[all]

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    addr pgm(-2),err=*next

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivm-01"
    files$[2]="ivm-10"
    files$[3]="arm-01"
    files$[4]="apm-01"
    files$[5]="glm-01"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivm01_dev=channels[1]
    ivm10_dev=channels[2]
    arm01_dev=channels[3]
    apm01_dev=channels[4]
    glm01_dev=channels[5]



rem --- Dimension string templates

    dim ivm01a$:templates$[1],ivm10a$:templates$[2],arm01a$:templates$[3],apm01a$:templates$[4],
:       glm01a$:templates$[5]

rem --- Retrieve miscellaneous templates

    files=3,begfile=1,endfile=files
    dim ids$[files],templates$[files]
    ids$[1]="ivm-10B"
    ids$[2]="ivm-10C"
    ids$[3]="ivt-04A"
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit

rem --- Dimension miscellaneous string templates

    dim ivm10b$:templates$[1],ivm10c$:templates$[2],ivt04a$:templates$[3]


l96: rem --- Initializations

    dim a0$(22),a1$(60),b0$(8),b1$(30),c0$(12),c1$(35),x0$(32),x1$(54),x2$(54)
    description$[0]=""
    description$[1]=""
    description$[2]=""
    ivt04a$=trans$
    source$=ivt04a.trans_source$
    ref1$=cvs(ivt04a.trans_ref_1$,2)
    ref2$=ivt04a.trans_ref_2$
    if pos(source$="IAIIIRIC",2) source$="IT"
    ref3$=ivt04a.trans_ref_3$
    ref4$=ivt04a.trans_ref_4$
    seq$=ivt04a.trans_seq$
    desc$=""
    item$=cvs(ivt04a.finish_item$,2)
    firm_id$=masks$[0]
    type$=""
    types$="Beg BOM TranSalePhysP.O.XferXferW.O.W.O."

rem --- Retrieve finished item

    if pos(source$="BMWI",2)=0 goto l1100
    a0$(1)=firm_id$+item$
    desc$=""
    find record (ivm01_dev,key=a0$,dom=l1100) ivm01a$
    desc$=fnitem$(ivm01a.item_desc$)
rem -- old format using params: desc$=fnitem$(desc$,params[4],params[5],params[6])

l1100: rem --- Retrieve customer name

    if pos(source$="OPWIWO",2)=0 goto l1200
    if arm01_dev=0 goto l1200
    if ref1$="" goto l1200
    b0$(1)=firm_id$+ref1$
    find record (arm01_dev,key=b0$,dom=*next) arm01a$
    ref1$=fnmask$(arm01a.customer_id$,masks$[1])

l1200: rem --- Retrieve vendor name

    if source$<>"PO" goto l1300
    if apm01_dev=0 goto l1300
    if ref1$="" goto l1300
    b0$(1)=firm_id$+ref1$
    find record (apm01_dev,key=b0$,dom=*next) apm01a$
    ref1$=fnmask$(apm01a.vendor_id$,masks$[2])

l1300: rem --- Retrieve GL account

    if pos(source$="OPITTITOBMWIWO",2)=0 goto l1400
    if glm01_dev=0 goto l1400
    if cvs(ivt04a.gl_account$,2)="" goto l1400
    c0$(1)=firm_id$+ivt04a.gl_account$
    find record (glm01_dev,key=c0$,dom=l1400) glm01a$
    description$[2]="GL Acct "+fnmask$(glm01a.gl_account$,masks$[3])+" "+glm01a.gl_acct_desc$

l1400: rem --- Branch based on record source

    source=pos(source$="BBBMITOPPHPOTITOWIWO",2)
    if source>0 source=int((source+1)/2)
    on source goto done,l2000,l2100,l2200,l2300,l2400,l2500,l2600,l2600,l2700,l2800,done

l2000: rem --- BB Beginning Balance

    x1$(1)="Beginning Balance"
    goto done

l2100: rem --- BM Bill of Materials Production Entry

    x1$(1)="Ref "+ref2$
    if item$="" goto done
    x2$(1)="Item "+item$+" "+desc$
    goto done

l2200: rem --- IT Inventory Transactions

    x0$(6,20)="(Undefined Code)"
    x2$(1)="Ref "+ref2$
    find record (ivm10_dev,key=firm_id$+"B"+ref4$,dom=*next) ivm10b$
    x0$(6,20)=ivm10b.code_desc$
    x1$(1)="Code "+ref4$+" "+x0$(6,20)+ivt04a.trans_cmt$
    if cvs(seq$,2)<>"" x2$(12)="-"+seq$
    goto done

l2300: rem --- Type "OP" (Invoice)

    x1$(1)="Customer "+ref1$+" "+arm01a.customer_name$
    x2$(1)="Invoice "+ref3$+"-"+seq$+" Order "+ref2$+" Line "+ivt04a.line_code$
    goto done

l2400: rem --- PH Physical Inventory Adjustment

    x1$(1)="Physical Inventory Adjustment"
    x2$(1)="Cycle "+ref4$+"  Loc "+ivt04a.location$
    goto done

l2500: rem --- PO Purchase Order Receipt

    x1$(1)="Vendor "+ref1$+" "+apm01a.vendor_name$
    x2$(1)="PO "+ref2$+"-"+seq$+" Line "+ivt04a.po_line_code$
    goto done

l2600: rem --- TI/TO Transfer In/Out

    x0$(6,24)="(Undefined Warehouse)"
    x2$(1)="Ref "+ref2$
    find record (ivm10_dev,key=firm_id$+"C"+ref4$,dom=*next) ivm10c$
    x0$(6,24)=ivm10c.short_name$
    if source$="TO" x1$(1)="To "+ref4$+" "+x0$(6,24)
    if source$="TI" x1$(1)="From "+ref4$+" "+x0$(6,24)
    goto done

l2700: rem --- WI Work Order Issue

    x1$(1)="WO "+ref3$+"-"+seq$+"  Type "+ref4$
    p=1
    if ref1$<>"" x1$(29)="Customer "+ref1$
    if cvs(item$,2)<>"" x2$(p)="Item "+item$,p=len(cvs(item$,2))+7
    if cvs(ref2$,2)<>"" x2$(p)="SO "+ref2$
    if cvs(ref2$,2)="" x2$(p)=desc$
    goto done

l2800: rem --- WO Work Order Receipt

    x1$(1)="WO "+ref3$+"  Type "+ref4$
    p=1
    if ref1$<>"" x2$(1)="Customer "+ref1$,p=18
    if cvs(ref2$,2)<>"" x2$(p)="SO "+ref2$
    goto done

done: rem --- All done

    description$[0]=cvs(x1$,2)
    description$[1]=cvs(x2$,2)
    if source>0 type$=types$((source-1)*4+1,4)
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_table_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description
    
    def fnitem$(q$)=cvs(q$,32)
rem --- old format using params: def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
