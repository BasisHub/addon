rem Callpoint program for <<TITLE>>
rem Program <<PROGRAM>> v8.0.0 25Apr2006

rem AddonSoftware Version 8.0.0 - 01Oct2006
rem Copyright (c) 1981-2006 AddonSoftware
rem All Rights Reserved

	seterr std_error
	setesc std_error

	enter callpoint$,
:		aon_tpl$,
:		AONObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		attr_tbl$[all],
:		attr_col$[all],
:		attr_def_tbl$[all],
:		attr_def_col$[all],
:		rec_data$,
:		rec_data$[all],
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		err=*next

rem --- Initializations

	dim cp_data$:fattr(callpoint$)
	cp_data$=callpoint$

	callpoint_alias$=cp_data.callpoint_alias$
	callpoint_type$=cp_data.callpoint_type$
	callpoint_id$=cp_data.callpoint_id$(1,4)
	callpoint_ctl$=cp_data.callpoint_ctl$
	callpoint_var$=cp_data.callpoint_dvar$
	callpoint_data$=cp_data.callpoint_data$
	callpoint_key$=cp_data.callpoint_key$
	callpoint_pfx$=cp_data.callpoint_pfx$

rem --- Local variables


rem --- Callpoints and tables handled by this program

	callpoint_id_str$=
:		"ACAL;ACUS;ADEL;ADEQ;ADIS;AENA;AGCL;AGDS;AGRD;AKEY;AOPT;AOVE;APRA;APRT;ARAR;ARCO;AREA;AREC;AREM;ASHO;ASIZ;AWIN;AWRI;"+
:		"BDEL;BDEQ;BENA;BEND;BGRD;BNEK;BNEX;BOVE;BPRI;BPRK;BRCO;BREA;BREC;BREM;BSAV;BSHO;BWAR;BWRI;"+
:		"AINP;AINQ;AVAL;BINP;BINQ;"

	callpoint_var_str$=
<<CALLPOINT_VAR_STR>>

rem	callpoint_opt_str$="OPT1;OPT2;OPT3;" Sample option string for AOPT callpoints

rem --- Route table callpoint to correct subroutine (Table callpoint if callpoint_var$=null)

	if cvs(callpoint_var$,2)=""
		switch fnstr_pos(callpoint_id$,callpoint_id_str$,5)
			case fnstr_pos("ACAL",callpoint_id_str$,5);rem After Form Callbacks
			break
			case fnstr_pos("ACUS",callpoint_id_str$,5);rem After Custom Event
			break
			case fnstr_pos("ADEL",callpoint_id_str$,5);rem After Record Delete
			break
			case fnstr_pos("ADEQ",callpoint_id_str$,5);rem After Delete Query
			break
			case fnstr_pos("ADIS",callpoint_id_str$,5);rem After Record Display
			break
			case fnstr_pos("AENA",callpoint_id_str$,5);rem After Enable Map
			break
			case fnstr_pos("AGCL",callpoint_id_str$,5);rem After Grid Clear
			break
			case fnstr_pos("AGDS",callpoint_id_str$,5);rem After Grid Display
			break
			case fnstr_pos("AGRD",callpoint_id_str$,5);rem After Grid Exit
			break
			case fnstr_pos("AKEY",callpoint_id_str$,5);rem After Key Build
			break
			case fnstr_pos("AOPT",callpoint_id_str$,5);rem After Option Select
rem				switch fnstr_pos(callpoint.callpoint_id$(6),callpoint_opt_str$,5)
rem					case fnstr_pos("OPT1",callpoint_opt_str$,5);rem Option 1 Select Sample
rem					break
rem					case fnstr_pos("OPT2",callpoint_opt_str$,5);rem Option 2 Select Sample
rem					break
rem					case fnstr_pos("OPT3",callpoint_opt_str$,5);rem Option 3 Select Sample
rem					break
rem					case default
rem					break
rem				swend
			break
			case fnstr_pos("AOVE",callpoint_id_str$,5);rem After Table Overview
			break
			case fnstr_pos("APRA",callpoint_id_str$,5);rem After Print All Select
			break
			case fnstr_pos("APRT",callpoint_id_str$,5);rem After Print Rec Select
			break
			case fnstr_pos("ARAR",callpoint_id_str$,5);rem After Array Transfer
			break
			case fnstr_pos("ARCO",callpoint_id_str$,5);rem After Record Copy
			break
			case fnstr_pos("AREA",callpoint_id_str$,5);rem After Record Read
			break
			case fnstr_pos("AREC",callpoint_id_str$,5);rem After New Record
			break
			case fnstr_pos("AREM",callpoint_id_str$,5);rem After Record Removal
			break
			case fnstr_pos("ASHO",callpoint_id_str$,5);rem After Window Show
			break
			case fnstr_pos("ASIZ",callpoint_id_str$,5);rem After Window Resize
			break
			case fnstr_pos("AWIN",callpoint_id_str$,5);rem After Window Show
			break
			case fnstr_pos("AWRI",callpoint_id_str$,5);rem After Record Write
			break
			case fnstr_pos("BDEL",callpoint_id_str$,5);rem Before Record Delete
			break
			case fnstr_pos("BDEQ",callpoint_id_str$,5);rem Before Delete Query
			break
			case fnstr_pos("BENA",callpoint_id_str$,5);rem Before Enable Map
			break
			case fnstr_pos("BEND",callpoint_id_str$,5);rem Before Table Exit
			break
			case fnstr_pos("BGRD",callpoint_id_str$,5);rem Before Grid Entry
			break
			case fnstr_pos("BNEK",callpoint_id_str$,5);rem Before Next Record Key
			break
			case fnstr_pos("BNEX",callpoint_id_str$,5);rem Before Next Record
			break
			case fnstr_pos("BOVE",callpoint_id_str$,5);rem Before Table Overview
			break
			case fnstr_pos("BPRI",callpoint_id_str$,5);rem Before Previous Record
			break
			case fnstr_pos("BPRK",callpoint_id_str$,5);rem Before Prev Record Key
			break
			case fnstr_pos("BRCO",callpoint_id_str$,5);rem Before Record Copy
			break
			case fnstr_pos("BREA",callpoint_id_str$,5);rem Before Record Read
			break
			case fnstr_pos("BREC",callpoint_id_str$,5);rem Before New Record
			break
			case fnstr_pos("BREM",callpoint_id_str$,5);rem Before Record Removal
			break
			case fnstr_pos("BSAV",callpoint_id_str$,5);rem Before Detail Save
			break
			case fnstr_pos("BSHO",callpoint_id_str$,5);rem Before Window Show
			break
			case fnstr_pos("BWAR",callpoint_id_str$,5);rem Before Write Array
			break
			case fnstr_pos("BWRI",callpoint_id_str$,5);rem Before Record Write
			break
			case default
			break
		swend
	endif

rem --- Route column callpoint to correct subroutine (Column callpoint if callpoint_var$<>null)
rem		Column Events:
rem			AINP-After Column Input
rem			AINQ-After Column Inquiry
rem			AVAL-After Column Validation
rem			BINP-Before Column Input
rem			BINQ-Before Column Inquiry

	if cvs(callpoint_var$,2)<>""
		switch fnstr_pos(callpoint_var$,callpoint_var_str$,40)
<<CALLPOINT_BODY>>
			case default
			break
		swend
	endif

rem --- All done

	goto std_exit

open_tables:rem --- Open Tables

	call stbl("+DIR_PGM")+"rdc_open_tables.aon",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_PGM")+"adc_message.aon",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

rem #endinclude std_exit.src

	end
