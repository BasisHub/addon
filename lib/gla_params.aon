rem gla - Callpoint program for GL Parameter Maintenance
rem Program gla_params v8.0.0 25Apr2006

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

    enter callpoint$,
:         aon_tpl$,
:         user_tpl$,
:         gui_dev,
:         rdSysGUI!,
:         rdForm!,
:         attr_tbl$[all],
:         attr_col$[all],
:         attr_def_tbl$[all],
:         attr_def_col$[all],
:         rec_data$[all],
:         table_chans$[all],
:         dtlg_param$[all],
:         rdGridVect!,
:         err=*next

rem --- Initializations

    dim callpoint_data$:fattr(callpoint$)
    callpoint_data$=callpoint$
    callpoint_alias$=callpoint_data.callpoint_alias$
    callpoint_id$=callpoint_data.callpoint_id$(1,4)
    callpoint_var$=callpoint_data_callpoint_dvar$

rem --- Callpoints and tables handled by this program

    callpoint_str$="BWAR;AREC;AVAL;"
    callpoint_tables$="GLS_PARAMS      GLS_SUSPENSE    GLS_EARNINGS    "

rem --- Local variables

    maxlen=10
    
rem --- Route callpoint to correct subroutine

    switch fnstr_pos(callpoint_id$,callpoint_str$,5)

           rem --- Final assignments before the record is written

           case fnstr_pos("BWAR",callpoint_str$,5)
                switch alias

                       rem --- Set remaining GL Parameter (GLS_PARAMS/gls-01A) fields

                       case gls_params
                            temp_acct$=fnget_rec$("ACCT_INPUT")
                            acct_length$=str(pos("#"=temp_acct$,1,0)+pos("0"=temp_acct$,1,0):"00")
                            rec_data$[fnstr_pos("ACCT_OUTPUT",attr_col$[0,1],16),0]=temp_acct$
                            rec_data$[fnstr_pos("ACCT_LENGTH",attr_col$[0,1],16),0]=acct_length$
                            rec_data$[fnstr_pos("MAX_ACCT_LEN",attr_col$[0,1],16),0]=str(maxlen:"00")
                       break
                       case default
                       break
                swend
           break

           rem --- Record initializations

           case fnstr_pos("AREC",callpoint_str$,5)
                switch alias
 
                       rem --- Initialize GL Parameter (GLS_PARAMS/gls-01A) record

                       case fnstr_pos("GLS_PARAMS",callpoint_tables$,16)
                            rec_data$[fnstr_pos("ACCT_INPUT",attr_col$[0,1],16),0]=fill(maxlen,"#")
                            rec_data$[fnstr_pos("ACCT_OUTPUT",attr_col$[0,1],16),0]=fill(maxlen,"#")
                            rec_data$[fnstr_pos("ACCT_LENGTH",attr_col$[0,1],16),0]=str(maxlen:"00")
                            rec_data$[fnstr_pos("MAX_ACCT_LEN",attr_col$[0,1],16),0]=str(maxlen:"00")
                            rec_data$[fnstr_pos("AMOUNT_MASK",attr_col$[0,1],16),0]="#,###,##0.00-"
                            rec_data$[fnstr_pos("UNIT_MASK",attr_col$[0,1],16),0]="####0-"
                            rec_data$[fnstr_pos("PERCENT_MASK",attr_col$[0,1],16),0]="###0.00-"
                            rec_data$[fnstr_pos("DETAIL_FLAG",attr_col$[0,1],16),0]="Y"
                            rec_data$[fnstr_pos("BUDGET_FLAG",attr_col$[0,1],16),0]="Y"
                            rec_data$[fnstr_pos("UNITS_FLAG",attr_col$[0,1],16),0]="Y"
                            rec_data$[fnstr_pos("RETAIN_DET",attr_col$[0,1],16),0]="Y"
                            rec_data$[fnstr_pos("GL_YR_CLOSED",attr_col$[0,1],16),0]="Y"
                            rec_data$[fnstr_pos("GL_POST_CODE",attr_col$[0,1],16),0]="P"
                       break

                       rem --- Initialize GL Suspense Account (GLS_SUSPENSE/gls-01D) record

                       case fnstr_pos("GLS_SUSPENSE",callpoint_tables$,16)
                            rec_data$[fnstr_pos("USE_SUSPENSE",attr_col$[0,1],16),0]="N"
                       break
                       case default
                       break
                swend
           break
    swend

rem --- All done

    goto std_exit

rem --- Functions

    def fnstr_pos(tmp0$,tmp1$,tmp1)=int((pos(tmp0$=tmp1$,tmp1)+tmp1-1)/tmp1)
    def fngett_attr$(att0$)=attr_tbl$[fnstr_pos(att0$,attr_def_tbl$,5)]
    def fngetc_attr$(att0,att0$)=attr_col$[att0,fnstr_pos(att0$,attr_def_col$,5)]
    def fngetv_attr$(att0$,att1$)=attr_col$[fnstr_pos(att0$,attr_col$[0,1],16),fnstr_pos(att1$,attr_def_col$,5)]
    def fnget_rec$(att0$)=rec_data$[fnstr_pos(att0$,attr_col$[0,1],16),0]

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
