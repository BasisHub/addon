rem --- Purchase Order Expediting Report (Print Overlay)
rem --- Program por_expedite.o1 v8.0.0 17Jul2007 (por_kb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:48:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved
rem 23Oct96 Caj: Was printing date required on memos (4460)

    setesc std_error
    seterr std_error

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

    more=1

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_POHDR","PRIMARY",poe02a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_POHDR","ALT_KEY_01",poe02a_key_alttpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_PODET","PRIMARY",poe12a_key_tpl$,rd_table_chans$[all],status$

rem --- Init Data

    precision ivprecision
    grandtot=0

rem --- Headings and print positions

    headings=5
    dim headings$[headings],o[11]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads
    headings$[1]=headings$[1]+" Through "+fndate$(datethru$)

rem --- Headings and print positions

 
    dim columns$[11,10]
    columns = 12
    columns$[0,0]="Seq",                columns$[0,1]="C",columns$[0,2]="4"
    columns$[1,0]="Wh",                 columns$[1,1]="C",columns$[1,2]="6"
    columns$[2,0]="Item",               columns$[2,1]="C",columns$[2,2]="28"
    columns$[3,0]="Description",        columns$[3,1]="C",columns$[3,2]="20"
    columns$[4,0]="UM",                 columns$[4,1]="C",columns$[4,2]="4"
    columns$[5,0]="Date Required",      columns$[5,1]="C",columns$[5,2]="20"
    columns$[6,0]="Quantity Ordered",   columns$[6,1]="N",columns$[6,2]="3",columns$[6,3]=m2$
    columns$[7,0]="Quantity In QA",     columns$[7,1]="N",columns$[7,2]="3",columns$[7,3]=m2$
    columns$[8,0]="Quantity Received",  columns$[8,1]="N",columns$[8,2]="6",columns$[8,3]=m2$
    columns$[9,0]="Balance Due",        columns$[9,1]="N",columns$[9,2]="3",columns$[9,3]=m2$
    columns$[10,0]="Unit Cost",         columns$[10,1]="N",columns$[10,2]="3",columns$[10,3]=m3$
    columns$[11,0]="Extension",         columns$[11,1]="N",columns$[11,2]="15",columns$[11,3]=m1$


positions:

    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+itemlen+1
    o[4]=o[3]+28
    o[5]=o[4]+3
    o[6]=o[5]+9
    o[7]=o[6]+m2+1
    o[8]=o[7]+m2+1                       
    o[9]=o[8]+m2+1
    o[10]=o[9]+m2+1
    o[11]=o[10]+m3+1

    if o[11]+13>=width
        o[11]=width-m1
        o[10]=o[11]-m3
        o[9]=o[10]-m2
        o[8]=o[9]-m2
        o[7]=o[8]-m2
        o[6]=o[7]-m2
    endif

rem --- Position files

    call pgmdir$+"adc_progress.aon","NC","Printing","","","",0,poe02a_dev,1,meter_num,status

rem --- Sort by Purchase Order

    dim poe02a_altkey$:poe02a_key_alttpl$

    read (poe02_dev2,KNUM=1,key=firm_id$+pofrom$,dom=*next)
    if pofrom$<>"" read (poe02_dev2,KNUM=1,key=firm_id$+pofrom$+vendfrom$,dom=*next)poe02a$;break

rem --- Read through sort file

    while more

        poe02a_altkey$=key(poe02_dev2,end=*break)
        k$=poe02a_altkey.firm_id$+poe02a_altkey.vendor_id$+poe02a_altkey.po_no$
        read (poe02_dev2)
        if poe02a_altkey.firm_id$<>firm_id$ goto done
        dim poe02a_key$:poe02a_key_pritpl$
        find record (poe02a_dev,key=k$,dom=*continue) poe02a$

rem --- Test Ranges

        printit$="N"
        if pofrom$<>"" and poe02a.po_no$<pofrom$ continue
        if pothru$<>"" and poe02a.po_no$>pothru$ continue
        if vendfrom$<>"" and poe02a.vendor_id$<vendfrom$ continue
        if vendthru$<>"" and poe02a.vendor_id$>vendthru$ continue
        if whse$<>"" and poe02a.warehouse_id$<>whse$ continue

        if poe02a.reqd_date$>datethru$ continue

rem --- If req'd date of any detail is w/in date range, print whole PO

        dim poe12a_key$:poe12a_key_tpl$
        read (poe12_dev,key=k$,dom=*next)

rem --- Test PO Detail date range

        while more

            poe12a_key$=key(poe12_dev,end=*break)
            if poe12a_key.firm_id$+poe12a_key.vendor_id$+poe12a_key.po_no$<>poe02a.firm_id$+poe02a.vendor_id$+poe02a.po_no$ break
            read record (poe12_dev,key=poe12a_key$) poe12a$
            if datethru$="" or poe12a.reqd_date$<=datethru$ printit$="Y"

rem --- Detail passed, so go print header & whole PO
                         
          if printit$="Y"
            gosub testbreaks
            gosub printdetail
          endif

rem --- Loop up to test next detail record

        wend

    wend

done: rem --- All Done

    gosub pototals
    
    xwk = fnblank(12)
    xwk = fnblank(9)
    OutVect!.addItem("Total For Report")
    xwk = fnblank(1)
    OutVect!.addItem(str(grandtot:m1$))
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Re-loop through detail & print whole PO

    call pgmdir$+"adc_progress.aon","S","","","","",0,poe02a_dev,1,meter_num,status

    read (poe12_dev,key=k$,dom=*next)

    while more

        poe12a_key$=key(poe12_dev,end=*break)
        if poe12a_key.firm_id$+poe12a_key.vendor_id$+poe12a_key.po_no$<>k$ break
        read record (poe12_dev,key=poe12a_key$) poe12a$

rem --- Set up variables

        dim datereq$(8)
        whse_detail$=poe12a.warehouse_id$
        itemnum$=poe12a.item_id$
        unitmeas$=poe12a.unit_measure$
        if poe12a.reqd_date$<>fill(8) datereq$=fndate$(poe12a.reqd_date$)
        qtyord$=str(poe12a.qty_ordered:m2$)
        qtyinqa$=str(poe12a.qa_wip_qty:m2$)
        qtyrec$=str(poe12a.qty_received:m2$)
        baldue$=str(poe12a.qty_ordered-poe12a.qty_received:m2$)
        unitcost$=str(poe12a.unit_cost:m3$)

rem --- Get Drop Ship flag & Line Type

        linetype$="N"
        dropship$="N"
        find record (pom02a_dev,key=poe12a.firm_id$+poe12a.po_line_code$,dom=brnch1) pom02a$
        linetype$=pom02a.line_type$
        dropship$=pom02a.dropship$

brnch1: rem --- Get Item Desc for S and N type lines

        dim item_desc$(60)       
        if linetype$="N" item_desc$(1)=poe12a.order_memo$
        if linetype$="S" 
            item_desc$(1)="Not On File"
            i01_key$=firm_id$+poe12a.item_id$
            find record (ivm01a_dev,key=i01_key$,dom=brnch2) ivm01a$
            item_desc$(1)=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])

        endif

brnch2: rem --- Get extension

        gosub calc_extension

rem --- Format common part of print line

        dim pline$(132)
        pline$(1)=poe12a.po_line_no$+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

        if pos(linetype$="MOV")<>0

            OutVect!.addItem(poe12a.po_line_no$)
            OutVect!.addItem(whse_detail$)
            
            if linetype$="V" then 
                OutVect!.addItem(poe12a.order_memo$(1,20))
            else 
                OutVect!.addItem(poe12a.order_memo$)
            endif

            if linetype$<>"M" then 
                xwk = fnblank(2)
                OutVect!.addItem(datereq$)
            else
                xwk = fnblank(3)
            endif

            if linetype$="O" then
                xwk = fnblank(4)
                OutVect!.addItem(unitcost$)
                OutVect!.addItem(extension$)
            else
                xwk = fnblank(6)
            endif

            l=l+1

        else

rem --- Print Line Types 'S' & 'N'

            if pos(linetype$="SN")<>0

            OutVect!.addItem(poe12a.po_line_no$)
            OutVect!.addItem(whse_detail$)
            OutVect!.addItem(itemnum$(1,itemlen))
            OutVect!.addItem(item_desc$(1,27))
            OutVect!.addItem(unitmeas$)
            OutVect!.addItem(datereq$)
            OutVect!.addItem(qtyord$)
            OutVect!.addItem(qtyinqa$)
            OutVect!.addItem(qtyrec$)
            OutVect!.addItem(baldue$)
            OutVect!.addItem(unitcost$)
            OutVect!.addItem(extension$)

                l=l+1

dropship: rem --- Print drop ship info if applicable

                if dropship$="Y" 
                
                    dim custinfo$(321),shipinfo$(173),custaddr$(120),shipaddr$(120)
                    custname$="Not On File"
                    shipname$="Not On File"
                    find record (arm01a_dev,key=poe12a.firm_id$+poe12a.customer_id$,dom=brnch3) arm01a$
                    custname$=arm01a.customer_name$
                    custaddr$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+
:                               arm01a.city$+arm01a.state_code$+arm01a.zip_code$
                    call pgmdir$+"adc_address.aon",custaddr$,24,4,9,30

brnch3:

                    find record (arm03a_dev,key=poe12a.firm_id$+poe12a.customer_id$+poe12a.shipto_no$,dom=brnch4) arm03a$
                    shipname$=arm03a.name$
                    shipaddr$=arm03a.addr_line_1$+arm03a.addr_line_2$+arm03a.addr_line_3$+
:                               arm03a.city$+arm03a.state_code$+arm03a.zip_code$
                    call pgmdir$+"adc_address.aon",shipaddr$,24,4,9,30

brnch4: rem --- Use Shipto address info if available else, use cust addr info

                    dropaddr$=custaddr$
                    dropname$=custname$
                    if shipaddr$<>fill(120) dropaddr$=shipaddr$,dropname$=shipname$
                        xwk = fnblank(14)
                        OutVect!.addItem("Drop Ship To Customer")
                        OutVect!.addItem(fnmask$(poe12a.customer_id$,customask$))
                        xwk = fnblank(1)
                        OutVect!.addItem("    Order " + poe12a.order_no$)
                        OutVect!.addItem(poe12a.line_no$)
                        xwk = fnblank(5)
                       
                    l=l+6

                endif

            endif
            
        endif

rem --- Get next detail record to print

        potot=potot+extension
        grandtot=grandtot+extension
        extension=0
        extension$=""

    wend

rem --- Done printing detail

    return


assignheads: rem --- Assign headings variables

    if vendfrom$="" vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
    if vendthru$="" vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    if whse$="" whsepagehead$="For All Warehouses" else whsepagehead$="For Warehouse "+whse$+" "+cvs(whsename$,2)


    if vendfrom$="" headings$[2]="From Vendor: First" else headings$[2]="From Vendor: "+ vendf$
    if vendthru$="" headings$[2]=headings$[2] + " -- To Vendor: Last" else headings$[2]=headings$[2] + " -- To Vendor: " + vendt$
    if pofrom$=""   headings$[3]="From Purchase Order First" else headings$[3]="From Purchase Order "+ pofrom$
    if pothru$=""   headings$[3]=headings$[3] + " Through Last" else headings$[3]=headings$[3] + " -- Through " + pothru$
    
    headings$[4] = whsepagehead$


    return

testbreaks: rem --- Test for Breaks

    if poe02a.po_no$<>ponum$
        if printptot$="Y" gosub pototals
    endif
    gosub newpo
 
    return

newpo: rem --- New PO

    potot=0
    ponum$=poe02a.po_no$
    printptot$="Y"
    vendor$=poe02a.vendor_id$
    termsdesc$="Not On File"
    vendname$="Not On File"
    find record (apm01a_dev,key=firm_id$+vendor$,dom=brnch5) apm01a$
    vendname$=apm01a.vendor_name$
    contact$=apm01a.contact_name$
    call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(apm01a.phone_no$,2),"",phone_mask$
    phone$=cvs(apm01a.phone_no$,2)
    phone$=str(phone$:phone_mask$,err=*next)

brnch5:

    find record (apm10c_dev,key=firm_id$+"C"+poe02a.terms_code$,dom=brnch6) apm10c$
    termsdesc$=apm10c.code_desc$

brnch6:

    dim dateord$(8),dateprom$(8)
    if poe02a.ord_date$<>fill(8) dateord$=fndate$(poe02a.ord_date$)
    if poe02a.promise_date$<>fill(8) dateprom$=fndate$(poe02a.promise_date$)
   

    xwk = fnblank(12)
    OutVect!.addItem("PO#: ")
    OutVect!.addItem(ponum$)
    OutVect!.addItem("Ordered: " + dateord$)
    OutVect!.addItem("Vendor: " + fnmask$(vendor$(1,vendlen),vendomask$) + " " + vendname$)
    xwk = fnblank(1)
    OutVect!.addItem("Contact: " + contact$)
    xwk = fnblank(4)
    OutVect!.addItem("Ack By: ")
    OutVect!.addItem(poe02a.acknowledge$)
    xwk = fnblank(2)
    OutVect!.addItem("Promised " + dateprom$)
    xwk = fnblank(2)
    OutVect!.addItem("Phone " + phone$)
    xwk = fnblank(4)
    OutVect!.addItem("Terms " + poe02a.terms_code$)
    OutVect!.addItem(termsdesc$)

    l=l+3
    return

pototals: rem --- Print Purchase Order total

    xwk = fnblank(9)
    OutVect!.addItem("Total For PO # ")
    OutVect!.addItem(ponum$)
    OutVect!.addItem(str(potot:m1$))
    
    let l=l+2
    return

rem --- Calc extension for S, N and O types
calc_extension:

    if pos(linetype$="SNO")<>0
        let qty=poe12a.qty_ordered-poe12a.qty_received
        if linetype$="O" qty=1
        precision 2
        let extension=poe12a.unit_cost*qty,extension$=str(extension:m1$)
        precision ivprecision
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP"+"bac_error.bbj",err=std_error_exit),pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
