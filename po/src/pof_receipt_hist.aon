rem --- PO Receipt History By Vendor filter program
rem --- Program ID: pof_receipt_hist.aon
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- Run by Barista as part of the PO_RECEIPT_HIST query.
rem --- For each row in the result set, this program runs to calculate the amount columns.

    setesc std_error
    seterr std_error

    enter inq_mode$,rec_tpl$,calc_tpl$,table_chans$[all],status$

rem inq_mode$      - not used until recently - current use not yet documented
rem rec_tpl$       - Current row database columns
rem calc_tpl$      - Current row calculated columns
rem table_chans$[] - Barista opened channels array
rem status$        - Returned status: "SKIP" = Skip current record

rem --- Initialize data
    status$=""

rem --- Open tables
    pot_recdet_dev=fnget_dev("@"+"POT_RECDET")
    pot_invhdr_dev=fnget_dev("@"+"POT_INVHDR")
    pot_invdet_dev=fnget_dev("@"+"POT_INVDET")
    poc_linecode_dev=fnget_dev("@"+"POC_LINECODE")

    if pot_recdet_dev=0 or pot_invhdr_dev=0 or pot_invdet_dev=0 or poc_linecode_dev=0 then
        call dir_pgm$+"adc_application.aon","PO",info$[all]
        po$=info$[20]
        if po$<>"Y" then
            status$="SKIP"
            goto exit_prog
        endif

        num_files=4
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="POT_RECDET",open_opts$[1]="OTA@"
        open_tables$[2]="POT_INVHDR",open_opts$[2]="OTA@"
        open_tables$[3]="POT_INVDET",open_opts$[3]="OTA@"
        open_tables$[4]="POC_LINECODE",open_opts$[4]="OTA@"
                
        gosub open_tables        

        pot_recdet_dev=fnget_dev("@"+"POT_RECDET")
        pot_invhdr_dev=fnget_dev("@"+"POT_INVHDR")
        pot_invdet_dev=fnget_dev("@"+"POT_INVDET")
        poc_linecode_dev=fnget_dev("@"+"POC_LINECODE")
    endif

    dim pot_recdet$:fnget_tpl$("@"+"POT_RECDET")
    dim pot_invhdr$:fnget_tpl$("@"+"POT_INVHDR")
    dim pot_invdet$:fnget_tpl$("@"+"POT_INVDET")
    dim poc_linecode$:fnget_tpl$("@"+"POC_LINECODE")

rem --- Accumulate receipt totals
    poLineCode$=""
    read(pot_recdet_dev,key=rec_tpl.firm_id$+rec_tpl.po_no$,dom=*next)
    while 1
        readrecord(pot_recdet_dev,end=*break)pot_recdet$
        if pot_recdet.firm_id$+pot_recdet.po_no$<>rec_tpl.firm_id$+rec_tpl.po_no$ then break
        if poLineCode$<>pot_recdet.po_line_code$ then
            findrecord(poc_linecode_dev,key=pot_recdet.firm_id$+pot_recdet.po_line_code$,dom=*continue)poc_linecode$
            poLineCode$=poc_linecode.po_line_code$
            line_type$=poc_linecode.line_type$
        endif
        if line_type$="O" then
            ordQty=1
            recQty=1
        else
            ordQty=pot_recdet.qty_ordered
            recQty=pot_recdet.qty_received
        endif
        ordered=ordered+(ordQty*pot_recdet.unit_cost)
        received=received+(recQty*pot_recdet.unit_cost)
    wend
    if ordered=0 then
        ratio=0
    else
        ratio=(received/ordered)*100
    endif
    calc_tpl.amt_ordered=ordered
    calc_tpl.amt_received=received
    calc_tpl.fill_ratio=ratio

rem --- Accumulate invoice totals for this receipt
    pot_invdet_trip_key$=rec_tpl.firm_id$+rec_tpl.vendor_id$+rec_tpl.po_no$+rec_tpl.receiver_no$
    read(pot_invdet_dev,key=pot_invdet_trip_key$,knum="INVBYPO",dom=*next)
    while 1
        readrecord(pot_invdet_dev,end=*break)pot_invdet$
        if pot_invdet.firm_id$+pot_invdet.vendor_id$+pot_invdet.po_no$+pot_invdet.receiver_no$<>pot_invdet_trip_key$ then break
        invoiced_amt=invoiced_amt+(pot_invdet.unit_cost*pot_invdet.qty_received)
        invoiced=1
        pot_invhdr_key$=pot_invdet.firm_id$+pot_invdet.ap_type$+pot_invdet.vendor_id$+pot_invdet.ap_inv_no$+pot_invdet.sequence_no$
        if pos(pot_invhdr_key$=header_keys$,23)=0 then header_keys$=header_keys$+pot_invhdr_key$
    wend
    if len(header_keys$) then
        for i=1 to len(header_keys$) step 23
            findrecord(pot_invhdr_dev,key=header_keys$(i,23),dom=*continue)pot_invhdr$
            invTotal=invTotal+pot_invhdr.invoice_amt
        next i
    endif
    if invoiced then
        variance=invoiced_amt-received
    else
        variance=0
    endif
    calc_tpl.amt_invoiced=invoiced_amt
    calc_tpl.inv_variance=varience
    calc_tpl.inv_total=invTotal

rem --- Done
    goto exit_prog

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- Functions

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)
        q$=pad(q$,q1+q2+q3)
        return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif    

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
    
exit_prog:rem --- Exit Program

    exit
