rem --- Generate Next PO, Requisition Or Receiver Number
rem --- Program poc_na v8.0.0 05Dec2007 (poc_na)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 11:55:10)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    enter action$,type$,pos10_dev,firm_id$,selection$

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
    files$[3]="pos-10",ids$[3]="POS_NUMBERS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01a_dev=channels[1]
    ivs01a_dev=channels[2]
    pos10_dev=channels[3]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2],pos10a$:templates$[3]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initializations

    number=0
    number=num(selection$,err=*next)
    selection$="0000000"
    type=min(pos(type$="PRQC")-1,2)
    if type<0 call pgmdir$+"syc_fe.bbx",911; rem poc_na called with bad type$

rem --- Assign next number

rem    a0$=firm_id$+"N"
    pos10n.firm_id$=firm_id$
    pos10n.record_id$="N"
    pos10n.next_po_no=1000
    pos10n.next_req_no=1000
    pos10n.next_rec_no=1000
    pos10n.increment=10
    extract record (pos10_dev,key=pos10n.firm_id$+pos10n.record_id$,dom=*next) pos10n$

    action=pos(action$="AD")
    switch action
        case 1

        next_number: rem --- Assign the next number

            if(type=0) then
                selection$=str(pos10n.next_po_no:"0000000")
                pos10n.next_po_no=pos10n.next_po_no+1
                if pos10n.next_po_no>9999999 then let pos10n.next_po_no=1000
            endif
            if(type=1) then
                selection$=str(pos10n.next_req_no:"0000000")
                pos10n.next_req_no=pos10n.next_req_no+1
                if pos10n.next_req_no>9999999 then let pos10n.next_req_no=1000
            endif
            if(type=2)
                selection$=str(pos10n.next_rec_no:"0000000")
                pos10n.next_rec_no=pos10n.next_rec_no+1
                if pos10n.next_rec_no>9999999 then let pos10n.next_rec_no=1000
            endif
            if(type=3)
                selection$=str(pos10n.increment:"0000000")
                pos10n.increment=pos10n.increment+1
                if pos10n.increment>9999999 then let pos10n.increment=1000
            endif

        case 2

        restore_prev: rem --- Restore previous number

            if(type=0)
                if number=pos10n.next_po_no-1 then let pos10n.next_po_no=max(number,1)
            endif
            if(type=1)
                if number=pos10n.next_req_no-1 then let pos10n.next_req_no=max(number,1)
            endif
            if(type=2)
                if number=pos10n.next_rec_no-1 then let pos10n.next_rec_no=max(number,1)
            endif
            if(type=3)
                if number=pos10n.increment-1 then let pos10n.increment=max(number,1)
            endif
            break

        case default

            break
    swend

update_record: rem --- Update record

    write record (pos10_dev,key=pos10n.firm_id$+pos10n.record_id$) pos10n$

rem --- All done

    goto std_exit

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
