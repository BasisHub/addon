rem --- Purchase Order Invoice Entry Register Update
rem --- Program pou_invreg v8.0.0 23Jun2009 (pou_ea)
rem --- Created by adx_codeport.bbj v1.1.5 (06/23/2009 05:58:36)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$


rem --- Initializations

    precision i[1]
    dim a0$(20),a1$(64),a[8],b0$(23),b1$(32),b[4],c0$(23),c1$(64),c[4]
    dim d0$(23),d1$(32),d[4],ha$(23),hb$(26),hc$(26),x0$(32),x1$(4*g[4])
    dim y0$(4),y1$(32),y2$(2*g[4]),xa$(24),xb$(31),xc$(21),hd$(40)
    dim files[44],params[10],params$[10],item$[6],refs$[20],refs[20]
    item$[0]=firm_id$
    params[0]=g[0]
    params$[0]=sysinfo.system_date$
    params$[1]=sysinfo.user_id$
    params$[2]=i2$
    params$[3]=i3$
    params$[4]=i4$

rem --- Get user approval to update

    msg_id$="AON_UPDT_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Start progress meter

    call pgmdir$ + "adc_progress.aon","N","","","","",0,poe05_dev,1,meter_num,status

rem --- Loop thru all soft locked poe-05 keys
    if lockKeys!.size()<1 goto done
    for poe05_i=0 to lockKeys!.size()-1

    poe05_k$=cast(BBjString, lockKeys!.getItem(poe05_i))
    read record (poe05_dev, key=poe05_k$) poe05a$
    x$=fnmask$(poe05a.vendor_id$(1,p[0]),m0$)+" "+poe05a.ap_inv_no$
    if aptype x$=poe05a.ap_type$+" "+x$
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Additional reads

    find record (apm01_dev,key=firm_id$+poe05a.vendor_id$,dom=*next) apm01a$
    find record (apm10b_dev,key=firm_id$+"B"+poe05a.ap_dist_code$,dom=*next) apm10b$
    apacct$=apm10b.gl_ap_acct$
    retacct$=apm10b.gl_ret_acct$
    apcode$=poe05a.ap_dist_code$
    gldate$=poe05a.acct_date$
    vendor$=apm01a.vendor_id$(1,p[0])
    name$=apm01a.vendor_name$

rem --- Create apt-01 record

    dim apt01a$:fattr(apt01a$)
    apt01a.firm_id$=firm_id$
    apt01a.ap_type$=poe05a.ap_type$
    apt01a.vendor_id$=poe05a.vendor_id$
    apt01a.ap_inv_no$=poe05a.ap_inv_no$
    apt01a.sequence_00$="00"
    apt01a.ap_dist_code$=poe05a.ap_dist_code$
    apt01a.payment_grp$=poe05a.payment_grp$
    apt01a.ap_terms_code$=poe05a.ap_terms_code$
    apt01a.invoice_date$=poe05a.inv_date$
    apt01a.accting_date$=poe05a.acct_date$
    apt01a.inv_due_date$=poe05a.due_date$
    apt01a.disc_date$=poe05a.po_disc_date$
    apt01a.reference$=poe05a.reference$
    apt01a.ap_inv_memo$=poe05a.ap_inv_memo$
    apt01a.hold_flag$=poe05a.hold_flag$
    apt01a.invoice_amt=poe05a.invoice_amt
    apt01a.discount_amt=poe05a.discount_amt
    apt01a.retention=poe05a.retention
    write record (apt01_dev,dom=l1400) apt01a$
    goto l1500

l1400: rem --- Adjustment to current invoice

    dim apt11a$:fattr(apt11a$)
    apt11a.firm_id$=firm_id$
    apt11a.ap_type$=apt01a.ap_type$
    apt11a.vendor_id$=apt01a.vendor_id$
    apt11a.ap_inv_no$=apt01a.ap_inv_no$
    apt11a.trans_type$="A"
    apt11a.trans_date$=apt01a.accting_date$
    apt11a.trans_ref$=apt01a.reference$
    apt11a.trans_amt=apt01a.invoice_amt
    apt11a.trans_disc=apt01a.discount_amt
    apt11a.trans_ret=apt01a.retention
    channel=apt11_dev
    x$=apt11a.firm_id$+apt11a.ap_type$+apt11a.vendor_id$+apt11a.ap_inv_no$
    k=len(x$)
    gosub l6800
    apt11a.sequence_num$=str(seq:"00")
    write record (apt11_dev) apt11a$

l1500: rem --- Update apm-02 vendor totals

    dim apm02a$:fattr(apm02a$)
    apm02a.firm_id$=firm_id$
    apm02a.vendor_id$=poe05a.vendor_id$
    apm02a.ap_type$=poe05a.ap_type$    
    x$=poe05a.acct_date$
    call pgmdir$+"adc_fiscalperyr.aon",firm_id$,gls01_dev,x$,period$,year$
    find record (apm02_dev,key=apm02a.firm_id$+apm02a.vendor_id$+apm02a.ap_type$,dom=*next) apm02a$
    apm02a.lstinv_date$=poe05a.inv_date$
    apm02a.open_invs=apm02a.open_invs+poe05a.invoice_amt
    apm02a.open_ret=apm02a.open_ret+poe05a.retention
    if year$<=aps01a.current_year$ then apm02a.ytd_purch=apm02a.ytd_purch+poe05a.invoice_amt
    if year$>aps01a.current_year$ then apm02a.nyr_purch=apm02a.nyr_purch+poe05a.invoice_amt
    apm02a$=field(apm02a$)
    write record (apm02_dev) apm02a$

rem --- Generate pot-05 sequence number and position poe-15 PO Detail

    dim pot05a$:fattr(pot05a$)
    pot05a.firm_id$=firm_id$
    pot05a.ap_type$=poe05a.ap_type$
    pot05a.vendor_id$=poe05a.vendor_id$
    pot05a.ap_inv_no$=poe05a.ap_inv_no$
    channel=pot05_dev
    x$=pot05a.firm_id$+pot05a.ap_type$+pot05a.vendor_id$+pot05a.ap_inv_no$
    k=len(x$)
    gosub l6800
    pot05a.sequence_no$=str(seq:"000")
    read (poe15_dev,key=poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$,dom=*next)

l2000: rem --- Read next PO record

    k$=key(poe15_dev,end=l3300)
    if pos(poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$=k$)<>1 goto l3300
    read record (poe15_dev) poe15a$

rem --- Position line item file

    read (poe25_dev,key=poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$,dom=*next)

l2200: rem --- Read next line item

    k$=key(poe25_dev,end=l3200)
    if pos(poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$=k$)<>1 goto l3200
    read record (poe25_dev) poe25a$
    if poe25a.po_no$<>poe15a.po_no$ then goto l2200
    if cvs(poe15a.receiver_no$,3)<>"" if poe25a.receiver_no$<>poe15a.receiver_no$ goto l2200

rem --- Update history detail record

    dim pot14a$:fattr(pot14a$)
    pot14a.firm_id$=firm_id$
    pot14a.po_no$=poe25a.po_no$
    pot14a.receiver_no$=poe25a.receiver_no$
    pot14a.po_int_seq_ref$=poe25a.po_int_seq_ref$
    found=0
    find record (pot14_dev,key=pot14a.firm_id$+pot14a.po_no$+pot14a.receiver_no$+pot14a.po_int_seq_ref$,dom=l2370) pot14a$
    pot14a.qty_invoiced=pot14a.qty_invoiced+poe25a.qty_received
    found=1
    write record (pot14_dev) pot14a$
l2370:
    dim pom02a$:fattr(pom02a$)
    dim sv_pom02a$:fattr(pom02a$)
    pom02a.firm_id$=firm_id$
    pom02a.po_line_code$=poe25a.po_line_code$
    find record (pom02_dev,key=pom02a.firm_id$+pom02a.po_line_code$,dom=*next) pom02a$
    sv_pom02a$=pom02a$

rem --- Update PO line item

    dim l0$(18),l1$(64),l2$(32),l3$(22),l4$(40),l[12]
    l0$(1)=firm_id$+a0$(5,6)+c1$(1,7)+c1$(8,3)
    dim poe12a$:fattr(poe12a$)
    poe12a.firm_id$=firm_id$
    poe12a.po_no$=poe25a.po_no$
    poe12a.internal_seq_no$=poe25a.po_int_seq_ref$
    find record (poe12_dev,key=poe12a.firm_id$+poe12a.po_no$+poe12a.internal_seq_no$,dom=l2500) poe12a$
    pom02a.firm_id$=firm_id$
    pom02a.po_line_code$=poe12a.po_line_code$
    find record (pom02_dev,key=pom02a.firm_id$+pom02a.po_line_code$,dom=*next) pom02a$
    if found then if pom02a.line_type$<>sv_pom02a.line_type$ then goto l2500
    if found if pot14a.warehouse_id$+pot14a.item_id$<>poe12a.warehouse_id$+poe12a.item_id$ goto l2500
    poe12a.qty_invoiced=poe12a.qty_invoiced+poe25a.qty_received
    write record (poe12_dev) poe12a$

l2500: rem --- Calculate extension and retrieve line code

    pom02a$=sv_pom02a$
    precision 2
    extension=round(poe25a.unit_cost*poe25a.qty_received,2)
    poextension=round(poe25a.receipt_cost*poe25a.qty_received,2)
    precision i[1]

rem --- Read inventory item and warehouse

    dim ivm01a$:fattr(ivm01a$)
    dim ivm02a$:fattr(ivm02a$)
    ivm01a.firm_id$=firm_id$
    ivm01a.item_id$=pot14a.item_id$
    ivm02a.firm_id$=firm_id$
    ivm02a.warehouse_id$=pot14a.warehouse_id$
    ivm02a.item_id$=pot14a.item_id$
    if pom02a.line_type$<>"S" goto l2700
    find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next) ivm01a$
    find record (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next) ivm02a$

l2700: rem --- Generate GL Recap

    if gl$="N" goto l3100
    action$=""
    account$=""
    item$[0]=ivm01a$
    item$[1]=s1$;rem not used anymore (sending entire rec)
    item$[6]=s6$;rem not used anymore 
    values[0]=extension
    values[1]=poextension
    values[2]=poe25a.qty_received
    values[3]=ivm02a.qty_on_hand
    arcode$=ivm02a.ar_dist_code$
    w$[0]=poe25a$
    w$[1]="";rem not used anymore (sending entire poe25a$ rec in w$[0], used to send c1$ here)
    y$[0]=pom02a$
    y$[1]=y1$;rem not used anymore (sending entire rec)
    y$[2]=y2$;rem not used anymore
    gosub l6900

rem --- Get WIP account for Non-Stocks

    if pom02a.line_type$<>"N" goto l3000
    if sf$="N" goto l3000
    if cvs(pot14a.wo_no$,3)="" goto l3000
    dim sfe01a$:fattr(sfe01a$)
    dim sfm10a$:fattr(sfm10a$)
    find record (sfe01_dev,key=firm_id$+"  "+pot14a.wo_no$,dom=l3000) sfe01a$
    find record (sfm10_dev,key=firm_id$+"A"+sfe01a.wo_type$,dom=l3000) sfm10a$
    distaccnt$=sfm10a.gl_wip_acct$; rem "Distribution account = WIP account

l3000: rem --- Generate apt-02 records

    gosub l6000

l3100: rem --- Loop back for next line item

    rem --- first create pot25 from poe25, then set sequence no for key to the one we've assigned to pot05 key
    call stbl("+DIR_PGM")+"adc_copyfile.aon",poe25a$,pot25a$,status
    pot25a.sequence_no$=pot05a.sequence_no$
    write record (pot25_dev) pot25a$
    remove (poe25_dev,key=poe25a.firm_id$+poe25a.ap_type$+poe25a.vendor_id$+poe25a.ap_inv_no$+poe25a.line_no$,dom=*next)

    goto l2200

l3200: rem --- Loop back for next PO record

    rem --- first create pot15 from poe15, then set sequence no for key to the one we've assigned to pot05 key
    call stbl("+DIR_PGM")+"adc_copyfile.aon",poe15a$,pot15a$,status
    pot15a.sequence_no$=pot05a.sequence_no$
    write record (pot15_dev) pot15a$
    remove (poe15_dev,key=poe15a.firm_id$+poe15a.ap_type$+poe15a.vendor_id$+poe15a.ap_inv_no$+poe15a.line_no$,dom=*next)

    goto l2000

l3300: rem --- Position GL distribution file

    if gl$<>"Y" goto l3900
    dim item$[6],values[4],w$[10],y$[10]
    distribution=0
    read (poe35_dev,key=poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$,dom=*next)

l3400: rem --- Read next GL distribution record

    k$=key(poe35_dev,end=l3800)
    if pos(poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$=k$)<>1 goto l3800
    read record (poe35_dev) poe35a$

rem --- Generate GL recap postings and loop back for next record

    account$=poe35a.gl_account$
    amount=-poe35a.gl_post_amt
    values[0]=amount
    w$[0]=poe35a$
    w$[1]="";rem not used anymore (sending entire poe35a$ record in w$[0], used to send d1$ here)
    action$="D"
    distribution=distribution+amount
    gosub l6900

rem --- Generate apt-02 record

    gosub l6000

rem --- Loop back for next distribution record
    remove (poe35_dev,key=poe35a.firm_id$+poe35a.ap_type$+poe35a.vendor_id$+poe35a.ap_inv_no$+poe35a.line_no$,dom=*next)

    goto l3400

l3800: rem --- Generate GL recap postings for the invoice

    if distribution=0 goto l3900
    action$="D"
    account$=apacct$
    values[0]=-distribution
    w$[0]=poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$
    if values[0] gosub l6900

l3900: rem --- Loop back for next header

    rem --- copy poe05 to pot05 -- seq# for pot05 key already set
    call stbl("+DIR_PGM")+"adc_copyfile.aon",poe05a$,pot05a$,status
    pot05a.terms_code$=poe05a.ap_terms_code$
    pot05a$=field(pot05a$)
    write record (pot05_dev) pot05a$
    call stbl("+DIR_SYP")+"bac_lock_record.bbj","POE_INVHDR",poe05_k$,"U","",0,table_chans$[all],lock_stat$
    remove (poe05_dev,key=poe05_k$,dom=*next)

    next poe05_i

done: rem --- Update landed cost?

    if pos(pos01a.land_method$="QC")=0 goto l4900
    call pgmdir$+"ivc_itemupdt.aon::init",files[all],ivs01a$,item$[all],refs$[all],refs[all],rd_table_chans$[all],ignore_status
    read (pow17_dev,key=firm_id$,dom=*next)

l4100: rem --- Read next landed cost record

    k$=key(pow17_dev,end=l4900)
    if pos(firm_id$=k$)<>1 goto l4900
    read record (pow17_dev) pow17a$

rem --- Call standard inventory update program

    action$="PI"
    item$[0]=firm_id$
    item$[1]=pow17a.warehouse_id$
    item$[2]=pow17a.item_id$
    refs[4]=pow17a.landed_cost
    call pgmdir$+"ivc_itemupdt.aon",action$,files[all],ivs01a$,item$[all],refs$[all],refs[all],rd_table_chans$[all],ignore_status
    goto l4100

l4900: rem --- All done

    goto std_exit

l6000: rem --- Generate apt-02 record

    if cvs(distaccnt$,2)="" goto l6090
    dim t0$(34),t[1]
    dim apt02a$:fattr(apt02a$)
    apt02a.firm_id$=firm_id$
    apt02a.ap_type$=poe05a.ap_type$
    apt02a.vendor_id$=poe05a.vendor_id$
    apt02a.invoice_type$="I"
    apt02a.reference$=poe05a.ap_inv_no$
    apt02a.gl_account$=distaccnt$
    apt02a.accting_date$=gldate$
    extract record (apt02_dev,key=apt02a.firm_id$+apt02a.ap_type$+apt02a.vendor_id$+
:       apt02a.invoice_type$+apt02a.reference$+apt02a.gl_account$+apt02a.accting_date$,dom=*next) apt02a$
    apt02a.gl_post_amt=apt02a.gl_post_amt+distamnt
    apt02a.units=apt02a.units+distqty
    write record (apt02_dev) apt02a$
l6090:
    return

l6800: rem --- Find next sequence number

    let seq=0
    read (channel,key=x$(1,k)+$ff$,dom=*next)
    let k$=keyp(channel,end=l6840)
l6840:
    if pos(x$(1,k)=k$)=1 seq=num(k$(k+1))+1
    return

l6900: rem --- Call GL Posting Routine

    let glfiles[1]=glm01_dev,glfiles[2]=glt04_dev,glfiles[3]=glt14_dev
    let glfiles[4]=apm10b_dev,glfiles[5]=arm10d_dev,glparams$[0]=firm_id$
    let glparams$[1]=apcode$,glparams$[2]=arcode$,glparams$[3]=distcode$
    let glparams$[4]=gldate$,glparams$[5]=vendor$,glparams$[6]=name$
    let glparams$[7]=m0$,glparams$[8]=gls01a$,glparams$[9]=ivs01a.cost_method$
    let glparams$[10]=account$,glparams[0]=i[0],glparams[1]=i[1]
    let glparams[2]=g[4],glparams[3]=i[3],glparams[4]=i[4],glparams[5]=i[5]
    dim glaccounts$[5],glamounts[5],glqtys[5]
    let tpls$[1]=fattr(ivm01a$),tpls$[2]=fattr(poe25a$),tpls$[3]=fattr(pom02a$),tpls$[4]=fattr(gls01a$),tpls$[5]=fattr(poe35a$),tpls$[6]=fattr(arm10d$),tpls$[7]=fattr(apm10b$)
    call pgmdir$+"poc_invglpost.aon",action$,glfiles[all],glparams$[all],glparams[all],item$[all],w$[all],y$[all],values[all],glaccounts$[all],tpls$[all],glamounts[all],glqtys[all],status

    let distaccnt$=glaccounts$[1],distamnt=-glamounts[0],distqty=-glqtys[0]; rem "Distribution account = PO account, Distribution amount and quantity = -(AP amount and quantity)
    if pom02a.line_type$="S" distaccnt$=glaccounts$[4]; rem "For S-line types, Distribution account = IV account, Distribution amount and quantity = -(AP amount and quantity)
    if action$="D" distaccnt$=glaccounts$[0],distamnt=-distamnt,distqty=-distqty; rem "For GL distribution, Distribution account = AP account, Distribution amount and quantity = AP amount and quantity
    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    gosub remove_locks_and_exit
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

remove_locks_and_exit: rem --- Remove soft locks and exit
    if lockKeys! <> null() and lockKeys!.size() > 0 then
        for lck=0 to lockKeys!.size()-1
            lckk$=cast(BBjString, lockKeys!.getItem(lck))
            call stbl("+DIR_SYP")+"bac_lock_record.bbj","POE_INVHDR",lckk$,"U","",0,table_chans$[all],lock_stat$
        next lck
    endif
    return

    end