rem --- Open Purchase Orders Report (Print Overlay)
rem --- Program por_openpo_o1 v8.0.0 17Jul2007 (por_ib)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:48:23)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8],vendor$(6)
    grandtot=0
    printvtot$="N"
    initializing$="Y"; rem "Init files 1st time through
    more=1

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_POHDR","PRIMARY",poe02a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_POHDR","AO_VEND_PO",poe02a_key_alttpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_PODET","PRIMARY",poe12a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","AO_ALTSEQ_VEND",apm01a_key_tpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    headings=5
    dim headings$[headings],o[13]
    width=132
    page=0
    l9=59
    l=l9+1
    recs=0
    total_recs=0

    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads

    action=pos(printseq$="PAV")
    printbypo=1
    printbyalt=2
    printbyvend=3

    switch action
        case printbypo
            headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_PURCHASE_ORDER")
            break
        case printbyalt
            headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_ALTERNATE_SEQUENCE")
            break
        case printbyvend
            headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_VENDOR")
            break
        case default
            goto done
            break
    swend

rem --- Headings and print positions

    columns = 13
    dim columns$[columns,10]
    columns$[0,0]="",                   columns$[0,1]="C",columns$[0,2]="4"
    columns$[1,0]="",                   columns$[1,1]="C",columns$[1,2]="3"
    columns$[2,0]="",                   columns$[2,1]="C",columns$[2,2]="4"
    columns$[3,0]="",                   columns$[3,1]="C",columns$[3,2]="15"
    columns$[4,0]=Translate!.getTranslation("AON_DATE_ORDERD"),        columns$[4,1]="C",columns$[4,2]="15"
    columns$[5,0]=Translate!.getTranslation("AON_TERMS"),              columns$[5,1]="C",columns$[5,2]="10"
    columns$[6,0]="",                   columns$[6,1]="C",columns$[6,2]="10"
    columns$[7,0]=Translate!.getTranslation("AON_ACK'D_BY"),           columns$[7,1]="C",columns$[7,2]="8";columns$[7,3]=m2$
    columns$[8,0]="",                   columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m2$
    columns$[9,0]=Translate!.getTranslation("AON_SHIP_VIA"),           columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m2$
    columns$[10,0]="",                  columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m2$
    columns$[11,0]="FOB",               columns$[11,1]="N",columns$[11,2]="12",columns$[11,3]=m2$
    columns$[12,0]="",                  columns$[12,1]="N",columns$[12,2]="10",columns$[12,3]=""; rem *** Set by hand
    columns$[13,0]=Translate!.getTranslation("AON_SHIP_TO"),           columns$[13,1]="N",columns$[13,2]="10",columns$[13,3]=m1$,columns$[13,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Position files

    call pgmdir$+"adc_progress.aon","N","POE_POHDR","","","",0,poe02_dev,1,meter_num,status
    if status = 999 then goto std_exit


rem --- Sorts
    while more

        action=pos(printseq$="PAV")
        purchase_order_seq=1
        vendor_alt_seq=2
        vendor_seq=3

        switch action
            case purchase_order_seq;    rem --- Sort by Purchase Order (primary key)
                dim poe02a_key$:poe02a_key_pritpl$
                
                if initializing$<>"N"
                    initializing$="N"
                    read (poe02_dev,knum="PRIMARY",key=firm_id$+pofrom$,dir=0,dom=*next)
                endif
                
                poe02a_key$=key(poe02_dev,end=done)
                if cvs(pothru$,3)<>"" then if poe02a_key.po_no$>pothru$ then goto done

                break

            case vendor_alt_seq;     rem --- Sort by alternate sequence
                dim apm01a_key$:apm01a_key_tpl$
                dim poe02_vendkey$:poe02a_key_alttpl$ 

                if initializing$<>"N"
                    initializing$="N"
                    read (apm01_dev2,knum="AO_ALTSEQ_VEND",key=firm_id$+altfrom$,dom=*next)
                    dim poe02a_key$:poe02a_key_pritpl$
                endif

            new_alt_seq_read: 

                if cvs(poe02a_key$,3)=""
                    apm01a_key$=key(apm01_dev2,end=done)
                    if apm01a_key.firm_id$<>firm_id$ goto done else read (apm01_dev2,key=apm01a_key$)
                    if cvs(altthru$,3)<>"" then if apm01a_key.alt_sequence$(1,len(altthru$))>altthru$ goto done
                    apm01b_key$=apm01a_key.firm_id$+apm01a_key.vendor_id$
                    read (poe02_dev2,key=apm01b_key$,knum="AO_VEND_PO",dom=*next)
                endif

                poe02_vendkey$=key(poe02_dev2,end=*next);read (poe02_dev2)
                
                if poe02_vendkey.firm_id$+poe02_vendkey.vendor_id$<>apm01b_key$
                    dim poe02a_key$:poe02a_key_pritpl$
                    goto new_alt_seq_read
                else   
                    poe02a_key$=poe02_vendkey.firm_id$+poe02_vendkey.po_no$
                endif

                break

            case vendor_seq;    rem --- Sort by vendor (alt key 01)
                dim poe02_vendkey$:poe02a_key_alttpl$
                dim poe02a_key$:poe02a_key_pritpl$
                if initializing$<>"N"
                    initializing$="N"
                    read (poe02_dev2,key=firm_id$+vendfrom$,knum="AO_VEND_PO",dom=*next)
                endif

                poe02_vendkey$=key(poe02_dev2,end=done);read(poe02_dev2)
                if vendthru$<>"" then if poe02_vendkey.vendor_id$>vendthru$ then goto done

                poe02a_key$=poe02_vendkey.firm_id$+poe02_vendkey.po_no$

                break

            case default
                goto done
                break

        swend

        if poe02a_key.firm_id$<>firm_id$ goto done

        read record (poe02_dev,key=poe02a_key$) poe02a$
        dropship$=poe02a.dropship$
        
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

    rem --- Test Ranges

        headrecprinted$="N"

        if whse$<>"ALL" if poe02a.warehouse_id$<>whse$ continue
        gosub gettestdate_header

        if cvs(datefrom$,3)<>"" and testdateh$<datefrom$ then continue
        if cvs(datethru$,3)<>"" and testdateh$>datethru$ then continue

    rem --- Header passed tests
    
        gosub testbreaks
        headrecprinted$="Y"

    rem --- Test if any detail are w/in date range, if so, print line
    
        dim poe12a_key$:poe12a_key_tpl$

        p12_key$=poe02a.firm_id$+poe02a.po_no$
        read (poe12_dev,key=p12_key$,knum="DISPLAY_KEY",dom=*next)

    rem --- Test PO Detail date range
    
        while more

            poe12a_key$=key(poe12_dev,end=*break)
            if poe12a_key.firm_id$+poe12a_key.po_no$<>poe02a.firm_id$+poe02a.po_no$ then break
            read record (poe12_dev,key=poe12a_key$) poe12a$

            if whse$="ALL" or poe12a.warehouse_id$=whse$
                gosub gettestdate_detail
                if datefrom$="" or testdated$>=datefrom$

                    if datethru$="" or testdated$<=datethru$

                    rem --- Detail passed, so print header if nec & print detail

                        if headrecprinted$<>"Y"
                            gosub testbreaks
                            headrecprinted$="Y"
                        endif
                        
                        gosub printdetail
                        recs=recs+1
                        
                    endif

                endif

            endif

        rem --- Accumulate totals; then get next detail

            potot=potot+extension
            vendtot=vendtot+extension
            grandtot=grandtot+extension
            extension=0
            extension$=""

        wend 

    rem --- Done w/detail for this PO

        if headrecprinted$="Y" gosub pototals

    wend; rem tripread

done: rem --- All Done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if printseq$<>"P" gosub vendtotals
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk = fnblank(11)
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_REPORT")+$00$+"B")
    OutVect!.addItem("")
    OutVect!.addItem(str(grandtot)+$00$+"B")

    out_action$="FORMAT"
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8),dateprom$(8),notb4date$(8)
    whse_detail$=poe12a.warehouse_id$
    itemnum$=poe12a.item_id$
    memo$=poe12a.order_memo$
    unitmeas$=poe12a.unit_measure$
    if poe12a.reqd_date$<>fill(8) datereq$=fndate$(poe12a.reqd_date$)
    if poe12a.promise_date$<>fill(8) dateprom$=fndate$(poe12a.promise_date$)
    if poe12a.not_b4_date$<>fill(8) notb4date$=fndate$(poe12a.not_b4_date$)

    convfact$=str(poe12a.conv_factor:m5$)
    qtyord$=str(poe12a.qty_ordered:m2$)
    qtyrec$=str(poe12a.qty_received:m2$)
    baldue$=str(poe12a.qty_ordered-poe12a.qty_received:m2$)
    unitcost$=str(poe12a.unit_cost:m3$)
    wonum$=poe12a.wo_no$
    woseq$=poe12a.wk_ord_seq_ref$
    jobnum$=poe12a.location$

rem --- Get Line Type

    linetype$="N"
    p02_key$=poe12a.firm_id$+poe12a.po_line_code$
    find record (pom02a_dev,key=p02_key$,dom=get_item_desc) pom02a$
    linetype$=pom02a.line_type$

get_item_desc: rem --- Get Item Desc for S and N type lines

    dim itemdesc$(60)   
    if linetype$="N" itemnum$=poe12a.ns_item_id$,itemdesc$(1)=memo$; goto get_ext

    itemdesc$(1)=Translate!.getTranslation("AON_NOT_ON_FILE")
    i01_key$=firm_id$+poe12a.item_id$
    find record (ivm01a_dev,key=i01_key$,dom=get_ext) ivm01a$
    itemdesc$(1)=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])

get_ext: rem --- Get extension

    gosub calc_extension

rem --- Get Vendor's Part #

    dim vpartnum$(20)
    i05_key$=poe12a.firm_id$+poe02a.vendor_id$+itemnum$
    find record (ivm05a_dev,key=i05_key$,dom=*next) ivm05a$

rem --- Format common part of print line

    dim pline$(132)

rem --- Print Line Types 'M', 'O' & 'V'

    if pos(linetype$="MOV")<>0

    rem --- dropping isn/line# per VARS; OutVect!.addItem(poe12a.po_line_no$)
    
        OutVect!.addItem("")
        OutVect!.addItem(poe12a.po_line_code$)
        OutVect!.addItem(whse_detail$)
        OutVect!.addItem(memo$) 
        xwk=fnblank(8)

        if linetype$="O" then
            OutVect!.addItem(unitcost$)
            OutVect!.addItem(extension$)
        else
            xwk=fnblank(2)
        endif

        l=l+1
    else

    rem --- Print Line Types 'S' & 'N'

        if pos(linetype$="SN")=0 return

    rem --- dropping isn/line# per VARs; OutVect!.addItem(poe12a.po_line_no$)
    
        OutVect!.addItem("")
        OutVect!.addItem(poe12a.po_line_code$)
        OutVect!.addItem(whse_detail$)
        OutVect!.addItem(itemnum$)
        OutVect!.addItem(datereq$)
        OutVect!.addItem(dateprom$)
        OutVect!.addItem(notb4date$)
        OutVect!.addItem(unitmeas$)
        if linetype$="S" OutVect!.addItem(convfact$) else OutVect!.addItem("")
        OutVect!.addItem(qtyord$)
        OutVect!.addItem(qtyrec$)
        OutVect!.addItem(baldue$)
        OutVect!.addItem(unitcost$)
        OutVect!.addItem(extension$)
        xwk=fnblank(3)
        OutVect!.addItem(itemdesc$)

        if wonum$<>fill(7) then
            xwk = fnblank(2)
            OutVect!.addItem("WO: " + wonum$)
        endif
        
        gosub line_feed
        l=l+2
        
        if vpartnum$<>fill(20)
            OutVect!.addItem(Translate!.getTranslation("AON_VENDOR'S_PART_NUMBER_") + vpartnum$)
            l=l+1
        endif
    endif

    return

assignheads: rem --- Assign headings variables

    if printseq$="A" if vendfrom$="" vendf$=Translate!.getTranslation("AON_FIRST") else vendf$=vendfrom$
    if printseq$="A" if vendthru$="" vendt$=Translate!.getTranslation("AON_LAST") else vendt$=vendthru$
    
    if printseq$<>"A"
        if vendfrom$="" vendf$=Translate!.getTranslation("AON_FIRST") else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
        if vendthru$="" vendt$=Translate!.getTranslation("AON_LAST") else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    endif

    whead$=Translate!.getTranslation("AON_FOR_ALL_WAREHOUSES")
    if whse$<>"ALL" whead$=Translate!.getTranslation("AON_FOR_WAREHOUSE:_")+whse$+" "+cvs(whsename$,2)
    if vendfrom$="" headings$[2]=Translate!.getTranslation("AON_FROM_VENDOR:_FIRST") else headings$[2]=Translate!.getTranslation("AON_FROM_VENDOR:_")+ vendfrom$
    if vendthru$="" headings$[2]=headings$[2] + Translate!.getTranslation("AON__--_TO_VENDOR:_LAST") else headings$[2]=headings$[2] + Translate!.getTranslation("AON__--_TO_VENDOR:_") + vendthru$
    if pofrom$=""   headings$[3]=Translate!.getTranslation("AON_FROM_PURCHASE_ORDER_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_PURCHASE_ORDER_")+ pofrom$
    if pothru$=""   headings$[3]=headings$[3] + Translate!.getTranslation("AON__THROUGH_LAST") else headings$[3]=headings$[3] + Translate!.getTranslation("AON__--_THROUGH_") + pothru$
    if datefrom$="" headings$[4]=Translate!.getTranslation("AON_FROM_ORDER_DATE:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_ORDER_DATE:_") + str(fndate$(datefrom$))
    if datethru$="" headings$[4]=headings$[4] + Translate!.getTranslation("AON__--_TO_ORDER_DATE:_LAST") else headings$[4]= headings$[4] + Translate!.getTranslation("AON__--_TO_ORDER_DATE:") + fndate$(datethru$)

    headings$[5] = whead$

    return

gettestdate_header: rem --- Determine date to use when testing range

    action=pos(whichdate$="OPRD")
    date_ordered=1
    date_promised=2
    date_required=3
    date_dont_del_before=4

    switch action
        case date_ordered
            testdateh$=poe02a.ord_date$
            break

        case date_promised
            testdateh$=poe02a.promise_date$
            break

        case date_required
            testdateh$=poe02a.reqd_date$
            break

        case date_dont_del_before
            testdateh$=poe02a.not_b4_date$
            break

        case default
            testdateh$=poe02a.ord_date$
            break
    swend

    return

gettestdate_detail: rem --- Determine date to use when testing range in detail

    action=pos(whichdate$="OPRD")
    date_ordered=1
    date_promised=2
    date_required=3
    date_dont_del_before=4

    switch action
        case date_ordered
            testdated$=poe02a.ord_date$
            break

        case date_promised
            testdated$=poe12a.promise_date$
            break

        case date_required
            testdated$=poe12a.reqd_date$
            break

        case date_dont_del_before
            testdated$=poe12a.not_b4_date$
            break

        case default
            testdated$=poe02a.ord_date$
            break

    swend

    return

testbreaks: rem --- Test for Breaks

    if poe02a.vendor_id$<>vendor$
        if printvtot$="Y" and printseq$<>"P" gosub vendtotals
        gosub newvendor

        if printseq$="P"
            gosub newpo
        else
            if poe02a.po_no$<>ponum$ gosub newpo
        endif
    else
        if poe02a.po_no$<>ponum$ gosub newpo
    endif

    return

newvendor: rem --- New Vendor

    vendtot=0
    vendname$=Translate!.getTranslation("AON_NOT_ON_FILE")
    vendor$=poe02a.vendor_id$
    printvtot$="Y"
    a01_key$=firm_id$+vendor$
    find record (apm01a_dev,key=a01_key$,dom=brnch5) apm01a$
    vendname$=apm01a.vendor_name$

brnch5: 

    OutVect!.addItem(Translate!.getTranslation("AON_VENDOR_")+$00$+"B")
    OutVect!.addItem("")
    OutVect!.addItem("")
    OutVect!.addItem(str(vendor$(1,vendlen))+$00$+"B")
    OutVect!.addItem(vendname$)
    xwk = fnblank(9)
    l=l+1
    
    return

newpo: rem --- New PO

    potot=0
    ponum$=poe02a.po_no$
    termsdesc$=Translate!.getTranslation("AON_NOT_ON_FILE")
    paddrdesc$=""
    shpwhsdesc$=Translate!.getTranslation("AON_NOT_ON_FILE")
    a10_key$=firm_id$+"C"+poe02a.ap_terms_code$
    find record (apm10c_dev,key=a10_key$,dom=brnch6) apm10c$
    termsdesc$=apm10c.code_desc$

brnch6: 

    find record (apm05a_dev,key=firm_id$+vendor$+poe02a.purch_addr$,dom=brnch7) apm05a$
    paddrdesc$=apm05a.name$(1,24)

brnch7: 

    i10_key$=firm_id$+"C"+poe02a.warehouse_id$
    find record (ivm10c_dev,key=i10_key$,dom=brnch8) ivm10c$
    shpwhsdesc$=ivm10c.short_name$

brnch8: 

    dim dateord$(8)
    if poe02a.ord_date$<>fill(8) dateord$=fndate$(poe02a.ord_date$) 

    OutVect!.addItem("PO#: "+$00$+"B")
    OutVect!.addItem("")
    OutVect!.addItem("")
    OutVect!.addItem(ponum$+$00$+"B")
    OutVect!.addItem(Translate!.getTranslation("AON_ORDERED_") + str(fndate$(poe02a.ord_date$)))
    OutVect!.addItem(termsdesc$)
    OutVect!.addItem("")
    OutVect!.addItem(poe02a.acknowledge$)
    OutVect!.addItem("")
    OutVect!.addItem(poe02a.ap_ship_via$)
    OutVect!.addItem("")
    OutVect!.addItem(poe02a.fob$)
    OutVect!.addItem("")
    OutVect!.addItem(shpwhsdesc$)
    
    if cvs(paddrdesc$,3)<>""
        xwk=fnblank(4)
        OutVect!.addItem(Translate!.getTranslation("AON_PURCH_FROM:_")+paddrdesc$)
        xwk=fnblank(9)
    else
        xwk=fnblank(14)
    endif

    OutVect!.addItem("");rem was Translate!.getTranslation("AON_SEQ") - dropping per VARs
    OutVect!.addItem("CD")
    OutVect!.addItem("WH")
    OutVect!.addItem(Translate!.getTranslation("AON_ITEM"))
    OutVect!.addItem(Translate!.getTranslation("AON_DATE_REQ'D"))
    OutVect!.addItem(Translate!.getTranslation("AON_DATE_PROM'D"))
    OutVect!.addItem(Translate!.getTranslation("AON_NOT_B4_DATE"))
    OutVect!.addItem("UM")
    OutVect!.addItem(Translate!.getTranslation("AON_CONV_FACT"))
    OutVect!.addItem(Translate!.getTranslation("AON_QTY_ORDERED"))
    OutVect!.addItem(Translate!.getTranslation("AON_QTY_REC'D"))
    OutVect!.addItem(Translate!.getTranslation("AON_BALANCE_DUE"))
    OutVect!.addItem(Translate!.getTranslation("AON_UNIT_COST"))
    OutVect!.addItem(Translate!.getTranslation("AON_EXTENSION"))

    l=l+3

rem --- Print dropship info if applicable

    if dropship$="Y" and ar$<>"N"
        dim dropaddr$(120)
        dropname$=poe02a.ds_name$
        dropaddr$=poe02a.ds_addr_line_1$+poe02a.ds_addr_line_2$+poe02a.ds_addr_line_3$+poe02a.ds_city$+poe02a.ds_state_cd$+poe02a.ds_zip_code$
        call pgmdir$+"adc_address.aon",dropaddr$,24,4,9,30

        xwk=fnblank(14)

        xwk=fnblank(3)
        OutVect!.addItem(Translate!.getTranslation("AON_DROPSHIP_TO_CUSTOMER:_")+fnmask$(poe02a.customer_id$(1,custlen),customask$)+Translate!.getTranslation("AON_,_ORDER:_")+poe02a.order_no$)
        xwk=fnblank(10)

        xwk=fnblank(3)
        OutVect!.addItem(dropname$)
        xwk=fnblank(10)

        xwk=fnblank(3)
        OutVect!.addItem(dropaddr$(1,30)) 
        xwk=fnblank(10)

        l=l+3

        if cvs(dropaddr$(31,30),3)<>""
            xwk=fnblank(3)
            OutVect!.addItem(dropaddr$(31,30))
            xwk=fnblank(10)
            let l=l+1
        endif

        if cvs(dropaddr$(61,30),3)<>""
            xwk=fnblank(3)
            OutVect!.addItem(dropaddr$(61,30))
            xwk=fnblank(10)
            let l=l+1
        endif

        if cvs(dropaddr$(91,30),3)<>""
            xwk=fnblank(3)
            OutVect!.addItem(custaddr$(91,30))
            xwk=fnblank(10)
            let l=l+1
        endif

        xwk=fnblank(14)

    endif
    
    return

vendtotals: rem --- Print Vendor total

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk = fnblank(11)
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_VENDOR_")+$00$+"B")
    OutVect!.addItem(str(vendor$(1,vendlen))+$00$+"B")
    OutVect!.addItem(str(vendtot)+$00$+"B")

    l=l+1
    return

pototals: rem --- Print Purchase Order total

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk = fnblank(11)
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_PO_#_")+$00$+"B")
    OutVect!.addItem(ponum$+$00$+"B")
    OutVect!.addItem(str(potot)+$00$+"B")

    l=l+1
    return

calc_extension: 

    if pos(linetype$="SNO")=0 return

    qty=poe12a.qty_ordered-poe12a.qty_received
    if linetype$="O" qty=1
    extension=round(poe12a.unit_cost*qty, 2)
    extension$=str(extension,m3$)

    return
    
line_feed: rem --- Line Feed: Determin Number of cells to add to OutVect!

    tmp=mod(OutVect!.size(),columns+1)
    if tmp then xwk = fnblank (columns+1-tmp)
    
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
    