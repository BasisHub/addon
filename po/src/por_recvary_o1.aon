rem --- PO Receipt Variance Report (Print Overlay)
rem --- Program por_recvary_o1 v8.0.0 17Jul2007 (por_nb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:49:54)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    precision ivprecision
    dim vendtot[3],prevk$(31),vendor$(6),prevvend$(6)
    printvtot$="N"
    printptot$="N"
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECDET","PRIMARY",pot14a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECDET","VENDOR_RECDATE",pot14a_key_alttpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","PRIMARY",apm01a_key_tpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    headings=5
    dim headings$[headings],o[14]
    width=132
    page=0
    l9=59
    l=l9+1
    gosub assignheads
    more=1
    dim columns$[8,10]
    columns = 8
    columns$[0,0]="Seq",                  columns$[0,1]="C",columns$[0,2]="7"
    columns$[1,0]="Cd",                   columns$[1,1]="C",columns$[1,2]="8"
    columns$[2,0]="Wh",                   columns$[2,1]="C",columns$[2,2]="6"
    columns$[3,0]="Item",                 columns$[3,1]="C",columns$[3,2]="26"
    columns$[4,0]="Date Received",        columns$[4,1]="C",columns$[4,2]="4"
    columns$[5,0]="Date Required",        columns$[5,1]="C",columns$[5,2]="4"
    columns$[6,0]="Date Promised",        columns$[6,1]="C",columns$[6,2]="4"
    columns$[7,0]="Variance Req/Rec",     columns$[7,1]="N",columns$[7,2]="1",columns$[7,3]=mvar$
    columns$[8,0]="Variance Prom/Rec",    columns$[8,1]="N",columns$[8,2]="1",columns$[8,3]=mvar$
rem --- Print positions

    o[1]=o[0]+3
    o[2]=o[1]+3
    o[3]=o[2]+4
    o[4]=o[3]+3
    o[5]=o[4]+3
    o[6]=o[5]+itemlen+1
    o[7]=o[6]+desclen+1
    o[8]=o[7]+9
    o[9]=o[8]+9
    o[10]=o[9]+10
    o[11]=o[10]+mvar+2
    if o[11]+7>=width
        o[11]=width-mvar
        o[10]=o[11]-mvar
        o[9]=o[10]-mvar
        o[8]=o[9]-mvar
    endif

rem --- Position files

 
    call pgmdir$+"adc_progress.aon","N","","","","",0,pot04a_dev,1,meter_num,status

rem --- Init Read
    dim pot44a_key$:pot14a_key_alttpl$
    
    p44_key$=firm_id$+vendfrom$
    read (pot14_dev2,knum=3,key=p44_key$,dom=*next)
    if vendfrom$<>"" p44_key$=firm_id$+vendfrom$+datefrom$
      read (pot14_dev2,knum=3,key=p44_key$,dom=*next)
    endif

rem --- Read through Sort file

    while more

        pot44a_key$=key(pot14_dev2,end=*break)
        if pot44a_key.firm_id$<>firm_id$ break
        read (pot14_dev2); rem "Move ptr

rem --- Valid Vendor/Receipt Date?

        if vendfrom$<>"" and pot44a_key.vendor_id$>vendthru$ break
        if datefrom$="" or pot44a_key.recpt_date$>=datefrom$
            if datethru$="" or pot44a_key.recpt_date$<=datethru$
                vendor$=pot44a_key.vendor_id$
                ponum$=pot44a_key.po_no$
                receiver$=pot44a_key.receiver_no$
                linenum$=pot44a_key.po_line_no$
            else
rem --- Skip to next vendor
                p44_key$=pot44a_key.firm_id$+pot44a_key.vendor_id$+$FF$
                read (pot14_dev2,key=p44_key$,dom=*next)
                break

            endif
        else

rem --- Skip to first receipt date for vendor

            p44_key$=pot44a_key.firm_id$+pot44a_key.vendor_id$+datefrom$
            read (pot14_dev2,key=p44_key$,dom=*next)
            continue
            
        endif

rem --- Get Header & assign variables

        if pot44a_key.firm_id$+pot44a_key.vendor_id$+pot44a_key.recpt_date$+pot44a_key.po_no$+pot44a_key.receiver_no$<>prevk$(1,28)
            prevk$(1)=pot44a_key$
            p04_key$=firm_id$+vendor$+ponum$+receiver$
            find record (pot04a_dev,key=p04_key$,dom=*break) pot04a$
            dim rcptdate$(8),orddate$(8)
            if pot04a.recpt_date$<>"" rcptdate$=pot04a.recpt_date$
            if pot04a.ord_date$<>"" orddate$=pot04a.ord_date$
        endif

rem --- Get detail

        p14a_key$=pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$+pot04a.receiver_no$+linenum$
        find record (pot14a_dev,key=p14a_key$,dom=*break) pot14a$
        whse$=pot14a.warehouse_id$
        item$=pot14a.item_id$

rem --- Valid Whse/Item?

        if whsefor$<>"" if whse$<>whsefor$ continue
        if itemfrom$<>"" if item$<itemfrom$ continue
        if itemthru$<>"" if item$>itemthru$ continue

rem --- Valid line type (ie S or N)?

        gosub getlinetype
        if pos(linetype$="SN")=0 break

rem --- Valid, so assign vars

        call pgmdir$+"adc_progress.aon","S","","","","",0,pot04_dev,1,meter_num,status
        linecode$=pot14a.po_line_code$
        dim dateprom$(8),reqdate$(8)
        if pot14a.promise_date$<>fill(8) dateprom$=pot14a.promise_date$
        if pot14a.reqd_date$<>fill(8) reqdate$=pot14a.reqd_date$

rem --- Calculate variances

        reqvari=0
        promvari=0
        if rcptdate$<>fill(8)

            if reqdate$<>fill(8)
                if rcptdate$<reqdate$ multiplier=-1 else multiplier=1
                fromdate$=rcptdate$
                thrudate$=reqdate$
                call pgmdir$+"adc_daydates.aon",fromdate$,thrudate$,reqvari
                reqvari=reqvari*multiplier
            endif

            if datefrom$<>fill(8)

                if rcptdate$<dateprom$ multiplier=-1 else multiplier=1
                fromdate$=rcptdate$
                thrudate$=dateprom$
                call pgmdir$+"adc_daydates.aon",fromdate$,thrudate$,promvari
                promvari=promvari*multiplier

            endif

        endif

        if abs(reqvari)<minvari and abs(promvari)<minvari break

rem --- Test breaks

        if vendor$<>prevvend$

            if printptot$="Y" gosub pototals
            if printvtot$="Y" gosub vendtotals
            gosub newvendor
            gosub newpo

        else

            if ponum$<>prevpo$
                if printptot$="Y" gosub pototals
                gosub newpo
            endif

        endif

rem --- Get Item Desc

    dim itemdesc$(60),x1$(60)
    if linetype$<>"N"

        ivm01a.item_desc$="(Not On File)"
        find record (ivm01a_dev,key=firm_id$+pot14a.item_id$,dom=brnch1) ivm01a$
        ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])

    else
rem --- Non-stock description
        itemdesc$(1)=pot14a.order_memo$

    endif

brnch1: rem --- Go print the data

    gosub printline

rem --- Accumulate totals; then get next detail

    po_reqvar=po_reqvar+reqvari
    po_promvar=po_promvar+promvari
    vendreqvar=vendreqvar+reqvari
    vendpromvar=vendpromvar+promvari
    rptreqvar=rptreqvar+reqvari
    rptpromvar=rptpromvar+promvari

rem --- Loop up for next header record via sort files

    wend

done: rem --- All Done

    gosub pototals
    gosub vendtotals
    qwk = fnblank(5)
    OutVect!.addItem("    Total For Report")
    OutVect!.addItem(str(rptreqvar:mvar$))
    OutVect!.addItem(str(rptpromvar:mvar$))
    OutVect!.addItem("")
    call pgmdir$+"adc_progress.aon","D","","","","",0,poe04_dev,0,0,status
    goto std_exit

                                                                                                                 

assignheads: rem --- Assign headings variables

    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" For Variances Greater Than Or Equal To "+str(minvari:mpcnt$)

    if vendfrom$="" vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
    if vendthru$="" vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
    if datethru$="" datet$="Last" else datet$=fndate$(datethru$)
    if itemfrom$="" itemf$="First" else itemf$=itemfrom$(1,itemlen)
    if itemthru$="" itemt$="Last" else itemt$=itemthru$(1,itemlen)
   
   
   
    if vendfrom$="" headings$[2]="From Vendor: First" else headings$[2]="From Vendor: "+ vendf$
    if vendthru$="" headings$[2]=headings$[2]+" -- To Vendor: Last" else headings$[2]=headings$[2]+" -- To Vendor: "+ vendt$
    if datefrom$="" headings$[3]="From Receipt Date: First" else headings$[3]="From Receipt Date: "+ datef$
    if datethru$="" headings$[3]=headings$[3]+" -- To Receipt Date: Last" else headings$[3]=headings$[3]+" -- To Receipt Date: "+ datet$
    if itemfrom$="" headings$[4]="From Item: First" else headings$[4]="From Item: "+ itemf$
    if itemthru$="" headings$[4]=headings$[4]+" -- To Item: Last" else headings$[4]=headings$[4]+" -- To Item: "+ itemt$
    if whsefor$=""  headings$[5]="All Warehouses"  else headings$[5]="For Warehouse " + whsefor$+" "+cvs(whsename$,2)

    return

newvendor: rem --- New Vendor

    dim vendtot[3]
    vendname$="Not On File"
    prevvend$=vendor$
    printvtot$="Y"
    vendreqvar=0
    vendpromvar=0
    find record (apm01a_dev,key=firm_id$+vendor$,dom=brnch2) apm01a$
    vendname$=apm01a.vendor_name$

brnch2:

  
    OutVect!.addItem(fnmask$(vendor$(1,vendlen),vendomask$))
    OutVect!.addItem(" ")
    OutVect!.addItem(" ")
    OutVect!.addItem(vendname$)
    qwk=fnblank(5)
    
    l=l+1
    return

newpo: rem --- New PO

    dim rdate$(8),odate$(8)
    po_reqvar=0
    po_promvar=0
    prevpo$=ponum$
    printptot$="Y"
    if rcptdate$<>fill(8) rdate$=fndate$(rcptdate$)
    if orddate$<>fill(8) odate$=fndate$(orddate$)
    
    OutVect!.addItem("  PO #: ")
    OutVect!.addItem(ponum$)
    OutVect!.addItem("Ordered: ")
    OutVect!.addItem("  " + odate$)
    qwk = fnblank(5)

    l=l+1
    return

vendtotals: rem --- Print Vendor total

    
    qwk = fnblank(5)
    OutVect!.addItem("    Total For Vendor ")
    OutVect!.addItem(fnmask$(prevvend$(1,vendlen),vendomask$))
    OutVect!.addItem(str(vendreqvar:mvar$))
    OutVect!.addItem(str(vendpromvar:mvar$))
    
    l=l+1
    return

pototals: rem --- Print PO total


    qwk = fnblank(5)
    OutVect!.addItem("    Total For PO # ")
    OutVect!.addItem(prevpo$)
    OutVect!.addItem(str(po_reqvar:mvar$))
    OutVect!.addItem(str(po_promvar:mvar$))

    
    l=l+1
    return

getlinetype: rem --- Get Line Type

    let linetype$="N"
    find record (pom02a_dev,key=pot14a.firm_id$+pot14a.po_line_code$,dom=brnch3) pom02a$
    let linetype$=pom02a.line_type$

brnch3:
    return

rem --- Print data line

printline:

    dim dprom$(8),qdate$(8)
    if rcptdate$<>fill(8) rdate$=fndate$(rcptdate$)
    if dateprom$<>fill(8) dprom$=fndate$(dateprom$)
    if reqdate$<>fill(8) qdate$=fndate$(reqdate$)

    OutVect!.addItem("     " + linenum$)
    OutVect!.addItem(linecode$)
    OutVect!.addItem(whse$)
    OutVect!.addItem(item$(1,itemlen) + " " + itemdesc$(1,desclen))
    OutVect!.addItem(rdate$)
    OutVect!.addItem(qdate$)
    OutVect!.addItem(dprom$)
    OutVect!.addItem(str(reqvari:mvar$))
    OutVect!.addItem(str(promvari:mvar$))


    let l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,stat
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    run pgmdir$+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
