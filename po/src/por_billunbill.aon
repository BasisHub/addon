rem --- Billed/Unbilled PO Receipts Report
rem --- Program por_billunbill v8.0.0 06Jul2007 (por_ta)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:39:29)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=13,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="apm-01",     ids$[1]="APM_VENDMAST"
    files$[2]="apm-01",     ids$[2]="APM_VENDMAST";rem key vendor alt sequence (APM-04)
    files$[3]="pom-02",     ids$[3]="POC_LINECODE"
    files$[4]="pot-04",     ids$[4]="POT_RECHDR"
    files$[5]="pot-05",     ids$[5]="POT_INVHDR"
    files$[6]="pot-14",     ids$[6]="POT_RECDET"
    files$[7]="pot-25",     ids$[7]="POT_INVDET"
    files$[8]="pot-25",     ids$[8]="POT_INVDET";rem key invbypo (POT-35)
    files$[9]="pow-18",    ids$[9]="POW_RECTOTAL",options$[10]="C"
    files$[10]="APS_PARAMS",ids$[10]="APS_PARAMS"
    files$[11]="ivs_params",ids$[11]="IVS_PARAMS"
    files$[12]="pos_params",ids$[12]="POS_PARAMS"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    apm01_dev=channels[1]
    apm04_dev=channels[2];rem channel for apm01 for gettimg key vendor alt sequence
    pom02_dev=channels[3]
    pot04_dev=channels[4]
    pot05_dev=channels[5]
    pot14_dev=channels[6]
    pot25_dev=channels[7]
    pot35_dev=channels[8];rem channel for pot25 for getting key invbypo
    pow18_dev=channels[9]
    aps01_dev=channels[10]
    ivs01_dev=channels[11]
    pos01_dev=channels[12]

rem --- Dimension string templates

    dim apm01a$:templates$[1],apm04a$:templates$[2],pom02a$:templates$[3],pot04a$:templates$[4],pot05a$:templates$[5],
:       pot14a$:templates$[6],pot25a$:templates$[7],pot35a$:templates$[8],pow18a$:templates$[9],
:       aps01a$:templates$[10],ivs01a$:templates$[11],pos01a$:templates$[12]

rem --- Assign form input values to local variables

    printseq$=option!.getOptionData("report_seq")
    vendfrom$=option!.getOptionData("vendor_id_1")
    vendthru$=option!.getOptionData("vendor_id_2")
    datefrom$=option!.getOptionData("pick_date_01")
    dateThru$=option!.getOptionData("pick_date_02")
    level$=option!.getOptionData("report_option")
    altfrom$=option!.getOptionData("alt_sequence_1")
    altthru$=option!.getOptionData("alt_sequence_2")
    stock$=option!.getOptionData("stock")
    whse$=option!.getOptionData("warehouse_id")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"APOO"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (pos01_dev,key=pos01a_key$,err=std_missing_params) pos01a$

rem --- Parameters

    dim info$[20],desc[3],desclen[3]
    n2$="PO"
    ap$="N"
    ar$="N"
    sf$="N"
    when$=sysinfo.system_date$
    vendlen=num(aps01a.vendor_size$)
    ivprecision=num(ivs01a.precision$)
    itemlen=num(ivs01a.item_id_len$)

    desclen[1]=num(ivs01a.desc_len_01$)
    desclen[2]=num(ivs01a.desc_len_02$)
    desclen[3]=num(ivs01a.desc_len_03$)

rem --- Init Data

    precision ivprecision
    more=1
    m1$=ivs01a.amount_mask$
    m1=len(m1$)
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    dim vendfname$(30),vendtname$(30)

rem --- Get key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECHDR","VEND_RECDATE",pot04a_key_alttpl$,rd_table_chans$[all],status$;rem replacing pot-44
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","ALT_KEY_02",apm01a_key_alttpl$,rd_table_chans$[all],status$;rem replacing apm-04
    dim pot44_key$:pot04a_key_alttpl$
    dim apm04a_key$:apm01a_key_alttpl$

rem --- Loop Starting

        sql_prep$="SELECT POT_RECHDR.firm_id,POT_RECHDR.vendor_id,"
        sql_prep$=sql_prep$+"POT_RECHDR.po_no,POT_RECHDR.receiver_no,"
        sql_prep$=sql_prep$+"POT_RECHDR.recpt_date,POT_RECHDR.ord_date,POT_RECDET.po_line_no,"
        sql_prep$=sql_prep$+"POT_RECDET.unit_cost,POT_RECDET.qty_ordered,POT_RECDET.qty_received,"
        sql_prep$=sql_prep$+"POT_RECDET.po_line_code,APM_VENDMAST.alt_sequence "
        sql_prep$=sql_prep$+"FROM POT_RECHDR INNER JOIN POT_RECDET "
        sql_prep$=sql_prep$+"ON POT_RECHDR.firm_id=POT_RECDET.firm_id AND "
        sql_prep$=sql_prep$+"POT_RECHDR.vendor_id=POT_RECDET.vendor_id AND "
        sql_prep$=sql_prep$+"POT_RECHDR.po_no=POT_RECDET.po_no AND "
        sql_prep$=sql_prep$+"POT_RECHDR.receiver_no=POT_RECDET.receiver_no INNER JOIN APM_VENDMAST "
        sql_prep$=sql_prep$+"ON POT_RECHDR.firm_id=APM_VENDMAST.firm_id AND "
        sql_prep$=sql_prep$+"POT_RECHDR.vendor_id=APM_VENDMAST.vendor_id "
        where_clause$=" where POT_RECHDR.firm_id= '"+firm_id$+"' AND "
        if whse$<>"" then where_clause$=where_clause$+"POT_RECDET.warehouse_id = '"+whse$+"' AND "
        if printseq$="N" and vendfrom$<>"" then where_clause$=where_clause$+"POT_RECHDR.vendor_id >= '"+vendfrom$+"' AND " 
        if printseq$="N" and vendthru$<>"" then where_clause$=where_clause$+"POT_RECHDR.vendor_id <= '"+vendthru$+"' AND " 
        if printseq$="A" and altfrom$<>"" then where_clause$=where_clause$+"APM_VENDMAST.alt_sequence >= '"+altfrom$+"' AND " 
        if printseq$="A" and altthru$<>"" then where_clause$=where_clause$+"APM_VENDMAST.alt_sequence <= '"+altthru$+"' AND " 
        if datefrom$<>"" then where_clause$=where_clause$+"POT_RECHDR.recpt_date >= '"+datefrom$+"' AND "
        if datethru$<>"" then where_clause$=where_clause$+"POT_RECHDR.recpt_date <= '"+datethru$+"' AND "
        
        where_clause$=cvs(where_clause$,2)
        if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
        where_clause$=where_clause$+" order by POT_RECDET.warehouse_id,POT_RECDET.vendor_id "
        if where_clause$<>"" sql_prep$=sql_prep$+where_clause$

        sql_chan=1
        sqlopen(sql_chan,err=*next)stbl("+DBNAME")
        sqlprep(sql_chan)sql_prep$
        dim read_tpl$:sqltmpl(sql_chan)
        sqlexec(sql_chan)

rem --- Run report overlay

    if vendfrom$="" then let vendfname$=fill(30)
    if vendthru$="" then let vendtname$=fill(30)
    gosub accumpoamts
    run pgmdir$+"por_billunbill_o1.aon"

accumpoamts: rem --- Accumulate PO Amt (POT-14)

    while more
        read_tpl$=sqlfetch(sql_chan,err=*break)
        pow18a.extended_amt=0
        vendor$=read_tpl.vendor_id$
        rcptdate$=read_tpl.recpt_date$
        pow18a.firm_id$=read_tpl.firm_id$
        pow18a.vendor_id$=read_tpl.vendor_id$
        pow18a.po_no$=read_tpl.po_no$
        pow18a.po_line_no$=read_tpl.po_line_no$
        find record (pom02_dev,key=read_tpl.firm_id$+read_tpl.po_line_code$,dom=*next) pom02a$
        if stock$="S" then if pom02a.line_type$<>"S" then continue
        if stock$="N" then if pom02a.line_type$<>"N" then continue
        unitcost=read_tpl.unit_cost
        qtyord=read_tpl.qty_ordered
        if pom02a.line_type$="O" then qtyord=1
        pow18a.extended_amt=pow18a.extended_amt+(unitcost*qtyord)
        precision ivprecision
        write record (pow18_dev,key=pow18a.firm_id$+pow18a.vendor_id$+pow18a.po_no$+pow18a.po_line_no$,end=*break) pow18a$
    wend
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
