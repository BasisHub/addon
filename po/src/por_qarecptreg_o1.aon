rem --- Quality Assurance Receipt Register (Report Overlay)
rem --- Program por_cb v8.0.0 17Jul2007 (por_cb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:46:37)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        seterr std_error
        setesc std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Initializations

        precision num(ivs01a.precision$)
        dim o[14]
        dim description$(40)
        dim headings$[8],totals[4],receipt[4],vendor[4],report[4]
        dim line[4]
        dim difqty[99],diftype$[99],difkey$[99]

		call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
		call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
		call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,m3
		call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","I","",ivIMask$,0,0

        width=132
        page=0
        l9=59
        l=l9+1
        clock$=""
        when$=sysinfo.system_date$
        headings=5
        done=0
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$
        nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
        number=0
        lsdesc$=Translate!.getTranslation("AON_SERIAL_NBR")
        dif=0
        x1=15
        x2=12
        x3=12
        ms$="000-"
        if ivs01a.lotser_flag$="L" lsdesc$=Translate!.getTranslation("AON_LOT_NBR")
        more=1

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,poe03_dev,1,meter_num,status

rem --- Print positions

        dim h1$(width),h2$(width),qh$(m2*4,"-")
        o[14]=width-m1
        o[13]=o[14]-m3
        o[12]=o[13]-m2
        o[11]=o[12]-m2
        o[10]=o[11]-m2
        o[9]=o[10]-m2
        o[8]=o[9]-3
        o[7]=o[8]-11
        o[6]=o[7]-9
        o[5]=o[6]-9
        o[4]=o[5]-9
        o[1]=4
        o[2]=7
        o[3]=10

rem ***    qh$(fncenter(m2*4,10),10)=Translate!.getTranslation("AON__QUANTITY_")

        if begvend$<>"" then
            x1$=Translate!.getTranslation("AON_FROM_VENDOR__:_")+fvendor$
        else
            x1$=Translate!.getTranslation("AON_FROM_VENDOR__:_FIRST")
        endif
        if endvend$<>"" then
            x2$=Translate!.getTranslation("AON_TO_VENDOR____:_")+tvendor$
        else
            x2$=Translate!.getTranslation("AON_TO_VENDOR____:_LAST")
        endif

        headings$[2]=x1$
        headings$[3]=x2$

        x1$=Translate!.getTranslation("AON_FIRST")
        x2$=Translate!.getTranslation("AON_LAST")
        if begrec$<>"" x1$=begrec$
        if endrec$<>"" x2$=endrec$
        x1$=Translate!.getTranslation("AON_FROM_RECEIVER____:_")+x1$
        x2$=Translate!.getTranslation("AON_TO_RECEIVER______:_")+x2$
        headings$[4]=x1$
        headings$[5]=x2$

        x=max(len(x1$),len(x2$))
        x1$=Translate!.getTranslation("AON_FIRST")
        x2$=Translate!.getTranslation("AON_LAST")
        if begdate$<>"" x1$=fndate$(begdate$)
        if enddate$<>"" x2$=fndate$(enddate$)
        x=max(len(x1$),len(x2$))+18
        h1$=Translate!.getTranslation("AON_FROM_RECEIPT_DATE:_")+x1$
        h2$=Translate!.getTranslation("AON_TO_RECEIPT_DATE:_")+x2$
        headings$[6]=h1$
        headings$[7]=h2$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_QAHDR","PRIMARY",poe03a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_QADET","PRIMARY",poe13a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_QALSDET","PRIMARY",poe23a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_QAREJDET","PRIMARY",poe63a_key_tpl$,rd_table_chans$[all],status$
        dim poe03a_key$:poe03a_key_tpl$
        dim poe13a_key$:poe13a_key_tpl$
        dim poe23a_key$:poe23a_key_tpl$
        dim poe63a_key$:poe63a_key_tpl$


        dim columns$[11,10]
            columns=11
            columns$[0,0]=Translate!.getTranslation("AON_SEQ__CD__WH__ITEM"),  columns$[0,1]="C",columns$[0,2]="30"
            columns$[1,0]=Translate!.getTranslation("AON_NOT^BEFORE"),         columns$[1,1]="C",columns$[1,2]="8"
            columns$[2,0]=Translate!.getTranslation("AON_DATE^REQUIRED"),      columns$[2,1]="C",columns$[2,2]="8"
            columns$[3,0]=Translate!.getTranslation("AON_DATE^PROMISED"),      columns$[3,1]="C",columns$[3,2]="8"
            columns$[4,0]=Translate!.getTranslation("AON_WORK^ORDER"),         columns$[4,1]="C",columns$[4,2]="8"
            columns$[5,0]="UM",                 columns$[5,1]="C",columns$[5,2]="8"
            columns$[6,0]=Translate!.getTranslation("AON_QTY^ORDERED"),        columns$[6,1]="N",columns$[6,2]="8"
            columns$[7,0]=Translate!.getTranslation("AON_QTY^RECEIVED"),       columns$[7,1]="N",columns$[7,2]="8"
            columns$[8,0]=Translate!.getTranslation("AON_QTY^APPROVED"),       columns$[8,1]="N",columns$[8,2]="8"
            columns$[9,0]=Translate!.getTranslation("AON_QTY^REJECTED"),       columns$[9,1]="N",columns$[9,2]="10"
            columns$[10,0]=Translate!.getTranslation("AON_UNIT^COST"),         columns$[10,1]="N",columns$[10,2]="10"
            columns$[11,0]=Translate!.getTranslation("AON_EXTENSION"),         columns$[11,1]="N",columns$[11,2]="10"

        call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Position file

        start$=firm_id$+begvend$
        read (poe03_dev,key=start$,dom=*next)

    while more

        poe03a_key$=key(poe03_dev,end=*break)
        if pos(firm_id$=poe03a_key$)<>1 break
        read record (poe03_dev) poe03a$

rem --- Range tests

        if endvend$<>"" if poe03a_key.vendor_id$>endvend$ break
        if begdate$<>"" if poe03a.recpt_date$<begdate$ continue
        if enddate$<>"" if poe03a.recpt_date$>enddate$ continue
        if begrec$<>"" if poe03a_key.receiver_no$<begrec$ continue
        if endrec$<>"" if poe03a_key.receiver_no$>endrec$ continue
        lines=0
        status=11
        read (poe13_dev,key=poe03a_key$,dom=*next)

update_lines: rem --- See if any line items should be updated

        while more

            poe13a_key$=key(poe13_dev,end=*break)
            if pos(poe03a.firm_id$=poe13a_key$)<>1 break
            read record (poe13_dev) poe13a$
            lines=lines+1
            if poe13a.update_flag$="Y" status=0

        wend

update_line_items: rem --- Any line items to be updated?

        if (lines<>0 or status<>0) continue

header_flds: rem --- Header fields

        dim receipt[4]
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        packlist$=""
        number=number+1
        if cvs(poe03a.packing_list$,2)<>"" packlist$=Translate!.getTranslation("AON_PACKING_LIST:_")+poe03a.packing_list$

rem --- Level break?

        if t0$<>poe03a.vendor_id$ gosub vend_brk

rem --- Print header information

        if l+5>l9 gosub report_heading else gosub recpt_subhead

rem --- Position detail file

        read (poe13_dev,key=poe03a_key$,dom=*next)

rem --- Read next detail record

        while more

            dim line[4]
            poe13a_key$=key(poe13_dev,end=*break)
            if pos(poe03a_key.firm_id$=poe13a_key$)<>1 break
            read record (poe13_dev) poe13a$

            if poe13a.update_flag$<>"Y"

                gosub set_variables
                continue

            endif

rem --- Read line code

            if pom02a_key.firm_id$<>firm_id$ if pom02a_key.po_line_code$<>poe13a.po_line_code$

                pom02a_key.firm_id$=firm_id$, pom02a_key.po_line_code$=poe13a.po_line_code$
                pom02a.code_desc$=""
                find record (pom02a_dev,key=pom02a_key$,dom=set_variables) pom02a$
                if dom_flag=1 continue else dom_flag=0

            endif

rem --- Calculate extension

            qty=poe13a.qa_rec_qty
            extension=0
            if pom02a.line_type$="O" qty=1
            precision 2
            extension=poe13a.unit_cost*qty
            precision num(ivs01a.precision$)
            line[0]=poe13a.qty_ordered
            line[1]=poe13a.qa_wip_qty
            line[2]=poe13a.qa_rec_qty
            line[3]=poe13a.qa_rej_qty
            line[4]=extension

rem --- Format remaining fields

            before$=""
            required$=""
            promised$=""
            wo$=""
            if cvs(poe13a.reqd_date$,2) <>"" required$=fndate$(poe13a.reqd_date$)
            if cvs(poe13a.promise_date$,2)<>"" promised$=fndate$(poe13a.promise_date$)
            if cvs(poe13a.not_b4_date$,2)<>"" before$=fndate$(poe13a.not_b4_date$)
            if cvs(poe13a.wo_no$+poe13a.wk_ord_seq_ref$,2)<>"" then
                redim sfe22a$
                readrecord(sfe22_dev,key=firm_id$+sfe22a.wo_location$+poe13a.wo_no$+poe13a.wk_ord_seq_ref$,dom=*next)sfe22a$
                wo$=poe13a.wo_no$+"-"+sfe22.material_seq$
            endif
            pow13a_key$=poe13a_key.firm_id$
            write record (pow13_dev,key=pow13a_key$) pow13a$

rem --- Branch based on line code

            action=pos(pom02a.line_type$="SNVMO")
            std_line=1
            non_stock_line=2
            vendor_part_no_line=3
            msg_line=4
            other_type_line=5

            switch action

                case std_line;   rem --- Standard line

                    ivm01a_key$=firm_id$+w3$(3)
                    ivm01a$=""
                    description$(1)=nf$
                    find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
                    description$(1)=ivm01a.description$

                    OutVect!.addItem(poe13a_key.po_line_no$+" "+poe13a.po_line_code$+" "+poe13a.warehouse_id$+" "+cvs(fnmask$(poe13a.item_id$,ivIMask$),2))
                    OutVect!.addItem(before$)
                    OutVect!.addItem(required$)
                    OutVect!.addItem(promised$)
                    OutVect!.addItem(wo$)
                    OutVect!.addItem(poe13a.unit_measure$)
                    OutVect!.addItem(str(poe13a.qty_ordered:m2$))
                    OutVect!.addItem(str(poe13a.qty_ordered:m2$))
                    OutVect!.addItem(str(poe13a.qa_rec_qty:m2$))
                    OutVect!.addItem(str(poe13a.qa_rej_qty:m2$))
                    OutVect!.addItem(str(poe13a.unit_cost:m3$))
                    OutVect!.addItem(str(extension:m1$))

                    OutVect!.addItem(description$)
                    blnk=fnblank(11)

                    l=l+2
                    break

                case non_stock_line;     rem --- Non-stock line

                    OutVect!.addItem(poe13a_key.po_line_no$+" "+poe13a.po_line_code$+" "+poe13a.warehouse_id$+" "+cvs(fnmask$(poe13a.item_id$,ivIMask$),2))
                    blnk=fnblank(3)
                    OutVect!.addItem(code$)
                    OutVect!.addItem(poe13a.unit_measure$)
                    OutVect!.addItem(str(poe13a.qty_ordered:m2$))
                    OutVect!.addItem(str(poe13a.qty_ordered:m2$))
                    OutVect!.addItem(str(poe13a.qa_rec_qty:m2$))
                    OutVect!.addItem(str(poe13a.qa_rej_qty:m2$))
                    OutVect!.addItem(str(poe13a.unit_cost:m3$))
                    OutVect!.addItem(str(extension:m1$))
                    OutVect!.addItem(poe13a.order_memo$)
                    blnk=fnblank(11)

                    l=l+2
                    break

                case vendor_part_no_line;    rem --- Vendor part number line

                    OutVect!.addItem(poe13a_key.po_line_no$+" "+poe13a.po_line_code$+" "+poe13a.warehouse_id$+" "+cvs(fnmask$(poe13a.item_id$,ivIMask$),2))
                    blnk=fnblank(11)

                    l=l+1
                    break

                case msg_line;   rem --- Message line

                    OutVect!.addItem(poe13a_key.po_line_no$+" "+poe13a.po_line_code$+" "+poe13a.warehouse_id$+" "+poe13a.order_memo$)
                    blnk=fnblank(11)

                    l=l+1
                    break

                case other_type_line;    rem --- Other type line

                    OutVect!.addItem(poe13a_key.po_line_no$+" "+poe13a.po_line_code$+" "+poe13a.warehouse_id$)
                    blnk=fnblank(9)
                    OutVect!.addItem(str(poe13a.unit_cost:m3$))
                    OutVect!.addItem(str(extension:m1$))
                    OutVect!.addItem(poe13a.order_memo$)
                    blnk=fnblank(11)

                    l=l+2
                    break

                case default
                    continue

            swend

rem --- Lotted/Serialized?

            if ls$<>"N"

                if pom02a.line_type$="S"

                    if (ivm01a.lotser_item$ <>"Y" or ivm01a.inventoried$ <> "Y")
                   
                        needed=0
                        lastseq=0
                        p13_key$=poe13a.firm_id$+poe13a.vendor_id$+poe13a.receiver_no$+
:                       poe13a.po_no$+poe13a.po_line_no$
                        read (poe23_dev,key=p13_key$,dom=*next)

rem --- Read next lot/serial detail record

                        while more

                            poe23a_key$=key(poe23_dev,end=*break)
                            if pos(p13_key$=poe23a_key$)<>1 break
                            read record (poe23_dev) poe23a$
                            precision 2
                            extension=poe23a.qty_received*poe23a.unit_cost
                            precision num(poe23a.precision$)

rem --- Print detail line

                            OutVect!.addItem(lsdesc$+" "+poe23a.sequence_no$+" "+poe23a.lotser_no$)
                            blnk=fnblank(6)
                            OutVect!.addItem(str(poe23a.qty_received:m2$))
                            OutVect!.addItem(str(poe23a.qty_received:m2$))
                            OutVect!.addItem(str(poe23a.unit_cost:m3$))
                            OutVect!.addItem(str(extension:m1$))

                            l=l+1
                            needed=needed+poe23a.qty_received
                            lastseq=num(poe23a.sequence_no$)

                        wend

rem --- Enough lot/serial numbers?

                        if needed<>poe13a.qa_rec_qty

                            type$="L"
                            qty=poe13a.qa_rec_qty-needed
                            if needed<poe13a.qa_rec_qty xlimit=qty
                            if ivs01a.lotser_flag$="L" xlimit=1
                            if needed>poe13a.qa_rec_qty xlimit=0
                            gosub store_diff

                        endif

                    endif

                endif

            endif

pos_rej_det: rem --- Position rejection detail file

            needed=0
            lastseq=0

            if poe13a.qa_rej_qty=0

                gosub set_variables
                continue

            endif

            p13_key$=poe13a.firm_id$+poe13a.vendor_id$+poe13a.receiver_no$+
:                               poe13a.po_no$+poe13a.po_line_no$
            read (poe63_dev,key=p13_key$,dom=*next)

read_next: rem --- Read next rejection detail

            while more

                poe63a_key$=key(poe63_dev,end=*break)
                if pos(p13_key$=poe63a_key$)<>1 break
                read record (poe63_dev) poe63a$
                pom03a_key$=firm_id$+poe63a.reject_code$
                pom03a$=nf$
                lastseq=num(poe63a_key.sequence_no$)
                find record (pom03a_dev,key=pom03a_key$,dom=*next) pom03a$
                precision 2
                extension=d[0]*poe13a.unit_cost
                precision num(poe13a.precision$)

rem --- Print rejection detail

                dim ra$(22),inspector$(9)
                if cvs(poe63a.user_id$,2)<>"" inspector$(1)=Translate!.getTranslation("AON_INSP:_")+ poe63a.operator_id$
                if cvs(poe63a.ra_no$,2)<>"" ra$(1)="RA #: "+poe63a.ra_no$

                OutVect!.addItem(poe63a.sequence_no$+" "+pom03a.reject_code$+" "+pom03a.description$+" "+ra$+" "+inspector$)
                blnk=fnblank(8)
                OutVect!.addItem(str(poe63a.qty_reject:m2$))
                OutVect!.addItem(str(poe13a.unit_cost:m3$))
                OutVect!.addItem(str(extension:m1$))

                l=l+1
                needed=needed+poe63a.qty_reject

            wend

rem --- Loop back for next detail record

            if needed=poe13a.qa_rej_qty

                gosub set_variables
                continue

            endif

            type$="R"
            qty=1
            xlimit=1
            if needed>poe13a.qa_rej_qty xlimit=0
            gosub store_diff

            gosub set_variables

        wend;   rem --- Loop back for next detail

print_rec_totals: rem --- Print receiver totals

        blnk=fnblank(12)
        totals$=Translate!.getTranslation("AON_TOTAL_FOR_RECEIVER_#_")+poe03a_key.receiver_no$
        totals[all]=receipt[all]
        l=l+1
        gosub print_totals

    wend

done: rem --- All done

        done=1
        gosub vend_brk
        totals$=Translate!.getTranslation("AON_TOTAL_FOR_REGISTER")
        totals[all]=report[all]
        gosub print_totals

    if dif<>0
    
        blnk=fnblank(12)
        OutVect!.addItem(Translate!.getTranslation("AON_LOT/SERIAL_NUMBER_AND_REJECTION_CODE_DIFFERENCES:"))
        blnk=fnblank(11)

        l=l+3

rem --- Print list of lines with lot/serial number differences

        for x=1 to dif

            k$=difkey$[x]
            qty=difqty[x]
            apm01a_key$=k$(1,8)
            apm01a$=nf$
            find record (apm01a_dev,key=apm01a_key$,dom=*next) apm01a$
            x$=Translate!.getTranslation("AON_IS_MISSING_")+str(qty)
            lsdesc$=Translate!.getTranslation("AON__LOT/SERIAL_NUMBER(S)")
            if qty<0 x$=Translate!.getTranslation("AON_HAS_")+str(abs(qty))+Translate!.getTranslation("AON__TOO_MANY")
            if diftype$[x]="R" lsdesc$=Translate!.getTranslation("AON__REJECTION_CODE_ENTRIES")

            OutVect!.addItem(Translate!.getTranslation("AON_VENDOR_"),fnmask$(apm01a_key.vendor_id$,m0$))
            OutVect!.addItem(apm01a.vendor_name$)
            OutVect!.addItem(Translate!.getTranslation("AON__RECEIVER_#_"),k$(9,7))
            OutVect!.addItem("/PO # ",k$(16,7))
            OutVect!.addItem("-",k$(23,3))
            OutVect!.addItem(" ",x$,lsdesc$)
            l=l+1

        next x

rem --- Notify user of errors

        message$=Translate!.getTranslation("AON_ERRORS_WERE_REPORTED_DURING_THE_GENERATION_OF_THE_QA_RECEIPT")
        message$=message$+$0A$+Translate!.getTranslation("AON_REGISTER._THE_UPDATE_WILL_NOT_BE_RUN._REVIEW_THE_REGISTER,")
        message$=message$+$0A$+Translate!.getTranslation("AON_CORRECT_THE_ERRORS_AND_REPRINT_(<ENTER>=CONTINUE)")
        msg_id$="GENERIC_WARN"
        dim msg_tokens$[1]
        msg_tokens$[1]=message$
        gosub disp_message
        goto std_exit
    endif    

run_next: rem --- Run next overlay

rem     if number=0 goto std_exit
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,meter_num,status
        run pgmdir$+"pou_qaupdate.aon"
        goto std_exit



report_heading: rem --- Report Heading

        l=headings+4
        if done=0 gosub recpt_subhead
        return

recpt_subhead: rem --- Receipt subheading

        blnk=fnblank(12)
        OutVect!.addItem(Translate!.getTranslation("AON_VENDOR:_")+vendor$)
        OutVect!.addItem(Translate!.getTranslation("AON_REC_#:_")+poe03a_key$)
        OutVect!.addItem("PO #:"+poe03a.po_no$)
        OutVect!.addItem(packlist$)
        OutVect!.addItem(Translate!.getTranslation("AON_RECEIPT_DATE:_"),fndate$(poe03a.recpt_date$))
        blnk=fnblank(7)
        let l=l+3
        return

vend_brk: rem --- Vendor break

        if t0$<>""

            let totals$=Translate!.getTranslation("AON_TOTAL_FOR_")+vendor$,totals[all]=vendor[all]
            gosub print_totals

        endif

brnch1:
        
        if done return
        dim vendor[4]
        let t0$=poe03a_key.vendor_id$,apm01a_key.firm_id$=firm_id$+t0$,apm01a.vendor_name$=nf$
        find record (apm01a_dev,key=apm01a_key$,dom=*next) apm01a$
        let vendor$=fnmask$(apm01a_key.vendor_id$,m0$)+" "+cvs(apm01a.vendor_name$,2)
        if pagebreak$="Y" l=l9+1
        return

rem --- Store lot/serial or rejection code difference

store_diff:

        let dif=dif+1
        if dif>99 return
        let difkey$[dif]=poe13a.firm_id$+poe13a.vendor_id$+poe13a.receiver_no$+poe13a.po_no$+poe13a.po_line_no$,diftype$[dif]=type$,difqty[dif]=qty
        if xlimit=0 return
        for x=1 to xlimit
            let l=l+1,lastseq=lastseq+1
            if type$="L" then
                OutVect!.addItem(lsdesc$+" "+str(lastseq:ms$))
                blnk=fnblank(11)
            endif
            if type$="R" then
                OutVect!.addItem(str(lastseq:ms$))
                blnk=fnblank(11)
            endif
        next x
        return

rem --- Print totals

print_totals:

        if len(totals$)>o[6] totals$=totals$(1,o[6])

            OutVect!.addItem(totals$)
            blnk=fnblank(5)
            OutVect!.addItem(str(totals[0]:m2$))
            OutVect!.addItem(str(totals[1]:m2$))
            OutVect!.addItem(str(totals[2]:m2$))
            OutVect!.addItem(str(totals[3]:m2$))
            blnk=fnblank(1)
            OutVect!.addItem(str(totals[4]:m1$))

            let l=l+1
            return

rem --- Subroutine1

set_variables:

            receipt[all]=receipt[all]+line[all]
            vendor[all]=vendor[all]+line[all]
            report[all]=report[all]+line[all]
            dom_flag=1
            return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- fnblank: Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
rem    run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
