rem --- Quality Assurance Receipt Register (Report Overlay)
rem --- Program por_cb v8.0.0 17Jul2007 (por_cb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:46:37)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    begvend$=fnget_fld_data$(table$,"vendor_id1")
    endvend$=fnget_fld_data$(table$,"vendor_id2")
    begdate$=fnget_fld_data$(table$,"beg_date")
    enddate$=fnget_fld_data$(table$,"end_date")
    begrec$=fnget_fld_data$(table$,"beg_recvr")
    endrec$=fnget_fld_data$(table$,"end_recvr")
    pgbreak$=fnget_fld_data$(table$,"page_break")

rem --- Initializations

    precision num(ivs01a.precision$)
    dim a0$(22),a1$(160),a[8],o[14],c0$(22),c1$(60),c2$(64),x0$(25)
    dim w0$(25),w1$(48),w2$(32),w3$(22),w4$(40),w[12],description$(40)
    dim headings$[5],totals[4],receipt[4],vendor[4],report[4]
    dim y0$(4),y1$(32),r0$(5),r1$(32),l0$(28),l1$(20),l[1],line[4]
    dim d0$(28),d1$(32),d[6],difqty[99],diftype$[99],difkey$[99]
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    width=132
    page=0
    l9=59
    l=l9+1
    clock$=""
    when$=sysinfo.system_date$
    headings=5
    done=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    nf$="(Not On File)"
    number=0
    lsdesc$="Serial Nbr"
    dif=0
    x1=15
    x2=12
    x3=12
    ms$="000-"
    if ivs01a.lotser_flag$="L" lsdesc$="Lot Nbr"
    more=1

resize_mask: rem --- Resize masks

    while more
        x=m1+(m2*4)+m3+i[0]+52
        if x<=width break
        call pgmdir$+"adc_sizemask.aon",m1$,m1,10,x1
        call pgmdir$+"adc_sizemask.aon",m2$,m2,9,x2
        call pgmdir$+"adc_sizemask.aon",m3$,m3,6,x3
        x1=x1-1
        x2=x2-1
        x3=x3-1
    wend

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",m0+8,0,1,meter_num,status

rem --- Print positions

    dim h1$(width),h2$(width),qh$(m2*4,"-")
    o[14]=width-m1
    o[13]=o[14]-m3
    o[12]=o[13]-m2
    o[11]=o[12]-m2
    o[10]=o[11]-m2
    o[9]=o[10]-m2
    o[8]=o[9]-3
    o[7]=o[8]-11
    o[6]=o[7]-9
    o[5]=o[6]-9
    o[4]=o[5]-9
    o[1]=4
    o[2]=7
    o[3]=10
    qh$(fncenter(m2*4,10),10)=" Quantity "
    x1$="First"
    x2$="Last"
    if begvend$<>"" x1$=fvendor$
    if endvend$<>"" x2$=tvendor$
    h1$(1)="From Vendor: "+x1$
    h2$(1)="  To Vendor: "+x2$
    x1$="First"
    x2$="Last"
    if begrec$<>"" x1$=begrec$
    if endrec$<>"" x2$=endrec$
    x1$="From Receiver: "+x1$
    x2$="  To Receiver: "+x2$
    x=max(len(x1$),len(x2$))
    h1$(fncenter(width,x))=x1$
    h2$(fncenter(width,x))=x2$
    x1$="First"
    x2$="Last"
    if begdate$<>"" x1$=fndate$(begdate$)
    if enddate$<>"" x2$=fndate$(enddate$)
    x=max(len(x1$),len(x2$))+18
    h1$(width-x)="From Receipt Date: "+x1$
    h2$(width-x)="  To Receipt Date: "+x2$
    headings$[3]=h1$
    headings$[4]=h2$

rem --- Position file

    start$=firm_id$+begvend$
    read (poe03_dev,key=start$,dom=*next)

    while more

        poe03a_key$=key(poe03_dev,end=*break)
        if pos(firm_id$=poe03a_key$)<>1 break
        read record (poe03_dev) poe03a$

rem --- Range tests

        if endvend$<>"" if poe03a_key.vendor_id$>endvend$ break
        if begdate$<>"" if poe03a.recpt_date$<begdate$ continue
        if enddate$<>"" if poe03a.recpt_date$>enddate$ continue
        if begrec$<>"" if poe03a_key.receiver_no$<begrec$ continue
        if endrec$<>"" if poe03a_key.receiver_no$>endrec$ continue
        lines=0
        status=11
        read (poe13_dev,key=poe03a_key$,dom=*next)

update_lines: rem --- See if any line items should be updated

        while more

            poe13a_key$=key(poe13_dev,end=*break)
            if pos(poe03a.firm_id$=poe13a_key$)<>1 break
            read record (poe13_dev) poe13a$
            lines=lines+1
            if poe13a.update_flag$="Y" status=0

        wend

update_line_items: rem --- Any line items to be updated?

        if (lines<>0 or status<>0) continue

header_flds: rem --- Header fields

        dim receipt[4]
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        packlist$=""
        number=number+1
        if cvs(poe03a.packing_list$,2)<>"" packlist$="Packing List: "+poe03a.packing_list$

rem --- Level break?

        if t0$<>poe03a.vendor_id$ gosub vend_brk

rem --- Print header information

        if l+5>l9 gosub report_heading else gosub recpt_subhead

rem --- Position detail file

        read (poe13_dev,key=poe03a_key$,dom=*next)

rem --- Read next detail record

        while more

            dim line[4]
            poe13a_key$=key(poe13_dev,end=*break)
            if pos(poe03a_key.firm_id$=poe13a_key$)<>1 break
            read record (poe13_dev) poe13a$

            if poe13a.update_flag$<>"Y"

                gosub set_variables
                continue

            endif

rem --- Read line code

            if pom02a_key.firm_id$<>firm_id$ if pom02a_key.po_line_code$<>poe13a.po_line_code$

                pom02a_key.firm_id$=firm_id$, pom02a_key.po_line_code$=poe13a.po_line_code$
                pom02a.code_desc$=""
                find record (pom02a_dev,key=pom02a_key$,dom=set_variables) pom02a$
                if dom_flag=1 continue else dom_flag=0

            endif

rem --- Calculate extension

            qty=poe13a.qa_rec_qty
            extension=0
            if pom02a.line_type$="O" qty=1
            precision 2
            extension=poe13a.unit_cost*qty
            precision num(ivs01a.precision$)
            line[0]=poe13a.qty_ordered
            line[1]=poe13a.qa_wip_qty
            line[2]=poe13a.qa_rec_qty
            line[3]=poe13a.qa_rej_qty
            line[4]=extension

rem --- Format remaining fields

            before$=""
            required$=""
            promised$=""
            wo$=""
            if cvs(poe13a.reqd_date$,2) <>"" required$=fndate$(poe13a.reqd_date$)
            if cvs(poe13a.promise_date$,2)<>"" promised$=fndate$(poe13a.promise_date$)
            if cvs(poe13a.not_b4_date$,2)<>"" before$=fndate$(poe13a.not_b4_date$)
            if cvs(poe13a.wo_no$+poe13a.sequence_no$,2)<>"" wo$=poe13a.wo_no$+"-"+poe13a.sequence_no$
            pow13a_key$=poe13a_key.firm_id$
            write record (pow13_dev,key=pow13a_key$) pow13a$

rem --- Branch based on line code

            action=pos(y1$(21,1)="SNVMO")
            std_line=1
            non_stock_line=2
            vendor_part_no_line=3
            msg_line=4
            other_type_line=5

            switch action

                case std_line;   rem --- Standard line

                    ivm01a_key$=firm_id$+w3$(3)
                    ivm01a$=""
                    description$(1)=nf$
                    find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
                    description$(1)=ivm01a.description$
                    if l+2>l9 gosub report_heading
                    print (printer_dev) @(o[0]),poe13a_key.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[3]),poe13a.item_id$,
:                                       @(o[4]),before$,
:                                       @(o[5]),required$,
:                                       @(o[6]),promised$,
:                                       @(o[7]),wo$,
:                                       @(o[8]),poe13a.unit_measure$,
:                                       @(o[9]),poe13a.qty_ordered:m2$,
:                                       @(o[10]),poe13a.qty_ordered:m2$,
:                                       @(o[11]),poe13a.qa_rec_qty:m2$,
:                                       @(o[12]),poe13a.qa_rej_qty:m2$,
:                                       @(o[13]),poe13a.unit_cost:m3$,
:                                       @(o[14]),extension:m1$
                    print (printer_dev) @(o[3]),description$
                    l=l+2
                    break

                case non_stock_line;     rem --- Non-stock line

                    if l+2>l9 gosub report_heading
                    print (printer_dev) @(o[0]),poe13a_key.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[3]),poe13a.item_id$,
:                                       @(o[4]),code$,
:                                       @(o[8]),poe13a.unit_measure$,
:                                       @(o[9]),poe13a.qty_ordered:m2$,
:                                       @(o[10]),poe13a.qty_ordered:m2$,
:                                       @(o[11]),poe13a.qa_rec_qty:m2$,
:                                       @(o[12]),poe13a.qa_rej_qty:m2$,
:                                       @(o[13]),poe13a.unit_cost:m3$,
:                                       @(o[14]),extension:m1$
                    print (printer_dev) @(o[3]),poe13a.order_memo$
                    l=l+2
                    break

                case vendor_part_no_line;    rem --- Vendor part number line

                    if l+1>l9 gosub report_heading
                    print (printer_dev) @(o[0]),poe13a_key.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[3]),poe13a.item_id$
                            l=l+1
                    break

                case msg_line;   rem --- Message line

                     if l+1>l9 gosub report_heading
                    print (printer_dev) @(o[0]),poe13a_key.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[3]),poe13a.order_memo$
                    l=l+1
                    break

                case other_type_line;    rem --- Other type line

                    if l+2>l9 gosub report_heading
                    print (printer_dev) @(o[0]),poe13a_key.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[13]),poe13a.unit_cost:m3$,
:                                       @(o[14]),extension:m1$
                    print (printer_dev) @(o[3]),poe13a.order_memo$
                    l=l+2
                    break

                case default
                    continue

            swend

rem --- Lotted/Serialized?

            if ls$<>"N"

                if pom02a.line_type$="S"

                    if (ivm01a.lotser_item$ <>"Y" or ivm01a.inventoried$ <> "Y")
                   
                        needed=0
                        lastseq=0
                        p13_key$=poe13a.firm_id$+poe13a.vendor_id$+poe13a.receiver_no$+
:                       poe13a.po_no$+poe13a.po_line_no$
                        read (poe23_dev,key=p13_key$,dom=*next)

rem --- Read next lot/serial detail record

                        while more

                            poe23a_key$=key(poe23_dev,end=*break)
                            if pos(p13_key$=poe23a_key$)<>1 break
                            read record (poe23_dev) poe23a$
                            precision 2
                            extension=poe23a.qty_received*poe23a.unit_cost
                            precision num(poe23a.precision$)

rem --- Print detail line

                            if l+1>l9 gosub report_heading
                            print (printer_dev) @(o[3]),lsdesc$," ",poe23a.sequence_no$," ",poe23a.lotser_no$,
:                                               @(o[10]),poe23a.qty_received:m2$,
:                                               @(o[11]),poe23a.qty_received:m2$,
:                                               @(o[13]),poe23a.unit_cost:m3$,
:                                               @(o[14]),extension:m1$
                            l=l+1
                            needed=needed+poe23a.qty_received
                            lastseq=num(poe23a.sequence_no$)

                        wend

rem --- Enough lot/serial numbers?

                        if needed<>poe13a.qa_rec_qty

                            type$="L"
                            qty=poe13a.qa_rec_qty-needed
                            if needed<poe13a.qa_rec_qty xlimit=qty
                            if ivs01a.lotser_flag$="L" xlimit=1
                            if needed>poe13a.qa_rec_qty xlimit=0
                            gosub store_diff

                        endif

                    endif

                endif

            endif

pos_rej_det: rem --- Position rejection detail file

            needed=0
            lastseq=0

            if poe13a.qa_rej_qty=0

                gosub set_variables
                continue

            endif

            p13_key$=poe13a.firm_id$+poe13a.vendor_id$+poe13a.receiver_no$+
:                               poe13a.po_no$+poe13a.po_line_no$
            read (poe63_dev,key=p13_key$,dom=*next)

read_next: rem --- Read next rejection detail

            while more

                poe63a_key$=key(poe63_dev,end=*break)
                if pos(p13_key$=poe63a_key$)<>1 break
                read record (poe63_dev) poe63a$
                pom03a_key$=firm_id$+poe63a.reject_code$
                pom03a$=nf$
                lastseq=num(poe63a_key.sequence_no$)
                find record (pom03a_dev,key=pom03a_key$,dom=*next) pom03a$
                precision 2
                extension=d[0]*poe13a.unit_cost
                precision num(poe13a.precision$)

rem --- Print rejection detail

                dim ra$(22),inspector$(9)
                if cvs(poe63a.user_id$,2)<>"" inspector$(1)="Insp: "+ poe63a.operator_id$
                if cvs(poe63a.ra_no$,2)<>"" ra$(1)="RA #: "+poe63a.ra_no$
                if l+1>l9 gosub report_heading
                print (printer_dev) @(o[3]),poe63a.sequence_no$,
:                                   " ",pom03a.reject_code$," ",
:                                   pom03a.description$," ",ra$,
:                                   " ",inspector$,
:                                   @(o[12]),poe63a.qty_reject:m2$,
:                                   @(o[13]),poe13a.unit_cost:m3$,
:                                   @(o[14]),extension:m1$
                l=l+1
                needed=needed+poe63a.qty_reject

            wend

rem --- Loop back for next detail record

            if needed=poe13a.qa_rej_qty

                gosub set_variables
                continue

            endif

            type$="R"
            qty=1
            xlimit=1
            if needed>poe13a.qa_rej_qty xlimit=0
            gosub store_diff

            gosub set_variables

        wend;   rem --- Loop back for next detail

print_rec_totals: rem --- Print receiver totals

        if l+2>l9 gosub report_heading
        print (printer_dev)""
        totals$="Total For Receiver # "+poe03a_key.receiver_no$
        totals[all]=receipt[all]
        l=l+1
        gosub print_totals

    wend

done: rem --- All done

    done=1
    gosub vend_brk
    totals$="Total For Register"
    totals[all]=report[all]
    gosub print_totals

    if dif<>0
    
        if l+4>l9 gosub report_heading
        print (printer_dev)""
        print (printer_dev)"Lot/Serial Number And Rejection Code Differences:"
        print (printer_dev)""
        l=l+3

rem --- Print list of lines with lot/serial number differences

        for x=1 to dif

            k$=difkey$[x]
            qty=difqty[x]
            apm01a_key$=k$(1,8)
            apm01a$=nf$
            find record (apm01a_dev,key=apm01a_key$,dom=*next) apm01a$
            x$="Is Missing "+str(qty)
            lsdesc$=" Lot/Serial Number(s)"
            if qty<0 x$="Has "+str(abs(qty))+" Too Many"
            if diftype$[x]="R" lsdesc$=" Rejection Code Entries"
            if l+1>l9 gosub report_heading
            print (printer_dev) "Vendor ",fnmask$(apm01a_key.vendor_id$,m0$),
:                               " ",apm01a.vendor_name$,
:                               " Receiver # ",k$(9,7),
:                               "/PO # ",k$(16,7),
:                               "-",k$(23,3),
:                               " ",x$,lsdesc$
            l=l+1

        next x

rem --- Notify user of errors

        dim message$[2]
        message$[0]="Errors Were Reported During The Generation Of The QA Receipt"
        message$[1]="Register. The Update Will Not Be Run. Review The Register,"
        message$[2]="Correct The Errors And Reprint (<Enter>=Continue)"
        call pgmdir$+"adc_stdmessage.aon",2,message$[all],2,22,-1,v$,v3
        if v$<>"SPECIAL" goto std_exit

    endif    

run_next: rem --- Run next overlay

    if number=0 goto std_exit
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,meter_num,status
    run pgmdir$+"pou_ca.bbx"

report_heading: rem --- Report Heading

    l=headings+4
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[4]),"Not",
:                       @(o[5]),"Date",
:                       @(o[6]),"Date",
:                       @(o[9]+m2-9),qh$,
:                       @(o[13]+m3-5),"Unit"
    print (printer_dev) @(o[0]),"Seq",
:                       @(o[1]),"Cd",
:                       @(o[2]),"Wh",
:                       @(o[3]),"Item",
:                       @(o[4]),"Before",
:                       @(o[5]),"Required",
:                       @(o[6]),"Promised",
:                       @(o[7]),"Work Order",
:                       @(o[8]),"UM",
:                       @(o[9]+m2-9),"Ordered",
:                       @(o[10]+m2-9),"Received",
:                       @(o[11]+m2-9),"Approved",
:                       @(o[12]+m2-9),"Rejected",
:                       @(o[13]+m3-5),"Cost",
:                       @(o[14]+m1-10),"Extension"

    if done=0 gosub recpt_subhead
    return

recpt_subhead: rem --- Receipt subheading

    print (printer_dev) ""
    print (printer_dev) "Vendor: ",vendor$,@(48),"Rec #: ",poe03a_key$,
:   "  PO #:",poe03a.po_no$,@(78),packlist$,@(100),
:   "Receipt Date: ",fndate$(poe03a.recpt_date$)
    print (printer_dev) ""
    let l=l+3
    return

vend_brk: rem --- Vendor break

    if t0$<>""

        let totals$="Total For "+vendor$,totals[all]=vendor[all]
        gosub print_totals

    endif

brnch1:

    if done return
    dim vendor[4]
    let t0$=poe03a_key.vendor_id$,apm01a_key.firm_id$=firm_id$+t0$,apm01a.vendor_name$=nf$
    find record (apm01a_dev,key=apm01a_key$,dom=*next) apm01a$
    let vendor$=fnmask$(apm01a_key.vendor_id$,m0$)+" "+cvs(apm01a.vendor_name$,2)
    if pagebreak$="Y" l=l9+1
    return

rem --- Store lot/serial or rejection code difference

store_diff:

    let dif=dif+1
    if dif>99 return
    let difkey$[dif]=poe13a.firm_id$+poe13a.vendor_id$+poe13a.receiver_no$+poe13a.po_no$+poe13a.po_line_no$,diftype$[dif]=type$,difqty[dif]=qty
    if xlimit=0 return
    for x=1 to xlimit
        if l+1>l9 gosub report_heading
        let l=l+1,lastseq=lastseq+1
        if type$="L" print (printer_dev)@(o[3]),lsdesc$," ",lastseq:ms$,fill(i[2],"_")
        if type$="R" print (printer_dev)@(o[3]),lastseq:ms$,"___ ",fill(30,"_")
    next x
    return

rem --- Print totals

print_totals:

    if l+1>l9 gosub report_heading
    if len(totals$)>o[6] totals$=totals$(1,o[6])
    print (printer_dev) @(o[9]-len(totals$)),totals$,
:                       @(o[9]),totals[0]:m2$,
:                       @(o[10]),totals[1]:m2$,
:                       @(o[11]),totals[2]:m2$,
:                       @(o[12]),totals[3]:m2$,
:                       @(o[14]),totals[4]:m1$
    let l=l+1
    return

rem --- Subroutine1

set_variables:

    receipt[all]=receipt[all]+line[all]
    vendor[all]=vendor[all]+line[all]
    report[all]=report[all]+line[all]
    dom_flag=1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
