rem --- Purchase Order Status Report (Print Overlay)
rem --- Program por_postatus_o1 v8.0.0 17Jul2007 (por_lb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:49:04)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Init Data

    precision ivprecision
    dim vendor$(6)
    grandtot=0
    printvtot$="N"
    initializing$="Y"; rem "Init files 1st time through
    more=1

rem --- Headings and print positions

    headings=5
    dim headings$[headings],o[13]
    width=132
    page=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads

    action=pos(printseq$="PAV")
    purch_order=1
    alt_sequence=2
    by_vendor=3

    switch action

        case purch_order
            headings$[1]=headings$[1]+" By Purchase Order"
            break
        case alt_sequence
            headings$[1]=headings$[1]+" By Alternate Sequence"
            break
        case by_vendor
            headings$[1]=headings$[1]+" By Vendor"
            break
        case default
            goto done
            break

    swend


rem --- Headings and print positions

     dim columns$[12,10]
    columns = 13
    columns$[0,0]="Seq",                columns$[0,1]="C",columns$[0,2]="4"
    columns$[1,0]="Cd",                 columns$[1,1]="C",columns$[1,2]="8"
    columns$[2,0]="Wh",                 columns$[2,1]="C",columns$[2,2]="8"
    columns$[3,0]="Item",               columns$[3,1]="C",columns$[3,2]="31"
    columns$[4,0]="UM ",                columns$[4,1]="C",columns$[4,2]="3"
    columns$[5,0]="Date^Required",      columns$[5,1]="C",columns$[5,2]="8"
    columns$[6,0]="Qty^Ordered",        columns$[6,1]="N",columns$[6,2]=str(len(m2$)),columns$[6,3]=m2$
    columns$[7,0]="Qty In QA",          columns$[7,1]="N",columns$[7,2]=str(len(m2$)),columns$[7,3]=m2$
    columns$[8,0]="Qty^Received",       columns$[8,1]="N",columns$[8,2]=str(len(m2$)); rem *** ,columns$[8,3]=m2$
    columns$[9,0]="Qty^Involved",       columns$[9,1]="N",columns$[9,2]=str(len(m2$)),columns$[9,3]=m2$
    columns$[10,0]="Balance Due",       columns$[10,1]="N",columns$[10,2]=str(max(len(m2$),16)),columns$[10,3]=m2$
    columns$[11,0]="Unit Cost",         columns$[11,1]="N",columns$[11,2]=str(len(m3$))
    columns$[12,0]="Extension",         columns$[12,1]="N",columns$[12,2]=str(len(m1$))

  positions:

    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+3
    o[4]=o[3]+itemlen+1
    o[5]=o[4]+3
    o[6]=o[5]+9
    o[7]=o[6]+m2+1
    o[8]=o[7]+m2+1
    o[9]=o[8]+m2+1
    o[10]=o[9]+m2+1
    o[11]=o[10]+m2+1
    o[12]=o[11]+m3+1

    if o[12]+15>=width
        o[12]=width-m1
        o[11]=o[12]-m3
        o[10]=o[11]-m2
        o[9]=o[10]-m2
        o[8]=o[9]-m2
        o[7]=o[8]-m2
        o[6]=o[7]-m2
    endif

rem --- Get key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_POHDR","PRIMARY",poe02a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_POHDR","ALT_KEY_01",poe02a_key_alttpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_PODET","PRIMARY",poe12a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","ALT_KEY_02",apm01a_key_tpl$,rd_table_chans$[all],status$

rem --- Progress Bar

    call pgmdir$+"adc_progress.aon","N","","","","",0,poe12_dev,1,meter_num,status

rem --- Sorts

    while more

        action=pos(printseq$="PAV")
        sortbypo=1
        alt_sequence=2
        by_vendor=3

        switch action

            case purch_order;    rem --- Sort by Purchase Order

                dim poe02a_key$:poe02a_key_pritpl$
                if initializing$<>"N"
                    initializing$="N"
            
                    keynum=0

                    poe02a_key$=firm_id$+pofrom$
                    read (poe02_dev,key=poe02a_key$,knum=keynum,dir=0,dom=*next)
                endif

                poe02a_key$=key(poe02_dev,end=done)

                break

            case alt_sequence;   rem --- Find a POE02 record using alt seq

                dim apm01a_key$:apm01a_key_tpl$
                dim poe02a_key$:poe02a_key_alttpl$

                if initializing$<>"N"
                    initializing$="N"
                    apm01a_key$=firm_id$+altfrom$

                    keynum=1

                    read (apm01_dev2,knum=2,key=apm01a_key$,dom=*next)
                endif

                while more

                    apm01a_key$=key(apm01_dev2,knum=2,end=done)
                    if apm01a_key.firm_id$<>firm_id$ goto done
                    if altthru$<>"" if apm01a_key.alt_sequence$(1,len(altthru$))>altthru$ goto done
                    apm01b_key$=apm01a_key.firm_id$+apm01a_key.vendor_id$
                    read (apm01_dev2,knum=2,key=apm01a_key$); rem "Move ptr

                    read (poe02_dev,key=apm01b_key$,knum=keynum,dom=*next)
                    poe02a_key$=key(poe02_dev,knum=keynum,end=*continue)
                    if poe02a_key.firm_id$+poe02a_key.vendor_id$=apm01b_key$ break

                wend

                break

            case by_vendor;  rem --- standard sequence

                dim poe02a_key$:poe02a_key_alttpl$

                if initializing$<>"N"
                    initializing$="N"
                    poe02a_key$=firm_id$+vendfrom$
                    if vendfrom$<>"" then poe02a_key$=firm_id$+vendfrom$+pofrom$

                    keynum=1

                    read (poe02_dev,knum=keynum,key=vend_key$,dir=0,dom=*next)

                endif
                
                poe02a_key$=key(poe02_dev,knum=keynum,end=done)

                break


rem --- Read through PO headers
              
            case default

                more=0
                break

        swend

        if poe02a_key.firm_id$<>firm_id$ then more=0
        if !more then break

        while more

            read record (poe02_dev,key=poe02a_key$,knum=keynum) poe02a$

rem --- Test Ranges

            headrecprinted$="N"
            if pofrom$<>"" and poe02a.po_no$<pofrom$ continue
            if pothru$<>"" and poe02a.po_no$>pothru$ continue 
            if vendfrom$<>"" and poe02a.vendor_id$<vendfrom$ continue
            if vendthru$<>"" and poe02a.vendor_id$>vendthru$ continue
            if whse$<>"ALL" and poe02a.warehouse_id$<>whse$ continue

rem --- Header passed tests

                gosub testbreaks
                headrecprinted$="Y"

rem --- If any detail have valid whse, print line (& head if needed)

                dim poe12a_key$:poe12a_key_tpl$
                p12_key$=poe02a.firm_id$+poe02a.po_no$
                read (poe12_dev,key=p12_key$,dom=*next)

rem --- PO Detail loop

                while more

                    poe12a_key$=key(poe12_dev,end=*break)
                    if poe12a_key.firm_id$+poe12a_key.po_no$<>p12_key$ break
                    read record (poe12_dev,key=poe12a_key$) poe12a$
                    rem *** if whse$="ALL" or poe02a.warehouse_id$=whse$ then continue

rem --- Detail passed, so print header if nec & print detail

                    call pgmdir$+"adc_progress.aon","S","","","","",0,poe12_dev,1,meter_num,status
                    if headrecprinted$="Y"
                        gosub testbreaks
                        headrecprinted$="Y"
                    endif

                    gosub printdetail

rem --- Accumulate totals; then get next detail

                    potot=potot+extension
                    vendtot=vendtot+extension
                    grandtot=grandtot+extension
                    extension=0
                    extension$=""

                wend

rem --- Done w/detail for this PO

done_details: 
            if headrecprinted$="Y" then gosub pototals

rem --- Loop up for next header record via sort files

             if printseq$<>"A" break

            rem --- See if there's another PO for vend before getting next alt seq

            poe02a_key$=key(poe02_dev,knum=keynum,end=*break)
            if poe02a_key.vendor_id$=vendor$ then k$=poe02a_key$; continue else break

          wend

      wend

done: rem --- All Done

    if printseq$<>"P" then gosub vendtotals
    TotVect!.addItem(str(OutVect!.size()/columns))
    xwk = fnblank(10)
    OutVect!.addItem("Total For Report")
    xwk = fnblank(1)
    OutVect!.addItem(str(grandtot:m1$))

    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8)
    whse_detail$=poe12a.warehouse_id$
    itemnum$=poe12a.item_id$
    memo$=poe12a.order_memo$
    unitmeas$=poe12a.unit_measure$
    if poe12a.reqd_date$<>fill(8) datereq$=fndate$(poe12a.reqd_date$)
    qtyord$=str(poe12a.qty_ordered:m2$)
    qtyrec$=str(poe12a.qty_received:m2$)
    qtyinqa$=str(poe12a.qa_wip_qty:m2$)
    qtyinv$=str(poe12a.qty_invoiced:m2$)
    baldue$=str(poe12a.qty_ordered-poe12a.qty_received:m2$)
    unitcost$=str(poe12a.unit_cost:m3$)

rem --- Get Line Type

    linetype$="N"
    p02_key$=poe12a.firm_id$+poe12a.po_line_code$
    find record (pom02a_dev,key=p02_key$,dom=brnch2) pom02a$
    linetype$=pom02a.line_type$

brnch2: rem --- Get Item Desc for S and N type lines

    if linetype$="N" 
        itemdesc$=memo$
    else
        itemdesc$=""
        i01_key$=firm_id$+poe12a.item_id$
        find record (ivm01a_dev,key=i01_key$,dom=brnch3) ivm01a$
        itemdesc$=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])
    endif

brnch3: rem --- Get extension

    gosub calc_extension

rem --- Format common part of print line

    dim pline$(132)
    pline$(1)=poe12a.po_line_no$+" "+poe12a.po_line_code$+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

    if pos(linetype$="MOV")<>0

        if linetype$="V" pline$(o[3]+1)=memo$(1,20) else pline$(o[3]+1)=memo$
        if linetype$="O" pline$(o[11]+1,m3)=unitcost$,pline$(o[12]+1)=extension$

        OutVect!.addItem(poe12a.po_line_no$)
        OutVect!.addItem(poe12a.po_line_code$)
        OutVect!.addItem(whse_detail$)

        if linetype$="V" then OutVect!.addItem(memo$(1,20)) else OutVect!.addItem(memo$)
        xwk = fnblank(7)
        if linetype$="O" then 
            OutVect!.addItem(unitcost$)
            OutVect!.addItem(extension$)
        else
            xwk = fnblank(2)
        endif


    else

rem --- Print Line Types 'S' & 'N'

        if pos(linetype$="SN")<>0

            rem *** pline$(o[3]+1)=cvs(itemnum$,2)
            rem *** pline$(o[4]+1)=unitmeas$
            rem *** pline$(o[5]+1)=datereq$

            rem ***  xwk = fnblank(13)

            OutVect!.addItem(poe12a.po_line_no$)
            OutVect!.addItem(poe12a.po_line_code$)
            OutVect!.addItem(whse_detail$)

            OutVect!.addItem(cvs(itemnum$,2) + " " + itemdesc$)
            OutVect!.addItem(unitmeas$)
            OutVect!.addItem(datereq$)

            OutVect!.addItem(qtyord$)
            OutVect!.addItem(qtyinqa$)
            OutVect!.addItem(qtyrec$)
            OutVect!.addItem(qtyinv$)
            OutVect!.addItem(baldue$)
            OutVect!.addItem(unitcost$)
            OutVect!.addItem(extension$)

            endif

        endif

    return

rem new  report_heading: rem --- Report Heading


assignheads: rem --- Assign headings variables

    if printseq$="A" if altfrom$="" vendf$="First" else vendf$=altfrom$
    if printseq$="A" if altthru$="" vendt$="Last" else vendt$=altthru$
    if printseq$<>"A"
        if vendfrom$="" vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
        if vendthru$="" vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    endif
    if pofrom$="" pof$="First" else pof$=pofrom$
    if pothru$="" pot$="Last" else pot$=pothru$

        if whse$="ALL" then whsepagehead$= "For All Warehouse" else whsepagehead$="For Warehouse "+whse$+" "+cvs(whsename$,2)
    headings$[4] = whsepagehead$

    headings$[2]="From Vendor: "+vendf$+" To "+vendt$
    headings$[3]="From Purchase Order: "+pof$+" Thru "+pot$

    return

testbreaks: rem --- Test for Breaks

    if poe02a.vendor_id$<>vendor$
        if printvtot$="Y" and printseq$<>"P" gosub vendtotals
        gosub newvendor
        if printseq$="P"
            gosub newpo
        else 
            return
        endif
    endif

    if poe02a.po_no$<>ponum$ gosub newpo
    return

newvendor: rem --- New Vendor

    dim contact$(20)
    vendtot=0
    vendname$="Not On File"
    vendor$=poe02a.vendor_id$
    printvtot$="Y"
    a01_key$=firm_id$+vendor$
    find record (apm01a_dev,key=a01_key$,dom=brnch4) apm01a$
    vendname$=apm01a.vendor_name$
    contact$=apm01a.contact_name$
    call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(apm01a.phone_no$,2),"",phone_mask$
    phone$=cvs(apm01a.phone_no$,2)
    phone$=str(phone$:phone_mask$,err=*next)

brnch4:
    return

newpo: rem --- New PO

    potot=0
    ponum$=poe02a.po_no$
    apm10c.code_desc$="Not On File"
    a10_key$=firm_id$+"C"+poe02a.ap_terms_code$
    find record (apm10c_dev,key=a10_key$,dom=brnch5) apm10c$
    termsdesc$=apm10c.code_desc$

brnch5:

    dim dateord$(8),dateprom$(8)
    if poe02a.ord_date$<>fill(8) dateord$=fndate$(poe02a.ord_date$)
    if poe02a.promise_date$<>fill(8) dateprom$=fndate$(poe02a.promise_date$)

     if printseq$<>"P" then
        xwk = fnblank(1)
        OutVect!.addItem("Vendor" + $00$ + "B" )
        OutVect!.addItem(str(fnmask$(vendor$(1,vendlen),vendomask$)) + $00$ + "B" )
        OutVect!.addItem(vendname$ + $00$ + "B" )
        xwk = fnblank(1)

        OutVect!.addItem("Contact")
        OutVect!.addItem(contact$)
        OutVect!.addItem("PO#:" + $00$ + "B" )
        OutVect!.addItem(ponum$ + $00$ + "B" )
        OutVect!.addItem("Ordered")
        OutVect!.addItem(dateord$)
        OutVect!.addItem("Ack By ")
        OutVect!.addItem(poe02a.acknowledge$)
        xwk = fnblank(5)

               OutVect!.addItem("Phone")
        OutVect!.addItem(phone$)
        xwk = fnblank(2)

               OutVect!.addItem("Promised" + dateprom$)
        OutVect!.addItem(dateprom$)
        OutVect!.addItem("Terms: " + poe02a.ap_terms_code$)
        OutVect!.addItem(termsdesc$)

           else
        xwk = fnblank(13)

        OutVect!.addItem("PO#:" + $00$ + "B" )
        OutVect!.addItem(ponum$ + $00$ + "B" )
        OutVect!.addItem("Ordered")
        OutVect!.addItem(dateord$+" Vendor "+str(fnmask$(vendor$(1,vendlen),vendomask$))+" "+vendname$ + $00$ + "B" )

        xwk = fnblank(3)

                OutVect!.addItem("Contact")
        OutVect!.addItem(contact$)
        OutVect!.addItem("Ack By  ")
        OutVect!.addItem(poe02a.acknowledge$)
        xwk = fnblank(3)
        OutVect!.addItem("Promised  ")
        OutVect!.addItem(dateprom$)
        xwk = fnblank(4)
        OutVect!.addItem("Phone")
        OutVect!.addItem(phone$)
        OutVect!.addItem("Terms")
        OutVect!.addItem(poe02a.ap_terms_code$)
        OutVect!.addItem(termsdesc$)
        xwk = fnblank(1)
    endif


    return

vendtotals: rem --- Print Vendor total

    rem --- xwk = fnblank(13)
    TotVect!.addItem(str(OutVect!.size()/columns))
    xwk = fnblank(10)
    OutVect!.addItem("Total For Vendor" + $00$ + "B" )
    OutVect!.addItem(str(fnmask$(vendor$(1,vendlen),vendomask$)) + $00$ + "B" )
    OutVect!.addItem(str(vendtot:m1$) + $00$ + "B" )

    return

rem --- Print Purchase Order total

pototals:
    rem --- xwk = fnblank(13)
    TotVect!.addItem(str(OutVect!.size()/columns))
    xwk = fnblank(10)
    OutVect!.addItem("Total For PO#" + $00$ + "B" )
    OutVect!.addItem(ponum$ + $00$ + "B" )
    OutVect!.addItem(str(potot:m1$) + $00$ + "B" )
    return

rem --- Calc extension for S, N and O types

calc_extension:

    if pos(linetype$="SNO")<>0
        let qty=poe12a.qty_ordered-poe12a.qty_received
        if linetype$="O" qty=1
        precision 2
        let extension=poe12a.unit_cost*qty,extension$=str(extension:m1$)
        precision ivprecision
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

       def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end