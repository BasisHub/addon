rem --- Quality Assurance Receipt Register (Input Overlay)
rem --- Program por_ca v8.0.0 06Jul2007 (por_ca)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:05:22)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        seterr std_error
        setesc std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=22,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="apm-01",ids$[1]="APM_VENDMAST"
        files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
        files$[3]="poe-03",ids$[3]="POE_QAHDR"
        files$[4]="poe-04",ids$[4]="POE_RECHDR"
        files$[5]="poe-13",ids$[5]="POE_QADET"
        files$[6]="poe-14",ids$[6]="POE_RECDET"
        files$[7]="poe-23",ids$[7]="POE_QALSDET"
        files$[8]="poe-24",ids$[8]="POE_RECLSDET"
        files$[9]="poe-33",ids$[9]="POE_QABYPO"
        files$[10]="poe-34",ids$[10]="POE_RECBYPO"
        files$[11]="poe-43",ids$[11]="POE_QABYITEM"
        files$[12]="poe-44",ids$[12]="POE_RECBYITM"
        files$[13]="poe-53",ids$[13]="POE_POBYQA"
        files$[14]="poe-54",ids$[14]="POE_POBYREC"
        files$[15]="poe-63",ids$[15]="POE_QAREJDET"
        files$[16]="pom-02",ids$[16]="POC_LINECODE"
        files$[17]="pom-03",ids$[17]="POC_REJCTCOD"
        files$[18]="pot-03",ids$[18]="POT_QAREJHST"
        files$[19]="pow-13",ids$[19]="POW_QABYVEN"
        files$[20]="aps_params",ids$[20]="APS_PARAMS"
        files$[21]="ivs_params",ids$[21]="IVS_PARAMS"
        files$[22]="pos_params",ids$[22]="POS_PARAMS"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        apm01_dev=channels[1]
        ivm01_dev=channels[2]
        poe03_dev=channels[3]
        poe04_dev=channels[4]
        poe13_dev=channels[5]
        poe14_dev=channels[6]
        poe23_dev=channels[7]
        poe24_dev=channels[8]
        poe33_dev=channels[9]
        poe34_dev=channels[10]
        poe43_dev=channels[11]
        poe44_dev=channels[12]
        poe53_dev=channels[13]
        poe54_dev=channels[14]
        poe63_dev=channels[15]
        pom02_dev=channels[16]
        pom03_dev=channels[17]
        pot03_dev=channels[18]
        pow13_dev=channels[19]
        aps01a_dev=channels[20]
        ivs01a_dev=channels[21]
        pos01a_dev=channels[22]

rem --- Dimension string templates

    dim apm01a$:templates$[1],ivm01a$:templates$[2],poe03a$:templates$[3],
:       poe04a$:templates$[4],poe13a$:templates$[5],poe14a$:templates$[6],
:       poe23a$:templates$[7],poe24a$:templates$[8],poe33a$:templates$[9],
:       poe34a$:templates$[10],poe43a$:templates$[11],poe44a$:templates$[12],
:       poe53a$:templates$[13],poe54a$:templates$[14],poe63a$:templates$[15],
:       pom02a$:templates$[16],pom03a$:templates$[17],pot03a$:templates$[18],
:       pow13a$:templates$[19],aps01a$:templates$[20],ivs01a$:templates$[21],
:       pos01a$:templates$[22]

rem --- Assign form input values to local variables

        begvend$=option!.getOptionData("vendor_id_1")
        endvend$=option!.getOptionData("vendor_id_2")
        begdate$=option!.getOptionData("receipt_date_1")
        enddate$=option!.getOptionData("receipt_date_2")
        begrec$=option!.getOptionData("receiver_no_1")
        endrec$=option!.getOptionData("receiver_no_2")
        pgbreak$=option!.getOptionData("page_break")

rem --- Retrieve parameter records

        aps01a_key$=firm_id$+"AP00"
        find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

        dim i[7]
        n2$="PO"
        ap$="N"
        ar$="N"
        sf$="N"
        ls$="N"
        lf$="N"
        find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
        find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vendomask$,0,vendlen
        i[0]=ivs01a.item_id_len
        i[1]=ivs01a.item_id_len; rem why twice?
        i[2]=ivs01a.ls_no_len
        i[3]=num(ivs01a.desc_len_01$)
        i[4]=num(ivs01a.desc_len_02$)
        i[5]=num(ivs01a.desc_len_03$)
        i[6]=ivs01a.vendor_prd_len
rem    i[7]=fnyy_year(ivs01a.current_year$)
        i[7]=num(ivs01a.current_year$)
        if pos(ivs01a.lotser_flag$="LS")>0 ls$="Y"
        if pos(ivs01a.lifofifo$="LF")>0 lf$="Y"

    rem --- Initializations

rem    dim b0$(8),b1$(30)
        m0=len(m0$)
        begvend$=""
        endvend$=""
        begdate$=""
        enddate$=""
        begrec$=""
        endrec$=""
        pagebreak$="N"
        fvendor$=""
        tvendor$=""

rem --- Run report overlay

        run pgmdir$+"por_qarecptreg_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
