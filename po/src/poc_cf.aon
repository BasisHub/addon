rem --- Calendar Maintenance
rem --- Program poc_cf v8.0.0 20Dec2007 (poc_cf)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/20/2007 04:41:36)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    enter filename$,status

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps-01a",ids$[1]=""
    files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
    files$[3]="pom-01",ids$[3]="POM_CALENDAR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01a_dev=channels[1]
    ivs01a_dev=channels[2]
    pom01_dev=channels[3]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2],pom01a$:templates$[3]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open/Lock Files

    files=2
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]=filename$
    call pgmdir$+"adc_fileopen.aon",1,1,2,files$[all],options$[all],channels[all],batch,status
    if status then goto std_exit
    sys01_dev=channels[1]
    pom01_dev=channels[2]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=sys01t.firm_id$

rem --- Init Data

    more=1
    dim a0$(6),a1$(31),l[12]
    month=num(sys01t.current_date$(3,2))
    year=fnyy_year(sys01t.current_date$(18,2))
    days$="Sunday   Monday   Tuesday  WednesdayThursday Friday   Saturday "
    codes$="           Work Day  Closed    Holiday  "
    l[1]=31
    l[2]=28,l[3]=31,l[4]=30,l[5]=31,l[6]=30
    l[7]=31
    l[8]=31,l[9]=30,l[10]=31,l[11]=30,l[12]=31
    rarrow=32
    rarrow=num(stbl("+RARROW",err=*next),err=*next)
    larrow=31
    larrow=num(stbl("+LARROW",err=*next),err=*next)
    pgdn=38
    pgdn=num(stbl("+PGDN",err=*next),err=*next)
    darrow=34
    darrow=num(stbl("+DARROW",err=*next),err=*next)
    pgup=37
    pgup=num(stbl("+PGUP",err=*next),err=*next)
    count=1
    value=1
    calc=1

rem --- Background

    for x=4 to 10 step 2
        call pgmdir$+"syc_wc.bbx",1,0,80,0,0,x,0
    next x
    print 'sb',@(9,3),"First Day Currently Scheduled:",@(10,4),"Last Day Currently Scheduled:",@(33,5),"Month:",@(34,6),"Year:",'sf',

rem --- Get First Day Scheduled

    call pgmdir$+"poc_ce.bbx",pom01_dev,firm_id$,begdate$,enddate$,status
    v1$="None"
    v2$="None"
    if begdate$<>"" then let v1$=fndate$(begdate$),v2$=fndate$(enddate$)

rem --- Check for gaps in existing schedule

    gosub disp_calendar

month_to_change: rem --- Month To Change

    while more

        v4$="Enter The Month To Change"
        v0$="N"
        v1$="KEC",v2$=str(month),v3$="0#",v0=2,v1=40,v2=5,control_id=3004
        on v3 goto label1,month_to_change,month_to_change,month_to_change,label4,label1,label4

    label1:

        if !(v<1 or v>12)
            month=v
            print @(v1,v2),v:"#0",
            break
        endif
            
    wend

label2: rem --- Year To Change

    v4$="Enter The Year To Change"
    v0$="D"
    v1$="KECY",v2$=fnyear_yy21$(year),v3$="",v0=2,v1=40,v2=6,control_id=3005
    on v3 goto label3,label2,month_to_change,label2,label4,label3,label4

label3:

    year=fnyy_year(v$)
    print @(v1,v2),fnyear_yy$(year),'cl',

label4: rem --- Retrieve record

    year$=fnyear_yy21$(year)
    month$=str(month:"00")
    pom01a.firm_id$=firm_id$
    pom01a.year$=year$
    pom01a.month$=month$
    find record (pom01_dev,key=pom01a.firm_id$+pom01a.year$+pom01a.month$,dom=new_record) pom01a$

correct: rem --- Correct?

    call pgmdir$+"adc_yesno.aon",1,"Is The Above Information Correct",2,v$,v3
    on v3 goto label5,correct,correct,correct,std_exit,label5,std_exit

label5:

    on pos(v$="YN") goto correct,create_main_window,month_to_change

new_record: rem --- New record?

    call pgmdir$+"adc_yesno.aon",1,"No Calendar Exists For "+month$+"/"+fnyy$(year$)+". Create One",2,v$,v3
    on v3 goto label7,new_record,new_record,new_record,std_exit,label7,std_exit

label7:

    on pos(v$="YN") goto new_record,init_new_record,month_to_change

init_new_record: rem --- Initialize new record

    dim a1$(31)

create_main_window: rem --- Create main window

    width=78
    height=21,column=1,row=2,title$=""
    call pgmdir$+"syc_wa.bbx",0,width,height,column,row,title$,name$

rem --- Fill in calendar block

    for x=10 to 65 step 11
        call pgmdir$+"syc_wc.bbx",1,1,0,height-2,x,0,0
    next x
    call pgmdir$+"syc_wc.bbx",1,0,width-2,0,0,1,0
    for x=4 to 16 step 3
        call pgmdir$+"syc_wc.bbx",1,0,width-2,0,0,x,0
    next x
    print @(22,height-4),'cl',@(22,height-3),'cl',

month_year: rem --- Month/Year?
    
    while more

        year$=pom01a.year$
        year=fnyy_year(year$),month$=pom01a.month$,month=num(month$)

    rem --- Set window title

        title$=date(jul(1900+year,month,1):"%Ms %Y")
        print @(23,17),title$,"   Arrows=Change Day  PgUp/PgDn=Change Month",@(34,18),"<Space>=Toggle Status  <F4>=End",

    rem --- Days

        column=0
        row=0
        for x=1 to 7
            print @(column,row),days$((x-1)*9+1,9),
            column=column+11
        next x

    rem --- Determine starting day of the week

        dim days[42],row[42],column[42]
        first$=year$+month$+"01"
        x$="",first=0,d=0,date=0
        call pgmdir$+"adc_dayweek.aon",first$,x$,first
        first=first+1
        l[2]=28,yy=fnyy_year(year$),mm=num(month$)
        if first>7 then let first=1
        if mod(yy,4)=0 then let l[2]=29
        for x=first to 42
            date=date+1
            if date<=l[mm] then let d=d+1,days[x]=d
        next x

    rem --- Display dates on calendar

        column=0
        row=2
        for x=1 to 42
            if days[x]>0 then print @(column,row),days[x],
            column=column+11
            if column>=77 then 
                column=0
                row=row+3
            endif
        
        next x

    rem --- Display data

        column=0
        row=3,date=1,first_col=0,first_row=0
        for x=1 to 42
            if days[x]<>0
                if first_row=0 then let first_row=row,first_col=column
                x$=codes$((pos(pom01a.day_status_01$=" WCH")-1)*10+1,10)
                row[date]=row
                column[date]=column
                print @(column,row),x$,
                date=date+1
            endif

            column=column+11
            if column>76 then let column=0,row=row+3
        next x

    rem --- Initialize for modification

        last_col=column
        last_row=row,v0=1,days=1
        column=first_col
        row=first_row,l_col=column,l_row=row

        rem --- Process user input

        while more

            print @(l_col,l_row)," ",@(l_col+9)," ",@(column,row),"[",@(column+9),"]",
            v0$="Sa"
            v1$="a^",v2$="",v3$="",v4$="",v1=column+4,v2=row-1,l_col=column,l_row=row,control_id=3000
            print @(v1,v2)," ",
            if v3=4 then goto done
            if v3=rarrow then goto right_arrow
            if v3=larrow then goto left_arrow
            if v3=darrow then goto down_arrow
            if v3=2 then goto up_arrow
            if v3=pgup then break
            if v3=pgdn then goto pgdn_one_month

            rem --- Toggle status

            if pos(v$=" WCH")=0 then continue

            while more

                if v$<>" " then let pom01a.day_status_01$=v$; break
                if pom01a.day_status_01$="W" then let pom01a.day_status_01$="C"; break
                if pom01a.day_status_01$="C" then let pom01a.day_status_01$="H"; break
                if pom01a.day_status_01$="H" or pom01a.day_status_01$=" " then let pom01a.day_status_01$="W"
                pom01a.day_status_01$="W"
                break

            wend

            x$=codes$((pos(pom01a.day_status_01$=" WCH")-1)*10+1,10)
            print @(column,row),x$,
            continue
            
            while more
        
                right_arrow: rem --- Right arrow

                    days=days+1
                    if days>l[mm] then let days=1
                    break

                left_arrow: rem --- Left arrow

                    days=days-1
                    if days<1 then let days=l[mm]
                    break

                down_arrow: rem --- Down arrow

                while more

                    days=days+7
                    if days<=l[mm] then break
                    while days>0
                          days=days-7
                    wend

                wend

                break

                up_arrow: rem --- Up arrow

                while more

                    days=days-7
                    if days>0 then break
                    while days<=l[mm]
                          days=days+7
                    wend

                wend
                
                break

            wend
        
            column=column[days]
            row=row[days]

        wend

    pgup_one_month: rem --- PgUp one month

        a0=l[mm]
        if cvs(pom01a$(8,31),2)<>"" then write record (pom01_dev,key=pom01a.firm_id$+pom01a.year$+pom01a.month$) pom01a$
        k$=pom01a.firm_id$+pom01a.year$+pom01a.month$
        month=num(k$(5,2))-1
        yr=fnyy_year(k$(3,2))
        if !(month<1 and yr<1) then 
            if month<1 then let month=12,k$(3,2)=fnyear_yy21$(yr-1)
            k$(5,2)=str(month:"00")
            find record (pom01_dev,key=k$,dom=label9) pom01a$
        endif
        goto label10

    label9:

        pom01a$(1,6)=k$
        pom01a$(8,31)=""

    label10:

        print 'cf',
        continue

    pgdn_one_month: rem --- PgDn one month

        a0=l[mm]
        if cvs(pom01a$(8,31),2)<>"" then write record (pom01_dev,key=pom01a.firm_id$+pom01a.year$+pom01a.month$) pom01a$
        k$=pom01a.firm_id$+pom01a.year$+pom01a.month$
        month=num(k$(5,2))+1
        yr=fnyy_year(k$(3,2))
        if month>12 then let month=1,k$(3,2)=fnyear_yy21$(yr+1)
        k$(5,2)=str(month:"00")
        find record (pom01_dev,key=k$,dom=label11) pom01a$
        goto label12
    
    label11:

        pom01a$(1,6)=k$
        pom01a$(8,31)=""
            
    label12:

        print 'cf',

    wend

done: rem --- End

    a0=l[mm]
    if cvs(pom01a$(8,31),2)<>"" then write record (pom01_dev,key=pom01a.firm_id$+pom01a.year$+pom01a.month$) pom01a$
    goto std_exit

disp_calendar: rem --- Display Unscheduled Gaps in Calendar

    gap$=""
    read (pom01_dev,key=firm_id$,dom=*next)

    while more

        rem --- Process First Month

            k$=key(pom01_dev,end=*break)
            if pos(firm_id$=k$)<>1 then break
            read record (pom01_dev) pom01a$
            last_month$=pom01a.year$+pom01a.month$+str(pom01a.days_in_mth:"00")
            x0=pos(" "<>a1$)

        while more

            x1=pos(" "=a1$(x0,pom01a.days_in_mth+1-x0))
            if x1=0 then break
            gap$=gap$+k$(3,4)+str(x0+x1-1:"00")
            x2=pos(" "<>a1$(x0+x1-1,pom01a.days_in_mth+1-(x0+x1)))
            if x2=0 then break
            gap$=gap$+k$(3,4)+str(x0+x1+x2-3:"00")
            x0=x0+x1+x2-2

        wend

        remaining_months: rem --- Process remaining months

        while more

            k$=key(pom01_dev,end=*break)
            if pos(firm_id$=k$)<>1 then break
            x$=""
            call pgmdir$+"adc_daydates.aon",last_month$,x$,1
            if len(x$)<>6 then break
            if x$(1,4)<>k$(3,4) then 
                if mod(len(gap$),12)=0 then let gap$=gap$+x$
            endif
            read record (pom01_dev) pom01a$
            last_month$=pom01a.year$+pom01a.month$+str(pom01a.days_in_mth:"00")
            if mod(len(gap$),12)<=0 then 
                if pom01a.day_status_01$<>" " then goto label13
                gap$=gap$+k$(3,4)+"01"+k$(3,4)+str(pos(" "<>a1$)-1:"00")
                x0=pos(" "<>a1$)
                count=0
            endif

            if count=1

                if pom01a.day_status_01$<>" " then 
                    x$=""
                    call pgmdir$+"adc_daydates.aon",k$(3,4)+"01",x$,-1
                    if len(x$)<>6 then break
                    gap$=gap$+x$
                    x0=1
                    count=0

                endif

                if count=1

                    gap$=gap$+pom01a.year$+pom01a.month$+str(pos(" "<>a1$)-1:"00")
                    x0=pos(" "<>a1$)
                    count=0

                    if count=1

                    label13:
                            x0=1

                    endif

                endif

            endif

            while more

                x1=pos(" "=a1$(x0,a0+1-x0))
                if x1=0 then break
                gap$=gap$+k$(3,4)+str(x0+x1-1:"00")
                x2=pos(" "<>a1$(x0+x1-1,a0+1-(x0+x1)))
                if x2=0 then break
                gap$=gap$+k$(3,4)+str(x0+x1+x2-3:"00")
                x0=x0+x1+x2-2

            wend

        wend

        prep_display_gaps: rem --- Now Prepare To Display Gaps

            if mod(len(gap$),12)<>0 then let gap$=gap$(1,len(gap$)-6)
            if len(gap$)=0 then return
            print @(10,11),"The following gaps in scheduled days have been detected:",
            let column=3,row=11

    wend

display_gaps: rem --- Display Gaps

    while more

        if len(gap$)=0 then break
        let row=row+1
        if row>21 then let column=column+20,row=12

        if column>=80 then 
            gosub label_continue
            if v3=4 then return
            print @(0,row),'ce',
        endif

        print @(column,row),fndate$(gap$(1,6))," Through ",fndate$(gap$(7,6)),
        let gap$=gap$(13)

    wend

rem --- End Of Gaps

    gosub label_continue
    return

label_continue: rem " --- Continue?

    let v4$="Press <Enter> To Continue:"
    let v0$="S",v1$="C",v2$="",v3$="",v0=1,v1=fnv(v4$),v2=22
    let column=3,row=11
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
