rem --- Purchase Order Receipt History Report (Summary - Print Overlay)
rem --- Program por_histbyvend_o1s v8.0.0 17Jul2007 (por_pb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:50:28)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    precision ivprecision
    dim vendtot[3],vendor$(6)
    printvtot$="N"
    initializing$="Y"; rem "Init files 1st time through
    mratio$="-##0.00%"
    mratio=len(mratio$)
    more=1

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECHDR","PRIMARY",pot04a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECDET","PRIMARY",pot14a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECHDR","VEND_RECDATE",pot04a_key_alttpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","ALT_KEY_02",apm01a_key_alphtpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    headings=5
    dim headings$[headings],o[12]
    width=132
    page=0
    l9=59
    l=l9+1
    gosub assignheads

rem --- Headings and print positions

 
    dim columns$[13,10]
    columns = 13
    columns$[0,0]="Vendor",             columns$[0,1]="C",columns$[0,2]="23"
    columns$[1,0]="PO Numb",            columns$[1,1]="C",columns$[1,2]="5"
    columns$[2,0]="Receivr",            columns$[2,1]="C",columns$[2,2]="4"
    columns$[3,0]="Order Date",         columns$[3,1]="C",columns$[3,2]="4"
    columns$[4,0]="Receipt Date",       columns$[4,1]="C",columns$[4,2]="3"
    columns$[5,0]="Terms Code",         columns$[5,1]="C",columns$[5,2]="4"
    columns$[6,0]="P.Addr Code",        columns$[6,1]="C",columns$[6,2]="4"
    columns$[7,0]="Ship-To Whse",       columns$[7,1]="C",columns$[7,2]="3"
    columns$[8,0]="Freight Terms",      columns$[8,1]="C",columns$[8,2]="5"
    columns$[9,0]="Ship Via",           columns$[9,1]="C",columns$[9,2]="7"
    columns$[10,0]="Acknowledged",      columns$[10,1]="C",columns$[10,2]="19"
    columns$[11,0]="Order Value",       columns$[11,1]="N",columns$[11,2]="5",columns$[11,3]=m1$
    columns$[12,0]="Receipt Value",     columns$[12,1]="N",columns$[12,2]="5",columns$[12,3]=m1$
    columns$[13,0]="Fill Ratio",        columns$[13,1]="C",columns$[13,2]="5"
    
positions:
    o[1]=o[0]+7
    o[2]=o[1]+8
    o[3]=o[2]+8
    o[4]=o[3]+9
    o[5]=o[4]+10
    o[6]=o[5]+6
    o[7]=o[6]+7
    o[8]=o[7]+7
    o[9]=o[8]+16
    o[10]=o[9]+16
    o[11]=o[10]+m1
    o[12]=o[11]+m1

    if o[12]+8>=width
        o[12]=width-mratio
        o[11]=o[12]-m1
        o[10]=o[11]-m1
    endif

rem --- Position files

    call pgmdir$+"adc_progress.aon","N","","","","",0,pot14_dev,1,meter_num,status

rem --- Sorts
    
    while more
    
        action=pos(printseq$="AN")
        sortbyalt=1
        sortbyvend=2
        keybyvend=3
        
       dim pota_key$:pot04a_key_alttpl$ ; rem pot-04 key by vend/rec date
       dim apm04a_key$:apm01a_key_alphtpl$ ; rem apm-01 key by alt seq
        switch action

            case sortbyalt; rem --- Sort by alternate sequence

                if initializing$<>"N"
                    initializing$="N"
                    ap04_key$=firm_id$+altfrom$
                    read (apm01_dev2,knum=2,key=ap04_key$,dom=*next)
                endif

rem --- Find a vendor/recDate record using alt seq

                while more

                    apm04a_key$=key(apm01_dev2,knum=2,end=done)
                    if apm04a_key.firm_id$<>firm_id$ goto done
                    if altthru$<>"" and apm04a_key.alt_sequence$(1,len(altthru$))>altthru$ goto done
                    k04b_key$=apm04a_key.firm_id$+apm04a_key.vendor_id$
                    read (apm01_dev2); rem "Move ptr
                    read (pot04_dev2,KNUM=1,key=k04b_key$+datefrom$,dom=*next)
                    pota_key$=key(pot04_dev2,knum=1,end=*continue)
                    if datethru$<>"" if pota_key.recpt_date$>datethru$ continue
                    if pota_key.firm_id$+pota_key.vendor_id$<>k04b_key$ continue
                    k$=pota_key$.firm_id$+pota_key.vendor_id$+pota_key.po_no$+pota_key.receiver_no$; break

                wend

                break

            case sortbyvend; rem --- Read by vendor

                if initializing$<>"N"
                    initializing$="N"
                    pota_key$=firm_id$+vendfrom$
                    read (pot04_dev2,knum=1,key=pota_key$,dom=*next)
                    if vendfrom$<>"" pota_key$=firm_id$+vendfrom$+datefrom$  
                      read(pot04_dev2,knum=1,key=pota_key$,dom=*next)  
                    endif
                endif

rem --- Read through req headers

                pota_key$=key(pot04_dev2,knum=1,end=done)
                if pota_key.firm_id$<>firm_id$ goto done
                read (pot04_dev2,end=done); rem "Move ptr
                if vendthru$<>"" if pota_key.vendor_id$>vendthru$ goto done
                k$=pota_key.firm_id$+pota_key.vendor_id$+pota_key.po_no$+pota_key.receiver_no$
                break

            case default   
                goto done

        swend

        
        while more

            if k$(1,2)<>firm_id$ continue
            find record (pot04a_dev,key=k$(1,22),dom=*break) pot04a$
            read (pot14_dev,key=k$(1,22),dom=*next) ; rem trip read for later details
rem --- Test Ranges
            if datefrom$<>"" and pot04a.recpt_date$<datefrom$ and printseq$<>"A" continue
            if datethru$<>"" and pot04a.recpt_date$>datethru$ and printseq$<>"A" continue

rem --- Assign variables

            dim rcptdate$(8),orddate$(8)
            if pot04a.recpt_date$<>fill(8) rcptdate$=fndate$(pot04a.recpt_date$)
            if pot04a.ord_date$<>fill(8) orddate$=fndate$(pot04a.ord_date$)
            if ponum$=pot04a.po_no$ ponum_prnt$="" else ponum_prnt$=pot04a.po_no$
            ponum$=pot04a.po_no$
            receiver$=pot04a.receiver_no$
            terms$=pot04a.terms_code$
            paddrcode$=pot04a.purch_addr$
            ship2whs$=pot04a.warehouse_id$
            freight$=pot04a.po_frt_terms$
            shipvia$=pot04a.ap_ship_via$
            acknow$=pot04a.acknowledge$

rem --- Test breaks

            if pot04a.vendor_id$<>vendor$
                if printvtot$="Y" gosub vendtotals
                gosub newvendor
            endif

            call pgmdir$+"adc_progress.aon","S","","","","",0,pot14_dev,1,meter_num,status

rem --- Calculate Order Value, Receipt Value and Fill Ratio

            po_oval=0
            po_rval=0
            ratio=0

rem --- Get detail numerics and accumulate column buckets
            dim pot14a_key$:pot14a_key_tpl$
          
            while more
          
                pot14a_key$=key(pot14_dev,end=*break)
                if pot14a_key.firm_id$+pot14a_key.vendor_id$+pot14a_key.receiver_no$<>pot04a.firm_id$+
:                   pot04a.vendor_id$+pot04a.receiver_no$ break

                    read record (pot14_dev,key=pot14a_key$) pot14a$
                    gosub getlinetype
                    if pos(linetype$="SNO")=0 continue
                    precision 2
                    ordval=(pot14a.unit_cost*pot14a.qty_ordered)
                    rcptval=(pot14a.unit_cost*pot14a.qty_received)
                    precision ivprecision

rem --- Accumulate totals; then get next detail

                    po_oval=po_oval+ordval
                    if ponum_prnt$<>""
                        vendoval=vendoval+ordval
                        grandoval=grandoval+ordval
                    endif

rem "Don't accum OrdVal tots if samePO#

                    po_rval=po_rval+rcptval
                    vendrval=vendrval+rcptval
                    grandrval=grandrval+rcptval
                    
                endif
                
            wend

rem --- Done w/detail for this PO

            if po_oval>0 ratio=po_rval*100/po_oval
            gosub printline

rem --- Loop up for next header record via sort files

            if printseq$<>"A" break

rem --- See if there's another po for vend before getting next alt seq


            pota_key$=key(pot04a_dev,end=*continue)
            if pota_key.vendor_id$<>vendor$ break
            k$=pota_key$
        wend
        
    wend

done: rem --- All Done

    if l+2>l9 gosub set_linecount
    gosub vendtotals
    if grandoval>0 grandratio=grandrval*100/grandoval

    xwk = fnblank(10)
    OutVect!.addItem("Total For Report")
    OutVect!.addItem(str(grandoval:m1$))
    OutVect!.addItem(str(grandrval:m1$))
    OutVect!.addItem(str(grandratio:mratio$))

    goto std_exit

set_linecount: rem --- Set the line count

    l=headings+1
    l=l+3
    return

assignheads: rem --- Assign headings variables

    dim tmph3$(width),tmph4$(width)
   
    if printseq$="A" vendf$=vendfrom$ else if vendfrom$<>"" vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
    if vendfrom$="" vendf$="First"
    if printseq$="A" vendt$=vendthru$ else if vendthru$<>"" vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    if vendthru$="" vendt$="Last"
    if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
    if datethru$="" datet$="Last" else datet$=fndate$(datethru$)

    midh3$=leveldesc$+" Sorted By "+seqdesc$
    tmph3$="From Vendor: "+vendf$
    tmph3$= tmph3$+"  To Vendor: "+vendt$
    tmph4$="From Receipt Date: "+datef$
    tmph4$=tmph4$+"  To Receipt Date: "+datet$

    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=midh3$
    headings$[3]=tmph3$ 
    headings$[4]=tmph4$ 
    
    return

newvendor: rem --- New Vendor

    dim c0$(8),c1$(195),vendtot[3]
    vendname$="Not On File"
    vendor$=pot04a.vendor_id$
    ponum_prnt$=pot04a.po_no$; rem "In case this & last vend had some PO #
    printvtot$="Y"
    vendoval=0
    vendrval=0
    vendratio=0
    find record (apm01a_dev,key=firm_id$+vendor$,dom=brnch1) apm01a$
    vendname$=apm01a.vendor_name$

brnch1:

    if l+2>l9 gosub set_linecount
    
    OutVect!.addItem(str(fnmask$(vendor$(1,vendlen),vendomask$)) + " " + vendname$)

    xwk = fnblank(13)

    l=l+1
    return

vendtotals: rem --- Print Vendor total

    if vendoval>0 vendratio=vendrval*100/vendoval
    if l+1>l9 gosub set_linecount
 
    l=l+1

    xwk = fnblank(10)
    OutVect!.addItem("Total For Vendor " + str(fnmask$(vendor$(1,vendlen),vendomask$)))
    OutVect!.addItem(str(vendoval:m1$))
    OutVect!.addItem(str(vendrval:m1$))
    OutVect!.addItem(str(vendratio:mratio$))

    return

getlinetype: rem --- Get Line Type

    linetype$="N"
    find record (pom02a_dev,key=pot14a.firm_id$+pot14a.po_line_code$,dom=brnch2) pom02a$
    linetype$=pom02a.line_type$

brnch2:
    return

printline: rem --- Print data line

    if l+2>l9 gosub set_linecount
    let po_oval$=str(po_oval:m1$),po_rval$=str(po_rval:m1$)
    if ponum_prnt$="" po_oval$=""


    xwk = fnblank(1)

    OutVect!.addItem(ponum_prnt$)
    OutVect!.addItem(receiver$)
    OutVect!.addItem(orddate$)
    OutVect!.addItem(rcptdate$)
    OutVect!.addItem(terms$)
    OutVect!.addItem(paddrcode$)
    OutVect!.addItem(ship2whs$)
    OutVect!.addItem(freight$)
    OutVect!.addItem(shipvia$)
    OutVect!.addItem(acknow$(1,15))
    OutVect!.addItem(po_oval$)
    OutVect!.addItem(po_rval$)
    OutVect!.addItem(str(ratio:mratio$))

    xwk = fnblank(10)

    OutVect!.addItem(cvs(acknow$(16),1))

    xwk = fnblank(3)

    let l=l+2
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fndate$(q$) 
   
      if cvs(q$,2)="" return ""

        testdate$=""

        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)

        if testdate$<>"" 

            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

        endif

        return testdate$

    fnend    


rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP")
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
