rem --- Purchase Order/Requisition Printing (Plain Paper & Preprinted)
rem --- Program por_bb v8.0.0 17Jul2007 (por_bb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:45:52)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem --- O0=0 when batch printing/O0=1 when printing on demand
rem --- PLAIN$="N" when preprinted form/"Y" when plain paper
rem --- It is set in calling programs.
rem --- NOTE: Requistions are always PLAIN$="Y

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")

    sequence$=fnget_fld_data$(table$,"print_sequence")
    msg$=fnget_fld_data$(table$,"opt_message")
    restart$=fnget_fld_data$(table$,"res_printing")
    vendor$=fnget_fld_data$(table$,"vendor_id")

rem --- Initializations

    precision num(ivs01a.precision$)
    dim heading$[1],buf$(width),bar$(width,"-")
    dim a0$(15,"9"),a1$(160,"X"),a[8],y0$(4),y1$(32),h0$(5),h1$(32)
    dim w0$(18,"9"),w1$(48,"X"),w2$(32),w3$(22,"X"),w4$(40,"X"),w[12]
    dim l0$(7),l1$(40),c0$(8,"0"),c1$(30,"X"),z0$(32,"X"),x8$(25),x9$(20)
    dim a$(140,"X"),n$(105,"X"),s$(105,"X")
    batch=1
    nf$="(Not On File)"
    shipflen=35
    more=1

rem --- ESCAPE IF PLAIN$="Y" THEN LET SHIPFLEN$="Y

    t0$="" 
    t1$=""
    t2$=""
    t3$=""
    t4$=""
    return_l9=l9
    if o0 batch=0
    if plain$="Y" qtymaskmax=10,qtymaskmin=10,maxfooters=40,l9=59 else qtymaskmax=9,
:   qtymaskmin=9,maxfooters=10,l9=50
    dim footer$[maxfooters]
    title=len(title$)
    label=len(label$)
    l=l9+1
    first=1
    page=0

rem --- Resize masks

    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,10
    call pgmdir$+"adc_sizemask.aon",m2$,m2,qtymaskmin,qtymaskmax
    call pgmdir$+"adc_sizemask.aon",m3$,m3,10,10

rem --- Test pattern initializations

    poe12a.unit_cost=9999.99
    qty=999999
    extension=999999.99
    total=extension
    poe12a.reqd_date$ = f0$(18,6)
    poe12a.unit_measure$ = "EA"
    poe02a.ord_date$ = f0$(18,6)
    pom02a.line_type$ = "N"
    poe12a.promise_date$ = poe02a.ord_date$ 
    shipfrom$="99 "+fill(30,"X")

rem --- Open Printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem if fnunform_printer(fid(printer_dev)) goto position_files
rem function fnunform_printer in the above line is undefined so it is marked with a REM
    another$="a"

rem --- Print Test Pattern?

    while more
        call pgmdir$+"adc_yesno.aon",0,"Do you want to print "+another$+" test pattern",3,v$,v3
        if v3=4 goto std_exit

        action = pos(v$="YN")
        yes=1
        no=2

        switch action
            case yes

                gosub report_heading
                if plain$="Y" testmax=8 else testmax=6
                for i=1 to testmax
                    gosub print_detail_line
                next i
                dim footer$[maxfooters]
                footcnt=0
                another$="another"
                if cvs(pomessage$,2)<>"" footcnt=2
                gosub print_total
                break

            case no;    rem --- Position files 

                dim a0$(15),a1$(160),a[8],y0$(4),y1$(32),c0$(8),c1$(195)
                dim w0$(18),w1$(48),w2$(32),w3$(22),w4$(40),w[12],z0$(32)
                if pos(sequence$="AW") gosub sort_file
                aps01b_key.firm_id$=firm_id$
                if restart$="Y" x$=firm_id$+vendor$
                if batch call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing",
:               "",m0+8,0,1,0,ignore_status
                read (pow02_dev,key=firm_id$,dom=*next)
                read (poe22_dev,key=aps01b_key$,dom=*next)
                read (poe32_dev,key=firm_id$,dom=*next)
                more=0
                break

            case default
                break
        swend
    wend
    
rem branch: rem --- Branch based on SEQUENCE$

    while more

        action=pos(sequence$="NRPAW")
        vend_seq=1
        req_seq=2
        po_seq=3
        alt_seq=4
        whse_seq=5

        switch action
            case vend_seq

                k$=key(poe22_dev,end=done)
                if pos(firm_id$=k$)<>1
                    more=0
                    continue
                endif
                read (poe22_dev)
                if batch=0 k$=vendor_po$
                break

            case req_seq
            case po_seq

                    while more
                        k$=key(poe32_dev,end=done)
                        if pos(firm_id$=k$)<>1
                            more=0
                            continue
                        endif
                        read (poe32_dev)
                        k$=poe32a.firm_id$ + poe32a.vendor_id$ + poe32a.po_no$
                        read (poe22_dev,key=k$,dom=*continue)
                    wend
                    break

            case alt_seq
            case whse_seq

                    k$=key(pow02_dev,end=done)
                    if pos(firm_id$=k$)<>1
                        more=0
                        continue
                    endif
                    read (pow02_dev)
                    whse$ = pow02a_key.warehouse_id$
                    k$= pow02a_key.firm_id$ + pow02a_key.vendor_id$
                    break

            case default
                    more=0
                    continue

        swend

rem --- Read header record

        find record (poe02a_dev,key=k$,dom=check_batch) poe02a$
        if batch call pgmdir$+"adc_progress.aon","S","","","",fnmask$(poe02a_key.vendor_id$,m0$)+
:       ""+poe02a.po_no$,0,0,1,0,ignore_status

rem --- Level breaks?

        if poe02a.vendor_id$ <> t0$ gosub vendor_break
        if poe02a.vendor_id$ + poe02a.purch_addr$ <> t1$ gosub shipfrom_break
        if poe02a.terms_code$ <> t2$ gosub terms_break
        poe02a_key$=poe02a.firm_id$+poe02a.vendor_id$+poe02a.po_no$
        read (poe12_dev,key=poe02a_key$,dom=*next)

sort_lines: rem --- Sort line items by ship-to warehouse

        while more

            if (sequence$="W") break
            k$=key(poe12_dev,end=*break)
            if (pos(poe02a_key$ =k$) <> 1) break
            read record (poe12_dev) poe12a$
            pow12a_key$ = firm_id$ + poe12a.warehouse_id$ + poe12a_key.vendor_id$
            write record (pow12_dev,key=pow12a_key$) pow12a$

        wend

rem --- Position sort file

        l=l9+1
        first=1
        total=0
        page=0
        read (pow12_dev,key=firm_id$,dom=*next)

rem --- Read next sort record

        while more

            if sequence$<>"W"

                k$=key(pow12_dev,end=*break)
                if pos(firm_id$ = k$) <> 1 break
                remove (pow12_dev,key = k$)
                poe12a_key$ = firm_id$ + pow12a_key.vendor_id$
                find record (poe12a_dev,key=poe12a_key$,dom=*continue) poe12a$
                
            else

read_next: rem --- Read next detail record
            
                while more
                    k$=key(poe12_dev,end=*break)
                    if pos(poe02a_key$ = k$) <>1 break
                    read record (poe12_dev) poe12a$
                    if poe12a.warehouse_id$ <> whse$ continue 
                wend
           
            endif

level_break: rem --- Level breaks?

            if poe12a.warehouse_id$ <> t3$ gosub shipto_break
            if poe12a.po_line_code$ <> t4$ gosub line_code_break

rem --- Print detail

            gosub calc_ext
            total=total+extension
            gosub print_detail_line

rem --- Print any associated message

            if cvs(poe12a.po_msg_code$,2)<>""

                msg$ = pom04a_key.po_msg_code$
                pom04a_key$ = firm_id$ + poe12a.po_msg_code$
                find record (pom04a_dev,key = pom04a_key$,dom=*break) pom04a$
                if pos(pom04a.message_type$ = "B" + type$) = 0 break
                read (pom14_dev,key=pom04a_key$,dom=*next)

read_msg: rem --- Read next message line

                while more

                    k$ = key(pom14_dev,end=*break)
                    if pos(pom04a_key$ = k$) <> 1 break
                    read record (pom14_dev) pom14a$
                    aps01b_key$ = pom14a.message_text$
                    gosub text_only

                wend

            endif

print_done: rem --- Done printing line message

            pom04a_key.po_msg_code$ = msg$
            d$=""
            if pom02a.dropship$ <> "Y" continue

rem --- Retrieve dropship address

            if op$<>"N"

                dim s0$(15),s1$(130)
                poe12a_key$ = firm_id$ + poe12a.customer_id$ + poe12a.order_no$
                find record (ope31a_dev,key=poe12a_key$,dom=opEqN) ope31a$
                d$ = ope31a.addr_line_1$ + ope31a.addr_line_2$ + ope31a.addr_line_3$
:               + ope31a.addr_line_4$ + ope31a.city$ + ope31a.state_code$ + ope31a.zip_code$

            else
opEqN:
                dim s0$(14),s1$(174)
                poe12a_key$ = firm_id$ + poe12a.customer_id$ + poe12a.shipto_no$
                eor_flg=1
                find record (arm03a_dev,key = poe12a_key$,dom=eor) arm03a$
                d$ = arm03a.addr_line_1$ + arm03a.addr_line_2$ + arm03a.addr_line_3$
:               + arm03a.addr_line_4$ + arm03a.city$ + arm03a.state_code$ + arm03a.zip_code$
                eor_flg=0

eor:
                if eor_flg=1

                    dim s0$(8),s1$(280)
                    poe12a_key$ = firm_id$ + poe12a.customer_id$
                    find record (arm01a_dev,key=poe12a_key$,dom=*continue) arm01a$
                    d$ = arm01a.addr_line_1$ + arm01a.addr_line_2$ + arm01a.addr_line_3$
:                   + arm01a.addr_line_4$ + arm01a.city$

                endif

            endif

rem --- Format address and print dropship information

print_info:
            dim x$(40)
            if d$="" continue
            call pgmdir$+"adc_address.aon",d$,24,5,9,40
            needed=4
            for x=1 to 200 step 40
                if cvs(d$(x,40),2)<>"" needed=needed+1
            next x
            if l+needed>l9-2 gosub print_continued
            gosub text_only
            aps01b$ = "Please Ship Line "+ poe12a_key.po_line_no$ +" To:"
            gosub text_only
            aps01b$=""
            gosub text_only
            aps01b$ = ope31a.name$
            gosub text_only
            for x=1 to 200 step 40
                aps01b$ = d$(x,40)
                if cvs(aps01b$,2)<>"" gosub text_only
            next x

        wend;   rem loop back for next sort record

print_tot: rem --- Print total

        msg$=defaultmsg$
        if cvs(poe02a.po_msg_code$,2) <> "" msg$ = poe02a.po_msg_code$

        nomsg_flg=1
        if cvs(msg$,2)<>""

            nomsg_flg=0
            if msg$ <> pom04a.po_msg_code$

rem --- Load current message

                dim footer$[maxfooters]
                pom04a_key$ = firm_id$ + msg$
                footcnt=0
                if cvs(pomessage$,2)<>"" footcnt=2
                find record (pom04a_dev,key=pom04a_key$,dom=nomsg) pom04a$

                nomsg_flg=1
                if pos(pom04a.message_type$="B"+type$)<>0
                    read (pom14_dev,key=pom04a_key$,dom=*next)

rem --- Load message lines
                    nomsg_flag=0
                    while more

                        k$=key(pom14_dev,end=*break)
                        if pos(pom04a_key$=k$)=1

                            read record (pom14_dev) pom14a$
                            if footcnt<maxfooters-2

                                footcnt=footcnt+1
                                footer$[footcnt]=pom14a.message_text$

                            endif

                        endif

                    wend

                endif

            endif

       endif

nomsg: rem --- No message

        if nomsg_flg=1
            dim footer$[maxfooters]
            footcnt=0
        endif

prn_tot: rem --- Print total

        gosub print_total

check_batch:

        if (batch = 0) break

    wend;   rem loop back for next header

done: rem --- All requisitions printed

    close (printer_dev,err=*next)
    if !batch 
        remove (poe22_dev,key=poe02a_key$,dom=*next)
        goto std_exit
    endif

update: rem --- Update print file?

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,0,ignore_status
    v4$="Are you ready to update the "+label$+" Print File"
    call pgmdir$+"adc_yesno.aon",0,v4$,0,v$,v3

on v3 goto brnch1,update,update,update,all_done,brnch1,all_done

brnch1:

    if v$<>"YES" goto std_exit
    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Updating","",16,poe22_dev,1,0,ignore_status
    read (poe22_dev,key=firm_id$,dom=*next)

rem --- Update the print file

update_print_file:

    while more
        k$=key(poe22_dev,end=*break)
        if pos(firm_id$=k$)<>1 break
        call pgmdir$+"adc_progress.aon","S","","","",fnmask$(k$(3,vendlen),m0$)+" "+
:       poe22a.po_no$,0,0,1,0,ignore_status
        remove (poe22_dev,key=k$,dom=*break)
    wend

all_done: rem --- All done

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    goto std_exit

report_heading: rem --- Report Heading

    call pgmdir$+"adc_rpthead.aon",printer_dev,heading$[all],0,page,width,when$,clock$,status
    if status exitto std_exit
    if plain$="Y" l=20,page=page+1 else l=24,page=page+1,name$="",title$="",a$=fill(140); rem ESCAPE, ELSE LET L=26,
    ff$='FF'
    if page=1 if fnglobal$("+FF","Y")="N" ff$='CR' fi; let junk$=stbl("!CLEAR","+FF",err=*next)
    print (printer_dev)ff$
    print (printer_dev)name$,@(width-title),title$

    if plain$<>"Y"
        print (printer_dev)""
        print (printer_dev)""
    endif

    print (printer_dev)a$(1,35)
    print (printer_dev)a$(36,35),@(63-label),label$," Number: ",poe02a_key.po_no$
    print (printer_dev)a$(71,35),@(65-label),label$," Date: ",fndate$(poe02a_key.ord_date$)
    print (printer_dev)a$(106,35),@(66),"Page:",page

rem --- ESCAPE IF PLAIN$="Y" THEN PRINT (PRINTER_DEV)@(0),"Phone #:",PHONE$(1,10):PHONEMASK$," Fax #:",PHONE$(11,10):PHONEMASK$; LET L=L+1

    print (printer_dev)""
    print (printer_dev)"Vendor:",@(43),"Ship From:"
    print (printer_dev)""

rem --- ESCAPE LET SHIPFROM$=NAME$,S$=A$
rem --- ESCAPE IF A1$(37,1)="Y" THEN CALL "jap_rz.bbx",N0$+"  "+A1$(135,13)+"000",SX$,CUSTNAME$; LET SHIPFROM$=CUSTNAME$,S$(1,35)=SX$(1,30),S$(36,35)=SX$(31,30),S$(71,35)=SX$(61,30),S$(106,35)=SX$(91,30)

    print (printer_dev) fnmask$(apm01a_key.vendor_id$,m0$),
:                       @(m0+1),apm01a.vendor_name$,
:                       @(77-shipflen+3),shipfrom$
    if plain$<>"Y" print (printer_dev)""
    print (printer_dev) @(m0+1),n$(1,35),
:                       @(80-shipflen),s$(1,shipflen)
    print (printer_dev) @(m0+1),n$(36,35),
:                       @(80-shipflen),s$(36,shipflen)
    print (printer_dev) @(m0+1),n$(71,35),
:                       @(80-shipflen),s$(71,shipflen)

rem --- ESCAPE IF CVS(S$(106,35),2)<>"" THEN PRINT (PRINTER_DEV)@(80-SHIPFLEN),S$(106,SHIPFLEN); LET L=L+1

    if plain$<>"Y"
        for cnt=1 to 3
            print (printer_dev)""
        next cnt
    endif

    if plain$="Y" print (printer_dev)bar$ else print (printer_dev)""
    print (printer_dev) "Terms: ",apm10c_key.code_desc$,
:                       "    Ship Via: ",poe02a.ap_ship_via$,"   FOB: ",poe02a.fob$
    print (printer_dev) bar$
    print (printer_dev) "Acknowledged By Vendor Contact: ",poe02a.acknowledge$

rem --- ESCAPE PRINT (PRINTER_DEV)"Ordered By: ",A1$(151,10); LET L=L+1

    if plain$="Y"
        print (printer_dev)bar$
        print (printer_dev)"Seq| Quantity |Item And Description",@(45),"Date Req'd|     Cost |UM|Extension"
    endif

    if plain$<>"Y"
        print (printer_dev)""
        print (printer_dev)"Seq Quantity Item And Description",@(44),"Date Req'd       Cost |UM|Extension"
    endif

    print (printer_dev)bar$
    return

print_detail_line: rem --- Print Detail Line

    dim x$(40)
    needed=2
    if pos(pom02a.line_type$="SN") needed=3
    if cvs(poe12a.promise_date$+poe12a.not_b4_date$,2)<>"" needed=needed+1

    if l+needed>l9-2 gosub print_continued
    if plain$="Y" print (printer_dev)   @(3),"|",
:                                       @(14),"|",
:                                       @(55),"|",
:                                       @(66),"|  |" else print (printer_dev)@(66),"|  |"
    l=l+1

    action=pos(pom02a.line_type$="SNVMO")
    std_line=1
    nonstock_line=2
    vend_part_num=3
    message_line=4
    other_line=5
    
    switch action
        case std_line;   rem --- Print Standard Line

            dim b0$(22),b1$(60),r0$(28),r1$(32),r2$(20),x$(40)
            ivm01a_key$=firm_id$+poe12a.item_id$
            ivm01a.item_desc$=nf$
            ivm05a_key$=apm01a.vendor_id$+poe12a.item_id$
            find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
            if p3$(58,1)="Y" find record (ivm05a_dev,key=ivm05a_key$,dom=*next) ivm05a$
            if cvs(ivm05a.vendor_item$,2)<>"" needed=needed+1
            if l+needed>l9-2 gosub print_continued

            if plain$="Y" print (printer_dev) poe12a.po_line_no$,"|",
:                                               qty:m2$,"|",
:                                               poe12a.item_id$,
:                                               @(46),fndate$(poe12a.reqd_date$),
:                                               @(55),"|",w[1]:m3$,"|",
:                                               poe12a.unit_measure$,"|",extension:m1$
:           else if plain$<>"Y" print (printer_dev) poe12a.po_line_no$," ",
:                                               qty:m2$,
:                                               @(13),poe12a.item_id$,
:                                               @(45),fndate$(poe12a.reqd_date$),
:                                               @(56),w[1]:m3$,"|",
:                                               poe12a.unit_measure$,"|",extension:m1$
            fi

            l=l+1
            aps01b.name$=fnitem$(ivm01a.item_desc$,i[3],i[4],i[5])
            gosub text_only
            if cvs(ivm05a.vendor_item$,2)<>""
                aps01b.name$="Your Item Number "+r2$
                gosub text_only
            endif
            break

        case nonstock_line; rem --- Print Non-Stock Line

            if plain$="Y" print (printer_dev) poe12a.po_line_no$,"|",
:                                               qty:m2$,"|",
:                                               poe12a.item_id$,
:                                               @(46),fndate$(poe12a.reqd_date$),
:                                               @(55),"|",w[1]:m3$,"|",
:                                               poe12a.unit_measure$,"|",extension:m1$
:           else if plain$<>"Y" print (printer_dev) poe12a.po_line_no$," ",
:                                               qty:m2$,
:                                               @(13),poe12a.item_id$,
:                                               @(45),fndate$(poe12a.reqd_date$),
:                                               @(56),w[1]:m3$,"|",
:                                               poe12a.unit_measure$,"|",extension:m1$
            fi

            l=l+1
            aps01a.name$=poe12a.order_memo$
            gosub text_only
            break

        case vend_part_num; rem --- Print Vendor Part Number, Message or Other Line
        case message_line
        case other_line

            if plain$="Y"
                switch (pom02a.line_type$="VMO")
                    case 1
                        print (printer_dev) poe12a.po_line_no$,"|",
:                       @(14),"|Your Item Number ",poe12a.order_memo$,
:                       @(55),"|",
:                       @(66),"|  |" 
                        break
                    case 2
                        print (printer_dev) poe12a.po_line_no$,"|",
:                       @(14),"|",poe12a.order_memo$,
:                       @(55),"|",
:                       @(66),"|  |"
                        break
                    case 3
                        print (printer_dev) poe12a.po_line_no$,"|",
:                       @(14),"|",poe12a.order_memo$,
:                       @(55),"|",w[1]:m3$,
:                       @(66),"|  |",extension:m1$
                    case default
                        break
                swend
             endif
             if plain$<>"Y"
                switch(pom02a.line_type$="VMO")
                    case 1
                        print (printer_dev) poe12a.po_line_no$,
:                       @(13),"Your Item Number ",poe12a.order_memo$,
:                       @(66),"|  |"
                        break
                    case 2
                        print (printer_dev) poe12a.po_line_no$,
:                       @(13),poe12a.order_memo$,
:                       @(66),"|  |"
                        break
                    case 3
                        print (printer_dev) poe12a.po_line_no$,
:                       @(13),poe12a.order_memo$,
:                       @(56),w[1]:m3$,
:                       @(66),"|  |",extension:m1$
                    case default
                        break
                swend
             endif

            l=l+1
            break

        case default
            return
            break

    swend

date_promised: rem --- Date Promised or Not Before Date?

    while more
        if pos(pom02a.line_type$="VM") break
        if cvs(poe12a.promise_date$,2)="" break else if cvs(poe12a.not_b4_date$,2)="" break
        v=1
        if cvs(poe12a.promise_date$,2)<>"" x$(1)="Promised By "+fndate$(poe12a.promise_date$),v=22
        if cvs(poe12a.not_b4_date$,2)<>"" x$(v)="Not Before "+fndate$(poe12a.not_b4_date$)
        gosub text_only
    wend

    return

text_only: rem --- Print text only

    if l+1>l9-2 gosub print_continued
    if plain$="Y" print (printer_dev)   @(3),"|",
:                                       @(14),"|",x$,
:                                       @(55),"|",
:                                       @(66),"|  |"
:    else if plain$<>"Y" print (printer_dev)  @(13),x$,
:                                       @(66),"|  |"
    fi
    l=l+1

    return

print_total: rem --- Total

    footcnt=max(footcnt,6)
    buf$(1)=footer$[1]
    if cvs(pomessage$,2)<>"" buf$(1)=pomessage$
    buf$(65)="Total "+str(total:m1$)
    footer$[1]=buf$
    buf$(1)=footer$[footcnt-1]
    buf$(48)=fill(32,"_")
    footer$[footcnt-1]=buf$
    buf$(1)=footer$[footcnt]
    buf$(56)="Purchasing Agent"
    footer$[footcnt]=buf$
    barcnt=1; rem "One line count for the printing of BAR$

    if plain$="Y" 
        if l+footcnt+barcnt>l9 gosub print_continued
        skip=l9-footcnt-barcnt-l
    else 
        if l>l9 gosub print_continued
        skip=l9-l
    endif

    if skip>0 gosub skip_lines
    if plain$="Y" print (printer_dev)bar$ else print (printer_dev)""
    for ii=1 to footcnt
        print (printer_dev)footer$[ii]
    next ii

    return

print_continued: rem --- Continued

    if !first 

        if plain$<>"Y" 

            for cnt=l to l9-1
                print (printer_dev)@(66),"|  |"
            next cnt
            print (printer_dev)""

        else 
            print (printer_dev)bar$
        fi

    endif

    if plain$="Y" print (printer_dev) @(61),"(Continued)" 
    else 
        print (printer_dev)@(59),"(Continued)"; rem "Unform needs these differentprint positions
    endif

    gosub shipto_break; gosub report_heading
    first=0
    return

skip_lines: rem --- Skip lines

    for ii=1 to skip
        if plain$="Y" print (printer_dev)   @(3),"|",
:                                           @(14),"|",
:                                           @(55),"|",
:                                           @(66),"|  |"
        else 
            print (printer_dev)  @(66),"|  |"
    next ii

    return

vendor_break: rem --- Vendor Break

    dim c0$(8),c1$(195)
    apm01a_key$(1)=poe02a.po_no$
    apm01a.vendor_name$=nf$
    t0$=apm01a_vendor_id$
    find record (apm01a_dev,key=apm01a_key$,dom=*next) apm01a$
    n$= apm01a.addr_line_1$ + 
:       apm01a.addr_line_2$ + 
:       apm01a.city$ + 
:       apm01a.state_code$ + 
:       apm01a.zip_code$

rem --- ESCAPE LET SHIPNAME$=C1$(1,30)

    call pgmdir$+"adc_address.aon",n$,24,3,9,35
    return

shipfrom_break: rem --- Ship-From Break

    dim d0$(10),d1$(160),s$(140)
    apm05a_key$=poe02a.firm_id$ + poe02a.vendor_id$ + poe02a.purch_addr$
    t1$=apm05a.vendor_id$
    shipfrom$="SAME"
    if cvs(poe02a.purch_addr$,2)="" return
    apm05a.name$=nf$
    find record (apm05a_dev,key=apm05a_key$,dom=*next) apm05a$

rem --- ESCAPE LET SHIPNAME$=D1$(1,30)

    s$= apm05a.addr_line_1$ + 
:       apm05a.addr_line_2$ + 
:       apm05a.city$ + 
:       apm05a.state_code$ + 
:       apm05a.zip_code$
    shipfrom$=poe02a.purch_addr$+" "+apm05a.name$

rem --- ESCAPE LET N$=S$

    call pgmdir$+"adc_address.aon",s$,24,3,9,35

rem --- ESCAPE LET N$=S$

    shipflen=max(len(cvs(apm05a.name$,2)),len(cvs(s$(1,35),2)),len(cvs(s$(36,35),2)),
:   len(cvs(s$(71,35),2))); rem "Max len of ship from addr block
    if plain$="Y" shipflen=35; rem "Only move block to fit preprinted forms

    return

terms_break: rem --- Terms Break

    dim z0$(32)
    apm10c_key$=firm_id$+"C"+poe02a.terms_code$+nf$
    t2$=poe02a.terms_code$
    find record (apm10c_dev,key=apm10c_key$(1,5),dom=*next) apm10c$
    return

shipto_break: rem --- Ship-To Break

    dim x0$(160)
    ivm10c_key$=firm_id$+"C"+poe12a.warehouse_id$+nf$
    t3$=poe12a.warehouse_id$
    if ivm10c_key.warehouse_id$="  " 
        ivm10c_key.warehouse_id$=poe02a.warehouse_id$
        t3$=poe02a.warehouse_id$; rem ESCAPE
    endif
    find record (ivm10c_dev,key=ivm10c_key$,dom=*next) ivm10c$

    a$= ivm10c.addr_line_1$ + 
:       ivm10c.addr_line_2$ + 
:       ivm10c.addr_line_3$ + 
:       ivm10c.city$ + 
:       ivm10c.state_code$ + 
:       ivm10c.zip_code$

    call pgmdir$+"adc_address.aon",a$,24,4,9,35
    return

line_code_break: rem --- Line Code Break

    dim y0$(4),y1$(32)
    pom02a_key$=firm_id$+poe12a.po_line_code$
    t4$=poe12a.po_line_code$
    find record (pom02a_dev,key=pom02a_key$,dom=*next) pom02a$
    return

rem --- Sort print file by alternate sort or warehouse
sort_file:

    call pgmdir$+"adc_progress.aon","N","","","","",m0+8,poe22_dev,1,meter_num,ignore_status
    read (poe22_dev,key=firm_id$,dom=*next)

rem --- Read next print record
    while more

        k$=key(poe22_dev,end=*break)
        if pos(firm_id$=k$)<>1 break

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        read (poe22_dev)

        if sequence$<>"W"

            apm01a_key$=firm_id$+poe22a_key.vendor_id$
            find record (apm01a_dev,key=apm01a_key$,dom=*continue) apm01a$
            let pow02a_key$=firm_id$+apm01a.alt_sequence$+poe22a_key.vendor_id$
            write record (pow02_dev,key=pow02a_key$) pow02a$

        else 

            let poe01a_key$=k$
            read (poe12_dev,key=poe01a_key$,dom=*next)

        fi
    
    rem --- Must read all detail records when printing by warehouse
        while more

            let k$=key(poe12_dev,end=*break)
            if pos(poe01a_key$=k$)<>1 break
            read record (poe12_dev,key=k$,dom=*break) poe12a$
            let pow02a_key$=firm_id$+poe12a.warehouse_id+fill(8)+poe02a.vendor_id$
            write record (pow02_dev,key=pow02a_key$) pow02a$

        wend

    wend

done_sorting: rem " --- Done sorting"

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    return

calc_ext: rem " --- Calculate Extension"

    let qty=poe12a.req_quantity-poe12a.qty_ordered
    if type$="P" qty=poe12a.qty_ordered-poe12a.qty_received
    if pom02a.line_type$="O" qty=1
    precision 2
    let extension=poe12a.unit_cost*qty
    precision num(ivs01a.precision$)
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:   cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
