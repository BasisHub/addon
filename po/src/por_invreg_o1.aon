rem --- Purchase Order Invoice Register (Purchase Price Variance)
rem --- Program por_invreg_o1 v8.0.0 23Jun2009 (por_eb)
rem --- Created by adx_codeport.bbj v1.1.5 (06/23/2009 05:57:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    precision i[1]
    dim o[11]
    headings=3
    done=0
    vendor=0
    report=0
    l=l9+1
    t0$=""
    t1$=""
    xm1=15
    xm2=12
    xm3=12
    dw=max(i[3]+i[4]+i[5],40)

rem --- Resize masks if needed

    o[0]=0
    o[1]=m0+1
    o[2]=o[1]+12
    o[3]=o[2]+8
    o[4]=max(o[0]+m0+31,o[3]+9)
l620:
    o[11]=width-m1
    o[10]=o[11]-m1
    o[9]=o[10]-m3
    o[8]=o[9]-m1-1
    o[7]=o[8]-m3
    o[6]=o[7]-m2-3
    o[5]=o[6]-9
    po=o[9]-o[7]
    iv=o[11]-o[9]
    if o[5]>o[4]+12 if o[5]>o[3]+i[0] goto l700
    xm1=xm1-1
    xm2=xm2-1
    xm3=xm3-1
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,xm1
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,xm2
    call pgmdir$+"adc_sizemask.aon",m3$,m3,6,xm3
    goto l620

l700: rem --- Subheadings

    dim po$(po-1,"-"),iv$(iv-1,"-")
    x$=" PO "
    po$(fncenter(x$,po),4)=x$
    dw=min(dw,o[6]-o[3])
    x$=" Invoice "
    iv$(fncenter(x$,iv),9)=x$

rem --- Position file

    read (poe05_dev,key=firm_id$,dom=*next)

l1000: rem --- Read next header

    k$=key(poe05_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read record (poe05_dev) poe05a$
    x$=fnmask$(poe05a.vendor_id$(1,p[0]),m0$)+" "+poe05a.ap_inv_no$
    if aptype x$=poe05a.ap_type$+" "+x$

rem --- Position poe-25 PO Detail

    additional=0
    invamt=0
    invqty=0
    read (poe25_dev,key=poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$,dom=*next)

l1500: rem --- Read next PO Detail record

    k$=key(poe25_dev,end=l2500)
    if pos(poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$=k$)<>1 goto l2500
    read record (poe25_dev) poe25a$

rem --- Retrieve line code

    gosub l6400
    if pos(pom02a.line_type$="MV") goto l2400

rem --- Calculate variance

    qty=poe25a.qty_received
    if pom02a.line_type$="O" qty=1
    precision 2
    po_extension=round(poe25a.receipt_cost*qty,2)
    iv_extension=round(poe25a.unit_cost*qty,2)
    precision i[1]
    variance=iv_extension-po_extension

rem --- Accumulate totals needed for landed cost

    if pos(pos01a.land_method$="QC")=0 goto l1900
    if pom02a.land_cst_flg$<>"Y" goto l1900
    if cvs(poe25a.po_no$,3)="" goto l1850
    invamt=invamt+iv_extension
    invqty=invqty+qty
    goto l1900
l1850:
    additional=additional+iv_extension

l1900: rem --- Retrieve receipt detail record

    if poe25a.unit_cost=poe25a.receipt_cost then goto l2400
    dim l0$(25),l1$(64),l2$(32),l3$(22),l4$(40),l[12],description$(dw)
    received$=""
    find record (pot14_dev,key=firm_id$+poe25a.po_no$+poe25a.receiver_no$+poe25a.po_int_seq_ref$,dom=l2000) pot14a$
    if pot14a.firm_id$+pot14a.po_no$+pot14a.receiver_no$=pot04a.firm_id$+pot04a.po_no$+pot04a.receiver_No$ then goto l2000
    dim pot04a$:fattr(pot04a$)
    find record (pot04_dev,key=pot14a.firm_id$+pot14a.po_no$+pot14a.receiver_no$,dom=l2000) pot04a$
    if cvs(pot04a.recpt_date$,3)<>"" received$=fndate$(pot04a.recpt_date$)

l2000: rem --- Retrieve inventory item

    dim s0$(22),s1$(60),s2$(64),s3$(40),s4$(21),s6$(g[4]*6),s[12]
    description$(1)=poe25a.order_memo$
    if pom02a.line_type$<>"S" goto l2100
    dim ivm01a$:fattr(ivm01a$)
    find record (ivm01_dev,key=firm_id$+pot14a.item_id$,dom=*next) ivm01a$
    description$(1)=fnitem$(ivm01a.item_desc$,i[3],i[4],i[5])

l2100: rem --- Level breaks?

    if t0$<>poe25a.vendor_id$ gosub l6000
    if t1$<>poe25a.ap_inv_no$ gosub l6200
    if l+2>l9 gosub report_heading
    l=l+2
    vendor=vendor+variance
    report=report+variance
    on pos(pom02a.line_type$="SNO") goto l2400,l2200,l2200,l2300

l2200: rem --- Standard or Non-stock line

    dim pbuf$(width)
    pbuf$(o[1]+1)=poe25a.po_no$+"-"+poe25a.po_int_seq_ref$
    pbuf$(o[2]+1)=poe25a.receiver_no$
    pbuf$(o[3]+1)=ivm01a.item_id$(1,i[0])
    pbuf$(o[5]+1)=received$
    pbuf$(o[6]+1)=str(poe25a.qty_received:m2$)+" "+pot14a.unit_measure$
    pbuf$(o[7]+1)=str(poe25a.receipt_cost:m3$)
    pbuf$(o[8]+1)=str(po_extension:m1$)
    pbuf$(o[9]+1)=str(poe25a.unit_cost:m3$)
    pbuf$(o[10]+1)=str(iv_extension:m1$)
    pbuf$(o[11]+1)=str(variance:m1$)
    OutVect!.addItem(pbuf$)
    dim pbuf$(width)
    pbuf$(o[3]+1)=description$
    OutVect!.addItem(pbuf$)
    goto l2400

l2300: rem --- Other line
    
    dim pbuf$(width)
    pbuf$(o[1]+1)=poe25a.po_no$+"-"+poe25a.po_int_seq_ref$
    pbuf$(o[2]+1)=poe25a.receiver_no$
    pbuf$(o[5]+1)=received$
    pbuf$(o[7]+1)=str(poe25a.receipt_cost:m3$)
    pbuf$(o[8]+1)=str(po_extension:m1$)
    pbuf$(o[9]+1)=str(poe25a.unit_cost:m3$)
    pbuf$(o[10]+1)=str(iv_extension:m1$)
    pbuf$(o[11]+1)=str(variance:m1$)
    OutVect!.addItem(pbuf$)
    dim pbuf$(width)
    pbuf$(o[3]+1)=description$
    OutVect!.addItem(pbuf$)

l2400: rem --- Loop back for next line item

    goto l1500

l2500: rem --- Done with price variances. Update landed cost?

    if pos(pos01a.land_method$="QC")=0 goto l3900
    if pos01a.land_method$="Q" if invqty=0 goto l3900
    if pos01a.land_method$="C" if invamt=0 goto l3900

rem --- Position detail file for landed cost pass

    read (poe25_dev,key=poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$,dom=*next)

l3000: rem --- Read next detail

    k$=key(poe25_dev,end=l3900)
    if pos(poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$=k$)<>1 goto l3900
    read record (poe25_dev) poe25a$

rem --- Retrieve line code

    if cvs(poe25a.po_no$,3)="" goto l3800
    gosub l6400
    if pos(pom02a.line_type$="MV") goto l3800
    if pom02a.land_cst_flg$<>"Y" goto l3800

rem --- Retrieve detail record

    dim l0$(25),l1$(64),l2$(32),l3$(22),l4$(40),l[12]
    find record (pot14_dev,key=firm_id$+poe25a.po_no$+poe25a.receiver_no$+poe25a.po_int_seq_ref$,dom=l3800) pot14a$
    if pot14a.conv_factor=0 then if pos(pom02a.line_type$="ON") pot14a.conv_factor=1 else goto l3800

rem --- Calculate allocation

    cost=poe25a.unit_cost
    qty=poe25a.qty_received
    if qty=0 if pom02a.line_type$="O" qty=1 else goto l3800
    precision 2
    iv_extension=qty*cost
    precision i[1]
    if pos01a.land_method$="C" percent=(iv_extension*100)/invamt
    if pos01a.land_method$="Q" percent=(qty*100)/invqty
    amount=additional*percent/100
    landed=(iv_extension+amount)/qty

rem --- Write work file record

    dim u0$(24),u[1]
    dim pow17a$:fattr(pow17a$)
    pow17a.firm_id$=firm_id$
    pow17a.warehouse_id$=pot14a.warehouse_id$
    pow17a.item_id$=pot14a.item_id$
    pow17a.landed_cost=landed/pot14a.conv_factor
    write record (pow17_dev,key=pow17a.firm_id$+pow17a.warehouse_id$+pow17a.item_id$) pow17a$

l3800: rem --- Loop back for next detail

    goto l3000

l3900: rem --- Loop back for next header

    goto l1000

done: rem --- All done

    done=1
    gosub l6000
    if l+2>l9 gosub report_heading
    dim pbuf$(width);OutVect!.addItem(pbuf$)
    total$="Register"
    total=report
    gosub l6800

rem --- Run next overlay

    update$="pou_invreg.aon" 
    if errors then update$="";rem don't allow update if errors
    overlay$=update$
    if gl$="Y" overlay$=pgmdir$+"glr_recap.aon"
    
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+3
rem    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
rem    if status exitto std_exit

    HdrVect!.addItem("Purchase Price Variance")
    BrkVect!.addItem(str(OutVect!.size()))

    dim pbuf$(width)
    pbuf$(o[7]+1)=po$
    pbuf$(o[9]+1)=iv$
    OutVect!.addItem(pbuf$)
    dim pbuf$(width)
    pbuf$(o[0]+1)="Vendor"
    pbuf$(o[1]+1)="PO #"
    pbuf$(o[2]+1)="Rec #"
    pbuf$(o[3]+1)="Item"
    pbuf$(o[4]+1)="Invoice"
    pbuf$(o[5]+1)="Received"
    pbuf$(o[6]+m2-9+1)="Quantity UM"
    pbuf$(o[7]+m3-5+1)="Cost"
    pbuf$(o[8]+m1-10+1)="Extension"
    pbuf$(o[9]+m3-5+1)="Cost"
    pbuf$(o[10]+m1-10+1)="Extension"
    pbuf$(o[11]+m1-9+1)="Variance"
    OutVect!.addItem(pbuf$)
    return

l6000: rem --- Vendor Break

    if t0$="" goto l6100
    total$="Vendor "+vendor$
    total=vendor
    if vendor<>0 gosub l6800
l6100:
    if done goto l6190
    dim b0$(8),b1$(30),vendor$(31+m0)
    t0$=poe25a.vendor_id$
    vendor=0
    find record (apm01_dev,key=firm_id$+t0$,dom=*next) apm01a$
    vendor$(1)=fnmask$(apm01a.vendor_id$(1,p[0]),m0$)+" "+apm01a.vendor_name$
l6190:
    return

l6200: rem --- Invoice Break

    if l+5>l9 gosub report_heading
    dim pbuf$(width);OutVect!.addItem(pbuf$)
    dim pbuf$(width)
    pbuf$(o[0]+1)=vendor$
    pbuf$(o[4]+1)=poe25a.ap_inv_no$
    OutVect!.addItem(pbuf$)
    dim pbuf$(width);OutVect!.addItem(pbuf$)
    let t1$=poe25a.ap_inv_no$,l=l+3
    return

l6400: rem --- Retrieve line code
    if pom02a.firm_id$+pom02a.po_line_code$=firm_id$+poe25a.po_line_code$ then goto l6490
    find record (pom02_dev,key=firm_id$+poe25a.po_line_code$,dom=*next) pom02a$
l6490:
    return
rem --- Print total line
l6800:
    if l+1>l9 gosub report_heading
    let l=l+1,total$="Purchase Price Variance Total For "+cvs(total$,2)
    dim pbuf$(width)
    pbuf$(o[11]-len(total$)+1)=total$
    pbuf$(o[11]+1)=str(total:m1$)
    OutVect!.addItem(pbuf$)
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
