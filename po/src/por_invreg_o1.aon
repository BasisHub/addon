rem --- Purchase Order Invoice Register (Purchase Price Variance)
rem --- Program por_invreg_o1.aon v8.0.0 25Jul2007 (por_eb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/25/2007 11:41:10)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables

    table$=fnget_table$("")
    det_level$=fnget_fld_data$(table$,"detail_level")
    phase$=fnget_fld_data$(table$,"phase")

rem --- Initializations

    precision num(ivs01a.precision$)
    dim o[11]
    headings$[2]="Purchase Price Variance"
    headings$[3]=""
    headings=3
    done=0
    vendor=0
    report=0
    l=l9+1
    t0$=""
    t1$=""
    xm1=15
    xm2=12
    xm3=12
    dw=max(i[3]+i[4]+i[5],40)
    more=1

rem --- Resize masks if needed

    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    o[0]=0
    o[1]=m0+1
    o[2]=o[1]+12
    o[3]=o[2]+8
    o[4]=max(o[0]+m0+31,o[3]+9)

    while more
        o[11]=width-m1
        o[10]=o[11]-m1
        o[9]=o[10]-m3
        o[8]=o[9]-m1-1
        o[7]=o[8]-m3
        o[6]=o[7]-m2-3
        o[5]=o[6]-9
        po=o[9]-o[7]
        iv=o[11]-o[9]
        if o[5]>o[4]+12 if o[5]>o[3]+i[0] break
        xm1=xm1-1
        xm2=xm2-1
        xm3=xm3-1
        call pgmdir$+"adc_sizemask.aon",m1$,m1,10,xm1
        call pgmdir$+"adc_sizemask.aon",m2$,m2,9,xm2
        call pgmdir$+"adc_sizemask.aon",m3$,m3,6,xm3
    wend

rem --- Subheadings

    dim po$(po-1,"-"),iv$(iv-1,"-")
    x$=" PO "
    po$(fncenter(x$,po),4)=x$
    dw=min(dw,o[6]-o[3])
    x$=" Invoice "
    iv$(fncenter(x$,iv),9)=x$

rem --- Position file

    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
    read (poe05_dev,key=firm_id$,dom=*next)

    while more; rem --- Read next header

        poe05a_key$=key(poe05_dev,end=*break)
        if pos(firm_id$=poe05a_key$)<>1 break
        read record (poe05_dev) poe05a$
        x$=fnmask$(poe05a.vendor_id$,m0$)+" "+poe05a.ap_inv_no$
        if aptype x$=poe05a.ap_type$+" "+x$

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status

rem --- Position poe-25 PO Detail

        additional=0
        invamt=0
        invqty=0
        p05_key$=poe05a.firm_id$+poe05a.ap_type$+poe05a.vendor_id$+poe05a.ap_inv_no$
        read (poe25_dev,key=p05_key$,dom=*next)

        while more; rem --- Read next PO Detail record

            poe25a_key$=key(poe25_dev,end=*break)
            if pos(poe05a.firm_id$=poe25a_key$)<>1 break
            read record (poe25_dev) poe25a$

rem --- Retrieve line code

            gosub ret_line_code
            if pos(pom02a.line_type$="MV") continue

rem --- Calculate variance

            qty=poe25a.qty_received
            if pom02a.line_type$="O" qty=1
            precision 2
            po_extension=poe25a.receipt_cost*qty
            iv_extension=poe25a.unit_cost*qty
            precision num(ivs01a.precision$)
            variance=iv_extension-po_extension

rem --- Accumulate totals needed for landed cost

            if pos(r3$(55,1)="QC")<>0

                if pom02a.land_cst_flg$<>"Y"

                    if cvs(poe25a.po_no$,2)<>""

                        invamt=invamt+iv_extension
                        invqty=invqty+qty

                    else

                        additional=additional+iv_extension

                    fi

                endif

            endif

rem --- Retrieve receipt detail record

            if poe25a.unit_cost=poe25a.receipt_cost continue
            dim l0$(25),l1$(64),l2$(32),l3$(22),l4$(40),l[12],description$(dw)
            pot14a_key$=firm_id$+poe25a.vendor_id$+poe25a.po_no$+poe25a.receiver_no$+poe25a.po_line_no$
            received$=""
            find record (pot14_dev,key=pot14a_key$,dom=ret_inv_item) pot14a$
            if pot14a_key$<>firm_id$+pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$+pot04a.receiver_no$

                pot04a_key$=pot14a_key$
                find record (pot04_dev,key=pot04a_key$,dom=ret_inv_item) pot04a$
                if cvs(pot04a.recpt_date$,2)<>"" received$=fndate$(pot04a.recpt_date$)

            endif

ret_inv_item: rem --- Retrieve inventory item

            dim s0$(22),s1$(60),s2$(64),s3$(40),s4$(21),s6$(g[4]*6),s[12]
            description$(1)=poe25a.order_memo$

            if pom02a.line_type$<>"S"

                ivm01a_key$=firm_id$+pot14a.item_id$
                ivm01a.code_desc$=nf$
                ivm01a.gl_exp_acct$=""
                find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$
                description$(1)=ivm01a.description$

            endif

rem --- Level breaks?

            if t0$<>poe25a.vendor_id$ gosub vend_brk
            if t1$<>poe25a.ap_inv_no$ gosub inv_brk
            if l+2>l9 gosub report_heading
            l=l+2
            vendor=vendor+variance
            report=report+variance

            action=pos(pom02a.line_type$="SNO")
            std_line=1
            non_stock_line=2
            other_line=3

            switch action

                case std_line; rem --- Standard line
                case non_stock_line; rem --- Non-stock line

                    print (printer_dev) @(o[1]),poe25a.po_no$,"-",poe25a.po_line_no$,
:                                       @(o[2]),poe25a.receiver_no$,
:                                       @(o[3]),ivm01a.item_id$,
:                                       @(o[5]),received$,
:                                       @(o[6]),poe25a.qty_received:m2$," ",pot14a.unit_measure$,
:                                       @(o[7]),poe25a.receipt_cost:m3$,
:                                       @(o[8]),po_extension:m1$,
:                                       @(o[9]),poe25a.unit_cost:m3$,
:                                       @(o[10]),iv_extension:m1$,
:                                       @(o[11]),variance:m1$

                    print (printer_dev)@(o[3]),ivm01a.description$
                    continue

                case other_line; rem --- Other line

                    print (printer_dev) @(o[1]),poe25a.po_no$,"-",poe25a.po_line_no$,
:                                       @(o[2]),poe25a.receiver_no$,
:                                       @(o[5]),received$,
:                                       @(o[7]),poe25a.receipt_cost:m3$,
:                                       @(o[8]),po_extension:m1$,
:                                       @(o[9]),poe25a.unit_cost:m3$,
:                                       @(o[10]),iv_extension:m1$,
:                                       @(o[11]),variance:m1$

                    print (printer_dev)@(o[3]),ivm01a.description$
                    break

                case default
                    continue
            swend

        wend;   rem --- Loop back for next line item

rem --- Done with price variances. Update landed cost?

        if pos(r3$(55,1)="QC")=0 continue
        if r3$(55,1)="Q" if invqty=0 continue
        if r3$(55,1)="C" if invamt=0 continue

rem --- Postion detail file for landed cost pass

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        read (poe25_dev,key=p05_key$,dom=*next)

        while more; rem --- Read next detail

            poe25a_key$=key(poe25_dev,end=*break)
            if pos(p05_key$=poe25a_key$)<>1 break
            read record (poe25_dev) poe25a$
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Retrieve line code

            if cvs(poe25a.po_no$,2)="" continue
            gosub ret_line_code
            if pos(poe25a.line_type$="MV") continue
            if pom02a.land_cst_flg$<>"Y" continue

rem --- Retrieve detail record

            dim l0$(25),l1$(64),l2$(32),l3$(22),l4$(40),l[12]
            pot14a_key$=firm_id$+poe25a.vendor_id$+poe25a.po_no$+poe25a.receiver_no$+poe25a.po_line_no$
            find record (pot14_dev,key=pot14a_key$,dom=*continue) pot14a$
            if pot14a.conv_factor=0 if pos(pom02a.line_type$="ON") pot14a.conv_factor=1 else continue

rem --- Calculate allocation

            cost=poe25a.unit_cost
            qty=poe25a.qty_received
            if qty=0 if pom02a.line_type$="O" qty=1 else continue
            precision 2
            iv_extension=qty*cost
            precision num(ivs01a.precision$)
            if r3$(55,1)="C" percent=(iv_extension*100)/invamt
            if r3$(55,1)="Q" percent=(qty*100)/invqty
            amount=additional*percent/100
            landed=(iv_extension+amount)/qty

rem --- Write work file record

            dim u0$(24),u[1]
            pow17a_key$=firm_id$+pot14a.item_id$
            pow17a.landed_cost=landed/pot14a.conv_factor
            write record (pow17_dev,key=pow17a_key$) pow17a$

        wend;   rem --- Loop back for next detail

    wend;   rem --- Loop back for next header

done: rem --- All done

    done=1
    gosub vend_brk
    if l+2>l9 gosub report_heading
    print (printer_dev)""
    total$="Register"
    total=report
    gosub print_variance
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    update$="pou_ea.aon"
    if gl$<>"Y" run update$,err=std_exit
    run pgmdir$+"glr_recap.aon"

report_heading: rem --- Report Heading

    l=headings+3
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[7]),po$,
:                       @(o[9]),iv$
    print (printer_dev) @(o[0]),"Vendor",
:                       @(o[1]),"PO #",
:                       @(o[2]),"Rec #",
:                       @(o[3]),"Item",
:                       @(o[4]),"Invoice",
:                       @(o[5]),"Received",
:                       @(o[6]+m2-9),"Quantity UM",
:                       @(o[7]+m3-5),"Cost",
:                       @(o[8]+m1-10),"Extension",
:                       @(o[9]+m3-5),"Cost",
:                       @(o[10]+m1-10),"Extension",
:                       @(o[11]+m1-9),"Variance"
    return

vend_brk: rem --- Vendor Break

    if t0$<>""

        total$="Vendor "+vendor$
        total=vendor
        if vendor<>0 gosub print_variance

    endif
    if done return
    dim b0$(8),b1$(30),vendor$(31+m0)
    t0$=poe25a.vendor_id$
    apm01a_key$=firm_id$+t0$
    apm01a$=nf$
    vendor=0
    find record (apm01_dev,key=apm01a_key$,dom=*next) apm01a$
    vendor$(1)=fnmask$(apm01a.vendor_id$,m0$)+" "+apm01a.vendor_name$
    return

inv_brk: rem --- Invoice Break

    if l+5>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev) @(o[0]),vendor$,
:                       @(o[4]),poe25a.ap_inv_no$
    print (printer_dev) ""
    let t1$=poe25a.ap_inv_no$,l=l+3
    return

ret_line_code: rem --- Retrieve line code

    if firm_id$+poe25a.po_line_code$<>y0$ return
    let pom02a_key$=firm_id$+poe25a.po_no$,pom02a.code_desc$=""
    find record (pom02_dev,key=pom02a_key$,dom=*next) pom02a$
    return

rem --- Print total line

print_variance:

    if l+1>l9 gosub report_heading
    let l=l+1,total$="Purchase Price Variance Total For "+cvs(total$,2)
    print (printer_dev) @(o[11]-len(total$)),total$,
:                       @(o[11]),total:m1$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)
escape; rem error
    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
