rem --- Open Purchase Orders Report
rem --- Program por_openpo v8.0.0 09Jul2007 (por_ia)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:08:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=18,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="apm-01",ids$[1]="APM_VENDMAST"
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[4]="apm-05",ids$[4]="APM_VENDADDR"
    files$[5]="apc_termscode",ids$[5]="APC_TERMSCODE";rem "apm-10c"
    files$[6]="arm-01",ids$[6]="ARM_CUSTMAST"
    files$[7]="arm-03",ids$[7]="ARM_CUSTSHIP"
    files$[8]="ivm-01",ids$[8]="IVM_ITEMMAST"
    files$[9]="ivm-05",ids$[9]="IVM_ITEMVEND"
    files$[10]="ivc_whsecode",ids$[10]="IVC_WHSECODE";rem "ivm-10c"
    files$[11]="poe-02",ids$[11]="POE_POHDR"
    files$[12]="poe-12",ids$[12]="POE_PODET"
    files$[13]="poe-02",ids$[13]="POE_POHDR"
    files$[14]="pom-02",ids$[14]="POC_LINECODE"
    files$[15]="aps_params",ids$[15]="APS_PARAMS"
    files$[16]="ars_params",ids$[16]="ARS_PARAMS"
    files$[17]="ivs_params",ids$[17]="IVS_PARAMS"
    files$[18]="pos_params",ids$[18]="POS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01a_dev=channels[1]
    apm01_dev2=channels[2]
    apm05a_dev=channels[4]
    apm10c_dev=channels[5]
    arm01_dev=channels[6]
    arm03_dev=channels[7]
    ivm01a_dev=channels[8]
    ivm05a_dev=channels[9]
    ivm10c_dev=channels[10]
    poe02_dev=channels[11]
    poe12_dev=channels[12]
    poe02_dev2=channels[13]
    pom02a_dev=channels[14]
    aps01a_dev=channels[15]
    ars01a_dev=channels[16]
    ivs01a_dev=channels[17]
    pos01a_dev=channels[18]

rem --- Dimension string templates
    dim apm01a$:templates$[1]
    dim apm01b$:templates$[2],apm05a$:templates$[4],
:       apm10c$:templates$[5],arm01a$:templates$[6],arm03a$:templates$[7],
:       ivm01a$:templates$[8],ivm05a$:templates$[9],ivm10c$:templates$[10],
:       poe02a$:templates$[11],poe12a$:templates$[12],
:       pom02a$:templates$[14],aps01a$:templates$[15],ars01a$:templates$[16],
:       ivs01a$:templates$[17],pos01a$:templates$[18]

rem --- Assign form input values to local variables

    
    printseq$=option!.getOptionData("report_sequence")
    whse$=option!.getOptionData("warehouse_id")
    pofrom$=option!.getOptionData("po_no_01")
    pothru$=option!.getOptionData("po_no_02")
    vendfrom$=option!.getOptionData("vendor_id_01")
    vendthru$=option!.getOptionData("vendor_id_02")
    whichdate$=option!.getOptionData("date_type")
    datefrom$=option!.getOptionData("pick_date_1")
    datethru$=option!.getOptionData("pick_date_2")
    altfrom$=option!.getOptionData("alt_sequence_1")
    altthru$=option!.getOptionData("alt_sequence_2")

    if whse$="" whse$="ALL"
    if vendfrom$="" vendfrom$=altfrom$
    if vendthru$="" vendthru$=altthru$
    
rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (pos01a_dev,key=pos01a_key$,err=std_missing_params) pos01a$

    dim info$[20],desc[3],desclen[3]
    ar$="N"
    when$=sysinfo.system_date$
    
    ivprecision=num(ivs01a.precision$)
    itemlen=ivs01a.item_id_len
    desclen[1]=num(ivs01a.desc_len_01$)
    desclen[2]=num(ivs01a.desc_len_02$)
    desclen[3]=num(ivs01a.desc_len_03$)    

    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    if ar$="Y"
        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    endif

rem --- masks

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","V","",m5$,0,0

    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vendomask$,0,vendlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",customask$,0,custlen

rem --- Init Data

    precision ivprecision
    dim vendfname$(30),vendtname$(30),whsename$(24)

    if whse$<>"ALL"
        find record (ivm10c_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$;whsename$(1)=ivm10c.short_name$
    endif
    datetype$="Order Date"
    if whichdate$="P" datetype$="Promised By Date"
    if whichdate$="R" datetype$="Date Required"
    if whichdate$="D" datetype$="Don't Deliver Before Date"

rem   type$="P"; rem "Purchase Order -- poc_lb.bbx
    call pgmdir$+"adc_sizemask.aon",m1$,m1,9,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,8,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,4,12
    call pgmdir$+"adc_sizemask.aon",m5$,m5,6,9

rem --- Run report overlay

    run pgmdir$+"por_openpo_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
