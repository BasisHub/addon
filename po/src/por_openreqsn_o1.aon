rem --- Open Purchase Requisitions Report (Print Overlay)
rem --- Program por_openreqsn_o1 v8.0.0 17Jul2007 (por_gb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:47:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Init Data

        precision ivprecision
        dim a0$(15),a1$(160),a[8],vendor$(6)
        grandtot=0
        printvtot$="N"

        initializing$="Y"; rem "Init files 1st time through
        more=1
        call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQHDR","PRIMARY",poe01a_key_pritpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQHDR","ALT_KEY_01",poe01a_key_alttpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQDET","PRIMARY",poe11a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","ALT_KEY_02",apm01a_key_tpl$,rd_table_chans$[all],status$

        if vendfrom$="" firstvend$=fill(6) else firstvend$=vendfrom$
        if reqfrom$="" firstreq$=fill(7) else firstreq$=reqfrom$

rem --- Headings and print positions

        headings=8
        dim headings$[headings],o[13]
        width=132
        page=0
        l9=59
        l=l9+1
        headings$[0]=sysinfo.firm_name$

rem --Colum Heading
        dim columns$[8,10]
            columns=8
            columns$[0,0]="Seq  Cd  Wh  Item ",     columns$[0,1]="C",columns$[0,2]="30"
            columns$[1,0]="Date^Required",          columns$[1,1]="C",columns$[1,2]="10"
            columns$[2,0]="Date^Promied",           columns$[2,1]="C",columns$[2,2]="10"
            columns$[3,0]="Not^Before",             columns$[3,1]="C",columns$[3,2]="15"
            columns$[4,0]="Conv^UMFactor",          columns$[4,1]="C",columns$[4,2]="10"
            columns$[5,0]="Qty^Req'd",              columns$[5,1]="C",columns$[5,2]="20"
            columns$[6,0]="Balance^Due",            columns$[6,1]="C",columns$[6,2]="10"
            columns$[7,0]="Unit^Cost",              columns$[7,1]="C",columns$[7,2]="10"
            columns$[8,0]="Extension",              columns$[8,1]="N",columns$[8,2]="15",columns$[8,10]="T"


        gosub assignheads

        action=pos(printseq$="RAV")
        printbyreq=1
        printbyalt=2
        printbyvend=3

        switch action
            case printbyreq
                headings$[1]="By Requisition"
                break
            case printbyalt
                headings$[1]="By Alternate Sequence"
                break
            case printbyvend
                headings$[1]="By Vendor"
                break
            case default
                exitto done
                break
        swend

        headings$[2]="From Vendor : "+vendf$+" "+vendfname$(1,20)
        headings$[3]="To Vendor     : "+vendt$+" "+vendtname$(1,20)
        headings$[4]="From "+datetype$+": "+datef$
        headings$[5]="To   "+datetype$+"  : "+datet$
        headings$[6]=reqpagehead$
        headings$[7]=whsepagehead$


rem --- Position files

        call pgmdir$+"adc_progress.aon","N","","","","",0,poe01_dev,1,meter_num,status

rem --- Sorts

     while more

        action=pos(printseq$="RAV")
        sortbyreq=1
        sortbyalt=2
        sortbyvend=3

        switch action ;rem  Tswitch

            case sortbyreq; rem --- Sort by requisition
                dim poe01_rqkey$:poe01a_key_alttpl$
                dim poe01a_key$:poe01a_key_pritpl$
                if initializing$<>"N"
                    initializing$="N"
                    read (poe01_dev2,knum=1,key=firm_id$+firstreq$,dom=*next)
             
                    if firstreq$<>"" poe01a_key$=firm_id$+firstreq$+firstvend$;read (poe01_dev2,knum=1,key=poe01a_key$,dom=*next);break
                endif

                poe01_rqkey$=key(poe01_dev2,knum=1,end=done);read(poe01_dev2,knum=1,key=poe01_rqkey$)
                poe01a_key$=poe01_rqkey.firm_id$+poe01_rqkey.vendor_id$+poe01_rqkey.req_no$
             
                break
                
            case sortbyalt;  rem --- Sort by alternate sequence
                dim apm01a_key$:apm01a_key_tpl$
                dim poe01a_key$:poe01a_key_pritpl$

                if initializing$<>"N"
                    initializing$="N"
                    read (apm01_dev2,knum=2,key=firm_id$+altfrom$,dom=*next)
                endif

rem --- Find a POE01 record using alt seq
        while more ;  rem  alt seq loop
                    apm01a_key$=key(apm01_dev2,knum=2,end=done)
                    if apm01a_key.firm_id$<>firm_id$ goto done
                    if altthru$<>""if apm01a_key.alt_sequence$(1,len(altthru$))>altthru$ goto done
                    apm01b_key$=apm01a_key.firm_id$+apm01a_key.vendor_id$
                    read (apm01_dev2,knum=2,key=apm01a_key$); rem "Move ptr
                    
                    read (poe01_dev,key=apm01b_key$,dom=*next)
                    poe01a_key$=key(poe01_dev,end=*continue)
                    if poe01a_key.firm_id$+poe01a_key.vendor_id$=apm01b_key$ break
         wend
                break

            case sortbyvend;     rem --- Sort by vendor
                
                dim poe01a_key$:poe01a_key_pritpl$
                if initializing$<>"N"
                    initializing$="N"
               
                  read (poe01_dev,key=firm_id$+firstvend$,knum=0,dom=*next)
               
                  if firstvend$<>"" poe01a_key$=firm_id$+firstvend$+firstreq$;read (poe01_dev,key=poe01a_key$,dom=*next);break
                endif
rem --- Read through req headers
                poe01a_key$=key(poe01_dev,knum=0,end=done)
                break

            case default
                goto done
                break

        swend; rem  Tswitch

            while more ; rem  MainHdr Loop
            
            if poe01a_key.firm_id$<>firm_id$ goto done

            read record (poe01_dev,key=poe01a_key$) poe01a$

rem --- Test Ranges

            headrecprinted$="N"
            if reqfrom$<>"" then if poe01a.req_no$<reqfrom$ and printseq$<>"A" break
            if reqthru$<>"" then if poe01a.req_no$>reqthru$ and printseq$<>"A" break
            if printseq$<>"A"
                if vendfrom$<>"" and poe01a.vendor_id$<vendfrom$ and printseq$<>"A" break
                if vendthru$<>"" and poe01a.vendor_id$>vendthru$ and printseq$<>"A" break
            endif

            if whse$<>"ALL" if poe01a.warehouse_id$<>whse$ break
            gosub gettestdate_header
            if datefrom$<>"" and testdateh$<datefrom$ continue
            if datethru$<>"" and testdateh$>datethru$ continue

rem --- Header passed tests
                gosub testbreaks
                headrecprinted$="Y"

            endif

rem --- On to Details

            dim poe11a_key$:poe11a_key_tpl$
            
            p01_key$=poe01a.firm_id$+poe01a.vendor_id$+poe01a.req_no$
            read (poe11_dev,key=p01_key$,dom=*next)

rem --- Test Req Detail date range

            while more ; rem Detail Loop

                poe11a_key$=key(poe11_dev,end=*break)
                if poe11a_key.firm_id$+poe11a_key.vendor_id$+poe11a_key.req_no$<>poe01a_key.firm_id$+poe01a_key.vendor_id$+poe01a_key.req_no$ break
                read record (poe11_dev,key=poe11a_key$) poe11a$

                if whse$="ALL" or poe11a.warehouse_id$=whse$

                    gosub gettestdate_detail
                    if datefrom$="" or testdated$>=datefrom$

                        if datethru$="" or testdated$<=datethru$

rem --- Detail passed, so print header if nec & print detail

                       call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                            if headrecprinted$<>"Y"
                                gosub testbreaks
                                headrecprinted$="Y"
                            endif
                            gosub printdetail

                         endif

                     endif

                endif

rem --- Accumulate totals; then get next detail

                reqtot=reqtot+extension
                vendtot=vendtot+extension
                grandtot=grandtot+extension
                extension=0
                extension$=""

            wend 

rem --- Done w/detail for this req

            if headrecprinted$="Y" gosub reqtotals

rem --- Loop up for next header record via sort files
            
rem            if printseq$="R" break
            if printseq$<>"A" break;rem  continue

rem --- See if there's another req for vend before getting next alt seq

            poe01a_key$=key(poe01_dev,end=*break)
   
            if poe01a_key.vendor_id$=vendor$ continue else break
            
        wend ; rem Mainhdr
rem        if printseq$="R" 
    wend ; rem  Tripread

done: rem --- All Done

        if printseq$<>"R" gosub vendtotals
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("Total For Report")
        xwk=fnblank(7)
        OutVect!.addItem(str(grandtot:m1$))
        goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

        dim datereq$(8),dateprom$(8),notb4date$(8)
        whse_detail$=poe11a.warehouse_id$
        itemnum$=poe11a.item_id$
        memo$=poe11a.order_memo$
        unitmeas$=poe11a.unit_measure$
        if poe11a.reqd_date$<>fill(8) datereq$=fndate$(poe11a.reqd_date$)
        if poe11a.promise_date$<>fill(8) dateprom$=fndate$(poe11a.promise_date$)
        if poe11a.not_b4_date$<>fill(8) notb4date$=fndate$(poe11a.not_b4_date$)
        convfact$=str(poe11a.conv_factor:m5$) 
        reqqty$=str(poe11a.req_qty:m2$)
        baldue$=reqqty$;rem  str(poe11a.req_qty-poe11a.reserved_num:m2$)
        unitcost$=str(poe11a.unit_cost:m3$)
        wonum$=poe11a.wo_no$
        woseq$=poe11a.sequence_no$

rem --- Get Drop Ship flag & Line Type

    linetype$="N"
    dropship$="N"
        find record (pom02a_dev,key=poe11a_key.firm_id$+poe11a.po_line_code$,dom=get_item_disc) pom02a$
    linetype$=pom02a.line_type$
    dropship$=pom02a.dropship$

get_item_disc: rem --- Get Item Desc for S and N type lines

    if linetype$<>"N"
        dim itemdesc$(60),x1$(60)
        ivm01a.item_desc$="Not On File"
        find record (ivm01_dev,key=firm_id$+itemnum$,dom=get_ext) ivm01a$
        ivm01a.item_desc$=fnitem$(x1$,desclen[1],desclen[2],desclen[3])
    else
         itemdesc$=memo$
    endif

get_ext: rem --- Get extension

        gosub calc_extension

rem --- Get Vendor's Part #

        dim vpartnum$(20)
        i05_key$=poe11a.firm_id$+poe11a.vendor_id$+itemnum$
        find record (ivm05_dev,key=i05_key$,dom=*next) ivm05a$

rem --- Format common part of print line

        dim pline$(132)
        pline$(1)=poe11a.po_line_no$+" "+poe11a.po_line_code$+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

    if pos(linetype$="MOV")<>0

        if linetype$="V" pline$(o[3]+1)=memo$(1,20) else pline$(o[3]+1)=memo$
        if linetype$="O" pline$(o[11]+1,m3)=unitcost$,pline$(o[12]+1)=extension$

        OutVect!.addItem(pline$)
        xwk=fnblank(8)

        l=l+1
    else

rem --- Print Line Types 'S' & 'N'

        if pos(linetype$="SN")<>0

            OutVect!.addItem(poe11a.po_line_no$+" "+poe11a.po_line_code$+" "+whse_detail$+" "+itemnum$(1,itemlen))
            OutVect!.addItem(datereq$)
            OutVect!.addItem(dateprom$)
            OutVect!.addItem(notb4date$)
            if linetype$="S" then
                OutVect!.addItem(unitmeas$+" "+convfact$)
            else
                OutVect!.addItem(unitmeas$)
            endif
            OutVect!.addItem(reqqty$)
            OutVect!.addItem(baldue$)
            OutVect!.addItem(unitcost$)
            OutVect!.addItem(extension$)

            OutVect!.addItem("     "+itemdesc$(1,40))
            if wonum$<>fill(7)
                OutVect!.addItem("WO: "+wonum$+"-"+woseq$)
            else
                xwk=fnblank(1)
            endif

            xwk=fnblank(7)

            l=l+2
            if vpartnum$<>fill(20)

                OutVect!.addItem("     "+"Vendor's Part Number "+vpartnum$)
                xwk=fnblank(8)
                l=l+1
            endif

rem --- Print drop ship info if applicable

            if dropship$="Y" if ar$<>"N"

                dim custinfo$(321),dropinfo$(173),custaddr$(120),dropaddr$(120)
                custname$="Not On File"
                dropname$="Not On File"
                find record (arm01_dev,key=poe11a.firm_id$+poe11a.customer_no$,dom=brnch2) arm01a$
                custname$=arm01a.cust_name$
                custaddr$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_line_3$+               arm01a.city$+arm01a.state_code$+arm01a.zip_code$
                call pgmdir$+"adc_address.aon",custaddr$,24,4,9,30

brnch2:

                a03_key$=poe11a.firm_id$+poe11a.customer_id$+poe11a.shipto_no$
                find record (arm03_dev,key=a03_key$,dom=brnch3) arm03a$
                dropname$=arm03a.name$
                dropaddr$=arm03a.addr_line_1$+arm03a.addr_line_2$+arm03a.addr_line_3$+               arm01a.city$+arm01a.state_code$+arm01a.zip_code$
                call pgmdir$+"adc_address.aon",dropaddr$,24,4,9,30

brnch3:


                OutVect!.addItem("Drop Ship Above Line To Customer"+fnmask$(poe11a.customer_id$(1,custlen),customask$))
                OutVect!.addItem("Order "+poe11a.order_no$+" "+poe11a.line_no$)
                OutVect!.addItem("Ship To:"+fnmask$(poe11a.shipto_no$(1,custlen),customask$))
                xwk=fnblank(6)

                OutVect!.addItem("Name "+custname$+" "+dropname$)
                OutVect!.addItem("Address "+custaddr$(1,30)+" "+dropaddr$(1,30)) 
                xwk=fnblank(7)

                l=l+3

                if custaddr$(31,30)<>fill(30) or dropaddr$(31,30)<>fill(30) then
                    OutVect!.addItem(custaddr$(31,30)+dropaddr$(31,30))
                    xwk=fnblank(8)
                    let l=l+1
                endif

                if custaddr$(61,30)<>fill(30) or dropaddr$(61,30)<>fill(30) then
                    OutVect!.addItem(custaddr$(61,30)+dropaddr$(61,30))
                    xwk=fnblank(8)
                    let l=l+1
                endif

                if custaddr$(91,30)<>fill(30) or dropaddr$(91,30)<>fill(30) then
                    OutVect!.addItem(custaddr$(91,30)+dropaddr$(91,30))
                    xwk=fnblank(8)
                    let l=l+1
                endif

            endif

                endif

    endif

                return

assignheads: rem --- Assign headings variables

        if printseq$="A" if vendfrom$="" vendf$="First" else vendf$=vendfrom$
        if printseq$="A" if vendthru$="" vendt$="Last" else vendt$=vendthru$
        if printseq$<>"A"
            if vendfrom$="" vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
            if vendthru$="" vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
        endif

        if reqfrom$="" reqf$="First" else reqf$=reqfrom$
        if reqthru$="" reqt$="Last" else reqt$=reqthru$
        if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
        if datethru$="" datet$="Last" else datet$=fndate$(datethru$)
        reqpagehead$="From Requisition "+reqf$+" Through "+reqt$
        whsepagehead$="For Warehouse "+whse$+" "+cvs(whsename$,2)
        return

gettestdate_header: rem --- Determine date to use when testing range

        action=pos(whichdate$="OPRD")
        ordr_h=1
        prom_h=2
        reqd_h=3
        notb4_h=4

        switch action

           case ordr_h
                testdateh$=poe01a.ord_date$
                break
            case prom_h
                testdateh$=poe01a.promise_date$
                break
            case reqd_h
                testdateh$=poe01a.reqd_date$
                break
            case notb4_h
                testdateh$=poe01a.not_b4_date$
                break
            case default
                testdateh$=poe01a.ord_date$
                break
        swend

        return

gettestdate_detail: rem --- Determine date to use when testing range in detail

        action=pos(whichdate$="OPRD")
        ordr_d=1
        prom_d=2
        reqd_d=3
        notb4_d=4

        switch action
            case ordr_d
                testdated$=poe01a.ord_date$
                break
            case prom_d
                testdated$=poe11a.promise_date$
                break
            case reqd_d
                testdated$=poe11a.reqd_date$
                break
            case notb4_d
                testdated$=poe11a.not_b4_date$
                break
            case default
                testdated$=poe01a.ord_date$
                break
        swend

        return

testbreaks: rem --- Test for Breaks

        if poe01a.vendor_id$<>vendor$
            if printvtot$="Y" if printseq$<>"R" gosub vendtotals
            gosub newvendor
            if printseq$="R"

                gosub newreq
                return

            endif

        endif

        if poe01a.req_no$<>reqnum$ gosub newreq
        return

newvendor: rem --- New Vendor

        dim c0$(8),c1$(195)
        vendtot=0
        vendname$="Not On File"
        vendor$=poe01a.vendor_id$
        printvtot$="Y"
        a01_key$=firm_id$+vendor$
        find record (apm01_dev,knum=0,key=a01_key$,dom=brnch4) apm01a$
        vendname$=apm01a.vendor_name$

brnch4:

        OutVect!.addItem("Vendor "+fnmask$(vendor$(1,vendlen),vendomask$)+" "+vendname$)
        xwk=fnblank(8)
        l=l+1
        return

newreq: rem --- New Requisition

        reqtot=0
        reqnum$=poe01a.req_no$
        termsdesc$="Not On File"
        paddrdesc$=""
        shpwhsdesc$="Not On File"
        dim d0$(26),r0$(10),r1$(160),x0$(160)
        a10_key$=firm_id$+"C"+poe01a.terms_code$
        find record (apm10_dev,key=a10_key$,dom=brnch5) apm10c$
        termsdesc$=apm10c.code_desc$

brnch5:
        find record (apm05_dev,key=firm_id$+vendor$+poe01a.purch_addr$,dom=brnch6) apm05a$
        paddrdesc$=apm05a.name$(1,24)

brnch6:
        find record (ivm10_dev,key=firm_id$+"C"+poe01a.warehouse_id$,dom=brnch7) ivm10c$
        shpwhsdesc$=ivm10c.short_name$

brnch7:

        dim dateord$(8)
        if poe01a.ord_date$<>fill(8) dateord$=fndate$(poe01a.ord_date$)

        xwk=fnblank(9)
        OutVect!.addItem("Req#: "+reqnum$+" "+"Ordered "+dateord$)
        xwk=fnblank(2)
        OutVect!.addItem("Terms "+poe01a.terms_code$+" "+termsdesc$)
        xwk=fnblank(1)
        OutVect!.addItem("Ship Via "+poe01a.ap_ship_via$)
        xwk=fnblank(3)
        if paddrdesc$<>"" then
            OutVect!.addItem("Purchase From "+poe01a.purch_addr$+" "+paddrdesc$)
            xwk=fnblank(8)
        else
            xwk=fnblank(9)
        endif
        xwk=fnblank(2)
        OutVect!.addItem("Ack By "+poe01a.acknowledge$)
        xwk=fnblank(2)
        OutVect!.addItem("F.O.B. "+poe01a.fob$)
        xwk=fnblank(2)
        OutVect!.addItem("Ship To  "+poe01a.warehouse_id$+"   "+shpwhsdesc$)
        xwk=fnblank(9)
        l=l+4
        return

vendtotals: rem --- Print Vendor total

        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("Total For Vendor "+fnmask$(vendor$(1,vendlen),vendomask$))
        xwk=fnblank(7)
        OutVect!.addItem(str(vendtot:m1$))
        xwk=fnblank(9)
        l=l+1
        return

reqtotals: rem --- Print Requisition total

        xwk=fnblank(9)
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("Total For Req # "+reqnum$)
        xwk=fnblank(7)
        OutVect!.addItem(str(reqtot:m1$))
        reqnum$=""
        let l=l+1
        return

rem --- Calc extension for S, N and O types; init it for others

calc_extension:

        if pos(linetype$="SNO")=0 return
        let qty=poe11a.req_qty
        if linetype$="O" qty=1
        precision 2

        let extension=poe11a.unit_cost*qty,extension$=str(extension:m1$)
        precision ivprecision
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end