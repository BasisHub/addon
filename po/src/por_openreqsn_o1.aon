rem --- Open Purchase Requisitions Report (Print Overlay)
rem --- Program por_openreqsn_o1 v8.0.0 17Jul2007 (por_gb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:47:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8],vendor$(6)
    grandtot=0
    printvtot$="N"

    initializing$="Y"; rem "Init files 1st time through
    more=1
    recs=0
    total_recs=0

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQHDR","PRIMARY",poe01a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQHDR","AO_VEND_REQ",poe01a_key_alttpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQDET","PRIMARY",poe11a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","AO_ALTSEQ_VEND",apm01a_key_tpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    headings=8
    dim headings$[headings],o[13]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$

rem --Colum Heading

    dim columns$[8,10]
    columns=8
    columns$[0,0]=Translate!.getTranslation("AON_CD__WH__ITEM_"),     columns$[0,1]="C",columns$[0,2]="30"
    columns$[1,0]=Translate!.getTranslation("AON_DATE^REQUIRED"),          columns$[1,1]="C",columns$[1,2]="10"
    columns$[2,0]=Translate!.getTranslation("AON_DATE^PROMIED"),           columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_NOT^BEFORE"),             columns$[3,1]="C",columns$[3,2]="15"
    columns$[4,0]=Translate!.getTranslation("AON_CONV^UMFACTOR"),          columns$[4,1]="C",columns$[4,2]="10"
    columns$[5,0]=Translate!.getTranslation("AON_QTY^REQ'D"),              columns$[5,1]="C",columns$[5,2]="20"
    columns$[6,0]=Translate!.getTranslation("AON_BALANCE^DUE"),            columns$[6,1]="C",columns$[6,2]="10"
    columns$[7,0]=Translate!.getTranslation("AON_UNIT^COST"),              columns$[7,1]="C",columns$[7,2]="10"
    columns$[8,0]=Translate!.getTranslation("AON_EXTENSION"),              columns$[8,1]="N",columns$[8,2]="15",columns$[8,10]="T"

    gosub assignheads

    action=pos(printseq$="RAV")
    printbyreq=1
    printbyalt=2
    printbyvend=3

    switch action
        case printbyreq
            headings$[1]=Translate!.getTranslation("AON_BY_REQUISITION")
            break
        case printbyalt
            headings$[1]=Translate!.getTranslation("AON_BY_ALTERNATE_SEQUENCE")
            break
        case printbyvend
            headings$[1]=Translate!.getTranslation("AON_BY_VENDOR")
            break
        case default
            exitto done
            break
    swend

    headings$[2]=Translate!.getTranslation("AON_FROM_VENDOR_:_")+vendf$+" "+vendfname$(1,20)
    headings$[3]=Translate!.getTranslation("AON_TO_VENDOR_____:_")+vendt$+" "+vendtname$(1,20)
    headings$[4]=Translate!.getTranslation("AON_FROM_")+datetype$+": "+datef$
    headings$[5]=Translate!.getTranslation("AON_TO___")+datetype$+"  : "+datet$
    headings$[6]=reqpagehead$
    headings$[7]=whsepagehead$

rem --- Position files

    call pgmdir$+"adc_progress.aon","N","POE_REQHDR","","","",0,poe01_dev,1,meter_num,status

rem --- Sorts

    while more

        action=pos(printseq$="VAR")
        sortbyvend=1
        sortbyalt=2
        sortbyreq=3

        switch action ;rem  Tswitch

            case sortbyvend; rem --- Sort by vendor (alt key 1)
                dim poe01_vendkey$:poe01a_key_alttpl$
                dim poe01a_key$:poe01a_key_pritpl$
                
                if initializing$<>"N"
                    initializing$="N"
                    read (poe01_dev2,knum="AO_VEND_REQ",key=firm_id$+vendfrom$,dom=*next)                    
                endif

                poe01_vendkey$=key(poe01_dev2,end=done);read(poe01_dev2)
                if vendthru$<>"" then if poe01_vendkey.vendor_id$>vendthru$ then goto done

                poe01a_key$=poe01_vendkey.firm_id$+poe01_vendkey.req_no$

                break

            case sortbyalt;  rem --- Sort by alternate sequence (i.e. vendor alpha)
                dim apm01a_key$:apm01a_key_tpl$
                dim poe01_vendkey$:poe01a_key_alttpl$ 

                if initializing$<>"N"
                    initializing$="N"
                    read (apm01_dev2,knum="AO_ALTSEQ_VEND",key=firm_id$+altfrom$,dom=*next)
                    dim poe01a_key$:poe01a_key_pritpl$
                endif

            new_alt_seq_read: 
                if cvs(poe01a_key$,3)=""
                    apm01a_key$=key(apm01_dev2,end=done)
                    if apm01a_key.firm_id$<>firm_id$ goto done else read (apm01_dev2,key=apm01a_key$)
                    if cvs(altthru$,3)<>"" then if apm01a_key.alt_sequence$(1,len(altthru$))>altthru$ goto done
                    apm01b_key$=apm01a_key.firm_id$+apm01a_key.vendor_id$
                    read (poe01_dev2,key=apm01b_key$,knum="AO_VEND_REQ",dom=*next)
                endif

                poe01_vendkey$=key(poe01_dev2,end=*next);read (poe01_dev2)
                
                if poe01_vendkey.firm_id$+poe01_vendkey.vendor_id$<>apm01b_key$
                    dim poe01a_key$:poe01a_key_pritpl$
                    goto new_alt_seq_read
                else   
                    poe01a_key$=poe01_vendkey.firm_id$+poe01_vendkey.req_no$
                endif

                break

            case sortbyreq;     rem --- Sort by requisition (primary key)

                dim poe01a_key$:poe01a_key_pritpl$
                
                if initializing$<>"N"
                    initializing$="N"
                    read (poe01_dev,key=firm_id$+reqfrom$,knum="PRIMARY",dir=0,dom=*next)
                endif
                
            rem --- Read through req headers
            
                poe01a_key$=key(poe01_dev,end=done)
                if reqthru$<>"" then if poe01a_key.req_no$>reqthru$ then goto done
                break

            case default
                goto done
                break

        swend; rem  Tswitch

        if poe01a_key.firm_id$<>firm_id$ goto done

        read record (poe01_dev,key=poe01a_key$) poe01a$
        dropship$=poe01a.dropship$
        
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

    rem --- Test Ranges

        headrecprinted$="N"

        if whse$<>"ALL" then if poe01a.warehouse_id$<>whse$ then break
        gosub gettestdate_header
        if cvs(datefrom$,3)<>"" and testdateh$<datefrom$ then continue
        if cvs(datethru$,3)<>"" and testdateh$>datethru$ then continue

    rem --- Header passed tests
    
        gosub testbreaks
        headrecprinted$="Y"

    rem --- On to Details

        dim poe11a_key$:poe11a_key_tpl$

        p11_key$=poe01a.firm_id$+poe01a.req_no$
        read (poe11_dev,key=p11_key$,knum="AO_REQ_LINE",dom=*next)

    rem --- Test Req Detail date range

        while more ; rem Detail Loop

            poe11a_key$=key(poe11_dev,end=*break)
            if poe11a_key.firm_id$+poe11a_key.req_no$<>poe01a_key.firm_id$+poe01a_key.req_no$ break
            read record (poe11_dev,key=poe11a_key$) poe11a$

            if whse$="ALL" or poe11a.warehouse_id$=whse$

                gosub gettestdate_detail
                if datefrom$="" or testdated$>=datefrom$

                    if datethru$="" or testdated$<=datethru$

                    rem --- Detail passed, so print header if necessary & print detail

                        if headrecprinted$<>"Y"
                            gosub testbreaks
                            headrecprinted$="Y"
                        endif
                        
                        gosub printdetail
                        
                    endif

                endif

            endif

        rem --- Accumulate totals; then get next detail

            reqtot=reqtot+extension
            vendtot=vendtot+extension
            grandtot=grandtot+extension
            extension=0
            extension$=""

        wend 

    rem --- Done w/detail for this req

        if headrecprinted$="Y" gosub reqtotals

    wend ; rem  Tripread

done: rem --- All Done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if printseq$<>"R" gosub vendtotals
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_REPORT"))
    xwk=fnblank(7)
    OutVect!.addItem(str(grandtot:m1$))
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8),dateprom$(8),notb4date$(8)
    whse_detail$=poe11a.warehouse_id$
    itemnum$=poe11a.item_id$
    memo$=poe11a.order_memo$
    unitmeas$=poe11a.unit_measure$
    if poe11a.reqd_date$<>fill(8) datereq$=fndate$(poe11a.reqd_date$)
    if poe11a.promise_date$<>fill(8) dateprom$=fndate$(poe11a.promise_date$)
    if poe11a.not_b4_date$<>fill(8) notb4date$=fndate$(poe11a.not_b4_date$)
    convfact$=str(poe11a.conv_factor:m5$) 
    reqqty$=str(poe11a.req_qty:m2$)
    baldue$=reqqty$;rem  str(poe11a.req_qty-poe11a.reserved_num:m2$)
    unitcost$=str(poe11a.unit_cost:m3$)
    wonum$=poe11a.wo_no$
    woseq$=poe11a.wo_seq_ref$

rem --- Get Line Type

    linetype$="N"
    find record (pom02a_dev,key=poe11a_key.firm_id$+poe11a.po_line_code$,dom=get_item_disc) pom02a$
    linetype$=pom02a.line_type$

get_item_disc: rem --- Get Item Desc for S and N type lines

    if linetype$<>"N"
        dim itemdesc$(60),x1$(60)
        ivm01a.item_desc$=Translate!.getTranslation("AON_NOT_ON_FILE")
        find record (ivm01_dev,key=firm_id$+itemnum$,dom=get_ext) ivm01a$
        itemdesc$=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])
    else
        itemdesc$=memo$
    endif

get_ext: rem --- Get extension

    gosub calc_extension

rem --- Get Vendor's Part #

    dim vpartnum$(20)
    i05_key$=poe01a.firm_id$+poe01a.vendor_id$+itemnum$
    find record (ivm05_dev,key=i05_key$,dom=*next) ivm05a$

rem --- Format common part of print line

    dim pline$(132)
    
rem --- dropping line# per VARs; pline$(1)=poe11a.po_line_no$+" "+poe11a.po_line_code$+" "+whse_detail$

    pline$(1)=poe11a.po_line_code$+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

    if pos(linetype$="MOV")<>0

        if linetype$="V" pline$(o[3]+1)=memo$(1,20) else pline$(o[3]+1)=memo$
        if linetype$="O" pline$(o[11]+1,m3)=unitcost$,pline$(o[12]+1)=extension$

        OutVect!.addItem(pline$)
        xwk=fnblank(8)

        l=l+1
        recs=recs+1
    else

    rem --- Print Line Types 'S' & 'N'

        if pos(linetype$="SN")<>0

        rem --- dropping line# per VARS; OutVect!.addItem(poe11a.po_line_no$+" "+poe11a.po_line_code$+" "+whse_detail$+" "+itemnum$(1,itemlen))
            OutVect!.addItem(poe11a.po_line_code$+" "+whse_detail$+" "+itemnum$(1,itemlen))
            OutVect!.addItem(datereq$)
            OutVect!.addItem(dateprom$)
            OutVect!.addItem(notb4date$)
            
            if linetype$="S" then
                OutVect!.addItem(unitmeas$+" "+convfact$)
            else
                OutVect!.addItem(unitmeas$)
            endif
            
            OutVect!.addItem(reqqty$)
            OutVect!.addItem(baldue$)
            OutVect!.addItem(unitcost$)
            OutVect!.addItem(extension$)

            OutVect!.addItem("     "+itemdesc$)
            if wonum$<>fill(7)
                OutVect!.addItem("WO: "+wonum$+"-"+woseq$)
            else
                xwk=fnblank(1)
            endif

            xwk=fnblank(7)

            l=l+2
            recs=recs+1
            
            if vpartnum$<>fill(20)

                OutVect!.addItem("     "+Translate!.getTranslation("AON_VENDOR'S_PART_NUMBER_")+vpartnum$)
                xwk=fnblank(8)
                l=l+1
            endif

        endif

    endif

    return

assignheads: rem --- Assign headings variables

    if printseq$="A" if vendfrom$="" vendf$=Translate!.getTranslation("AON_FIRST") else vendf$=vendfrom$
    if printseq$="A" if vendthru$="" vendt$=Translate!.getTranslation("AON_LAST") else vendt$=vendthru$
    
    if printseq$<>"A"
        if vendfrom$="" vendf$=Translate!.getTranslation("AON_FIRST") else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
        if vendthru$="" vendt$=Translate!.getTranslation("AON_LAST") else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    endif

    if reqfrom$="" reqf$=Translate!.getTranslation("AON_FIRST") else reqf$=reqfrom$
    if reqthru$="" reqt$=Translate!.getTranslation("AON_LAST") else reqt$=reqthru$
    if datefrom$="" datef$=Translate!.getTranslation("AON_FIRST") else datef$=fndate$(datefrom$)
    if datethru$="" datet$=Translate!.getTranslation("AON_LAST") else datet$=fndate$(datethru$)
    reqpagehead$=Translate!.getTranslation("AON_FROM_REQUISITION_")+reqf$+Translate!.getTranslation("AON__THROUGH_")+reqt$
    whsepagehead$=Translate!.getTranslation("AON_FOR_WAREHOUSE_")+whse$+" "+cvs(whsename$,2)
    
    return

gettestdate_header: rem --- Determine date to use when testing range

    action=pos(whichdate$="OPRD")
    ordr_h=1
    prom_h=2
    reqd_h=3
    notb4_h=4

    switch action

        case ordr_h
            testdateh$=poe01a.ord_date$
            break
        case prom_h
            testdateh$=poe01a.promise_date$
            break
        case reqd_h
            testdateh$=poe01a.reqd_date$
            break
        case notb4_h
            testdateh$=poe01a.not_b4_date$
            break
        case default
            testdateh$=poe01a.ord_date$
            break
    swend

    return

gettestdate_detail: rem --- Determine date to use when testing range in detail

    action=pos(whichdate$="OPRD")
    ordr_d=1
    prom_d=2
    reqd_d=3
    notb4_d=4

    switch action
        case ordr_d
            testdated$=poe01a.ord_date$
            break
        case prom_d
            testdated$=poe11a.promise_date$
            break
        case reqd_d
            testdated$=poe11a.reqd_date$
            break
        case notb4_d
            testdated$=poe11a.not_b4_date$
            break
        case default
            testdated$=poe01a.ord_date$
            break
    swend

    return

testbreaks: rem --- Test for Breaks

    if poe01a.vendor_id$<>vendor$
        if printvtot$="Y" if printseq$<>"R" gosub vendtotals
        gosub newvendor
        
        if printseq$="R"
            gosub newreq
            return
        endif
    endif

    if poe01a.req_no$<>reqnum$ gosub newreq
    
    return

newvendor: rem --- New Vendor

    dim c0$(8),c1$(195)
    vendtot=0
    vendname$=Translate!.getTranslation("AON_NOT_ON_FILE")
    vendor$=poe01a.vendor_id$
    printvtot$="Y"
    a01_key$=firm_id$+vendor$
    find record (apm01_dev,knum="PRIMARY",key=a01_key$,dom=brnch4) apm01a$
    vendname$=apm01a.vendor_name$

brnch4: 

    OutVect!.addItem(Translate!.getTranslation("AON_VENDOR_")+fnmask$(vendor$(1,vendlen),vendomask$)+" "+vendname$)
    xwk=fnblank(8)
    l=l+1
    
    return

newreq: rem --- New Requisition

    reqtot=0
    reqnum$=poe01a.req_no$
    termsdesc$=Translate!.getTranslation("AON_NOT_ON_FILE")
    paddrdesc$=""
    shpwhsdesc$=Translate!.getTranslation("AON_NOT_ON_FILE")
    dim d0$(26),r0$(10),r1$(160),x0$(160)
    a10_key$=firm_id$+"C"+poe01a.ap_terms_code$
    find record (apm10_dev,key=a10_key$,dom=brnch5) apm10c$
    termsdesc$=apm10c.code_desc$

brnch5: 
    find record (apm05_dev,key=firm_id$+vendor$+poe01a.purch_addr$,dom=brnch6) apm05a$
    paddrdesc$=apm05a.name$(1,24)

brnch6: 
    find record (ivm10_dev,key=firm_id$+"C"+poe01a.warehouse_id$,dom=brnch7) ivm10c$
    shpwhsdesc$=ivm10c.short_name$

brnch7: 

    dim dateord$(8)
    if poe01a.ord_date$<>fill(8) dateord$=fndate$(poe01a.ord_date$)

    xwk=fnblank(9)
    OutVect!.addItem(Translate!.getTranslation("AON_REQ#:_")+reqnum$+" "+Translate!.getTranslation("AON_ORDERED_")+dateord$)
    xwk=fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_TERMS_")+poe01a.ap_terms_code$+" "+termsdesc$)
    xwk=fnblank(1)
    OutVect!.addItem(Translate!.getTranslation("AON_SHIP_VIA_")+poe01a.ap_ship_via$)
    xwk=fnblank(3)
    
    if paddrdesc$<>"" then
        OutVect!.addItem(Translate!.getTranslation("AON_PURCHASE_FROM_")+poe01a.purch_addr$+" "+paddrdesc$)
        xwk=fnblank(8)
    else
        xwk=fnblank(9)
    endif
    
    xwk=fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_ACK_BY_")+poe01a.acknowledge$)
    xwk=fnblank(2)
    OutVect!.addItem("F.O.B. "+poe01a.fob$)
    xwk=fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_SHIP_TO__")+poe01a.warehouse_id$+"   "+shpwhsdesc$)
    xwk=fnblank(9)
    l=l+4

rem --- Print dropship info if applicable

    if dropship$="Y" and ar$<>"N"

        dim dropaddr$(120)

        dropname$=poe01a.ds_name$
        dropaddr$=poe01a.ds_addr_line_1$+poe01a.ds_addr_line_2$+poe01a.ds_addr_line_3$+poe01a.ds_city$+poe01a.ds_state_cd$+poe01a.ds_zip_code$
        call pgmdir$+"adc_address.aon",dropaddr$,24,4,9,30

        OutVect!.addItem(Translate!.getTranslation("AON_DROPSHIP_TO_CUSTOMER:_")+fnmask$(poe01a.customer_id$(1,custlen),customask$))
        OutVect!.addItem(Translate!.getTranslation("AON_ORDER:_")+poe01a.order_no$)
        xwk=fnblank(7)

        OutVect!.addItem(dropname$)
        xwk=fnblank(8)

        OutVect!.addItem(dropaddr$(1,30)) 
        xwk=fnblank(8)

        l=l+3

        if cvs(dropaddr$(31,30),3)<>""
            OutVect!.addItem(dropaddr$(31,30))
            xwk=fnblank(8)
            let l=l+1
        endif

        if cvs(dropaddr$(61,30),3)<>"" 
            OutVect!.addItem(dropaddr$(61,30))
            xwk=fnblank(8)
            let l=l+1
        endif

        if cvs(dropaddr$(91,30),3)<>""
            OutVect!.addItem(custaddr$(91,30))
            xwk=fnblank(8)
            let l=l+1
        endif

        xwk=fnblank(9)

    endif
    
    return

vendtotals: rem --- Print Vendor total

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_VENDOR_")+fnmask$(vendor$(1,vendlen),vendomask$))
    xwk=fnblank(7)
    OutVect!.addItem(str(vendtot:m1$))
    xwk=fnblank(9)
    l=l+1
    
    return

reqtotals: rem --- Print Requisition total

    xwk=fnblank(9)
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_REQ_#_")+reqnum$)
    xwk=fnblank(7)
    OutVect!.addItem(str(reqtot:m1$))
    reqnum$=""
    let l=l+1
    
    return

rem --- Calc extension for S, N and O types; init it for others

calc_extension: 

    if pos(linetype$="SNO")=0 return
    let qty=poe11a.req_qty
    if linetype$="O" qty=1
    precision 2

    let extension=poe11a.unit_cost*qty,extension$=str(extension:m1$)
    precision ivprecision
    
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end