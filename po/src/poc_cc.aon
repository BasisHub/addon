rem --- Calendar Printing Selection Criteria
rem --- Program poc_cc v8.0.0 19Dec2007 (poc_cc)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/19/2007 12:01:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    enter sys01_dev,pom01_dev,params[all],status

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps-01a",ids$[1]=""
    files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
    files$[3]="pom-01",ids$[3]="POM_CALENDAR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01a_dev=channels[1]
    ivs01a_dev=channels[2]
    pom01_dev=channels[3]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2],pom01a$:templates$[3]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_exit) sys01t$
    firm_id$=sys01t.firm_id$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_exit) ivs01a$

rem --- Init Data

    params[0]=num(ivs01a.current_per$)
    params[1]=fnyy_year(ivs01a.current_year$)
    params[2]=params[0]
    params[3]=params[1],m6$="#0"
    more=1

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status then goto std_exit

rem --- Get First Day Scheduled

    call pgmdir$+"poc_ce.bbx",pom01_dev,firm_id$,begdate$,enddate$,status
    v1$="None"
    v2$="None"
    if begdate$<>"" then 
        let v1$=fndate$(begdate$),v2$=fndate$(enddate$) 
        call pgmdir$+"syc_rs.bbx","",my_context,3000,v1$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,3001,v2$,0,"",status
    else 
        call pgmdir$+"syc_df.bbx",0,3000,my_context,status; call pgmdir$+"syc_df.bbx",0,3001,my_context,status
        gosub display_fields
    fi
    
label1:

    i0=1; goto flow_control

    first_month: rem --- First Month To Print

    while more

        while more

            v4$="Enter The First Month To Print (<F1>=First)"
            v0$="N"
            v1$="KEC",v2$=str(params[0]),v3$=m6$,v0=2,v1=40,v2=5,control_id=3002,i0=2
            on v3 goto label2,label2,first_month,first_month,flow_control,label2,flow_control

        label2:

            if v3=1 then let v=0
            if v=0 then gosub clear_text; let params[0]=0; call pgmdir$+"syc_rs.bbx","",my_context,13002,"First",0,"",status; break
            if v<1 or v>12 then continue
            params[0]=v
            call pgmdir$+"syc_rs.bbx","",my_context,13002,fnmonth$(v),0,"",status
            break

        wend

        break

    first_year: rem --- First Year To Print

        v4$="Enter The First Year To Print (<F1>=First)"
        v0$="D"
        v1$="KECY",v2$=fnyear_yy21$(params[1]),v3$="",v0=2,v1=40,v2=6,control_id=3003

        on v3 goto label3,label3,flow_control,first_year,flow_control,label3,flow_control

    label3:

        if v3=1 then let v$=""
        if v$="" then gosub clear_text; let params[1]=0; call pgmdir$+"syc_rs.bbx","",my_context,13003,"First",0,"",status; break
        params[1]=fnyy_year(v$)
        call pgmdir$+"syc_rs.bbx","",my_context,3003,fnyear_yy$(params[1]),0,"",status
        break

    last_month: rem --- Last Month To Print

        while more

            v4$="Enter The Last Month To Print (<F1>=Last)"
            v0$="N"
            v1$="KEC",v2$=str(params[2]),v3$=m6$,v0=2,v1=40,v2=7,control_id=3004

            on v3 goto label4,label4,flow_control,last_month,flow_control,label4,flow_control

        label4:

            if v3=1 then let v=0
            if v=0 then gosub clear_text; let params[2]=0; call pgmdir$+"syc_rs.bbx","",my_context,13004,"Last",0,"",status; break
            if v<1 or v>12 then continue
            params[2]=v
            call pgmdir$+"syc_rs.bbx","",my_context,13004,fnmonth$(v),0,"",status
            break

        wend

        break

    last_year: rem --- Last Year To Print

        v4$="Enter The Last Year To Print (<F1>=Last)"
        v0$="D"
        v1$="KECY",v2$=fnyear_yy21$(params[3]),v3$="",v0=2,v1=40,v2=8,control_id=3005

        on v3 goto label5,label5,flow_control,last_year,flow_control,label5,flow_control

    label5:

        if v3=1 then let v$=""
        if v$="" then gosub clear_text; let params[3]=0; call pgmdir$+"syc_rs.bbx","",my_context,13005,"Last",0,"",status; break
        params[3]=fnyy_year(v$)
        call pgmdir$+"syc_rs.bbx","",my_context,3005,fnyear_yy$(params[3]),0,"",status
        break

    wend

flow_control:

    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto label1,label1,first_month,first_year,last_month,last_year,done,done

done: rem --- Correct?

    if validate then let validate=0; goto std_exit
    gosub check_date_range; if bad_range then goto first_month
    gosub display_fields
    v0$="S"
    v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=0,v2=22,control_id=i0-i0_done+1

done_v3:

    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done

done_test:

    action=pos(v$="YN")
    switch action

        case 1

        validate_input:

            validate=1
            old_control_id=0

        case 2

        do_nonkey1:

            v3=0
            i0=i0_nonkey1-1
            goto flow_control

        case default
            break
    swend

end_input: rem --- Run report overlay

    goto std_exit

display_fields:

    if params[0]>0 then let v1$=fnmonth$(params[0]) else let v1$=""
    if params[1]>0 then let v2$=fnyear_yy$(params[1]) else let v2$=""
    if params[2]>0 then let v3$=fnmonth$(params[2]) else let v3$=""
    if params[3]>0 then let v4$=fnyear_yy$(params[3]) else let v4$=""
    control_id=3000
    cid_cnt=0

    while more

        if cid_cnt=0 then if cvs(begdate$,2)="" then let disp_inp$=begdate$,disp_desc$="None" else let disp_inp$=fndate$(begdate$),disp_desc$=""
        if cid_cnt=1 then if cvs(enddate$,2)="" then let disp_inp$=enddate$,disp_desc$="None" else let disp_inp$=fndate$(enddate$),disp_desc$=""
        if cid_cnt=2 then if v1$="" then let disp_inp$=v1$,disp_desc$="First" else let disp_inp$=str(params[0]:m6$),disp_desc$=fnmonth$(params[0])
        if cid_cnt=3 then if v2$="" then let disp_inp$=v2$,disp_desc$="First" else let disp_inp$=v2$,disp_desc$=""
        if cid_cnt=4 then if v3$="" then let disp_inp$=v3$,disp_desc$="Last" else let disp_inp$=str(params[2]:m6$),disp_desc$=fnmonth$(params[2])
        if cid_cnt=5 then if v4$="" then let disp_inp$=v4$,disp_desc$="Last" else let disp_inp$=v4$,disp_desc$=""
        call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
        cid_cnt=cid_cnt+1; let control_id=control_id+1
        if cid_cnt>i0_done-1 then break

    wend

    disp_inp$=""
    disp_desc$=""
    return

clear_text:

    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return

check_date_range: rem --- Validate Selected Date Range

    while more

        bad_range=0
        firstmth$=str(params[0]:"00")
        if params[0]=0 then if begdate$<>"" then let firstmth$=fndate$(begdate$(2),begdate$) else break

        firstyr$=str(params[1]:"000")
        if params[1]=0 then if begdate$<>"" then let firstyr$=str(fnyy_year(fndate$(begdate$(1),begdate$)):"000") else break

        lastmth$=str(params[2]:"00")
        if params[2]=0 then if enddate$<>"" then let lastmth$=fndate$(enddate$(2),begdate$) else break

        lastyr$=str(params[3]:"000")
        if params[3]=0 then if enddate$<>"" then let lastyr$=str(fnyy_year(fndate$(enddate$(1),begdate$)):"000") else break

    wend

warn_bad_date: rem --- Warn About Bad Date Range

    if lastyr$+lastmth$>=firstyr$+firstmth$ then return
    bad_range=1
    number=1
    dim message$[number]
    message$[0]=" Invalid date range! Please re-enter."
    message$[1]="<Enter>=Continue    <F4>=Exit"
    call pgmdir$+"adc_stdmessage.aon",2,message$[all],number,-1,-1,v$,v3
    on v3 goto label7,warn_bad_date,warn_bad_date,warn_bad_date,label6,label7,label6

label6:

    exitto std_exit

label7:

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
