rem --- Requsition/Purchase Order Printing Input
rem --- Program poc_if v8.0.0 17Dec2007 (poc_if)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/17/2007 03:12:49)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    enter type$,apm01_dev,params[all],params$[all],v$,v3

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="apm-01",ids$[1]="APM_VENDMAST"
    files$[2]="aps_params",ids$[2]="APS_PARAMS"
    files$[3]="ivs_params",ids$[3]="IVS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[1]
    aps01a_dev=channels[2]
    ivs01a_dev=channels[3]

rem --- Dimension string templates

    dim apm01a$:templates$[1],aps01a$:templates$[2],ivs01a$:templates$[3]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    firm_id$=params$[0]
    sequence$=params$[1],pomessage$=params$[2]
    restart$=params$[3]
    vendor$=params$[4],m0$=params$[5]
    vendlen=params[0]
    m0=len(m0$)

rem --- Initializations

    p$="Purchase Order"
    w=min(79-(42+m0),30)
    if type$="R" then let p$="Requisition"

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status then exit
    gosub display_fields
    goto start_done

sequence_flow: rem --- Sequence

    while more 

        v4$="Select The Sequence For Printing The "+p$+"s"
        v4$=type$+"="+p$+"  N=Vendor Number  A=Vendor Alternate Sort  W=Warehouse"
        v0$="S"
        v1$="CR",v2$=sequence$,v3$=type$+"NAW",v0=1,v1=40,v2=3,i0=0,control_id=3000

        on v3 goto pos_naw_check,sequence_flow,flow_control,sequence_flow,flow_control,pos_naw_check,flow_control

        pos_naw_check:
            if pos(v$=type$+"NAW")=0 then continue
            sequence$=v$
            break 

        message1: rem --- Message

            v4$="Enter an optional message to be printed on each "+p$
            v0$="S"
            v1$="C",v2$=pomessage$,v3$="",v0=38,v1=40,v2=4,control_id=3001

            on v3 goto label1,message1,flow_control,message1,flow_control,label1,flow_control

        label1:

            pomessage$=v$
            break

        restart: rem --- Restart?

            if sequence$<>"N" then break
            v4$="Restart printing with a specific vendor (Y/N)?"
            v0$="Y"
            v1$="C",v2$=restart$,v3$="",v0=1,v1=40,v2=5,control_id=3002

            on v3 goto label2,restart,flow_control,restart,flow_control,label2,flow_control

        label2:

            if v$=restart$ then break
            restart$=v$
            call pgmdir$+"syc_df.bbx",(restart$="Y" and sequence$="N"),3003,my_context,status

            break

        vendor_num: rem --- Vendor number

            if restart$="N" or sequence$<>"N" then break
            v4$="Enter the vendor to restart printing with (<F3>=Lookup)"
            v0$="M"
            v1$="KCE",v2$=vendor$,v3$=m0$,v0=6,v1=40,v2=6,control_id=3003

            on v3 goto label4,vendor_num,flow_control,label3,flow_control,label4,flow_control

        label3:

            call pgmdir$+"syc_lv.bbx",v$

        label4:

            apm01a.firm_id$ = firm_id$
            apm01a.vendor_id$ = v$

            find record (apm01_dev,key=(apm01a.firm_id$ + apm01a.vendor_id$),dom=vendor_num) apm01a$
            call pgmdir$+"syc_rs.bbx","",my_context,3003,fnmask$(apm01a.vendor_id$(1,vendlen),m0$),0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13003,apm01a.vendor_name$,0,"",status
            vendor$=apm01a.vendor_id$
            break
    wend

flow_control: rem --- Flow control

    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend

    while more
        on i0 goto sequence_flow,message1,restart,vendor_num,done

        
        start_done:

            let i0=i0_done

        done: rem --- Correct?

            if validate then let validate=0; goto std_exit

            v0$="S"
            v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1

        done_v3:
            on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done

        done_test:
            on pos(v$="YN") goto flow_control,validate_input,do_nonkey1

        validate_input:
            validate=1
            old_control_id=0

        do_nonkey1:
            v3=0
            i0=i0_nonkey1
            continue
    wend

    goto std_exit

display_fields: rem --- Display fields

    call pgmdir$+"syc_rs.bbx","",my_context,3000,sequence$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,3001,pomessage$,0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,3002,restart$,0,"",status
    call pgmdir$+"syc_df.bbx",(restart$="Y" and sequence$="N"),3003,my_context,status
 
    if restart$<>"N" or sequence$="Y" then 
        apm01a.firm_id$ = firm_id$
        apm01a.vendor_id$ = vendor$

        apm01a.vendor_name=""
        find record (apm01_dev,key=apm01a.firm_id$ + apm01a.vendor_id$,dom=display_fields_end) apm01a$
        call pgmdir$+"syc_rs.bbx","",my_context,3003,fnmask$(apm01a.vendor_id$(1,vendlen),m0$),0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,13003,apm01a.vendor_name$(1,w),0,"",status

    endif

    display_fields_end:
        return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)


rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
