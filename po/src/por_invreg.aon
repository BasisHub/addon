rem --- Purchase Order Invoice Register (Invoices)
rem --- Program por_invreg.aon v8.0.0 06Jul2007 (por_ea)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:06:38)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=39,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="apm-02",ids$[3]="ARM_CUSTMAST"
    files$[4]="apm-09",ids$[4]="APM_VENDCMTS"
    files$[5]="apc_typecode",ids$[5]="APC_TYPECODE";rem "apm-10A"
    files$[6]="apt-01",ids$[6]="APT_INVOICEHDR"
    files$[7]="apt-02",ids$[7]="APT_INVOICEDIST"
    files$[9]="apt-11",ids$[9]="APT_INVOICEDET"
    files$[11]="glm-01",ids$[11]="GLM_ACCT"
    files$[12]="glt-04",ids$[12]="GLE_DAILYDETAIL"
    files$[14]="glw-11",ids$[14]="GLW_TRANSDET"
    files$[15]="ivm-01",ids$[15]="IVM_ITEMMAST"
    files$[16]="ivm-02",ids$[16]="IVM_ITEMWHSE"
    files$[17]="poe-02",ids$[17]="POE_POHDR"
    files$[18]="poe-05",ids$[18]="POE_INVHDR"
    files$[19]="poe-12",ids$[19]="POE_PODET"
    files$[20]="poe-15",ids$[20]="POE_INVSEL"
    files$[21]="poe-25",ids$[21]="POE_INVDET"
    files$[22]="poe-35",ids$[22]="POE_INVGL"
    files$[23]="pom-02",ids$[23]="POC_LINECODE"
    files$[24]="pot-04",ids$[24]="POT_RECHDR"
    files$[25]="pot-05",ids$[25]="POT_INVHDR"
    files$[26]="pot-14",ids$[26]="POT_RECDET"
    files$[27]="pot-15",ids$[27]="POT_INVSEL"
    files$[28]="pot-25",ids$[28]="POT_INVDET"
    files$[29]="pot-35",ids$[29]="POT_INVBYPO"
    files$[30]="pow-17",ids$[30]="POW_INVLAND"
    files$[31]="sfe-01",ids$[31]="SFE_WOMASTR"
    files$[32]="sfm-10",ids$[32]="SFC_WOTYPECD"
    files$[33]="apc_distribution",ids$[33]="APC_DISTRIBUTION";rem "apm-10B"
    files$[34]="apc_termscode",ids$[34]="APC_TERMSCODE";rem "apm-10C"
    files$[35]="aps_params",ids$[35]="APS_PARAMS";rem "aps-01A"
    files$[36]="ars_params",ids$[36]="ARS_PARAMS";rem "ars-01A"
    files$[37]="gls_params",ids$[37]="GLS_PARAMS";rem "gls-01A"
    files$[38]="ivs_params",ids$[38]="IVS_PARAMS";rem "ivs-01A"
    files$[39]="pos_params",ids$[39]="POS_PARAMS";rem "pos-01A"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[2]
    apm02_dev=channels[3]
    apm09_dev=channels[4]
    apm10_dev=channels[5]
    apt01_dev=channels[6]
    apt02_dev=channels[7]
    apt11_dev=channels[9]
    glm01_dev=channels[11]
    glt04_dev=channels[12]
    glt14_dev=channels[13]
    glw11_dev=channels[14]
    ivm01_dev=channels[15]
    ivm02_dev=channels[16]
    poe02_dev=channels[17]
    poe05_dev=channels[18]
    poe12_dev=channels[19]
    poe15_dev=channels[20]
    poe25_dev=channels[21]
    poe35_dev=channels[22]
    pom02_dev=channels[23]
    pot04_dev=channels[24]
    pot05_dev=channels[25]
    pot14_dev=channels[26]
    pot15_dev=channels[27]
    pot25_dev=channels[28]
    pot35_dev=channels[29]
    pow17_dev=channels[30]
    sfe01_dev=channels[31]
    sfm10_dev=channels[32]
    apm10b_dev=channels[33]
    apm10c_dev=channels[34]
    aps01a_dev=channels[35]
    ars01a_dev=channels[36]
    gls01a_dev=channels[37]
    ivs01a_dev=channels[38]
    pos01a_dev=channels[39]

rem --- Dimension string templates
escape; rem templates
    dim apm01a$:templates$[2],apm02a$:templates$[3],apm09a$:templates$[4],
:       apm10a$:templates$[5],apt01a$:templates$[6],apt02a$:templates$[7],
:       apt11a$:templates$[9],
:       glm01a$:templates$[11],glt04a$:templates$[12],glt14a$:templates$[13],
:       glw11a$:templates$[14],ivm01a$:templates$[15],ivm02a$:templates$[16],
:       poe02a$:templates$[17],poe05a$:templates$[18],poe12a$:templates$[19],
:       poe15a$:templates$[20],poe25a$:templates$[21],poe35a$:templates$[22],
:       pom02a$:templates$[23],pot04a$:templates$[24],pot05a$:templates$[25],
:       pot14a$:templates$[26],pot15a$:templates$[27],pot25a$:templates$[28],
:       pot35a$:templates$[29],pow17a$:templates$[30],sfe01a$:templates$[31],
:       sfm10a$:templates$[32],apm10b$:templates$[33],apm10c$:templates$[34],
:       aps01a$:templates$[35],ars01a$:templates$[36],gls01a$:templates$[37],
:       ivs01a$:templates$[38],pos01a$:templates$[39]

rem --- Assign form input values to local variables

    level$=option!.getOptionData("report_sequence")
rem    phase$=option!.getOptionData("phase")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (pos01a_dev,key=pos01a_key$,err=std_missing_params) pos01a$

rem --- Initializations

    precision i[1]
    dim headings$[3]
    dim oi[10],og[2],vendor[3],type[3],report[3],totals[3],desc$[3]
    dim op[7],ol[8],y0$(4),y1$(32),y2$(2*g[4]),x0$(32)
    dim d0$(24),d1$(32),d[4],w0$(24),w1$(96),w[4],item$[6],x1$(4*g[4])
    dim glfiles[20],glparams$[20],glparams[20],w$[10],y$[10],values[20]
    l0=11
    hl=3
    aptype$=""
    retention$=""
    nf$="(Not On File)"
    rh1$="Discount"
    rh2$="Amount"
    m0=len(m0$)
    aptype=0
    retention=0
    headings=2
    t0$=""
    t1$=""
    errors=0
    width=132
    page=0
    l9=59
    l=l9+1
    clock$=""
    when$=sysinfo.system_date$
    desc$[1]="By Invoice"
    desc$[2]="By Purchase Order"
    glstatus=0
    desc$[3]="By Line Item"
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    if aps01a.multi_types$="Y" aptype=1,headings=3
    if aps01a.ret_flag$="Y" retention=1,rh1$="Discount/",rh2$="Retention"
    level$="I"

rem --- Run next overlay

    run pgmdir$+"por_eb.bbx"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)
escape; rem errors
    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
