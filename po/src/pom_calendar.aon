rem Purchase Calendar Maintenance
rem Proprietary Software. AddonSoftware
rem Program ID: pom_calendar.aon  <Feb 4, 2009>
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

use java.util.Calendar
use java.util.GregorianCalendar
use java.util.Locale
use ::sys/prog/bao_imagemgr.bbj::BarImageMgr

rem --- Functions

    def fnstr_pos(tmp0$,tmp1$,tmp0)=int((pos(tmp0$=tmp1$,tmp0)+tmp0-1)/tmp0)
    def fnstrip$(tmp0$,tmp1$)=tmp0$(1,pos(fill(50,tmp1$)=tmp0$+fill(50,tmp1$))-1)
    def fngett_attr$(att0$)=output_attr_tbl$[fnstr_pos(att0$,attr_def_tbl$,5)]
    def fngetv_attr$(att0$,att1$)=output_attr_col$[fnstr_pos(att0$,output_attr_col$[0,1],40),fnstr_pos(att1$,attr_def_col$[0,0],5)]
    def fngetc_attr$(att0,att0$)=output_attr_col$[att0,fnstr_pos(att0$,attr_def_col$,5)]

rem --- Directory STBLs

    gui_dev$=stbl("+GUI_DEVICE")
    dir_syp$=stbl("+DIR_SYP")
    dir_img$=stbl("+DIR_IMG")
    dir_sys$=stbl("+DIR_SYS")
    file_usr$=stbl("+FILE_USR"),file_usr$=stbl("+DIR_USR",err=*next)+"aon_"+cvs(stbl("+USER_ID",err=*next),138)+".usr"
    file_set$=stbl("+FILE_SET")

rem --- Misc Setup
rem --- get locale, and corresponding first day of week (not always Sunday)
rem --- also get !DATE, which contains date format, short/long month desc, and short/long day desc.
    Locale$=stbl("!LOCALE")
    Locale! = fnLocale!(Locale$)
    Calendar! = new GregorianCalendar(Locale!)
    firstDayOfWeek=Calendar!.getFirstDayOfWeek()

    dim date_text$:"default:c(32*=0),sm[12]:c(3*=0),m[12]:c(32*=0),sd[7]:c(3*=0),d[7]:c(32*=0)"
    date_text$=stbl("!DATE")
    day_str$="312831303130313130313031"

    no_columns=7

    dim columns$[1:no_columns]
        for curr_elem=firstDayOfWeek to 7
            columns$[curr_elem-firstDayOfWeek+1]=date_text.d$[curr_elem]
        next curr_elem
        if firstDayOfWeek > 1
            for curr_elem=1 to firstDayOfWeek-1
                columns$[7-firstDayOfWeek+2]=date_text.d$[curr_elem]
            next curr_elem
        endif

    num_rows=6

    dim months$[1:12]
        for curr_elem=1 to 12
            months$[curr_elem]=date_text.sm$[curr_elem]
        next curr_elem

    dim weeks$[1:num_rows]
        for curr_elem=1 to num_rows
            weeks$[curr_elem]=str(curr_elem)
        next curr_elem

    curr_mo=num(date(0:"%Mz"))
    default_mo=curr_mo

    curr_yr=num(date(0:"%Yd"))
    default_yr=curr_yr

    temp_chan=unt
    open(temp_chan)pgm(-2)
    temp_file$=fid(temp_chan)(9)
    close(temp_chan)
    TempFile!=temp_file$
    temp_file$=TempFile!.replace("\","/")
    file_base$=temp_file$(1,pos("/"=temp_file$,-1,2))

rem --- call bas_process_beg to put lic_feature info into sysinfo
    user_id$=stbl("+USER_ID")
    call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,table_chans$[all]

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    user_id$=sysinfo.user_id$
    firm_id$=sysinfo.firm_id$
    lic_feature$=sysinfo.lic_feature$

file_opens:rem --- Open File(s)

    num_files=3
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]=stbl("+GUI_DEVICE"),open_opts$[1]="O"
    open_tables$[2]="POM_CALENDAR",open_opts$[2]="OTA"
    open_tables$[3]="ADM_MODULES",open_opts$[3]="OTA"


    gosub open_tables

    gui_dev=num(open_chans$[1])
    pom_calendar_dev=num(open_chans$[2]);dim pom_calendar$:open_tpls$[2]
    adm_modules=num(open_chans$[3]);dim adm_modules$:open_tpls$[3]

rem --- Get SysGUI Object

    SysGUI!=bbjAPI().getSysGui()
    HdrColor!=SysGUI!.makeColor(255,252,215)
    DayColor!=SysGUI!.makeColor(240,240,240)
    HdrText!=SysGUI!.makeColor(160,160,160)
    ClosedColor!=SysGUI!.makeColor(153,153,153)
    HolidayColor!=SysGUI!.makeColor(182,214,245)
    
    DayVect!=SysGUI!.makeVector()
    
    dim gui_event$:tmpl(gui_dev)
    dim notify_base$:noticetpl(0,0)

rem --- Get Attributes

    call dir_syp$+"bam_attr_init.bbj",attr_def_tbl$[all],attr_def_col$[all]
        attr_def_col$=attr_def_col$[0,0]
        attr_def_tbl$=attr_def_tbl$[0,0]

rem --- If current month doesn't exist, create an empty current month

    while 1
        try_mo=curr_mo
        try_yr=curr_yr  
        read record(pom_calendar_dev,key=firm_id$+str(try_yr:"0000")+str(try_mo:"00"),dom=*next)pom_calendar$;break
        gosub create_new_month
        break
    wend
        
rem --- get application record in order to get form icon

    readrecord(adm_modules,key=pad(lic_feature$,11),dom=*next)adm_modules$
    prog_path$=adm_modules.dd_attr_icon$
    gosub resolve_path
    form_icon$=prog_path$

rem --- Main Process

rem    gosub find_gaps1;rem "jpb
    gosub find_gaps
    gosub get_calendar_boundaries
    gosub disp_win
    gosub get_user_settings
    gosub def_grids
    gosub display_date
    gosub display_calendar
    gosub display_data
    gosub resize_win

    Window!.setVisible(1)

event_ctl:rem --- Event Control

    Window!.setCallback(Window!.ON_CLOSE,"exit_prog")
    Window!.setCallback(Window!.ON_RESIZE,"resize_win")

    BtnPrevYr!.setCallback(BtnPrevYr!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    BtnPrevMo!.setCallback(BtnPrevMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    BtnNextMo!.setCallback(BtnNextMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    BtnNextYr!.setCallback(BtnNextYr!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    BtnCurrMo!.setCallback(BtnCurrMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    popmenu_stat1!.setCallback(popmenu_stat1!.ON_POPUP_ITEM_SELECT,"adjust_status")
    popmenu_stat2!.setCallback(popmenu_stat2!.ON_POPUP_ITEM_SELECT,"adjust_status")
    popmenu_stat3!.setCallback(popmenu_stat3!.ON_POPUP_ITEM_SELECT,"adjust_status")
    LstGaps!.setCallback(LstGaps!.ON_LIST_SELECT,"find_gap")
    gridCal!.setCallback(gridCal!.ON_GRID_KEYPRESS,"keypress")
    gridCal!.setCallback(gridCal!.ON_GRID_RIGHT_MOUSE_DOWN,"getcell")    
    GridCal!.setPopupMenu(popmenuStat!)


    SysGUI!.flushEvents()

    process_events,err=*same

getcell:rem --- right mouse down; if outside of current selection, reset selected cell

    Event!=SysGUI!.getLastEvent()
    sel_rows!=gridCal!.getSelectedRows()
    sel_cols!=gridCal!.getSelectedColumns()
    row=Event!.getRow()
	col=Event!.getColumn()
    outside_selection=1
    
    if sel_rows!.size()
        for x=0 to sel_rows!.size()-1
            sel_row=sel_rows!.get(x)
            for y=0 to sel_cols!.size()-1
                sel_col=sel_cols!.get(y)
                if row=sel_row and col=sel_col then outside_selection=0 
            next y
        next x
    endif
    if outside_selection then gridCal!.setSelectedCell(row,col)
    return
    
keypress:rem --- Check for C, W, H

    Event!=SysGUI!.getLastEvent()
    char_pressed=Event!.getKeyCode()
    switch char_pressed
        case 67; rem Closed
        case 99
            pop_opt$=Translate!.getTranslation("AON_CLOSED")
            gosub set_status
        break
        case 87; rem Work Day
        case 119
            pop_opt$=Translate!.getTranslation("AON_WORKDAY")
            gosub set_status        
        break
        case 72; rem "Holiday
        case 104
            pop_opt$=Translate!.getTranslation("AON_HOLIDAY")
            gosub set_status
        break
        default
        break
    swend
    
return

adjust_date:rem --- Adjust Date

   gui_event$=SysGUI!.getLastEventString()
   date_btn=gui_event.id

    switch date_btn
        case 101;rem --- Prev Year
            try_yr=curr_yr-1
            try_mo=curr_mo
        break
        case 102;rem --- Prev Month
            try_mo=curr_mo-1
            try_yr=curr_yr
            if try_mo<1
                try_yr=curr_yr-1
                try_mo=12
            endif
        break
        case 103;rem --- Next Month
            try_mo=curr_mo+1
            try_yr=curr_yr
            if try_mo>12
                try_yr=curr_yr+1
                try_mo=1
            endif
        break
        case 104;rem --- Next Year
            try_yr=curr_yr+1
            try_mo=curr_mo
        break
        case 105;rem --- Current Month
            try_mo=default_mo
            try_yr=default_yr
        break
        case default
        break
    swend
        
    gosub validate_date 
    gosub display_date
    gosub display_calendar
    gosub display_data

    return

display_date:rem --- Display Current Date

    CurrDate!.setText(months$[curr_mo]+" "+str(curr_yr))
    start_day=num(date(jul(curr_yr,curr_mo,1):"%W"))
    rem --- above returns day of week relative to Sunday
    rem --- adjust for firstDayOfWeek as indicated by locale
    start_day=start_day-(firstDayOfWeek-1)
    if start_day<=0 start_day=start_day+7

    no_days=num(day_str$(curr_mo*2-1,2))
    if mod(curr_yr,4)=0 and curr_mo=2 then 
        no_days=iff(Calendar!.isLeapYear(curr_yr),29,28)
    endif

    FirstDate!.setText(first_date$)
    LastDate!.setText(last_date$)

    return

display_calendar:rem --- Calculate And Display Calendar

    DayVect!.clear()
    stringDays$="";rem contains string version of dayvect for parsing
    day_count=0

    for curr_day=1 to 42
        day_text$=""
        if curr_day>=start_day and day_count<no_days
            day_count=day_count+1
            day_text$=str(day_count)
        endif

        DayVect!.addItem(day_text$)
        stringDays$=stringDays$+str(num(day_text$):"00")+"^"

    next curr_day

    GridCal!.setCellText(0,0,DayVect!)
    for x=0 to 5
        for y=0 to 6
            GridCal!.setCellBackColor(x,y,HdrColor!)
        next y
    next x
    return

display_data:rem --- Display Data For Selected Category and Measure

    day_count=0
    dim pom_calendar$:fattr(pom_calendar$)

    read record(pom_calendar_dev,key=firm_id$+str(curr_yr:"0000")+str(curr_mo:"00"),dom=*next)pom_calendar$
    for curr_day=1 to pom_calendar.days_in_mth
        day_stat$=field(pom_calendar$,"DAY_STATUS_"+str(curr_day:"00"))
        switch pos(day_stat$="CHW");REM C=closed,H=holiday,W=workday
            case 1
                useColor!=ClosedColor!
                useText$=Translate!.getTranslation("AON__-_CLOSED")
            break
            case 2
                useColor!=HolidayColor!
                useText$=Translate!.getTranslation("AON__-_HOLIDAY")
            break
            case 3
                useColor!=DayColor!
                useText$=Translate!.getTranslation("AON__-_WORKDAY")
            break
            case default
                useColor!=HdrColor!
                useText$=""
            break
        swend
        gosub set_Color_and_Text
    next curr_day

    return

set_Color_and_Text:

    wpos=(pos(str(curr_day:"00")+"^"=stringDays$,3)-1)/3
    if wpos>=0
        grid_row=int(wpos/7)
        grid_col=mod(wpos,7)
        GridCal!.setCellBackColor(grid_row,grid_col,useColor!)
        GridCal!.setCellText(grid_row,grid_col,GridCal!.getCellText(grid_row,grid_col)+useText$)
    endif
    return

adjust_status:

    gui_event$=SysGUI!.getLastEventString()
    popCtl!=popmenuStat!.getMenuItem(gui_event.y)
    pop_opt$=popCtl!.getText()
set_status:
    if pop_opt$=Translate!.getTranslation("AON_CLOSED")
        useColor!=ClosedColor!
        change_stat$="C"
        useText$=" - "+pop_opt$
    endif
    if pop_opt$=Translate!.getTranslation("AON_HOLIDAY")
        useColor!=HolidayColor!
        change_stat$="H"
        useText$=" - "+pop_opt$
    endif
    if pop_opt$=Translate!.getTranslation("AON_WORKDAY")
        useColor!=DayColor!
        change_stat$="W"
        useText$=" - "+pop_opt$
    endif

    sel_rows!=GridCal!.getSelectedRows()
    sel_cols!=GridCal!.getSelectedColumns()

    if sel_rows!.size()
        for x=0 to sel_rows!.size()-1
            for y=0 to sel_cols!.size()-1
                change_day$=GridCal!.getCellText(sel_rows!.get(x),sel_cols!.get(y))
                if pos(" -"=change_day$)
                    change_day$=change_day$(1,pos(" -"= change_day$)-1)
                endif
                if change_day$<>""
                    GridCal!.setCellBackColor(sel_rows!.get(x),sel_cols!.get(y),useColor!)
                    GridCal!.setCellText(sel_rows!.get(x),sel_cols!.get(y),change_day$+useText$)
                    gosub update_pom_calendar
                endif
            next y
        next x

    endif

    return

update_pom_calendar:

    dim pom_calendar$:fattr(pom_calendar$)

    extractrecord(pom_calendar_dev,key=firm_id$+str(curr_yr:"0000")+str(curr_mo:"00"))pom_calendar$
    field pom_calendar$,"DAY_STATUS_"+str(num(change_day$):"00")=change_stat$
    pom_calendar$=field(pom_calendar$)
    write record(pom_calendar_dev)pom_calendar$
    return

find_gap:
    
    gap_date$=LstGaps!.getItemAt(num(LstGaps!.getSelectedIndex()))
    curr_yr=num(gap_date$(7,4))
    curr_mo=num(gap_date$(1,2))
    gosub display_date
    gosub display_calendar
    gosub display_data

    return

get_calendar_boundaries:
   
    dim pom_calendar$:fattr(pom_calendar$)

    read(pom_calendar_dev,key=firm_id$,dom=*next)

    k$=key(pom_calendar_dev,err=*next);readrecord(pom_calendar_dev,key=k$)pom_calendar$
    if pom_calendar.firm_id$<>firm_id$ 
        first_date$=Translate!.getTranslation("AON_NONE")
    else
        first_date$=pom_calendar.month$+"/"+pom_calendar.year$
    endif
    dim pom_calendar$:fattr(pom_calendar$)

    read(pom_calendar_dev,key=firm_id$+$ff$,dom=*next)
    k$=keyp(pom_calendar_dev,err=*next);readrecord(pom_calendar_dev,key=k$)pom_calendar$
    if pom_calendar.firm_id$<>firm_id$
        last_date$=Translate!.getTranslation("AON_NONE")
    else
        last_date$=pom_calendar.month$+"/"+pom_calendar.year$
    endif

    return

find_gaps1: rem " --- Display Unscheduled Gaps in Calendar
    gap$=""
    GapVect!=SysGUI!.makeVector()  
    dim pom_calendar$:fattr(pom_calendar$)
    read(pom_calendar_dev,key=firm_id$,dom=*next)

    while 1
        readrecord(pom_calendar_dev,end=*break)pom_calendar$
        if pom_calendar.firm_id$<>firm_id$ then break
        day_status$=""
        for x=1 to pom_calendar.days_in_mth
            if field(pom_calendar$,"day_status_"+str(x:"00"))="" field pom_calendar$,"day_status_"+str(x:"00")=" "
            day_status$=day_status$+field(pom_calendar$,"day_status_"+str(x:"00"))
        next x
        last_month$=pom_calendar.year$+pom_calendar.month$+str(pom_calendar.days_in_mth:"00")
        if pom_calendar.month$="02"
            nxt_date$=""
            call stbl("+DIR_PGM")+"adc_daydates.aon",last_month$(1,4)+"0301",nxt_date$,-1
            last_month$=nxt_date$
            pom_calendar.days_in_mth=num(last_month$(7,2))
        endif
        x0=pos(" "<>day_status$)
l6150:
        x1=pos(" "=day_status$(x0,pom_calendar.days_in_mth+1-x0))
        if x1=0 goto rem_months
        gap$=gap$+pom_calendar.year$+pom_calendar.month$+str(x0+x1-1:"00")
        x2=pos(" "<>day_status$(x0+x1-1,pom_calendar.days_in_mth+1-(x0+x1)))
        if x2=0 goto rem_months
        gap$=gap$+pom_calendar.year$+pom_calendar.month$+str(x0+x1+x2-3:"00")
        x0=x0+x1+x2-2
        goto l6150

rem_months: rem " --- Process remaining months
        k$=key(pom_calendar_dev,end=*break)
        if pos(firm_id$=k$)<>1 break
        if pom_calendar.month$="02"
            nxt_date$=""
            call stbl("+DIR_PGM")+"adc_daydates.aon",last_month$(1,4)+"0301",nxt_date$,-1
            last_month$=nxt_date$
            pom_calendar.days_in_mth=num(last_month$(7,2))
        endif
        nxt_date$=""
        call stbl("+DIR_PGM")+"adc_daydates.aon",last_month$,nxt_date$,1
        if len(nxt_date$)<>8 break
        if nxt_date$(1,6)<>k$(3,6)
            if mod(len(gap$),16)=0 gap$=gap$+nxt_date$
        endif
        readrecord (pom_calendar_dev,key=k$)pom_calendar$
        day_status$=""
        for x=1 to pom_calendar.days_in_mth
            if field(pom_calendar$,"day_status_"+str(x:"00"))="" field pom_calendar$,"day_status_"+str(x:"00")=" "
            day_status$=day_status$+field(pom_calendar$,"day_status_"+str(x:"00"))
        next x
        last_month$=pom_calendar.year$+pom_calendar.month$+str(pom_calendar.days_in_mth:"00")
        if mod(len(gap$),16)>0 goto l6290
        if pom_calendar.day_status_01$<>" " goto l6340
        gap$=gap$+pom_calendar.year$+pom_calendar.month$+"01"+pom_calendar.year$+pom_calendar_month$+str(pos(" "<>day_status$)-1:"00")
        x0=pos(" "<>day_status$)
        goto l6350
l6290:
        if pom_calendar.day_status_01$=" " goto l6330
        nxt_mnth$=""
        call stbl("+DIR_PGM")+"adc_daydates.aon",pom_calendar.year$+pom_calendar.month$+"01",nxt_mnth$,-1
        if len(nxt_mnth$)<>8 break
        gap$=gap$+nxt_mnth$
        x0=1
        goto l6350
l6330:
        gap$=gap$+pom_calendar.year$+pom_calendar.month$+str(pos(" "<>day_status$)-1:"00")
        x0=pos(" "<>day_status$)
        goto l6350
l6340:
        x0=1
l6350:
        if x0=0 x0=1
        x1=pos(" "=day_status$(x0,pom_calendar.days_in_mth+1-x0))
        if x1=0 goto rem_months
        gap$=gap$+pom_calendar.year$+pom_calendar.month$+str(x0+x1-1:"00")
        x2=pos(" "<>day_status$(x0+x1-1,pom_calendar.days_in_mth+1-(x0+x1)))
        if x2=0 goto rem_months
        gap$=gap$+pom_calendar.year$+pom_calendar.month$+str(x0+x1+x2-3:"00")
        x0=x0+x1+x2-2
        goto l6350
    wend

    if mod(len(gap$),16)<>0 gap$=gap$(1,len(gap$)-8)
    if len(gap$)<>0
        for x=1 to len(gap$) step 16
            gap_start$=gap$(x+4,2)+"/"+gap$(x+6,2)+"/"+gap$(x,4)
            gap_stop$=gap$(x+12,2)+"/"+gap$(x+14,2)+"/"+gap$(x+8,4)
            gosub load_GapVect
        next x
    endif

    return

find_gaps:rem --- find gaps (unsched days) between begin/end dates
rem --- this logic is complicated... in v6/7 all day statuses were in a single string
rem --- w/ v8, all are separate templated fields.  So we look at each day, mark start of
rem --- gap when we find a space (also set stop=start at that point), then set end of gap 
rem --- each space day thereafter until we hit non-space again.  When we find new start of
rem --- gap, previous start/stop pair are added to gapVect!.  It should process entire
rem --- month gaps correctly as well.
rem --- start_of_gap=1 means we're at the start of a new gap, 0 means we've captured
rem --- the start of gap date, and need set stop dates until we hit a non-space day.

    first_rec=1
    start_of_gap=1
    GapVect!=SysGUI!.makeVector()  
    gap_start$=""
    gap_stop$=""
    last_key$=""
    dim pom_calendar$:fattr(pom_calendar$)

    read(pom_calendar_dev,key=firm_id$,dom=*next)

    while 1

        readrecord(pom_calendar_dev,end=*break)pom_calendar$
        if pom_calendar.firm_id$<>firm_id$ then break
        if last_key$="" then last_key$=pom_calendar.year$+pom_calendar.month$

        for curr_day=1 to pom_calendar.days_in_mth
            day_stat$=field(pom_calendar$,"DAY_STATUS_"+str(curr_day:"00"))
            if cvs(day_stat$,3)=""
                if start_of_gap=1
                    if num(pom_calendar.year$+pom_calendar.month$)-num(last_key$)>1
                        rem - if at start of new gap, but this yr/mo not contig w/ previous, adjust begin dt for the gap
                        rem - then put prev start/stop into gapVect!, and begin tracking gap
                        wk_date$=last_key$+day_str$(num(last_key$(5,2))*2-1,2)
                        call stbl("+DIR_PGM")+"adc_daydates.aon",wk_date$,nxt_date$,1
                        gosub load_GapVect
                        gap_start$=nxt_date$
                        gap_stop$=gap_start$
                        last_key$=pom_calendar.year$+pom_calendar.month$
                        start_of_gap=0
                    else
                        rem - if at start of new gap and this rec is contiguous w/ previous,
                        rem - put prev start/stop into gapVect! and begin tracking gap
                        gosub load_GapVect
                        gap_start$=pom_calendar.year$+pom_calendar.month$+str(curr_day:"00")
                        gap_stop$=gap_start$
                        start_of_gap=0
                    endif
                else
                    rem - start_of_gap<>1, meaning we're in the middle of tracking a gap
                    rem - just update the gap_stop$
                    gap_stop$=pom_calendar.year$+pom_calendar.month$+str(curr_day:"00")
                endif
            else
                rem --- init gapvect! once we find first non-space day in calendar
                if first_rec=1
                    gapVect!.clear()
                    start_of_gap=1
                    first_rec=0
                else
                    rem --- if first day of new month is non-space, and gap isn't closed, get end date for gap
                    if curr_day=1 and start_of_gap=0
                        wk_date$=pom_calendar.year$+pom_calendar.month$+str(curr_day:"00")
                        call stbl("+DIR_PGM")+"adc_daydates.aon",wk_date$,prev_date$,-1
                        last_key$=prev_date$(1,6)
                        gap_stop$=prev_date$
                        start_of_gap=1
                    endif
                    rem --- just a regular non-space day
                    start_of_gap=1
                endif
            endif
        next curr_day

        last_key$=pom_calendar.year$+pom_calendar.month$

    wend
    gosub load_GapVect

    return

load_GapVect:
    if cvs(gap_start$,3)<>"" and cvs(gap_stop$,3)<>""
        GapVect!.addItem(fndate$(gap_start$)+" - "+fndate$(gap_stop$))
    endif
    gap_start$=""
    gap_stop$=""

    return

validate_date:
rem --- see if curr_mo/curr_yr is in calendar; option to create if not

    dim pom_calendar$:fattr(pom_calendar$)

    read record(pom_calendar_dev,key=firm_id$+str(try_yr:"0000")+str(try_mo:"00"),dom=*next)pom_calendar$
    if cvs(pom_calendar.year$,3)=""
rem        msg_id$="PO_NO_CAL"
rem        msg_opt$=""
rem        gosub disp_message
rem        if msg_opt$="Y"
            curr_yr=try_yr
            curr_mo=try_mo
            gosub create_new_month
        endif
rem    else
        curr_yr=try_yr
        curr_mo=try_mo
rem    endif

    return

create_new_month:rem --- add new, blank record for specified yr/mo to calendar

    dim pom_calendar$:fattr(pom_calendar$)
    pom_calendar.firm_id$=firm_id$
    pom_calendar.year$=str(curr_yr:"0000")
    pom_calendar.month$=str(curr_mo:"00")
    
    pom_calendar.days_in_mth=num(day_str$(curr_mo*2-1,2))
    if mod(curr_yr,4)=0 and curr_mo=2 then pom_calendar.days_in_mth=29
    writerecord(pom_calendar_dev)pom_calendar$

    return

get_user_settings:rem --- Get User/Windows Settings

    win_save_id$=pad("WIN_[PURCH_CAL]",20)
    call dir_syp$+"bac_winsize.bbj",cvs(win_save_id$,4),"W","",Window!,"READ",win_coord[all]

    return

save_user_settings:rem --- Save Windows Coordinates

    if Window!<>null() then
        call dir_syp$+"bac_winsize.bbj",cvs(win_save_id$,4),"W","",Window!,"SAVE",win_coord[all]
    endif

    return

open_tables:rem -----<Open Tables

    call dir_syp$+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],table_chans$[all],open_batch,open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto exit_prog
    endif

    return

disp_message:rem --- Display Message Dialog

    call dir_syp$+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

disp_win:rem --- Display Window

    dim ctl_misc$[20]

    form_id$=file_base$+"arc/pom_calendar.arc"

    call dir_syp$+"bam_controls.bbj",gui_dev,SysGUI!,form_id$,win_coord[all],Window!,"DISPLAY",open_chan$[all],ctl_misc$[all]

    childGrid!=Window!.getControl(100)
    
    BtnPrevYr!=Window!.getControl(101)
    BtnPrevYr!.setImage(BarImageMgr.getImage("im_tb_fst_m"))
    BtnPrevMo!=Window!.getControl(102)
    BtnPrevMo!.setImage(BarImageMgr.getImage("im_tb_prv_m"))
    BtnNextMo!=Window!.getControl(103)
    BtnNextMo!.setImage(BarImageMgr.getImage("im_tb_nxt_m"))
    BtnNextYr!=Window!.getControl(104)
    BtnNextYr!.setImage(BarImageMgr.getImage("im_tb_lst_m"))
    BtnCurrMo!=Window!.getControl(105)
    BtnCurrMo!.setImage(BarImageMgr.getImage("im_tb_cal_m"))        
  
    CurrDate!=Window!.getControl(106)

    FirstDate!=Window!.getControl(109)
    LastDate!=Window!.getControl(110)

    LstGaps!=Window!.getControl(111)
    if GapVect!.size()
        LstGaps!.insertItems(0,GapVect!)
    else
        LstGaps!.addItem(Translate!.getTranslation("AON_NONE"))
    endif
    LstGaps!.selectIndex(0)

    GridCal!=childGrid!.getControl(100)
    GridFont!=GridCal!.getFont()
    HdrFont!=SysGUI!.makeFont(GridFont!.getName(),GridFont!.getSize(),1)

    WinColor!=Window!.getBackColor()
    win_title$=Window!.getTitle()
    Window!.setIcon(form_icon$,err=*next)

    win_disp$="YES"

    return

resize_win:rem --- Resize Window Contents

        childGrid!.setSize(Window!.getWidth()-(childGrid!.getX()*2),Window!.getHeight()-childGrid!.getY()-20)
        GridCal!.setSize(childGrid!.getWidth()-(GridCal!.getX()*2),childGrid!.getHeight()-10)
        GridCal!.setRowHeight((GridCal!.getHeight()-GridCal!.getColumnHeaderHeight())/6)

    return

def_grids:rem --- Define Grid

    def_output_cols=no_columns
    dim attr_col$[def_output_cols,len(attr_def_col$[0,0])/5]

    col_size=int(childGrid!.getWidth()/7)

    for curr_column=1 to no_columns

        attr_col$[curr_column,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="COL_"+str(curr_column+1:"0")
        attr_col$[curr_column,fnstr_pos("LABS",attr_def_col$[0,0],5)]=columns$[curr_column]
        attr_col$[curr_column,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="C"
        attr_col$[curr_column,fnstr_pos("CTLW",attr_def_col$[0,0],5)]=str(col_size)
        attr_col$[0,1]=attr_col$[0,1]+pad("SUMMARY."+attr_col$[curr_column,fnstr_pos("DVAR",attr_def_col$[0,0],5)],40)

    next curr_column

    call dir_syp$+"bam_grid_init.bbj",gui_dev,GridCal!,"NOSCROLL-COLH-LINES-CELL-VTOP",num_rows,attr_def_col$[all],attr_col$[0,1],attr_col$[all]
    GridCal!.setFitToGrid(GridCal!.AUTO_RESIZE_LAST_COLUMN)
    GridCal!.setRowHeight(int((childGrid!.getHeight()-GridCal!.getColumnHeaderHeight())/num_rows))
rem    for x=1 to num_rows         
rem        GridCal!.setRowHeaderCellText(x-1,weeks$[x])
rem    next x
    GridCal!.setSelectionMode(GridCal!.GRID_SELECT_CELL)
    GridCal!.setGridEditable(GridCal!.FALSE)
    GridCal!.setMultipleSelection(GridCal!.TRUE)
    GridCal!.setHighlightMethod(GridCal!.GRID_HIGHLIGHT_OUTLINE)

    rem --- Add PopUp Window
    popmenuStat!=SysGUI!.addPopupMenu()
    popmenu_stat1! = popmenuStat!.addMenuItem(-201,Translate!.getTranslation("AON_CLOSED"))
    popmenu_stat1!.setBackColor(ClosedColor!)
    popmenu_stat2! = popmenuStat!.addMenuItem(-202,Translate!.getTranslation("AON_HOLIDAY"))
    popmenu_stat2!.setBackColor(HolidayColor!)
    popmenu_stat3! = popmenuStat!.addMenuItem(-203,Translate!.getTranslation("AON_WORKDAY"))
    popmenu_stat3!.setBackColor(DayColor!)

    return

resolve_path:rem --- Resolve Program Path

    while pos("["=prog_path$)<>0
        stbl_from=pos("["=prog_path$)+1
        stbl_thru=pos("]"=prog_path$)
        proc_mssg$=stbl_err$
        temp_stbl$=stbl(prog_path$(stbl_from,stbl_thru-stbl_from),err=*next)
        proc_mssg$=""
        if stbl_thru=len(prog_path$)
            prog_path$=prog_path$(1,stbl_from-2)+temp_stbl$
        else
            prog_path$=prog_path$(1,stbl_from-2)+temp_stbl$+prog_path$(stbl_thru+1)
        endif
    wend

    return

def fnLocale!(Locale$)
  Locale$ = cvs(Locale$,3)
   switch pos("_"=Locale$,1,0)
     case 0
       return new Locale(Locale$)
     case 1; rem ' language_country
       p = pos("_"=Locale$)
       language$ = cvs(Locale$(1,p-1),8)
       country$ = cvs(Locale$(p+1),4)
       return new Locale(language$,country$)
     case 2; rem ' language_country_modifier
       p1 = pos("_"=Locale$)
       p2 = pos("_"=Locale$(p1+1))
       language$ = cvs(Locale$(1,p1-1),8)
       country$ = cvs(Locale$(p1+1,p2-1),4)
       modifier$ = Locale$(p1+p2)
       return new Locale(language$,country$,modifier$)
     case default; rem ' invalid format
       return new Locale(Locale$)
   swend
 fnend

rem --- Date/time handling functions
rem --- format added to this version

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next):"%Mz/%Dz/%Yd",err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
    if pos("EXIT"=err_act$) goto std_error_exit
    if pos("ESCAPE"=err_act$) seterr 0;setesc 0
    if pos("RETRY"=err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

exit_prog:rem --- Exit Program

    gosub save_user_settings

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

    end