rem --- Purchase Order Receipt Register (Receipts by Vendor Overlay)
rem --- Program por_recptreg v8.0.0 11Jun2009 (por_da)
rem --- Created by adx_codeport.bbj v1.1.5 (06/11/2009 12:20:59)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$
    
rem --- set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif
    
    
rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    
rem --- each receipt on separate page?

    msg_id$="PO_RECREG_BRK"
    gosub disp_message
    if msg_opt$="C" then goto std_exit
    break$=msg_opt$

rem --- Open/Lock files

    files=30,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]

    files$[1]="apm-01",ids$[1]="APM_VENDMAST"
    files$[2]="aps_params",ids$[2]="APS_PARAMS"
    files$[3]="ars_params",ids$[3]="ARS_PARAMS"
    files$[4]="gls_params",ids$[4]="GLS_PARAMS"
    files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
    files$[6]="ivm-02",ids$[6]="IVM_ITEMWHSE"
    files$[7]="ivc_whsecode",ids$[7]="IVC_WHSECODE"
    files$[8]="ivs_params",ids$[8]="IVS_PARAMS"
    files$[9]="poe-04",ids$[9]="POE_RECHDR",options$[9]="L"
    files$[10]="poe-14",ids$[10]="POE_RECDET"
    files$[11]="poe-24",ids$[11]="POE_RECLSDET"
    files$[12]="pom-02",ids$[12]="POC_LINECODE"
    files$[13]="pos_params",ids$[13]="POS_PARAMS"
    files$[14]="pow-03",ids$[14]="POW_BOFILL",options$[14]="C"
    files$[15]="pow-04",ids$[15]="POW_RECSTOCK",options$[15]="C"
    files$[16]="pow-05",ids$[16]="POW_RECNSTCK",options$[16]="C"
    files$[17]="pow-08",ids$[17]="POW_RECBYWO",options$[17]="C"
    files$[18]="pow-09",ids$[18]="POW_RECBYORD",options$[18]="C"

    call pgmdir$+"adc_fileopen.aon",action,begfile,18,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[1]
    aps01a_dev=channels[2]
    ars01a_dev=channels[3]
    gls01a_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivm10_dev=channels[7]
    ivs01a_dev=channels[8]
    poe04_dev=channels[9]
    poe14_dev=channels[10]
    poe24_dev=channels[11]
    pom02_dev=channels[12]
    pos01a_dev=channels[13]
    pow03_dev=channels[14]
    pow04_dev=channels[15]
    pow05_dev=channels[16]
    pow08_dev=channels[17]
    pow09_dev=channels[18]

rem --- Dimension string templates

    dim apm01a$:templates$[1],aps01a$:templates$[2],ars01a$:templates$[3],
:       gls01a$:templates$[4],ivm01a$:templates$[5],ivm02a$:templates$[6],
:       ivm10c$:templates$[7],ivs01a$:templates$[8],poe04a$:templates$[9],
:       poe14a$:templates$[10],poe24a$:templates$[11],pom02a$:templates$[12],
:       pos01a$:templates$[13],pow03a$:templates$[14],pow04a$:templates$[15],
:       pow05a$:templates$[16],pow08a$:templates$[17],pow09a$:templates$[18]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (pos01a_dev,key=pos01a_key$,err=std_missing_params) pos01a$

rem --- masks

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,0

    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",m0$,0,vendlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",customask$,0,custlen

rem --- Parameters

    dim i[7],g[4],info$[20]
    n2$="PO"
    ap$="N"
    ar$="N"
    sf$="N"
    ls$="N"
    lf$="N"
    recs=0

    vendlen=num(aps01a.vendor_size$)
    i[0]=ivs01a.item_id_len
    i[1]=num(ivs01a.precision$)
    i[2]=ivs01a.ls_no_len
    i[3]=num(ivs01a.desc_len_01$)
    i[4]=num(ivs01a.desc_len_02$)
    i[5]=num(ivs01a.desc_len_03$)
    i[6]=ivs01a.vendor_prd_len
    i[7]=num(ivs01a.current_year$)
    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_per$)
    g[2]=num(gls01a.current_year$)
    g[3]=num(gls01a.acct_length$)
    g[4]=num(gls01a.max_acct_len$)
    replenishment$=aps01a.use_replen$
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    op$="N"
    distcode$="N"
    if ar$="Y" 
        call pgmdir$+"adc_application.aon","OP",info$[all]
        op$=info$[20]
        distcode$=ars01a.dist_by_item$
    endif
    call pgmdir$+"adc_application.aon","SF",info$[all]
    sf$=info$[20]
    gl$="N"
    status=0
    source$=pgm(-2)
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status goto std_exit
    process_id$=stbl("+PROCESS_ID")
    batch_no$=stbl("+BATCH_NO")

rem --- Initializations

    precision i[1]
    dim a0$(22),a1$(160),a[8],b0$(8),b1$(195),o[13],x4$(53),x5$(93)
    dim c0$(22),c1$(60),c2$(64),c6$(g[4]*6),d0$(24),d1$(64),d[20]
    dim w0$(25),w1$(48),w2$(32),w3$(22),w4$(40),w[12],description$(40)
    dim headings$[3],totals[5],receipt[5],vendor[5],report[5],x8$(37),x9$(43)
    dim y0$(4),y1$(32),y2$(g[4]),z0$(32),z1$(11*g[4]),r0$(24),r[1]
    dim l0$(28),l1$(20),l[1],dif$[99],lineqty[99],lsqty[99],factor[99]
    dim glfiles[20],glparams$[20],glparams[20],w$[10],tpls$[10]
    if pos(ivs01a.lotser_flag$="LS")>0 ls$="Y"
    if pos(ivs01a.lifofifo$="LF")>0 lf$="Y"
    m0=len(m0$)
    width=132
    page=0
    l9=59
    l=l9+1
    clock$=""
    when$=sysinfo.system_date$
    headings=2
    cost$=Translate!.getTranslation("AON_AVG")
    done=0
    ls=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]="[HEADER]"
    number=0
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    if ivs01a.cost_method$="S" cost$=Translate!.getTranslation("AON_STD")
    if ivs01a.cost_method$="R" cost$=Translate!.getTranslation("AON_REP")
    bw=max(m0+16,32)
    dh1$=Translate!.getTranslation("AON_DIST")
    dh2$=Translate!.getTranslation("AON_CODE")
    lsdesc$=Translate!.getTranslation("AON_SERIAL_NBR")
    if ivs01a.lotser_flag$="L" lsdesc$=Translate!.getTranslation("AON_LOT_NBR")
    xref_dev=0
    lotser=0
    errors=0
    dif$=""

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_RECDET","PRIMARY",lsdiff_tpl$,rd_table_chans$[all],status$

rem --- Headings and print positions
rem --- because of the non-columnar nature of this report, it has been converted to DocOut
rem --- using a single column, and print lines are built by constructing pbuf$, then an entire
rem --- line is added to OutVect! (OutVect!.addItem(pbuf$))

    dim columns$[0,10]
    columns$[0,0]="  ",columns$[0,1]="C",columns$[0,2]=str(width)

rem --- Additional File Opens

    if ar$<>"N"
        files$[19]="arm-01",ids$[19]="ARM_CUSTMAST"
        files$[20]="arc_distcode",ids$[20]="ARC_DISTCODE"

        call pgmdir$+"adc_fileopen.aon",action,19,20,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

      arm01_dev=channels[19]
      arm10_dev=channels[20]

      dim arm01a$:templates$[19],arm10d$:templates$[20]
    endif

    if op$<>"N"
        files$[21]="ope-01",ids$[21]="OPE_ORDHDR"
        files$[22]="ope-11",ids$[22]="OPE_ORDDET"
        files$[23]="opm-02",ids$[23]="OPC_LINECODE"

        call pgmdir$+"adc_fileopen.aon",action,21,23,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        ope01_dev=channels[21]
        ope11_dev=channels[22]
        opm02_dev=channels[23]

        dim ope01a$:templates$[21],ope11a$:templates$[22],opm02a$:templates$[23]
    endif

    if lf$<>"N"
        files$[24]="ivm-04",ids$[24]="IVM_ITEMTIER"
        files$[25]="ivw-04",ids$[25]="IVW_LFDET",options$[25]="CL"

        call pgmdir$+"adc_fileopen.aon",action,24,25,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        ivm04_dev=channels[24]
        ivw04_dev=channels[25]

        dim ivm04a$:templates$[24],ivw04a$:templates$[25]
    endif

    if gl$<>"N"
        files$[26]="glm-01",ids$[26]="GLM_ACCT"
        files$[27]="glw-11",ids$[27]="GLW_DAILYDETAIL";rem no longer clearing entire file; ,options$[27]="CL"

        call pgmdir$+"adc_fileopen.aon",action,26,27,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        glm01_dev=channels[26]
        glw11_dev=channels[27]

        dim glm01a$:templates$[26]
        
rem --- Clear trans for this firm/process/batch from glw-11 work file (if not batching, batch_no$ is zero, and will clear all recs this firm/process)

        rec_pfx$=firm_id$+process_id$+batch_no$
        call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
        
    endif

    if sf$<>"N"
        files$[28]="sfe-01",ids$[28]="SFE_WOMASTR"
        files$[29]="sfe-04",ids$[29]="SFE_WOTRANS"
        files$[30]="sfm-10",ids$[30]="SFC_WOTYPECD"

        call pgmdir$+"adc_fileopen.aon",action,28,30,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        sfe01_dev=channels[28]
        sfe04_dev=channels[29]
        sfm10_dev=channels[30] 

        dim sfe01a$:templates$[28],sfe04a$:templates$[29],sfm10a$:templates$[30]
    endif

rem --- Resize masks and set print positions

    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,6,12
    o[12]=width-10
    o[11]=o[12]-m1
    o[10]=o[11]-m3
    o[9]=o[10]-m1
    o[8]=o[9]-m3
    o[7]=o[8]-m2
    o[6]=o[7]-m2
    o[5]=o[6]-3
    o[4]=o[5]-5
    o[0]=3
    o[1]=o[0]+8
    o[2]=o[1]+3
    o[3]=o[2]+3

rem --- Position file

    call pgmdir$ + "adc_progress.aon","N","","","","",0,poe04_dev,1,meter_num,status
    read (poe04_dev,key=firm_id$,knum="AO_VEND_RCVR_PO",dom=*next)
l1000: rem --- Read next header

    k$=key(poe04_dev,end=done)
    if pos(firm_id$=k$)<>1 goto done
    read record (poe04_dev) poe04a$
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Header fields

    dim receipt[5]
    complete$=Translate!.getTranslation("AON_(BACKORDER)")
    packlist$=""
    number=number+1
    if poe04a.rec_complete$="Y" complete$=Translate!.getTranslation("AON_(COMPLETE)")
    if cvs(poe04a.packing_list$,2)<>"" packlist$=poe04a.packing_list$

rem --- Level break?

    if t0$<>poe04a.vendor_id$ gosub l6000
    if break$="Y" l=l9+1

rem --- Print header information

    if l+6>l9 gosub report_heading else gosub l5200
    read (poe14_dev,key=poe04a.firm_id$+poe04a.receiver_no$,knum="DISPLAY_SEQ",dom=*next)

l1500: rem --- Read next detail record

    k$=key(poe14_dev,end=l3900)
    if pos(poe04a.firm_id$+poe04a.receiver_no$=k$)<>1 goto l3900
    read record (poe14_dev) poe14a$
    if pom02a.firm_id$+pom02a.po_line_code$=firm_id$+poe14a.po_line_code$ goto l1600
    pom02a.firm_id$=firm_id$
    pom02a.po_line_code$=poe14a.po_line_code$
    find record (pom02_dev,key=pom02a.firm_id$+pom02a.po_line_code$,dom=l3800) pom02a$

l1600: rem --- Retrieve inventory item for S lines

    dim ivm01a$:fattr(ivm01a$)
    ivm01a.firm_id$=firm_id$
    ivm01a.item_id$=poe14a.item_id$
    description$(1)=nf$
    dim ivm02a$:fattr(ivm02a$)
    ivm02a.firm_id$=firm_id$
    ivm02a.warehouse_id$=poe14a.warehouse_id$
    ivm02a.item_id$=poe14a.item_id$
    code$=""
    begsort$=firm_id$+poe14a.warehouse_id$+poe04a.recpt_date$
    endsort$=poe04a.vendor_id$+poe14a.receiver_no$+poe14a.po_no$+poe14a.internal_seq_no$
    if pom02a.line_type$<>"S" goto l1700
    find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=l3800) ivm01a$
    find record (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=l3800) ivm02a$
    description$(1)=fnitem$(ivm01a.item_desc$,i[3],i[4],i[5])
    if distcode$="Y" code$=ivm02a.ar_dist_code$

l1700: rem --- Calculate line extensions

    qty=poe14a.qty_received
    iv_extension=0
    if pom02a.line_type$="O" qty=1
    precision 2
    po_extension=poe14a.unit_cost*qty
    if pom02a.line_type$="S" iv_extension=ivm02a.unit_cost*qty*poe14a.conv_factor
    precision i[1]

rem --- Branch based on line code

    on pos(pom02a.line_type$="SNVMO") goto l3800,l1900,l2000,l2100,l2200,l2300

l1900: rem --- Standard line

    cust$=""
    if l+2>l9 gosub report_heading
    
    dim pbuf$(width)
    rem pbuf$(o[0]+1)=fnisn$(poe14a.internal_seq_no$)
    pbuf$(o[1]+1)=poe14a.po_line_code$
    pbuf$(o[2]+1)=poe14a.warehouse_id$
    pbuf$(o[3]+1)=poe14a.item_id$
    pbuf$(o[4]+1)=code$
    pbuf$(o[5]+1)=poe14a.unit_measure$
    pbuf$(o[6]+1)=str(poe14a.qty_ordered:m2$)
    pbuf$(o[7]+1)=str(poe14a.qty_received:m2$)
    pbuf$(o[8]+1)=str(ivm02a.unit_cost*poe14a.conv_factor:m3$)
    pbuf$(o[9]+1)=str(iv_extension:m1$)
    pbuf$(o[10]+1)=str(poe14a.unit_cost:m3$)
    pbuf$(o[11]+1)=str(po_extension:m1$)
    pbuf$(o[12]+1)=poe14a.location$
    OutVect!.addItem(pbuf$)
    recs=recs+1
   
    dim pbuf$(width)
    pbuf$(o[3]+1)=description$
    OutVect!.addItem(pbuf$)

    l=l+2
    goto l2400

l2000: rem --- Non-stock line

    if l+2>l9 gosub report_heading
    
    dim pbuf$(width)
    rem pbuf$(o[0]+1)=fnisn$(poe14a.internal_seq_no$)
    pbuf$(o[1]+1)=poe14a.po_line_code$
    pbuf$(o[2]+1)=poe14a.warehouse_id$
    pbuf$(o[3]+1)=poe14a.item_id$
    pbuf$(o[4]+1)=code$
    pbuf$(o[5]+1)=poe14a.unit_measure$
    pbuf$(o[6]+1)=str(poe14a.qty_ordered:m2$)
    pbuf$(o[7]+1)=str(poe14a.qty_received:m2$)
    pbuf$(o[10]+1)=str(poe14a.unit_cost:m3$)
    pbuf$(o[11]+1)=str(po_extension:m1$)
    pbuf$(o[12]+1)=poe14a.location$
    OutVect!.addItem(pbuf$)
    recs=recs+1
    
    dim pbuf$(width)   
    pbuf$(o[3]+1)=poe14a.order_memo$
    OutVect!.addItem(pbuf$)    
    
    l=l+2
    goto l2400

l2100: rem --- Vendor part number line

    if l+1>l9 gosub report_heading
    dim pbuf$(width)
    rem pbuf$(o[0]+1)=fnisn$(poe14a.internal_seq_no$)
    pbuf$(o[1]+1)=poe14a.po_line_code$
    pbuf$(o[2]+1)=poe14a.warehouse_id$
    pbuf$(o[3]+1)=poe14a.item_id$
    OutVect!.addItem(pbuf$)    
    recs=recs+1

    l=l+1
    goto l2400

l2200: rem --- Message line

    if l+1>l9 gosub report_heading
    dim pbuf$(width)    
    rem pbuf$(o[0]+1)=fnisn$(poe14a.internal_seq_no$)
    pbuf$(o[1]+1)=poe14a.po_line_code$
    pbuf$(o[2]+1)=poe14a.warehouse_id$
    pbuf$(o[3]+1)=poe14a.order_memo$
    OutVect!.addItem(pbuf$)    
    recs=recs+1

    l=l+1
    goto l2400

l2300: rem --- Other type line

    if l+2>l9 gosub report_heading
    dim pbuf$(width)        
    rem pbuf$(o[0]+1)=fnisn$(poe14a.internal_seq_no$)
    pbuf$(o[1]+1)=poe14a.po_line_code$
    pbuf$(o[2]+1)=poe14a.warehouse_id$
    pbuf$(o[10]+1)=str(poe14a.unit_cost:m3$)
    pbuf$(o[11]+1)=str(po_extension:m1$)
    pbuf$(o[12]+1)=poe14a.location$
    OutVect!.addItem(pbuf$)
    recs=recs+1
    
    dim pbuf$(width)    
    pbuf$(o[3]+1)=poe14a.order_memo$
    OutVect!.addItem(pbuf$)    

    l=l+2

l2400: rem --- Lotted/Serialized?
    if ls$="N" goto l3000
    if pom02a.line_type$<>"S" goto l3000
    if ivm01a.lotser_item$+ivm01a.inventoried$<>"YY" goto l3000
    total=0
    lastseq=0
    needed=poe14a.conv_factor*poe14a.qty_received
    read (poe24_dev,key=poe14a.firm_id$+poe14a.receiver_no$+poe14a.internal_seq_no$,dom=*next)

l2500: rem --- Read next lot/serial detail record

    k$=key(poe24_dev,end=l2800)
    if pos(poe14a.firm_id$+poe14a.receiver_no$+poe14a.internal_seq_no$=k$)<>1 goto l2800
    read record (poe24_dev) poe24a$
    precision 2
    extension=poe24a.qty_received*poe24a.unit_cost
    precision i[1]

rem --- Print detail line

    if l+1>l9 gosub report_heading
    dim pbuf$(width)        
    pbuf$(o[3]+1)=lsdesc$+" "+poe24a.sequence_no$+" "+poe24a.lotser_no$(1,i[2])
    pbuf$(o[7]+1)=str(poe24a.qty_received:m2$)
    pbuf$(o[10]+1)=str(poe24a.unit_cost:m3$)
    pbuf$(o[11]+1)=str(extension:m1$)
    OutVect!.addItem(pbuf$)
    l=l+1
    recs=recs+1
    total=total+poe24a.qty_received
    lastseq=num(poe24a.sequence_no$)
    goto l2500

l2800: rem --- Enough lot/serial numbers?

    if needed=total goto l3000
    lotser=lotser+1
    if lotser>99 goto l2900
    lineqty[lotser]=poe14a.qty_received
    lsqty[lotser]=total
    factor[lotser]=poe14a.conv_factor
    dif$[lotser]=poe14a.firm_id$+poe14a.receiver_no$+poe14a.internal_seq_no$

l2900: rem --- Print lines for missing lot/serial numbers

    if total>needed goto l3000
    dim x$(i[2],"_")
    if ivs01a.lotser_flag$="L" needed=total+1
    for x=total+1 to needed
        if l+1>l9 gosub report_heading
        l=l+1
        lastseq=lastseq+1
        dim pbuf$(width)        
        pbuf$(o[3]+1)=lsdesc$+" "+str(lastseq:"000-")+x$
        OutVect!.addItem(pbuf$)
        recs=recs+1
    next x

l3000: rem --- Generate GL Recap Postings

    if gl$="N" goto l3500
    glfiles[1]=arm10_dev
    glfiles[2]=sfe01_dev
    glfiles[3]=sfm10_dev
    glfiles[4]=glm01_dev
    glfiles[5]=glw11_dev
    glfiles[6]=xref_dev
    w$[0]=poe14a$
    glparams$[0]=gl$
    glparams$[1]=poe04a.recpt_date$
    glparams$[2]=apm01a.vendor_id$
    glparams$[3]=m0$
    glparams$[4]=gls01a$
    glparams$[5]=description$
    glparams$[6]=pom02a$
    glparams$[7]=ivm01a$
    glparams$[8]=distcode$
    glparams$[9]=code$
    glparams$[10]=firm_id$
    glparams$[11]=sf$
    glparams[0]=po_extension
    glparams[1]=g[4]
    glparams[2]=i[0]
    glparams$[12]=ivs01a.cost_method$
    glparams[3]=iv_extension
    if cvs(poe14a$,3)<>"" then tpls$[0]=fattr(poe14a$)
    if cvs(gls01a$,3)<>"" then tpls$[1]=fattr(gls01a$)
    if cvs(pom02a$,3)<>"" then tpls$[2]=fattr(pom02a$)
    if cvs(ivm01a$,3)<>"" then tpls$[3]=fattr(ivm01a$)
    if cvs(arm10d$,3)<>"" then tpls$[4]=fattr(arm10d$)
    if cvs(sfe01a$,3)<>"" then tpls$[5]=fattr(sfe01a$)
    if cvs(sfm10a$,3)<>"" then tpls$[6]=fattr(sfm10a$)
    call pgmdir$+"poc_recglpost.aon",glfiles[all],w$[all],w[all],glparams$[all],glparams[all],tpls$[all],status
    if status goto std_exit
    if gl_posting=0 then gl_posting=glparams[20]; rem " --- Set GL Posting Status for the last report overlay.  glparams[20] is set to 1 in poc_recglpost.aon if a GL posting is written"

l3500: rem --- Write sort records

    rem begsort$=firm_id$+poe14a.warehouse_id$+poe04a.recpt_date$
    rem endsort$=poe04a.vendor_id$+poe14a.receiver_no$+poe14a.po_no$+poe14a.internal_seq_no$

    dim pow03a$:fattr(pow03a$),pow04a$:fattr(pow04a$),pow05a$:fattr(pow05a$),pow08a$:fattr(pow08a$),pow09a$:fattr(pow09a$)

    pow03a.firm_id$=firm_id$
    pow03a.warehouse_id$=poe14a.warehouse_id$
    pow03a.item_id$=poe14a.item_id$

    pow04a.firm_id$=firm_id$
    pow04a.warehouse_id$=poe14a.warehouse_id$
    pow04a.recpt_date$=poe04a.recpt_date$
    pow04a.item_id$=poe14a.item_id$
    pow04a.vendor_id$=poe04a.vendor_id$
    pow04a.receiver_no$=poe14a.receiver_no$
    pow04a.po_no$=poe14a.po_no$
    pow04a.po_int_seq_ref$=poe14a.internal_seq_no$

    pow05a.firm_id$=firm_id$
    pow05a.warehouse_id$=poe14a.warehouse_id$
    pow05a.recpt_date$=poe04a.recpt_date$
    pow05a.item_id$=poe14a.item_id$
    pow05a.order_memo$=poe14a.order_memo$
    pow05a.vendor_id$=poe04a.vendor_id$
    pow05a.receiver_no$=poe14a.receiver_no$
    pow05a.po_no$=poe14a.po_no$
    pow05a.po_int_seq_ref$=poe14a.internal_seq_no$

    pow08a.firm_id$=firm_id$
    pow08a.warehouse_id$=poe14a.warehouse_id$
    pow08a.wo_no$=poe14a.wo_no$
    pow08a.wo_seq_ref$=poe14a.wo_seq_ref$
    pow08a.vendor_id$=poe04a.vendor_id$
    pow08a.receiver_no$=poe14a.receiver_no$
    pow08a.po_no$=poe14a.po_no$
    pow08a.po_int_seq_ref$=poe14a.internal_seq_no$

    pow09a.firm_id$=firm_id$
    pow09a.warehouse_id$=poe14a.warehouse_id$
    pow09a.customer_id$=poe04a.customer_id$
    pow09a.order_no$=poe04a.order_no$
    pow09a.so_int_seq_ref$=poe14a.so_int_seq_ref$
    pow09a.vendor_id$=poe04a.vendor_id$
    pow09a.receiver_no$=poe14a.receiver_no$
    pow09a.po_no$=poe14a.po_no$
    pow09a.po_int_seq_ref$=poe14a.internal_seq_no$

    if pos(pom02a.line_type$="NO") write record (pow05_dev,key=pow05a.firm_id$+pow05a.warehouse_id$+       pow05a.recpt_date$+pow05a.item_id$+pow05a.order_memo$+pow05a.vendor_id$+pow05a.receiver_no$+       pow05a.po_no$+pow05a.po_int_seq_ref$) pow05a$
    if cvs(pow08a.wo_no$+pow08a.wo_seq_ref$,3)<>"" write record (pow08_dev,key=pow08a.firm_id$+pow08a.warehouse_id$+       pow08a.wo_no$+pow08a.wo_seq_ref$+pow08a.vendor_id$+pow08a.receiver_no$+pow08a.po_no$+pow08a.po_int_seq_ref$) pow08a$
    if cvs(pow09a.customer_id$+pow09a.order_no$+pow09a.so_int_seq_ref$,3)<>"" write record (pow09_dev,key=pow09a.firm_id$+       pow09a.warehouse_id$+pow09a.customer_id$+pow09a.order_no$+pow09a.so_int_seq_ref$+pow09a.vendor_id$+       pow09a.receiver_no$+pow09a.po_no$+pow09a.po_int_seq_ref$) pow09a$
    if pom02a.line_type$<>"S" goto l3600
    find record (pow03_dev,key=pow03a.firm_id$+pow03a.warehouse_id$+pow03a.item_id$,dom=*next) pow03a$
    pow03a.qty_received=pow03a.qty_received+(poe14a.qty_received*poe14a.conv_factor)
    write record (pow03_dev,key=pow03a.firm_id$+pow03a.warehouse_id$+pow03a.item_id$) pow03a$
    write record (pow04_dev,key=pow04a.firm_id$+pow04a.warehouse_id$+pow04a.recpt_date$+pow04a.item_id$+       pow04a.vendor_id$+pow04a.receiver_no$+pow04a.po_no$+pow04a.po_int_seq_ref$) pow04a$


l3600: rem --- Accumulate totals

    receipt[0]=receipt[0]+poe14a.qty_ordered
    receipt[1]=receipt[1]+poe14a.qty_received
    receipt[3]=receipt[3]+iv_extension
    receipt[5]=receipt[5]+po_extension
    let vendor[0]=vendor[0]+poe14a.qty_ordered,vendor[1]=vendor[1]+poe14a.qty_received
    let vendor[3]=vendor[3]+iv_extension,vendor[5]=vendor[5]+po_extension
    let report[0]=report[0]+poe14a.qty_ordered,report[1]=report[1]+poe14a.qty_received
    let report[3]=report[3]+iv_extension,report[5]=report[5]+po_extension

l3800: rem --- Loop back for next detail record

    goto l1500

l3900: rem --- Loop back for next header record

    let totals$=Translate!.getTranslation("AON_TOTAL_FOR_PO_#_")+poe04a.po_no$,totals[all]=receipt[all]
    gosub l6800
    goto l1000

done: rem --- All done

    let done=1
    gosub l6000
    let totals$=Translate!.getTranslation("AON_TOTAL_FOR_REGISTER"),totals[all]=report[all]
    gosub l6800

rem --- Any missing lot/serial numbers?

    if ls$="N" goto l4900
    if lotser=0 goto l4900
    let ls=1,headings=headings-1,m2$=i7$,m5$=ivs01a.convert_mask$
    call pgmdir$+"adc_sizemask.aon",m2$,m2,13,13
    call pgmdir$+"adc_sizemask.aon",m5$,m5,10,12
    let o[0]=0,o[1]=o[0]+m0+31,o[2]=o[1]+10,o[3]=o[2]+12
    let o[4]=o[3]+m2,o[5]=o[4]+m5,o[6]=o[5]+m2,o[7]=o[6]+m2
    if l+6>l9 gosub report_heading else gosub l5400

rem --- Print list of lines with lot/serial number differences
    for x=1 to lotser
        dim k$:lsdiff_tpl$,apm01a$:fattr(apm01a$)
        let k$=dif$[x]
        dim poe04a$:fattr(poe04a$)
        dim poe14a$:fattr(poe14a$)
        read record (poe14_dev,key=k.firm_id$+k.receiver_no$+k.internal_seq_no$,knum="PRIMARY")poe14a$
        read record (poe04_dev,key=k.firm_id$+k.receiver_no$,knum="PRIMARY")poe04a$
        apm01a.firm_id$=firm_id$,apm01a.vendor_id$=poe04a.vendor_id$
        find record (apm01_dev,key=apm01a.firm_id$+apm01a.vendor_id$,dom=*next) apm01a$
    l4640:
        if l+1>l9 gosub report_heading
        let stock=lineqty[x]*factor[x],dif=stock-lsqty[x]
        dim pbuf$(width)
        pbuf$(o[0]+1)=fnmask$(apm01a.vendor_id$,m0$)+" "+apm01a.vendor_name$
        pbuf$(o[1]+1)=k.receiver_no$
        pbuf$(o[2]+1)=poe14a.po_no$;rem +"-"+fnisn$(poe14a.internal_seq_no$)
        pbuf$(o[3]+1)=str(lineqty[x]:m2$)
        pbuf$(o[4]+1)=str(factor[x]:m5$)
        pbuf$(o[5]+1)=str(stock:m2$)
        pbuf$(o[6]+1)=str(lsqty[x]:m2$)
        pbuf$(o[7]+1)=str(dif:m2$)
        OutVect!.addItem(pbuf$)
        recs=recs+1
        let l=l+1
    next x

l4900: rem --- Run next overlay

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if number=0 goto std_exit
    run pgmdir$+"por_recptreg_o1.aon"

report_heading: rem --- Report Heading

    let l=headings+4
rem    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
rem    if status exitto std_exit

    HdrVect!.addItem("")
    BrkVect!.addItem(str(OutVect!.size()))
    if ls goto l5400
    dim pbuf$(width)
    pbuf$(o[4]+1)=dh1$
    pbuf$(o[6]+1+m2-9)=Translate!.getTranslation("AON_QUANTITY")
    pbuf$(o[7]+1+m2-9)=Translate!.getTranslation("AON_QUANTITY")
    pbuf$(o[8]+1+m3-5)=cost$
    pbuf$(o[9]+1+m1-10)=cost$
    pbuf$(o[10]+1+m3-5)="PO"
    pbuf$(o[11]+1+m1-10)="PO"
    pbuf$(o[12]+1)=Translate!.getTranslation("AON_RECEIVING")
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    pbuf$(o[0]+1)="";rem used to be Seq; dropping it per VARs
    pbuf$(o[1]+1)=Translate!.getTranslation("AON_CD")
    pbuf$(o[2]+1)=Translate!.getTranslation("AON_WH")
    pbuf$(o[3]+1)=Translate!.getTranslation("AON_ITEM")
    pbuf$(o[4]+1)=dh2$
    pbuf$(o[5]+1)="UM"
    pbuf$(o[6]+1+m2-9)=Translate!.getTranslation("AON_ORDERED")
    pbuf$(o[7]+1+m2-9)=Translate!.getTranslation("AON_RECEIVED")
    pbuf$(o[8]+1+m3-5)=Translate!.getTranslation("AON_COST")
    pbuf$(o[9]+1+m1-10)=Translate!.getTranslation("AON_EXTENSION")
    pbuf$(o[10]+1+m3-5)=Translate!.getTranslation("AON_COST")
    pbuf$(o[11]+1+m1-10)=Translate!.getTranslation("AON_EXTENSION")
    pbuf$(o[12]+1)=Translate!.getTranslation("AON_LOCATION")
    OutVect!.addItem(pbuf$)
    
    if done=0 gosub l5200
    return

l5200: rem --- Receipt subheading

    dim pbuf$(width)
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)   
    pbuf$(1)=Translate!.getTranslation("AON_VENDOR:_")+vendor$
    pbuf$(63+1)=Translate!.getTranslation("AON_REC_#:_")+poe04a.receiver_no$
    pbuf$(97+1)=Translate!.getTranslation("AON_RECEIPT_DATE:_")+fndate$(poe04a.recpt_date$)+" "+complete$
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    pbuf$(63+1)=" PO #: "+poe04a.po_no$
    pbuf$(97+1)=packlist$
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    OutVect!.addItem(pbuf$)
    
    let l=l+4
    call pgmdir$+"glc_datecheck.aon",poe04a.recpt_date$,"N",period$,year$,glstatus
    if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,poe04a.recpt_date$,glstatus,l,errors,status

    if stbl("+DTWARN_MSG",err=*endif)<>""
        dim pbuf$(width)
        pbuf$(1)=stbl("+DTWARN_MSG")
        OutVect!.addItem(pbuf$)
    endif

    return

l5400: rem --- Subheading for lot/serial number errors

    dim pbuf$(width)
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    pbuf$(51+1)=Translate!.getTranslation("AON_LOT/SERIAL_NUMBER_DIFFERENCES")
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    pbuf$(o[3]+1+m2-10)=Translate!.getTranslation("AON_LINE_ITEM")
    pbuf$(o[4]+1+m5-7)=Translate!.getTranslation("AON_CONV")
    pbuf$(o[5]+1+m2-10)=Translate!.getTranslation("AON_STOCKING")
    pbuf$(o[6]+1+m2-11)=Translate!.getTranslation("AON_LOT/SERIAL")
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)    
    pbuf$(o[0]+1)=Translate!.getTranslation("AON_VENDOR")
    pbuf$(o[1]+1)=Translate!.getTranslation("AON_RECEIVER")
    pbuf$(o[2]+1)="PO #       ";rem used to be Translate!.getTranslation("AON_PO_#____SEQ")... dropping seq per VARs
    pbuf$(o[3]+1+m2-10)=Translate!.getTranslation("AON_QTY_REC'D")
    pbuf$(o[4]+1+m5-7)=Translate!.getTranslation("AON_FACTOR")
    pbuf$(o[5]+1+m2-10)=Translate!.getTranslation("AON_QTY_REC'D")
    pbuf$(o[6]+1+m2-11)=Translate!.getTranslation("AON_QTY_REC'D")
    pbuf$(o[7]+1+m2-11)=Translate!.getTranslation("AON_DIFFERENCE")
    OutVect!.addItem(pbuf$)
    
    let l=l+5
    return

l6000: rem --- Vendor break

    if t0$="" goto l6100
    let totals$=Translate!.getTranslation("AON_TOTAL_FOR_")+vendor$,totals[all]=vendor[all]
    gosub l6800
l6100:
    if done goto l6190
    dim vendor[5]
    dim apm01a$:fattr(apm01a$)
    apm01a.firm_id$=firm_id$,apm01a.vendor_id$=poe04a.vendor_id$
    let t0$=poe04a.vendor_id$
    find record (apm01_dev,key=apm01a.firm_id$+apm01a.vendor_id$,dom=*next) apm01a$
    let vendor$=fnmask$(apm01a.vendor_id$,m0$)+" "+cvs(apm01a.vendor_name$,2)
l6190:
    return
rem --- Print totals
l6800:
    if l+1>l9 gosub report_heading
    if len(totals$)>o[6] totals$=totals$(1,o[6])
    
    dim pbuf$(width)        
    pbuf$(o[6]+1-len(totals$))=totals$
    pbuf$(o[6]+1)=str(totals[0]:m2$)
    pbuf$(o[7]+1)=str(totals[1]:m2$)
    pbuf$(o[9]+1)=str(totals[3]:m1$)
    pbuf$(o[11]+1)=str(totals[5]:m1$)
    OutVect!.addItem(pbuf$)
    
    let l=l+1
    return

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #endinclude disp_message.src

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fnisn$(q$)=q$(7)

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end