rem --- Purchase Order Receipt Register (Receipts by Vendor Overlay)
rem --- Program por_recptreg v8.0.0 06Jul2007 (por_da)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:05:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=29,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="arm-01",ids$[3]="ARM_CUSTMAST"
    files$[4]="arc_termcode",ids$[4]="ARC_TERMCODE";rem "arm-10A"
    files$[5]="glm-01",ids$[5]="GLM_ACCT"
    files$[6]="glw-11",ids$[6]="GLW_TRANSDET"
    files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
    files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
    files$[9]="ivm-03",ids$[9]="IVX_ITEMPROD"
    files$[10]="ivm-04",ids$[10]="IVM_ITEMTIER"
    files$[11]="ivc_prodcode",ids$[11]="IVC_PRODCODE";rem "ivm-10A"
    files$[12]="ivw-04",ids$[12]="IVW_LFDET"
    files$[13]="ope-01",ids$[13]="OPE_ORDHDR"
    files$[14]="ope-11",ids$[14]="OPE_ORDDET"
    files$[15]="ope-51",ids$[15]="OPE_ORDXREF"
    files$[16]="ope-61",ids$[16]="OPE_ORDITEM"
    files$[17]="opm-02",ids$[17]="OPC_LINECODE"
    files$[18]="poe-04",ids$[18]="POE_RECHDR"
    files$[19]="poe-14",ids$[19]="POE_RECDET"
    files$[20]="poe-24",ids$[20]="POE_RECLSDET"
    files$[21]="pom-02",ids$[21]="POC_LINECODE"
    files$[22]="pow-03",ids$[22]="POW_BOFILL"
    files$[23]="pow-04",ids$[23]="POW_RECSTOCK"
    files$[24]="pow-05",ids$[24]="POW_RECNSTCK"
    files$[25]="pow-08",ids$[25]="POW_RECBYWO"
    files$[26]="pow-09",ids$[26]="POE_RECBYORD"
    files$[27]="sfe-01",ids$[27]="SFE_WOMASTR"
    files$[28]="sfe-04",ids$[28]="SFE_WOTRANS"
    files$[29]="sfm-10",ids$[29]="SFC_WOTYPECD"
    files$[30]="aps_params",ids$[30]="APS_PARAMS"
    files$[31]="ars_params",ids$[31]="ARS_PARAMS"
    files$[32]="gls_params",ids$[32]="GLS_PARAMS"
    files$[33]="ivs_params",ids$[33]="IVS_PARAMS"
    files$[34]="pos_params",ids$[34]="POS_PARAMS"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[2]
    arm01_dev=channels[3]
    arm10_dev=channels[4]
    glm01_dev=channels[5]
    glw11_dev=channels[6]
    ivm01a_dev=channels[7]
    ivm02a_dev=channels[8]
    ivm03_dev=channels[9]
    ivm04_dev=channels[10]
    ivm10_dev=channels[11]
    ivw04_dev=channels[12]
    ope01_dev=channels[13]
    ope11_dev=channels[14]
    ope51_dev=channels[15]
    ope61_dev=channels[16]
    opm02_dev=channels[17]
    poe04a_dev=channels[18]
    poe14a_dev=channels[19]
    poe24_dev=channels[20]
    pom02a_dev=channels[21]
    pow03_dev=channels[22]
    pow04_dev=channels[23]
    pow05_dev=channels[24]
    pow08_dev=channels[25]
    pow09_dev=channels[26]
    sfe01_dev=channels[27]
    sfe04_dev=channels[28]
    sfm10_dev=channels[29]
    aps01a_dev=channels[30]
    ars01a_dev=channels[31]
    gls01a_dev=channels[32]
    ivs01a_dev=channels[33]
    pos01a_dev=channels[34]

rem --- Dimension string templates

    dim apm01a$:templates$[2],arm01a$:templates$[3],arm10a$:templates$[4],
:       glm01a$:templates$[5],glw11a$:templates$[6],ivm01a$:templates$[7],
:       ivm02a$:templates$[8],ivm03a$:templates$[9],ivm04a$:templates$[10],
:       ivm10a$:templates$[11],ivw04a$:templates$[12],ope01a$:templates$[13],
:       ope11a$:templates$[14],ope51a$:templates$[15],ope61a$:templates$[16],
:       opm02a$:templates$[17],poe04a$:templates$[18],poe14a$:templates$[19],
:       poe24a$:templates$[20],pom02a$:templates$[21],pow03a$:templates$[22],
:       pow04a$:templates$[23],pow05a$:templates$[24],pow08a$:templates$[25],
:       pow09a$:templates$[26],sfe01a$:templates$[27],sfe04a$:templates$[28],
:       sfm10a$:templates$[29],aps01a$:templates$[30],ars01a$:templates$[31],
:       gls01a$:templates$[32],ivs01a$:templates$[33],pos01a$:templates$[34]

rem --- Assign form input values to local variables

    page_break$=option!.getOptionData("page_break_by_receipt")
    phase$=option!.getOptionData("phase")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (pos01a_dev,key=pos01a_key$,err=std_missing_params) pos01a$

rem --- masks

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,0
    
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vendomask$,0,vendlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",customask$,0,custlen

rem --- Parameters

    dim i[7],g[4],info$[20]
    n2$="PO"
    ap$="N"
    ar$="N"
    sf$="N"
    ls$="N"
    lf$="N"
    find record (pos01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) pos01a$
    find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    vendlen=num(aps01a.vendor_size$)
rem    i[0]=num(ivs01a.item_no_len$)
rem    i[1]=num(ivs01a.item_no_len$)
rem    i[2]=num(ivs01a.ls_no_len$)
rem    i[3]=num(ivs01a.desc_len$)
rem    i[4]=num(ivs01a.desc_len$)
rem    i[5]=num(ivs01a.desc_len$)
rem    i[6]=num(ivs01a.vend_prd_len$)
rem    i[7]=fnyy_year(current_year$)
    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_per$)
    g[2]=fnyy_year(gls01a.current_year$)
    g[3]=num(gls01a.acct_length$)
    g[4]=num(gls01a.max_acct_len$)
    replenishment$=gls01a.use_replen$
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    op$="N"
    distcode$="N"
    if ar$="Y"
        find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
        call pgmdir$+"adc_application.aon","OP",info$[all]
        op$=info$[20]
        distcode$=ars01a.unit_mask$(11,1)
    endif
    call pgmdir$+"adc_application.aon","SF",info$[all]
    sf$=info$[20]
    gl$="N"
    status=0
    source$=pgm(-2)
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status goto std_exit

rem --- Initializations

    precision i[1]
    dim a0$(22),a1$(160),a[8],b0$(8),b1$(195),o[13],x4$(53),x5$(93)
    dim c0$(22),c1$(60),c2$(64),c6$(g[4]*6),d0$(24),d1$(64),d[20]
    dim description$(40)
    dim headings$[3],totals[5],receipt[5],vendor[5],report[5],x8$(37),x9$(43)
    dim y0$(4),y1$(32),y2$(g[4]),z0$(32),z1$(11*g[4]),r0$(24),r[1]
    dim l0$(28),l1$(20),l[1],dif$[99],lineqty[99],lsqty[99],factor[99]
    dim glfiles[20],glparams$[20],glparams[20],w$[10]
    if pos(ivs01a.lotser_flag$="LS")>0 ls$="Y"
    if pos(ivs01a.lifofifo$="LF")>0 lf$="Y"
    m0=len(m0$)
    m1$=i6$
    m2$=i7$
    m3$=i8$
    width=132
    page=0
    l9=59
    l=l9+1
    clock$=""
    when$=sysinfo.system_date$
    headings=2
    cost$="Avg"
    done=0
    ls=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    number=0
    nf$="(Not On File)"
    if ivs01a.cost_method$="S" cost$="Std"
    if ivs01a.cost_method$="R" cost$="Rep"
    bw=max(m0+16,32)
    dh1$="Dist"
    dh2$="Code"
    lsdesc$="Serial Nbr"
    if ivs01a.lotser_flag$="L" lsdesc$="Lot Nbr"
    xref_dev=0
    errors=0
    dif$=""
    break$="Y"

rem --- Run next overlay

    run pgmdir$+"por_recptreg_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
