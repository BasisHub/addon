rem --- Purchase Order Receipt Register (Backorder Fill Report)
rem --- Program por_recptreg_o3 v8.0.0 11Jun2009 (por_dd)
rem --- Created by adx_codeport.bbj v1.1.5 (06/11/2009 11:38:12)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,0

    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",m0$,0,vendlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",customask$,0,custlen


    precision i[1]
    dim description$(i[3]+i[4]+i[5]),s0$(200),s[13]
    dim files[3],item$[2],whse$[2],z0$(32)
    number=0
    l=l9+1
    subhead$=""
    t0$=""
    t1$=""
    p8=len(customask$)
    done=0
    files[2]=ivm02_dev
    files[3]=ivm03_dev
    p8=max(p8,8)
    x1$=" This Warehouse "
    x2$=" Other Warehouses "
    HdrVect!.addItem("Suggested Backorder Fill Report")
    BrkVect!.addItem(str(OutVect!.size()))        
rem headings$[2]="Suggested Backorder Fill Report"

rem --- Print positions

    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,10
    o[0]=0
    o[1]=p8+1
    o[13]=width-m2
    o[12]=o[13]-m2
    o[11]=o[12]-m2
    o[10]=o[11]-m2
    o[9]=o[10]-m2
    o[8]=o[9]-m2
    o[7]=o[8]-m2
    o[6]=o[7]-m2
    o[5]=o[6]-9
    o[4]=o[5]-9
    o[3]=o[4]-12
    o[2]=o[3]-11
    x=3*m2
    dim h1$(x,"-"),h2$(x,"-")
    p=int((x-len(x1$))/2)
    h1$(p,len(x1$))=x1$
    p=int((x-len(x2$))/2)
    h2$(p,len(x2$))=x2$

rem --- Order Processing in use?

    if op$<>"Y" goto l4500

rem --- Position files

    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    read (pow03_dev,key=firm_id$,dom=*next)

l1000: rem --- Get next record

    read record(pow03_dev,end=done)pow03a$
    if pos(firm_id$=pow03a$)<>1 goto done
    if pow03a.qty_received=0 goto l3900

rem --- Position ope-11, alt_key_01, (old ope-61) Orders by Item

    read (ope11_dev,key=pow03a.firm_id$+pow03a.warehouse_id$+pow03a.item_id$,knum=1,dom=*next)

l2000: rem --- Read next 

    read record(ope11_dev,end=l3000)ope11a$
    if pow03a.firm_id$<>ope11a.firm_id$ or pow03a.warehouse_id$<>ope11a.warehouse_id$ or 
:       pow03a.item_id$<>ope11a.item_id$ goto l3000
    dim ope01a$:fattr(ope01a$)
    ope01a.firm_id$=firm_id$
    ope01a.customer_id$=ope11a.customer_id$
    ope01a.order_no$=ope11a.order_no$
    find record (ope01_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=l2900) ope01a$
    if ope01a.backord_flag$<>"B" goto l2900
    if ope11a.commit_flag$="N" backorder=ope11a.qty_backord else backorder=ope11a.qty_ordered; rem "Item committed?
    if backorder=0 goto l2900

rem --- Drop shipment?

    if firm_id$+ope11a.line_code$=opm02a.firm_id$+opm02a.line_code$ goto l2150
    dim opm02a$:fattr(opm02a$)
    opm02a.firm_id$=firm_id$,opm02a.line_code$=ope11a.line_code$
    find record (opm02_dev,key=opm02a.firm_id$+opm02a.line_code$,dom=l2900) opm02a$
l2150:
    if opm02a.dropship$="Y" goto l2900

rem --- Level breaks?

    if ope11a.warehouse_id$<>t0$ gosub l6000
    if ope11a.item_id$<>t1$ gosub l6200
    if subhead$<>"" gosub l5400

rem --- Read customer

    dim arm01a$:fattr(arm01a$)
    arm01a.firm_id$=firm_id$
    arm01a.customer_id$=ope01a.customer_id$
    find record (arm01_dev,key=arm01a.firm_id$+arm01a.customer_id$,dom=*next) arm01a$
    shipdate$=ope11a.est_shp_date$
    if cvs(shipdate$,2)="" shipdate$=ope01a.shipmnt_date$
    if cvs(shipdate$,2)<>"" shipdate$=fndate$(shipdate$)

rem --- Print detail line

    if l+2>l9 gosub report_heading
    dim pbuf$(width)
    pbuf$(o[0]+1)=fnmask$(arm01a.customer_id$(1,custlen),customask$)+" "+arm01a.customer_name$
    OutVect!.addItem(pbuf$)
    dim pbuf$(width)
    pbuf$(o[2]+1)=ope11a.order_no$+"-"+ope11a.line_no$
    pbuf$(o[3]+1)=ope01a.customer_po_no$
    pbuf$(o[4]+1)=fndate$(ope01a.order_date$)
    pbuf$(o[5]+1)=shipdate$
    pbuf$(o[6]+1)=str(backorder:m2$)
    OutVect!.addItem(pbuf$)
    l=l+2
    number=number+1
    totals[1]=totals[1]+backorder

l2900: rem --- Loop back for next item/order record

    goto l2000
l3000:

l3900: rem --- Loop back for next receipt record

    goto l1000

done: rem --- All done

    if number=0 goto l4500
    done=1
    gosub l6200

l4500: rem --- Close files before proceeding to update

    close (pow03_dev,err=*next)
    close (pow04_dev,err=*next)
    close (pow05_dev,err=*next)
    close (pow08_dev,err=*next)
    close (pow09_dev,err=*next)
    close (ope01_dev,err=*next)
    close (ope61_dev,err=*next)
    close (ope11_dev,err=*next)
    close (ivm10_dev,err=*next)

rem --- Run next overlay

    update$="pou_recptreg.aon"    
    overlay$=update$
    if gl$="Y" overlay$=pgmdir$+"glr_recap.aon"
    
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit


report_heading: rem --- Report Heading

    l=headings+3
rem    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
rem    if status exitto std_exit

    dim pbuf$(width)
    pbuf$(o[3]+1)="Customer"
    pbuf$(o[4]+1+2)="Order"
    pbuf$(o[5]+1)="Scheduled"
    pbuf$(o[6]+1+m2-7)="Back-"
    pbuf$(o[7]+1+m2-8)="Current"
    pbuf$(o[8]+1)=h1$
    pbuf$(o[11]+1)=h2$
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    pbuf$(o[0]+1)="Customer"
    pbuf$(o[1]+1)="Sales Order"
    pbuf$(o[3]+1)="PO Number"
    pbuf$(o[4]+1+2)="Date"
    pbuf$(o[5]+1)="Ship Date"
    pbuf$(o[6]+1+m2-8)="Ordered"
    pbuf$(o[7]+1+m2-8)="Receipt"
    pbuf$(o[8]+1+m2-8)="On Hand"
    pbuf$(o[9]+1+m2-10)="Committed"
    pbuf$(o[10]+1+m2-10)="Available"
    pbuf$(o[11]+1+m2-8)="On Hand"
    pbuf$(o[12]+1+m2-10)="Committed"
    pbuf$(o[13]+1+m2-10)="Available"
    OutVect!.addItem(pbuf$)
    return

l5400: rem --- Subheading

    if l+4>l9 gosub report_heading
    dim pbuf$(width)
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    pbuf$(1)=subhead$
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    OutVect!.addItem(pbuf$)
    l=l+3
    subhead$=""
    return

l6000: rem --- Warehouse break

    gosub l6200
    t0$=ope11a.warehouse_id$
    dim ivm10c$:fattr(ivm10c$) 
    find record (ivm10_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    headings$[2]="Suggested Backorder Fill Report For Warehouse "
    headings$[2]=headings$[2]+t0$+" "+cvs(ivm10c.short_name$,3)
    l=l9+1
    return

l6200: rem --- Item break

    if t1$="" goto l6300
    if l+2>l9 gosub report_heading
    dim pbuf$(width)
    OutVect!.addItem(pbuf$)
    
    dim pbuf$(width)
    pbuf$(o[6]+1-(16+i[0]))="Totals For Item ",t1$
    pbuf$(o[6]+1)=str(totals[1]:m2$)
    pbuf$(o[7]+1)=str(pow03a.qty_received:m2$)
    pbuf$(o[8]+1)=str(totals[2]:m2$)
    pbuf$(o[9]+1)=str(totals[3]:m2$)
    pbuf$(o[10]+1)=str(totals[4]:m2$)
    pbuf$(o[11]+1)=str(totals[5]:m2$)
    pbuf$(o[12]+1)=str(totals[6]:m2$)
    pbuf$(o[13]+1)=str(totals[7]:m2$)
    OutVect!.addItem(pbuf$)
    l=l+2
l6300:
    if done goto l6390
    dim curwhse[20],allwhse[20],totals[7]
    t1$=ope11a.item_id$
    dim ivm01a$:fattr(ivm01a$)
    ivm01a.firm_id$=firm_id$
    ivm01a.item_id$=t1$
    find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next) ivm01a$
    let subhead$="Item "+t1$+" "+fnitem$(ivm01a.item_desc$,i[3],i[4],i[5])
    let item$[0]=firm_id$,item$[1]=ope11a.warehouse_id$,item$[2]=ope11a.item_id$
    call pgmdir$+"ivc_whseinfo.aon","",files[all],item$[all],whse$[all],curwhse[all],x,status
    call pgmdir$+"ivc_whseinfo.aon","A",files[all],item$[all],whse$[all],allwhse[all],x,status
    let totals[2]=curwhse[0],totals[3]=curwhse[2]
    let totals[5]=allwhse[0]-curwhse[0],totals[6]=allwhse[2]-curwhse[2]
    let totals[4]=totals[2]-totals[3],totals[7]=totals[5]-totals[6]
l6390:
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
