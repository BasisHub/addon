rem --- rem poe Replenishment Selection Update
rem --- Program pou_replenselect v8.0.0 16Apr2009 (poe_fb)
rem --- Created by adx_codeport.bbj v1.1.5 (04/16/2009 10:54:32)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- apm06a: iolist u0$,u1$,vendcycledays,target[all]
rem --- ivm01a: iolist r0$,r1$,r2$,r3$,r4$,r5$,r6$,r[all]
rem --- ivm02a: iolist s0$(1),s1$,s2$,s[all]
rem --- ivm05a: iolist t0$,t1$,t2$,t[all],t0,*,vlead
rem --- ivm10f: iolist *,buycodedays
rem --- poe06a: iolist a0$(1),a1$(1),a[all]
rem --- poe16a: iolist b0$(1),b1$(1),b2$,b[all]
rem --- poe17a: iolist k17$(1)
rem --- poe26a: iolist c0$(1),c1$(1),c2$,c[all]
rem --- poe36a: iolist d0$(1),d1$,d[all]


	setesc std_error
	seterr std_error

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Open all files

	num_files=18,open_beg=1,open_end=num_files
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

	open_tables$[1]="APS_PARAMS", open_opts$[1]="OTA"
	open_tables$[2]="GLS_CALENDAR", open_opts$[2]="OTA"
	open_tables$[3]="IVS_PARAMS", open_opts$[3]="OTA"
	open_tables$[4]="POS_PARAMS", open_opts$[4]="OTA"
	open_tables$[5]="APM_VENDREPL", open_opts$[5]="OTA"
	open_tables$[6]="IVM_ITEMMAST", open_opts$[6]="OTA"
	open_tables$[7]="IVM_ITEMWHSE", open_opts$[7]="OTA"
	open_tables$[8]="IVM_ITEMVEND", open_opts$[8]="OTA"
	open_tables$[9]="IVC_BUYCODE", open_opts$[9]="OTA"
	open_tables$[10]="IVM_ITEMACT", open_opts$[10]="OTA"
	open_tables$[11]="IVS_ABCPARAM", open_opts$[11]="OTA"
	open_tables$[12]="POE_ORDHDR", open_opts$[12]="OTA"
	open_tables$[13]="POE_ORDDET", open_opts$[13]="OTA"
	open_tables$[14]="POE_ORDTOT", open_opts$[14]="OTA"
	open_tables$[15]="POE_REPSURP", open_opts$[15]="OTA"
	open_tables$[16]="POE_REPSEL", open_opts$[16]="OTA"
	open_tables$[17]="POE_REPXREF", open_opts$[17]="OTA"
	open_tables$[18]="IVM_ITEMWHSE", open_opts$[18]="NTA"


	gosub open_tables

	aps_params_dev=num(open_chans$[1])
	gls_calendar_dev=num(open_chans$[2])
	ivs_params_dev=num(open_chans$[3])
	pos_params_dev=num(open_chans$[4])
	apm_vendrepl_dev=num(open_chans$[5])
	ivm_itemmast_dev=num(open_chans$[6])
	ivm_itemwhse_dev=num(open_chans$[7])
	ivm_itemvend_dev=num(open_chans$[8])
	ivc_buycode_dev=num(open_chans$[9])
	ivm_itemact_dev=num(open_chans$[10])
	ivs_abcparam_dev=num(open_chans$[11])
	poe_ordhdr_dev=num(open_chans$[12])
	poe_orddet_dev=num(open_chans$[13])
	poe_ordtot_dev=num(open_chans$[14])
	poe_repsurp_dev=num(open_chans$[15])
	poe_repsel_dev=num(open_chans$[16])
	poe_repxref_dev=num(open_chans$[17])
	ivm_itemwhse_dev2=num(open_chans$[18])

	dim aps_params$:open_tpls$[1]
	dim gls_calendar$:open_tpls$[2]
	dim ivs_params$:open_tpls$[3]
	dim pos_params$:open_tpls$[4]
	dim apm_vendrepl$:open_tpls$[5]
	dim ivm_itemmast$:open_tpls$[6]
	dim ivm_itemwhse$:open_tpls$[7]
	dim ivm_itemvend$:open_tpls$[8]
	dim ivc_buycode$:open_tpls$[9]
	dim ivm_itemact$:open_tpls$[10]
	dim ivs_abcparam$:open_tpls$[11]
	dim poe_ordhdr$:open_tpls$[12]
	dim poe_orddet$:open_tpls$[13]
	dim poe_ordtot$:open_tpls$[14]
	dim poe_repsurp$:open_tpls$[15]
	dim poe_repsel$:open_tpls$[16]
	dim poe_repxref$:open_tpls$[17]
	dim ivm_itemwhse2$:open_tpls$[18]

rem --- call bac_key_template as needed to return templates for specified files/keys

	call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMWHSE","AO_ITEM_WH",ivm_itemwhse_key2$,rd_table_chans$[all],status$


rem --- Assign form input values to local variables

	buyerfrom$=Option!.getOptionData("BUYER_CODE_1")
	buyerthru$=Option!.getOptionData("BUYER_CODE_2")
	vendfrom$=Option!.getOptionData("VENDOR_ID_1")
	vendthru$=Option!.getOptionData("VENDOR_ID_2")
	whsefrom$=Option!.getOptionData("WAREHOUSE_ID_1")
	whsethru$=Option!.getOptionData("WAREHOUSE_ID_2")
	datefrom$=Option!.getOptionData("REVIEW_DATE_1")
	datethru$=Option!.getOptionData("REVIEW_DATE_2")
	comment$=Option!.getOptionData("REP_COMMENTS")
	replen_seq$=Option!.getOptionData("REPLEN_SEQ")

rem --- Retrieve parameter records

	find record (aps_params_dev,key=firm_id$+"AP00",err=std_missing_params) aps_params$
	find record (ivs_params_dev,key=firm_id$+"IV00",err=std_missing_params) ivs_params$
    find record (gls_calendar_dev,key=firm_id$+ivs_params.current_year$,err=*next) gls_calendar$
    if cvs(gls_calendar.firm_id$,2)="" then
        msg_id$="AD_NO_FISCAL_CAL"
        dim msg_tokens$[1]
        msg_tokens$[1]=ivs_params.current_year$
        gosub disp_message
        goto std_exit
    endif
	find record (pos_params_dev,key=firm_id$+"PO00",err=std_missing_params) pos_params$
	find record (ivs_abcparam_dev,key=firm_id$+"IV02",err=std_missing_params) ivs_abcparam$

rem --- Initialization

	ivprecision=num(ivs_params.precision$)
	dim factors[25]
	precision ivprecision
	tot_pers=num(gls_calendar.total_pers$)
	curper$=ivs_params.current_per$
	curyr$=ivs_params.current_year$
	for x=0 to 25
		factors[x]=NUM(field(ivs_abcparam$,"ABC_FACTORS_"+str(x+1:"00")))
	next x
	more=1

rem --- Notification Box

	call pgmdir$+"adc_progress.aon","N","","","","",0,ivm_itemmast_dev,1,0,ignore_status

rem --- Use SQL to replace old read to ivm-03GF record

	sql_prep$=""
	sql_prep$=sql_prep$+"SELECT ivm_itemwhse.firm_id, ivm_itemwhse.item_id, ivm_itemwhse.warehouse_id, "
	sql_prep$=sql_prep$+"	    ivm_itemwhse.buyer_code, ivm_itemwhse.vendor_id, ivm_itemmast.product_type "
	sql_prep$=sql_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
	sql_prep$=sql_prep$+"    ON ivm_itemwhse.item_id = ivm_itemmast.item_id AND "
	sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id = ivm_itemmast.firm_id "

	where_clause$="WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
	if cvs(whsefrom$,3)<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+whsefrom$+"' AND "
	if cvs(whsethru$,3)<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+whsethru$+"' AND "
	if cvs(buyerfrom$,3)<>"" where_clause$=where_clause$+"ivm_itemwhse.buyer_code >= '"+buyerfrom$+"' AND "
	if cvs(buyerthru$,3)<>"" where_clause$=where_clause$+"ivm_itemwhse.buyer_code <= '"+buyerthru$+"' AND "
	if cvs(vendfrom$,3)<>"" where_clause$=where_clause$+"ivm_itemwhse.vendor_id >= '"+vendfrom$+"' AND "
	if cvs(vendthru$,3)<>"" where_clause$=where_clause$+"ivm_itemwhse.vendor_id <= '"+vendthru$+"'"

	where_clause$=cvs(where_clause$,2)
	if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
	where_clause$=where_clause$+" ORDER BY ivm_itemwhse.buyer_code, ivm_itemwhse.vendor_id, ivm_itemmast.product_type, ivm_itemwhse.item_id, ivm_itemwhse.warehouse_id "
	sql_prep$=sql_prep$+where_clause$

	sql_chan=sqlunt
	sqlopen(sql_chan,err=*next)stbl("+DBNAME")
	sqlprep(sql_chan)sql_prep$
	dim read_tpl$:sqltmpl(sql_chan)
	sqlexec(sql_chan)

rem --- Main Read Loop
	while more
		read_tpl$=sqlfetch(sql_chan,err=doneshould)      
		whse$=read_tpl.warehouse_id$
		prodtype$=read_tpl.product_type$
		itemnum$=read_tpl.item_id$
		call pgmdir$+"adc_progress.aon","S","","","",whse$+" "+prodtype$+" "+itemnum$,0,0,1,meter_num,status

		if read_tpl.buyer_code$<>curbuyer$ gosub newbuyer
		if read_tpl.vendor_id$<>curvend$ gosub newvendor
		if read_tpl.item_id$<>curitem$ gosub newitem

rem --- Within Review Date Range?

		if datefrom$<>"" and nextreview$<datefrom$ then continue
		if datethru$<>"" and nextreview$>datethru$ then continue

rem --- Assign vars and get linepoint
		onorder=0
		avail=0
		unitcost=0
		weight=0
		safe=0
		lead=0
		eoq=0
		max=0
		ordpoint=0
		find record (ivm_itemmast_dev,key=firm_id$+itemnum$,dom=*continue) ivm_itemmast$
		stocklevel$=ivm_itemmast.stock_level$
		weight=ivm_itemmast.weight
		if pos(stocklevel$="IW")=0 then continue
		if stocklevel$="W" goto l1490
l1470:
		gosub getwhse
		if whse$=fill(2) then continue
l1490:
		find record (ivm_itemwhse_dev,key=firm_id$+whse$+itemnum$,dom=l1500) ivm_itemwhse$
		max=ivm_itemmast.maximum_qty
		ordpoint=ivm_itemmast.order_point
		safe=ivm_itemmast.safety_stock
		eoq=ivm_itemmast.eoq
		lead=ivm_itemmast.lead_time
l1500:
		onhand=ivm_itemwhse.qty_on_hand
		onorder=ivm_itemwhse.qty_on_order
		avail=ivm_itemwhse.qty_on_hand-ivm_itemwhse.qty_commit
		unitcost=ivm_itemwhse.unit_cost
		if stocklevel$="I" totcost=totcost+unitcost
		onhandtot=onhandtot+onhand
		amount=amount+(onhand*unitcost)
		if stocklevel$="W" max=ivm_itemwhse.maximum_qty,ordpoint=ivm_itemwhse.order_point,safe=ivm_itemwhse.safety_stock,eoq=ivm_itemwhse.eoq,lead=ivm_itemwhse.lead_time
		if ordpoint=0 then continue
		gosub calc_use_n_lp

rem --- Write POE-36, warehouse surplus, record
		dim poe_repsurp$:fattr(poe_repsurp$)
		surplus=avail-linepoint-onorder
		poe_repsurp.firm_id$=firm_id$
		poe_repsurp.item_id$=itemnum$
		poe_repsurp.warehouse_id$=whse$
		poe_repsurp.surplus_qty=surplus
		if surplus<=0 goto writepoe06
		write record (poe_repsurp_dev,dom=*next) poe_repsurp$

writepoe06: rem --- Write poe-06 record
		if writeheader<>1 goto initdetail
		dim poe_ordhdr$:fattr(poe_ordhdr$)
		poe_ordhdr.firm_id$=firm_id$
		poe_ordhdr.buyer_code$=curbuyer$
		poe_ordhdr.vendor_id$=curvend$

rem --- Compare date already in file; use greater date

		date2write$=datethru$
		read record (poe_ordhdr_dev,key=poe_ordhdr.firm_id$+poe_ordhdr.buyer_code$+poe_ordhdr.vendor_id$,dom=assignpoe06) poe_ordhdr$
		if poe_ordhdr.cycle_date$>datethru$ date2write$=poe_ordhdr.cycle_date$
assignpoe06:
		poe_ordhdr.cycle_date$=date2write$
		poe_ordhdr.rep_comments$=comment$
		write record (poe_ordhdr_dev) poe_ordhdr$
		writeheader=0

rem --- Write poe-17 Selections sort record for Buyer/Seqnum
		dim poe_repxref$:fattr(poe_repxref$)
		poe_repxref.firm_id$=firm_id$
		poe_repxref.buyer_code$=curbuyer$
		poe_repxref.sequence_num$=replen_seq$
		write record (poe_repxref_dev,dom=*next) poe_repxref$

    initdetail: rem --- Init for poe-16 detail

		dim poe_orddet$:fattr(poe_orddet$)
		poe_orddet.firm_id$=firm_id$
		poe_orddet.buyer_code$=poe_ordhdr.buyer_code$
		poe_orddet.vendor_id$=poe_ordhdr.vendor_id$
		poe_orddet.product_type$=prodtype$
		poe_orddet.item_id$=itemnum$
		poe_orddet.warehouse_id$=whse$

	rem --- If record exists, don't recalc

		find record (poe_orddet_dev,key=poe_orddet.firm_id$+poe_orddet.buyer_code$+poe_orddet.vendor_id$+poe_orddet.product_type$+poe_orddet.item_id$+poe_orddet.warehouse_id$,dom=*next) poe_orddet$; continue


rem --- Calc Average usage range for reasonability checks

		if adjustedcurusage=0 goto gocalc_sugg
		avgmin=avgusage*0.5
		avgmax=avgusage*2
		if adjustedcurusage>=avgmin and adjustedcurusage<=avgmax goto gocalc_sugg
		if pos("U"=adjcodes$)=0 adjcodes$=adjcodes$+"U"

gocalc_sugg: rem --- Go calculate suggested order qty

		if stocklevel$="I" goto assignpoe16
		gosub calc_sugg

rem --- How much does it cost?

		gosub getcost_n_vlead
		if cost=0 cost=unitcost; rem "If no qty breaks, use ivm-02 cost
		extension=sugg*cost

assignpoe16: rem --- Assign to poe-16

		poe_orddet.stock_level$=stocklevel$
		poe_orddet.usage_is_est$=estimated$

rem --- Assign items stocked by Item to poe-16

		if stocklevel$="W" goto assignbywhse
		poe_orddet.qty_avail=avail
		poe_orddet.qty_on_order=onorder
		poe_orddet.annual_usage=actualusage
		poe_orddet.avg_usage=avgusage
		goto writepoe16

assignbywhse: rem --- Assign items stocked by Whse to poe-16

		poe_orddet.line_point=linepoint
		poe_orddet.order_point=ordpoint
		poe_orddet.qty_avail=avail
		poe_orddet.qty_on_order=onorder
		poe_orddet.eoq=eoq
		poe_orddet.safety_stock=safe
		poe_orddet.maximum_qty=max
		poe_orddet.lead_time=lead
		poe_orddet.weight=weight*sugg
		poe_orddet.sugg_ord_qty=sugg
		poe_orddet.est_unit_cst=cost
		poe_orddet.annual_usage=actualusage
		poe_orddet.avg_usage=avgusage
		poe_orddet.extended_amt=extension

writepoe16: rem --- Write poe-16
		write record (poe_orddet_dev) poe_orddet$
		detaillines=detaillines+1

rem --- Accumulate totals

		totavail=totavail+avail
		totonorder=totonorder+onorder
		totactualusage=totactualusage+actualusage
		totavgusage=totavgusage+avgusage
		if stocklevel$="I" goto l1470;rem --- Loop up for next whse for items stocked by 'I'tem 
		totsugg=totsugg+sugg
		totextension=totextension+extension

rem --- Loop up for next record in sql recordset
    wend

doneshould: rem --- Done

    gosub newitem
    goto std_exit

newbuyer: rem --- Get current buy stuff

    buycodedays=0
    curbuyer$=read_tpl.buyer_code$
    curvend$=""
    writeheader=1
    find record (ivc_buycode_dev,key=firm_id$+"F"+curbuyer$,dom=*next) ivc_buycode$
    buycodedays=num(ivc_buycode.cycle_days$)
    return

newvendor: rem --- New vendor

    vendcycledays=0
    find record (apm_vendrepl_dev,key=firm_id$+read_tpl.vendor_id$+read_tpl.buyer_code$,dom=*next) apm_vendrepl$
	vendcycledays=num(apm_vendrepl.rev_days$)

	rem --- Get Current Vendor stuff

    curvend$=read_tpl.vendor_id$
    nextreview$=apm_vendrepl.nxt_rev_date$
    writeheader=1
    if vendcycledays<>0 cycledays=vendcycledays else cycledays=buycodedays
    return

newitem: rem --- Write Totals line for old item & init for new

    if curitem$="" goto done_newitem
    dim poe_ordtot$:fattr(poe_ordtot$)
    poe_ordtot.firm_id$=firm_id$
	poe_ordtot.buyer_code$=poe_orddet.buyer_code$
	poe_ordtot.vendor_id$=poe_orddet.vendor_id$
	poe_ordtot.product_type$=poe_orddet.product_type$
	poe_ordtot.item_id$=poe_orddet.item_id$

    poe_ordtot.stock_level$=stocklevel$
    poe_ordtot.usage_is_est$=estimated$

rem --- Assign for stocked by 'W'arehouse

    if stocklevel$="I" goto assignbyitem
    if len(adjcodes$)
		for x=1 to len(adjcodes$)
			field poe_ordtot$,"ADJUST_CODE_"+str(x:"00")=adjcodes$(x,1)
		next x
	endif
    poe_ordtot.qty_avail=totavail
    poe_ordtot.qty_on_order=totonorder
    poe_ordtot.weight=weight*totsugg
    poe_ordtot.sugg_ord_qty=totsugg
    poe_ordtot.annual_usage=totactualusage
    poe_ordtot.avg_usage=totavgusage
    poe_ordtot.extended_amt=totextension
    goto writepoe26

assignbyitem: rem --- Get suggested buy & cost for 'I' items

    avail=totavail
    onorder=totonorder
    avgusage=totavgusage
    gosub calc_sugg
    gosub getcost_n_vlead
    if cost<>0 goto l5380; rem "Use qty breakcost
    if onhandtot<>0 weightedcost=amount/onhandtot
    if whsecnt<>0 avgcost=totcost/whsecnt else avgcost=0
    cost=weightedcost
    if cost=0 cost=avgcost
l5380:
	if len(adjcodes$)
		for x=1 to len(adjcodes$)
			field poe_ordtot$,"ADJUST_CODE_"+str(x:"00")=adjcodes$(x,1)
		next x
	endif
    poe_ordtot.line_point=linepoint
    poe_ordtot.order_point=ordpoint
    poe_ordtot.qty_avail=totavail
    poe_ordtot.qty_on_order=totonorder
    poe_ordtot.eoq=eoq
    poe_ordtot.safety_stock=safe
    poe_ordtot.maximum_qty=max
    poe_ordtot.lead_time=lead
    poe_ordtot.weight=weight*sugg
    poe_ordtot.sugg_ord_qty=sugg
    poe_ordtot.est_unit_cost=cost
    poe_ordtot.annual_usage=totactualusage
    poe_ordtot.avg_usage=totavgusage
    poe_ordtot.extended_amt=cost*sugg
writepoe26:
    if detaillines=0 goto l5450
    write record (poe_ordtot_dev) poe_ordtot$
l5450:
    gosub dosurplus
done_newitem:
    curitem$=itemnum$
    totavail=0
    totonorder=0
    totsugg=0
    totactualusage=0
    totavgusage=0
    totextension=0
    totcost=0
    whsecnt=0
    onhandtot=0
    weightedcost=0
    amount=0
    detaillines=0
    dim adjcodes$(0)

rem --- Init read ivm_itemwhse on separate channel w/ knum="AO_ITEM_WH"

    read (ivm_itemwhse_dev2,key=firm_id$+itemnum$,knum="AO_ITEM_WH",dom=*next)
    return

getwhse: rem --- Get whse for items stocked by "i

    dim whse$(2)
    dim k03g$:ivm_itemwhse_key2$
    k03g$=key(ivm_itemwhse_dev2,end=done_getwhse)
    if pos(firm_id$+itemnum$=k03g$)<>1 goto done_getwhse
    read (ivm_itemwhse_dev2)
    whse$=k03g.warehouse_id$
    if whsefrom$<>"" and whse$<whsefrom$ goto nextItemWarehouse
    if whsethru$<>"" and whse$>whsethru$ read (ivm_itemwhse_dev2,key=k03g.firm_id$+k03g.item_id$+k03g.warehouse_id$(1,1)+$ff$,dom=nextItemWarehouse)
    whsecnt=whsecnt+1
    goto done_getwhse
nextItemWarehouse:
    goto getwhse
done_getwhse:
    return

calc_use_n_lp: rem --- Get Annual & Average Usages, IV activity & Line Point
	dayofmonth=num(stbl("+SYSTEM_DATE")(7,2))
    dim chans[12],item$[2]
    action$="W"
    chans[1]=ivm_itemmast_dev
    chans[2]=ivm_itemwhse_dev
    chans[12]=ivm_itemact_dev
    item$[0]=firm_id$
    item$[1]=whse$
    item$[2]=itemnum$
    cur_peryr$=curper$+curyr$
    base_peryr$=cur_peryr$
    call stbl("+DIR_PGM")+"ivc_usage.aon",action$,chans[all],item$[all],factors[all],dayofmonth,base_peryr$,cur_peryr$,tot_pers,ivprecision,annualusage,estimated,callflag$,usage_tpls$[all],status
    actualusage=annualusage
    if callflag$<>"" annualusage=estimated,estimated$="Y"
    avgusage=annualusage/tot_pers
    dim chans[3],item$[3],period$[1],activity[12]
    action$=""
    chans[2]=ivm_itemact_dev
    chans[3]=ivm_itemwhse_dev
    item$[0]=firm_id$
    item$[1]=whse$
    item$[2]=itemnum$
    period$[0]=curyr$+curper$
    period$[1]=curyr$+curper$
    call stbl("+DIR_PGM")+"ivc_whseact.aon",action$,chans[all],item$[all],period$[all],activity[all],status
    curusage=activity[3]+activity[4]-activity[8]
    adjustedcurusage=curusage*30.55/dayofmonth
    useduringreview=int(annualusage/365*cycledays)
    linepoint=ordpoint+useduringreview
    return

calc_sugg: rem --- Calculate suggested order quantity

    sugg=0
    if avail+onorder>linepoint goto donecalcsugg
    precision 2
    if max=0 goto max_isnt_set

rem --- If MAX is set...

    if avail+onorder<=max goto less_equal_max
    if pos("O"=adjcodes$)=0 adjcodes$=adjcodes$+"O"
    goto donecalcsugg; rem "don't buy if onhand+on order's over max

less_equal_max: rem --- Buy MAX minus avail minus on order; round to EOQ

    sugg=max-(avail+onorder)
    if pos("M"=adjcodes$)=0 adjcodes$=adjcodes$+"M"
    if eoq=0 or sugg<=0 goto l6160
    sugg=int((sugg-1)/eoq+1)*eoq; rem "Round up to nearest EOQ if set
    if pos("E"=adjcodes$)=0 adjcodes$=adjcodes$+"E"
l6160:
    goto donecalcsugg

max_isnt_set: rem --- If MAX isn't set ...

    if eoq=0 goto no_eoq
    sugg=eoq; rem "Buy EOQ quantities if set
    if pos("E"=adjcodes$)=0 adjcodes$=adjcodes$+"E"
    goto setlimits
no_eoq:
    if linepoint=0 goto no_linepoint
    let sugg=linepoint; rem "Buy Linepoint if no EOQ
    if pos("L"=adjcodes$)=0 adjcodes$=adjcodes$+"L"
    goto setlimits
no_linepoint:
    let sugg=ordpoint; rem "Last of all, buy Reorder Point
    if pos("R"=adjcodes$)=0 adjcodes$=adjcodes$+"R"

setlimits: rem --- No more than 1 yr's, or less than 1/2 month's usage

    if sugg<=0 or sugg<=avgusage*12 goto l6350
    let sugg=avgusage*12
    if pos("Y"=adjcodes$)=0 adjcodes$=adjcodes$+"Y"
l6350:
    if sugg<=0 or sugg>=avgusage*0.5 goto donecalcsugg
    let sugg=avgusage*0.5
    if pos("2"=adjcodes$)=0 adjcodes$=adjcodes$+"2"
donecalcsugg:
    precision ivprecision
    return

getcost_n_vlead: rem --- Get quantity breaks etc and vendor lead time

    let cost=0,vlead=0
    dim ivm_itemvend$:fattr(ivm_itemvend$)
    ivm_itemvend.firm_id$=firm_id$
    ivm_itemvend.vendor_id$=poe_ordhdr.vendor_id$
    ivm_itemvend.item_id$=ivm_itemmast.item_id$
    read record (ivm_itemvend_dev,key=firm_id$+ivm_itemvend.vendor_id$+ivm_itemvend.item_id$,dom=done_getcost) ivm_itemvend$
    for x=0 to 2
        if (num(field(ivm_itemvend$,"BREAK_QTY_"+str(x+1:"00")))>0 and num(field(ivm_itemvend$,"BREAK_QTY_"+str(x+1:"00")))<=sugg) cost=num(field(ivm_itemvend$,"UNIT_COST_"+str(x+1:"00"))); rem "Quan breaks
    next x
    if cost=0 cost=ivm_itemvend.last_po_cost; rem "Last purchase cost
    if ivm_itemvend.lead_time<>0 lead=ivm_itemvend.lead_time; rem "Use vendor's LEAD if here
done_getcost:
    return

dosurplus: rem --- Calc & write surplus of all whses not already done

    dim k032$:ivm_itemwhse_key2$
    dim ivm_itemwhse$:fattr(ivm_itemwhse$)
    dim poe_repsurp$:fattr(poe_repsurp$)
    let firstItemWarehouse$=firm_id$+poe_ordtot.item_id$,saveitemnum$=itemnum$,savewhse$=whse$
    read (ivm_itemwhse_dev2,key=firstItemWarehouse$,knum="AO_ITEM_WH",dom=*next)
readItemWarehouse:
    let k032$=key(ivm_itemwhse_dev2,end=donesurplus)
    read (ivm_itemwhse_dev2)
    if pos(firstItemWarehouse$=k032$)<>1 goto donesurplus
    ivm_itemwhse.firm_id$=firm_id$
    ivm_itemwhse.warehouse_id$=k032.warehouse_id$
    ivm_itemwhse.item_id$=k032.item_id$
    poe_repsurp.firm_id$=firm_id$
    poe_repsurp.item_id$=k032.item_id$
    poe_repsurp.warehouse_id$=k032.warehouse_id$
    find (poe_repsurp_dev,key=poe_repsurp.firm_id$+poe_repsurp.item_id$+poe_repsurp.warehouse_id$,dom=getsurplus)
    goto nextwhs; rem "Don't re-process
getsurplus:
    find record (ivm_itemwhse_dev,key=ivm_itemwhse.firm_id$+ivm_itemwhse.warehouse_id$+ivm_itemwhse.item_id$,dom=nextwhs) ivm_itemwhse$
    let whse$=ivm_itemwhse.warehouse_id$,itemnum$=ivm_itemwhse.item_id$,avail=ivm_itemwhse.qty_on_hand-ivm_itemwhse.qty_commit,onorder=ivm_itemwhse.qty_on_order
    if stocklevel$="W" ordpoint=ivm_itemwhse.order_point
    gosub calc_use_n_lp
rem --- Write surplus data
    let surplus=avail-linepoint-onorder
    if surplus<=0 goto nextwhs
    let poe_repsurp.surplus_qty=surplus
    write record (poe_repsurp_dev,dom=*next) poe_repsurp$
nextwhs:
    goto readItemWarehouse
donesurplus:
    let itemnum$=saveitemnum$,whse$=savewhse$
    return

    open_tables: rem --- Call open table routine	

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",		open_beg,		open_end,		open_tables$[all],		open_opts$[all],		open_chans$[all],		open_tpls$[all],		rd_table_chans$[all],		open_batch,		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
		status=912
		goto std_exit
	endif

	return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end