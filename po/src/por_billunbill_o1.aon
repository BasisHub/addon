rem --- PO Billed/Unbilled Receipts Report (Print Overlay)
rem --- Program por_billunbill_o1 v8.0.0 17Jul2007 (por_tb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:49:37)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    precision ivprecision
    dim a0$(22),a1$(160),a[8]
    printvtot$="N"
    more=1
   
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECHDR","PRIMARY",pot04a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECDET","PRIMARY",pot14a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECDET","VENDOR_RECDATE",pot14a_key_alttpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","ALT_KEY_02",apm01a_key_tpl$,rd_table_chans$[all],status$
rem --- Headings and print positions

    headings=4
    dim headings$[headings],o[14]
    width=132
    page=0
    l9=59
    l=l9+1
    gosub assignheads

positions:
    o[1]=o[0]+8
    o[2]=o[1]+9
    o[3]=o[2]+m1+1
    o[4]=o[3]+9
    o[5]=o[4]+m1+1
    o[6]=o[5]+5
    o[7]=o[6]+11
    o[8]=o[7]+9
    o[9]=o[8]+m1+1
    o[10]=o[9]+m1+1

    if o[10]+15>=width
        o[10]=width-m1
        o[9]=o[10]-m1
        o[8]=o[9]-m1
        o[7]=o[8]-9
        o[6]=o[7]-9
        o[5]=o[6]-3
        o[4]=o[5]-m1
        o[3]=o[4]-9
        o[2]=o[3]-m1
    endif

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

     call pgmdir$+"adc_progress.aon","N","","","","",0,pot04_dev,1,meter_num,status

rem --- Sort by Alt Seq or Vendor Num?

    while more
    
    dim pot04a_key$:pot04a_key_tpl$    
           
        if printseq$="A"

rem --- Sort by alternate sequence

            if initializing$<>"N"
                initializing$="N"
                read (apm01_dev2,key=firm_id$+vendfrom$,dom=*next)

rem --- Find a POT04 record using alt seq
    
                dim kalpha$:alt_key_02

                while more

                    kalpha$=key(apm01_dev2,end=done)
                    if kalpha.firm_id$=firm_id$
                        km04b$=kalpha.firm_id$+kalpha.vendor_id$
                        read (apm01_dev2); rem "Move ptr
                        read (pot04_dev,key=km04b$,dom=*next)
                        pot04a_key$=key(pot04_dev,end=*continue)
                        if pot04a_key.firm_id$+pot04a_key.vendor_id$<>km04b$ continue
                        if vendthru$<>"" if cvs(kalpha.alt_sequence$,2)>cvs(vendthru$,2) goto done                        
                        break
                    endif

                wend

            endif

        else

rem --- Sort by Vendor number

            if initializing$<>"N"
                initializing$="N"
                read (pot04_dev,key=firm_id$+vendfrom$,dom=*next)
                if vendfrom$<>"" read(pot04_dev,key=firm_id+vendfrom$+datefrom$,dom=*next)
            endif

rem --- Read through Receipt Hist Header file

            pot04a_key$=key(pot04_dev,end=done)

        endif

        while more

            if pot04a_key.firm_id$<>firm_id$ more=0;break

rem --- Valid Vendor?

            if printseq$<>"A"
                if vendthru$<>"" and pot04a_key.vendor_id$>vendthru$ goto done
            endif
            vendor$=pot04a_key.vendor_id$
            read record (pot04_dev) pot04a$
            if whse$<>"" if pot04a.warehouse_id$<>whse$ continue ;rem if printseq$<>"A" break

rem --- Valid Receipt Date?

            if datefrom$<>"" and pot04a.recpt_date$<datefrom$ continue ;rem if printseq$<>"A" break
            if datethru$<>"" and pot04a.recpt_date$>datethru$ continue;rem if printseq$<>"A" break

rem --- Init/Assign PO variables

            if ponum$<>pot04a.po_no$ poamt_totaled=0
            ponum$=pot04a.po_no$
            poamt=0
            poamt$=str(poamt:m1$)
            dim pline$(132),orddate$(8),rcptdate$(8)
            if pot04a.ord_date$<>fill(8) orddate$=fndate$(pot04a.ord_date$)
            if pot04a.recpt_date$<>fill(8) rcptdate$=fndate$(pot04a.recpt_date$)
            call pgmdir$+"adc_progress.aon","S","","","","",0,pot04_dev,1,meter_num,status

rem --- Accumulate PO Amt (POW-18)

            dim wfkey$(18)
            read (pow18_dev,key=pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$,dom=*next)

            while more
            
                pow18_key$=key(pow18_dev,end=*break)
                if pow18a_key.firm_id$+pow18a_key.vendor_id$+pow18a_key.po_no$<>pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$ break
                read record (pow18_dev) pow18a$
                precision 2
escape;rem need fattr(pow18a to change line 168
                poamt=poamt+wfpoamt
                precision ivprecision

            wend

            poamt$=str(poamt:m1$)
            poamt_totaled=poamt_totaled+1

rem --- Assign PLINE$ for vendor and PO

            pline$(1)=ponum$
            pline$(o[1]+1)=orddate$
            pline$(o[2]+1)=poamt$
            if poamt_totaled>1 dim pline$(132); let poamt=0

rem --- Process PO/Receiver

            dim aptype$(2),invnum$(10),invdate$(8)
            rcptamt=0
            rcptamt$=str(rcptamt:m1$)
            invamt=0
            rcptamt_iv=0
            ivnamt$=str(0:m1$)
            rcptamt_iv$=str(0:m1$)

rem --- Accumulate receipt total
            dim pot14a_key$:pot14a_key_tpl$

            read (pot14_dev,key=pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$+pot04a.receiver_no$,dom=*next)

            while more

                pot14a_key$=key(pot14_dev,end=doneaccum)
                if (pot14a_key.firm_id$+pot14a_key.vendor_id$+pot14a_key.po_no$+pot14a_key.receiver_no$=
:                   pot04a_key.firm_id$+pot04a_key.vendor_id$+pot04a_key.po_no$+pot04a_key.receiver_no$) or 
:                   (pot14a.po_no$=ponum$ and pot14a.receiver_no$=pot04a.receiver_no$)

                    read record (pot14_dev) pot14a$
                    find record (pom02a_dev,key=pot14a.firm_id$+pot14a.po_line_code$,dom=brnch1) pom02a$
                    if stk$="S" if pom02a.line_type$<>"S" continue
                    if stk$="N" if pom02a.line_type$<>"N" continue
brnch1:
                    precision 2
                    unitcost=pot14a.unit_cost
                    qtyrec=pot14a.qty_received
                    if pom02a.line_type$="O" qtyrec=1
                    rcptamt=rcptamt+(unitcost*qtyrec)
                    precision ivprecision
                    havedata=1
                    continue

                endif
doneaccum:
                rcptamt$=str(rcptamt:m1$)
                if rcptamt=0 and pot04a.rec_complete$="Y" havedata=0
                pline$(o[3]+1)=rcptdate$
                pline$(o[4]+1)=rcptamt$
                if havedata gosub fillrestpline else if printseq$<>"A" break

rem --- Get Invoice Data (via POT-35, Xref)

                dim c0$(20),c1$(54),c[8],invnum$(10),previnv$(10),aptype$(2),invdate$(8)
                invamt=0
                rcptamt_iv=0
                firstinv4rcpt=1
                billed=0
                invamt$=str(invamt:m1$)
                rcptamt_iv$=str(rcptamt_iv:m1$)
                read (pot35_dev,key=pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$+pot04a.receiver_no$,dom=*next)

                while more

                    pot35a_key$=key(pot35_dev,end=*break)
                    if pot35a.firm_id$+pot35a.vendor_id$+pot35a.po_no$+pot35a.receiver_no$<>
:                       pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$+pot04a.receiver_no$ break

                    if level$="U"
                        dim pline$(132); rem "Unbilled: only print if no pot-04
                        poamt_totaled=poamt_totaled-1
                        break
                    endif

rem ---
                    invnum$=pot35a.ap_inv_no$
                    if invnum$<>previnv$ and firstinv4rcpt=1

                        pot25a.firm_id$=pot35a.firm_id$,pot25a.ap_type$=pot35a.ap_type$,pot25a.vendor_id$=pot35a.vendor_id$,pot25a.ap_inv_no$=pot35a.ap_inv_no$,pot25a.sequence_no$=pot35a.sequence_no$,pot25a.line_no$=pot35a.line_no$
                        billed=1

rem --- Get pot-05 data

                        find record (pot05a_dev,key=pot25a.firm_id$+pot25a.ap_type$+pot25a.vendor_id$+pot25a.ap_inv_no$+pot25a.sequence_no$,dom=nextxref) pot05a$

rem --- LET INVAMT=C[0],INVAMT$=STR(INVAMT:M1$)

                        aptype$=pot05a.ap_type$
                        if pot05a.inv_date$<>fill(6) invdate$=fndate$(pot05a.inv_date$)
                        if datefrom$<>"" and pot05a.inv_date$<datefrom$ read (pot35_dev);continue
                        if datethru$<>"" and pot05a.inv_date$>datethru$ read (pot35_dev);continue

rem --- Get pot-25 Data

                        find record (pot25a_dev,key=pot25a.firm_id$+pot25a.ap_type$+pot25a.vendor_id$+pot25a.ap_inv_no$+pot25a.sequence_no$,dom=nextxref) pot25a$
                        find record (pom02a_dev,key=pot25a.firm_id$+pot25a.po_line_code$,dom=brnch2) pom02a$
                        if stk$="S" if pom02a.line_type$<>"S" read (pot35_dev);continue
                        if stk$="N" if pom02a.line_type$<>"N" read (pot35_dev);continue

brnch2:
                        precision 2
                        unitcost=pot25a.unit_cost
                        qtyrec=pot25a.qty_received
                        if pom02a.line_type$="O" qtyrec=1
                        rcptamt_iv=rcptamt_iv+(unitcost*qtyrec)
                        invamt=invamt+pot25a.receipt_cost*pot25a.qty_received
                        precision ivprecision
                        rcptamt_iv$=str(rcptamt_iv:m1$)
                        invamt$=str(invamt:m1$)
                        read (pot35_dev)
                        continue

                    endif

rem --- Have gotten all data for this invoice

                    gosub fillrestpline
                    gosub printline
                    previnv$=invnum$

nextxref: rem --- Loop up for next POT-35, Xreference record

                    read (pot35_dev)

                wend

rem --- Loop up for next PO/Receiver

                if pline$<>fill(132)
                    if level$<>"B" or (level$="B" and billed=1) gosub printline
                endif

                havedata=0
                read (pot14_dev,key=pot14a.firm_id$+pot14a.vendor_id$+pot14a.po_no$+pot14a.receiver_no$+$FF$,dom=*next)

            wend

rem --- Loop up for next header record via sort files

            if printseq$<>"A" break

rem --- See if there's another PO for vend before getting next alt seq

            pot04a_key$=key(pot04_dev,end=*break)
            if pot04a_key.vendor_id$<>vendor$ continue
            read (pot04_dev,key=pot04a_key$); rem "Restore ptr
            break

        wend

        if !more break

    wend

done: rem --- All Done
escape; rem done?
    if l+1>l9 gosub report_heading
    gosub vendtotals
    grandvari=grandrcptamt-grandrcptamt_iv
    print (printer_dev) @(o[2]-13),"Report Total",
:                       @(o[2]),grandpoamt:m1$,
:                       @(o[4]),grandrcptamt:m1$,
:                       @(o[8]),grandinvamt:m1$,
:                       @(o[9]),grandrcptamt_iv:m1$,
:                       @(o[10]),grandvari:m1$
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(0),"Stock/Non-Stk: ",stkx$
    print (printer_dev) @(0),"Warehouse ID.: ",whsex$,'LF'; let l=l+3
    print (printer_dev) @(o[0]),"PO",
:                       @(o[1]),"PO",
:                       @(o[2]+m1-7),"PO",
:                       @(o[3]),"PO Recpt",
:                       @(o[4]+m1-9),"PO Recpt",
:                       @(o[5]),"AP",
:                       @(o[6]),"Invoice",
:                       @(o[7]),"Invoice",
:                       @(o[8]+m1-8),"Invoice",
:                       @(o[9]+m1-12),"PO Recpt Amt",
:                       @(o[10]+m1-9),"Receipt"

    print (printer_dev) @(o[0]),"Number",
:                       @(o[1]),"Date",
:                       @(o[2]+m1-7),"Amount",
:                       @(o[3]),"Date",
:                       @(o[4]+m1-9),"Amount",
:                       @(o[5]),"Type",
:                       @(o[6]),"Number",
:                       @(o[7]),"Date",
:                       @(o[8]+m1-8),"Total",
:                       @(o[9]+m1-12),"On Invoice",
:                       @(o[10]+m1-9),"Variance"

    print (printer_dev)""
    l=l+3
    return

assignheads: rem --- Assign headings variables

    dim tmph3$(width),tmph4$(width)
    if printseq$="A" if vendfrom$="" vendf$="First" else vendf$=vendfrom$
    if printseq$="A" if vendthru$="" vendt$="First" else vendt$=vendthru$
    if printseq$<>"A"
        if vendfrom$="" vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
        if vendthru$="" vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    endif

    if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
    if datethru$="" datet$="Last" else datet$=fndate$(datethru$)
    midh3$=""; rem "All (billed & unbilled)
    if level$="U" midh3$="*** Unbilled ***"
    if level$="B" midh3$="*** Billed ***"
    tmph3$(1)="From Vendor: "+vendf$
    tmph3$(fncenter(midh3$,width))=midh3$
    tmph3$(width-len(datef$)-18)="From Receipt Date: "+datef$
    tmph4$(1)="  To Vendor: "+vendt$
    tmph4$(width-len(datef$)-18)="  To Receipt Date: "+datet$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=tmph3$
    headings$[3]=tmph4$
    return

newvendor: rem --- New Vendor

    vendname$="Not On File"
    prevvend$=vendor$
    printvtot$="Y"
    vendpoamt=0
    vendrcptamt=0
    vendinvamt=0
    vendrcptamt_iv=0
    find record (apm01a_dev,key=firm_id$+vendor$,dom=brnch3) apm01a$
    vendname$=apm01a.vendor_name$

brnch3:
    if l+4>l9 gosub report_heading
    print (printer_dev) @(0),"Vendor: ",fnmask$(vendor$(1,vendlen),vendomask$)," ",vendname$
    l=l+1
    return

rem --- Print data line

printline: rem --- Test breaks

    if vendor$<>prevvend$
        if printvtot$="Y" gosub vendtotals
        gosub newvendor
    endif

    gosub fillrestpline
    if l+2>l9 gosub report_heading
    print (printer_dev)pline$
    l=l+1
    dim pline$(132)

rem --- Accumulate totals

    let vendpoamt=vendpoamt+poamt,vendrcptamt=vendrcptamt+rcptamt
    let vendinvamt=vendinvamt+invamt,vendrcptamt_iv=vendrcptamt_iv+rcptamt_iv
    let grandpoamt=grandpoamt+poamt,grandrcptamt=grandrcptamt+rcptamt
    let grandinvamt=grandinvamt+invamt,grandrcptamt_iv=grandrcptamt_iv+rcptamt_iv
    return

fillrestpline: rem --- Complete filling print line

    let pline$(o[5]+1)=aptype$,pline$(o[6]+1)=invnum$,pline$(o[7]+1)=invdate$
    let pline$(o[8]+1)=invamt$,pline$(o[9]+1)=rcptamt_iv$
    let variance=rcptamt-rcptamt_iv,variance$=str(variance:m1$)
    let pline$(o[10]+1)=variance$
    return

rem --- Print Vendor total

vendtotals:

    let vendvari=vendrcptamt-vendrcptamt_iv
    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[2]-13),"Vendor Total",
:                       @(o[2]),vendpoamt:m1$,
:                       @(o[4]),vendrcptamt:m1$,
:                       @(o[8]),vendinvamt:m1$,
:                       @(o[9]),vendrcptamt_iv:m1$,
:                       @(o[10]),vendvari:m1$
    print (printer_dev)""
    let l=l+2
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fndate$(q$) 

        if cvs(q$,2)="" return ""

        testdate$=""

        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)

        if testdate$<>"" 

            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

        endif

        return testdate$

    fnend    


rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)
escape; rem escape
    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
