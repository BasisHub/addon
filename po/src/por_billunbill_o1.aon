rem --- PO Billed/Unbilled Receipts Report (Print Overlay)
rem --- Program por_billunbill_o1 v8.0.0 17Jul2007 (por_tb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:49:37)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Init Data

    precision ivprecision
    dim a0$(22),a1$(160),a[8]
    printvtot$="N"
    more=1
    total_recs=0

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECHDR","PRIMARY",pot04a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECDET","PRIMARY",pot14a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_INVDET","INVBYPO",pot25a_key_alttpl$,rd_table_chans$[all],status$;rem replacing pot-35
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POW_RECTOTAL","PRIMARY",pow18a_key_tpl$,rd_table_chans$[all],status$;rem replacing pot-35

rem --- Headings and print positions

    headings=7
    dim headings$[headings],o[14]
    width=132
    page=0
    l9=59
    l=l9+1
    gosub assignheads

rem --- Headings and print positions

    dim columns$[10,10]
    columns = 11
    columns$[0,0]=Translate!.getTranslation("AON_PO_NUMBER"),                  columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_PO_DATE"),                    columns$[1,1]="C",columns$[1,2]="10"
    columns$[2,0]=Translate!.getTranslation("AON_PO_AMOUNT"),                  columns$[2,1]="N",columns$[2,2]="13",columns$[2,3]=m1$,columns$[2,10]="T"
    columns$[3,0]=Translate!.getTranslation("AON_PO_RECEIPT^DATE"),            columns$[3,1]="C",columns$[3,2]="10"
    columns$[4,0]=Translate!.getTranslation("AON_PO_RECEIPT^AMOUNT"),          columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m1$,columns$[4,10]="T"
    columns$[5,0]=Translate!.getTranslation("AON_AP_TYPE"),                    columns$[5,1]="C",columns$[5,2]="8"
    columns$[6,0]=Translate!.getTranslation("AON_INVOICE_NUMBER"),             columns$[6,1]="C",columns$[6,2]="12"
    columns$[7,0]=Translate!.getTranslation("AON_INVOICE_DATE"),               columns$[7,1]="C",columns$[7,2]="10"
    columns$[8,0]=Translate!.getTranslation("AON_INVOICE_TOTAL"),              columns$[8,1]="N",columns$[8,2]="14",columns$[8,3]=m1$,columns$[8,10]="T"
    columns$[9,0]=Translate!.getTranslation("AON_PO_RECEIPT_AMT^ON_INVOICE"),  columns$[9,1]="N",columns$[9,2]="14",columns$[9,3]=m1$,columns$[9,10]="T"
    columns$[10,0]=Translate!.getTranslation("AON_RECEIPT_VARIANCE"),          columns$[10,1]="N",columns$[10,2]="14",columns$[10,3]=m1$,columns$[10,10]="T"

positions: 

    o[1]=o[0]+8
    o[2]=o[1]+9
    o[3]=o[2]+m1+1
    o[4]=o[3]+9
    o[5]=o[4]+m1+1
    o[6]=o[5]+5
    o[7]=o[6]+11
    o[8]=o[7]+9
    o[9]=o[8]+m1+1
    o[10]=o[9]+m1+1

    if o[10]+15>=width
        o[10]=width-m1
        o[9]=o[10]-m1
        o[8]=o[9]-m1
        o[7]=o[8]-9
        o[6]=o[7]-9
        o[5]=o[6]-3
        o[4]=o[5]-m1
        o[3]=o[4]-9
        o[2]=o[3]-m1
    endif

rem --- Progress Bar

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    call pgmdir$+"adc_progress.aon","N","POT_RECHDR","","","",0,pot04_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem --- Now create the working sql phrase

    sql_prep1$="select pot_rechdr.firm_id, pot_rechdr.vendor_id, "
    sql_prep1$=sql_prep1$+"pot_rechdr.po_no, pot_rechdr.receiver_no, "
    sql_prep1$=sql_prep1$+"pot_rechdr.recpt_date, pot_rechdr.ord_date, "
    sql_prep1$=sql_prep1$+"apm_vendmast.alt_sequence "
    sql_prep1$=sql_prep1$+"from pot_rechdr, apm_vendmast "
    where_clause$="where pot_rechdr.firm_id= '"+firm_id$+"' AND "
    where_clause$=where_clause$+"pot_rechdr.firm_id = apm_vendmast.firm_id AND "
    where_clause$=where_clause$+"pot_rechdr.vendor_id = apm_vendmast.vendor_id AND "
    if printseq$="V" and vendfrom$<>"" then where_clause$=where_clause$+"pot_rechdr.vendor_id >= '"+vendfrom$+"' AND " 
    if printseq$="V" and vendthru$<>"" then where_clause$=where_clause$+"pot_rechdr.vendor_id <= '"+vendthru$+"' AND " 
    if printseq$="A" and altfrom$<>"" then where_clause$=where_clause$+"apm_vendmast.alt_sequence >= '"+altfrom$+"' AND " 
    if printseq$="A" and altthru$<>"" then where_clause$=where_clause$+"apm_vendmast.alt_sequence <= '"+altthru$+"' AND " 
    if datefrom$<>"" then where_clause$=where_clause$+"pot_rechdr.recpt_date >= '"+datefrom$+"' AND "
    if datethru$<>"" then where_clause$=where_clause$+"pot_rechdr.recpt_date <= '"+datethru$+"' AND "
    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    sql_prep1$=sql_prep1$+where_clause$

    if printseq$<>"A"
        sql_prep1$=sql_prep1$+" order by pot_rechdr.vendor_id, pot_rechdr.po_no, pot_rechdr.receiver_no"
    else    
        sql_prep1$=sql_prep1$+" order by apm_vendmast.alt_sequence, pot_rechdr.po_no, pot_rechdr.receiver_no"
    endif    

    sql_chan1=sqlunt
    sqlopen(sql_chan1,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan1)sql_prep1$
    dim read_tpl$:sqltmpl(sql_chan1)
    sqlexec(sql_chan1)

rem --- Sort by Alt Seq or Vendor Num?

    while more
        read_tpl$=sqlfetch(sql_chan1,err=*break)

        read record (pot04_dev,key=firm_id$+read_tpl.po_no$+read_tpl.receiver_no$) pot04a$
        vendor$=pot04a.vendor_id$

    rem --- Init/Assign PO variables

        if ponum$<>pot04a.po_no$ poamt_totaled=0
        ponum$=pot04a.po_no$
        poamt=0
        poamt$=str(poamt)
        dim pline$(132),orddate$(8),rcptdate$(8)
        if pot04a.ord_date$<>fill(8) then orddate$=fndate$(pot04a.ord_date$)
        if pot04a.recpt_date$<>fill(8) then rcptdate$=fndate$(pot04a.recpt_date$)
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

    rem --- Accumulate PO Amt (POW-18)

        dim pow18_key$:pow18a_key_tpl$
        read (pow18_dev,key=pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$,dom=*next)

        while more
            pow18_key$=key(pow18_dev,end=*break)
            if pow18_key.firm_id$+pow18_key.vendor_id$+pow18_key.po_no$<>pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$ break
            read record (pow18_dev) pow18a$
            precision 2
            poamt=poamt+pow18a.extended_amt
            precision ivprecision
        wend

        poamt$=str(poamt)
        poamt_totaled=poamt_totaled+1

    rem --- Assign PLINE$ for vendor and PO

        pline$(1)=ponum$
        pline$(o[1]+1)=orddate$
        pline$(o[2]+1)=poamt$
        if poamt_totaled>1 dim pline$(132); poamt=0

    rem --- Process PO/Receiver

        dim aptype$(2),invnum$(10),invdate$(8)
        rcptamt=0
        rcptamt$=str(rcptamt)
        invamt=0
        rcptamt_iv=0
        ivnamt$=str(0)
        rcptamt_iv$=str(0)

    rem --- Accumulate receipt total

        dim pot14a_key$:pot14a_key_tpl$
        read (pot14_dev,key=pot04a.firm_id$+pot04a.po_no$+pot04a.receiver_no$,dom=*next)

        while more
            pot14a_key$=key(pot14_dev,end=doneaccum)

            if (pot14a_key.firm_id$+pot14a_key.po_no$+pot14a_key.receiver_no$ =
:               pot04a.firm_id$+pot04a.po_no$+pot04a.receiver_no$)  
:           then
                read record (pot14_dev) pot14a$
                find record (pom02_dev,key=pot14a.firm_id$+pot14a.po_line_code$,dom=brnch1) pom02a$
                if stock$="S" and pom02a.line_type$<>"S" then continue
                if stock$="N" and pom02a.line_type$<>"N" then continue
            brnch1: 
                precision 2
                unitcost=pot14a.unit_cost
                qtyrec=pot14a.qty_received
                if pom02a.line_type$="O" then qtyrec=1
                rcptamt=rcptamt+(unitcost*qtyrec)
                precision ivprecision
                havedata=1
                continue
            endif
            
        doneaccum: 
        
            rcptamt$=str(rcptamt)
            if rcptamt=0 and pot04a.rec_complete$="Y" havedata=0
            pline$(o[3]+1)=rcptdate$
            pline$(o[4]+1)=rcptamt$
            if havedata then gosub fillrestpline else break

        rem --- Get Invoice Data (via POT-35, Xref)

            dim invnum$(10),previnv$(10),aptype$(2),invdate$(8)
            invamt=0
            rcptamt_iv=0
            firstinv4rcpt=1
            billed=0
            invamt$=str(invamt)
            rcptamt_iv$=str(rcptamt_iv)
            dim pot35_key$:pot25a_key_alttpl$
            read (pot35_dev,knum="INVBYPO",key=pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$+pot04a.receiver_no$,dom=*next)

            while more
                pot35_key$=key(pot35_dev,knum="INVBYPO",end=*break)
                
                if  pot35_key.firm_id$+pot35_key.vendor_id$+pot35_key.po_no$+pot35_key.receiver_no$ <>
:                   pot04a.firm_id$+pot04a.vendor_id$+pot04a.po_no$+pot04a.receiver_no$ 
:               then 
                    break
                endif

                if level$="U"
                    dim pline$(132); rem "Unbilled: only print if no pot-04
                    poamt_totaled=poamt_totaled-1
                    break
                else
                    invnum$=pot35_key.ap_inv_no$

                    if !(invnum$<>previnv$ and firstinv4rcpt<>1)
                        pot25a.firm_id$=pot35_key$.firm_id$
                        pot25a.ap_type$=pot35_key$.ap_type$
                        pot25a.vendor_id$=pot35_key$.vendor_id$
                        pot25a.ap_inv_no$=pot35_key$.ap_inv_no$
                        pot25a.sequence_no$=pot35_key$.sequence_no$
                        pot25a.line_no$=pot35_key$.line_no$
                        billed=1
                    rem --- Get pot-05 data
                        find record (pot05_dev,key=pot25a.firm_id$+pot25a.ap_type$+pot25a.vendor_id$+pot25a.ap_inv_no$+pot25a.sequence_no$,dom=nextxref) pot05a$
                        aptype$=pot05a.ap_type$
                        invamt=pot05a.invoice_amt
                        if pot05a.inv_date$<>fill(6) then invdate$=fndate$(pot05a.inv_date$)
                        if datefrom$<>"" and pot05a.inv_date$<datefrom$ then read (pot35_dev);continue
                        if datethru$<>"" and pot05a.inv_date$>datethru$ then read (pot35_dev);continue
                    rem --- Get pot-25 Data
                        find record (pot25_dev,key=pot25a.firm_id$+pot25a.ap_type$+pot25a.vendor_id$+pot25a.ap_inv_no$+pot25a.sequence_no$+pot25a.line_no$,dom=nextxref) pot25a$
                        find record (pom02_dev,key=pot25a.firm_id$+pot25a.po_line_code$,dom=brnch2) pom02a$
                        if stock$="S" and pom02a.line_type$<>"S" then read (pot35_dev);continue
                        if stock$="N" and pom02a.line_type$<>"N" then read (pot35_dev);continue
                    brnch2: 
                        precision 2
                        unitcost=pot25a.unit_cost
                        qtyrec=pot25a.qty_received
                        if pom02a.line_type$="O" then qtyrec=1
                        rcptamt_iv=rcptamt_iv+(unitcost*qtyrec)
                    rem                        invamt=invamt+pot25a.receipt_cost*pot25a.qty_received
                        precision ivprecision
                        rcptamt_iv$=str(rcptamt_iv)
                        invamt$=str(invamt)
                        read (pot35_dev)
                    else

                    rem --- Have gotten all data for this invoice

                        gosub fillrestpline
                        gosub printline
                        previnv$=invnum$

                    nextxref: rem --- Loop up for next POT-35, Xreference record

                        read (pot35_dev)
                    endif
                endif
            wend

        rem --- Loop up for next PO/Receiver

            if pline$<>fill(132) and level$<>"B" or (level$="B" and billed=1) gosub printline
            havedata=0
            read (pot14_dev,key=pot14a_key.firm_id$+pot14a_key.po_no$+pot14a_key.receiver_no$+$FF$,dom=*next)
        wend
    wend

done: rem --- All Done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if l+1>l9 gosub report_heading
    gosub vendtotals
    grandvari=grandrcptamt-grandrcptamt_iv

    TotVect!.addItem(str(OutVect!.size()/columns))
    a=fnblank(1)
    OutVect!.addItem(Translate!.getTranslation("AON_REPORT_TOTAL"))
    OutVect!.addItem(str(grandpoamt))
    a=fnblank(1)
    OutVect!.addItem(str(grandrcptamt))
    a=fnblank(3)
    OutVect!.addItem(str(grandinvamt))
    OutVect!.addItem(str(grandrcptamt_iv))
    OutVect!.addItem(str(grandvari))
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    l=l+3

    return

assignheads: rem --- Assign headings variables

    dim tmph3$(width),tmph4$(width)

    if printseq$="A"
        if altfrom$="" then vendf$=Translate!.getTranslation("AON_FIRST") else vendf$=altfrom$
        if altthru$="" then vendt$=Translate!.getTranslation("AON_LAST") else vendt$=altthru$
    endif

    if printseq$<>"A"
        if vendfrom$="" then vendf$=Translate!.getTranslation("AON_FIRST") else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
        if vendthru$="" then vendt$=Translate!.getTranslation("AON_LAST") else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
    endif

    if datefrom$="" datef$=Translate!.getTranslation("AON_FIRST") else datef$=fndate$(datefrom$)
    if datethru$="" datet$=Translate!.getTranslation("AON_LAST") else datet$=fndate$(datethru$)
    midh3$=""; rem "All (billed & unbilled)
    if level$="U" midh3$=Translate!.getTranslation("AON_***_UNBILLED_***") else if level$="B" midh3$=Translate!.getTranslation("AON_***_BILLED_***") else midh3$=Translate!.getTranslation("AON_***_BILLED_AND_UNBILLED_***")
    tmph3$(1)=Translate!.getTranslation("AON_VENDOR:_")+vendf$
    tmph3$(fncenter(midh3$,width))=midh3$
    tmph3$(width-len(datef$)-18)=Translate!.getTranslation("AON_FROM_RECEIPT_DATE:_")+datef$
    tmph4$(1)=Translate!.getTranslation("AON___TO_VENDOR:_")+vendt$
    tmph4$(width-len(datef$)-18)=Translate!.getTranslation("AON___TO_RECEIPT_DATE:_")+datet$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=Translate!.getTranslation("AON_VENDOR:_")+vendf$+Translate!.getTranslation("AON__TO_")+vendt$+Translate!.getTranslation("AON_____RECEIPT_DATE:_")+datef$+Translate!.getTranslation("AON__TO_")+datet$
    if stock$<>"" then headings$[3]=Translate!.getTranslation("AON_STOCK/NON-STK:_")+stock$ else headings$[3]=Translate!.getTranslation("AON_STOCK/NON-STK:_ALL")
    if whse$<>"" then headings$[4]=Translate!.getTranslation("AON_WAREHOUSE_ID:_")+whse$ else headings$[4]=Translate!.getTranslation("AON_WAREHOUSE_ID:_ALL")
    headings$[5]=midh3$

    return

newvendor: rem --- New Vendor

    vendname$=Translate!.getTranslation("AON_NOT_ON_FILE")
    prevvend$=vendor$
    printvtot$="Y"
    vendpoamt=0
    vendrcptamt=0
    vendinvamt=0
    vendrcptamt_iv=0
    find record (apm01_dev,key=firm_id$+vendor$,dom=brnch3) apm01a$
    vendname$=apm01a.vendor_name$

brnch3: 

    if l+4>l9 gosub report_heading
    OutVect!.addItem(Translate!.getTranslation("AON_VENDOR:_")+fnmask$(vendor$(1,vendlen),vendomask$)+" "+vendname$)
    a=fnblank(10)
    l=l+1

    return

rem --- Print data line

printline: rem --- Test breaks

    if vendor$<>prevvend$
        if printvtot$="Y" gosub vendtotals
        gosub newvendor
    endif

    gosub fillrestpline
    if l+2>l9 gosub report_heading

    if vendor$+ponum$<>prevvendpo$
        OutVect!.addItem(ponum$)
        OutVect!.addItem(orddate$)
        OutVect!.addItem(poamt$)
    else
        a=fnblank(3)
    endif

    OutVect!.addItem(rcptdate$)
    OutVect!.addItem(rcptamt$)
    OutVect!.addItem(aptype$)
    OutVect!.addItem(invnum$)
    OutVect!.addItem(invdate$)
    OutVect!.addItem(invamt$)
    OutVect!.addItem(rcptamt_iv$)
    OutVect!.addItem(variance$)
    l=l+1
    recs=recs+1
    dim pline$(132)
    prevvendpo$=vendor$+ponum$

rem --- Accumulate totals

    vendpoamt=vendpoamt+poamt,vendrcptamt=vendrcptamt+rcptamt
    vendinvamt=vendinvamt+invamt,vendrcptamt_iv=vendrcptamt_iv+rcptamt_iv
    grandpoamt=grandpoamt+poamt,grandrcptamt=grandrcptamt+rcptamt
    grandinvamt=grandinvamt+invamt,grandrcptamt_iv=grandrcptamt_iv+rcptamt_iv

    return

fillrestpline: rem --- Complete filling print line

    pline$(o[5]+1)=aptype$,pline$(o[6]+1)=invnum$,pline$(o[7]+1)=invdate$
    pline$(o[8]+1)=invamt$,pline$(o[9]+1)=rcptamt_iv$
    variance=rcptamt-rcptamt_iv,variance$=str(variance)
    pline$(o[10]+1)=variance$

    return

rem --- Print Vendor total

vendtotals: 

    vendvari=vendrcptamt-vendrcptamt_iv
    if l+1>l9 gosub report_heading
    TotVect!.addItem(str(OutVect!.size()/columns))
    a=fnblank(1)
    OutVect!.addItem(Translate!.getTranslation("AON_VENDOR_TOTAL"))
    OutVect!.addItem(str(vendpoamt))
    a=fnblank(1)
    OutVect!.addItem(str(vendrcptamt))
    a=fnblank(3)
    OutVect!.addItem(str(vendinvamt))
    OutVect!.addItem(str(vendrcptamt_iv))
    OutVect!.addItem(str(vendvari))
    a=fnblank(11)

    l=l+2

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
