rem --- Quality Assurance Rejection History Report (Print Overlay)
rem --- Program por_qareject_o1 v8.0.0 17Jul2007 (por_sb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:51:14)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

            setesc std_error
            seterr std_error

rem --- Document initializations
            OutVect!=bbjAPI().getSysGui().makeVector()
            HdrVect!=bbjAPI().getSysGui().makeVector()
            BrkVect!=bbjAPI().getSysGui().makeVector()
            rep_date$=date(0:"%Mz/%Dz/%Yd")
            rep_date_stamp$=date(0:"%Yd%Mz%Dz")
            rep_time$=date(0:"%hz:%mz %p")
            rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

            pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+SYSINFO",err=*next)
            milestone=num(stbl("+MILESTONE",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Init Data
    
            precision ivprecision
            firsttime=1
            mpcnt$="-##0.00%"
            mpercent=len(mpcnt$)
            more=1
            call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECDET","PRIMARY",pot14a_key_tpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

            headings=4
            dim headings$[headings],o[16]
            width=132
            page=0
            l9=59
            l=l9+1
            gosub assignheads



positions:

            o[1]=o[0]+8
            o[2]=o[1]+4
            o[3]=o[2]+9
            o[4]=o[3]+3
            o[5]=o[4]+4
            o[6]=o[5]+4
            o[7]=o[3]+itemlen+1
            o[8]=o[6]+31
            o[9]=o[8]+4
            o[10]=o[7]+48-itemlen
            o[11]=o[10]+2
            o[12]=o[11]+m2
            o[13]=o[12]+m2
            o[14]=o[13]+m2
            o[15]=o[14]+m3
            o[16]=o[15]+m1

            if o[16]+8>=width
                o[16]=width-mpercent
                o[15]=o[16]-m1
                o[14]=o[15]-m3
                o[13]=o[14]-m2
                o[12]=o[13]-m2
                o[11]=o[12]-m2
            endif

rem --- Headings and print positions

            dim columns$[12,10]
            columns = 12
            columns$[0,0]="PO #",                columns$[0,1]="C",columns$[0,2]="6"
            columns$[1,0]="Seq",                 columns$[1,1]="C",columns$[1,2]="3"
            columns$[2,0]="Received",            columns$[2,1]="C",columns$[2,2]="4"
            columns$[3,0]="Item",                columns$[3,1]="C",columns$[3,2]="28"
            columns$[4,0]="Reason",              columns$[4,1]="C",columns$[4,2]="24"
            columns$[5,0]="Rej By",              columns$[5,1]="C",columns$[5,2]="3"
            columns$[6,0]="UM",                  columns$[6,1]="C",columns$[6,2]="3"
            columns$[7,0]="Quantity Ordered",    columns$[7,1]="C",columns$[7,2]="3",columns$[7,3]=m2$
            columns$[8,0]="Quantity Received",   columns$[8,1]="N",columns$[8,2]="19",columns$[8,3]=m2$
            columns$[9,0]="Quantity Rejected",   columns$[9,1]="N",columns$[9,2]="3",columns$[9,3]=m2$
            columns$[10,0]="Unit Cost",          columns$[10,1]="N",columns$[10,2]="3",columns$[10,3]=m3$
            columns$[11,0]="Extension",          columns$[11,1]="N",columns$[11,2]="3",columns$[11,3]=m1$
            columns$[12,0]="Percent",            columns$[12,1]="N",columns$[12,2]="3",columns$[12,3]=mpcnt$

rem --- Position files


        call pgmdir$+"adc_progress.aon","N","","","","",0,pot04_dev,1,meter_num,status

rem --- Init read pot-04

        p04a_key$=firm_id$+vendfrom$
        read (pot04_dev,key=p04a_key$,dom=*next)

rem --- Read through receipt headers

    while more

        pot04a_key$=key(pot04_dev,end=totals)
        if pos(firm_id$<>pot04a_key$)=1 break
        read record (pot04_dev,key=pot04a_key$) pot04a$

rem --- Test Ranges

        if vendthru$<>"" and pot04a.vendor_id$>vendthru$ break

rem --- Test Ranges

        if datefrom$<>"" and pot04a.recpt_date$<datefrom$ continue
        if datethru$<>"" and pot04a.recpt_date$>datethru$ continue

rem --- Assign pot-04 variables

        dim rcptdate$(8)
        if pot04a.recpt_date$<>fill(8) rcptdate$=fndate$(pot04a.recpt_date$)
        ponum$=pot04a.po_no$
        vendor$=pot04a.vendor_id$
        k04$=pot04a.firm_id$+vendor$+ponum$+pot04a.receiver_no$
        read (pot14_dev,key=k04$,dom=*next)

rem --- Get detail data
        dim pot14a_key$:pot14a_key_tpl$

        while more

            pot14a_key$=key(pot14_dev,end=*continue)
            if pos(k04$=pot14a_key$)<>1 break
            read record (pot14_dev) pot14a$

rem --- Correct Warehouse?

            if whsefor$<>"" and pot14a.warehouse_id$<>whsefor$ continue

rem --- Assign pot-14 data

            rec$=pot14a.receiver_no$
            poseq$=pot14a.po_line_no$
            item$=pot14a.item_id$
            unitmeas$=pot14a.unit_measure$
            unitcost=pot14a.unit_cost
            qtyord=pot14a.qty_ordered
            qtyrecd=pot14a.qty_received
            startrej$=pot14a_key.firm_id$+vendor$+rec$+ponum$+poseq$
            gosub sumrejqtys
            if rejrecs=0 continue

rem --- Get Item Desc
            dim itemdesc$(60)
            item_desc$(1)="Not On File"
            find record (ivm01a_dev,key=firm_id$+item$,dom=brnch1) ivm01a$
            item_desc$(1)=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])

brnch1: rem --- Test breaks

            if vendor$<>prevvendor$
                gosub newvendor
            endif
            call pgmdir$+"adc_progress.aon","S","","","","",0,pot04_dev,1,meter_num,status
            gosub printline

rem --- Go print rejection data

            gosub printrejlines

rem --- Loop up for next receipt hist detail

        wend

rem --- Loop up for receipt hist record

    wend

totals: rem --- Print totals from work file

              xwk = fnblank(3)
              OutVect!.addItem("* Total: ") 
              xwk = fnblank(7)
              OutVect!.addItem(str(totalrptvalue:m1$))
              OutVect!.addItem("")
              xwk = fnblank(13)
              xwk = fnblank(4)
              OutVect!.addItem("Reason") 
              xwk = fnblank(4)   
              OutVect!.addItem("Quantity Rejected")
              OutVect!.addItem("")
              OutVect!.addItem("Total Cost")
              OutVect!.addItem("Percentage")
              xwk = fnblank(4)
              OutVect!.addItem("--------")
              xwk = fnblank(4)
              OutVect!.addItem("-----------------")
              OutVect!.addItem("")
              OutVect!.addItem("---------")
              OutVect!.addItem("-----------")
              
              doingtotals=1
              colsused=width-35-m2-m1-mpercent
              startcol=int(colsused/2)
              dim otot[4]
              otot[0]=startcol
              otot[1]=otot[0]+4
              otot[2]=otot[1]+31
              otot[3]=otot[2]+m2
              otot[4]=otot[3]+m1

       
     
rem    gosub report_heading



    dim rejdesc$(30)
    read (pow16_dev,key="",dom=*next)

    while more

        read record (pow16_dev,end=*break) pow16a$
        rejcode$=pow16a.reject_code$
        rejdesc$(1)=pow16a.description$
        totqtyrej=pow16a.tot_qty_rej
        totamtrej=pow16a.tot_val_rej
        precision 4
        totpercent=0
        if totalrptvalue<>0 totpercent=totamtrej/totalrptvalue*100
                 
                 

                          xwk = fnblank(4)
                          OutVect!.addItem(rejcode$+rejdesc$)
                          xwk = fnblank(4)
                          OutVect!.addItem(str(totqtyrej:m2$))
                          OutVect!.addItem("")
                          OutVect!.addItem(str(totamtrej:m1$))
                          OutVect!.addItem(str(totpercent:mpcnt$))
                          
    wend

                         xwk = fnblank(3)
                         OutVect!.addItem("* Total: ") 
                         xwk = fnblank(7)
                         OutVect!.addItem(str(totalrptvalue:m1$))
                         OutVect!.addItem("")
                         xwk = fnblank(13)

rem --- All Done

    goto std_exit



assignheads: rem --- Assign headings variables

                        dim tmph3$(width),tmph4$(width)
                        if vendfrom$="" vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen),vendomask$)
                        if vendthru$="" vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen),vendomask$)
                        if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
                        if datethru$="" datet$="Last" else datet$=fndate$(datethru$)
                        if whsefor$="" whsehead$="All Warehouses" else whsehead$="Warehouse "+whsefor$+" "+whsefname$
                        tmph3$(1)="From Vendor: "+vendf$+" "+vendfname$(1,20)+"To Vendor: "+vendt$+" "+vendtname$(1,20)
                         if  vendfrom$=" " headings$[2]="From Vendor: First" else headings$[2]="From Vendor: "+vendf$
                         if  vendthru$=" " headings$[2]=headings$[2]+" -- To Vendor: Last" else headings$[2]=headings$[2]+" --  To Vendor: "+vendt$
                         if  datefrom$=" " headings$[3]="From Receipt Date: First" else headings$[3]="From Receipt Date: "+datef$
                         if  datethru$=" " headings$[3]=headings$[3]+" -- To Receipt Date: Last" else headings$[3]=headings$[3]+" -- To Receipt Date: "+datet$


                        headings$[0]=sysinfo.firm_name$
                        headings$[1]=sysinfo.task_desc$+" For "+whsehead$
    
    return

newvendor: rem --- New Vendor

                        apm01a.vendor_name$="Not On File"
                        prevvendor$=vendor$
                        find record (apm01a_dev,key=firm_id$+prevvendor$,dom=brnch2) apm01a$
                        vendname$=apm01a.vendor_name$

brnch2:

                        OutVect!.addItem(prevvendor$+"  "+vendname$)
                        xwk = fnblank(12)
                        l=l+1
                        firsttime=0
                        return

workfile: rem --- Accumulate rejection qtys by rej code in workfile

    dim pow16a$:fattr(pow16a$)
    pow16a.tot_qty_rej=0,pow16a.tot_val_rej=0
    pow16a_key$=pot03a.firm_id$+pot03a.reject_code$
    pow16a.firm_id$=pot03a.firm_id$,pow16a.reject_code$=pot03a.reject_code$,pow16a.description$=pom03a.description$
    find record (pow16_dev,key=pow16a_key$,dom=*next) pow16a$
    pow16a.tot_qty_rej=pow16a.tot_qty_rej+qtyrej
    pow16a.tot_val_rej=pow16a.tot_val_rej+extension
    pow16a$=field(pow16a$)
    write record (pow16_dev,key=pow16a_key$) pow16a$
    return

printline: rem --- Print pot-14 data line

    precision 2
    totalext=unitcost*totrej
    totalrptvalue=totalrptvalue+totalext
    precision 4
    totalpcnt=0
    if qtyord<>0 totalpcnt=(totrej/qtyord)*100
    precision ivprecision


        OutVect!.addItem(ponum$)
        OutVect!.addItem(poseq$)
        OutVect!.addItem(rcptdate$)
        OutVect!.addItem(item$(1,itemlen))
        OutVect!.addItem(itemdesc$(1,47-itemlen))
        OutVect!.addItem("")
        
        OutVect!.addItem(unitmeas$)
        OutVect!.addItem(str(qtyord:m2$))
        OutVect!.addItem(str(qtyrecd:m2$))
        OutVect!.addItem(str(totrej:m2$))
        OutVect!.addItem(str(unitcost:m3$))
        OutVect!.addItem(str(totalext:m1$))
        OutVect!.addItem(str(totalpcnt:mpcnt$))

    l=l+1
    return

printrejlines: rem --- Print pot-03 rejection data lines

    read (pot03_dev,key=startrej$,dom=*next)

rem --- Read through req headers

    while more

        pot03a_key$=key(pot03_dev,end=*break)
        if pos(startrej$=pot03a_key$)<>1 break
        read record (pot03_dev,key=pot03a_key$) pot03a$

rem --- Assign pot-03 variables

        rejseq$=pot03a.po_line_no$
        rejcode$=pot03a.reject_code$
        opcode$=pot03a.user_id$
        ranum$=pot03a.ra_no$
        qtyrej=pot03a.qty_reject
        precision 2
        extension=unitcost*qtyrej
        percent=0
        if qtyord<>0 percent=qtyrej/qtyord*100
        precision ivprecision

rem --- Get rejection desc

        dim rejdesc$(30)
        rejdesc$(1)="Not On File"
        p03_key$=pot04a.firm_id$+pot03a.reject_code$
        find record (pom03a_dev,key=p03_key$,dom=*next) pom03a$;rejdesc$(1)=pom03a.description$

                            

       
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem(rejseq$)
        OutVect!.addItem(rejcode$)
        OutVect!.addItem(rejdesc$)
        OutVect!.addItem(opcode$)
        if ranum$<>fill(15) then 

        
        OutVect!.addItem("(RA # "+ranum$)
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem(str(qtyrej:m2$))
        OutVect!.addItem("")
        OutVect!.addItem(str(extension:m1$))
        OutVect!.addItem(str(percent:mpcnt$)) 
            else
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem(str(qtyrej:m2$))
        OutVect!.addItem("")
        OutVect!.addItem(str(extension:m1$))
        OutVect!.addItem(str(percent:mpcnt$)) 
        
        let l=l+1
        gosub workfile
endif
    wend

    return

sumrejqtys: rem --- Add up quantities rejected for this PO/Rec/PO Line Num

    let rejrecs=0,totrej=0
    read (pot03_dev,key=startrej$,dom=*next)

    while more

        let pot03_key$=key(pot03_dev,end=*break)
        if pos(startrej$=pot03_key$)<>1 break
        read record (pot03_dev,key=pot03_key$) pot03a$
        let rejseq$=pot03a.sequence_no$,rejcode$=pot03a.reject_code$,opcode$=pot03a.user_id$,ranum$=pot03a.ra_no$
        let totrej=totrej+pot03a.qty_reject,rejrecs=rejrecs+1

    wend

    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

   def fndate$(q$) 

        if cvs(q$,2)="" return ""

        testdate$=""

        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)

        if testdate$<>"" 

            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

        endif

        return testdate$

    fnend    


rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,pot04_dev,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
