rem --- Open Purchase Requisitions Report (Print Overlay)
rem --- Program por_openreqsn_o1 v8.0.0 17Jul2007 (por_gb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:47:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    precision ivprecision
    dim a0$(15),a1$(160),a[8],vendor$(6)
    grandtot=0
    printvtot$="N"
    initializing$="Y"; rem "Init files 1st time through
    if vendfrom$="" firstvend$=fill(6) else firstvend$=vendfrom$
    if reqfrom$="" firstreq$=fill(7) else firstreq$=reqfrom$
    more=1

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQHDR","PRIMARY",poe01a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQHDR","ALT_KEY_01",poe01a_key_alttpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQDET","PRIMARY",poe11a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","ALT_KEY_02",apm01a_key_tpl$,rd_table_chans$[all],status$
rem --- Headings and print positions

    headings=2
    dim headings$[headings],o[13]
    width=132
    page=0
    l9=59
    l=l9+1
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads

    action=pos(printseq$="RAV")
    printbyreq=1
    printbyalt=2
    printbyvend=3

    switch action
        case printbyreq
            headings$[1]=headings$[1]+" By Requisition"
            break
        case printbyalt
            headings$[1]=headings$[1]+" By Alternate Sequence"
            break
        case printbyvend
            headings$[1]=headings$[1]+" By Vendor"
            break
        case default
            goto done
            break
    swend

positions:

    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+3
    o[4]=o[3]+itemlen+1
    o[5]=o[4]+9
    o[6]=o[5]+9
    o[7]=o[6]+9
    o[8]=o[7]+3
    o[9]=o[8]+m5+1
    o[10]=o[9]+m2+1
    o[11]=o[10]+m2+1
    o[12]=o[11]+m3+1

    if o[12]+15>width

            o[12]=width-m1
        o[11]=o[12]-m3
        o[10]=o[11]-m2
        o[9]=o[10]-m2
        o[8]=o[9]-m5

    endif

rem --- Position files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

    call pgmdir$+"adc_progress.aon","N","","","","",0,poe01_dev,1,meter_num,st
:atus

rem --- Sorts

   rem  while more

        action=pos(printseq$="RAV")
        sortbyreq=1
        sortbyalt=2
        sortbyvend=3
        dim poe01a_key$:poe01a_key_pritpl$

        switch action

            case sortbyreq; rem --- Sort by requisition
                dim poe01r_key$:poe01a_key_alttpl$
                if initializing$<>"N"
                    initializing$="N"
                    read (poe01_dev2,knum=1,key=firm_id$+firstreq$,dom=*next)
                    if firstreq$<>"" poe01r_key$=firm_id$+firstreq$+first_vend$;read (poe01_dev2,knum=1,key=poe01r_key$,dom=*next);break
                endif
                poe01r_key$=key(poe01_dev2,knum=1,end=done);read(poe01_dev2)
                k$=poe01r_key.firm_id$+poe01r.vendor_id$+poe01r.req_no$
                
                break

            case sortbyalt;  rem --- Sort by alternate sequence
                dim apm01a_key$:apm01a_key_tpl$
                if initializing$<>"N"
                    initializing$="N"
                    a04_key$=firm_id$+altfrom$
                    read (apm01_dev2,key=a04_key$,dom=*next)
                endif

rem --- Find a POE01 record using alt seq
                while more
                    dim apm01a_key$:apm01a_key_tpl$

                    apm01a_key$=key(apm01_dev2,knum=2,end=done)
                    if apm01a.firm_id$<>firm_id$ goto done
                    if altthru$<>"" if apm01a_key.alt_sequence$>altthru$ goto done
                    apm01b_key$=apm01a_key.firm_id$+apm01a_key.vendor_id$
                    read (apm01_dev2,key=apm01b_key$,dom=*next); rem "Move ptr
                    read (poe01_dev,key=apm01b_key$,dom=*next)

                    poe01a_key$=key(poe01_dev,end=*continue)
                    if poe01a.firm_id$+poe01a.vendor_id$=apm01b_key$ continue
                    k$=poe01a_key$

                wend
                break

            case sortbyvend;     rem --- Sort by vendor

                if initializing$<>"N"
                    initializing$="N"
                    read (poe01_dev,key=firm_id$+firstvend$,dom=*next)
                    if firstvend$<>"" read (poe01_dev,key=firm_id$+firstvend$+
:firstreq$,dom=*next)


rem --- Read through req headers
                poe01a_key$=key(poe01_dev,end=done)
                break

            case default
                goto done
                break

        swend

            while more

            if printseq$="A" if poe01a.firm_id$<>firm_id$ continue
            if printseq$<>"A" if poe01a_key.firm_id$<>firm_id$ goto done
            read record (poe01_dev,key=poe01a_key$) poe01a$

rem --- Test Ranges

            headrecprinted$="N"
            if reqfrom$<>"" then if poe01a.req_no$<reqfrom$ and printseq$<>"A"
: continue
            if reqthru$<>"" then if poe01a.req_no$>reqthru$ and printseq$<>"A"
: continue
            if printseq$<>"A"
                if vendfrom$<>"" and poe01a.vendor_id$<vendfrom$ if printseq$<
:>"A" continue
                if vendthru$<>"" and poe01a.vendor_id$>vendthru$ if printseq$<
:>"A" continue
            endif

            if whse$<>"ALL" if poe01a.warehouse_id$<>whse$ continue
            gosub gettestdate_header
            if datefrom$<>"" and testdateh$<datefrom$ continue
            if datethru$<>"" and testdateh$>datethru$ continue

rem --- Header passed tests
                gosub testbreaks
                headrecprinted$="Y"

            endif

rem --- TOn to Details

            p01_key$=poe01a.firm_id$+poe01a.vendor_id$+poe01a.req_no$
            read (poe11_dev,key=p01_key$,dom=*next)

rem --- Test Req Detail date range

            while more

                poe11a_key$=key(poe11_dev,end=*break)
                if poe11a.firm_id$+poe11a.vendor_id$+poe11a.req_no$<>poe01a_ke
:y.firm_id$+poe01a_key.vendor_id$+poe01a_key.req_no$ break
                read record (poe11_dev,key=poe11a_key$) poe11a$
                if whse$="ALL" or poe11a.warehouse_id$=whse$

                    gosub gettestdate_detail
                    if datefrom$="" or testdated$>=datefrom$

                        if datethru$="" or testdated$<=datethru$

rem --- Detail passed, so print header if nec & print detail

                            call pgmdir$+"adc_progress.aon","S","","","","",0,
:0,1,meter_num,status
                            if headrecprinted$<>"Y"
                                gosub testbreaks
                                headrecprinted$="Y"
                            endif
                            gosub printdetail

                                                endif

                                            endif

                endif

rem --- Accumulate totals; then get next detail

                reqtot=reqtot+extension
                vendtot=vendtot+extension
                grandtot=grandtot+extension
                extension=0
                extension$=""

            wend

rem --- Done w/detail for this req

            if headrecprinted$="Y" gosub reqtotals

rem --- Loop up for next header record via sort files

            if printseq$<>"A" break

rem --- See if there's another req for vend before getting next alt seq

            poe01a_key$=key(poe01_dev,end=*break)
            if poe01a.vendor_id$=vendor$ continue else break

rem        wend

    wend

done: rem --- All Done

escape;rem  all done?

    if l+2>l9 gosub report_heading
    if printseq$<>"R" gosub vendtotals
    print (printer_dev)@(o[12]-17),"Total For Report",@(o[12]),grandtot:m1$
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8),dateprom$(8),notb4date$(8)
    whse_detail$=poe11a.vendor_id$
    itemnum$=poe11a.item_id$
    memo$=poe11a.order_memo$
    unitmeas$=poe11a.unit_measure$
    if poe11a.reqd_date$<>fill(6) datereq$=fndate$(poe11a.reqd_date$)
    if poe11a.promise_date$<>fill(6) dateprom$=fndate$(poe11a.promise_date$)
    if poe11a.not_b4_date$<>fill(6) notb4date$=fndate$(poe11a.not_b4_date$)
    convfact$=str(poe11a.conv_factor:m5$)
    reqqty$=str(poe11a.req_quantity:m2$)
    baldue$=str(poe11a.req_quantity-poe11a.reserved_num:m2$)
    unitcost$=str(poe11a.unit_cost:m3$)
    wonum$=poe11a.wo_no$
    woseq$=poe11a.sequence_no$

rem --- Get Drop Ship flag & Line Type

    dim s0$(4),s1$(32)
    linetype$="N"
    dropship$="N"
    find record (pom02a_dev,key=poe11a_key.firm_id$+poe11a.po_line_code$,dom=g
:et_item_disc) pom02a$
    linetype$=pom02a.line_type$
    dropship$=pom02a.drop_ship$

get_item_disc: rem --- Get Item Desc for S and N type lines

    if linetype$<>"N"
        dim itemdesc$(60),x1$(60)
        ivm01a.item_desc$="Not On File"
        find record (ivm01a_dev,key=firm_id$+poe11a.item_id$,dom=get_ext) ivm01a$
        ivm01a.item_desc$=fnitem$(x1$,desclen[1],desclen[2],desclen[3])
    else
         itemdesc$=memo$
    endif

get_ext: rem --- Get extension

    gosub calc_extension

rem --- Get Vendor's Part #

    dim vpartnum$(20)
    i05_key$=poe11a.firm_id$+poe11a.vendor_id$+itemnum$
    find record (ivm05a_dev,key=i05_key$,dom=*next) ivm05a$

rem --- Format common part of print line

    dim pline$(132)
    pline$(1)=poe11a.po_line_no$+" "+poe11a.po_line_code$+" "+whse_detail$

rem --- Print Line Types 'M', 'O' & 'V'

    if pos(linetype$="MOV")<>0

        if linetype$="V" pline$(o[3]+1)=memo$(1,20) else pline$(o[3]+1)=memo$
        if linetype$="O" pline$(o[11]+1,m3)=unitcost$,pline$(o[12]+1)=extensio
:n$
        if l+1>l9 gosub report_heading
        print (printer_dev)pline$
        l=l+1

    else
rem --- Print Line Types 'S' & 'N'

        if pos(linetype$="SN")<>0

            pline$(o[3]+1)=itemnum$(1,itemlen)
            pline$(o[4]+1)=datereq$
            pline$(o[5]+1)=dateprom$
            pline$(o[6]+1)=notb4date$
            pline$(o[7]+1)=unitmeas$
            if linetype$="S" pline$(o[8]+1)=convfact$
            if l+2>l9 gosub report_heading
            print (printer_dev)pline$,  @(o[9]),reqqty$,                      
:                 @(o[10]),baldue$,                                       @(o[
:11]),unitcost$,                                       @(o[12]),extension$

            print (printer_dev)         @(o[3]),itemdesc$(1,40),
            if wonum$<>fill(7) print (printer_dev) @(o[6]+4),"WO: ",wonum$,"-"
:,woseq$ else print (printer_dev)""
            l=l+2
            if vpartnum$<>fill(20)
                if l+1>l9 gosub report_heading
                print (printer_dev)@(o[3]),"Vendor's Part Number ",vpartnum$
                l=l+1
            endif

rem --- Print drop ship info if applicable

            if dropship$="Y" if ar$<>"N"

                            dim custinfo$(321),dropinfo$(173),custaddr$(120),d
:ropaddr$(120)
                custname$="Not On File"
                dropname$="Not On File"
                find record (arm01_dev,key=poe11a.firm_id$+poe11a.customer_no$
:,dom=brnch2) arm01a$
                custname$=arm01a.cust_name$
                custaddr$=arm01a.addr_line_1$+arm01a.addr_line_2$+arm01a.addr_
:line_3$+               arm01a.city$+arm01a.state_code$+arm01a.zip_code$
                call pgmdir$+"adc_address.aon",custaddr$,24,4,9,30

brnch2:

                a03_key$=poe11a.firm_id$+poe11a.customer_id$+poe11a.shipto_no$
                find record (arm03_dev,key=a03_key$,dom=brnch3) arm03a$
                dropname$=arm03a.name$
                dropaddr$=arm03a.addr_line_1$+arm03a.addr_line_2$+arm03a.addr_
:line_3$+               arm01a.city$+arm01a.state_code$+arm01a.zip_code$
                call pgmdir$+"adc_address.aon",dropaddr$,24,4,9,30

brnch3:

                if l+6>l9 gosub report_heading
                print (printer_dev) @(o[3]),"Drop Ship Above Line To Customer"
:,                       @(43),fnmask$(poe11a.customer_id$,customask$)," Order
: ",poe11a.order_no$," ",poe11a.line_no$,                       @(73),"Ship To
::",                       @(82),fnmask$(poe11a.shipto_no$,customask$)
                print (printer_dev) @(38),"Name",                       @(43),
:custname$,                       @(82),dropname$
                print (printer_dev) @(35),"Address",                       @(4
:3),custaddr$(1,30),                       @(82),dropaddr$(1,30)
                l=l+3
                if custaddr$(31,30)<>fill(30) or dropaddr$(31,30)<>fill(30)   
:             print (printer_dev) @(43),custaddr$(31,30),                     
:  @(82),dropaddr$(31,30); let l=l+1
                if custaddr$(61,30)<>fill(30) or dropaddr$(61,30)<>fill(30)   
:             print (printer_dev) @(43),custaddr$(61,30),                     
:  @(82),dropaddr$(61,30); let l=l+1
                if custaddr$(91,30)<>fill(30) or dropaddr$(91,30)<>fill(30)   
:             print (printer_dev) @(43),custaddr$(91,30),                     
:  @(82),dropaddr$(91,30); let l=l+1

            endif

                endif

    endif

    return

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,wi
:dth,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(0),"From Vendor: ",vendf$," ",vendfname$(1,20),     
:                  @(fncenter(reqpagehead$,width)),reqpagehead$,              
:         @(117-len(datetype$)),"From ",datetype$,": ",datef$
    print (printer_dev) @(2),"To Vendor: ",vendt$," ",vendtname$(1,20),       
:                @(fncenter(whsepagehead$,width)),whsepagehead$,              
:         @(119-len(datetype$)),"To ",datetype$,": ",datet$
    print (printer_dev) ""
    print (printer_dev) @(o[4]),"Date",                       @(o[5]),"Date", 
:                      @(o[6]),"Not",                       @(o[8]+m5-7),"Conv
:",                       @(o[9]+m2-9),"Quantity",                       @(o[1
:0]+m2-9),"Balance",                       @(o[11]+m3-5),"Unit"
    print (printer_dev) @(o[0]),"Seq",                       @(o[1]),"Cd",    
:                   @(o[2]),"Wh",                       @(o[3]),"Item",       
:                @(o[4]),"Required",                       @(o[5]),"Promised",
:                       @(o[6]),"Before",                       @(o[7]),"UM", 
:                      @(o[8]+m5-7),"Factor",                       @(o[9]+m2-
:9),"Req'd",                       @(o[10]+m2-9),"Due",                       
:@(o[11]+m3-5),"Cost",                       @(o[12]+m1-10),"Extension"
    print (printer_dev)""
    l=l+6
    return

assignheads: rem --- Assign headings variables

    if printseq$="A" if vendfrom$="" vendf$="First" else vendf$=vendfrom$
    if printseq$="A" if vendthru$="" vendt$="Last" else vendt$=vendthru$
    if printseq$<>"A"
        if vendfrom$="" vendf$="First" else vendf$=fnmask$(vendfrom$(1,vendlen
:),vendomask$)
        if vendthru$="" vendt$="Last" else vendt$=fnmask$(vendthru$(1,vendlen)
:,vendomask$)
    endif

    if reqfrom$="" reqf$="First" else reqf$=reqfrom$
    if reqthru$="" reqt$="Last" else reqt$=reqthru$
    if datefrom$="" datef$="First" else datef$=fndate$(datefrom$)
    if datethru$="" datet$="Last" else datet$=fndate$(datethru$)
    reqpagehead$="From Requisition "+reqf$+" Through "+reqt$
    whsepagehead$="For Warehouse "+whse$+" "+cvs(whsename$,2)
    return

gettestdate_header: rem --- Determine date to use when testing range

    action=pos(whichdate$="OPRD")
    ordr_h=1
    prom_h=2
    reqd_h=3
    notb4_h=4

    switch action
        case ordr_h
            testdateh$=poe01a.order_date$
            break
        case prom_h
            testdateh$=poe01a.promise_date$
            break
        case reqd_h
            testdateh$=poe01a.reqd_date$
            break
        case notb4_h
            testdateh$=poe01a.not_b4_date$
            break
        case default
            testdateh$=poe01a.order_date$
            break
    swend

    return

gettestdate_detail: rem --- Determine date to use when testing range in detail

    action=pos(whichdate$="OPRD")
    ordr_d=1
    prom_d=2
    reqd_d=3
    notb4_d=4

    switch action
        case ordr_d
            testdated$=poe01a.order_date$
            break
        case prom_d
            testdated$=poe11a.promise_date$
            break
        case reqd_d
            testdated$=poe11a.reqd_date$
            break
        case notb4_d
            testdated$=poe11a.not_b4_date$
            break
        case default
            testdated$=poe01a.order_date$
            break
    swend

    return

testbreaks: rem --- Test for Breaks

    if poe01a.vendor_id$<>vendor$

        if printvtot$="Y" if printseq$<>"R" gosub vendtotals
        gosub newvendor
        if printseq$="R"

            gosub newreq
            return

        endif

    endif

    if poe01a.req_no$<>reqnum$ gosub newreq
    return

newvendor: rem --- New Vendor

    dim c0$(8),c1$(195)
    vendtot=0
    vendname$="Not On File"
    vendor$=poe01a.vendor_id$
    printvtot$="Y"
    a01_key$=firm_id$+vendor$
    find record (apm01_dev,key=a01_key$,dom=brnch4) apm01a$
    vendname$=apm01a.vendor_name$

brnch4:
    if l+2>l9 gosub report_heading
    print (printer_dev)@(0),"Vendor ",fnmask$(vendor$(1,vendlen),vendomask$),"
:",vendname$
    l=l+1
    return

newreq: rem --- New Requisition

    reqtot=0
    reqnum$=poe01a.req_number$
    termsdesc$="Not On File"
    paddrdesc$=""
    shpwhsdesc$="Not On File"
    dim d0$(26),r0$(10),r1$(160),x0$(160)
    a10_key$=firm_id$+"C"+poe01a.terms_code$
    find record (apm10_dev,key=a10_key$,dom=brnch5) apm10c$
    termsdesc$=apm10c.code_desc$

brnch5:
    find record (apm05_dev,key=firm_id$+vendor$+poe01a.purch_addr$,dom=brnch6)
: apm05a$
    paddrdesc$=apm05a.name$(1,24)

brnch6:
    find record (ivm10_dev,key=firm_id$+"C"+poe01a.warehouse_id$,dom=brnch7) i
:vm10c$
    shpwhsdesc$=ivm10c.short_name$

brnch7:
    if l+5>l9 gosub report_heading
    dim dateord$(8)
    if poe01a.order_date$<>fill(6) dateord$=fndate$(poe01a.order_date$)
    print (printer_dev) ""
    print (printer_dev) @(0),"Req#: ",reqnum$,                       @(14),"Or
:dered ",dateord$,                       @(33),"Terms ",poe01a.terms_code$," "
:,termsdesc$,                       @(65),"Ship Via ",poe01a.ap_ship_via$,
    if paddrdesc$<>""    print (printer_dev) @(91),"Purchase From ",poe01a.pur
:ch_addr$," ",paddrdesc$ else print (printer_dev)""
    print (printer_dev) @(32),"Ack By ",poe01a.acknowledge$,                  
:     @(67),"F.O.B. ",poe01a.fob$,                       @(97),"Ship To ",poe0
:1a.warehouse_id$," ",shpwhsdesc$
    print (printer_dev)""
    l=l+4
    return

vendtotals: rem --- Print Vendor total

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[12]-18-len(vendomask$)),"Total For Vendor ",fnmask
:$(vendor$(1,vendlen),vendomask$),                       @(o[12]),vendtot:m1$
    l=l+1
    return

reqtotals: rem --- Print Requisition total

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[12]-24),"Total For Req # ",reqnum$,               
:         @(o[12]),reqtot:m1$
    let l=l+1
    return

rem --- Calc extension for S, N and O types; init it for others

calc_extension:

    if pos(linetype$="SNO")=0 return
    let qty=poe11a.req_quantity-poe11a.reserved_num
    if linetype$="O" qty=1
    precision 2
    let extension=poe11a.unit_cost*qty,extension$=str(extension:m1$)
    precision ivprecision
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."
:+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),3
:2)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)
escape; rem  std error
    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call pgmdir$+"adc_error.aon",err=std_error_exit,pgm(-2),str(tcb(5):"00000"
:),                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tc
:b(5):"00000"),                                   str(err:"000"),rd_err_text$,
:rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
escape;rem  at exit
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src
escape; rem  at end
    end
