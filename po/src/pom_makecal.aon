rem --- Create Purchase Calendar
rem --- Program poc_ca v8.0.0 18Dec2007 (poc_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/18/2007 02:38:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    seterr std_error
    setesc std_error
    
 rem --- Use for type checking

    use java.util.GregorianCalendar
	use ::sys/prog/bao_option.bbj::Option
   
rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$
    
rem --- Init Data

    Calendar! = new GregorianCalendar()
	r0$=sysinfo.system_date$
	r0=12
	r8$="312831303130313130313031"
	r9$="SunMonTueWedThuFriSat"
	status=0
	more=1
    
rem --- Assign form input values to local variables

	declare Option option!    
	r0$=option!.getOptionData("FIRST_SCHED_DT")
	r0=num(option!.getOptionData("NUM_WEEKS"))
	for x=1 to 7
		if option!.getOptionData("OMIT_"+str(x:"00"))="Y"
			r3$=r3$+r9$((x-1)*3+1,3)
		endif   
	next x
	filename$=option!.getOptionData("FILENAME")

rem --- Open all files

	num_files = 1
	open_beg  = 1
	open_end  = 1
	
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	
	open_tables$[1]=filename$,open_opts$[1]="OTA"

	gosub open_tables

	pom01_dev=num(open_chans$[1])
	dim pom01a$:open_tpls$[1]
	
	call pgmdir$+"adc_progress.aon","NC","","","","",0,pom01_dev,1,meter_num,status


rem --- process

	x$=r0$,old_date$=x$
    
    gosub get_exist_rec
    for x=1 to r0
        for y=1 to 7
            call pgmdir$+"adc_dayweek.aon",x$,x0$,x0
            if x$(1,6)<>old_date$(1,6) then gosub write_record
            if pos(x0$=r3$,3)>0 then 
            	field pom01a$,"DAY_STATUS_"+str(num(x$(7,2)):"00")="C"
            else            
                field pom01a$,"DAY_STATUS_"+str(num(x$(7,2)):"00")="W"
            endif

            x9$=x$
            x0$=""
            call pgmdir$+"adc_daydates.aon",x$,x0$,1
            x$=x0$    
        next y
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status        
    next x
    gosub write_record
    goto std_exit

write_record: rem ---  Write Record

    pom01a.firm_id$=firm_id$
    pom01a.year$=old_date$(1,4)
    pom01a.month$=old_date$(5,2)

    if x9$(5,2)<>"02" then
        let pom01a.days_in_mth=num(r8$((num(x9$(5,2))-1)*2+1,2))
    else
        pom01a.days_in_mth=iff(Calendar!.isLeapYear(num(x9$(1,4))),29,28)
    endif
    
	pom01a$=field(pom01a$)
    write record (pom01_dev,key=pom01a.firm_id$+pom01a.year$+pom01a.month$) pom01a$
    old_date$=x$
    gosub get_exist_rec
    return

get_exist_rec: rem --- Get existing record

	dim pom01a$:fattr(pom01a$)
    
    pom01a.firm_id$=firm_id$
    pom01a.year$=x$(1,4)
    pom01a.month$=x$(5,2)

    find record (pom01_dev,key=pom01a.firm_id$+pom01a.year$+pom01a.month$,dom=*next) pom01a$
    return
    
open_tables: rem --- Call the open tables routine

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
		status=912
		exitto std_exit
	endif

	return	

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
	return
    

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend    
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

	msg_id$="UPDATE_COMPLETE"
	dim msg_tokens$[1]
	msg_opt$=""
	gosub disp_message

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_exit.src

    end
