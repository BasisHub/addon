rem --- Quality Assurance Work In Process Report (Report Overlay)
rem --- Program por_rb v8.0.0 17Jul2007 (por_rb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:50:58)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    precision num(ivs01a.precision$)
    dim o[14],description$(40)
    dim headings$[5],totals[4],receipt[4],vendor[4],report[4]
    dim line[4]

	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,m3

    width=132
    page=0
    l9=59
    l=l9+1
    clock$=""
    when$=sysinfo.system_date$
    headings=5
    done=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    number=0
    lsdesc$=Translate!.getTranslation("AON_SERIAL_NBR")
    dif=0
    x1=15
    x2=12
    x3=12
    ms$="000-"
    if ivs01a.lotser_flag$="L" then lsdesc$=Translate!.getTranslation("AON_LOT_NBR")
    more=1

rem --- Resize masks

    while more
        x=m1+(m2*4)+m3+i[0]+52
        if x<=width then break
        call pgmdir$+"adc_sizemask.aon",m1$,m1,10,x1
        call pgmdir$+"adc_sizemask.aon",m2$,m2,9,x2
        call pgmdir$+"adc_sizemask.aon",m3$,m3,6,x3
        x1=x1-1
        x2=x2-1
        x3=x3-1
    wend

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,0,1,meter_num,status

rem --- Print positions

    dim h1$(width),h2$(width),qh$(m2*4,"-")
    o[14]=width-m1
    o[13]=o[14]-m3
    o[12]=o[13]-m2
    o[11]=o[12]-m2
    o[10]=o[11]-m2
    o[9]=o[10]-m2
    o[8]=o[9]-3
    o[7]=o[8]-11
    o[6]=o[7]-9
    o[5]=o[6]-9
    o[4]=o[5]-9
    o[1]=4
    o[2]=7
    o[3]=10
    rem new qh$(fncenter(m2*4,10),10)=Translate!.getTranslation("AON__QUANTITY_")
    qh$=Translate!.getTranslation("AON__QUANTITY_")
    x1$=Translate!.getTranslation("AON_FIRST")
    x2$=Translate!.getTranslation("AON_LAST")
    if begvend$<>"" x1$=fvendor$
    if endvend$<>"" x2$=tvendor$
    h1$(1)=Translate!.getTranslation("AON_FROM_VENDOR:_")+x1$
    h2$(1)=Translate!.getTranslation("AON___TO_VENDOR:_")+x2$
    x1$=Translate!.getTranslation("AON_FIRST")
    x2$=Translate!.getTranslation("AON_LAST")
    if begrec$<>"" x1$=begrec$
    if endrec$<>"" x2$=endrec$
    x1$=Translate!.getTranslation("AON_FROM_RECEIVER:_")+x1$
    x2$=Translate!.getTranslation("AON___TO_RECEIVER:_")+x2$
    x=max(len(x1$),len(x2$))
    rem new h1$(fncenter(width,x))=x1$
    rem new h2$(fncenter(width,x))=x2$
    h1$=x1$
    h2$=x2$
    x1$=Translate!.getTranslation("AON_FIRST")
    x2$=Translate!.getTranslation("AON_LAST")
    if begdate$<>"" x1$=fndate$(begdate$)
    if enddate$<>"" x2$=fndate$(enddate$)
    x=max(len(x1$),len(x2$))+18
    rem new h1$(width-x)=Translate!.getTranslation("AON_FROM_RECEIPT_DATE:_")+x1$
    rem new h2$(width-x)=Translate!.getTranslation("AON___TO_RECEIPT_DATE:_")+x2$
    h1$=Translate!.getTranslation("AON_FROM_RECEIPT_DATE:_")+x1$
    h2$=Translate!.getTranslation("AON___TO_RECEIPT_DATE:_")+x2$
    headings$[3]=h1$
    headings$[4]=h2$

rem --- Open Printer

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Position file

    start$=firm_id$+begvend$
    read (poe03_dev,key=start$,dom=*next)

rem --- Read next header
    while more
escape
        poe03a_key$=key(poe03_dev,end=*break)
        if pos(firm_id$=poe03a_key$)<>1 then break
        read record (poe03_dev) poe03a$

rem --- Range tests

        if endvend$<>"" and poe03a.vendor_id$>endvend$ then break
        if begdate$<>"" and poe03a.recpt_date$<begdate$ then continue
        if enddate$<>"" and poe03a.recpt_date$>enddate$ then continue
        if begrec$<>"" and poe03a.receiver_no$<begrec$ then continue
        if endrec$<>"" and poe03a.receiver_no$>endrec$ then continue

rem --- Header fields

        dim receipt[4]
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        packlist$=""
        number=number+1
        if cvs(poe03a.packing_list$,3)<>"" then packlist$=Translate!.getTranslation("AON_PACKING_LIST:_")+poe03a.packing_list$

rem --- Level break?

        if t0$<>poe03a.vendor_id$ then gosub vend_brk
escape
rem --- Print header information

        if l+5>l9 then 
            gosub report_heading 
        else 
            gosub recpt_subheading
        endif    
escape
rem --- Position detail file

        p03_key$=poe03a.firm_id$+poe03a.vendor_id$+poe03a.receiver_no$+poe03a.po_no$
        read (poe13_dev,key=p03_key$,dom=*next)

rem --- Read next detail record
escape
        while more

            dim line[4]
            poe13a_key$=key(poe13_dev,end=*break)
            if pos(p03_key$=poe13a_key$)<>1 then break
            read record (poe13_dev) poe13a$

rem --- Read line code

            if pom02a.firm_id$+pom02po_line_code$>firm_id$+poe13a.po_line_code$
                pom02a.firm_id$=firm_id$, pom02a.po_line_code$=poe13a.po_line_code$
                pom02a.code_desc$=""
                find record (pom02a_dev,key=pom02a.firm_id$+pom02po_line_code$,dom=brnch1) pom02a$
            endif

rem --- Calculate extension

            qty=poe13a.qa_rec_qty
            extension=0
            if pom02a.line_type$="O" then qty=1
            precision 2
            extension=poe13a.unit_cost*qty
            precision num(ivs01a.precision$)
            line[0]=poe13a.unit_cost
            line[1]=poe13a.qa_wip_qty
            line[2]=poe13a.qa_rec_qty
            line[3]=poe13a.qa_rej_qty
            line[4]=extension

rem --- Format remaining fields

            before$=""
            required$=""
            promised$=""
            wo$=""
            if cvs(poe13a.reqd_date$,3)<>"" then required$=fndate$(poe13a.reqd_date$)
            if cvs(poe13a.promise_date$,3)<>"" then promised$=fndate$(poe13a.promise_date$)
            if cvs(poe13a.not_b4_date$,3)<>"" then before$=fndate$(poe13a.not_b4_date$)
            if cvs(poe13a.wo_no$+poe13a.sequence_no$,3)<>"" wo$=poe13a.wo_no$+"-"+poe13a.sequence_no$

rem --- Branch based on line code

            action=pos(pom02a.line_type$="SNVMO")
            std_line=1
            nonstock_line=2
            vend_part_line=3
            msg_line=4
            other_type_line=5

            switch action

                case std_line;  rem --- Standard line

                    ivm01a.firm_id$=firm_id$+poe13a.item_id$
                    ivm01a.firm_id$=""
                    ivm01a.item_desc$=nf$
                    find record (ivm01a_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next) ivm01a$
                    ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,i[3],i[4],i[5])
                    if l+2>l9 then gosub report_heading
                    print (printer_dev) @(o[0]),poe13a.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[3]),poe13a.item_id$,
:                                       @(o[4]),before$,
:                                       @(o[5]),required$,
:                                       @(o[6]),promised$,
:                                       @(o[7]),wo$,
:                                       @(o[8]),poe13a.unit_measure$,
:                                       @(o[9]),poe13a.qty_ordered:m2$,
:                                       @(o[10]),poe13a.qa_wip_qty:m2$,
:                                       @(o[11]),poe13a.qa_rec_qty:m2$,
:                                       @(o[12]),poe13a.qa_wip_qty:m2$,
:                                       @(o[13]),poe13a.unit_cost:m3$,
:                                       @(o[14]),extension:m1$

                    print (printer_dev) @(o[3]),description$
                    l=l+2
                    break

                case nonstock_line; rem --- Non-stock line

                    if l+2>l9 then gosub report_heading
                    print (printer_dev) @(o[0]),poe13a.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[3]),poe13a.item_id$,
:                                       @(o[4]),code$,
:                                       @(o[8]),poe13a.unit_measure$,
:                                       @(o[9]),poe13a.qty_ordered:m2$,
:                                       @(o[10]),poe13a.qa_wip_qty:m2$,
:                                       @(o[11]),poe13a.qa_rec_qty:m2$,
:                                       @(o[12]),poe13a.qa_wip_qty:m2$,
:                                       @(o[13]),poe13a.unit_cost:m3$,
:                                       @(o[14]),extension:m1$

                    print (printer_dev) @(o[3]),poe13a.order_memo$
                    l=l+2
                    break

                case vend_part_line; rem --- Vendor part number line

                    if l+1>l9 gosub report_heading
                    print (printer_dev) @(o[0]),poe13a.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[3]),poe13a.item_id$
                    l=l+1
                    break

                case msg_line;  rem --- Message line

                    if l+1>l9 then gosub report_heading
                    print (printer_dev) @(o[0]),poe13a.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[3]),poe13a.order_memo$
                    l=l+1
                    break

                case other_type_line; rem --- Other type line

                    if l+2>l9 then gosub report_heading
                    print (printer_dev) @(o[0]),poe13a.po_line_no$,
:                                       @(o[1]),poe13a.po_line_code$,
:                                       @(o[2]),poe13a.warehouse_id$,
:                                       @(o[13]),poe13a.unit_cost:m3$,
:                                       @(o[14]),extension:m1$

                    print (printer_dev)@(o[3]),poe13a.order_memo$
                    l=l+2
                    break

                case default
                    goto brnch1
                    break

            swend

rem --- Lotted/Serialized?

            if ls$<>"N" or pom02a.line_type$<>"S" or ivm01a.lotser_item$<>"Y"

                p13_key$=poe13a.firm_id$+poe13a.vendor_id$+poe13a.receiver_no$+poe13a.po_no$+poe13a.po_line_no$
                read (poe23_dev,key=p13_key$,dom=*next)

rem --- Read next lot/serial detail record

                while more

                    poe23a_key$=key(poe23_dev,end=*break)
                    if pos(p13_key$=poe23a_key$)<>1 then break
                    read record (poe23_dev) poe23a$
                    precision 2
                    extension=poe23a.qty_received*poe23a.unit_cost
                    precision num(ivs01a.precision$)

rem --- Print detail line

                    if l+1>l9 then gosub report_heading
                    print (printer_dev) @(o[3]),lsdesc$," ",poe23a.sequence_no$," ",poe23a.lotser_no$,
:                                       @(o[10]),poe23a.qty_received:m2$,
:                                       @(o[11]),poe23a.qty_received:m2$,
:                                       @(o[13]),poe23a.unit_cost:m3$,
:                                       @(o[14]),extension:m1$
                    l=l+1

                wend

            endif

rem --- Position rejection detail file

            if poe13a.qa_wip_qty<>0
                read (poe63_dev,key=p13_key$,dom=*next)

rem --- Read next rejection detail

                while more

                    p63_key$=key(poe63_dev,end=*break)
                    if pos(p13_key$=p63_key$)<>1 then break
                    read record (poe63_dev) poe63a$
                    pom03a.firm_id$=firm_id$,pom03a.reject_code$=poe63a.reject_code$
                    pom03a.descripiton$=nf$
                    lastseq=num(poe63a.sequence_no$)
                    find record (pom03a_dev,key=pom03a.firm_id$+pom03a.reject_code$,dom=*next) pom03a$
                    precision 2
                    extension=poe63a.qty_reject*poe13a.unit_cost
                    precision num(ivs01a.precision$)

rem --- Print rejection detail

                    dim ra$(22),inspector$(9)
                    if cvs(poe63a.operator_id$,3)<>"" then inspector$(1)=Translate!.getTranslation("AON_INSP:_")+poe63a.operator_id$
                    if cvs(poe63a.ra_no$,2)<>"" then ra$(1)="RA #: "+poe63a.ra_no$
                    if l+1>l9 then gosub report_heading
                    print (printer_dev) @(o[3]),poe63a.sequence_no$,
:                                       " ",pom03a.reject_code$," ",pom03a.description$," ",ra$," ",inspector$,
:                                       @(o[12]),poe63a.qty_reject$:m2$,
:                                       @(o[13]),poe13a.unit_cost:m3$,
:                                       @(o[14]),extension:m1$
                    l=l+1

                wend

            endif

brnch1: rem --- Loop back for next detail

            receipt[all]=receipt[all]+line[all]
            vendor[all]=vendor[all]+line[all]
            report[all]=report[all]+line[all]

        wend

rem --- Print receiver totals

        if l+2>l9 gosub report_heading
        print (printer_dev)""
        totals$=Translate!.getTranslation("AON_TOTAL_FOR_RECEIVER_#_")+poe03a.receiver_no$
        totals[all]=receipt[all]
        l=l+1
        gosub print_totals

rem --- Loop back for next header record

    wend

rem --- All done

    done=1
    gosub vend_brk
    totals$=Translate!.getTranslation("AON_TOTAL_FOR_REGISTER")
    totals[all]=report[all]
    gosub print_totals
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+4
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[4]),Translate!.getTranslation("AON_NOT"),
:                       @(o[5]),Translate!.getTranslation("AON_DATE"),
:                       @(o[6]),Translate!.getTranslation("AON_DATE"),
:                       @(o[9]+m2-9),qh$,
:                       @(o[13]+m3-5),Translate!.getTranslation("AON_UNIT")

    print (printer_dev) @(o[0]),Translate!.getTranslation("AON_SEQ"),
:                       @(o[1]),Translate!.getTranslation("AON_CD"),
:                       @(o[2]),Translate!.getTranslation("AON_WH"),
:                       @(o[3]),Translate!.getTranslation("AON_ITEM"),
:                       @(o[4]),Translate!.getTranslation("AON_BEFORE"),
:                       @(o[5]),Translate!.getTranslation("AON_REQUIRED"),
:                       @(o[6]),Translate!.getTranslation("AON_PROMISED"),
:                       @(o[7]),Translate!.getTranslation("AON_WORK_ORDER"),
:                       @(o[8]),"UM",
:                       @(o[9]+m2-9),Translate!.getTranslation("AON_ORDERED"),
:                       @(o[10]+m2-9),Translate!.getTranslation("AON_RECEIVED"),
:                       @(o[11]+m2-9),Translate!.getTranslation("AON_APPROVED"),
:                       @(o[12]+m2-9),Translate!.getTranslation("AON_REJECTED"),
:                       @(o[13]+m3-5),Translate!.getTranslation("AON_COST"),
:                       @(o[14]+m1-10),Translate!.getTranslation("AON_EXTENSION")
escape
    if done=0 then gosub recpt_subheading
    return

recpt_subheading: rem --- Receipt subheading
escape
    print (printer_dev)""
    rem new print (printer_dev)Translate!.getTranslation("AON_VENDOR:_"),vendor$,
rem new :                       @(48),Translate!.getTranslation("AON_REC_#:_"),poe03a.receiver_no$,"  PO #:",poe03a.po_no$,
rem new :                       @(78),packlist$,
rem new :                       @(100),Translate!.getTranslation("AON_RECEIPT_DATE:_"),fndate$(poe03a.recpt_date$)
escape
    print (printer_dev)""
    l=l+3

    return

vend_brk: rem --- Vendor break

    if t0$<>""
        let totals$=Translate!.getTranslation("AON_TOTAL_FOR_")+vendor$,totals[all]=vendor[all]
        gosub print_totals
    endif

    if !done
        dim vendor[4]
        t0$=poe03a.vendor_id$,apm01a.firm_id$=firm_id$+t0$,apm01a.vendor_name$=nf$
        find record (apm01a_dev,key=apm01a.firm_id$+apm01a.vendor_id$,dom=*next) apm01a$
        vendor$=fnmask$(apm01a.vendor_id$,m0$)+" "+cvs(apm01a.vendor_name$,2)
        if pagebreak$="Y" then l=l9+1
    endif

    return

rem --- Print totals

print_totals:

    if l+1>l9 then gosub report_heading
    if len(totals$)>o[6] then totals$=totals$(1,o[6])
    print (printer_dev) @(o[9]-len(totals$)),totals$,
:                       @(o[9]),totals[0]:m2$,
:                       @(o[10]),totals[1]:m2$,
:                       @(o[11]),totals[2]:m2$,
:                       @(o[12]),totals[3]:m2$,
:                       @(o[14]),totals[4]:m1$
    l=l+1
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end
