rem --- Return first/last scheduled dates
rem --- Program poc_ce v8.0.0 11Dec2007 (poc_ce)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/11/2007 10:04:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    
    enter pom01_dev,calendar_tpl$,firm_id$,begdate$,enddate$,status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    begdate$=""
    enddate$=""
    dim pom01a$:calendar_tpl$
    
rem --- Position file

    read (pom01_dev,key=firm_id$,dom=*next)
    workday$="00"

rem --- Get First Day Scheduled

while 1

    pom01a_key$=key(pom01_dev,end=*break)
    if pos(firm_id$=pom01a_key$)<>1 then break
    	read record (pom01_dev) pom01a$
    	x=1
    	while workday$="00"
     		if x>pom01a.days_in_mth then break       	
     		if cvs(field(pom01a$,"DAY_STATUS_"+str(x:"00")),3)<>"" workday$=str(x:"00")
     		x=x+1
       wend
       if workday$="00" then let workday$="01"
       begdate$=pom01a.year$+pom01a.month$+workday$
   	break
wend

rem --- re-position file

    read (pom01_dev,key=firm_id$+$ff$,dom=*next)
    workday$="00"

rem --- Get Last Day Scheduled

while 1

    pom01a_key$=keyp(pom01_dev,end=*break)
    if pos(firm_id$=pom01a_key$)<>1 then break
        read record (pom01_dev,key=pom01a_key$) pom01a$
        x=pom01a.days_in_mth
        while workday$="00"
        	if x<1 then break
        	if cvs(field(pom01a$,"DAY_STATUS_"+str(x:"00")),3)<>"" workday$=str(x:"00")
        	x=x-1
        wend
        if workday$="00" then let workday$="01"
        enddate$=pom01a.year$+pom01a.month$+workday$
    break
wend

done: rem --- All done

    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    exit
rem #endinclude std_exit.src

    end
