rem --- Replenishment Selection Update
rem --- Program pou_repselupdate v8.0.0 21Apr2009 (pou_ba)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 11:18:58)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

    rem --- Open all files

	num_files=16,open_beg=1,open_end=num_files
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

	open_tables$[1]="APM_VENDMAST", open_opts$[1]="OTA"
	open_tables$[2]="APM_VENDHIST", open_opts$[2]="OTA"
	open_tables$[3]="APM_VENDREPL", open_opts$[3]="OTA"
	open_tables$[4]="APS_PARAMS", open_opts$[4]="OTA"
	open_tables$[5]="IVM_ITEMMAST", open_opts$[5]="OTA"
	open_tables$[6]="IVC_BUYCODE", open_opts$[6]="OTA"
	open_tables$[7]="IVS_PARAMS", open_opts$[7]="OTA"
	open_tables$[8]="POE_REQHDR", open_opts$[8]="OTA"
	open_tables$[9]="POE_POHDR", open_opts$[9]="OTA"
	open_tables$[10]="POE_ORDHDR", open_opts$[10]="OTA"
	open_tables$[11]="POE_REQDET", open_opts$[11]="OTA"
	open_tables$[12]="POE_ORDDET", open_opts$[12]="OTA"
	open_tables$[13]="POE_REQPRINT", open_opts$[13]="OTA"
	open_tables$[14]="POE_ORDTOT", open_opts$[14]="OTA"
	open_tables$[15]="POE_REPSURP", open_opts$[15]="OTA"
	open_tables$[16]="POC_LINECODE", open_opts$[16]="OTA"

		gosub open_tables

	apm_vendmast_dev=num(open_chans$[1])
	apm_vendhist_dev=num(open_chans$[2])
	apm_vendrepl_dev=num(open_chans$[3])
	aps_params_dev=num(open_chans$[4])
	ivm_itemmast_dev=num(open_chans$[5])
	ivc_buycode_dev=num(open_chans$[6])
	ivs_params_dev=num(open_chans$[7])
	poe_reqhdr_dev=num(open_chans$[8])
	poe_pohdr_dev=num(open_chans$[9])
	poe_ordhdr_dev=num(open_chans$[10])
	poe_reqdet_dev=num(open_chans$[11])
	poe_orddet_dev=num(open_chans$[12])
	poe_reqprint_dev=num(open_chans$[13])
	poe_ordtot_dev=num(open_chans$[14])
	poe_repsurp_dev=num(open_chans$[15])
	poc_linecode_dev=num(open_chans$[16])

	dim apm_vendmast$:open_tpls$[1]
	dim apm_vendhist$:open_tpls$[2]
	dim apm_vendrepl$:open_tpls$[3]
	dim aps_params$:open_tpls$[4]
	dim ivm_itemmast$:open_tpls$[5]
	dim ivc_buycode$:open_tpls$[6]
	dim ivs_params$:open_tpls$[7]
	dim poe_reqhdr$:open_tpls$[8]
	dim poe_pohdr$:open_tpls$[9]
	dim poe_ordhdr$:open_tpls$[10]
	dim poe_reqdet$:open_tpls$[11]
	dim poe_orddet$:open_tpls$[12]
	dim poe_reqprint$:open_tpls$[13]
	dim poe_ordtot$:open_tpls$[14]
	dim poe_repsurp$:open_tpls$[15]
	dim poc_linecode$:open_tpls$[16]

rem --- Retrieve parameter records

    find record (aps_params_dev,key=firm_id$+"AP00",err=std_missing_params) aps_params$
    find record (ivs_params_dev,key=firm_id$+"IV00",err=std_missing_params) ivs_params$

rem --- Initialization

    create$="N"; rem Translate!.getTranslation("AON_CREATE_REQUISITION?")
    datereq$=stbl("+SYSTEM_DATE")
    dateord$=stbl("+SYSTEM_DATE")
    more=1

    rem --- Update Review Cycles?

	msg_id$="PO_UPDTCYCLEDT"
	msg_opt$=""
	gosub disp_message
	if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Create Purchase Req?

	msg_id$="PO_CREATEREQ"
	msg_opt$=""
	gosub disp_message
	if msg_opt$="C" then goto std_exit_no_update
	if msg_opt$="Y" then create$="Y"


rem --- Init Read
    read (poe_ordhdr_dev,key=firm_id$,dom=*next)
    call pgmdir$+"adc_progress.aon","N","","","","",0,poe_ordhdr_dev,1,meter_num,ignore_status

rem --- Read Suggested Order File

        while more

            k$=key(poe_ordhdr_dev,end=*break)
            if pos(firm_id$=k$)<>1 then break
            read record (poe_ordhdr_dev) poe_ordhdr$
            buyer$=poe_ordhdr.buyer_code$
            vendor$=poe_ordhdr.vendor_id$,reviewdate$=poe_ordhdr.cycle_date$
rem             call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
            find record (ivc_buycode_dev,key=firm_id$+"F"+buyer$,dom=end_ext) ivc_buycode$
            extract record (apm_vendrepl_dev,key=firm_id$+vendor$+buyer$,dom=end_ext) apm_vendrepl$
            days=num(ivc_buycode.cycle_days$)
            if num(apm_vendrepl.rev_days$)<>0 then let days=num(apm_vendrepl.rev_day$)
            call pgmdir$+"adc_daydates.aon",reviewdate$,nextreviewdate$,days
            apm_vendrepl.pri_rev_date$=reviewdate$
            apm_vendrepl.nxt_rev_date$=nextreviewdate$
            apm_vendrepl$=field(apm_vendrepl$)
            write record (apm_vendrepl_dev) apm_vendrepl$
end_ext:
            if create$="Y" then gosub create_req
            remove (poe_ordhdr_dev,key=k$)

        wend    

done: rem --- Done

	next_overlay$=""
    goto std_exit

create_req: rem --- Create Requisitions

    dim previtem$(20)
    read (poe_orddet_dev,key=firm_id$+buyer$+vendor$,dom=*next)
    
    while more

        k16$=key(poe_orddet_dev,end=*break)
        if pos(firm_id$+buyer$+vendor$=k16$)<>1 then break
        read record (poe_orddet_dev) poe_orddet$
        itemnum$=poe_orddet.item_id$
        stocklevel$=poe_orddet.stock_level$
        if previtem$<>itemnum$ gosub removepoe36
        if stocklevel$<>"I"
            dim unitmeas$(2)
            convfact=0
            read record (ivm_itemmast_dev,key=firm_id$+itemnum$,dom=missing_key) ivm_itemmast$
            unitmeas$=ivm_itemmast.purchase_um$
            convfact=ivm_itemmast.conv_factor
        missing_key:
            cost=poe_orddet.est_unit_cst
            whse$=poe_orddet.warehouse_id$,sugg=poe_orddet.sugg_ord_qty
            gosub callpocba
        endif
        remove (poe_orddet_dev,key=k16$)

    wend

rem --- Use poe-26 (Totals) to process items stocked by 'I'
rem --- this routine also entered when stocking by 'W', but only to remove poe_ordtot rec

    read (poe_ordtot_dev,key=firm_id$+buyer$+vendor$,dom=*next)

    while more

        k26$=key(poe_ordtot_dev,end=*break)
        if pos(firm_id$+buyer$+vendor$=k26$)<>1 then break
        read record (poe_ordtot_dev) poe_ordtot$
        itemnum$=poe_ordtot.item_id$
        stocklevel$=poe_ordtot.stock_level$
        if stocklevel$<>"W"
            dim unitmeas$(2)
            convfact=0
            read record (ivm_itemmast_dev,key=firm_id$+itemnum$,dom=missing_key1) ivm_itemmast$
            unitmeas$=ivm_itemmast.purchase_um$
            convfact=ivm_itemmast.conv_factor
        missing_key1:
            cost=poe_ordtot.est_unit_cst
            whse$=defaultwhse$,sugg=poe_ordtot.sugg_ord_qty
            gosub callpocba
        endif
        remove (poe_ordtot_dev,key=k26$)

    wend

done_create:
    return

callpocba: rem --- Assign and call poc_updpurreq (poc.ba) to create requisition

    if sugg>0
        dim info$[15],info[2]

        info$[0]=firm_id$
        info$[1]=vendor$,info$[2]="S",info$[3]=whse$
        info$[4]=dateord$
        info$[5]=datereq$,info$[6]=unitmeas$,info$[7]="R"
        info$[8]=fill(3)
        info$[9]=fill(10),info$[10]=fill(6) 
        info$[11]=fill(10)
        info$[12]=fill(10),info$[13]=itemnum$
        info$[14]=fill(40)
        info[0]=convfact
        info[1]=cost,info[2]=sugg

        call pgmdir$+"poc_updpurreq.aon",info$[all],info[all],detailkey$,rd_table_chans$[all],status
    endif
    return

removepoe36: rem --- Remove 'surplus' records

    read (poe_repsurp_dev,key=firm_id$+itemnum$,dom=*next)

    while more

        k36$=key(poe_repsurp_dev,end=*break)
        if pos(firm_id$+itemnum$=k36$)<>1 then break
        remove (poe_repsurp_dev,key=k36$)

    wend

        previtem$=itemnum$
    return

open_tables: rem --- Call open table routine	

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],rd_table_chans$[all],open_batch,open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
		status=912
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	msg_id$="UPDATE_COMPLETE"
	gosub disp_message

std_exit_no_update:
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status    
    run pgmdir$+"bas_process_end.aon",err=*next
    release
rem #endinclude std_end.src

    end