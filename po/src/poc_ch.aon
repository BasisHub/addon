rem --- Calendar Maintenance (Display, Modify Calendar, GUI)
rem --- Program poc_ch v8.0.0 20Dec2007 (poc_ch)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/20/2007 04:42:07)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    enter file_dev,a0$,status

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps-01a",ids$[1]=""
    files$[2]="fil-ea",ids$[2]=""
    files$[3]="ivs_params",ids$[3]="IVS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01a_dev=channels[1]
    filea_dev=channels[2]
    ivs01a_dev=channels[3]

rem --- Dimension string templates

    dim aps01a$:templates$[1],filea$:templates$[2],ivs01a$:templates$[3]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Determine interface

    call pgmdir$+"syc_dg.bbx",sysgui_dev,event$,event_len,sysfin$,sysfin,ui$,status
    if status or ui$<>"W" then goto std_exit

rem --- Parameters

    dim t$:stbl("+TASK_TMPL")
    t$=stbl("+TASK")

rem --- Init Data

    more=1,flag=1
    dim a1$(31),l[12]
    month=num(t.f0$(20,2))
    year=fnyy_year(t.f0$(18,2))
    l[1]=31
    l[2]=28,l[3]=31,l[4]=30,l[5]=31,l[6]=30
    l[7]=31
    l[8]=31,l[9]=30,l[10]=31,l[11]=30,l[12]=31

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","P",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status then goto std_exit

rem --- First record

    find record (file_dev,key=a0$,dom=*next) filea$

rem --- Month/Year?

    while more

        year$=a0$(3,2)
        year=fnyy_year(year$),month$=a0$(5,2),month=num(month$)

    rem --- Set window title

        call pgmdir$+"syc_rs.bbx","",my_context,2300,date(jul(1900+year,month,1):"%Ms %Y"),0,"",ignore_status

    rem --- Determine starting day of the week

        dim days[42]
        first=0
        d=0,date=0
        call pgmdir$+"adc_dayweek.aon",year$+month$+"01","",first
        first=first+1
        l[2]=28,yy=fnyy_year(year$),mm=num(month$)
        if first>7 then let first=1
        if mod(yy,4)=0 then let l[2]=29
        for i=first to 37
            date=date+1
            if date<=l[mm] then let d=d+1,days[i]=d
        next i

    rem --- Display dates on calendar

        for i=1 to 37
            if days[i] then print (sysgui_dev)'title'(2100+i-1,str(days[i])), else print (sysgui_dev)'title'(2100+i-1,""),
        next i

    rem --- Display data

        date=1
        first_row=0,first_id=0,last_id=9999
        for i=1 to 37
            if days[i]=0 then print (sysgui_dev)'hide'(3000+i-1),; continue
            print (sysgui_dev)'show'(3000+i-1),
            if first_id=0 then let first_id=3000+i-1
            listbox_inx=max(pos(a1$(date,1)=" WCH")-1,0)
            last_id=3000+i-1
            print (sysgui_dev)'listsel'(last_id,listbox_inx),
            date=date+1
        next i

    rem --- Initialize for modification

        v0=1
        i0=0
        goto next_field

    label1: rem --- Process user input

        while more

            if 3000+i0<first_id or 3000+i0>last_id then goto flow_control
            control_id=3000+i0
            ii=control_id-first_id+1

        label2:

            v0$="Sa"
            v1$="a^",v2$="",v3$="",v4$="",v1=0,v2=0
            on v3 goto get_option,label2,flow_control,label2,flow_control,get_option,flow_control,next_month,prev_month,label2

        get_option: rem --- Get option

            how_many_selected$=ctrl(sysgui_dev,control_id,3,my_context)
            if dec($00$+how_many_selected$(1,2))<>1 then continue
            listbox_inx=dec($00$+ctrl(sysgui_dev,control_id,2,my_context))
            if listbox_inx=1 then let a1$(ii,1)="W" else if listbox_inx=2 then let a1$(ii,1)="C" else if listbox_inx=3 then let a1$(ii,1)="H" else let a1$(ii,1)=""
            goto flow_control
            break

        wend

    prev_month: rem --- Prev month

        a0=l[mm]
        write record (file_dev,key=a0$) filea$
        k$=a0$
        month=num(k$(5,2))-1
        yr=fnyy_year(k$(3,2))
        if month<1 and yr<1 then continue
        if month<1 then let month=12,k$(3,2)=fnyear_yy21$(yr-1)
        k$(5,2)=str(month:"00")
        find record (file_dev,key=k$,dom=label3) filea$
        flag=0

        if flag

        label3:

            a0$(1)=k$
            a1$(1)=""

        endif

        continue

    next_month: rem --- Next month

        a0=l[mm]
        write record (file_dev,key=a0$) filea$
        k$=a0$
        month=num(k$(5,2))+1
        yr=fnyy_year(k$(3,2))
        if month>12 then let month=1,k$(3,2)=fnyear_yy21$(yr+1)
        k$(5,2)=str(month:"00")
        find record (file_dev,key=k$,dom=label4) filea$
        flag=0

        if flag

        label4:

            a0$(1)=k$
            a1$(1)=""

        endif
      
    wend

flow_control: rem --- Flow Control

    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2
    if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1)
    break
    case 4; exitto start_done
    case default; exitto done_v3
    swend

next_field:

    on i0 goto label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,label1,done

start_done:

    let io=io_done

done: rem --- Correct?

    if validate then let validate=0; goto end_input
    v0$="S"
    v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=0,v2=22,control_id=i0-i0_done+1
    
done_v3:

    on v3 goto done_test,done,done,done,cancel,validate_input,cancel,prev_month,next_month,done

done_test:

    action=pos(v$="YN")
    switch action

        case 1

        validate_input:

            validate=1
            old_control_id=0

        case 2

        do_nonkey1:

            v3=0
            i0=i0_nonkey1
            goto next_field

        case default

            goto flow_control
            break

    swend

cancel:

    goto std_exit

rem --- End

end_input:

    let a0=l[mm]
    write record (file_dev,key=a0$) filea$; rem pom01a or mpm02a
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
