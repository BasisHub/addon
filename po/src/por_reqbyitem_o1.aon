rem --- Requisitions By Item Report (Print Overlay)
rem --- Program por_reqbyitem_o1 v8.0.0 17Jul2007 (por_hb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:47:59)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Init Data

    precision ivprecision
    grandtot=0
    printwtot$="N"
    dim itemnum$(20),itemdesc$(60),whsename$(24)
    more=1
    testdate$=""
    
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQDET","PRIMARY",poe11a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQDET","AO_WH_ITEM_REQ",poe11a_key_whsetpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","PRIMARY",apm01a_key_tpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    headings=6
    dim headings$[headings],o[13]
    width=132
    page=0
    l9=59
    l=l9+1
    recs=0
    total_recs=0
    
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    gosub assignheads

rem --- Headings and print positions
 
    dim columns$[12,10]
    columns = 12
    columns$[0,0]=Translate!.getTranslation("AON_ITEM"),               columns$[0,1]="C",columns$[0,2]="4"
    columns$[1,0]=Translate!.getTranslation("AON_REQ_#"),              columns$[1,1]="C",columns$[1,2]="10"
    rem --- dropping isn/line# per VARS; columns$[2,0]=Translate!.getTranslation("AON_SEQ"),                columns$[2,1]="C",columns$[2,2]="8"
    columns$[3,0]=Translate!.getTranslation("AON_VENDOR"),             columns$[3,1]="C",columns$[3,2]="30"
    columns$[4,0]="UM",                 columns$[4,1]="C",columns$[4,2]="4"
    columns$[5,0]=Translate!.getTranslation("AON_DATE^REQUIRED"),      columns$[5,1]="C",columns$[5,2]="8"
    columns$[6,0]=Translate!.getTranslation("AON_DATE^PROMISED"),      columns$[6,1]="C",columns$[6,2]="8"
    columns$[7,0]=Translate!.getTranslation("AON_NOT^BEFORE"),         columns$[7,1]="C",columns$[7,2]="8"
    columns$[8,0]=Translate!.getTranslation("AON_CONV^FACTOR"),        columns$[8,1]="N",columns$[8,2]="6"
    columns$[9,0]=Translate!.getTranslation("AON_QUANTITY^REQ'D"),     columns$[9,1]="N",columns$[9,2]="8",columns$[9,10]="T"
    columns$[10,0]=Translate!.getTranslation("AON_UNIT^COST"),         columns$[10,1]="N",columns$[10,2]="8"
    columns$[11,0]=Translate!.getTranslation("AON_EXTENSION"),         columns$[11,1]="N",columns$[11,2]="10",columns$[11,10]="T"
    columns$[12,0]=Translate!.getTranslation("AON_QUANTITY^ON_ORDER"), columns$[12,1]="N",columns$[12,2]="8"

rem --- Position files

    call pgmdir$+"adc_progress.aon","N","POE_REQDET","","","",0,poe11a_dev,1,meter_num,status

rem --- Build sql statement

    sql_prep$="select poe_reqdet.firm_id, poe_reqdet.warehouse_id, poe_reqdet.item_id, "
    sql_prep$=sql_prep$+"poe_reqdet.req_no, poe_reqdet.internal_seq_no, poe_reqdet.reqd_date, "
    sql_prep$=sql_prep$+"poe_reqdet.promise_date, poe_reqdet.not_b4_date, "
    sql_prep$=sql_prep$+"poe_reqhdr.vendor_id, poe_reqhdr.ord_date "
    sql_prep$=sql_prep$+"from poe_reqdet, poe_reqhdr "

    where_clause$="where poe_reqdet.firm_id = '"+firm_id$+"' AND "
    where_clause$=where_clause$+"poe_reqdet.firm_id = poe_reqhdr.firm_id AND "
    where_clause$=where_clause$+"poe_reqdet.req_no = poe_reqhdr.req_no"

    if reqfrom$<>"" where_clause$=where_clause$+" AND poe_reqdet.req_no >= '" +reqfrom$+ "'"
    if reqthru$<>"" where_clause$=where_clause$+" AND poe_reqdet.req_no <= '" +reqthru$+ "'"
    if whsefrom$<>"" where_clause$=where_clause$+" AND poe_reqdet.warehouse_id >= '" +whsefrom$+ "'"
    if whsethru$<>"" where_clause$=where_clause$+" AND poe_reqdet.warehouse_id <= '" +whsethru$+ "'"
    if itemfrom$<>"" where_clause$=where_clause$+" AND poe_reqdet.item_id >= '" +itemfrom$+ "'"
    if itemthru$<>"" where_clause$=where_clause$+" AND poe_reqdet.item_id <= '" +itemthru$+ "'"    
    if vendfrom$<>"" where_clause$=where_clause$+" AND poe_reqhdr.vendor_id >= '" +vendfrom$+ "'"
    if vendthru$<>"" where_clause$=where_clause$+" AND poe_reqhdr.vendor_id <= '" +vendthru$+ "'"

    gosub get_whichdate
    if testdate$<>""
        if datefrom$<>"" where_clause$=where_clause$+ " AND "+testdate$+" >= '" + datefrom$+ "'"
        if datethru$<>"" where_clause$=where_clause$+ " AND "+testdate$+" <= '" + datethru$+ "'"
    endif

    order_by$=" order by poe_reqdet.warehouse_id,poe_reqdet.item_id,poe_reqdet.req_no,poe_reqdet.internal_seq_no"

    sql_prep$=sql_prep$ + where_clause$ + order_by$
    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Init Sort File

    while more

        read_tpl$=sqlfetch(sql_chan,err=*break)

rem --- Find corresponding detail line

        read record (poe01a_dev,key=read_tpl.firm_id$+read_tpl.req_no$,dom=*next) poe01a$
        read record (poe11a_dev,key=read_tpl.firm_id$+read_tpl.req_no$+read_tpl.internal_seq_no$,dom=*next) poe11a$

        linetype$="N"

        p02_key$=poe11a.firm_id$+poe11a.po_line_code$
        find record (pom02a_dev,key=p02_key$,dom=*next) pom02a$
        linetype$=pom02a.line_type$

        if linetype$<>"S" continue

rem --- Test breaks; print line

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit
        
        gosub testbreaks
        gosub printdetail
        recs=recs+1

rem --- Accumulate totals; then get next sort file record

        qtyreqtot=qtyreqtot+reqqty
        itemtot=itemtot+extension
        whsetot=whsetot+extension
        grandtot=grandtot+extension
        extension=0
        extension$=""
        reqqty=0
        reqqty$=""

    wend

done: rem --- All Done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if l+2>l9 gosub set_lines
    gosub itemtotals
    gosub whsetotals
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk = fnblank(1)
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_REPORT"))
    xwk = fnblank(9)
    OutVect!.addItem(str(grandtot:m1$))
    xwk = fnblank(1)
   
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8),dateprom$(8),notb4date$(8)
    itemnum$=poe11a.item_id$
    unitmeas$=poe11a.unit_measure$
    if poe11a.reqd_date$<>fill(8) datereq$=fndate$(poe11a.reqd_date$)
    if poe11a.promise_date$<>fill(8) dateprom$=fndate$(poe11a.promise_date$)
    if poe11a.not_b4_date$<>fill(8) notb4date$=fndate$(poe11a.not_b4_date$)
    convfact$=str(poe11a.conv_factor:m5$)
    reqqty=poe11a.req_qty
    reqqty$=str(reqqty:m2$)
    unitcost$=str(poe11a.unit_cost:m3$)
    reqnum$=poe11a.req_no$
    vendor$=poe01a.vendor_id$

rem --- Get vendor's name

    vendname$=Translate!.getTranslation("AON_NOT_ON_FILE")+fill(19)
    a01_key$=poe01a.firm_id$+poe01a.vendor_id$
    find record (apm01a_dev,key=a01_key$,dom=get_ext) apm01a$
    vendname$=apm01a.vendor_name$

get_ext: rem --- Get extension

    gosub calc_extension

rem --- Print detail line

    if l+1>l9 gosub set_lines
  
    xwk = fnblank(1)
    OutVect!.addItem(reqnum$)
    OutVect!.addItem(fnisn$(poe11a.internal_seq_no$))
    OutVect!.addItem(str(fnmask$(vendor$(1,vendlen),vendomask$))+" "+vendname$(1,24))
    OutVect!.addItem(unitmeas$)
    OutVect!.addItem(datereq$)
    OutVect!.addItem(dateprom$)
    OutVect!.addItem(notb4date$)
    OutVect!.addItem(convfact$)
    OutVect!.addItem(reqqty$)
    OutVect!.addItem(unitcost$)
    OutVect!.addItem(extension$)
    xwk = fnblank(1)
  
    l=l+1
    return

set_lines: rem --- Set the line count

    l=headings+1
    l=l+6
    return

assignheads: rem --- Assign headings variables

    if vendfrom$="" vendf$=Translate!.getTranslation("AON_FIRST") else vendf$=vendfrom$
    if vendthru$="" vendt$=Translate!.getTranslation("AON_LAST") else vendt$=vendthru$
    if itemfrom$="" itemf$=Translate!.getTranslation("AON_FIRST") else itemf$=itemfrom$
    if itemthru$="" itemt$=Translate!.getTranslation("AON_LAST") else itemt$=itemthru$
    if reqfrom$="" reqf$=Translate!.getTranslation("AON_FIRST") else reqf$=reqfrom$
    if reqthru$="" reqt$=Translate!.getTranslation("AON_LAST") else reqt$=reqthru$
    if datefrom$="" datef$=Translate!.getTranslation("AON_FIRST") else datef$=fndate$(datefrom$)
    if datethru$="" datet$=Translate!.getTranslation("AON_LAST") else datet$=fndate$(datethru$)
    headings$[1]=headings$[1](1,len(sysinfo.task_desc$))+Translate!.getTranslation("AON__FOR_WAREHOUSE_")+whse$+" "+cvs(whsename$,2)

    headings$[2]=Translate!.getTranslation("AON_FROM_VENDOR:_")+ vendf$
    headings$[2]=headings$[2] + Translate!.getTranslation("AON__--_TO_VENDOR:_") + vendt$
    headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_")+ itemf$
    headings$[3]=headings$[3] + Translate!.getTranslation("AON__--_TO_ITEM_") + itemt$
    headings$[4]=Translate!.getTranslation("AON_FROM_REQUISITION:_")+ reqf$
    headings$[4]=headings$[4] + Translate!.getTranslation("AON__--_TO_REQUISITION:_") + reqt$
    headings$[5]=Translate!.getTranslation("AON_FROM_ORDER_DATE:_") + datef$
    headings$[5]= headings$[5] + Translate!.getTranslation("AON__--_TO_ORDER_DATE:") + datet$

    return

get_whichdate: rem --- Determine date to use when testing range

    action=pos(whichdate$="OPRD")
    date_ordered=1
    date_promised=2
    date_required=3
    date_dont_del_before=4

    switch action
        case date_ordered
            testdate$="poe_reqhdr.ord_date"
            break
        case date_promised
            testdate$="poe_reqdet.promise_date"
            break
        case date_required
            testdate$="poe_reqdet.reqd_date"
            break
        case date_dont_del_before
            testdate$="poe_reqdet.not_b4_date"
            break
        case default
            break
    swend
    return

testbreaks: rem --- Test for Breaks

    if poe11a.warehouse_id$=whse$ 

        if poe11a.item_id$=itemnum$ return
        gosub itemtotals
        gosub newitem
        return

    endif

    if printitot$="Y" gosub itemtotals
    if printwtot$="Y" gosub whsetotals
    gosub newwhse
    gosub newitem
    
    return

newwhse: rem --- New Warehouse

    whsetot=0
    whsename$=Translate!.getTranslation("AON_NOT_ON_FILE")
    whse$=poe11a.warehouse_id$
    printwtot$="Y"
    printitot$="N"
    find record (ivm10c_dev,key=firm_id$+"C"+whse$,dom=set_lines) ivm10c$
    whsename$=ivm10c.short_name$
    gosub set_lines
    
    return

newitem: rem --- New Item

    itemtot=0
    qtyreqtot=0
    itemnum$=poe11a.item_id$
    printitot$="Y"
    dim itemdesc$(60)
    ivm01a.item_desc$=Translate!.getTranslation("AON_NOT_ON_FILE")
    i01_key$=firm_id$+poe11a.item_id$
    find record (ivm01a_dev,key=i01_key$,dom=brnch1) ivm01a$
rem    ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])
    itemdesc$(1)=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])
    
brnch1:

    i02_key$=firm_id$+poe11a.warehouse_id$+poe11a.item_id$
    qtyonorder=0
    find record (ivm02a_dev,key=i02_key$,dom=*next) ivm02a$
    if l+3>l9 gosub set_lines
    qtyonorder=num(ivm02a.qty_on_order$)
 
    xwk = fnblank(13)
    OutVect!.addItem(itemnum$(1,itemlen))
    OutVect!.addItem(itemdesc$)
    xwk = fnblank(10)
    OutVect!.addItem(str(qtyonorder:m2$))

    l=l+1
    return

whsetotals: rem --- Print Warehouse total

    if l+2>l9 gosub set_lines
    xwk = fnblank(13)
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk = fnblank(1)
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_WAREHOUSE_")+whse$+" "+whsename$)
    xwk = fnblank(9)
    OutVect!.addItem(str(whsetot:m1$))
    xwk = fnblank(1)
    xwk = fnblank(13)
    l=l+2
    
    return

itemtotals: rem --- Print Item total

    if l+2>l9 gosub set_lines
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk = fnblank(1)
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_ITEM_") + itemnum$(1,itemlen))
    xwk = fnblank(1)
    OutVect!.addItem(itemdesc$(1,22))
    xwk = fnblank(5)
    OutVect!.addItem(str(qtyreqtot:m2$))
    xwk = fnblank(1)
    OutVect!.addItem(str(itemtot:m1$))
    xwk = fnblank(1)

    let l=l+2
    return

calc_extension: rem --- Calc extension

    precision 2
    let extension=poe11a.unit_cost*reqqty,extension$=str(extension:m1$)
    precision ivprecision
    
    return

rem --- misc functions
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnisn to display partial ISN (defined 12 char)

    def fnisn$(q$)=q$(7)

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
