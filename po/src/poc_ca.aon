rem --- Create Purchase Calendar
rem --- Program poc_ca v8.0.0 18Dec2007 (poc_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/18/2007 02:38:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    enter filename$,status

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps-01a",ids$[1]=""
    files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
    files$[3]="pom-01",ids$[3]="POM_CALENDAR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01a_dev=channels[1]
    ivs01a_dev=channels[2]
    pom01_dev=channels[3]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2],pom01a$:templates$[3]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open/Lock Files

    files=2
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]=filename$
    call pgmdir$+"adc_fileopen.aon",1,1,2,files$[all],options$[all],channels[all],batch,status
    if status then goto std_exit
    sys01_dev=channels[1]
    pom01_dev=channels[2]

rem --- Parameters

    find record (sys01_dev,key="T"+fid(0),dom=std_exit) sys01t$
    firm_id$=sys01t.firm_id$

rem --- Init Data

    r0$=sysinfo.system_date$
    r0=12,r8$="312831303130313130313031"
    r9$="SunMonTueWedThuFriSat"
    status=0
    more=1

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status then goto std_exit

rem --- Position file

    read (pom01_dev,key=firm_id$,dom=*next)

rem --- Retrieve last date scheduled

    while more

        i0=0
        call pgmdir$+"poc_ce.bbx",pom01_dev,firm_id$,begdate$,enddate$,status
        x$="None"
        if enddate$<>"" 
            call pgmdir$+"adc_daydates.aon",enddate$,r0$,1
            x$=fndate$(enddate$)
        else
            call pgmdir$+"syc_df.bbx",0,3000,my_context,status
            gosub display_fields
        endif

        break

    first_day_sch: rem --- 1st Day To Schedule

        v4$="Enter The Beginning Date For Scheduling"
        v0$="D"
        v1$="CKR",v2$=r0$,v3$="",v0=3,v1=40,v2=4,control_id=3001

        on v3 goto label1,First_Day_Sch,First_Day_Sch,First_Day_Sch,std_exit,label1,std_exit

    label1:

        r0$=v$
        break

    no_of_weeks: rem --- Number of Weeks

        while more

            v4$="Enter Number Of Weeks To Schedule Ahead"
            v0$="N"
            v1$="KEC",v2$=str(r0),v3$="##0",v0=3,v1=40,v2=5,control_id=3002

            on v3 goto label2,no_of_weeks,flow_control,no_of_weeks,flow_control,label2,flow_control

        label2:

            if v>0 then break

        wend

        r0=v
        break

    days_to_omit: rem --- Days to Omit

        v4$="Enter Days To Omit As Work Days (1=Sun/2=Mon/3=Tue/4=Wed/5=Thu/6=Fri/7=Sat)"
        v0$="S"
        v1$="KEC",v2$=r1$,v3$="",v0=7,v1=40,v2=6,r2$="",r3$="",control_id=3003

        on v3 goto label3,days_to_omit,flow_control,days_to_omit,std_exit,label3,std_exit

    label3:

        v$=cvs(v$,2)
        if v$<>"" 
            for x=1 to len(v$)
                if pos(v$(x,1)="1234567")=0 then exitto days_to_omit
                v=num(v$(x,1))
                r2$=r2$+r9$((v-1)*3+1,3)+" ",r3$=r3$+r9$((v-1)*3+1,3)
            next x
            for x=1 to 7
                if pos(str(x:"0")=v$,1,2) then exitto days_to_omit
            next x

        endif

        r2$=cvs(r2$,2)
        r1$=v$
        call pgmdir$+"syc_rs.bbx","",my_context,3003,v$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13003,r2$,0,"",status

        break

    wend

flow_control:

    while more

        switch v3
        case 0
        case 1
        case 3; let i0=i0+1; break
        case 2; if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1) fi; break
        case 4; let i0=i0_done; break
        case default; exitto done_v3
        swend
        on i0 goto flow_control,First_Day_Sch,no_of_weeks,days_to_omit,done,done

    done: rem --- Correct?

        if validate
            v0$="S"
            v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1

        done_v3:

            on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done

        done_test:

            action=pos(v$="YN")
            switch action

                case 1

                    validate_input:

                        validate=1
                        old_control_id=0
                
                case 2

                    do_nonkey1:

                        v3=0
                        i0=i0_nonkey1-1
                        break

                case default
                    break
            swend

        else

            let validate=0
            break

        fi

    wend

end_input:

    gosub display_fields
    call pgmdir$+"adc_progress.aon","NC","","","","",0,0,1,meter_num,status
    x$=fnyy_yy21$(fndate$(fndate$(r0$)))
    old_date$=x$
    
    gosub get_exist_rec
    for x=1 to r0
        for y=1 to 7
            call pgmdir$+"adc_dayweek.aon",sys01t.record_id_t$+sys01t.terminal_id$,x0$,x0
            if x$(1,4)<>old_date$(1,4) then gosub write_record
            if pos(x0$=r3$,3)>0 then 
                let a1$(num(x$(5,2)),1)="C"
            else            
                a1$(num(x$(5,2)),1)="W"
            fi

            x9$=sys01t.record_id_t$+sys01t.terminal_id$
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            x0$=""
            call pgmdir$+"adc_daydates.aon",x$,x0$,1
            x$=x0$    
        next y
    next x
    gosub write_record
    goto std_exit

display_fields:

    control_id=3000
    cid_cnt=0

    while more

        if cid_cnt=0 then if cvs(enddate$,2)="" then let disp_inp$=enddate$,disp_desc$="None" else let disp_inp$=fndate$(enddate$),disp_desc$=""
        if cid_cnt=1 then if r0$="" then let disp_inp$=r0$,disp_desc$="" else let disp_inp$=fndate$(r0$),disp_desc$=""
        if cid_cnt=2 then let disp_inp$=str(r0:"##0"),disp_desc$=""
        if cid_cnt=3 then let disp_inp$=r1$,disp_desc$=r2$
        call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
        cid_cnt=cid_cnt+1; let control_id=control_id+1
        if cid_cnt>i0_done-1 then break

    wend

    disp_inp$=""
    disp_desc$=""
    return

write_record: rem ---  Write Record

    pom01a.firm_id$=firm_id$
    pom01a.year$=old_date$(1,2)
    pom01a.month$=old_date$(3,2)

    if x9$(3,2)<>"02" then
        let a0=num(r8$((num(x9$(3,2))-1)*2+1,2))
    else
        call pgmdir$+"adc_dayweek.aon",x9$(1,2)+"0229",x0$,x0
        if x0<>0 then let a0=29 else let a0=28
    fi

    write record (pom01_dev,key=pom01a.firm_id$+pom01a.year$+pom01a.month$) pom01a$
    old_date$=x$
    gosub get_exist_rec
    return

get_exist_rec: rem --- Get existing record
    
    pom01a.firm_id$=firm_id$
    pom01a.year$=x$(1,2)
    pom01a.month$=x$(3,2)

    pom01a.day_status_01$=""
    pom01a.day_status_02$=""
    pom01a.day_status_03$=""
    pom01a.day_status_04$=""
    pom01a.day_status_05$=""
    pom01a.day_status_06$=""
    pom01a.day_status_07$=""
    pom01a.day_status_08$=""
    pom01a.day_status_09$=""
    pom01a.day_status_10$=""
    pom01a.day_status_11$=""
    pom01a.day_status_12$=""
    pom01a.day_status_13$=""   
    pom01a.day_status_14$=""
    pom01a.day_status_15$=""
    pom01a.day_status_16$=""
    pom01a.day_status_17$=""
    pom01a.day_status_18$=""
    pom01a.day_status_19$=""
    pom01a.day_status_20$=""
    pom01a.day_status_21$=""
    pom01a.day_status_22$=""
    pom01a.day_status_23$=""
    pom01a.day_status_24$=""
    pom01a.day_status_25$=""
    pom01a.day_status_26$=""
    pom01a.day_status_27$=""
    pom01a.day_status_28$=""
    pom01a.day_status_29$=""
    pom01a.day_status_30$=""
    pom01a.day_status_31$=""
    find record (pom01_dev,key=pom01a.firm_id$+pom01a.year$+pom01a.month$,dom=*next) pom01a$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend    
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    exit
rem #endinclude std_exit.src

    end
