rem --- Purchase Order Receipt Register (Receipts By Sales Order Overlay)
rem --- Program por_recptreg_o2 v8.0.0 11Jun2009 (por_dc)
rem --- Created by adx_codeport.bbj v1.1.5 (06/11/2009 11:37:28)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Document initializations
    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- set rd_alias_id$
    
    rd_alias_id$=pgm(-2)
    rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
    rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    
rem --- Initializations

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,0

    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",m0$,0,vendlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",customask$,0,custlen


    precision i[1]
    dim description$(40),b0$(8),b1$(30),l0$(52),l1$(64),l[17],z0$(75)
    HdrVect!.addItem(Translate!.getTranslation("AON_RECEIPTS_BY_CUSTOMER_SALES_ORDER"))
    BrkVect!.addItem(str(OutVect!.size()))    

l600: rem --- Report initializations and print positions

    if m+m1+m2+m3<94 goto l650
    maxm1=maxm1-1
    maxm2=maxm2-1
    maxm3=maxm3-1
    call pgmdir$+"adc_sizemask.aon",m1$,m1,11,maxm1
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,maxm2
    call pgmdir$+"adc_sizemask.aon",m3$,m3,6,maxm3
    goto l600
l650:

rem --- Headings and print positions

    columns = 11
    dim columns$[columns,10]
    columns$[0,0]=Translate!.getTranslation("AON_SALES_ORDER"), columns$[0,1]="C", columns$[0,2]="8"
    columns$[1,0]=Translate!.getTranslation("AON_ITEM"), columns$[1,1]="C", columns$[1,2]="3"
    columns$[2,0]="UM", columns$[2,1]="C",columns$[2,2]="3"
    columns$[3,0]=Translate!.getTranslation("AON_ORDER")+"^"+Translate!.getTranslation("AON_QUANTITY"), columns$[3,1]="C",columns$[3,2]="10", columns$[3,5]="R^R"
    columns$[4,0]=Translate!.getTranslation("AON_QUANTITY")+"^"+Translate!.getTranslation("AON_RECEIVED"), columns$[4,1]="C",columns$[4,2]="10", columns$[4,5]="R^R"
    columns$[5,0]=Translate!.getTranslation("AON_UNIT")+"^"+Translate!.getTranslation("AON_COST"), columns$[5,1]="C",columns$[5,2]="10", columns$[5,5]="R^R"
    columns$[6,0]=Translate!.getTranslation("AON_EXTENSION"), columns$[6,1]="C", columns$[6,2]=str(len(m2$)), columns$[6,5]="R", columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_VENDOR"), columns$[7,1]="C", columns$[7,2]=str(len(m2$))
    columns$[8,0]=Translate!.getTranslation("AON_REC_#"), columns$[8,1]="C", columns$[8,2]=str(len(m3$))
    columns$[9,0]=Translate!.getTranslation("AON_PO_NUMBER"), columns$[9,1]="C", columns$[9,2]=str(len(m1$))
    columns$[10,0]=Translate!.getTranslation("AON_REC'D")+"^"+Translate!.getTranslation("AON_COMP?"), columns$[10,1]="C", columns$[10,2]="10"
    columns$[11,0]=Translate!.getTranslation("AON_DATE")+"^"+Translate!.getTranslation("AON_RECEIVED"), columns$[11,1]="C", columns$[11,2]=str(len(m1$))

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Initializations for Sales Order Report

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,0

    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",m0$,0,vendlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",customask$,0,custlen


    if op$<>"Y" goto l4900
    HdrVect!.addItem(Translate!.getTranslation("AON_RECEIPTS_BY_CUSTOMER_SALES_ORDER"))
    BrkVect!.addItem(str(OutVect!.size()))        

    number=0
    t=6
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    done=0
    number=0
    maxm1=15
    maxm2=12
    maxm3=12
    l=l9+1
    subhead$=""
    t0$=""
    t1$=""

l2600: rem --- Print positions

    if m+m1+(m2*2)+m3<94 goto l2650
    maxm1=maxm1-1
    maxm2=maxm2-1
    maxm3=maxm3-1
    call pgmdir$+"adc_sizemask.aon",m1$,m1,11,maxm1
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,maxm2
    call pgmdir$+"adc_sizemask.aon",m3$,m3,6,maxm3
    goto l2600
l2650:

rem --- Position files

    read (pow09_dev,key=firm_id$,dom=*next)

    while 1
        read record(pow09_dev,end=*break)pow09a$
        if pos(firm_id$=pow09a$)<>1 break

rem --- Level breaks?

        if t0$<>pow09a.warehouse_id$
            warehouse_id$=pow09a.warehouse_id$
            customer_id$=pow09a.customer_id$
            gosub l6000
        endif
        if t1$<>pow09a.customer_id$
            customer_id$=pow09a.customer_id$
            gosub l6200
        endif
        if subhead$<>"" gosub l5400
        if customer$="" goto l3200

        xvf=fnblank(12)

        OutVect!.addItem(customer$)
        xvf=fnblank(11)
        l=l+2
        customer$=""

l3200: rem --- Read receipt header and detail

        dim poe04a$:fattr(poe04a$)
        dim poe14a$:fattr(poe14a$)

        poe04a.firm_id$=firm_id$
        poe04a.receiver_no$=pow09a.receiver_no$

        poe14a.firm_id$=firm_id$
        poe14a.receiver_no$=pow09a.receiver_no$
        poe14a.internal_seq_no$=pow09a.po_int_seq_ref$

        gosub l6400
        if status continue

rem --- Retrieve order line item

        ope11a.firm_id$=firm_id$
        ope11a.customer_id$=pow09a.customer_id$
        ope11a.order_no$=pow09a.order_no$
        ope11a.internal_seq_no$=pow09a.so_int_seq_ref$
        find record (ope11_dev,key=ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.internal_seq_no$,dom=*continue) ope11a$

rem --- Calculate extensions and branch based on line type

        if poe14a.conv_factor=0 poe14a.conv_factor=1
        cost=poe14a.unit_cost/poe14a.conv_factor
        qty=poe14a.qty_received*poe14a.conv_factor
        precision 2
        po_extension=qty*cost
        precision i[1]

rem --- Print detail line

        OutVect!.addItem(poe04a.order_no$);rem +"-"+poe14a.so_int_seq_ref$)
        OutVect!.addItem(poe14a.item_id$)
        OutVect!.addItem(um$)
        OutVect!.addItem(str(ope11a.qty_ordered:m2$)+$00$+"R")
        OutVect!.addItem(str(qty:m2$)+$00$+"R")
        OutVect!.addItem(str(cost:m3$)+$00$+"R")
        OutVect!.addItem(str(po_extension:m1$)+$00$+"R")
        OutVect!.addItem(fnmask$(poe04a.vendor_id$(1,vendlen),m0$))
        OutVect!.addItem(poe04a.receiver_no$)
        OutVect!.addItem(poe14a.po_no$)
rem jpb        OutVect!.addItem(drop$)
        OutVect!.addItem(complete$)
        OutVect!.addItem(fndate$(poe04a.recpt_date$))
    
        xvf=fnblank(1)
        OutVect!.addItem(description$)
        xvf=fnblank(10)
        l=l+2

rem --- Accumulate totals

        customer=customer+po_extension
        whse=whse+po_extension
        report=report+po_extension
        l=l+2
        number=number+1

    wend

rem --- All done

    done=1
    if number<>0
        gosub l6000
        totals$=Translate!.getTranslation("AON_TOTAL_FOR_REGISTER")
        totals[all]=report[all]
        gosub l6900
    endif

l4900: rem --- Run next overlay

    next_overlay$="por_recptreg_o3.aon"
    goto std_exit

l5400: rem --- Subheading

    xvf=fnblank(12)

    OutVect!.addItem(subhead$)
    xvf=fnblank(11)
    
    xvf=fnblank(12)
    l=l+3
    subhead$=""
    return

l6000: rem --- Warehouse break

    if t0$="" goto l6100
    gosub l6200
    totals$=Translate!.getTranslation("AON_TOTAL_FOR_WAREHOUSE_")+cvs(whse$,2)
    total=whse
    gosub l6900
l6100:
    if done goto l6190
    dim whse[1]
    t0$=warehouse_id$
    find record (ivm10_dev,key=firm_id$+"C"+warehouse_id$,dom=*next) ivm10c$
    whse$=ivm10c.warehouse_id$+" "+ivm10c.short_name$
    subhead$=Translate!.getTranslation("AON_WAREHOUSE_")+cvs(whse$,3)
l6190:
    return

l6200: rem --- Customer break
    if t1$="" goto l6300
    let totals$=Translate!.getTranslation("AON_TOTAL_FOR_")+fnmask$(t1$(1,custlen),customask$)+" "+cvs(arm01a.customer_name$,3)
    let total=customer
    gosub l6900
l6300:
    if done goto l6390
    dim arm01a$:fattr(arm01a$)
    arm01a.firm_id$=firm_id$
    arm01a.customer_id$=customer_id$
    t1$=customer_id$
    customer=0
    find record (arm01_dev,key=arm01a.firm_id$+arm01a.customer_id$,dom=*next) arm01a$
    customer$=Translate!.getTranslation("AON_CUSTOMER_")+fnmask$(arm01a.customer_id$(1,custlen),customask$)+" "+arm01a.customer_name$
l6390:
    return

l6400: rem --- Read receipt header and detail

    status=11
    find record (poe04_dev,key=poe04a.firm_id$+poe04a.receiver_no$,knum="PRIMARY",dom=l6690) poe04a$
    find record (poe14_dev,key=poe14a.firm_id$+poe14a.receiver_no$+poe14a.internal_seq_no$,knum="PRIMARY",dom=l6690) poe14a$
    if pom02a.firm_id$+pom02a.po_line_code$<>firm_id$+poe14a.po_line_code$
        dim pom02a$:fattr(pom02a$)
        pom02a.firm_id$=firm_id$
        pom02a.po_line_code$=poe14a.po_line_code$
        find record (pom02_dev,key=pom02a.firm_id$+pom02a.po_line_code$,dom=l6690) pom02a$
    endif
    
rem --- Retrieve inventory item and warehouse

    dim ivm01a$:fattr(ivm01a$)
    dim ivm02a$:fattr(ivm02a$)

    ivm01a.firm_id$=firm_id$
    ivm01a.item_id$=poe14a.item_id$
    description$(1)=poe14a.order_memo$
    ivm02a.firm_id$=firm_id$
    ivm02a.warehouse_id$=poe14a.warehouse_id$
    ivm02a.item_id$=poe14a.item_id$
    if pom02a.line_type$="S"
        find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=l6690) ivm01a$
        find record (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=l6690) ivm02a$
        description$(1)=fnitem$(ivm01a.item_desc$,i[3],i[4],i[5])
    endif

rem --- Format detail line fields

    let x=poe14a.qty_ordered-poe14a.qty_prev_rec-poe14a.qty_received,complete$=Translate!.getTranslation("AON_NO"),dropship$=Translate!.getTranslation("AON_NO"),status=0
    if poe04a.rec_complete$="Y" complete$=Translate!.getTranslation("AON_YES")
    if x<=0 complete$=Translate!.getTranslation("AON_YES")
    if pom02a.line_type$="S" issues=issues+1
    if pom02a.line_type$="N" subcontracts=subcontracts+1
    if pom02a.dropship$="Y" dropship$=Translate!.getTranslation("AON_YES")
l6690:
    return

    rem --- Print totals
l6900:
	TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xvf=fnblank(1)
    OutVect!.addItem(totals$)
    xvf=fnblank(4)
    OutVect!.addItem(str(total:m1$)+$00$+"R")
    xvf=fnblank(5)
    let l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fnisn$(q$)=q$(7)

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    out_action$="FORMAT"
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
