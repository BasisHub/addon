rem --- Purchase Order History By Item Report
rem --- Program por_histbyitem_o1 v8.0.0 17Jul2007 (por_qb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:50:44)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Inits

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECHDR","PRIMARY",pot04a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POT_RECDET","ITEM_WHSE",pot14a_key_itemtpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    headings=8
    dim headings$[headings],o[13]
    width=132
    page=0
    l9=59
    l=l9+1
    more=1
    recs=0
    total_recs=0
    gosub initheads

    dim columns$[9,10]
    columns=9
    columns$[0,0]=Translate!.getTranslation("AON_ITEM"),                  columns$[0,1]="C",columns$[0,2]="7"
    columns$[1,0]=Translate!.getTranslation("AON_W/H_VENDOR"),            columns$[1,1]="C",columns$[1,2]="40"
    columns$[2,0]=Translate!.getTranslation("AON_PO^NUMBER"),             columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_DATE^REQUIRED"),         columns$[3,1]="C",columns$[3,2]="10"
    columns$[4,0]=Translate!.getTranslation("AON_DATE^RECEIVED"),         columns$[4,1]="C",columns$[4,2]="10"
    columns$[5,0]="UM",                    columns$[5,1]="C",columns$[5,2]="5"
    columns$[6,0]=Translate!.getTranslation("AON_QUANTITY^ORDERED"),      columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$,columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_QUANTITY^RECEIVED"),     columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$,columns$[7,10]="T"
    columns$[8,0]=Translate!.getTranslation("AON_UNIT^COST"),             columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m3$,columns$[8,10]=""
    columns$[9,0]=Translate!.getTranslation("AON_EXTENSION"),             columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"

rem --- Position files

    call pgmdir$+"adc_progress.aon","N","POT_RECDET","","","",0,pot14a_dev,1,meter_num,status
    if status = 999 then goto std_exit

    first$=firm_id$+begitem$
    if begitem$<>"" first$=first$+begwhse$

    dim pot24a_key$:pot14a_key_itemtpl$
    read (pot14_dev2,knum="ITEM_WHSE",key=first$,dom=*next)

rem --- Get next sort record

    while more
        pot24a_key$=key(pot14_dev2,knum="ITEM_WHSE",end=*break)
        item$=pot24a_key.item_id$
        whse$=pot24a_key.warehouse_id$
        ponum$=pot24a_key.po_no$
        receiver$=pot24a_key.receiver_no$
        linenum$=pot24a_key.po_int_seq_ref$
        product$=""
        dim pot04a$:fattr(pot04a$)
        read record (pot04a_dev,key=firm_id$+ponum$+receiver$,dom=*next)pot04a$
        vendor$=pot04a.vendor_id$
        find record (ivm01a_dev,key=firm_id$+item$,dom=brnch1) ivm01a$
        product$=ivm01a.product_type$

    brnch1: rem --- Valid Item/Wh/Product/Type?

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

        if pot24a_key.firm_id$<>firm_id$ break
        if enditem$<>"" if item$>enditem$ break
        if begwhse$<>"" if whse$<begwhse$ goto this_item_first_whse
        if endwhse$<>"" if whse$>endwhse$ goto next_item

        read (pot14_dev2,key=pot24a_key$)                
        if begprod$<>"" if product$<begprod$ continue
        if endprod$<>"" if product$>endprod$ continue
        if type$<>"" if ivm01a.item_type$<>type$ continue
        goto breaks

    this_item_first_whse: rem --- Skip to beginning whse for this item

        read (pot14_dev2,key=firm_id$+pot24a_key.item_id$+begwhse$,knum="ITEM_WHSE",dom=*continue)
        continue

    next_item: rem --- Skip to next item

        read (pot14_dev2,key=firm_id$+pot24a_key.item_id$+$FF$,knum="ITEM_WHSE",dom=*continue)
        continue

    breaks: rem --- Breaks?

        if vendor$<>lastvend$ gosub vendbreak
        if item$<>lastitem$ gosub itembreak

    rem --- Retrieve history detail

        pot14a_key$=firm_id$+ponum$+receiver$+linenum$
        find record (pot14a_dev,key=pot14a_key$,dom=*continue) pot14a$
        required$=pot14a.reqd_date$
        unitmeas$=pot14a.unit_measure$
        qtyord=pot14a.qty_ordered
        qtyrec=pot14a.qty_received
        unitcost=pot14a.unit_cost
        extension=qtyrec*unitcost

    rem --- Print detail line

    rem needed=1
    rem if h9$<>"" then needed=2
    rem if l+needed>l9 then gosub report_heading

        if h9$<>"" then gosub item_subheading
        OutVect!.addItem("")
        OutVect!.addItem(whse$+"   "+fnmask$(vendor$(1,vendlen),vendomask$)+"  "+vendname$)
        OutVect!.addItem(ponum$)

        if required$<>fill(8) 
            OutVect!.addItem(fndate$(required$))
        else
            OutVect!.addItem("")
        endif

        if recptdate$<>fill(8) 
            OutVect!.addItem(fndate$(recptdate$))
        else
            OutVect!.addItem("")
        endif    

        OutVect!.addItem(unitmeas$)
        OutVect!.addItem(str(qtyord:m2$))
        OutVect!.addItem(str(qtyrec:m2$))
        OutVect!.addItem(str(unitcost:m3$))
        OutVect!.addItem(str(extension:m1$))

        l=l+1
        recs=recs+1

    rem --- Accumulate totals

        itemtot[2]=itemtot[2]+qtyrec
        itemtot[3]=itemtot[3]+unitcost
        itemtot[4]=itemtot[4]+extension
        reporttot[2]=reporttot[2]+qtyrec
        reporttot[3]=reporttot[3]+unitcost
        reporttot[4]=reporttot[4]+extension

        if pos(pot14a.po_no$+pot14a.po_line_no$=totaledpo$,10)=0 then
            totaledpo$=totaledpo$+pot14a.po_no$+pot14a.po_line_no$
            itemtot[1]=itemtot[1]+qtyord,reporttot[1]=reporttot[1]+qtyord
        endif

    rem --- Loop back for next record

    wend

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub itembreak
    total$=Translate!.getTranslation("AON_REPORT")

    for cnt=1 to 4
        total[cnt]=reporttot[cnt]
    next cnt

    gosub printtot

    goto std_exit

item_subheading: rem --- Item subheading

rem if l+1>l9 then gosub report_heading

    OutVect!.addItem(h9$)
    OutVect!.addItem(h8$)
    qwk=fnblank(8)
    l=l+1
    h9$=""
    h8$=""

    return

initheads: rem --- Initialize HEADINGS$[]

    dim h1$(width),h2$(width),h3$(width),h5$(width),h6$(width),headings$[headings+1]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    if begitem$="" headings$[2]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[2]=Translate!.getTranslation("AON_FROM_ITEM:_")+cvs(begitem$,2)
    if enditem$="" headings$[2]=headings$[2]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[2]=headings$[2]+Translate!.getTranslation("AON__--_TO_ITEM:_")+cvs(enditem$,2)
    if begprod$="" headings$[3]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    if begwhse$="" headings$[4]=Translate!.getTranslation("AON_FROM_WAREHOUSE:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_WAREHOUSE:_")+begwhse$
    if endwhse$="" headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_WAREHOUSE:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_WAREHOUSE:_")+endwhse$
    if type$   ="" headings$[5]=Translate!.getTranslation("AON_ALL_ITEM_TYPES") else headings$[5]=Translate!.getTranslation("AON_ITEM_TYPE:_")+type$

    return

itembreak: rem --- Item Break

    if lastitem$<>""
        gosub vendbreak
        total$=Translate!.getTranslation("AON_ITEM_")+lastitem$

        for cnt=1 to 4
            total[cnt]=itemtot[cnt]
        next cnt

        gosub printtot
    endif

    if done then
        return
    endif

    dim itemtot[4]
    lastitem$=item$

    dim ivm01a$:fattr(ivm01a$)
    ivm01a.item_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm01a_dev,key=firm_id$+lastitem$,dom=*next) ivm01a$
    h9$=lastitem$
    h8$=ivm01a.item_desc$
    totaledpo$=""

    return

vendbreak: rem --- Vendor break

    dim vendname$(30)
    let lastvend$=vendor$,apm01a.vendor_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (apm01a_dev,key=firm_id$+lastvend$,dom=*next) apm01a$
    let vendname$=apm01a.vendor_name$(1,vendnamelen)

    return

printtot: rem --- Print total line

    total$=Translate!.getTranslation("AON_TOTAL_FOR_")+cvs(total$,2)
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    qwk=fnblank(1)  
    OutVect!.addItem(total$)
    qwk=fnblank(4)
    OutVect!.addItem(str(total[1]:m2$))
    OutVect!.addItem(str(total[2]:m2$))
    OutVect!.addItem("")
    OutVect!.addItem(str(total[4]:m1$))
    qwk=fnblank(10)

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,pot14a_dev,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
