rem --- Generate PO Receipt General Ledger Postings
rem --- Program poc_ga v8.0.0 19Dec2007 (poc_ga)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/19/2007 10:57:28)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    seterr std_error
    setesc std_error
    enter channels[all],w$[all],w[all],params$[all],params[all],status

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=8,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="arc_distcode",ids$[2]="ARC_DISTCODE"
    files$[3]="glm-01",ids$[3]="GLM_ACCT"
    files$[4]="glt-04",ids$[4]="GLE_DAILYDETAIL"
    files$[5]="glt-14",ids$[5]="GLX_DAILYXRF"
    files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
    files$[7]="sfe-01",ids$[7]="SFE_WOMASTR"
    files$[8]="sfm-10",ids$[8]="SFC_WOTYPECD"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01a_dev=channels[1]
    arm10_dev=channels[2]
    glm01_dev=channels[3]
    glt04_dev=channels[4]
    glt14_dev=channels[5]
    ivs01a_dev=channels[6]
    sfe01_dev=channels[7]
    sfm10_dev=channels[8]

rem --- Dimension string templates

    dim aps01a$:templates$[1],arm10a$:templates$[2],glm01a$:templates$[3],
:       glt04a$:templates$[4],glt14a$:templates$[5],ivs01a$:templates$[6],
:       sfe01a$:templates$[7],sfm10a$:templates$[8]


rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    dim g[4],i[1]
    arm10_dev=channels[1]
    sfe01_dev=channels[2],sfm10_dev=channels[3]
    glm01_dev=channels[4]
    glt04_dev=channels[5],glt14_dev=channels[6]
    w0$=w$[0]
    w1$=w$[1],w2$=w$[2],w3$=w$[3],w4$=w$[4]
    gl$=params$[0]
    when$=params$[1],vendor$=params$[2],mask$=params$[3]
    g4$=params$[4]
    description$=params$[5],y1$=params$[6]
    ivaccts$=params$[7]
    distcode$=params$[8],code$=params$[9]
    firm_id$=params$[10]
    sf$=params$[11],iv_extension=params[3]
    extension=params[0]
    g[4]=params[1],i[0]=params[2],method$=params$[12]

rem --- Initializations

    dim s[11]
    memo$=w3$(3,i[0])
    ref1$=fnmask$(vendor$,m0$),invamount=extension

rem --- Branch based on line code

  
    action = pos(y1$(21,1)="SNVMO")

    switch action
    case 1
        accnt_numbers: rem --- Account numbers for Standard Lines
            ivacct$=ivaccts$(1,g[4])
            poacct$=ivaccts$(21,g[4])
            ppvacct$=ivaccts$(31,g[4])
            memo$=memo$+" "+description$
            ref2$="PO "+w0$(16,7)
            ref3$="Line "+w0$(23,3)
            if method$="S"
                invamount=iv_extension
                ppvamount=extension-iv_extension
            endif

        retrieve_distribution: rem --- Retrieve distribution code record

            if distcode$<>"Y" then break
        
            arm10d.firm_id$      = firm_id$
            arm10d.record_id_id$ = "D"
            arm10d.ar_dist_code$ = code$

            find record (arm10_dev,key=(arm10d.firm_id$+arm10d.record_id_id$+arm10d.ar_dist_code$),dom=*next) arm10d$
            ivacct$=arm10d.gl_inv_acct$
            poacct$=arm10d.gl_purc_acct$
            ppvacct$=arm10d.gl_ppv_acct$
            params$[7](1,10)=ivacct$

            break
    case 2
        accnt_nonstock: rem --- Account numbers for Non-Stock

            if sf$="Y" then 
                if cvs(w2$(1,7),2)<>"" then 
                    memo$=memo$+" "+w4$
                    ref2$=w0$(16,7)+w0$(23,3),ref3$="WO "+w2$(1,7)

rem --- Get WIP/Purchases account for work order receipts

                    sfe01a.firm_id$ = firm_id$
                    sfe01a.wo_location$ = "  "
                    sfe01a.wo_no$ = w2$(1,7)

                    find record (sfe01_dev,key=(sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$),dom=*next) sfe01a$
                   
                    sfm10a.firm_id$     = firm_id$
                    sfm10a.record_id_a$ = "A"
                    sfm10a.wo_type$     = sfe01a.wo_type$


                    find record (sfm10_dev,key=(sfm10a.firm_id$+sfm10a.record_id_a$+sfm10a.wo_type$),dom=*next) sfm10a$
                    ivacct$=sfm10a.gil_wip_acct$
                    poacct$=sfm10a.gil_pur_acct$
                    break
                endif

            endif    

    case default

            status=0
            goto std_exit
    swend

rem --- Generate GL Recap Postings

    account$=ivacct$
    amount=invamount,units=0
    if g4$(3,1)="Y" then let units=w[7]
    gosub glpost
    account$=poacct$
    amount=-extension,units=-units
    gosub glpost

rem --- Generate Purchase Price Variance posting for standard costing

    if method$="S" then 
        if ppvamount<>0 then 
            account$=ppvacct$
            amount=ppvamount,units=-units
            gosub glpost
        endif    
    endif

done: rem --- All done

    status=0
    goto std_exit

glpost: rem --- Standard G/L Posting Routine

    if gl$="Y" then 
        call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,glt14_dev,account$,when$,ref1$,ref2$,ref3$,memo$,amount,units,status
    endif

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
