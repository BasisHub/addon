rem --- Standard Message Listing
rem --- Program pom_db v8.0.0 17Dec2007 (pom_db)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/17/2007 05:24:38)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+sysinfo",err=*next)
    milestone=num(stbl("+milestone",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
    files$[3]="pom-04",ids$[3]="POC_MSGCODE"
    files$[4]="pom-14",ids$[4]="POC_MSGLINE"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01a_dev=channels[1]
    ivs01a_dev=channels[2]
    pom04_dev=channels[3]
    pom14_dev=channels[4]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ivs01a$:templates$[2],pom04a$:templates$[3],
:       pom14a$:templates$[4]


rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open/Lock Files

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Initialize Data

    dim headings$[2]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" Listing",clock$="",l9=59
    when$=sysinfo.system_date$
    l=l9+1,width=80,page=0,number=0

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",pom04_dev,0,1,meter_num,status

rem --- Position file

    read (pom04_dev,key=firm_id$,dom=*next)

rem --- Main Read
 
   
    while more

        read record (pom04_dev,end=done) pom04a$
        if pos(firm_id$=pom04a$(1,5))<>1 then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- What type?

        continued$=""
        type$="Both",number=number+1

        if pom04a.message_type$ = "P" then let type$="PO"
        if pom04a.message_type$ = "R" then let type$="Req"
        if pom04a.message_type$ = "N" then let type$="None"

rem --- Print subheading

        gosub code_subheading

rem --- Position detail file

        read (pom14_dev,key=pom04a.firm_id$ + pom04a.po_msg_code$,dom=*next)

rem --- Read next detail

        while more

            read record (pom14_dev,end=*break) pom14a$
            if pos(pom04a$(1,5)=pom14a$(1,7))<>1 then break

rem --- New page?

            if l+1 >= l9 then 
                gosub report_heading
                gosub code_subheading
            endif

            print (printer_dev)@(4),pom14a.sequence_num$," ",pom14a.message_text$
            l=l+1
            continued$="(Continued)"

rem --- Loop back for next detail

         wend

rem --- Loop back for next header

    wend

done: rem --- All done

    if l>l9 then gosub report_heading
    print (printer_dev)""
    print (printer_dev)number," Standard Purchase Order Message(s)"
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+2
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],2,page,width,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)"Code   Description",@(76),"Type"
    return

code_subheading: rem --- Code subheading

    if l+4>l9 then gosub report_heading
    print (printer_dev)""
    print (printer_dev)pom04a.po_msg_code$,@(7),pom04a.code_desc$," ",continued$,@(76),type$

    print (printer_dev)""
    l=l+3
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run pgmdir$+"ads_process_end.aon",err=*next
    release

rem #endinclude std_end.src

    end
