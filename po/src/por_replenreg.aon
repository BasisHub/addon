rem --- rem Replenishment Report Program (Input Overlay)
rem --- Program por_replen.aon v8.0.0 06Jul2007 (por_fa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 12:35:00)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

	num_files=22,open_beg=1,open_end=num_files
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

		open_tables$[1]="APM_VENDMAST", open_opts$[1]="OTA"
	open_tables$[2]="ARM_CUSTMAST", open_opts$[2]="OTA"
	open_tables$[3]="APM_VENDADDR", open_opts$[3]="OTA"
	open_tables$[4]="APM_VENDREPL", open_opts$[4]="OTA"
	open_tables$[5]="IVM_ITEMMAST", open_opts$[5]="OTA"
	open_tables$[6]="IVC_PRODCODE", open_opts$[6]="OTA"
	open_tables$[7]="POE_REQHDR", open_opts$[7]="OTA"
	open_tables$[8]="POE_POHDR", open_opts$[8]="OTA"
	open_tables$[9]="POE_ORDHDR", open_opts$[9]="OTA"
	open_tables$[10]="POE_REPSEL", open_opts$[10]="OTA"
	open_tables$[11]="POE_REQDET", open_opts$[11]="OTA"
	open_tables$[12]="POE_ORDDET", open_opts$[12]="OTA"
	open_tables$[13]="POE_REPXREF", open_opts$[13]="OTA"
	open_tables$[14]="POE_REQPRINT", open_opts$[14]="OTA"
	open_tables$[15]="POE_ORDTOT", open_opts$[15]="OTA"
	open_tables$[16]="POE_REPSURP", open_opts$[16]="OTA"
	open_tables$[17]="POC_LINECODE", open_opts$[17]="OTA"
	open_tables$[18]="APS_PARAMS", open_opts$[18]="OTA"
	open_tables$[20]="IVS_PARAMS", open_opts$[20]="OTA"
	open_tables$[21]="IVS_ABCPARAM", open_opts$[21]="OTA"
	open_tables$[22]="IVC_BUYCODE", open_opts$[22]="OTA"

		gosub open_tables

	apm_vendmast_dev=num(open_chans$[1])
	arm_custmast_dev=num(open_chans$[2])
	apm_vendaddr_dev=num(open_chans$[3])
	apm_vendrepl_dev=num(open_chans$[4])
	ivm_itemmast_dev=num(open_chans$[5])
	ivc_prodcode_dev=num(open_chans$[6])
	poe_reqhdr_dev=num(open_chans$[7])
	poe_pohdr_dev=num(open_chans$[8])
	poe_ordhdr_dev=num(open_chans$[9])
	poe_repsel_dev=num(open_chans$[10])
	poe_reqdet_dev=num(open_chans$[11])
	poe_orddet_dev=num(open_chans$[12])
	poe_repxref_dev=num(open_chans$[13])
	poe_reqprint_dev=num(open_chans$[14])
	poe_ordtot_dev=num(open_chans$[15])
	poe_repsurp_dev=num(open_chans$[16])
	poc_linecode_dev=num(open_chans$[17])
	aps_params_dev=num(open_chans$[18])
	ivs_params_dev=num(open_chans$[20])
	ivs_abcparam_dev=num(open_chans$[21])
	ivc_buycode_dev=num(open_chans$[22])

	dim apm_vendmast$:open_tpls$[1]
	dim arm_custmast$:open_tpls$[2]
	dim apm_vendaddr$:open_tpls$[3]
	dim apm_vendrepl$:open_tpls$[4]
	dim ivm_itemmast$:open_tpls$[5]
	dim ivc_prodcode$:open_tpls$[6]
	dim poe_reqhdr$:open_tpls$[7]
	dim poe_pohdr$:open_tpls$[8]
	dim poe_ordhdr$:open_tpls$[9]
	dim poe_repsel$:open_tpls$[10]
	dim poe_reqdet$:open_tpls$[11]
	dim poe_orddet$:open_tpls$[12]
	dim poe_repxref$:open_tpls$[13]
	dim poe_reqprint$:open_tpls$[14]
	dim poe_ordtot$:open_tpls$[15]
	dim poe_repsurp$:open_tpls$[16]
	dim poc_linecode$:open_tpls$[17]
	dim aps_params$:open_tpls$[18]
	dim ivs_params$:open_tpls$[20]
	dim ivs_abcparam$:open_tpls$[21]
	dim ivc_buycode$:open_tpls$[22]

rem --- Assign form input values to local variables

    includewhse$=option!.getOptionData("whse_detail")
    suggonly$=option!.getOptionData("sugg_itemsonly")

rem --- Retrieve parameter records

    find record (aps_params_dev,key=firm_id$+"AP00",err=std_missing_params) aps_params$
    find record (ivs_params_dev,key=firm_id$+"IV00",err=std_missing_params) ivs_params$
    find record (ivs_abcparam_dev,key=firm_id$+"IV02",err=std_missing_params) ivs_abcparam$

rem --- masks

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vendomask$,0,vendlen
    
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)

rem --- Parameters

	dim desclen[3]
    ivprecision=num(ivs_params.precision$)
    itemlen=ivs_params.item_id_len
    defaultwhse$=ivs_params.warehouse_id$
    curper$=ivs_params.current_per$
    curyr$=ivs_params.current_year$
    curper=num(curper$)
    curyr=num(curyr$)
    call pgmdir$+"adc_perioddates.aon",curper,curyr,begper$,endper$,table_chans$[all],status
    if status then goto std_exit

    desclen[1]=num(ivs_params.desc_len_01$)
    desclen[2]=num(ivs_params.desc_len_02$)
    desclen[3]=num(ivs_params.desc_len_03$)     

    precision ivprecision

rem --- Init Data

    dim dashes$(132,"-"),o[14],h[14],hsel[9]
    m6$="###0.00-";rem weight
    m9$="##0";rem lead time & cycle days
    phnmsk$="(###) ###-####"

    o[0]=132-(totmlen)
    o[1]=o[0]+4
    o[2]=o[1]+m2
    o[3]=o[2]+m2
    o[4]=o[3]+m2
    o[5]=o[4]+m9
    o[6]=o[5]+m2
    o[7]=o[6]+m2
    o[8]=o[7]+m2
    o[9]=o[8]+m2
    o[10]=o[9]+m2
    o[11]=o[10]+m2
    o[12]=o[11]+m3+1
    o[13]=o[12]+m2+1
    o[14]=o[13]+m6+1

rem --- Column headers

    h[0]=o[0]-1
    h[1]=o[1]+m2-8
    h[2]=o[2]+m2-8
    h[3]=o[3]+m2-7
    h[4]=o[4]+m9-3
    h[5]=o[5]+m2-6
    h[6]=o[6]+m2-6
    h[7]=o[7]+m2-7
    h[8]=o[8]+m2-6
    h[9]=o[9]+m2-5
    h[10]=o[10]+m2-6
    h[11]=o[11]+m3-6
    h[12]=o[12]+m2-10
    h[13]=o[13]+m6-7
    h[14]=o[14]+m1-9

rem --- Selections column headers

    hsel[0]=24
    hsel[1]=30
    hsel[2]=38
    hsel[3]=46
    hsel[4]=55
    hsel[5]=64
    hsel[6]=75
    hsel[7]=86
    hsel[8]=93
    hsel[9]=100

rem --- Run report overlay
    run pgmdir$+"por_replenreg_o1.aon"

    open_tables: rem --- Call open table routine	

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",		open_beg,		open_end,		open_tables$[all],		open_opts$[all],		open_chans$[all],		open_tpls$[all],		rd_table_chans$[all],		open_batch,		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
		status=912
		goto std_exit
	endif

	return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end