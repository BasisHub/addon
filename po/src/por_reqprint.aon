rem --- Print Purchase Order Requisition
rem --- Program por_reqprint.aon
rem --- Adapted from the original BBjForm-based version to use jasper

rem --- AddonSoftware
rem --- Copyright BASIS International Ltd.  All Rights Reserved.


    rem --- err= on enter because pgm can be run batch mode from menu, but can also be called
    rem --- on demand from w/in requisition entry
    enter single_vendor_id$,single_req_no$,rd_table_chans$[all],err=*next

    seterr end_instantiate
    use ::bbtranslator.bbj::BBTranslator
    declare BBTranslator Translate!
    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif

end_instantiate:

    seterr std_error
    setesc std_error

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

    use ::sys/prog/bao_option.bbj::Option
    use ::ado_rptControl.src::ReportControl
    use ::ado_func.src::func
    use ::sys/prog/bao_utilities.bbj::BarUtils

    declare BBJasperReport BBjReport!
    
    params! = new java.util.HashMap()
        
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 200; rem keep it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 100

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Set document Directory

    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=5
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)

rem --- Get logo to go on form; start w/ company logo, fall back to default logo from config if no company logo specified

    logo_filename$=""
    logo_filename$=func.getCompanyLogo()
    if logo_filename$=""
        logo_file$=stbl("+CUST_IMAGES",err=*next)+stbl("+FORM_LOGO",err=*next)
        if logo_file$<>""
            logo_filename$=BBjAPI().getFileSystem().resolvePath(logo_file$,err=*next)
        endif
    endif

rem --- Set Report Name & directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)   
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "PurchaseRequisitionHdr"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"
    masterBaseName$ = "PurchaseRequisitionMaster"
    master_filename$ = reportDir$ + masterBaseName$+".jasper"    

    declare BBJasperReport report!

rem --- Open files

	num_files=4
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="POE_REQPRINT",open_opts$[1]="OTA@"
	open_tables$[2]="IVS_PARAMS",open_opts$[2]="OTA@"
    open_tables$[3]="POS_PARAMS",open_opts$[3]="OTA@"
    open_tables$[4]="APS_REPORT",open_opts$[4]="OTA@"
    
    gosub open_tables

    poe_reqprint=num(open_chans$[1])
    ivs_params=num(open_chans$[2])
    pos_params=num(open_chans$[3])
    aps_report=num(open_chans$[4])

rem --- Dimension string templates

	dim poe_reqprint$:open_tpls$[1]
	dim ivs_params$:open_tpls$[2]
	dim pos_params$:open_tpls$[3]
	dim aps_report$:open_tpls$[4]

rem --- Retrieve parameter records

    ivs_params_key$=firm_id$+"IV00"
    find record (ivs_params,key=ivs_params_key$,err=std_missing_params) ivs_params$

    pos_params_key$=firm_id$+"PO00"
    find record (pos_params,key=pos_params_key$,err=std_missing_params) pos_params$
    
    find record (aps_report,key=firm_id$+"AP02",err=std_missing_params) aps_report$

	comp_addrLine_len = 30
    comp$=aps_report.addr_line_1$+aps_report.addr_line_2$+aps_report.city$+aps_report.state_code$+aps_report.zip_code$    
    call "adc_address.aon",comp$,24,3,9,comp_addrLine_len
    comp$=aps_report.name$+comp$

    call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(aps_report.phone_no$,2),"",phone_mask$
    comp_phone$=cvs(aps_report.phone_no$,2)
    comp_phone$=str(comp_phone$:phone_mask$,err=*next)

rem --- Assign form input values to local variables

    sequence$="N"
    pomessage$=""
    restart$="N"
    vendor_id$=""
    restart_vendor_id$=""
    single_vendor$=""
    master_document=0
 
    if len(single_vendor_id$)
        single_vendor$="Y"
        vendor_id$=single_vendor_id$
        req_no$=single_req_no$
        alias$="POE_REQPRINT_DMD"
        rptctl_alias$ = "POR_REQPRINT";rem --- use actual alias (i.e., POR_REQPRINT_DMD) when putting in doc archive so you know it was an on-demand req, but use POR_REQPRINT for report control so you don't need two report control records for each vendor to handle on-demand vs. batch.        

    else
        sequence$=option!.getOptionData("REPORT_TYPE")
        pomessage$=option!.getOptionData("MESSAGE_TEXT")
        restart$=option!.getOptionData("RESTART")
        restart_vendor_id$=option!.getOptionData("VENDOR_ID")
        alias$=option!.getAlias()
        rptctl_alias$ = alias$
        master_document=1
    endif

rem --- Initializations

    type$="R"
    let defaultmsg$=pos_params.po_req_msg_code$   

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,m3
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vend_mask$,0,vendlen

    ext_mask$ = m1$

	rem --- Make the 'Patterns' used to mask in iReports from Addon masks
	rem       examples:
	rem          ##0.00;##0.00-   Includes negatives with minus at the end
	rem          ##0.00;-##0.00   Includes negatives with minus at the front
	rem          ##0.00;##0.00    Positives only

	ext_mask_pattern$=fngetPattern$(ext_mask$)

    emailFax! = BBjAPI().makeVector()
    UpdateRecs!=bbjAPI().makeVector()

rem --- See if this document is set up in Addon Report Control

    reportControl!=new ReportControl()
    reportControl!.setDocExtension("pdf")
    rpt_ctl$=reportControl!.getReportControl(rptctl_alias$)
    rpt_ctl$=iff(rpt_ctl$="","NO","YES")
    rpt_id$=iff(rpt_ctl$="YES",reportControl!.getReportID(),"")
    rpt_logo_file$=iff(rpt_ctl$="YES",reportControl!.getLogoFile(),"")
    logo_filename$=iff(rpt_logo_file$="",logo_filename$,rpt_logo_file$);rem doc-specific logo supersedes default or company logo

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","POE_REQPRINT","","","",0,poe_reqprint,1,meter_num,status
    if status = 999 then goto all_done

rem --- Build SQL query to drive the report

    if single_vendor$="Y"
    
        sql_prep$="select poe_reqprint.firm_id, poe_reqprint.vendor_id, poe_reqprint.req_no "
        sql_prep$=sql_prep$+"FROM poe_reqprint "

        where_clause$="WHERE poe_reqprint.firm_id = '"+firm_id$+"' AND poe_reqprint.vendor_id = '" +vendor_id$+ "' AND "
        where_clause$=where_clause$+"poe_reqprint.req_no = '"+req_no$+"' "

    else
   
        sql_prep$="select poe_reqprint.firm_id, poe_reqprint.vendor_id, poe_reqprint.req_no, "
        sql_prep$=sql_prep$+"poe_reqhdr.warehouse_id, apm_vendmast.alt_sequence "
        sql_prep$=sql_prep$+"FROM poe_reqprint, apm_vendmast, poe_reqhdr "


        where_clause$="WHERE poe_reqprint.firm_id = '"+firm_id$+"' AND "
        where_clause$=where_clause$+"poe_reqprint.firm_id=poe_reqhdr.firm_id AND poe_reqprint.req_no=poe_reqhdr.req_no AND "
        where_clause$=where_clause$+"poe_reqprint.firm_id=apm_vendmast.firm_id AND poe_reqprint.vendor_id=apm_vendmast.vendor_id "

        action=pos(sequence$="NRPAW")
        vend_seq=1
        req_seq=2
        po_seq=3
        alt_seq=4
        whse_seq=5

        switch action
            case vend_seq
                order_by$="order by poe_reqprint.vendor_id,poe_reqprint.req_no"
                break
             case req_seq
             case po_seq
                order_by$="order by poe_reqprint.req_no,poe_reqprint.vendor_id"
                break
             case alt_seq
                order_by$="order by apm_vendmast.alt_sequence,poe_reqprint.vendor_id,poe_reqprint.req_no"
                break
             case whse_seq
                order_by$="order by poe_podet.warehouse_id,poe_reqprint.vendor_id,poe_reqprint.req_no"
                break
             case default
                more=0
                continue
        swend
    endif

    sql_prep$=sql_prep$ + where_clause$ + order_by$
    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$

rem --- Process SQL fetch results

    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

    while 1
        read_tpl$=sqlfetch(sql_chan,err=*break)
        req_no$=read_tpl.req_no$
        vendor_id$=read_tpl.vendor_id$

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
       
        if restart$="Y" and restart_vendor_id$<>""
            if vendor_id$<restart_vendor_id$ then continue
        endif
            
        if single_vendor$<>"Y"
            lock_unlock$="L"
            lock_key$=firm_id$+req_no$
            last_req_no$=req_no$
            gosub lock_unlock_record
            if rd_lock_status$<>"" then lock_key$=""; continue
        endif
        
        UpdateRecs!.addItem(firm_id$+vendor_id$+req_no$)

    rem --- Make Document Archive Record and Get Document ID
        rep_date$=date(0:stbl("+DATE_MASK"))
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")

        new_doc_id$=""
        new_doc_name$=""
        doc_name$="Req_"+req_no$+"_"+alias$
        doc_keywords$="Req: "+req_no$+" Vendor: "+vendor_id$

        rd_source_alias$=alias$
        rd_source_type$="O"
        rd_doc_source$="E"
        rd_doc_ext$="PDF"
        rd_source_id$="V"
        rd_source_ref$=vendor_id$
        rd_doc_keywords$=doc_keywords$
    
    rem --- Get Next Document Number and update Document Audit for individual pdf
        call stbl("+DIR_SYP")+"bas_sequences.bbj","DOC_NO",new_doc_id$,rd_table_chans$[all] 
        new_doc_name$=new_doc_id$+"_"+doc_name$+".pdf"        
        
        call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,rep_date_stamp$,rep_time_stamp$,rd_doc_source$,rd_doc_ext$,docdir$,
:           rd_source_type$,rd_source_alias$,rd_source_id$,rd_source_ref$,rd_table_chans$[all],"",new_doc_name$,doc_name$,doc_keywords$

    rem --- Get Next Document Number and update Document Audit with JAS entry for master doc, if first time thru
        if master_document
            rd_doc_ext$="JAS"
            rd_archive_action$="DOC_ID-NOREPRINT"
            rd_doc_id$=""
            rd_source_id$="V"
            rd_source_ref$=""
            rd_doc_keywords$=""
            gosub document_whse
            rd_archive_action$=""
            master_doc_id$=rd_doc_id$
            master_doc_name$=master_doc_id$+"_"+masterBaseName$+".pdf"
        endif

    rem --- Document Output Report Parameters

        params!.put("DOC_NO",new_doc_id$)
        params!.put("DATE_REP",rep_date$+"  "+rep_time$)

    rem --- Other params

        params!.put("BARISTA_WD",dir(""))
        if logo_filename$<>"" then params!.put("LOGO_FILE",logo_filename$)
        params!.put("FIRM_ID",firm_id$)
        params!.put("REQ_NO",req_no$)
        params!.put("VENDOR_ID",vendor_id$)
        params!.put("MESSAGE",pomessage$)
        params!.put("QTY_MASK",m2$)
        params!.put("COST_MASK",m3$)
        params!.put("VEND_MASK",str(vend_mask$))
		params!.put("EXT_MASK",ext_mask$)
		params!.put("EXT_MASK_PATTERN",ext_mask_pattern$)
        params!.put("DFLT_MSG",defaultmsg$)
        params!.put("RESTART",restart$)
        params!.put("RESTART_VEND",restart_vendor_id$)       
        params!.put("AP_ADDRESS1",comp$((comp_addrLine_len*0)+1,comp_addrLine_len))
		params!.put("AP_ADDRESS2",comp$((comp_addrLine_len*1)+1,comp_addrLine_len))
		params!.put("AP_ADDRESS3",comp$((comp_addrLine_len*2)+1,comp_addrLine_len))
		params!.put("AP_ADDRESS4",comp$((comp_addrLine_len*3)+1,comp_addrLine_len))
        params!.put("AP_PHONE_NO",comp_phone$)
        params!.put("IV_PRECISION",ivs_params.precision$)
        params!.put("PRT_VDR_ITEM",pos_params.prt_vdr_item$)
        params!.put("NOF_PROMPT",Translate!.getTranslation("AON_NOT_ON_FILE"))
        params!.put("VEND_ITEM_PROMPT",Translate!.getTranslation("AON_YOUR_ITEM_NUMBER_"))
        params!.put("PROMISE_PROMPT",Translate!.getTranslation("AON_PROMISED_BY_"))
        params!.put("NOT_B4_PROMPT",Translate!.getTranslation("AON_NOT_BEFORE_"))
        params!.put("SHIPFROM_PROMPT",Translate!.getTranslation("AON_SHIP_FROM:_"))
        params!.put("BANDED_ROWS","Y");rem --- controls whether or not detail portion of report is striped

    rem --- invoke jasper

        locale$ = stbl("!LOCALE")
        locale$ = stbl("+USER_LOCALE",err=*next)

        if master_document
            master_report! = BarUtils.getBBJasperReport(master_filename$)
            master_report!.putParams(params!)
            master_report!.setLocale(locale$)
            master_report!.fill()
            master_document=0
        endif

        report! = BarUtils.getBBJasperReport(filename$)
        report!.putParams(params!)
        report!.setLocale(locale$)
        report!.fill()
        report!.exportToPDF(BBjAPI().FALSE, docdir$+new_doc_name$)        
  
        if single_vendor$<>"Y"
            master_report!.appendReport(report!)
            report!.destroy()            
            lock_key$=firm_id$+req_no$
            lock_unlock$="U"
            gosub lock_unlock_record
        endif
        
    wend
        
done: rem --- All PO's printed

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
 
    if UpdateRecs!.size()=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit
    endif

rem --- bring up jasper viewers (master doc and print doc for Batch Invoices; single doc for On-Demand)

    declare BBJasperViewerWindow masterViewerWindow!
    declare BBJasperViewerWindow demandViewerWindow!
    declare BBjTopLevelWindow bbjWindowMaster!
    declare BBjTopLevelWindow bbjWindowDemand!
    
    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path

	if single_vendor$<>"Y"
    rem --- master jasper - contains ALL POs
        repTitle$=masterBaseName$
        rd_doc_name$=master_doc_name$

        rd_doc_id$=master_doc_id$

        gosub exportMasterToPDF; rem --- always save to doc archive

        masterViewerWindow! = new BBJasperViewerWindow(master_report!,5,5,screen_width,screen_height,repTitle$,$00000093$)
        masterViewerControl! = masterViewerWindow!.getViewerControl()
        masterViewerControl!.setGoogleDefaultDocument(repTitle$)
        masterViewerControl!.setDefaultSaveFolder(rd_doc_path$)
        masterViewerControl!.setDefaultSaveFile(repTitle$)
        masterViewerControl!.setFitWidth()

        rem --- set callbacks for when user presses save or email buttons in jasper viewer
        rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
        masterSaveMenuButton! = masterViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
        masterSaveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnMasterSaveMenuButton")

        masterSavMenuItem! = masterViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_ITEM_NAME())
        masterSavMenuItem!.setCallback(BBjMenuItem.ON_POPUP_ITEM_SELECT,"OnMasterSaveMenuButton")

        masterEmailToolButton! = masterViewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
        masterEmailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnMasterEmailToolButton")

        masterViewerWindow!.setReleaseOnClose(0)
        masterViewerWindow!.show(0)

        bbjWindowMaster!= masterViewerWindow!.getViewerWindow()
        bbjWindowMaster!.setCallback(bbjWindowMaster!.ON_CLOSE,"close_win")

    else

        repTitle$=doc_name$
        rd_doc_name$=new_doc_name$
	    rd_doc_id$=new_doc_id$
	        
        gosub exportDemandToPDF; rem --- always save to doc archive
	        
	    demandViewerWindow! = new BBJasperViewerWindow(report!,5,5,screen_width,screen_height,repTitle$,$00080093$)
        demandViewerControl! = demandViewerWindow!.getViewerControl()
        demandViewerControl!.setGoogleDefaultDocument(repTitle$)
        demandViewerControl!.setDefaultSaveFolder(rd_doc_path$)
        demandViewerControl!.setDefaultSaveFile(repTitle$)
        demandViewerControl!.setFitWidth()

        demandSaveMenuButton! = demandViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
        demandSaveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnDemandSaveMenuButton")

        demandSavMenuItem! = demandViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_ITEM_NAME())
        demandSavMenuItem!.setCallback(BBjMenuItem.ON_POPUP_ITEM_SELECT,"OnDemandSaveMenuButton")

        demandEmailToolButton! = demandViewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
        demandEmailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnDemandEmailToolButton")

        demandViewerWindow!.setReleaseOnClose(0)
        demandViewerWindow!.show(0)
        
        bbjWindowDemand!= demandViewerWindow!.getViewerWindow()
        bbjWindowDemand!.setCallback(bbjWindowDemand!.ON_CLOSE,"close_win",err=*next)

	endif
    

rem --- Event Control

    process_events,err=*same

    release

    
lock_unlock_record:

    rd_lock_status$=""
    call stbl("+DIR_SYP")+"bac_lock_record.bbj","POE_REQHDR",lock_key$,lock_unlock$,"",rd_table_chan,rd_table_chans$[all],rd_lock_status$

    return

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_tmp_dir$=stbl("+DOC_DIR_PDF",err=*endif)
        rd_temp_wd$=dsk("")+dir("")
        if pos(":"=rd_tmp_dir$) setdrive rd_tmp_dir$(1,pos(":"=rd_tmp_dir$)-1),err=*next
        chdir rd_tmp_dir$,err=*next
        rd_doc_path$=dsk("")+dir("")
        if pos(":"=rd_temp_wd$) setdrive rd_temp_wd$(1,pos(":"=rd_temp_wd$)-1)
        chdir rd_temp_wd$
    endif

    return

OnMasterSaveMenuButton:
rem --- save save and display confirmation dialog

    show_save_dlg$="YES"
 
exportMasterToPDF:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_ext$="PDF"
        rep_title$=repTitle$
        rd_source_id$="V"
        rd_source_ref$=""
        rd_doc_keywords$=""
        master_report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif

    if show_save_dlg$="YES"
        msg_id$="DOC_OUTPUT_COMP"
        gosub disp_message
        show_save_dlg$=""
    endif
    return    

OnMasterEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub exportMasterToPDF

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

OnDemandSaveMenuButton:
rem --- save save and display confirmation dialog

    show_save_dlg$="YES"
 
exportDemandToPDF:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_ext$="PDF"
        rep_title$=repTitle$
        rd_source_id$="V"
        rd_source_ref$=vendor_id$
        rd_doc_keywords$=doc_keywords$
        report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif

    if show_save_dlg$="YES"
        msg_id$="DOC_OUTPUT_COMP"
        gosub disp_message
        show_save_dlg$=""
    endif
    return    

OnDemandEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub exportDemandToPDF


    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif
    return

close_win:rem --- Viewer Window Closed
    
rem --- remove from print file?
    msg_id$="PO_UPDTPRT"
    dim msg_tokens$[1]
    msg_tokens$[1]=Translate!.getTranslation("AON_PURCHASE_REQUISITION")
    gosub disp_message
    if msg_opt$<>"Y" then goto all_done

    if single_vendor$<>"Y"
        for del_recs = 0 to UpdateRecs!.size() - 1
            k$=UpdateRecs!.getItem(del_recs)
            remove (poe_reqprint,key=k$,dom=*next)
        next del_recs  
   
    else
    rem --- on demand print
 
        remove (poe_reqprint,key=firm_id$+vendor_id$+req_no$,dom=*next)

    endif 
    
all_done:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    
    masterViewerWindow!.destroy(err=*next)
    demandViewerWindow!.destroy(err=*next)
    sqlclose(sql_chan,err=*next)

    if tcb(13) then exit
    
    release

open_tables: rem --- Call open table routine	

call stbl("+DIR_SYP")+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],rd_table_chans$[all],open_batch,open_status$

if open_status$<>"" then
	msg_id$="ENTRY_OPEN_ERROR"
	dim msg_tokens$[1]
	msg_tokens$[1]=open_status$
	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
	status=912
	goto std_exit
endif

return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+   cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        if cvs(q$,3)<>"" then q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fngetPattern$: Build iReports 'Pattern' from Addon Mask
	def fngetPattern$(q$)
		q1$=q$
		if len(q$)>0
			if pos("-"=q$)
				q1=pos("-"=q$)
				if q1=len(q$)
					q1$=q$(1,len(q$)-1)+";"+q$; rem Has negatives with minus at the end =>> ##0.00;##0.00-
				else
					q1$=q$(2,len(q$)-1)+";"+q$; rem Has negatives with minus at the front =>> ##0.00;-##0.00
				endif
			endif
			if pos("CR"=q$)=len(q$)-1
				q1$=q$(1,pos("CR"=q$)-1)+";"+q$
			endif
			if q$(1,1)="(" and q$(len(q$),1)=")"
				q1$=q$(2,len(q$)-2)+";"+q$
			endif
		endif
		return q1$
	fnend

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Modified standard program end

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end