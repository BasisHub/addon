rem --- Purchase Orders By Item Report (Print Overlay)
rem --- Program por_pobyitem_o1 v8.0.0 17Jul2007 (por_jb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:48:38)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Init Data

        precision ivprecision
        grandtot=0
        printwtot$="N"
        dim itemdesc$(60),whsename$(24),itemnum$(20)
        more=1

        call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_PODET","PRIMARY",poe12a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_PODET","WHSE_ITEM",poe12a_key_alttpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","PRIMARY",apm01a_key_tpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

        headings=6
        dim headings$[headings],o[14]
        width=132
        page=0
        l9=59
        l=l9+1
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$


rem --- Headings and print positions

        columns = 14
        if col_format$="Y" columns=16
        dim columns$[columns,10]
        columns$[0,0]="Item",                       columns$[0,1]="C",columns$[0,2]=str(ivs01a.item_id_len+1)
        if col_format$="Y" then
            columns$[1,0]="Item Description",       columns$[1,1]="C",columns$[1,2]=str(desclen[1]+desclen[2]+desclen[3])
            columns$[2,0]="WH^ID",                  columns$[2,1]="C",columns$[2,2]="2"
        endif
        columns$[columns-13,0]="PO #",              columns$[columns-13,1]="C",columns$[columns-13,2]="8"
        columns$[columns-12,0]="Seq",               columns$[columns-12,1]="C",columns$[columns-12,2]="4"
        columns$[columns-11,0]="Vendor",            columns$[columns-11,1]="C",columns$[columns-11,2]=str(len(vendomask$))
        columns$[columns-10,0]="UM",                columns$[columns-10,1]="C",columns$[columns-10,2]="4"
        columns$[columns-9,0]="Date^Required",      columns$[columns-9,1]="C", columns$[columns-9,2]="8"
        columns$[columns-8,0]="Date^Promised",      columns$[columns-8,1]="C", columns$[columns-8,2]="8"
        columns$[columns-7,0]="Not^Before",         columns$[columns-7,1]="C", columns$[columns-7,2]="8"
        columns$[columns-6,0]="Conv^Factor",        columns$[columns-6,1]="N", columns$[columns-6,2]=str(len(m2$)),columns$[columns-6,3]=m2$
        columns$[columns-5,0]="Quantity^Ordered",   columns$[columns-5,1]="N", columns$[columns-5,2]=str(len(m2$)),columns$[columns-5,3]=m2$,columns$[columns-5,10]="T"
        columns$[columns-4,0]="Quantity^Received",  columns$[columns-4,1]="N", columns$[columns-4,2]=str(len(m2$)),columns$[columns-4,3]=m2$,columns$[columns-4,10]="T"
        columns$[columns-3,0]="Balance",            columns$[columns-3,1]="N", columns$[columns-3,2]=str(len(m2$)),columns$[columns-3,3]=m2$,columns$[columns-3,10]="T"
        columns$[columns-2,0]="Unit Cost",          columns$[columns-2,1]="N", columns$[columns-2,2]=str(len(m3$)),columns$[columns-2,3]=m3$
        columns$[columns-1,0]="Extension",          columns$[columns-1,1]="N", columns$[columns-1,2]=str(len(m1$)),columns$[columns-1,3]=m1$,columns$[columns-1,10]="T"
        columns$[columns,0]="Quantity^On Order",    columns$[columns,1]="N",   columns$[columns,2]=str(len(m2$))  ,columns$[columns,3]=m2$



rem --- Position files

        call pgmdir$+"adc_progress.aon","N","","","","",0,poe12a_dev,1,meter_num,status

rem --- Init Sort File

        if whsefrom$="" firstwhse$=fill(2) else firstwhse$=whsefrom$

        read (poe12a_dev,knum=3,key=firm_id$+firstwhse$+itemfrom$,dom=*next)
        if itemfrom$<>"" read(poe12a_dev,knum=3,key=firm_id$+firstwhse$+itemfrom$+pofrom$,dom=*next)

    while more

        poe12a_key$=key(poe12a_dev,end=*break)
        if pos(firm_id$=poe12a_key$(1,2))<>1 break

        rem --- Find corresponding detail line

        find record (poe12a_dev,key=poe12a_key$,dom=*next) poe12a$
        rem *** if poe12a.firm_id$+poe12a.po_no$+poe12a.po_line_no$<>sortkey$ then continue

rem --- Test PO Detail ranges

        rem *** if poe12a.warehouse_id$+poe12a.item_id$<>poe12a_altkey.warehouse_id$+poe12a_altkey.item_id$ continue
        if whsefrom$<>"" if poe12a.warehouse_id$<whsefrom$ continue
        if whsethru$<>"" if poe12a.warehouse_id$>whsethru$ continue
        if itemfrom$<>"" if poe12a.item_id$<itemfrom$ continue
        if itemthru$<>"" if poe12a.item_id$>itemthru$ continue
        if pofrom$<>"" if poe12a.po_no$<pofrom$ continue
        if pothru$<>"" if poe12a.po_no$>pothru$ continue
        rem *** if vendfrom$<>"" if poe12a.vendor_id$<vendfrom$ continue
        rem *** if vendthru$<>"" if poe12a.vendor_id$>vendthru$ continue

                gosub gettestdate_detail
        if datefrom$<>"" and testdated$<datefrom$ continue
        if datethru$<>"" and testdated$>datethru$ continue

        if poe02a.po_no$<>poe12a.po_no$ then read record(poe02a_dev,key=poe12a.firm_id$+poe12a.po_no$,dom=*next) poe02a$
        if vendfrom$<>"" if poe02a.vendor_id$<vendfrom$ continue
        if vendthru$<>"" if poe02a.vendor_id$>vendthru$ continue

        rem --- Get Line Type

        linetype$="N"
        p02_key$=poe12a.firm_id$+poe12a.po_line_code$
        find record (pom02a_dev,key=p02_key$,dom=*next) pom02a$
        linetype$=pom02a.line_type$
        if linetype$<>"S" continue

rem --- Test breaks; print line

        call pgmdir$+"adc_progress.aon","S","","","","",0,poe12a_dev,1,meter_num,status
        gosub testbreaks
        gosub printdetail


nextsort: rem --- Accumulate totals; then get next sort file record

        qtyordtot=qtyordtot+qtyord
        qtyrectot=qtyrectot+qtyrec
        baltot=baltot+balance
        itemtot=itemtot+extension
        whsetot=whsetot+extension
        grandtot=grandtot+extension
        extension=0
        extension$=""
        balance=0
        balance$=""
        qtyord=0
        qtyord$=""
        qtyrec=0
        qtyrec$=""

        wend

done: rem --- All Done

        gosub itemtotals
        gosub whsetotals
        rem *** xwk = fnblank(15)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk = fnblank(1)
        OutVect!.addItem("Total For Report")  
        xwk = fnblank(11)
        OutVect!.addItem(str(grandtot))
        OutVect!.addItem("")
        goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

        dim datereq$(8),dateprom$(8),notb4date$(8)
        itemnum$=poe12a.item_id$
        unitmeas$=poe12a.unit_measure$
        if poe12a.reqd_date$<>fill(8) datereq$=fndate$(poe12a.reqd_date$)
        if poe12a.promise_date$<>fill(8) dateprom$=fndate$(poe12a.promise_date$)
        if poe12a.not_b4_date$<>fill(8) notb4date$=fndate$(poe12a.not_b4_date$)
        convfact=poe12a.conv_factor
        if convfact=0 convfact=1
        convfact$=str(convfact:m5$)
        unitcost$=str((poe12a.unit_cost/convfact))
        qtyord=poe12a.qty_ordered*convfact
        qtyrec=poe12a.qty_received*convfact

        qtyord$=str(qtyord:m2$)
        qtyrec$=str(qtyrec:m2$)
        ponum$=poe12a.po_no$
        vendor$=fnmask$(poe02a.vendor_id$,vendomask$)

rem --- Get extension

        gosub calc_extension

rem --- Print detail line

        if col_format$="Y" then
            OutVect!.addItem(poe12a.item_id$)
            OutVect!.addItem(itemdesc$)
            OutVect!.addItem(poe12a.warehouse_id$)
        else
            xwk = fnblank(1)
        endif
        OutVect!.addItem(ponum$)
        OutVect!.addItem(poe12a.po_line_no$)
        OutVect!.addItem(vendor$)
        OutVect!.addItem(unitmeas$)
        OutVect!.addItem(datereq$)
        OutVect!.addItem(dateprom$)
        OutVect!.addItem(notb4date$)
        OutVect!.addItem(convfact$)
        OutVect!.addItem(qtyord$)
        OutVect!.addItem(qtyrec$)
        OutVect!.addItem(balance$)
        OutVect!.addItem(unitcost$)
        OutVect!.addItem(extension$)
        if col_format$="Y" then
            OutVect!.addItem(str(qtyonorder))
         else
            xwk = fnblank(1)
        endif
        l=l+1
        return


assignheads: rem --- Assign headings variables

        whead$=" For Warehouse "
        if whsefrom$="" then whead$=whead$+"First" else whead$=whead$+whsefrom$
        whead$=whead$+" -- To "
        if whsethru$="" then whead$=whead$+"Last" else whead$=whead$+whsethru$
        headings$[1]=headings$[1](1,len(sysinfo.task_desc$))+whead$ 

        if vendfrom$="" headings$[2]="From Vendor: First" else headings$[2]="From Vendor: "+ vendfrom$
        if vendthru$="" headings$[2]=headings$[2] + " -- To Vendor: Last" else headings$[2]=headings$[2] + " -- To Vendor: " + vendthru$
        if itemfrom$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+ cvs(itemfrom$,2)
        if itemthru$="" headings$[3]=headings$[3] + " To Item: Last" else headings$[3]=headings$[3] + " -- To Item: " + cvs(itemthru$,2)
        if pofrom$=""   headings$[4]="From Purchase Order: First" else headings$[4]="From Purchase Order: " + pofrom$
        if pothru$=""   headings$[4]=headings$[4] + " -- To Purchase Order: Last" else headings$[4]= headings$[4] + " -- Purchase Order: " + pothru$
        if datefrom$="" headings$[5]="From Order Date: First" else headings$[5]="From Order Date: " + str(fndate$(datefrom$))
        if datethru$="" headings$[5]=headings$[5] + " -- To Order Date: Last" else headings$[5]= headings$[5] + " -- To Order Date:" + fndate$(datethru$)

        return

gettestdate_detail: rem --- Determine date to use when testing range in detail

        action=pos(whichdate$="OPRD")

        switch action
            case 2
                testdated$=poe12a.promise_date$
                break
            case 3
                testdated$=poe12a.reqd_date$
                break
            case 4
                testdated$=poe12a.not_b4_date$
                break
            case default
                break
        swend
        return

testbreaks: rem --- Test for Breaks

        if poe12a.warehouse_id$<>whse$
            if printitot$="Y" gosub itemtotals
            if printwtot$="Y" gosub whsetotals
            gosub newwhse
            gosub newitem
        else

            if poe12a.item_id$<>itemnum$
                gosub itemtotals
                gosub newitem
            endif

        endif
        return

newwhse: rem --- New Warehouse

        whsetot=0
        whsename$="Not On File"
        whse$=poe12a.warehouse_id$
        printwtot$="Y"
        printitot$="N"
        i10_key$=firm_id$+"C"+whse$
        find record (ivm10c_dev,key=i10_key$,dom=brnch1) ivm10c$
        whsename$=ivm10c.short_name$

brnch1:

        gosub assignheads
        return

newitem: rem --- New Item

        itemtot=0
        qtyordtot=0
        qtyrectot=0
        baltot=0
        printitot$="Y"
        dim itemdesc$(60),x1$(60)
        itemdesc$="Not On File"
        itemnum$=poe12a.item_id$
        i01_key$=firm_id$+poe12a.item_id$
        find record (ivm01a_dev,key=i01_key$,dom=brnch2) ivm01a$
        itemdesc$=fnitem$(ivm01a.item_desc$,desclen[1],desclen[2],desclen[3])
brnch2:
        qtyonorder=0
        i02_key$=firm_id$+poe12a.warehouse_id$+poe12a.item_id$
        find record (ivm02a_dev,key=i02_key$,dom=*next) ivm02a$

        if col_format$<>"Y" then 
            OutVect!.addItem(itemnum$(1,itemlen)+$00$+"B")
            OutVect!.addItem(itemdesc$+$00$+"B")
            xwk = fnblank(12)


            OutVect!.addItem(str(ivm02a.qty_on_order)+$00$+"B")
            l=l+1
        endif

        return

whsetotals: rem --- Print Warehouse total

        if col_format$<>"Y" then 
            rem *** xwk = fnblank(15)
            TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
            xwk = fnblank(1)
            OutVect!.addItem("Total For Warehouse " + whse$ + " " + whsename$+$00$+"B")
            xwk = fnblank(11)
            OutVect!.addItem(str(whsetot)+$00$+"B")
            xwk = fnblank(1)
            let l=l+1
        endif


        return

itemtotals: rem --- Print Item total

        if col_format$<>"Y" then 
            rem ***  xwk = fnblank(15)
            TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
            xwk = fnblank(1)
            OutVect!.addItem("Total For Item " + itemnum$(1,itemlen) + " " + itemdesc$+$00$+"B")
            xwk = fnblank(7)

            OutVect!.addItem(str(qtyordtot)+$00$+"B")
            OutVect!.addItem(str(qtyrectot)+$00$+"B")
            OutVect!.addItem(str(baltot)+$00$+"B")
            xwk = fnblank(1)
            OutVect!.addItem(str(itemtot)+$00$+"B")
            xwk = fnblank(1)
            let l=l+1
        endif


        return

calc_extension: rem --- Calc extension and Balance

        let balance=qtyord-qtyrec,balance$=str(balance:m2$)
        precision 2
        let extension=num(unitcost$)*balance,extension$=str(extension:m1$)
        precision ivprecision
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

   rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

       def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end