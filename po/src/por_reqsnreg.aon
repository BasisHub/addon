rem --- Purchase Requisition Register (Input Overlay)
rem --- Program por_reqsnreg v8.0.0 06Jul2007 (por_aa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 01:57:08)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

	num_files=24,open_beg=1,open_end=num_files
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

	open_tables$[1]="APM_VENDMAST", open_opts$[1]="OTA"
	open_tables$[2]="APM_VENDMAST", open_opts$[2]="NTA"; rem for alpha sort
	open_tables$[3]="ARM_CUSTMAST", open_opts$[3]="OTA"
	open_tables$[4]="IVM_ITEMMAST", open_opts$[4]="OTA"
	open_tables$[5]="IVM_ITEMWHSE", open_opts$[5]="OTA"
	open_tables$[6]="OPE_ORDHDR", open_opts$[6]="OTA"
	open_tables$[7]="OPE_ORDDET", open_opts$[7]="OTA"
	open_tables$[8]="POE_REQHDR", open_opts$[8]="OTA"
	open_tables$[9]="POE_POHDR", open_opts$[9]="OTA"
	open_tables$[10]="POE_REQDET", open_opts$[10]="OTA"
	open_tables$[11]="POE_PODET", open_opts$[11]="OTA"
	open_tables$[12]="POE_REQPRINT", open_opts$[12]="OTA"
	open_tables$[13]="POE_POPRINT", open_opts$[13]="OTA"
	open_tables$[14]="POC_LINECODE", open_opts$[14]="OTA"
	open_tables$[15]="POW_REQREGALT", open_opts$[15]="OTALI"
	open_tables$[16]="SFE_WOMASTR", open_opts$[16]="OTA"
	rem open_tables$[17]="SFE_WOMATL", open_opts$[17]="OTA"
	rem open_tables$[18]="SFE_WOSUBCNT", open_opts$[18]="OTA"
	open_tables$[19]="APS_PARAMS", open_opts$[19]="OTA"
	open_tables$[20]="ARS_PARAMS", open_opts$[20]="OTA"
	open_tables$[21]="IVS_PARAMS", open_opts$[21]="OTA"
	open_tables$[22]="POS_PARAMS", open_opts$[22]="OTA"
	open_tables$[23]="POW_REQREGVEN", open_opts$[23]="OTALI"
	open_tables$[24]="POW_REQREGREQ", open_opts$[24]="OTALI"
	
	gosub open_tables

	apm_vendmast_dev=num(open_chans$[1])
	apm_vendmast_dev=num(open_chans$[2])
	arm_custmast_dev=num(open_chans$[3])
	ivm_itemmast_dev=num(open_chans$[4])
	ivm_itemwhse_dev=num(open_chans$[5])
	ope_ordhdr_dev=num(open_chans$[6])
	ope_orddet_dev=num(open_chans$[7])
	poe_reqhdr_dev=num(open_chans$[8])
	poe_pohdr_dev=num(open_chans$[9])
	poe_reqdet_dev=num(open_chans$[10])
	poe_podet_dev=num(open_chans$[11])
	poe_reqprint_dev=num(open_chans$[12])
	poe_poprint_dev=num(open_chans$[13])
	poc_linecode_dev=num(open_chans$[14])
	pow_reqregalt_dev=num(open_chans$[15])
	sfe_womastr_dev=num(open_chans$[16])
	sfe_womatl_dev=num(open_chans$[17])
	sfe_wosubcnt_dev=num(open_chans$[18])
	aps_params_dev=num(open_chans$[19])
	ars_params_dev=num(open_chans$[20])
	ivs_params_dev=num(open_chans$[21])
	pos_params_dev=num(open_chans$[22])
	pow_reqregven_dev=num(open_chans$[23])
	pow_reqregreq_dev=num(open_chans$[24])
	
    
	dim apm_vendmast$:open_tpls$[1]
	dim apm_vendmast_sort$:open_tpls$[2]
	dim arm_custmast$:open_tpls$[3]
	dim ivm_itemmast$:open_tpls$[4]
	dim ivm_itemwhse$:open_tpls$[5]
	dim ope_ordhdr$:open_tpls$[6]
	dim ope_orddet$:open_tpls$[7]
	dim poe_reqhdr$:open_tpls$[8]
	dim poe_pohdr$:open_tpls$[9]
	dim poe_reqdet$:open_tpls$[10]
	dim poe_podet$:open_tpls$[11]
	dim poe_reqprint$:open_tpls$[12]
	dim poe_poprint$:open_tpls$[13]
	dim poc_linecode$:open_tpls$[14]
	dim pow_reqregalt$:open_tpls$[15]
	dim sfe_womastr$:open_tpls$[16]
	dim sfe_womatl$:open_tpls$[17]
	dim sfe_wosubcnt$:open_tpls$[18]
	dim aps_params$:open_tpls$[19]
	dim ars_params$:open_tpls$[20]
	dim ivs_params$:open_tpls$[21]
	dim pos_params$:open_tpls$[22]
	dim pow_reqregven$:open_tpls$[23]
	dim pow_reqregreq$:open_tpls$[24]
	
	
rem --- Assign form input values to local variables

    begreq$=option!.getOptionData("req_no_1")
    endreq$=option!.getOptionData("req_no_2")
    sequence$=option!.getOptionData("report_type")                         
    begvend$=option!.getOptionData("vendor_id_1")
    endvend$=option!.getOptionData("vendor_id_2")
    datetype$=option!.getOptionData("date_type")
    begdate$=option!.getOptionData("pick_date_1")
    enddate$=option!.getOptionData("pick_date_2")
    pagebreak$=option!.getOptionData("page_break")
    
    if datetype$="O" datetitle$=Translate!.getTranslation("AON_DATE_ORDERED"),comp_date_field$="ORD_DATE"
	if datetype$="P" datetitle$=Translate!.getTranslation("AON_DATE_PROMISED"),comp_date_field$="PROMISE_DATE"
	if datetype$="R" datetitle$=Translate!.getTranslation("AON_DATE_REQUIRED"),comp_date_field$="REQD_DATE"
	if datetype$="D" datetitle$=Translate!.getTranslation("AON_NOT_BEFORE_DATE"),comp_date_field$="NOT_B4_DATE"


rem --- Retrieve parameter records

	find record (aps_params_dev,key=firm_id$+"AP00",err=std_missing_params) aps_params$
    find record (ars_params_dev,key=firm_id$+"AR00",err=std_missing_params) ars_params$
    find record (ivs_params_dev,key=firm_id$+"IV00",err=std_missing_params) ivs_params$
    find record (pos_params_dev,key=firm_id$+"PO00",err=std_missing_params) pos_params$

rem --- masks

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,m3
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vendomask$,0,vendlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",customask$,0,custlen

rem --- Parameters

    sf$="N"
    find record (pos_params_dev,key=firm_id$+"PO00",dom=std_missing_params) pos_params$
    find record (aps_params_dev,key=firm_id$+"AP00",dom=std_missing_params) aps_params$
    vendlen=num(aps_params.vendor_size$)
    find record (ivs_params_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs_params$
    itemlen=ivs_params.item_id_len
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)

rem --- Init data

    more=1

rem --- Get key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQHDR","AO_VEND_REQ",poe_reqhdr_key1_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POW_REQREGALT","PRIMARY",pow_reqregalt_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POW_REQREGVEN","PRIMARY",pow_reqregven_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POW_REQREGREQ","PRIMARY",pow_reqregreq_key_tpl$,rd_table_chans$[all],status$
    dim poe_reqhdr_key1$:poe_reqhdr_key1_tpl$
    dim pow_reqregalt$:pow_reqregalt_key_tpl$
    dim pow_reqregven$:pow_reqregven_key_tpl$
    dim pow_reqregreq$:pow_reqregreq_key_tpl$

rem --- Sort requisition file

    poe_reqhdr.firm_id$=firm_id$
    poe_reqhdr.vendor_id$=begvend$
    if cvs(begvend$,2)<>"" then poe_reqhdr.req_no$=begreq$
    flag=0
    read (poe_reqhdr_dev,key=poe_reqhdr.firm_id$+poe_reqhdr.vendor_id$+poe_reqhdr.req_no$,knum="AO_VEND_REQ",dom=sort_req_file)
    flag=1
    poe_reqhdr_key1$=keyp(poe_reqhdr_dev,end=done)

sort_req_file:  

    while more
        if !flag then poe_reqhdr_key1$=key(poe_reqhdr_dev,end=*break)
        if pos(firm_id$=poe_reqhdr_key1$)<>1 break
        if endvend$<>"" and poe_reqhdr_key1.vendor_id$>endvend$ break
        if endreq$<>"" and poe_reqhdr_key1.req_no$>endreq$ break
        read record (poe_reqhdr_dev,key=poe_reqhdr_key1$) poe_reqhdr$; rem "This Key=K$ phrase is needed
        if begreq$<>"" and poe_reqhdr.req_no$<begreq$ then continue
        if poe_reqhdr.hold_flag$="Y" then continue
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Does record meet selection criteria?
        
        if begdate$<>"" or enddate$<>""
        	comp_date$=cvs(field(poe_reqhdr$,comp_date_field$),3)
        	if comp_date$<>""
        		if begdate$<>"" and comp_date$<begdate$ then continue
        		if enddate$<>"" and comp_date$>enddate$ then continue
        	endif
        endif

rem --- Get vendor for alpha sort

        if sequence$="A"
            apm_vendmast.firm_id$=poe_reqhdr.firm_id$
            apm_vendmast.vendor_id$=poe_reqhdr.vendor_id$
            find record (apm_vendmast_dev,key=apm_vendmast.firm_id$+apm_vendmast.vendor_id$,dom=*next) apm_vendmast$
        endif

rem --- Write sort record

        pow_reqregven.firm_id$=firm_id$
        pow_reqregalt.firm_id$=firm_id$
        pow_reqregreq.firm_id$=firm_id$
        if sequence$="A"
            pow_reqregalt.alt_sequence$=apm_vendmast.alt_sequence$
            pow_reqregalt.vendor_id$=poe_reqhdr.vendor_id$
            pow_reqregalt.req_no$=poe_reqhdr.req_no$
            write record (pow_reqregalt_dev) pow_reqregalt$
        endif
        if sequence$="V"
            pow_reqregven.vendor_id$=poe_reqhdr.vendor_id$
            pow_reqregven.req_no$=poe_reqhdr.req_no$
            write record (pow_reqregven_dev) pow_reqregven$
        endif
        if sequence$="R"
            pow_reqregreq.req_no$=poe_reqhdr.req_no$
            pow_reqregreq.vendor_id$=poe_reqhdr.vendor_id$
            write record (pow_reqregreq_dev) pow_reqregreq$
        endif

rem --- Loop back for next requisition
        flag=0
    wend
    
rem --- Run report overlay    

done:
    run stbl("+DIR_PGM")+"por_reqsnreg_o1.aon"


open_tables: rem --- Call open table routine	

call stbl("+DIR_SYP")+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],rd_table_chans$[all],open_batch,open_status$

if open_status$<>"" then
	msg_id$="ENTRY_OPEN_ERROR"
	dim msg_tokens$[1]
	msg_tokens$[1]=open_status$
	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
	status=912
	goto std_exit
endif

return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
