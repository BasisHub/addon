rem --- Purchase Requisition Register (Input Overlay)
rem --- Program por_reqsnreg v8.0.0 06Jul2007 (por_aa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 01:57:08)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=31,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="apm-01",ids$[1]="APM_VENDMAST"
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"; rem for alpha sort
    files$[3]="arm-01",ids$[3]="ARM_CUSTMAST"
    files$[4]="ivm-01",ids$[4]="IVM_ITEMMAST"
    files$[5]="ivm-02",ids$[5]="IVM_ITEMWHSE"
    files$[6]="ope-01",ids$[6]="OPE_ORDHDR"
    files$[7]="ope-11",ids$[7]="OPE_ORDDET"
    files$[8]="poe-01",ids$[8]="POE_REQHDR"
    files$[9]="poe-02",ids$[9]="POE_POHDR"
    files$[11]="poe-11",ids$[11]="POE_REQDET"
    files$[12]="poe-12",ids$[12]="POE_PODET"
    files$[13]="poe-21",ids$[13]="POE_REQPRINT"
    files$[14]="poe-22",ids$[14]="POE_POPRINT"
    files$[15]="poe-31",ids$[15]="POE_REQBYREQ"
    files$[16]="poe-32",ids$[16]="POE_POBYPO"
    files$[17]="poe-41",ids$[17]="POE_REQBYITM"
    rem files$[18]="poe-42",ids$[18]="POE_POBYITM"
    files$[19]="poe-52",ids$[19]="POE_POBYREQ"
    files$[20]="pom-02",ids$[20]="POC_LINECODE"
    files$[21]="pos-10",ids$[21]="POS_NUMBERS"
    files$[22]="pow-07",ids$[22]="POW_RECBYALT"
    files$[23]="sfe-01",ids$[23]="SFE_WOMASTR"
    files$[24]="sfe-22",ids$[24]="SFE_WOMATL"
    files$[25]="sfe-32",ids$[25]="SFE_WOSUBCNT"
    files$[26]="aps_params",ids$[26]="APS_PARAMS"
    files$[27]="ars_params",ids$[27]="ARS_PARAMS"
    files$[28]="ivs_params",ids$[28]="IVS_PARAMS"
    files$[29]="pos_params",ids$[29]="POS_PARAMS"
    files$[30]="pow-07",ids$[30]="POW_VENBYREC"
    files$[31]="pow-07",ids$[31]="POW_RECRGSTR"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[1]
    apm01_dev2=channels[2]
    arm01_dev=channels[3]
    ivm01a_dev=channels[4]
    ivm02a_dev=channels[5]
    ope01_dev=channels[6]
    ope11_dev=channels[7]
    poe01_dev=channels[8]
    poe02_dev=channels[9]
    poe11_dev=channels[11]
    poe12_dev=channels[12]
    poe21_dev=channels[13]
    poe22_dev=channels[14]
    poe31_dev=channels[15]
    poe32_dev=channels[16]
    poe41_dev=channels[17]
    rem  poe42_dev=channels[18]
    poe52_dev=channels[19]
    pom02_dev=channels[20]
    pos10_dev=channels[21]
    pow07b_dev=channels[22]  ; rem use this or sort key?
    sfe01_dev=channels[23]
    sfe22_dev=channels[24]
    sfe32_dev=channels[25]
    aps01a_dev=channels[26]
    ars01a_dev=channels[27]
    ivs01a_dev=channels[28]
    pos01a_dev=channels[29]
    pow07c_dev=channels[30]
    pow07a_dev=channels[31]

rem --- Dimension string templates

    dim apm01a$:templates$[1],apm01a2$:templates$[2],arm01a$:templates$[3],ivm01a$:templates$[4],
:       ivm02a$:templates$[5],ope01a$:templates$[6],ope11a$:templates$[7],
:       poe01a$:templates$[8],poe02a$:templates$[9],
:       poe11a$:templates$[11],poe12a$:templates$[12],poe21a$:templates$[13],
:       poe22a$:templates$[14],poe31a$:templates$[15],poe32a$:templates$[16],
:       poe41a$:templates$[17],poe52a$:templates$[19],
:       pom02a$:templates$[20],pos10a$:templates$[21],pow07b$:templates$[22],
:       sfe01a$:templates$[23],sfe22a$:templates$[24],sfe32a$:templates$[25],
:	aps01a$:templates$[26],ars01a$:templates$[27],ivs01a$:templates$[28],
:       pos01a$:templates$[29],pow07c$:templates$[30],pow07a$:templates$[31]
rem   poe42a$:templates$[18]

rem --- Assign form input values to local variables

    begreq$=option!.getOptionData("req_no_1")
    endreq$=option!.getOptionData("req_no_2")
    sequence$=option!.getOptionData("report_type")                         
    begven$=option!.getOptionData("vendor_id_1")
    endven$=option!.getOptionData("vendor_id_2")
    datetype$=option!.getOptionData("date_type")
    begdate$=option!.getOptionData("pick_date_1")
    enddate$=option!.getOptionData("pick_date_2")
    pagebrk$=option!.getOptionData("page_break")

rem --- Retrieve parameter records

rem    aps01a_key$=firm_id$+"AP00"
rem    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    pos01a_key$=firm_id$+"PO00"
    find record (pos01a_dev,key=pos01a_key$,err=std_missing_params) pos01a$

rem --- masks

    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","V","",m5$,0,m5
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vendomask$,0,vendlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",customask$,0,custlen

rem --- Parameters

    sf$="N"
    find record (pos01a_dev,key=firm_id$+"PO00",dom=std_missing_params) pos01a$
rem    find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    vendlen=num(aps01a.vendor_size$)
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    itemlen=ivs01a.item_id_len
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)

rem --- Init data

    more=1

rem --- Get key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_REQHDR","PRIMARY",poe01a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POW_RECRGSTR","PRIMARY",pow07a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POW_RECBYALT","PRIMARY",pow07b_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POW_VENBYREC","PRIMARY",pow07c_key_tpl$,rd_table_chans$[all],status$
    dim poe01a_key$:poe01a_key_tpl$
    dim pow07a_key$:pow07a_key_tpl$
    dim pow07b_key$:pow07b_key_tpl$
    dim pow07c_key$:pow07c_key_tpl$

rem --- Run report overlay

    poe01a.firm_id$=firm_id$
    poe01a.vendor_id$=begvend$
    if cvs(begvend$,2)<>"" then poe01a.req_no$=begreq$
    flag=0
    read (poe01_dev,key=poe01a.firm_id$+poe01a.vendor_id$,dom=sort_req_file)
    flag=1
    poe01a_key$=keyp(poe01_dev,end=done)

sort_req_file:  rem --- Sort requisition file

    while more
        if !flag then poe01a_key$=key(poe01_dev,end=*break)
        if pos(firm_id$=poe01a_key$)<>1 break
        if endvend$<>"" and poe01a_key.vendor_id$>endvend$ break
        if endreq$<>"" and poe01a_key.req_no$>endreq$ break
        read record (poe01_dev,key=poe01a_key$) poe01a$; rem "This Key=K$ phrase is needed
        if begreq$<>"" and poe01a.req_no$<begreq$ then continue
        if poe01a.hold_flag$="Y" then continue
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        rem --- Does record meet selection criteria?

        if begdate$<>"" and enddate$<>""
            if (cvs(poe01a.promise_date$,2)<>"" and cvs(poe01a.not_b4_date$,2)<>"" and cvs(poe01a.reqd_date$,2)<>"")
                if begdate$<>"" and (poe01a.promise_date$<begdate$ or poe01a.not_b4_date$<begdate$ or poe01a.reqd_date$<begdate$) then continue
                if enddate$<>"" and (poe01a.promise_date$>enddate$ or poe01a.not_b4_date$>enddate$ or poe01a.reqd_date$>enddate$) then continue
            endif
        endif

rem --- Get vendor for alpha sort

        if sequence$="A"
            apm01a.firm_id$=poe01a.firm_id$
            apm01a.vendor_id$=poe01a.vendor_id$
            apm01a.req_no$=poe01a.req_no$
            find record (apm01_dev,key=apm01a.firm_id$+apm01a.vendor_id$+apm01a.req_no$,dom=*next) apm01a$
        endif

rem --- Write sort record

        pow07a.firm_id$=firm_id$
        pow07b.firm_id$=firm_id$
        pow07c.firm_id$=firm_id$
        if sequence$="A"
            pow07b.alt_sequence$=apm01a.alt_sequence$
            pow07b.vendor_id$=poe01a.vendor_id$
            pow07b.req_no$=poe01a.req_no$
            write record (pow07b_dev,key=pow07b.firm_id$+pow07b.alt_sequence$+pow07b.vendor_id$+pow07b.req_no$) pow07b$
        endif
        if sequence$="V"
            pow07a.vendor_id$=poe01a.vendor_id$
            pow07a.req_no$=poe01a.req_no$
            write record (pow07a_dev,key=pow07a.firm_id$+fill(10)+pow07a.vendor_id$+pow07a.req_no$) pow07a$
        endif
        if sequence$="R"
            pow07c.req_no$=poe01a.req_no$
            pow07c.vendor_id$=poe01a.vendor_id$
            write record (pow07c_dev,key=pow07c.firm_id$+fill(10)+pow07c.req_no$+pow07c.vendor_id$) pow07c$
        endif

rem --- Loop back for next requisition
        flag=0
    wend

done:
    run pgmdir$+"por_reqsnreg_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
