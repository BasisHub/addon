rem --- Purchase Requisition Register (Report Overlay)
rem --- Program por_reqsnreg_o1 v8.0.0 16Jul2007 (por_ab)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 11:10:03)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Document initializations
   
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision num(ivs01a.precision$)
    dim headings$[5],o[14],vendor[1],req[1],report[1],totals[1]
    dim c0$(22),c1$(60),d0$(24),d1$(64),d[20],description$(40),r0$(8),r1$(30)
    dim w0$(18),w1$(48),w2$(32),w3$(22),w4$(40),w[12],y0$(4),y1$(32)
    dim h1$(132),h2$(132)
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    when$=sysinfo.system_date$
    clock$=""
    number=0
    headings=5
    width=132
    page=0
    l9=59
    l=l9+1
    done=0
    cost$="Avg"
    if sequence$="A" headings$[1]=sysinfo.task_desc$+" By Vendor Alternate Sequence"
    if sequence$="V" headings$[1]=sysinfo.task_desc$+" By Vendor"
    if sequence$="R" headings$[1]=sysinfo.task_desc$+" By Requisition Number"
    if ivs01a.cost_method$="S" cost$="Std"
    if ivs01a.cost_method$="R" cost$="Rep"
    more=1

rem --- Document columns

    dim columns$[11,10]
    columns = 11
    columns$[0,0]="Seq^Code",           columns$[0,1]="C", columns$[0,2]="6"
    columns$[1,0]="Whse^Item",          columns$[1,1]="C", columns$[1,2]="10"
    columns$[2,0]="Not^Before",         columns$[2,1]="C", columns$[2,2]="10"
    columns$[3,0]="Date^Required",      columns$[3,1]="C", columns$[3,2]="10"
    columns$[4,0]="Date^Promised",      columns$[4,1]="C", columns$[4,2]="10"
    columns$[5,0]="UM",                 columns$[5,1]="C", columns$[5,2]="5"
    columns$[6,0]="Quantity",           columns$[6,1]="N", columns$[6,2]="10", columns$[6,3]=m2$
    columns$[7,0]="Std^Cost",           columns$[7,1]="N", columns$[7,2]="10", columns$[7,3]=m3$
    columns$[8,0]="Std Cost^Extension", columns$[8,1]="N", columns$[8,2]="10", columns$[8,3]=m1$
    columns$[9,0]="PO^Cost",            columns$[9,1]="N", columns$[9,2]="10", columns$[9,3]=m3$
    columns$[10,0]="PO Cost^Extension", columns$[10,1]="N",columns$[10,2]="12",columns$[10,3]=m1$
    columns$[11,0]="Source",            columns$[11,1]="C",columns$[11,2]="10"
    rem gosub req_subheading

rem --- Print positions

    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,7,12
    o[0]=0
    o[1]=4
    o[2]=7
    o[3]=10
    o[4]=o[3]+itemlen+1
    o[5]=o[4]+9
    o[6]=o[5]+9
    o[7]=o[6]+9
    o[13]=width-6
    o[12]=o[13]-m1
    o[14]=o[3]+41
    o[11]=o[12]-m3
    o[10]=o[11]-m1
    o[9]=o[10]-m3
    o[8]=o[9]-m2

rem --- Report headings

    x1$="First"
    x2$="Last"
    if begvend$="" goto no_beg_vendor
    v$=begvend$
    gosub ret_vendor
    x1$=vendor$

no_beg_vendor:

    if endvend$="" goto no_end_vendor
    v$=endvend$
    gosub ret_vendor
    x2$=vendor$

no_end_vendor:

    h1$(1)="From Vendor: "+x1$
    h2$(1)="  To Vendor: "+x2$
    x1$="First"
    x2$="Last"
    if begreq$<>"" x1$=begreq$
    if endreq$<>"" x2$=endreq$
    x1=18+max(5,max(len(x1$),len(x2$)))
    x2=int((width-x1)/2)
    h1$(x2,x1)="From Requisition: "+x1$
    x1$="First"
    h2$(x2,x1)="  To Requisition: "+x2$
    x2$="Last"
    if begdate$<>"" x1$=fndate$(begdate$)
    if enddate$<>"" x2$=fndate$(enddate$)
    x1=max(len(x1$),len(x2$))
    x2=width-x1-len(datetitle$)-6
    h1$(x2)="From "+datetitle$+": "+x1$
    h2$(x2)="  To "+datetitle$+": "+x2$
    headings$[3]=h1$
    headings$[4]=h2$

rem --- Position files

    call pgmdir$ + "adc_progress.aon","N","","","","",0,pow07a_dev,1,meter_num,status

rem    if sequence$="A" then read (pow07b_dev,key=firm_id$,dom=*next)
    if sequence$="V" then read (pow07a_dev,key=firm_id$,dom=*next)
rem    if sequence$="R" then read (pow07c_dev,key=firm_id$,dom=*next)

    while more; rem --- Begin loop for header file

        action=pos(sequence$="AVR")
        alpha_seq=1
        vend_seq=2
        req_no_seq=3
        flag=0
escape
        switch action
            case alpha_seq
                pow07b_key$=key(pow07b_dev,end=*break)
                if pos(firm_id$=pow07b_key$)<>1 break
                read (pow07b_dev)
                poe01a.firm_id$=pow07b_key.firm_id$
                poe01a.vendor_id$=pow07b_key.vendor_id$
                poe01a.req_no$=pow07b_key.req_no$
                if t0$<>pow07b_key.alt_sequence$+pow07b_key.vendor_id$ gosub vend_break
                if t1$<>pow07b_key.req_no$ gosub req_break
                break
            case vend_seq
                pow07a_key$=key(pow07a_dev,end=*break)
                if pos(firm_id$=pow07a_key$)<>1 break
                read (pow07a_dev)
                poe01a.firm_id$=pow07a_key.firm_id$
                poe01a.vendor_id$=pow07a_key.vendor_id$
                poe01a.req_no$=pow07a_key.req_no$
                if t0$<>pow07a_key.vendor_id$ gosub vend_break
                if t1$<>pow07a_key.req_no$ gosub req_break
                break
            case req_no_seq
                pow07c_key$=key(pow07c_dev,end=*break)
                if pos(firm_id$=pow07c_key$)<>1 break
                read (pow07c_dev)
                poe01a.firm_id$=pow07c_key.firm_id$
                poe01a.vendor_id$=pow07c_key.vendor_id$
                poe01a.req_no$=pow07c_key.req_no$
                if t1$<>pow07c_key.req_no$ gosub ret_vendor
                break
            case default
                flag=1
                break
        swend
        if flag then continue

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        
        if sequence$="A"
            apm01a.firm_id$=pow07b_key.firm_id$
            apm01a.vendor_id$=pow07b_key.vendor_id$
        endif
        if sequence$="V"
            apm01a.firm_id$=pow07a_key.firm_id$
            apm01a.vendor_id$=pow07a_key.vendor_id$
        endif
        if sequence$="R"
            apm01a.firm_id$=pow07c_key.firm_id$
            apm01a.vendor_id$=pow07c_key.vendor_id$
        endif
        
        find record (poe01_dev,key=poe01a.firm_id$+poe01a.vendor_id$+poe01a.req_no$,dom=*continue) poe01a$
        find record (apm01_dev,key=apm01a.firm_id$+apm01a.vendor_id$,dom=*next) apm01a$
        if l+5<l9 gosub req_subheading

rem --- Position detail file

        read (poe11_dev,key=poe01a.firm_id$+poe01a.vendor_id$+poe01a.req_no$+$ff$,dom=*next); rem requisition detail

        while more; rem --- Begin loop for detail file

            poe11a_key$=key(poe11_dev,end=*break)
            if pos(poe01a.firm_id$+poe01a.vendor_id$+poe01a.req_no$=poe11a_key$)<>1 break

rem --- Read record from detail file

            read record (poe11_dev) poe11a$
            if pom02a_key.firm_id$<>firm_id$ or pom02a_key.po_line_code$<>poe11a.po_line_code$

rem --- Clear templated record w/o losing template

                pom02a.firm_id$=firm_id$
                pom02a.po_line_code$=poe11a.po_line_code$
                find record (pom02_dev,key=pom02a.firm_id$+pom02a.po_line_code$,dom=other_line) pom02a$
            endif

rem --- Initialize detail line fields

            needed=2
            source$="Entry"
            wo$=""
            before$=cvs(poe01a.not_b4_date$,2)
            promised$=cvs(poe01a.promise_date$,2)
            if pom02a.dropship$="Y" then needed=3
            if poe11a.source_code$="R" then source$="Replen"
            if poe11a.source_code$="W" then source$="WO"
            if poe11a.source_code$="M" then source$="MRP"
            if cvs(poe11a.promise_date$,2)<>"" then promised$=poe11a.promise_date$
            if cvs(poe11a.not_b4_date$,2)<>"" then before$=poe11a.not_b4_date$
            if cvs(before$,2)<>"" then before$=fndate$(before$)
            if cvs(promised$,2)<>"" then promised$=fndate$(promised$)

rem --- Work order?

            if sf$<>"N" 
                if cvs(poe11a.wo_no$+poe11a.sequence_no$,2)<>""
                    wo$=" WO: "+poe11a.wo_no$
                    if cvs(poe11a.sequence_no$,2)<>"" then wo$=wo$+"-"+poe11a.sequence_no$
                endif
            endif

rem --- Retrieve inventory item for S lines

            ivm01a.firm_id$=firm_id$
            ivm01a.item_id$=poe11a.item_id$
            ivm02a.firm_id$=firm_id$
            ivm02a.warehouse_id$=poe11a.warehouse_id$
            ivm02a.item_id$=poe11a.item_id$
            ivm02a.unit_cost=0
            if pom02a.line_type$="S"
                find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
                find record (ivm02a_dev,key=ivm02a_key$,dom=*continue) ivm02a$
                description$=ivm01a.description$
            endif

rem --- Calculate extensions and branch based on line type

            qty = poe11a.req_quantity
            iv_extension=0
            if pom02a.line_type$="O" then qty=1
            precision 2
            po_extension=poe11a.unit_cost*qty
            if pom02a.line_type$="S" then iv_extension=ivm02a.unit_cost* qty*poe11a.conv_factor
            precision num(ivs01a.precision$)

            action=pos(pom02a.line_type$="SNVMO")
            std_line=1
            non_stock_line=2
            vend_line=3
            msg_line=4
            other_type_line=5
            flag=0

            switch action
                case std_line

                    xwk = fnblank(3)
                    OutVect!.addItem(poe11a.po_line_no$)
                    OutVect!.addItem(poe11a.po_line_code$)
                    OutVect!.addItem(poe11a.warehouse_id$)
                    OutVect!.addItem(poe11a.item_number$)
                    OutVect!.addItem(before$)
                    OutVect!.addItem(fndate$(poe11a.reqd_date$))
                    OutVect!.addItem(promised$)
                    OutVect!.addItem(poe11a.unit_measure$)
                    OutVect!.addItem(str(poe11a.req_qty$:m2$))
                    OutVect!.addItem(str(ivm02a.unit_cost$:m3$))
                    OutVect!.addItem(str(iv_extension:m1$))
                    OutVect!.addItem(str(poe11a.unit_cost$:m3$))
                    OutVect!.addItem(str(po_extension:m1$))
                    OutVect!.addItem(source$)
                    OutVect!.addItem(ivm01a.description$)
                    OutVect!.addItem(wo$)
                    l=l+needed
                    break

               case non_stock_line
                                
                    OutVect!.addItem(poe11a.po_line_no$)
                    OutVect!.addItem(poe11a.po_line_code$)
                    OutVect!.addItem(poe11a.warehouse_id$)
                    OutVect!.addItem(poe11a.item_number$)
                    OutVect!.addItem(before$)
                    OutVect!.addItem(fndate$(poe11a.reqd_date$))
                    OutVect!.addItem(promised$)
                    OutVect!.addItem(poe11a.unit_measure$)
                    OutVect!.addItem(str(poe11a.req_qty$:m2$))
                    OutVect!.addItem(str(ivm02a.unit_cost$:m3$))
                    OutVect!.addItem(str(iv_extension:m1$))
                    OutVect!.addItem(str(poe11a.unit_cost$:m3$))
                    OutVect!.addItem(str(po_extension:m1$))
                    OutVect!.addItem(source$)
                    OutVect!.addItem(poe11a.order_memo$)
                    OutVect!.addItem(wo$)
                    l=l+needed
                    break

            case vend_line

                    OutVect!.addItem(poe11a.po_line_no$)
                    OutVect!.addItem(poe11a.po_line_code$)
                    OutVect!.addItem(poe11a.warehouse_id$)
                    OutVect!.addItem(poe11a.item_number$)
                    OutVect!.addItem(before$)
                    OutVect!.addItem(fndate$(poe11a.reqd_date$))
                    OutVect!.addItem(promised$)
                    OutVect!.addItem(source$)
                    OutVect!.addItem(wo$)
                    l=l+needed
                    break

            case msg_line

                    OutVect!.addItem(poe11a.po_line_no$)
                    OutVect!.addItem(poe11a.po_line_code$)
                    OutVect!.addItem(poe11a.warehouse_id$)
                    OutVect!.addItem(before$)
                    OutVect!.addItem(fndate$(poe11a.reqd_date$))
                    OutVect!.addItem(promised$)
                    OutVect!.addItem(source$)
                    OutVect!.addItem(poe11a.order_memo$)
                    OutVect!.addItem(wo$)
                    l=l+needed
                    break

            case other_type_line

                    gosub other_line
                    break

            case default
                    flag=1
                    break
            swend
            if flag then continue

rem --- Drop ship?

            if pom02a.dropship$="Y"
                dim customer$(o[8]-o[3]+1)
                arm01a.firm_id$=firm_id$
                arm01a.customer_id$=poe11a.customer_id$
                find record (arm01_dev,key=arm01a.firm_id$+arm01a.customer_id$,dom=*next) arm01a$
                customer$="Customer "+fnmask$(arm01a.customer_id$,ars01a.cust_output$)+" "+arm01a.cust_name$
                if cvs(poe11a.order_number$,2)<>"" then customer$(len(customer$)-16)=" (Order " + poe11a.order_number$ + ")"
                OutVect!.addItem(customer$)
            endif

rem --- Accumulate totals

            req[0]=req[0]+iv_extension
            req[1]=req[1]+po_extension
            number=number+1
            vendor[0]=vendor[0]+iv_extension
            vendor[1]=vendor[1]+po_extension
            report[0]=report[0]+iv_extension
            report[1]=report[1]+po_extension

        wend;   rem --- Loop back for next detail

    wend;       rem --- Loop back for next header
escape
done: rem --- All done

    done=1
    action=pos(sequence$="AVR")
    alt_seq=1
    vend_seq=2
    req_seq=3

    switch action
        case alt_seq
        case vend_seq
            gosub vend_break
            break
        case req_seq
            gosub req_break
            break
    swend

    totals$="Total For Register"
    totals[0]=report[0]
    totals[1]=report[1]
    gosub print_totals
    if number=0 then goto std_exit
escape
    run pgmdir$ +"pou_aa.aon"

req_subheading: rem --- Requisition subheading

     xwk = fnblank(12)
     OutVect!.addItem(vendor$) 
     rem xwk = fnblank(3)
     OutVect!.addItem("Requisition #: ")
     OutVect!.addItem(poe01a.req_no$)
     OutVect!.addItem("Requisition Date: ")
     OutVect!.addItem(fndate$(poe01a.ord_date$))
     xwk = fnblank(12)
     l=l+3
     return

vend_break: rem --- Vendor break

    if t0$<>""
        gosub req_break
        totals$="Total For "+cvs(vendor$,2)
        totals[0]=vendor[0]
        totals[1]=vendor[1]
        gosub print_totals
    endif
    if done return
    dim vendor[1]
    t0$=poe01a.vendor_id$
    v$=t0$
    if sequence$="A" then t0$=pow07b_key.alt_sequence$+pow07b_key.vendor_id$
    gosub ret_vendor
    if pagebreak$="Y" then l=l9+1
    return

req_break: rem --- Requisition break

    if t1$<>""
        let totals$="Total For Requisition " + t1$
        let totals[0]=req[0],totals[1]=req[1]
        gosub print_totals
    endif

    if done then return
    dim req[1]
    let t1$=poe01a.req_no$
    if sequence$="R" and pagebreak$="Y" then l=l9+1
    return

ret_vendor: rem --- Retrieve vendor

    apm01a.firm_id$=firm_id$
    apm01a.vendor_id$=v$
    find record (apm01_dev,key=apm01a.firm_id$+apm01a.vendor_id$,dom=*next) apm01a$
rem    vendor$=fnmask$(apm01a.vendor_id$,m0$)+" "+apm01a.vendor_name$
    vendor$=apm01a.vendor_id$+" "+apm01a.vendor_name$
    return

print_totals:   rem --- Print totals

    OutVect!.addItem(str(len(totals$)))
    OutVect!.addItem(totals$)
    OutVect!.addItem(str(totals[0]:m1$))
    OutVect!.addItem(str(totals[1]:m1$))
    let l=l+1
    return

other_line:

    OutVect!.addItem(poe11a.po_line_no$)
    OutVect!.addItem(poe11a.po_line_code$)
    OutVect!.addItem(poe11a.warehouse_id$)
    OutVect!.addItem(before$)
    OutVect!.addItem(fndate$(poe11a.reqd_date$))
    OutVect!.addItem(promised$)
    OutVect!.addItem(str(ivm02a.unit_cost$:m3$))
    OutVect!.addItem(str(po_extension:m1$))
    OutVect!.addItem(source$)
    OutVect!.addItem(poe11a.order_memo$)
    OutVect!.addItem(wo$)
    l=l+needed
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call STBL("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$ +"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
