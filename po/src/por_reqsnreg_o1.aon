rem --- Purchase Requisition Register (Report Overlay)
rem --- Program por_reqsnreg_o1 v8.0.0 16Jul2007 (por_ab)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 11:10:03)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd/%Mz/%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Initializations

    precision num(ivs01a.precision$)
    dim headings$[5],o[14],vendor[1],req[1],report[1],totals[1]
    dim c0$(22),c1$(60),d0$(24),d1$(64),d[20],description$(40),r0$(8),r1$(30)
    dim w0$(18),w1$(48),w2$(32),w3$(22),w4$(40),w[12],y0$(4),y1$(32)
    dim h1$(132),h2$(132)
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    when$=sysinfo.system_date$
    clock$=""
    number=0
    headings=5
    width=132
    page=0
    l9=59
    l=l9+1
    done=0
    cost$="Avg"
    if sequence$="A" headings$[1]=sysinfo.task_desc$+" By Vendor Alternate Sequence"
    if sequence$="V" headings$[1]=sysinfo.task_desc$+" By Vendor"
    if sequence$="R" headings$[1]=sysinfo.task_desc$+" By Requisition Number"
    if ivs01a.cost_method$="S" cost$="Std"
    if ivs01a.cost_method$="R" cost$="Rep"
    more=1

rem --- Print positions

    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,7,12
    o[0]=0
    o[1]=4
    o[2]=7
    o[3]=10
    o[4]=o[3]+itemlen+1
    o[5]=o[4]+9
    o[6]=o[5]+9
    o[7]=o[6]+9
    o[13]=width-6
    o[12]=o[13]-m1
    o[14]=o[3]+41
    o[11]=o[12]-m3
    o[10]=o[11]-m1
    o[9]=o[10]-m3
    o[8]=o[9]-m2

rem --- Report headings

    x1$="First"
    x2$="Last"
    if begvend$="" goto no_beg_vendor
    v$=begvend$
    gosub ret_vendor
    x1$=vendor$

no_beg_vendor:

    if endvend$="" goto no_end_vendor
    v$=endvend$
    gosub ret_vendor
    x2$=vendor$

no_end_vendor:

    h1$(1)="From Vendor: "+x1$
    h2$(1)="  To Vendor: "+x2$
    x1$="First"
    x2$="Last"
    if begreq$<>"" x1$=begreq$
    if endreq$<>"" x2$=endreq$
    x1=18+max(5,max(len(x1$),len(x2$)))
    x2=int((width-x1)/2)
    h1$(x2,x1)="From Requisition: "+x1$
    x1$="First"
    h2$(x2,x1)="  To Requisition: "+x2$
    x2$="Last"
    if begdate$<>"" x1$=fndate$(begdate$)
    if enddate$<>"" x2$=fndate$(enddate$)
    x1=max(len(x1$),len(x2$))
    x2=width-x1-len(datetitle$)-6
    h1$(x2)="From "+datetitle$+": "+x1$
    h2$(x2)="  To "+datetitle$+": "+x2$
    headings$[3]=h1$
    headings$[4]=h2$

rem --- Position files

    call pgmdir$ + "adc_progress.aon","N","","","","",0,poe01a_dev,1,meter_num,status
    read (pow07_dev,key=firm_id$,dom=*next)

    while more; rem --- Begin loop for header file

        pow07a_key$=key(pow07_dev,end=*break)
        if pos(firm_id$=pow07a_key$)<>1 break
        read (pow07_dev)

        action=pos(sequence$="AVR")
        alpha_sequence=1
        vendor_sequence=2
        requisition_number_sequence=3

        switch action
            case alpha_sequence

                    poe01a_key$ = pow07a_key.firm_id$ + pow07a_key.req_number$
                    x$=pow07a_key.reserved_str$ + " " + pow07a_key.req_number$
                    if t0$<>pow07a_key.vendor_nbr$ gosub vend_break
                    if t1$<>pow07a_key.req_number$ gosub req_break
                    break

            case vendor_sequence

                    poe01a_key$ = pow07a_key.firm_id$ + pow07a_key.req_number$
                    x$=fnmask$(pow07a_key.vendor_nbr$,m0$)+" "+pow07a_key.req_number$
                    if t0$<>pow07a_key.vendor_nbr$ gosub vend_break
                    if t1$<>pow07a_key.req_number$ gosub req_break
                    break

            case requisition_number_sequence

                    poe01a_key$ = pow07a_key.firm_id$ + pow07a_key.vendor_nbr$ + pow07a_key.req_number$
                    x$=pow07a_key.req_number$
                    if t1$<>pow07a_key.req_number$ gosub ret_vendor
                    break

            case default

                    continue
                    break
        swend

        call pgmdir$+"adc_progress.aon","S","","","","",0,poe01a_dev,1,meter_num,status

        apm01a_key$=pow07a.firm_id$ + pow07a.vendor_id$
        apm01a.vendor_name$=""
        find record (poe01a_dev,key=poe01a_key$,dom=*continue) poe01a$;  rem requisition header
        find record (apm01a_dev,key=apm01a_key$,dom=*next) apm01a$;      rem vendor master
        if l+5>l9 gosub report_heading else gosub req_subheading

rem --- Position detail file

        read (poe11_dev,key=poe01a_key$,dom=*next); rem requisition detail

        while more; rem --- Begin loop for detail file

            poe11a_key$=key(poe11_dev,end=*break)
            if pos(poe01a_key$=poe11a_key$)<>1 *break

rem --- Read record from detail file

            read record (poe11_dev) poe11a$
            if pom02a_key.firm_id$ + pom02a_key.po_line_code$=firm_id$+poe11a.po_line_code$ 
                goto init_detail_line

rem --- Clear templated record w/o losing template

            pom02a.code_desc$=""
            pom02a_key.firm_id$ = firm_id$,pom02a_key.po_line_code$=poe11a.po_line_code$
            find record (pom02a_dev, key=pom02a_key$, dom=other_line) pom02a$

init_detail_line: rem --- Initialize detail line fields

            needed=2
            source$="Entry"
            wo$=""
            before$=cvs(poe01a.not_b4_date$,2)
            promised$=cvs(poe01a.promise_date$,2)
            if pom02a.dropship$="Y" needed=3
            if poe11a.source_code$="R" source$="Replen"
            if poe11a.source_code$="W" source$="WO"
            if poe11a.source_code$="M" source$="MRP"
            if cvs(poe11a.promise_date$,2)<>"" promised$=poe11a.promise_date$
            if cvs(poe11a.not_b4_date$,2)<>"" before$=poe11a.not_b4_date$
            if cvs(before$,2)<>"" before$=fndate$(before$)
            if cvs(promised$,2)<>"" promised$=fndate$(promised$)

rem --- Work order?

            if sf$="N" goto ret_inv_items
            if cvs(poe11a.wo_no$+poe11a.sequence_no$,2)=""
                goto ret_inv_items
            wo$=" WO: "+poe11a.wo_no$
            if cvs(poe11a.sequence_no$,2)<>"" 
                wo$=wo$+"-"+poe11a.sequence_no$

ret_inv_items: rem --- Retrieve inventory item for S lines

            ivm01a_key$ = firm_id$ + poe11a.item_id$
            ivm01a.product_type$ = ""
            description$(1) = "(Not On File)"
            ivm02a_key$ = firm_id$ + poe11a.warehouse_id$ + poe11a.item_id$
            ivm02a.location$=""
            if pom02a.line_type$<>"S" 
                goto calc_ext_branch
            find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
            find record (ivm02a_dev,key=ivm02a_key$,dom=*continue) ivm02a$

rem not using parameterized description lengths...rem description$(1)=fnitem$(c1$,i[3],i[4],i[5]).CAH
            description$(1)=ivm01a.description$

calc_ext_branch: rem --- Calculate extensions and branch based on line type

            qty = num(poe11a.req_qty$)
            iv_extension=0
            if pom02a.line_type$="O" qty=1
            precision 2
            po_extension=num(poe11a.unit_cost$)*qty
            if pom02a.line_type$="S"
                iv_extension=num(ivm02a.unit_cost$)* qty*num(poe11a.conv_factor$)
            precision num(ivs01a.precision$)

            action=pos(y1$(21,1)="SNVMO")
            standard_line=1
            non_stock_line=2
            vend_part_no_line=3
            message_line=4
            other_type_line=5

            switch action
                case standard_line

                        if l+needed>l9 gosub report_heading
                        print (printer_dev) @(o[0]),poe11a.po_line_nbr$,
:                                           @(o[1]),poe11a.po_line_code$,
:                                           @(o[2]),poe11a.warehouse_id$,
:                                           @(o[3]),poe11a.item_number$,
:                                           @(o[4]),before$,
:                                           @(o[5]),fndate$(poe11a.reqd_date$),
:                                           @(o[6]),promised$,
:                                           @(o[7]),poe11a.unit_measure$,
:                                           @(o[8]),poe11a.req_qty$:m2$,
:                                           @(o[9]),d[11]:m3$,
:                                           @(o[10]),iv_extension:m1$,
:                                           @(o[11]),poe11a.unit_cost$:m3$,
:                                           @(o[12]),po_extension:m1$,
:                                           @(o[13]),source$

                        print (printer_dev) @(o[3]),ivm01a.description$,
:                                           @(o[14]),wo$
                        l=l+needed
                        break

                case non_stock_line

                        if l+needed>l9 gosub report_heading
                        print (printer_dev) @(o[0]),poe11a.po_line_nbr$,
:                                           @(o[1]),poe11a.po_line_code$,
:                                           @(o[2]),poe11a.warehouse_id$,
:                                           @(o[3]),poe11a.item_number$,
:                                           @(o[4]),before$,
:                                           @(o[5]),fndate$(poe11a.reqd_date$),
:                                           @(o[6]),promised$,
:                                           @(o[7]),poe11a.unit_measure$,
:                                           @(o[8]),poe11a.req_qty$:m2$,
:                                           @(o[11]),poe11a.unit_cost$:m3$,
:                                           @(o[12]),po_extension:m1$,
:                                           @(o[13]),source$

                        print (printer_dev) @(o[3]),poe11a.order_memo$,
:                                           @(o[14]),wo$
                        l=l+needed
                        break

                case vend_part_no_line

                        if l+needed>l9 gosub report_heading
                        print (printer_dev) @(o[0]),poe11a.po_line_nbr$,
:                                           @(o[1]),poe11a.po_line_code$,
:                                           @(o[2]),poe11a.warehouse_id$,
:                                           @(o[3]),poe11a.item_number$,
:                                           @(o[4]),before$,
:                                           @(o[5]),fndate$(poe11a.reqd_date$),
:                                           @(o[6]),promised$,
:                                           @(o[13]),source$

                        print (printer_dev) @(o[14]),wo$
                        l=l+needed
                        break

                case message_line

                        if l+needed>l9 gosub report_heading
                        print (printer_dev) @(o[0]),poe11a.po_line_nbr$,
:                                           @(o[1]),poe11a.po_line_code$,
:                                           @(o[2]),poe11a.warehouse_id$,
:                                           @(o[4]),before$,
:                                           @(o[5]),fndate$(poe11a.reqd_date$),
:                                           @(o[6]),promised$,
:                                           @(o[13]),source$
                        print (printer_dev) @(o[3]),poe11a.order_memo$,
:                                           @(o[14]),wo$
                        l=l+needed
                        break

                case other_type_line

                        gosub other_line
                        break

                case default

                        continue
                        break

            swend

rem --- Drop ship?

            if pom02a.dropship$<>"Y" goto acc_totals
            dim customer$(o[8]-o[3]+1)
            arm01a_key$=firm_id$+poe11a.customer_id$
            arm01a.cust_name$="(Not On File)"
            find record (arm01a_dev,key=arm01a_key$,dom=*next) arm01a$
            customer$(1)="Customer "+fnmask$(arm01a_key.customer_id$,p7$)+" "+arm01a.cust_name$
            if cvs(poe11a.order_number$,2)<>""
                customer$(len(customer$)-16)=" (Order " + poe11a.order_number$ + ")"
            print (printer_dev)@(o[3]),customer$

acc_totals: rem --- Accumulate totals

            req[0]=req[0]+iv_extension
            req[1]=req[1]+po_extension
            number=number+1
            vendor[0]=vendor[0]+iv_extension
            vendor[1]=vendor[1]+po_extension
            report[0]=report[0]+iv_extension
            report[1]=report[1]+po_extension

        wend;   rem --- Loop back for next detail

    wend;       rem --- Loop back for next header

done: rem --- All done
escape; rem done
    done=1
    action=pos(sequence$="AVR")
    alt_vend_sequence=1
    vend_sequence=2
    req_sequence=3

    switch action
        case alt_vend_sequence
        case vend_sequence
            gosub vend_break
            break
        case req_sequence
            gosub req_break
            break
    swend

    totals$="Total For Register"
    totals[0]=report[0]
    totals[1]=report[1]

    gosub print_totals
    if number=0 goto std_exit

    call pgmdir$ +"adc_progress.aon","D","","","","",0,poe01a_dev,1,meter_num,status
    run pgmdir$ +"pou_aa.bbx"

rem --- Document columns

    dim columns$[21,3]
    columns$[0,0]="Customer",columns$[0,1]="C",columns$[0,2]=str(m0+1)
    columns$[1,0]="Customer",columns$[1,1]="C",columns$[1,2]=str(m0+1)
    columns$[2,0]="Customer",columns$[2,1]="C",columns$[2,2]=str(m0+1)
    columns$[3,0]="Customer",columns$[3,1]="C",columns$[3,2]=str(m0+1)
    columns$[4,0]="Customer",columns$[4,1]="C",columns$[4,2]=str(m0+1)
    columns$[5,0]="Customer",columns$[5,1]="C",columns$[5,2]=str(m0+1)
    columns$[6,0]="Customer",columns$[6,1]="C",columns$[6,2]=str(m0+1)
    columns$[7,0]="Customer",columns$[7,1]="C",columns$[7,2]=str(m0+1)
    columns$[8,0]="Customer",columns$[8,1]="C",columns$[8,2]=str(m0+1)
    columns$[9,0]="Customer",columns$[9,1]="C",columns$[9,2]=str(m0+1)
    columns$[10,0]="Customer",columns$[10,1]="C",columns$[10,2]=str(m0+1)
    columns$[11,0]="Customer",columns$[11,1]="C",columns$[11,2]=str(m0+1)
    columns$[12,0]="Customer",columns$[12,1]="C",columns$[12,2]=str(m0+1)
    columns$[13,0]="Customer",columns$[13,1]="C",columns$[13,2]=str(m0+1)
    columns$[14,0]="Customer",columns$[14,1]="C",columns$[14,2]=str(m0+1)
    columns$[15,0]="Customer",columns$[15,1]="C",columns$[15,2]=str(m0+1)
    columns$[16,0]="Customer",columns$[16,1]="C",columns$[16,2]=str(m0+1)
    columns$[17,0]="Customer",columns$[17,1]="C",columns$[17,2]=str(m0+1)
    columns$[18,0]="Customer",columns$[18,1]="C",columns$[18,2]=str(m0+1)
    columns$[19,0]="Customer",columns$[19,1]="C",columns$[19,2]=str(m0+1)
    columns$[20,0]="Customer",columns$[20,1]="C",columns$[20,2]=str(m0+1)


report_heading: rem --- Report Heading

    l=headings+3
    call pgmdir$ +"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev) @(o[4]),"Not",
:                       @(o[5]),"Date",
:                       @(o[6]),"Date",
:                       @(o[9]+m3-5),cost$,
:                       @(o[10]+m1-10),cost$," Cost",
:                       @(o[11]+m3-5),"PO",
:                       @(o[12]+m1-10),"PO Cost"
    print (printer_dev) @(o[0]),"Seq",
:                       @(o[1]),"Cd",
:                       @(o[2]),"Wh",
:                       @(o[3]),"Item",
:                       @(o[4]),"Before",
:                       @(o[5]),"Required",
:                       @(o[6]),"Promised",
:                       @(o[7]),"UM",
:                       @(o[8]+m2-9),"Quantity",
:                       @(o[9]+m3-5),"Cost",
:                       @(o[10]+m1-10),"Extension",
:                       @(o[11]+m3-5),"Cost",
:                       @(o[12]+m1-10),"Extension",
:                       @(o[13]),"Source"
    gosub req_subheading
    return

req_subheading: rem --- Requisition subheading

    print (printer_dev)""
    print (printer_dev) @(o[0]),vendor$,
:                       @(55),"Requisition #: ",poe01a.req_number$,
:                       @(106),"Requisition Date: ",fndate$(poe01a.ord_date$)
    print (printer_dev)""
    l=l+3
    return

vend_break: rem --- Vendor break

    if t0$="" goto t0_null
    gosub req_break
    totals$="Total For "+cvs(vendor$,2)
    totals[0]=vendor[0]
    totals[1]=vendor[1]
    gosub print_totals

t0_null:

    if done return
    dim vendor[1]
    t0$=poe01a.vendor_nbr$
    v$=t0$
    if sequence$="A" t0$ = pow07a_key.alt_sequence$ + pow07a_key.vendor_nbr$
    gosub ret_vendor
    if pagebreak$="Y" l=l9+1
    return

req_break: rem --- Requisition break

    if t1$="" goto t1_null
    let totals$="Total For Requisition " + t1$
    let totals[0]=req[0],totals[1]=req[1]
    gosub print_totals

t1_null:

    if done return
    dim req[1]
    let t1$=poe01a.req_number$
    if sequence$="R" if pagebreak$="Y" l=l9+1
    return

ret_vendor: rem --- Retrieve vendor

    let apm01a_key$ = firm_id$ + v$, apm01a$(1)="(Not On File)"
    find record (apm01a_dev,key=apm01a_key$,dom=*next) apm01a$
    let vendor$=fnmask$(apm01a_key.vendor_id$,m0$) + " " + apm01a.vendor_name$

print_totals:   rem --- Print totals

    if l+1>l9 gosub report_heading
    print (printer_dev) @(o[10]-len(totals$)),totals$,
:                       @(o[10]),totals[0]:m1$,
:                       @(o[12]),totals[1]:m1$
    let l=l+1
    return

other_line:
    if l+needed>l9 gosub report_heading
        print (printer_dev) @(o[0]),poe11a.po_line_nbr$,
:                           @(o[1]),poe11a.po_line_code$,
:                           @(o[2]),poe11a.warehouse_id$,
:                           @(o[4]),before$,
:                           @(o[5]),fndate$(poe11a.reqd_date$),
:                           @(o[6]),promised$,
:                           @(o[11]),w[1]:m3$,
:                           @(o[12]),po_extension:m1$,
:                           @(o[13]),source$
        print (printer_dev) @(o[3]),poe11a.order_memo$,
:                           @(o[14]),wo$
        l=l+needed
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$) 
        if cvs(q$,2)="" return ""

        testdate$=""

        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)

        if testdate$<>"" 

            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

        endif

        return testdate$

    fnend    


rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)
escape ; rem error

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call STBL("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,poe01a_dev,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
