rem --- Purchase Order Cash Requirements Report (Print Overlay)
rem --- Program por_pocashreqmt_o1 v8.0.0 17Jul2007 (por_mb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 12:49:18)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Inits

    maxperiods=num(gls01a.total_pers$)

    for x=1 to maxperiods
        periodend$=periodend$+field(gls01a$,"per_ending_"+str(x:"00"))
    next x

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Init Data

    precision ivprecision
    dim potot[5],vendtot[5],grandtot[5],vendor$(6)
    printvtot$="N"
    gosub calc_heads
    more=1
    recs=0
    total_recs=0

rem --- Headings and print positions

    headings=5
    dim headings$[headings],o[11]
    width=132
    page=0
    l9=59
    l=l9+1
    sord_desc$=Translate!.getTranslation("AON_DETAIL");if summordet$="S" sord_desc$=Translate!.getTranslation("AON_SUMMARY")
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=sord_desc$+Translate!.getTranslation("AON__REPORT_STARTING_FROM_")
    if datefrom$=fill(8) headings$[2]=headings$[2]+Translate!.getTranslation("AON_FIRST_DATE") else headings$[2]=headings$[2]+fndate$(datefrom$)
    if whse$="" headings$[3]=Translate!.getTranslation("AON_FOR_ALL_WAREHOUSES")
    if whse$<>"" headings$[3]=Translate!.getTranslation("AON_FOR_WAREHOUSE_")+whse$

rem --- Columns

    columns = 10
    dim columns$[columns,10]
    columns$[0,0]=Translate!.getTranslation("AON_VENDOR_NO."), columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_NAME"),       columns$[1,1]="C",columns$[1,2]="25"
    columns$[2,0]=Translate!.getTranslation("AON_DATE_REQ"),   columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_DATE_PROM"),  columns$[3,1]="C",columns$[3,2]="10"
    columns$[4,0]=Translate!.getTranslation("AON_NOT_BEFORE"), columns$[4,1]="C",columns$[4,2]="10"
    columns$[5,0]=Translate!.getTranslation("AON_PAST_DUE"),   columns$[5,1]="N",columns$[5,2]=str(len(m1$)),columns$[5,3]=m1$,columns$[5,10]="T"

    let i=6

    for col=1 to 4
        if perdatet$[col]<>fill(8) and perdatef$[col]<>fill(8)
            if col=4
                columns$[i,0]=fndate$(perdatef$[col])+Translate!.getTranslation("AON_^_THRU_FUTURE_^")
            else 
                columns$[i,0]=fndate$(perdatef$[col])+Translate!.getTranslation("AON_^_THRU_^")+fndate$(perdatet$[col])
            endif

            columns$[i,1]="N",columns$[i,2]=str(len(m1$)),columns$[i,3]=m1$,columns$[i,10]="T"
        endif
        i=i+1
    next col

    columns$[10,0]=Translate!.getTranslation("AON_TOTAL"),columns$[10,1]="N",columns$[10,2]=str(len(m1$)),columns$[10,3]=m1$,columns$[10,10]="T"

rem --- Get key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_POHDR","PRIMARY",poe02a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","POE_PODET","PRIMARY",poe12a_key_tpl$,rd_table_chans$[all],status$

rem --- Position files

    call pgmdir$+"adc_progress.aon","N","POE_PODET","","","",0,poe12_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem --- Init read

    read (poe02_dev,key=firm_id$,dom=*next)

rem --- Read through PO headers

    while more

        dim poe02a_key$:poe02a_key_tpl$
        poe02a_key$=key(poe02_dev,end=*break)
        if poe02a_key.firm_id$<>firm_id$ break

    next_poe02a: 

        read record (poe02_dev,key=poe02a_key$) poe02a$

    rem --- Init detail file

        headprinted$="N"
        p12_key$=poe02a.firm_id$+poe02a.po_no$
        read (poe12_dev,key=p12_key$,dom=*next)

    rem --- Read through detail records

        while more

            dim poe12a_key$:poe12a_key_tpl$
            poe12a_key$=key(poe12_dev,end=*break)
            if poe12a_key.firm_id$+poe12a_key.po_no$<>poe02a.firm_id$+poe02a.po_no$ break
            read record (poe12_dev,key=poe12a_key$) poe12a$

        rem --- Test PO Detail for warehouse & line type

            if whse$<>"" and poe12a.warehouse_id$<>whse$ continue

            gosub getlinetype
            if pos(linetype$="SON")<>0

            rem --- Detail passed, so print header if nec & print detail

                total_recs=total_recs+1
                if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
                if status = 999 then goto std_exit

            rem --- Header rec prints if at least one detail passes date & whse

                if headprinted$<>"Y"
                    gosub testbreaks
                    headprinted$="Y"
                endif

                gosub printdetail
                recs=recs+1
            endif

        rem --- Accumulate totals; get next detail

            potot[prntcol]=potot[prntcol]+amount
            potot[5]=potot[5]+amount
            vendtot[prntcol]=vendtot[prntcol]+amount
            vendtot[5]=vendtot[5]+amount
            grandtot[prntcol]=grandtot[prntcol]+amount
            grandtot[5]=grandtot[5]+amount
            amount=0

        wend

    rem --- Done w/detail for this PO

        if headprinted$="Y" gosub pototals

    rem --- Loop up for next header record

    poe02a_loop: 

    wend

done: rem --- All Done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    gosub vendtotals
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    abc=fnblank(3)
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR") )
    OutVect!.addItem(Translate!.getTranslation("AON__REPORT_"))

    for col=0 to 5
        if col <> 5 then OutVect!.addItem(str(grandtot[col]:m1$)) else OutVect!.addItem(str(grandtot[col]))
    next col

    out_action$="FORMAT"
    goto std_exit

rem --- Print Detail Subroutine

printdetail: rem --- Set up variables

    dim datereq$(8),dateprom$(8),notb4date$(8)
    itemnum$=poe12a.item_id$
    memo$=cvs(pad(poe12a.order_memo$,20),2)
    if poe12a.reqd_date$<>fill(8) datereq$=fndate$(poe12a.reqd_date$)
    if poe12a.promise_date$<>fill(8) dateprom$=fndate$(poe12a.promise_date$)
    if poe12a.not_b4_date$<>fill(8) notb4date$=fndate$(poe12a.not_b4_date$)

rem --- Get the columns in which to print

    gosub whichcolumn

rem --- Figure amount to print

    qty=poe12a.qty_ordered-poe12a.qty_received
    amount=qty*poe12a.unit_cost

rem --- Print detail line

    if summordet$<>"D" goto done_printdetail
    dim pline$(132)
    pline$=poe12a.po_line_no$+" "
    if pos(linetype$="OMN")>0 pline$=pline$+memo$ else pline$=pline$+itemnum$(1,itemlen)

    abc=fnblank(1)
    OutVect!.addItem(pline$)
    OutVect!.addItem(datereq$)
    OutVect!.addItem(dateprom$)
    OutVect!.addItem(notb4date$)

    OutVect!.addItem(str(amount:m1$))
    abc=fnblank(4)
    OutVect!.addItem(str(amount))
    l=l+1

done_printdetail: 

    return

calc_heads: rem --- Calculate from/thru date column headings

    dim perdatef$[4],perdatet$[4]
    byperiod=1
    bydays=2

    switch pos(perordays$="PD")

        rem --- By period

        case byperiod

        rem --- Determine which period the aging date falls into

            year=num(datefrom$(1,4))
            mmdd$=datefrom$(5,4)

            for x=1 to maxperiods
                period=x
                if mmdd$>periodend$((x*4)-3,4) continue
                if x=1 if mmdd$>periodend$((maxperiods*4)-3,4) break
                if x>1 if mmdd$>periodend$(((x-1)*4)-3,4) break
                if x=1 if periodend$((x*4)-3,4)<periodend$(maxperiods*4-3,4) break
                if x>1 if periodend$((x*4)-3,4)<periodend$((x-1)*4-3,4) break
            next x

        rem --- Get current period beginning and ending dates

            if datefrom$(5,2)<periodend$(1,2) year=year-1
            call pgmdir$+"adc_perioddates.aon",gls01a_dev,period,year,                                                  begperiod$,endperiod$,status

            begdates$=begperiod$
            enddates$=endperiod$

        rem --- Calculate prior period beginning and ending dates

            base=period,baseyear=year

            for x=1 to 3
                period=base+x
                
                if period>maxperiods
                    period=period-maxperiods
                    year=baseyear+1
                endif
                
                call pgmdir$+"adc_perioddates.aon",gls01a_dev,period,year,                                                      begperiod$,endperiod$,status
                begdates$=begdates$+begperiod$
                enddates$=enddates$+endperiod$
            next x
            
            break

        rem --- By days

        case bydays

            agingdate$=datefrom$
            begdates$=agingdate$
            difference=num_days
            call pgmdir$+"adc_daydates.aon",agingdate$,newdate$,difference
            enddates$=newdate$

            for x=0 to 2
                newdate$=""
                difference=(num_days)*(x+1)+1
                call pgmdir$+"adc_daydates.aon",agingdate$,newdate$,difference
                begdates$=begdates$+newdate$
                newdate$=""
                
                if x=2 then 
                    enddates$=enddates$+"21001231"
                    continue
                endif
                
                difference=(num_days)*(x+2)
                call pgmdir$+"adc_daydates.aon",agingdate$,newdate$,difference
                enddates$=enddates$+newdate$
            next x
            
            break

        case default
            break

    swend

    for col=1 to 4
        perdatef$[col]=begdates$((col-1)*8+1,8)
        perdatet$[col]=enddates$((col-1)*8+1,8)
    next col

    return

daysheadings: rem --- Headings calculated w/user-entered days

    v$=datefrom$
    v=num_days
    v1$=""
    
    for col=1 to 4
        call pgmdir$+"adc_daydates.aon",v$,v1$,v
        perdatef$[col]=v$
        perdatet$[col]=v1$
        v$=v1$
        v1$=""

    rem --- Get day after date thru for next column's date from

        call pgmdir$+"adc_daydates.aon",v$,v1$,1
        v$=v1$
        v1$=""
        v=num_days
    next col
    
    perdatet$[4]="21001231"

    return

testbreaks: rem --- Test for Breaks

    if poe02a.vendor_id$<>vendor$
        if printvtot$="Y" gosub vendtotals
        gosub newvendor
        gosub newpo
        return
    endif

    if poe02a.po_no$<>ponum$ gosub newpo

    return

newvendor: rem --- New Vendor

    flag=0
    dim c0$(8),c1$(195),vendtot[5]
    vendname$=Translate!.getTranslation("AON_NOT_ON_FILE")
    vendor$=poe02a.vendor_id$
    printvtot$="Y"
    a01_key$=firm_id$+vendor$
    find record (apm01a_dev,key=a01_key$,dom=brnch1) apm01a$
    vendname$=apm01a.vendor_name$

brnch1: 

    OutVect!.addItem(fnmask$(vendor$(1,vendlen),vendomask$)+$00$+"B")
    OutVect!.addItem(vendname$+$00$+"B")

    return

newpo: rem --- New PO

    dim potot[5]
    ponum$=poe02a.po_no$
    apm10c.code_desc$=Translate!.getTranslation("AON_NOT_ON_FILE")
    apm10c.prox_or_days$="D"
    apm10c.due_days=0
    a10_key$=firm_id$+"C"+poe02a.ap_terms_code$
    find record (apm10c_dev,key=a10_key$,dom=brnch2) apm10c$
    termsdesc$=apm10c.code_desc$

brnch2: 

    type$=apm10c.prox_or_days$

    if flag then abc=fnblank(2)
    OutVect!.addItem("PO #: "+$00$+"B")
    OutVect!.addItem(ponum$+$00$+"B")
    OutVect!.addItem(Translate!.getTranslation("AON__TERMS_"))
    OutVect!.addItem(termsdesc$+$00$+"L")
    abc=fnblank(5)
    flag=1
    l=l+1

    return

vendtotals: rem --- Print Vendor total

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    abc=fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR")+$00$+"B")
    OutVect!.addItem(Translate!.getTranslation("AON__VENDOR_")+$00$+"B")
    OutVect!.addItem(fnmask$(vendor$(1,vendlen),vendomask$)+$00$+"B")

    for col=0 to 5
        if col <> 5 then OutVect!.addItem(str(vendtot[col]:m1$)+$00$+"B") else OutVect!.addItem(str(vendtot[col])+$00$+"B")
    next col

    abc=fnblank(11)
    l=l+2

    return

pototals: rem --- Print Purchase Order total

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    abc=fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR")+$00$+"B")
    OutVect!.addItem(" PO # "+$00$+"B")
    OutVect!.addItem(ponum$+$00$+"B")

    for col=0 to 5
        if col <> 5 then OutVect!.addItem(str(potot[col]:m1$)+$00$+"B") else OutVect!.addItem(str(potot[col])+$00$+"B")
    next col

    abc=fnblank(11)

    return

getlinetype: rem --- Get Line Type

    linetype$="N"
    p02_key$=poe12a.firm_id$+poe12a.po_line_code$
    find record (pom02a_dev,key=p02_key$,dom=brnch3) pom02a$
    linetype$=pom02a.line_type$

brnch3: 

    return

rem --- Determine which column to print amt in
whichcolumn: rem --- PRNTCOL=0=>Past Due....PRNTCOL=4=>Last from/thru date column
rem --- Calc date based on terms' due days

    from$=poe12a.reqd_date$,days=apm10c.due_days,calcd_date$=""
    call pgmdir$+"adc_duedate.aon",type$,from$,days,calcd_date$,status
    prntcol=0
    
    if calcd_date$<>fill(8) and calcd_date$>=perdatef$[1]
        for prntcol=1 to 4
            if calcd_date$<=perdatet$[prntcol] break
        next prntcol
    endif

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end