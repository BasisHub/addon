rem --- Print Ribbon Background/Data
rem --- Program opc_pr v8.0.0 12Dec2007 (opc_pr)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/12/2007 02:31:04)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


            setesc std_error
            seterr std_error
            enter firm_id$,a0$,channels[all],action,my_context

rem --- Retrieve the program path

            pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+sysinfo",err=*next)
            milestone=num(stbl("+milestone",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

            files=13,begfile=1,endfile=files
            dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
            files$[1]="arm-02",ids$[1]="ARM_CUSTDET"
            files$[2]="arc_termcode",ids$[2]="ARC_TERMCODE"
            files$[3]="arc_distcode",ids$[3]="ARC_DISTCODE"
            files$[4]="arc_salecode",ids$[4]="ARC_SALECODE"
            files$[5]="arc_terrcode",ids$[5]="ARC_TERRCODE"
            files$[6]="arc_custtype",ids$[6]="ARC_CUSTTYPE"
            files$[7]="ars_params",ids$[7]="ARS_PARAMS"
            files$[8]="ivs_params",ids$[8]="IVS_PARAMS"
            files$[9]="opm-03",ids$[9]="OPC_DISCCODE"
            files$[10]="opm-04",ids$[10]="OPC_MSG_HDR"
            files$[11]="opm-05",ids$[11]="OPC_PRICECDS"
            files$[12]="opm-06",ids$[12]="OPC_TAXCODE"
            files$[13]="opm-09",ids$[13]="OPM_CUSTJOBS"
            call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
            if status goto std_exit
            arm02_dev=channels[1]
            arm10_dev=channels[2]
            arm10d_dev=channels[3]
            arm10f_dev=channels[4]
            arm10h_dev=channels[5]
            arm10l_dev=channels[6]
            ars01a_dev=channels[7]
            ivs01a_dev=channels[8]
            opm03_dev=channels[9]
            opm04_dev=channels[10]
            opm05_dev=channels[11]
            opm06_dev=channels[12]
            opm09_dev=channels[13]

rem --- Dimension string templates

             dim arm02a$:templates$[1],arm10a$:templates$[2],arm10d$:templates$[3],
:                arm10f$:templates$[4],arm10h$:templates$[5],arm10l$:templates$[6],
:                ars01a$:templates$[7],ivs01a$:templates$[8],opm03a$:templates$[9],
:                opm04a$:templates$[10],opm05a$:templates$[11],opm06a$:templates$[12],
:                opm09a$:templates$[13]

rem --- Assign form input values to local variables

            value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

            ars01a_key$=firm_id$+"AR00"
            find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
            ivs01a_key$=firm_id$+"IV00"
            find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open Files

            arm10_dev=channels[12]
            opm03_dev=channels[30],opm04_dev=channels[31]
            opm06_dev=channels[33]
            opm09_dev=channels[36],arm02_dev=channels[7]
            opm05_dev=channels[32]

rem --- Determine Interface

            inter$=pad(fnglobal$("+INTERFACE"""),512),ui$=inter$(26,1)
    

rem --- Initializations
            more=1
            jobnumb$=""
            jobdesc$="",expires$=""
            inv_ord$="  Order"
            nf$="(Not On File)"
            if a0$(22,1)="I" then let inv_ord$="Invoice"
            if ui$="W" then let inv_ord$=inv_ord$+" Date"
            gosub set_rib_controls

rem --- Process Flow Control

            on action goto Display_background,verify_data,Display_background

 while more

Display_background: rem --- Display Background

            if ui$="W" then call pgmdir$+"syc_rs.bbx","",my_context,2003,inv_ord$,0,"",status
            if ui$<>"W" then 
                       print @(0,11),'ce',
                       if action=3 then   break
                       print @(0,9),'ce','sb',@(5),"Type",@(39),"Pricing",'sf',

rem --- escape "CALL "syc_wc.bbx",1,0,80,0,0,8,0

                      call pgmdir$+"syc_wc.bbx",1,0,80,0,0,10,0
                      print 'sb',@(3,11),"Order Type",@(35),"Salesperson",@(1,12),inv_ord$," Date",@(30),"Standard Message",@(4,13),"Ship Date",@(37),"Territory",@(6,14),"Expires",@(37),"Sales Tax",@(4,15),"PO Number",@(36),"List Price",@(0,16),"PO Rel Number",@(36),"Job Number",@(2,17),"Misc Number",@(5,18),"Ship Via",@(3,19),"Sales Disc",@(8,20),"Terms",@(1,21),"Distribution",'sf',

                else
                        if action=3 then 

                        break 

                endif
             endif
    

verify_data: rem --- Verify Ribbon Data

    if action=0 then break
      if a0$(22,1)="I" and num(a0$(42,7))=0 then break
         if a0$(22,1)<>"I" and num(a0$(11,7),err=*next)=0 then break
                if a0$(21,1)="P" then let type$="Q" else let type$="S"
                if a0$(22,1)="I" then let date$=a0$(24,3) else let date$=a0$(77,3)
                if type$="Q" then let typedesc$="(Quote)" else let typedesc$="(Order)"
                if type$="Q" then let expires$=fndate$(a0$(108,3))

rem --- Initialize code records
            opm03a.firm_id$=firm_id$
            opm03a.disc_code$=a0$(64,2)
            opm03a.code_disc$=nf$
            arm10a.firm_id$=firm_id$
            arm10a.record_id_a$="A"
            arm10a.ar_terms_code$=a0$(62,2)
            arm10a.code_desc$=nf$
            arm10d.firm_id$=firm_id$
            arm10d.record_id_d$="D"
            arm10d.ar_dist_code$=a0$(66,2)
            arm10d.code_desc$=nf$
            arm10f.firm_id$=firm_id$
            arm10f.record_id_f$="F"
            arm10f.slspsn_code$=a0$(59,3)
            arm10f.code_desc$=nf$
            opm04a.firm_id$=firm_id$
            opm04a.message_code$=a0$(70,2)
            opm04a.code_desc$=nf$
            arm10h.firm_id$=firm_id$
            arm10h.record_id_h$="H"
            arm10h.territory$=a0$(72,3)
            arm10h.code_desc$=nf$
            opm06a.firm_id$=firm_id$
            opm06a.tax_code$=a0$(80,2)
            opm06a.code_desc$=nf$

rem --- Retrieve code descriptions

            find record (opm03_dev,key=opm03a.firm_id$+opm03a.disc_code$,dom=*next) opm03a$
            find record (arm10_dev,key=arm10a.firm_id$+arm10a.record_id_a$+arm10a.ar_terms_code$,dom=*next) arm10a$
            find record (arm10_dev,key=arm10d.firm_id$+arm10d.record_id_d$+arm10d.ar_dist_code$,dom=*next) arm10d$
            find record (arm10_dev,key=arm10f.firm_id$+arm10f.record_id_f$+arm10f.slspsn_code$,dom=*next) arm10f$
            find record (opm04_dev,key=opm04a.firm_id$+opm04a.message_code$,dom=*next) opm04a$
            find record (arm10_dev,key=arm10h.firm_id$+arm10h.record_id_h$+arm10h.territory$,dom=*next) arm10h$
            find record (opm06_dev,key= opm06a.firm_id$+opm06a.tax_code$,dom=*next) opm06a$

rem --- Retrieve customer information

            find record (arm02_dev,key=firm_id$+a0$(5,6)+"  ",dom=Job_information) arm02a$
            arm10l.firm_id$=firm_id$
            arm10l.record_id_l$="L"
            arm10l.customer_type$=arm02a.customer_type$
            arm10l.code_desc$="(Not On File)"
            opm05a.firm_id$=firm_id$
            opm05a.pricing_code$=arm02a.pricing_code$
            opm05a.code_desc$="(Not On File)"
            find record (arm10_dev,key=arm10l.firm_id$+arm10l.record_id_l$+arm10l.customer_type$,dom=*next) arm10l$
            find record (opm05_dev,key=opm05a.firm_id$+opm05a.code_desc$,dom=*next) opm05a$

Job_information: rem --- Retrieve job information (if being used)

            if opm09_dev=0 then goto Display_information
            find record (opm09_dev,key=firm_id$+a0$(5,6)+a0$(86,10),dom=Display_information) opm09a$
            jobnumb$=a0$(86,10)
            jobdesc$=opm09a.customer_name$

Display_information: rem --- Display ribbon information

            gosub display_fields
            break
 wend

done: rem --- Done

            goto std_exit

display_fields: rem --- Display Fields

    x$="Current List Price"
    if cvs(a0$(75,2),2)<>"" then let x$="List Price Code "+a0$(75,2)
    if ui$<>"W" then 
            print @(14,11),type$," ",typedesc$,@(14,12),fndate$(date$),@(14,13),fndate$(a0$(27,3)),@(14,14),expires$,@(14,15),a0$(111,20),@(14,16),a0$(131,20),@(14,17),a0$(49,10),@(14,18),a0$(32,10),@(14,19),a0$(64,2)," ", opm03a.code_disc$,@(14,20),a0$(62,2)," ",arm10a.code_desc$,@(14,21),a0$(66,2)," ",arm10d.code_desc$,
            print @(47,11),a0$(59,3)," ",arm10f.code_desc$,@(47,12),a0$(70,2),"  ",opm04a.code_desc$,@(47,13),a0$(72,3)," ",arm10h.code_desc$,@(47,14),a0$(80,2),"  ",w1$(6,20),@(47,15),a0$(75,2),"  ",x$,@(47,16),jobnumb$," ",jobdesc$,@(10,9), arm10l.customer_type$," ",arm10l.code_desc$,@(47,9),opm05a.pricing_code$," ", opm05a.code_desc$,
            return
    endif        

Display_fields_gui: rem --- Display Fields - GUI

    rvalues$[0]=arm10l.customer_type$
    rvalues$[1]=arm10l.code_desc$
    rvalues$[2]=opm05a.pricing_code$
    rvalues$[3]=opm05a.code_desc$
    rvalues$[4]=type$
    rvalues$[5]=typedesc$
    rvalues$[6]=fndate$(date$)
    rvalues$[7]=fndate$(a0$(27,3))
    rvalues$[8]=expires$
    rvalues$[9]=a0$(111,20)
    rvalues$[10]=a0$(131,20)
    rvalues$[11]=a0$(49,10)
    rvalues$[12]=a0$(32,10)
    rvalues$[13]=a0$(64,2)
    rvalues$[14]=opm03a.code_disc$
    rvalues$[15]=a0$(62,2)
    rvalues$[16]=arm10a.code_desc$
    rvalues$[17]=a0$(66,2)
    rvalues$[18]=arm10d.code_desc$
    rvalues$[19]=a0$(59,3)
    rvalues$[20]=arm10f.code_desc$
    rvalues$[21]=a0$(70,2)
    rvalues$[22]=opm04a.code_desc$
    rvalues$[23]=a0$(72,3)
    rvalues$[24]=arm10h.code_desc$
    rvalues$[25]=a0$(80,2)
    rvalues$[26]=w1$(6,20)
    rvalues$[27]=a0$(75,2)
    rvalues$[28]=x$
    rvalues$[29]=jobnumb$
    rvalues$[30]=jobdesc$
    call pgmdir$+"syc_rd.bbx","",my_context,0,rcontrols,rcontrols[all],rvalues$[all],rvalues[all],rmasks$[all],status
    return

set_rib_controls: rem --- Ribbon Controls

    rcontrols=30
    dim rcontrols[rcontrols],rvalues$[rcontrols],rvalues[rcontrols],rmasks$[rcontrols]
    rcontrols[0]=2001
    rcontrols[1]=2002
    rcontrols[2]=3016
    rcontrols[3]=13016
    rcontrols[4]=3000
    rcontrols[5]=13000
    rcontrols[6]=3001
    rcontrols[7]=3002,rcontrols[8]=3003
    rcontrols[9]=3004
    rcontrols[10]=3005,rcontrols[11]=3006
    rcontrols[12]=3007
    rcontrols[13]=3008,rcontrols[14]=13008
    let rcontrols[15]=3009,rcontrols[16]=13009
    let rcontrols[17]=3010,rcontrols[18]=13010
    let rcontrols[19]=3011,rcontrols[20]=13011
    let rcontrols[21]=3012,rcontrols[22]=13012
    let rcontrols[23]=3013,rcontrols[24]=13013
    let rcontrols[25]=3014,rcontrols[26]=13014
    let rcontrols[27]=3015,rcontrols[28]=13015
    let rcontrols[29]=3017,rcontrols[30]=13017
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
