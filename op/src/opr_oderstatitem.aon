rem --- Order Status Report By Item
rem --- Program opr_oa v8.0.0 06Jul2007 (opr_oa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 07:30:46)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
    files$[4]="ivc_prodcode",ids$[4]="IVC_PRODCODE"
    files$[5]="ivc_whsecode",ids$[5]="IVC_WHSECODE"
    files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
    files$[7]="opt-01",ids$[7]="OPE_ORDHDR"
    files$[8]="opt-11",ids$[8]="OPE_ORDDET"
    files$[9]="opm-02",ids$[9]="OPC_LINECODE"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status then goto std_exit
    ars01a_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm10_dev=channels[4]
    ivm10c_dev=channels[5]
    ivs01a_dev=channels[6]
    ope01_dev=channels[7]
    ope11_dev=channels[8]
    opm02_dev=channels[9]


rem --- Dimension string templates

    dim ars01a$:templates$[1],ivm01a$:templates$[2],ivm02a$:templates$[3],
:       ivm10a$:templates$[4],ivm10c$:templates$[5],ivs01a$:templates$[6],
:       ope01a$:templates$[7],ope11a$:templates$[8],opm02a$:templates$[9]


rem --- Assign form input values to local variables

    p8$ = option!.getOptionData("PRODUCT_TYPE")
    open$ = option!.getOptionData("OPEN")
    quoted$ = option!.getOptionData("QUOTED")
    backord$ = option!.getOptionData("BACKORDERS")
    cred$ = option!.getOptionData("CREDIT")
    p5$=""
    if open$="Y" then p5$=p5$+"O"
    if quoted$="Y" then p5$=p5$+"Q"
    if backord$="Y" then p5$=p5$+"B"
    if cred$="Y" then p5$=p5$+"C"
    if p5$="" then p5$="OQBC"
    p9$ = option!.getOptionData("SUMM_DTL")
    p6$ = option!.getOptionData("WAREHOUSE_ID")


rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    dim p[2],i[5]
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    i[0]=ivs01a.item_id_len
    i[1]=num(ivs01a.precision$)
    i[2]=ivs01a.ls_no_len
    i[3]=num(ivs01a.desc_len_01$)
    i[4]=num(ivs01a.desc_len_02$)
    i[5]=num(ivs01a.desc_len_03$)

rem --- Initializations

    dim description$[1],length[1],position[1],field[1],x0$(32)
    number=1
    if p9$="" then
        p9$="D"
    endif

    h4$="Product Type: "
    
    if p5$="O" then
        h3$=h3$+"Open Orders Only"
    else
        if p5$="Q" then
            h3$=h3$+"Quoted Orders Only"
        endif
        
        if p5$="B" then
            h3$=h3$+"Backordered Orders Only"
        endif
        
        if p5$="C" then
            h3$=h3$+"Credit Held Orders Only"
        endif
        
        if p5$="" then
            h3$=h3$+"All Orders"
        endif
    endif
    
    h1$=n4$
    optn$="OQBC"

rem --- Run report overlay

    run pgmdir$+"opr_oderstatitem_o1.aon"

rem --- Functions

    def fnv(q$)=42+int(len(q$)/2)

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

rem   run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

    release

rem #endinclude std_end.src

    end
