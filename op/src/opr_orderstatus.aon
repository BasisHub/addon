rem --- Order Status Report By Customer
rem --- Program opr_qa v8.0.0 20Feb2008 (opr_qa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/20/2008 04:01:24)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[2]="arc_termcode",ids$[2]="ARC_TERMCODE"
    files$[3]="ars_params",ids$[3]="ARS_PARAMS"
    files$[4]="ivs_params",ids$[4]="IVS_PARAMS"
    files$[5]="opt-01",ids$[5]="OPE_ORDHDR"
    files$[6]="opt-11",ids$[6]="OPE_ORDDET"
    files$[7]="opm-02",ids$[7]="OPC_LINECODE"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status then goto std_exit
    arm01_dev=channels[1]
    arm10_dev=channels[2]
    ars01a_dev=channels[3]
    ivs01a_dev=channels[4]
    ope01_dev=channels[5]
    ope11_dev=channels[6]
    opm02_dev=channels[7]

rem --- Dimension string templates

    dim arm01a$:templates$[1],arm10a$:templates$[2],ars01a$:templates$[3],
:       ivs01a$:templates$[4],ope01a$:templates$[5],ope11a$:templates$[6],
:       opm02a$:templates$[7]

rem --- Assign form input values to local variables

    wo_open$=Option!.getOptionData("OPEN")
    wo_quoted$=Option!.getOptionData("QUOTED")
    wo_backord$=Option!.getOptionData("BACKORDERS")
    wo_cred$=Option!.getOptionData("CREDIT")
    col_format$=option!.getOptionData("COL_FORMAT")
    wo_status$=""
    if wo_open$="Y" then wo_status$=wo_status$+"O"
    if wo_quoted$="Y" then wo_status$=wo_status$+"Q"
    if wo_backord$="Y" then wo_status$=wo_status$+"B"
    if wo_cred$="Y" then wo_status$=wo_status$+"C"
    if wo_status$="" then wo_status$="OQBC"
rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    dim p[2]
    n1$=sysinfo.firm_name$,n2$="AR",n3$=sysinfo.task_desc$
    find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$

rem --- Initializations

    more=1
    headings=3
    dim headings$[headings]
    optn$="OQBC"
rem ***p8$=""
    p81$=p8$
    t0=0
    t1=0,t0$=""
    done=0
    recs=0
    total_recs=0
    m8$="(###) ###-####"
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0
    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0
    m1=len(m1$)
    l9=59
    l=l9+1
    h0=132
    h=0
    headings$[0]=n1$
    headings$[1]=n3$
    clock$=""
    when$=sysinfo.system_date$

    if col_format$="Y" then
        dim columns$[10,10]
        columns = 10
        columns$[0,0]="Cust ID",             columns$[0,1]="C",columns$[0,2]="8" 
        columns$[1,0]="Customer",                     columns$[1,1]="C",columns$[1,2]="20"
        columns$[2,0]="Phone No",                     columns$[2,1]="C",columns$[2,2]="12"
        columns$[3,0]="Order^Number",         columns$[3,1]="C",columns$[3,2]="10"
        columns$[4,0]="Order Date",           columns$[4,1]="C",columns$[4,2]="8"
        columns$[5,0]="Ship Date",            columns$[5,1]="C",columns$[5,2]="8"
        columns$[6,0]="PO Number",            columns$[6,1]="C",columns$[6,2]="8"
        columns$[7,0]="Ship-Via",             columns$[7,1]="C",columns$[7,2]="10"
        columns$[8,0]="Terms",                columns$[8,1]="C",columns$[8,2]="20"
        columns$[9,0]="Order^Type",           columns$[9,1]="C",columns$[9,2]="10"
        columns$[10,0]="Order Amt",            columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m1$,columns$[10,10]="T"
    else
        dim columns$[9,10]
        columns = 9
        columns$[0,0]="Customer",             columns$[0,1]="C",columns$[0,2]="8"
        columns$[1,0]="",                     columns$[1,1]="C",columns$[1,2]="20"
        columns$[2,0]="Order^Number",         columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]="Order Date",           columns$[3,1]="C",columns$[3,2]="8"
        columns$[4,0]="Ship Date",            columns$[4,1]="C",columns$[4,2]="8"
        columns$[5,0]="PO Number",            columns$[5,1]="C",columns$[5,2]="8"
        columns$[6,0]="Ship-Via",             columns$[6,1]="C",columns$[6,2]="10"
        columns$[7,0]="Terms",                columns$[7,1]="C",columns$[7,2]="20"
        columns$[8,0]="Order^Type",           columns$[8,1]="C",columns$[8,2]="10"
        columns$[9,0]="Order Amt",            columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"
    endif

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem retrieve template for OPE_ORDHDR record key
    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDHDR","PRIMARY",ope01a_key_tpl$,table_chans$[all],status$
    dim ope01a_key$:ope01a_key_tpl$

rem retrieve template for OPE_ORDDET record key
    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDDET","PRIMARY",ope11a_key_tpl$,table_chans$[all],status$
    dim ope11a_key$:ope11a_key_tpl$

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    gosub display_fields

rem --- Setup Headings
    if pos("O"=wo_status$)>0 then h0$=h0$+"Open/"
    if pos("Q"=wo_status$)>0 then h0$=h0$+"Quoted/"
    if pos("B"=wo_status$)>0 then h0$=h0$+"Backorders/"
    if pos("C"=wo_status$)>0 then h0$=h0$+"Credit Held/"
    p8$="Includes All "+h0$(1,len(h0$)-1)+" Sales Orders"

rem --- Run report overlay
rem --- File Initializations

    call pgmdir$+"adc_progress.aon","N","OPE_ORDHDR","","","",0,ope01_dev,1,meter_num,status
    if status = 999 then goto std_exit
    
    headings$[2]=p8$
    read (ope01_dev,key=firm_id$+"E",knum="AO_STATUS",dom=*next)

rem --- Next key

    while more
        ope01a_key$=key(ope01_dev,end=print_4)
        if pos(firm_id$+"E"=ope01a_key$)<>1 then break

    rem --- Next header

        read record (ope01_dev) ope01a$
        
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit
        
        if ope01a.invoice_type$="V" or ope01a.ordinv_flag$="I" then continue
        
        if  (pos("O"=wo_status$)<=0 or ope01a.backord_flag$="B" or ope01a.credit_flag$="C" or ope01a.invoice_type$="P") and
:           (pos("B"=wo_status$)<=0 or ope01a.backord_flag$<>"B") and  
:           (pos("C"=wo_status$)<=0 or ope01a.credit_flag$<>"C")  and
:           (pos("Q"=wo_status$)<=0 or ope01a.invoice_type$<>"P") 
:       then 
            continue
        endif

    rem --- Got One To Print

    rem --- Customer break?

        if ope01a.customer_id$<>t0$ then gosub customer_break

    rem --- Retrieve terms

        if ope01a.terms_code$<>arm10a.ar_terms_code$ then
            find record (arm10_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=type) arm10a$
            terms$=arm10a.code_desc$
        endif

    type: rem --- Type?

        x9$=ope01a.ordinv_flag$
        if x9$="O" then
            if ope01a.credit_flag$ ="C" then  x9$="C"
            if ope01a.credit_flag$ ="R" then  x9$="R"
            if ope01a.backord_flag$="B" then  x9$="B"
            if ope01a.invoice_type$="P" then  x9$="Q"
        endif

    rem --- Add Up Order Amount

        amnt=0
        ope11_trip$=ope01a_key$
        read (ope11_dev,key=ope11_trip$,knum="AO_STATUS",dom=*next)

        while more
            ope11a_key$=key(ope11_dev,end=*break)
            if pos(ope11_trip$=ope11a_key$)<>1 then break
            read record (ope11_dev) ope11a$
            price=ope11a.unit_price*ope11a.qty_ordered

            find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*next) opm02a$
            if opm02a.line_type$="O" then
                if ope11a.commit_flag$="Y" then
                    price=ope11a.ext_price
                else
                    price=ope11a.unit_price
                endif
            endif
            amnt=amnt+price
        wend

    rem --- Print Status Line

        OutVect!.addItem(customer$)
        OutVect!.addItem(name$)
        if col_format$="Y" then OutVect!.addItem(phone$)
        OutVect!.addItem(ope01a.order_no$)
        OutVect!.addItem(fndate$(ope01a.order_date$))
        OutVect!.addItem(fndate$(ope01a.shipmnt_date$))
        OutVect!.addItem(ope01a.customer_po_no$(1,10))
        OutVect!.addItem(ope01a.ar_ship_via$)
        OutVect!.addItem(ope01a.terms_code$+" "+terms$)
        OutVect!.addItem(" "+x9$)
        OutVect!.addItem(str(amnt))

        if col_format$<>"Y" then
            customer$=""
            name$=phone$
            phone$=""
        endif
        l=l+1
        recs=recs+1
        number=number+1
        t0=t0+1
        t1=t1+amnt

    rem --- Get Next Order
    wend

rem --- PRINT
print_4: 

rem --- End

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub customer_break
    if col_format$="Y" then
        xwk = fnblank(11)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk = fnblank(1)
        OutVect!.addItem(str(t0)+"    "+" Total Orders ")
        xwk = fnblank(7)
        OutVect!.addItem("Total Amount")
        OutVect!.addItem(str(t1))
    else
        xwk = fnblank(10)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk = fnblank(1)
        OutVect!.addItem(str(t0)+"    "+" Total Orders ")
        xwk = fnblank(6)
        OutVect!.addItem("Total Amount")
        OutVect!.addItem(str(t1))
    endif
    goto std_exit

display_fields: 

    control_id=3000
    cid_cnt=0

    while more
        if cid_cnt=0 then  disp_inp$=optn$,disp_desc$="All Orders"
        cid_cnt=cid_cnt+1;  control_id=control_id+1
        if cid_cnt>i0_done-1 then break
    wend

    disp_inp$=""
    disp_desc$=""

    return

customer_break: rem --- Customer break

    if t0$<>"" and col_format$<>"Y" then
        if number<=1 then
            xwk = fnblank(1)
            OutVect!.addItem(name$)
            xwk = fnblank(8)
            l=l+1
        endif
    endif

    if done>0 then return
    t0$=ope01a.customer_id$
    arm01a.customer_name$="(Not On File)"
    number=0
    find record (arm01_dev,key=ope01a.firm_id$+ope01a.customer_id$,dom=*next) arm01a$
    customer$=fnmask$(ope01a.customer_id$(1,m0),m0$)
    name$=arm01a.customer_name$
    call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(arm01a.phone_no$,2),"",phone_mask$
    phone$=cvs(arm01a.phone_no$,2)
    phone$=str(phone$:phone_mask$,err=*next)
    l=l+1

    return


rem --- Date/time handling functions
rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #endinclude fndate.src

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
        if q2$="" then let q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) then goto alpha_fnf else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
    alpha_fnf: 
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") then let q0=q0+1 else let q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 then let q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
