rem --- Shipping Schedule Report (Input Overlay)
rem --- Program opr_aa v8.0.0 28Jan2008 (opr_aa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/28/2008 10:23:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    
rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open/Lock files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[2]="ars_params",ids$[2]="ARS_PARAMS"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="ivm-02",ids$[4]="IVM_ITEMWHSE"
    files$[5]="ivc_prodcode",ids$[5]="IVC_PRODCODE"
    files$[6]="ivc_whsecode",ids$[6]="IVC_WHSECODE"
    files$[7]="ivs_params",ids$[7]="IVS_PARAMS"
    files$[8]="opt-01",ids$[8]="OPE_ORDHDR"
    files$[9]="opt-11",ids$[9]="OPE_ORDDET"
    files$[10]="opm-02",ids$[10]="OPC_LINECODE"
    files$[11]="opw-02",ids$[11]="OPW_SCHEDULE"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm01_dev=channels[1]
    ars01a_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm10_dev=channels[5]
    ivm10c_dev=channels[6]
    ivs01a_dev=channels[7]
    ope01_dev=channels[8]
    ope11_dev=channels[9]
    opm02_dev=channels[10]
    opw02_dev=channels[11]

rem --- Dimension string templates

    dim arm01a$:templates$[1],ars01a$:templates$[2],ivm01a$:templates$[3],
:       ivm02a$:templates$[4],ivm10a$:templates$[5],ivm10c$:templates$[6],
:       ivs01a$:templates$[7],ope01a$:templates$[8],ope11a$:templates$[9],
:       opm02a$:templates$[10],opw02a$:templates$[11]

rem --- Assign form input values to local variables

    wh$ = option!.getOptionData("WAREHOUSE_ID")
    p8$ = option!.getOptionData("PRODUCT_TYPE")
    wo_open$=Option!.getOptionData("OPEN")
    wo_quoted$=Option!.getOptionData("QUOTED")
    wo_backord$=Option!.getOptionData("BACKORDERS")
    wo_cred$=Option!.getOptionData("CREDIT")
    col_format$=option!.getOptionData("COL_FORMAT")

    p7$=""
    if wo_open$="Y" then p7$=p7$+"O"
    if wo_quoted$="Y" then p7$=p7$+"Q"
    if wo_backord$="Y" then p7$=p7$+"B"
    if wo_cred$="Y" then p7$=p7$+"C"
    if p7$="" p7$="OQBC"
    p9$ = option!.getOptionData("SUMM_DTL")   
    p6$ = option!.getOptionData("AGING_DATE")
    p8  = num(option!.getOptionData("DAYS_IN_MTH"))

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    n1$=sysinfo.firm_name$,n2$="AR",n4$=sysinfo.task_desc$
    find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    dim p[2],i[4]

    i[0]=ivs01a.item_id_len
    i[1]=ivs01a.vendor_prd_len
    i[2]=num(ivs01a.precision$)
    i[3]=ivs01a.ls_no_len
    i[4]=num(ivs01a.desc_len_01$)
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",p5$,0,m0
    p[0]=m0
    p[1]=max(6,p[0])

rem --- Initialize Data

    more=1
    h0=0
    number=1
    dim description$[number],field[number],position[number],length[number]
    l9=30
    l=0
    optn$="OQBC"
    dim w[7]
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
    m0=len(p5$)
    m1=len(m1$)
    m2=len(m2$)
    if p9$="" then p9$="D"
    if p7$="" then p7$=optn$
    dim j$(m1+m2*7,"-"),j0$(10,"0"),j1$(50," ")

    if p7$=optn$ then
        h3$=h3$+"All Orders"
    else
        if pos("O"=p7$)>0 then h3$=h3$+"Open "
        if pos("Q"=p7$)>0 then h3$=h3$+"Quoted "
        if pos("B"=p7$)>0 then h3$=h3$+"Backordered "
        if pos("C"=p7$)>0 then h3$=h3$+"Credit Held "
        h3$=h3$+" Orders Only"
    endif

    call pgmdir$+"adc_clearfile.aon",opw02_dev

    ope01_trip$=firm_id$+"E"+"  "
    read (ope01_dev,key=ope01_trip$,knum="AO_STATUS",dom=*next)
    
    call stbl("+DIR_PGM")+"adc_progress.aon","NC","OPE_ORDDET","","","",0,ope11_dev,1,meter_num,status
    if status = 999 then goto std_exit
    total_recs=0
    
ord_read: rem --- Read Order Header Information

    dim a0$(200),e0$(52),e1$(64),e[17]
    ope01a_key$=key(ope01_dev,end=ending)
    if pos(ope01_trip$=ope01a_key$)<>1 then goto ending
    read record (ope01_dev) ope01a$

    if ope01a.invoice_type$="V" then goto ord_read
    if ope01a.ordinv_flag$="I" then goto ord_read
    orddate$=ope01a.order_date$
    shipdate$=ope01a.shipmnt_date$
    stat$=ope01a.ordinv_flag$
    if ope01a.credit_flag$="C" then  stat$="C"
    if ope01a.credit_flag$="R" then  stat$="R"
    if ope01a.backord_flag$="B" then stat$="B"
    if ope01a.invoice_type$="P" then stat$="Q"
    dim y0$(30)

rem --- Read Order Detail

    total_recs=total_recs+1
    if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
    if status = 999 then goto std_exit

    ope11_trip$=ope01a_key$
    read (ope11_dev,key=ope11_trip$,knum="AO_STATUS",dom=*next)

    while more
        ope11a_key$=key(ope11_dev,end=ord_read)
        if pos(ope11_trip$=ope11a_key$)<>1 then goto ord_read
        
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit
        
        read record (ope11_dev) ope11a$
        find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*next) opm02a$
        if pos(opm02a.line_type$="SNP")=0 then continue
        if p8$<>"" and ope11a.product_type$<>p8$ then continue
        if ope11a.est_shp_date$<>"        " then  shipdate$=ope11a.est_shp_date$

    rem --- Write to opw-02

        dim x9$(40)
        if pos(opm02a.line_type$="SP")<>0 then  x9$(1)=ope11a.item_id$ else  x9$(1)=ope11a.order_memo$
        opw02a.firm_id$=firm_id$
        opw02a.item_iddes$=x9$(1)
        opw02a.warehouse_id$=ope11a.warehouse_id$
        opw02a.order_no$=ope11a.order_no$
        opw02a.line_no$=ope11a.line_no$
        opw02_key$=opw02a.firm_id$+opw02a.item_iddes$+opw02a.warehouse_id$+opw02a.order_no$+opw02a.line_no$
        extract record (opw02_dev,key=opw02_key$,dom=*next)x$; rem Advisory Locking
        opw02a.ar_type$=ope11a.ar_type$
        opw02a.customer_id$=ope11a.customer_id$
        opw02a.product_type$=ope11a.product_type$
        opw02a.est_shp_date$=shipdate$
        opw02a.line_code$=opm02a.line_type$
        opw02a.order_status$=stat$
        opw02a.order_date$=orddate$
        opw02a.commit_flag$=ope11a.commit_flag$
        opw02a.dropship$=opm02a.dropship$
        opw02a.qty_ordered=ope11a.qty_ordered
        opw02a.extended_amt=ope11a.ext_price
        write record (opw02_dev,key=opw02a.firm_id$+opw02a.item_iddes$+opw02a.warehouse_id$+opw02a.order_no$+opw02a.line_no$) opw02a$
    wend

ending: 

    gosub heading_date

rem --- run overlay   
 
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    if status = 999 then goto std_exit
    
    run pgmdir$+"opr_shippingr_o1.aon"

heading_date: 

    h4$=""
    h5$=""
    v0$=p6$
    v1$="",v0=-1
    call pgmdir$+"adc_daydates.aon",v0$,v1$,v0

    for x=4 to 1 step -1
        v$=v1$
        v=p8*x,v0$=""
        call pgmdir$+"adc_daydates.aon",v$,v0$,v

        if v$<>"N" and v0$<>"N" then 
            h5$=v0$+h5$
            v=p8*x+1,v0$=""
            call pgmdir$+"adc_daydates.aon",v$,v0$,v

            if v$<>"N" and v0$<>"N" then 
                h4$=v0$+h4$
            endif
        endif

    next x
    
    h4$=p6$+h4$
    
    return

rem --- Functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnv(q$)=42+int(len(q$)/2)

rem --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year

    def fnyy$(q1$)
        let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
        return q1$
    fnend

rem --- Convert 2-Char Year to 21st Century Numeric Year

    def fnyy_year(q1$)
        let q=num(fnyy$(q1$)),q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=l8181)
    l8181: 
        if q<q9 q=q+100
        return q
    fnend

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_fnf else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
    alpha_fnf: 
        let q=1,q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            let q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src

rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

rem    run pgmdir$+"ads_process_end.aon",err=*next

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

    end
