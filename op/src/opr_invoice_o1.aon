rem --- Invoice Printing (Form)
rem --- Program opr_invoice_o1 v8.0.0 12Jun2009 (opr_ca)
rem --- Created by adx_codeport.bbj v1.1.5 (06/12/2009 12:05:26)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2009 AddonSoftware
rem --- All Rights Reserved

rem *** This program is not used!  For reference only ***

rem --- Old documentation (09 is always 1, that is, this is batch printing only)

rem --- o9$ = return program
rem --- o9  = 1 - batch print from opr_ga.bbx p3$(65,10)
rem               cust_id$ = first customer ID
rem --- o9  = 2 - on demand print from ope_ce.bbx p3$(94,10) or opm_mm p3$(104,10)
rem               cust_id$ = first customer ID
rem               order_no$ = first order number
rem --- o9  = 3 - historical invoice print from opm_ml.bbx
rem               ope01_dev = opt01_dev
rem               ope11_dev = opt11_dev
rem               ope21_dev = opt21_dev
rem               ope31_dev = opt31_dev

    setesc std_error
    seterr std_error

rem --- Use statements

    use ::ado_func.src::func
    use ::ado_pdf.src::PDFHelper
    use ::sys/prog/bao_option.bbj::Option

    use java.awt.Font
    use java.lang.Float
    use javax.print.attribute.HashPrintRequestAttributeSet
    use javax.print.attribute.standard.MediaPrintableArea
    use javax.print.attribute.standard.MediaSizeName
    use javax.print.attribute.standard.OrientationRequested

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Set document Directory

    docdir$=""
    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Derive/set path and filename for logo to go on form

    logofile$ = ""
    start_block = 1
    curr_path$=dsk("")+dir("")

    if start_block then   
        chdir stbl("+CUST_IMAGES",err=*endif),err=*endif
        logofile$="file:"+dsk("")+dir("")+stbl("+FORM_LOGO",err=*endif)
    endif

    chdir curr_path$

rem --- Open/Lock files

    files=19,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",       ids$[1]="ARM_CUSTMAST"
    files$[2]="arm-02",       ids$[2]="ARM_CUSTDET"
    files$[3]="arm-03",       ids$[3]="ARM_CUSTSHIP"
    files$[4]="arc_termcode", ids$[4]="ARC_TERMCODE"
    files$[5]="arc_cashcode", ids$[5]="ARC_CASHCODE"
    files$[6]="arc_salecode", ids$[6]="ARC_SALECODE"
    files$[7]="ars_report",   ids$[7]="ARS_REPORT"
    files$[8]="ivm-01",       ids$[8]="IVM_ITEMMAST"
rem files$[9]="ivs_params",   ids$[9]="IVS_PARAMS"
    files$[10]="ope-01",      ids$[10]="OPE_ORDHDR"
    files$[11]="ope-04",      ids$[11]="OPE_PRNTLIST"
    files$[12]="ope-11",      ids$[12]="OPE_ORDDET"
    files$[13]="ope-21",      ids$[13]="OPE_ORDLSDET"
    files$[14]="ope-31",      ids$[14]="OPE_ORDSHIP"
    files$[15]="ope-41",      ids$[15]="OPE_INVCASH"
    files$[16]="opm-02",      ids$[16]="OPC_LINECODE"
    files$[17]="opm-04",      ids$[17]="OPC_MSG_HDR"
    files$[18]="opm-09",      ids$[18]="OPM_CUSTJOBS"
    files$[19]="opm-14",      ids$[19]="OPC_MSG_DET"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    arm01_dev=channels[1]
    arm02_dev=channels[2]
    arm03_dev=channels[3]
    arm10_dev=channels[4]
    arm10c_dev=channels[5]
    arm10f_dev=channels[6]
    ars_report_dev=channels[7]
    ivm01_dev=channels[8]
rem ivs01a_dev=channels[9]
    ope01_dev=channels[10]
    ope04_dev=channels[11]
    ope11_dev=channels[12]
    ope21_dev=channels[13]
    ope31_dev=channels[14]
    ope41_dev=channels[15]
    opm02_dev=channels[16]
    opm04_dev=channels[17]
    opm09_dev=channels[18]
    opm14_dev=channels[19]

rem --- Dimension string templates

    dim arm01a$:templates$[1],arm01a1$:templates$[1],arm02a$:templates$[2],arm03a$:templates$[3]
    dim arm10a$:templates$[4],arm10c$:templates$[5],arm10f$:templates$[6]
    dim ars01b$:templates$[7],ivm01a$:templates$[8]
    dim ope01a$:templates$[10],ope04a$:templates$[11],ope11a$:templates$[12]
    dim ope21a$:templates$[13],ope31a$:templates$[14],ope41a$:templates$[15]
    dim opm02a$:templates$[16],opm04a$:templates$[17],opm09a$:templates$[18]
    dim opm14a$:templates$[19]

rem --- Parameters (company addresses)

    find record (ars_report_dev, key=firm_id$+"AR02", err=std_missing_params) ars01b$

    remit$=ars01b.remit_addr_1$+ars01b.remit_addr_2$+ars01b.remit_city$+ars01b.remit_state$+ars01b.remit_zip$
    call pgmdir$+"adc_address.aon",remit$,24,3,9,30
    remit$=ars01b.remit_name$+remit$

    comp$=ars01b.addr_line_1$+ars01b.addr_line_2$+ars01b.city$+ars01b.state_code$+ars01b.zip_code$
    call pgmdir$+"adc_address.aon",comp$,24,3,9,30
    comp$=ars01b.name$+comp$

rem --- Init PDF printing 

    declare Font textfont!
    declare Font boldfont!
    declare Font italicfont!
    declare Font largefont!
    declare Font smallfont!
    declare BBjAPI myAPI!
    declare BBjColor white!
    declare BBjColor black!
    declare BBjColor light_gray!

    textfont!   = new Font("Times New Roman", Font.PLAIN, 10)
    italicfont! = new Font("Times New Roman", Font.ITALIC, 10)
    boldfont!   = new Font("Arial", Font.BOLD, 10)
    largefont!  = new Font("Arial", Font.BOLD, 26)
    smallfont!  = new Font("Times New Roman", Font.PLAIN, 8)

    myAPI! = BBjAPI()
    white! = myAPI!.makeColor("WHITE")
    black! = myAPI!.makeColor("BLACK")
    light_gray! = myAPI!.makeColor(224, 224, 224)

rem --- Setup PDF printer and print area   

    declare HashPrintRequestAttributeSet requestAttributes!
    declare MediaPrintableArea a!
    declare Float x!
    declare Float y!
    declare Float w!
    declare Float h!

    requestAttributes! = new HashPrintRequestAttributeSet()
    requestAttributes!.add(MediaSizeName.NA_LETTER)
    requestAttributes!.add(OrientationRequested.PORTRAIT)

    units = MediaPrintableArea.INCH
    x! = new Float(0.25).floatValue()
    y! = new Float(0.25).floatValue()
    w! = new Float(8.0).floatValue()
    h! = new Float(10.5).floatValue()
    a! = new MediaPrintableArea(x!,y!,w!,h!,units)

    requestAttributes!.add(a!)

rem --- Create PDF printer, set attributes, and create PDF helper object

    declare BBjPrinter myBBjPrinter!
    declare BBjForm docPrint!
    declare PDFHelper pdf!
    
    myBBjPrinter! = myAPI!.getBBjPrinter(1,err=*next)
    if myBBjPrinter!=null()
        msg_id$="AD_NOPRINTER"
        gosub disp_message
        goto std_exit
    endif
    
    myBBjPrinter!.setAttributes(requestAttributes!)
    docPrint! = myBBjPrinter!.getForm(0)
    pdf! = new PDFHelper(textfont!)
    
rem --- These should be implemented someday
    
    page_width = 568
    top_of_ribbon = 234
    top_of_detail = 294
    bottom_of_detail = 648

rem --- Initialize Data

    precision i[2]

    address=30
    page=0
    line=0
    maxline=28
    headings=0
    when$=sysinfo.system_date$

    dim headings$[headings]

    price_mask$=m3$
    ext_mask$=m1$

    call pgmdir$+"adc_sizemask.aon",price_mask$,price_mask,11,11
    call pgmdir$+"adc_sizemask.aon",ext_mask$,ext_mask,12,12

    func.setLen1(int(p[3]))
    func.setLen2(int(p[4]))
    func.setLen3(int(p[5]))

    nothing_printed = 1

rem --- Initial Read

    declare Option option!

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",len(m0$)+8,ope04_dev,1,0,status
    if status = 999 then goto std_exit

    if o9<>1 then 
        read record (ope01_dev, key=firm_id$+"  "+cust_id$+order_no$, dir=0, dom=run_overlay)
    else
        read (ope04_dev, key=firm_id$+"I"+"  "+cust_id$, dom=*next)
    endif

rem --- Main Read (Invoices)

    while 1

        if o9=1 then 
            read record (ope04_dev, end=*break) ope04a$
            if ope04a$.firm_id$<>firm_id$ or ope04a.ordinv_flag$<>"I" then break

rem --- Check to see if record is in use in Invoice Entry
			call stbl("+DIR_SYP")+"bac_lock_record.bbj","OPE_INVHDR",firm_id$+"  "+ope04a.customer_id$+ope04a.order_no$,"C","",0,table_chans$[all],lock_stat$
			if lock_stat$="ERR_LOCKED"
				continue
			endif
		
            if start_block then
                bad_record = 1
                extract record (ope01_dev, key=firm_id$+"  "+ope04a.customer_id$+ope04a.order_no$, dom=*endif, err=*continue) ope01a$
                bad_record = 0
            endif

            if bad_record then
                remove (ope04_dev, key=firm_id$+"I"+"  "+ope04a.customer_id$+ope04a.order_no$, dom=*next)
                continue
            endif
        endif
        
        if ope01a.cash_sale$ = "Y" then
            arm10c.code_desc$  = "Invalid Receipt Code"
            arm10c.trans_type$ = "C"

            if ope41_dev then
                find record (ope41_dev, key=firm_id$+"  "+ope01a.customer_id$+ope01a.order_no$, dom=*endif, err=*endif) ope41a$; rem z0$, z1$
                find record (arm10c_dev, key=firm_id$+"C"+ope41a.cash_rec_cd$, dom=*next) arm10c$; rem y7$, y9$
            endif
        endif

        if ope01a.invoice_type$ = "V" then continue
        
        if o9=1 then 
            if ope01a.ordinv_flag$ = "I" then
                if ope01a.print_status$ = "Y" then continue
                if ope01a.print_status$<>"B" and ope01a.lock_status$="Y" then continue
                ope01a.lock_status$ = "Y"
                ope01a$ = field(ope01a$)
                write record (ope01_dev) ope01a$
            else

            rem --- Remove bad record

                remove (ope04_dev, key=firm_id$+"I  "+ope04a.customer_id$+ope04a.order_no$, dom=*next)
                continue
            endif
        endif
        
    rem --- Get a barista document ID

        new_doc_id$ = ""
        pdf_doc$    = ""
        call sypdir$+"bac_documents.bbj", new_doc_id$, "", "", "I", "PDF", docdir$, "pdf", option!.getAlias(), "C", ope01a.customer_id$, rd_table_chans$[all], "DOC_ID"

    rem --- Heading (bill-to address)

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status
        if status = 999 then exitto std_exit

        declare BBjTemplatedString arm01!
        declare BBjTemplatedString arm03!
        declare BBjTemplatedString ope31!
        
        arm01! = BBjAPI().makeTemplatedString(fattr(arm01a1$))
        ope31! = BBjAPI().makeTemplatedString(fattr(ope31a$))
        arm03! = BBjAPI().makeTemplatedString(fattr(arm03a$))
        
        dim b$(5*address)
        found = 0
        start_block = 1

        if start_block then
            read record (arm01_dev, key=firm_id$+ope01a.customer_id$, dom=*endif) arm01!
            b$ = func.formatAddress(arm01!, address, 5)
            b$ = pad(func.alphaMask(arm01!.getFieldAsString("CUSTOMER_ID"), m0$),address) + b$
            found = 1
        endif
        
        if !found then
            b$ = pad("Customer not found", address*6)
        endif

    rem --- Ship-To

        c$ = b$
        start_block = 1

        if ope01a.shipto_type$ = "M" then 
            shipto$ = ""

            if start_block then
                find record (ope31_dev, key=firm_id$+ope01a.customer_id$+ope01a.order_no$, dom=*endif) ope31!
                c$ = func.formatAddress(ope31!, address, 6)
            endif

            read (ope01_dev, key=firm_id$+"  "+ope01a.customer_id$+ope01a.order_no$, dom=*next)
        else
            if ope01a.shipto_type$ = "S" then
                shipto$ = ""

                if start_block then
                    find record (arm03_dev,key=firm_id$+ope01a.customer_id$+ope01a.shipto_no$, dom=*endif) arm03!
                    c$ = func.formatAddress(arm03!, address, 6)
                    shipto$ = ope01a.shipto_no$
                endif
            endif
        endif

    rem --- Terms

        dim arm10a$:fattr(arm10a$)
        arm10a.code_desc$ = "Not Found"
        find record (arm10_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=*next) arm10a$

    rem --- Salesperson

        arm10f.code_desc$ = "Not Found"
        find record (arm10f_dev,key=firm_id$+"F"+ope01a.slspsn_code$,dom=*next) arm10f$

    rem --- Job Name

        dim opm09a$:fattr(opm09a$)
        opm09a.customer_name$ = "Not Found"

        if opm09_dev then 
            find record (opm09_dev, key=firm_id$+ope01a.customer_id$+ope01a.job_no$, dom=*next) opm09a$
        else
            opm09a.customer_name$ = ope01a.job_no$
        endif

    rem --- Print Heading, Initial Read

        page=0
        gosub report_heading
        total_sale=0
        
        read (ope11_dev, key=firm_id$+"  "+ope01a.customer_id$+ope01a.order_no$, knum="AO_CUST_ORD_LINE", dom=*next)

    rem --- Detail lines

        while 1

            read record (ope11_dev, end=*break) ope11a$
            if ope01a.firm_id$     <> ope11a.firm_id$     then break
            if ope01a.customer_id$ <> ope11a.customer_id$ then break
            if ope01a.order_no$    <> ope11a.order_no$    then break

        rem --- Type

            dim opm02a$:fattr(opm02a$)
            dim ivm01a$:fattr(ivm01a$)
            item_desc$ = "Item not found"
            start_block = 1

            if start_block then
                find record (opm02_dev, key=firm_id$+ope11a.line_code$, dom=*endif) opm02a$
                ivm01a.item_desc$ = ope11a.item_id$
            endif

            if pos(opm02a.line_type$=" SP") then
                find record (ivm01_dev, key=firm_id$+ope11a.item_id$, dom=*next) ivm01a$
                item_desc$ = pad( func.displayDesc(ivm01a.item_desc$), desclen )
            endif

            if opm02a.line_type$="M" and pos(opm02a.message_type$="BI ")=0 then continue
            
            gosub line_detail

        rem --- Total

            total_sale = total_sale + ope11a.ext_price

        rem --- Any Serial/Lot #'s?

            if pos(ivs01a.lotser_flag$="LS")=0 then continue
            if pos(opm02a.line_type$="PS")=0 then continue
            if ivm01a.lotser_item$<>"Y" then continue

        rem --- OK, There Are Lots
        
            pdf!.setPage(pagePrint!)
            orig_line = line
            
            while 1

                total_ls = 0
                line = orig_line
                
                read (ope21_dev, key=firm_id$+"  "+ope11a.customer_id$+ope11a.order_no$+ope11a.internal_seq_no$, dom=*next)

                while 1
                    read record (ope21_dev, end=*break) ope21a$; rem t0$, t1$, t[all]
                    if firm_id$                <> ope21a.firm_id$        then break
                    if ope11a.customer_id$     <> ope21a.customer_id$    then break
                    if ope11a.order_no$        <> ope21a.order_no$       then break
                    if ope11a.internal_seq_no$ <> ope21a.orddet_seq_ref$ then break

                    if ope21a.qty_ordered then
                        gosub print_lotser_no
                        total_ls=total_ls+ope21a.qty_shipped
                    endif
                wend

                if total_ls < ope11a.qty_shipped then
                    ope21a.lotser_no$ = fill(20, "_")
                    ope21a.qty_ordered = 0
                    ope21a.qty_shipped = 0
                    ope21a.unit_cost   = 0

                    for y=1 to ope11a.qty_shipped - total_ls
                        gosub print_lotser_no
                        if ivs01a.lotser_flag$="L" then break
                    next y
                endif

                if line+1 <= maxline then
                    rem print (printer_dev)""
                    rem line = line + 1
                endif
                
                if pdf!.getPage() = pagePDF! then break
                pdf!.setPage(pagePDF!)
            
            wend

        wend

    rem --- Total

        gosub print_total
        
        if o9=1 then
            ope01a.print_status$ = "B"
            ope01a$ = field(ope01a$)
            write record (ope01_dev) ope01a$
        endif

        nothing_printed = 0

    wend

rem --- Display PDF

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    if status = 999 then goto std_exit

    if nothing_printed then
        docPrint!.cancel()
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto run_overlay
    endif

    docPrint!.preview()

rem --- Updates and final processing

    if o9=2 then
        gosub open_cash_box
        gosub order_update
    endif

    if o9=1 then

        msg_id$ = "OP_INVOICE_UPDATE"
        gosub disp_message
        if msg_opt$<>"Y" then goto std_exit

        call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Updating","",0,0,1,0,status
        if status = 999 then goto std_exit

        read (ope04_dev,key=firm_id$+"I",dom=*next)

    rem --- Update loop

        start_block = 1

        while 1
            read record (ope04_dev, end=*break) ope04a$
            if ope04a.firm_id$<>firm_id$ or ope04a.ordinv_flag$<>"I" then break
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status
            if status = 999 then exitto std_exit

            if start_block then
                extract record (ope01_dev,key=firm_id$+"  "+ope04a.customer_id$+ope04a.order_no$, dom=*endif) ope01a$
                if ope01a.print_status$="B" then gosub order_update
            endif
        wend

    endif

run_overlay: rem --- Close Files and run program

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    if status = 999 then goto std_exit

    if o9=3 then
        read (ope01_dev, key=firm_id$+"  "+ope01a.customer_id$, dom=*next)
        read record (arm01_dev,key=firm_id$+ope01a.customer_id$) arm01a2$
        read record (arm02_dev,key=firm_id$+ope01a.customer_id$+"  ") arm02a$
    endif

rem run o9$
    goto std_exit

open_cash_box: rem --- Cash Box Open (not implemented yet)

    if r1$<>"" and cvs(r1$(17,2), 2) <> "" then 
        cashbox_dev = unt
        open (cashbox_dev, err=*endif) r1$(17,2)

        for i=1 to pos(" "<>r1$(1,8),-1) step 2
            if pos(" "<>r1$(i,2))=0 continue
            if r1$(i,2)="1B" print (cashbox_dev)'es', else print (cashbox_dev)ath(r1$(i,2)),
        next i

        print (cashbox_dev)

        for i=1 to num(r1$(29,4))
            print (cashbox_dev)ath(r1$(21,pos(" "<>r1$(21,8),-1)))
        next i

        for i=1 to pos(" "<>r1$(9,8),-1) step 2
            if pos(" "<>r1$(8+i,2))=0 continue
            if r1$(8+i,2)="1B" print (cashbox_dev)'es', else print (cashbox_dev)ath(r1$(8+i,2)),
        next i

        print (cashbox_dev)
        close (cashbox_dev,err=*next)
    endif

    return

order_update: rem --- Update order's status

    ope01a.print_status$ = "Y"
    ope01a.lock_status$  = "N"
    ope01a$ = field(ope01a$)
    write record (ope01_dev) ope01a$

    return

report_heading: rem --- Report Heading

rem --- Create PDF physical file, if needed

    declare BBjForm docPDF!

    while pdf_doc$ = ""
        prtr_dev = unt
        pdf_doc$ = docdir$ + new_doc_id$ + ".pdf"
        start_block = 1
        
        if start_block
            open (prtr_dev,err=*endif)pdf_doc$
            close (prtr_dev)
            erase pdf_doc$
        endif

        docPDF! = myAPI!.getBBjPDFForm(pdf_doc$, requestAttributes!)
    wend

    line = 0
    page = page + 1
    rem order$ = ope01a.order_no$
    rem invoice$ = ope01a.ar_inv_no$
    
rem --- Create pages from both physical and display objects   

    declare BBjFormPage pagePDF!
    declare BBjFormPage pagePrint!
    
    pagePDF!   = docPDF!.createPage()
    pagePrint! = docPrint!.createPage()
    
    pdf!.setPage(pagePrint!)
    
    while 1
    
        pdf!.setText(220,10,128,0,"INVOICE",largefont!,pdf!.CENTER_JUSTIFY(),black!,white!)
        pdf!.setLogo(0,0,185,68,logofile$)
        
    rem --- Company Address
    
        pdf!.setText(50,60,comp$(1,address))
        pdf!.setText(50,72,comp$(31,address))
        pdf!.setText(50,84,comp$(61,address))
        pdf!.setText(50,96,comp$(91,address))
 
    rem --- Bill To

        pdf!.drawBox(0, 126, 45, 96, light_gray!, light_gray!); rem gray box
        pdf!.setText(0, 132, 40, 0, "Bill To", boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        
        pdf!.setText(50, 132, b$(1,address))
        pdf!.setText(50, 144, b$(31,address))
        pdf!.setText(50, 156, b$(61,address))
        pdf!.setText(50, 168, b$(91,address))    
        pdf!.setText(50, 180, b$(121,address))
        pdf!.setText(50, 192, b$(151,address))
        
    rem --- Ship to
    
        pdf!.drawBox(284, 126, 45, 96, light_gray!, light_gray!); rem gray box
        pdf!.drawBox(0, 126, 568, 96); rem outer frame
        pdf!.setText(284, 132, 40, 0, "Ship To", boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)

        pdf!.setText(334, 132, c$(1,address))
        pdf!.setText(334, 144, c$(31,address))
        pdf!.setText(334, 156, c$(61,address))
        pdf!.setText(334, 168, c$(91,address))    
        pdf!.setText(334, 180, c$(121,address))
        pdf!.setText(334, 192, c$(151,address))

    rem --- Info Box

        pdf!.drawBox(424, 24, 66, 80, light_gray!, light_gray!); rem gray box
        pdf!.drawHLine(424, 42, 144)
        pdf!.drawHLine(424, 62, 144)
        pdf!.drawHLine(424, 82, 144)
        pdf!.drawVLine(490, 24,  80)
        pdf!.drawBox(424, 24, 144, 80); rem outer frame

        pdf!.setText(432, 26, 54, 30, "Page",      boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(432, 46, 54, 54, "Date",      boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(432, 66, 54, 78, "Invoice #", boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(432, 86, 54, 78, "Order #",   boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)

        pdf!.setText(496, 26, str(page))
        pdf!.setText(496, 46, func.formatDate(ope01a.invoice_date$))
        pdf!.setText(496, 66, ope01a.ar_inv_no$)
        pdf!.setText(496, 86, ope01a.order_no$)
        
        if o9=3 then
            pdf!.setText(496, 102, 54, 102, "DUPLICATE", boldfont!, pdf!.CENTER_JUSTIFY())
        endif
        
    rem --- Ad hoc message
    
        pdf!.setText(76, 108, 416, 0, adhoc_message$, italicfont!, pdf!.CENTER_JUSTIFY())
        
    rem --- Ribbon info

        pdf!.drawBox(0, 234, 568, 14, light_gray!, light_gray!); rem gray bar    
        pdf!.drawBox(0, 234, 568, 48); rem outer frame

        pdf!.setText(2,     234+2, 132-72,  0, "Order Date", boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)
        pdf!.setText(66+2,  234+2, 204-180, 0, "Sls",        boldfont!, pdf!.LEFT_JUSTIFY(),   light_gray!)
        pdf!.setText(96,    234+2, 288-204, 0, "P/O Number", boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)
        pdf!.setText(288,   234+2, 378-288, 0, "Ship Via",   boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)
        pdf!.setText(378,   234+2, 438-378, 0, "Ship Date",  boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)
        pdf!.setText(438,   234+2, 568-440, 0, "Terms",      boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)

        pdf!.setText(0,     234+14, 132-72,  0, func.formatDate(ope01a.order_date$),      pdf!.CENTER_JUSTIFY())
        pdf!.setText(66+2,  234+14, 204-172, 0, ope01a.slspsn_code$,                      pdf!.LEFT_JUSTIFY())
        pdf!.setText(66+2,  262+2,  288-100, 0, arm10f.code_desc$,                        pdf!.LEFT_JUSTIFY())
        pdf!.setText(100,   234+14, 288-100, 0, ope01a.customer_po_no$,                   pdf!.LEFT_JUSTIFY())
        pdf!.setText(288,   234+14, 378-288, 0, ope01a.ar_ship_via$,                      pdf!.CENTER_JUSTIFY())
        pdf!.setText(378,   234+14, 438-378, 0, func.formatDate(ope01a.shipmnt_date$),    pdf!.CENTER_JUSTIFY())
        pdf!.setText(438,   234+14, 568-438, 0, ope01a.terms_code$,                       pdf!.CENTER_JUSTIFY())
        pdf!.setText(438,   262+2,  568-438, 0, arm10a.code_desc$,                        pdf!.CENTER_JUSTIFY())

        pdf!.drawVLine(66,  234, 48)
        pdf!.drawVLine(98,  234, 28)
        pdf!.drawHLine(98,  262, 190)
        pdf!.drawVLine(288, 234, 48)
        pdf!.drawVLine(378, 234, 48)
        pdf!.drawVLine(438, 234, 48)

        rem --- Detail box and headings
    
        pdf!.drawBox(0,   294, 568, 14, light_gray!, light_gray!); rem gray box
        pdf!.drawBox(0,   648, 568, 72)
        pdf!.drawBox(387, 648, 181, 72, light_gray!)
        pdf!.drawBox(0,   294, 568, 354); rem outer frame

        pdf!.setText(2,     294+2, 45-2, 0, "Order",      boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(45,    294+2, 45-2, 0, "Ship",       boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(90,    294+2, 45-2, 0, "B/O",        boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(135+2, 294+2, "Item# / Description", boldfont!,                       light_gray!)
        pdf!.setText(360+2, 294+2, "UM",                  boldfont!,                       light_gray!)
        pdf!.setText(387,   294+2, 90-2, 0, "Price",      boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(477,   294+2, 90-2, 0, "Extended",   boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)

        pdf!.drawVLine(45,  294, 354)
        pdf!.drawVLine(90,  294, 354)
        pdf!.drawVLine(135, 294, 354)
        pdf!.drawVLine(360, 294, 354)
        pdf!.drawVLine(387, 294, 354)

    rem --- Duplicate what was done on pagePrint!; if both pages have updated, we're done
    
        if pdf!.getPage() = pagePDF! then break
        pdf!.setPage(pagePDF!)
        
    wend    
    
    return

line_detail: rem --- Item Detail

    if line+1 > maxline then gosub cont; rem Never split item ID and description
    
    pdf!.setPage(pagePrint!)
    lines_used = 2
    this_y% = fnline2y%(line)
    
    while 1
        
        if pos(opm02a.line_type$="MO")=0 then
            pdf!.setText(0,  this_y%, 45-2, 0, str(ope11a.qty_ordered), pdf!.RIGHT_JUSTIFY())
            pdf!.setText(45, this_y%, 45-2, 0, str(ope11a.qty_shipped), pdf!.RIGHT_JUSTIFY())
            pdf!.setText(90, this_y%, 45-2, 0, str(ope11a.qty_backord), pdf!.RIGHT_JUSTIFY())
        endif
        
        if pos(opm02a.line_type$="MNO") then
            pdf!.setText(135+2, this_y%, ope11a.order_memo$)
        endif
        
        if pos(opm02a.line_type$=" SRDP") then 
            pdf!.setText(135+9, this_y%, ope11a.item_id$)
        endif
        
        if pos(opm02a.line_type$=" SRDNP") then 
            pdf!.setText(387, this_y%, 90-2, 0, str(ope11a.unit_price:m3$), pdf!.RIGHT_JUSTIFY())
        endif
        
        if opm02a.line_type$<>"M" then 
            pdf!.setText(477, this_y%, 90-2, 0, str(ope11a.ext_price:m1$), pdf!.RIGHT_JUSTIFY())
        endif
        
        if opm02a.line_type$="S" then 
            pdf!.setText(360+2, this_y%, ivm01a.unit_of_sale$)
        endif
        
        if pos(opm02a.line_type$="SP") then
            pdf!.setText(135+2, fnline2y%(line+1), item_desc$)
            lines_used = 3
        endif
        
        if pdf!.getPage() = pagePDF! then break
        pdf!.setPage(pagePDF!)
        
    wend
    
    line = line + lines_used
        
    return

print_lotser_no: rem --- Serial #'s Here

    if line > maxline-1 then
        gosub cont
        if pos(opm02a.line_type$=" SP")<>0 then
            pdf!.setText(135+2, fnline2y%(line), ope11a.item_id$+" (Continued)")
            line = line + 1
        endif
    endif

    if ivs01a.lotser_flag$<>"L" then
        pdf!.setText(135+2, fnline2y%(line), "S/N: "+ope21a.lotser_no$)
    else
        if ope21a.qty_shipped then 
            amount$ = str(ope21a.qty_shipped:m2$)
        else 
            amount$ = fill(m2,"_")
        endif
        
        pdf!.setText(135+2, fnline2y%(line), "Lot: "+ope21a.lotser_no$+"   Shipped: "+amount$)
    endif

    line = line + 1
    
    return

print_total: rem --- Total

    if total_sale<0 then
        sales_or_cr$ = "Credit Amount"
    else
        sales_or_cr$ = "Sales Amount"
    endif
    
    pdf!.setPage(pagePrint!)
    
    while 1

        gosub messages
        if ope01a.cash_sale$="Y" then gosub paid_info
        
        pdf!.setText(387+2, 648+0*12+2, sales_or_cr$, italicfont!, light_gray!)
        pdf!.setText(387+2, 648+1*12+2, "Discount",   italicfont!, light_gray!) 
        pdf!.setText(387+2, 648+2*12+2, "Sales Tax",  italicfont!, light_gray!)
        pdf!.setText(387+2, 648+3*12+2, "Freight",    italicfont!, light_gray!)
        pdf!.setText(387+2, 648+4*12+2, "Total Due",  boldfont!,   light_gray!)
        
        total_amt = total_sale+ope01a.tax_amount-ope01a.discount_amt+ope01a.freight_amt
        pdf!.setText(477, 648+0*12+2, 90-2, 0, str(total_sale:m1$),           pdf!.RIGHT_JUSTIFY(), light_gray!)     
        pdf!.setText(477, 648+1*12+2, 90-2, 0, str(-ope01a.discount_amt:m1$), pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(477, 648+2*12+2, 90-2, 0, str(ope01a.tax_amount:m1$),    pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(477, 648+3*12+2, 90-2, 0, str(ope01a.freight_amt:m1$),   pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(477, 648+4*12+2, 90-2, 0, str(total_amt:m1$), boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)

        pdf!.drawVLine(477, 294, 426)

        if pdf!.getPage() = pagePDF! then break
        pdf!.setPage(pagePDF!)
    wend

    docPDF!.print()
    call pgmdir$+"adc_rptcontrol.aon",option!.getAlias(),ope01a.customer_id$,"C",new_doc_id$,"pdf"

    return

cont: rem --- Continued
  
    pdf!.setPage(pagePrint!)
    
    while 1

        pdf!.setText(477, 648+2, 91, 0, "(Continued)", italicfont!, pdf!.RIGHT_JUSTIFY())

        if pdf!.getPage() = pagePDF! then break
        pdf!.setPage(pagePDF!)
    wend

    gosub report_heading

    return

forms_msg: rem --- New Forms

    dim message$[1]
    message$[0]="Please Make Sure That The Correct Invoice Forms Are Mounted On Printer "+sysinfo.printer_id$
    message$[1]="For "+n1$+" (<Enter>=Continue) "
    call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,-1,-1,v$,v3
    return

messages: rem --- Print Messages

    gosub build_msg
    
    if status=0 then
        mline = 0

        if len(message$)>0
            for j=1 to len(message$) step 40
                if mline > 4 then break; rem can't handle more than 10 lines
            
                pdf!.setText(0+2, mline*12+648+2, message$(j,40), smallfont!)
                if len(message$)>j+200
                    pdf!.setText(200+2, mline*12+648+2, message$(j+200,40), smallfont!)
                endif    
                mline = mline + 1
            next j
        endif
    endif
    
    return

paid_info: rem --- Print Paid Info

    paid_text$ = "PAID: " + cvs(arm10c.code_desc$,2) + " "
    
    if arm10c.trans_type$="P" then 
        paid_text$ = paid_text$ + "# " + ope41a.payment_id$
    else
        if arm10c.trans_type$="C" then 
            paid_text$ = paid_text$ + "# " + ope41a.ar_check_no$ 
        endif
    endif
    
    paid_text$ = paid_text$ + " NAME: " + ope41a.customer_name$
    if mline >=5 then gosub cont
    pdf!.setText(0+2, 5*12+648+2, paid_text$)
    
    return

build_msg: rem --- message$ is a string of message details, step 40

    status=11
    start_block = 1
    message$ = ""

    if start_block then
        find record (opm04_dev, key=firm_id$+ope01a.message_code$, dom=*endif) opm04a$; rem mh0$
        status=0
        read (opm14_dev, key=firm_id$+ope01a.message_code$, dom=*next)

        while 1
            read record (opm14_dev, end=*break) opm14a$; rem md0$, md1$
            if opm14a.firm_id$<>firm_id$ or opm14a.message_code$<>ope01a.message_code$ then break
            message$ = message$ + pad(opm14a.message_text$, 40)
        wend
    endif

    return

disp_message: rem --- Display Message Dialog

    call sypdir$+"bac_message.bbj",
:       msg_id$,
:       msg_tokens$[all],
:       msg_opt$,
:       table_chans$[all]

    return   

rem --- Functions

    def fnline2y%(tmp0)=(tmp0*12)+12+294+2

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report: 

    release

rem #endinclude std_end.src

    end
