rem --- Ship Schedule Report (Report Overlay)
rem --- Program opr_ab v8.0.0 28Jan2008 (opr_ab)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/28/2008 10:24:25)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Initialize Data

    more=1
    total_recs=0
    headings=4
    dim t[6],c[5],w[16],headings$[headings]
    h1$=n4$
    h0=132
    h=0
    l9=59
    l=l9+1
    t0=0
    if pos("O"=p7$)>0 and pos("R"=p7$)=0 then  p7$=p7$+"R"

    while more
        if p9$<>"D" or m0+m1+7*m2+31<132 then break
        if m1>12 then call pgmdir$+"adc_sizemask.aon",m1$,m1,12,m1-1
        if m2>9 then call pgmdir$+"adc_sizemask.aon",m2$,m2,9,m2-1
    wend

    if p9$="D" then
        h1$="Detail "+h1$
    else
        h1$="Summary "+h1$
    endif

    h2$="Product Selection: "

    if p8$="" then
        h2$=h2$+"All"
    else
        h2$=h2$+p8$
    endif

    headings$[0]=n1$
    headings$[1]=h1$
    headings$[2]=h2$
    headings$[3]=h3$
    when$=sysinfo.system_date$,clock$=""

    dim columns$[9,10]
    columns = 9

    columns$[0,0]="Item",                                       columns$[0,1]="C",columns$[0,2]="8"

    if p9$="D" then
        columns$[1,0]="Whse  Prod  UM  Description          Cust   Order       Shp-Date  Com?", columns$[1,1]="C",columns$[1,2]="40"
    else
        columns$[1,0]="Whse  Prod  UM  Description",                   columns$[1,1]="C",columns$[1,2]="30"
    endif

    columns$[2,0]="Past Due",                                 columns$[2,1]="N",columns$[2,2]="10",columns$[2,3]=m2$,columns$[2,10]="T"
    columns$[3,0]=fndate$(h4$(1,8))+"^"+fndate$(h5$(1,8)),    columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m2$,columns$[3,10]="T"
    columns$[4,0]=fndate$(h4$(9,8))+"^"+fndate$(h5$(9,8)),    columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$,columns$[4,10]="T"
    columns$[5,0]=fndate$(h4$(17,8))+"^"+fndate$(h5$(17,8)),  columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m2$,columns$[5,10]="T"
    columns$[6,0]=fndate$(h4$(25,8))+"^"+fndate$(h5$(25,8)),  columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$,columns$[6,10]="T"
    columns$[7,0]=fndate$(h4$(33,8))+"^"+" Future",           columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$,columns$[7,10]="T"
    columns$[8,0]="Total Qty",                                columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m2$,columns$[8,10]="T"
    columns$[9,0]="Total Value",                              columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"

    call pgmdir$+"adc_progress.aon","N","OPW_SCHEDULE","","","",0,opw02_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem --- Initial Read

    read (opw02_dev,key=firm_id$,dom=*next)

rem --- Main Loop Starts

    while more

        read record (opw02_dev,end=done) opw02a$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

        if pos(opw02a.order_status$=p7$)=0 then continue

        if wh$<>"" then
            if opw02a.warehouse_id$<>wh$ then
                continue
            endif
        endif

    rem --- Breaks

        if opw02a.firm_id$+opw02a.item_iddes$<>t0$ then gosub Item_Break

    rem --- Accumulate

        dim c[5]
        x=pos(opw02a.est_shp_date$>=h4$,-8)
        x=int((x+2)/8),c[x]=c[x]+opw02a.qty_ordered

		if p9$="D" then

            if l+1>l9 then gosub Print_Item
            gosub All_WareHouses

            if opw02a.dropship$="Y" then
                xwk = fnblank(1)
                OutVect!.addItem(fill(46)+"Drop  "+fnmask$(opw02a.customer_id$,p5$)+"  "+opw02a.order_no$+"  "+opw02a.order_status$+"  "+fndate$(opw02a.est_shp_date$)+"    "+opw02a.commit_flag$)
            else
                xwk = fnblank(1)
                OutVect!.addItem(fill(52)+fnmask$(opw02a.customer_id$,p5$)+"  "+opw02a.order_no$+"  "+opw02a.order_status$+"  "+fndate$(opw02a.est_shp_date$)+"    "+opw02a.commit_flag$)
            endif

			OutVect!.addItem(str(c[0]))
			OutVect!.addItem(str(c[1]))
			OutVect!.addItem(str(c[2]))
			OutVect!.addItem(str(c[3]))
			OutVect!.addItem(str(c[4]))
			OutVect!.addItem(str(c[5]))

			OutVect!.addItem(str(opw02a.qty_ordered))
			OutVect!.addItem(str(opw02a.extended_amt))

			l2=l2+1,l=l+1
		endif

        t[0]=t[0]+c[0]
        t[1]=t[1]+c[1]
        t[2]=t[2]+c[2]
        t[3]=t[3]+c[3]
        t[4]=t[4]+c[4]
        t[5]=t[5]+c[5]
        t[6]=t[6]+opw02a.extended_amt
        u0=u0+opw02a.extended_amt

    wend

done: rem --- End

    if total_recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    t9$="E"
    gosub Item_Break
    xwk = fnblank(10)
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    xwk = fnblank(1)
    OutVect!.addItem("                                                                                      "+ "Report Value: ")
    xwk = fnblank(7)
    OutVect!.addItem(str(u0))
    xwk = fnblank(10)

    goto std_exit

print_Item: rem --- Print Item

    if l>l9-2 then l=headings+1
    xwk = fnblank(10)

    if wh$="" then
        x$="ALL"
    else
        x$=opw02a.warehouse_id$
    endif

    OutVect!.addItem(opw02a.item_iddes$)
    OutVect!.addItem(" "+x$+"         "+opw02a.product_type$+"   "+ivm01a.unit_of_sale$+"      "+ivm01a.item_desc$)
    xwk = fnblank(8)
    l=l+2

    return

item_Break: rem --- Item Break

    if t0$<>"" then
        if p9$="D" then if l2<=1 then goto item_total
        if l+2>l9 then l=headings+1
        xwk = fnblank(10)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk = fnblank(2)
        OutVect!.addItem(str(t[0]))
        OutVect!.addItem(str(t[1]))
        OutVect!.addItem(str(t[2]))
        OutVect!.addItem(str(t[3]))
        OutVect!.addItem(str(t[4]))
        OutVect!.addItem(str(t[5]))
        OutVect!.addItem(str(t[0]+t[1]+t[2]+t[3]+t[4]+t[5]))
        OutVect!.addItem(str(t[6]))
        l=l+1

    item_total: rem --- Item total

        gosub All_WareHouses

    endif

    if t9$<>"" then return

    dim t[6]
    t0$=opw02a.firm_id$+opw02a.item_iddes$
    l2=0
    dim t[6],c[5]
    ivm01a.item_desc$="*Not on File*"
    x3$=""
    find record (ivm01_dev,key=firm_id$+opw02a.item_iddes$(1,20),dom=*next) ivm01a$

    if opw02a.line_code$="N" then
        ivm01a.item_desc$="*Non-Stock Item*"
        ivm01a.unit_of_sale$="EA"
    endif

    gosub Print_Item

    return

all_WareHouses: rem --- All Warehouses

    a3$=ivm01a.upc_code$+ivm01a.bar_code$

    dim b[16],w[16]
    if a3$="" then return

    for x3=1 to len(a3$) step 2
        find record (ivm02_dev,key=firm_id$+a3$(x3,2)+opw02a.item_iddes$(1,20),dom=exit_1) ivm02a$

        for x1=0 to 16
            b[x1]=b[x1]+w[x1]
        next x1

    exit_1: 
    next x3

    return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
