rem --- Get Default Scheduled Ship/Inventory Commit Date
rem --- Program opc_da v8.0.0 06Dec2007 (opc_da)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/06/2007 03:35:04)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved



            seterr std_error
            setesc std_error
            enter action$,shipdate$,comdate$,v3,status

rem --- Retrieve the program path

            pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+SYSINFO",err=*next)
            milestone=num(stbl("+MILESTONE",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

            files=2,begfile=1,endfile=files
            dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
            files$[1]="ars_params",ids$[1]="ARS_PARAMS"
            files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
            call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
            if status goto std_exit
            ars01a_dev=channels[1]
            ivs01a_dev=channels[2]

rem --- Dimension string templates

            dim ars01a$:templates$[1],ivs01a$:templates$[2]

rem --- Retrieve parameter records

            ars01a_key$=firm_id$+"AR00"
            find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
            ivs01a_key$=firm_id$+"IV00"
            find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open/Lock Files

            call pgmdir$+"syc_dg.bbx",sysgui_dev,sysgui$,sysgui,sysfin$,sysfin,ui$,status
            if status then goto std_exit

initializations: rem --- Initializations
            more=1
            dim message$[1]
            status=0
            restore_syscrc$=fnglobal$("+SYSCRC","")
            status=0
            w=68,h=7,x=6,y=13,title$="Default Order Entry Dates",char_win$=""

rem --- Display Resource

            dim resparams$[20],resparams[20]
            resparams$[0]=pgm(-2)
            resparams$[1]=pgm(-2)
            resparams$[6]=title$
            if ui$<>"W" then call pgmdir$+"syc_wa.bbx",0,w,h,x,y,resparams$[6],char_win$
            call pgmdir$+"syc_ra.bbx","P",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
            if status then goto std_exit
            gosub display_fields

rem --- Start at ITAC for GUI

while more
                        if ui$="W" then break

Scheduled_ship: rem --- Scheduled Ship Date

                        v0$="D"
                        v1$="R",v2$=shipdate$,v3$="",v4$="",v0=3,v1=57,v2=1,i0=0,control_id=3000
                        on v3 goto Ship_date,Scheduled_ship,flow_control,Scheduled_ship,flow_control,Ship_date,flow_control
Ship_date:
                        shipdate$=v$
                        break

Commit_date: rem --- Inventory Committment Date

                        v0$="D"
                        v1$="R",v2$=comdate$,v3$="",v4$="",v0=3,v1=57,v2=3,control_id=3001
                        on v3 goto Date_committed,Commit_date,flow_control,Commit_date,flow_control,Date_committed,flow_control
Date_committed:
                        comdate$=v$

rem --- Commit Inventory For Ship Date?

                        if shipdate$<=comdate$ then break
                        message$[0]="Orders will Not Commit Inventory When Scheduled"
                        message$[1]="On This Date (<Enter>=Continue)"
                        call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
                        if v3=4 then goto std_exit
                        break
wend

flow_control: rem --- Flow Control

                       on v3 goto incr_i0,incr_i0,decr_i0,incr_i0,start_done,done_v3
decr_i0:
                        if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1)
                        goto next_field
          

incr_i0:
        i0=i0+1


while more        
next_field:

                       on i0 goto Scheduled_ship,Commit_date,done

start_done: 
                       let i0=i0_done

done: rem --- Is The Above Information Correct?

                        if validate then let validate=0; goto std_exit
                        gosub display_fields
                        v0$="S"
                        v1$="CER",v2$="Y",v3$="",v4$="Is The Above Information Correct (Y/N)?",v0=1,v1=fnv(v4$,w),v2=22,control_id=i0-i0_done+1


done_v3:
                        on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done

done_test:

     
                        on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
                        validate=1
                        old_control_id=0

do_nonkey1:
                         i0=i0_nonkey1
                         v3=0
wend 

cancel:
                         v3=4; goto std_exit


display_fields: rem --- Display Fields

                        controls=1
                        dim controls[controls],values$[controls],values[controls],masks$[controls]
                        controls[0]=3000
                        controls[1]=3001
                        values$[0]=fndate$(shipdate$)
                        values$[1]=fndate$(comdate$)
                        call pgmdir$+"syc_rd.bbx","",my_context,0,controls,controls[all],values$[all],values[all],masks$[all],status
                        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src
rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
   exit
rem #endinclude std_exit.src

    end