rem --- Invoice History Report (Report Overlay)
rem --- Program opr_kb v8.0.0 23Jan2008 (opr_kb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/23/2008 12:28:31)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        seterr std_error
        setesc std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Initialize Data

        more=1
        ord=0
        ship=0,bo=0,l9=59,l=l9+1,headings=2
        dim r9$(0)
        dim s[2],t[4],u[3],headings$[7],y0$(32),x0$(32)
        m9$="###0.00%"
        m8$="####0.00-",clock$="",when$=sysinfo.system_date$
        m8=len(m8$)
        headings$[0]=n1$
        headings$[1]=n4$
        h0=132,h=0        
        t9$=""
        max_pcodes=50; dim t9[max_pcodes,3]; rem "TOTALS BY PRODUCT
        r9$="SPN"
        dim r[3,4]; rem " 0-3 = STANDARD,PROMOTIONAL,NON-STOCK,OTHER"

rem --- 0-4 = LIST,COST,QTY ORDERED,QTY B/O,QTY SHIPPED

        if ivs01a.lotser_flag$="S" then
            let x2$="Ser#"
        else
            if ivs01a.lotser_flag$="L" then
                let x2$="Lot#"
            endif
        endif

        if s0$="" then let h4$="First"
        if s1$="" then let h5$="Last"
        if s2$="" then let h6$="First"
        if s3$="" then let h7$="Last"
        if s4$="" then let h8$="All"
        if s5$="" then let h9$="All"
        
        headings$[2]="Beginning Customer : "+h4$+"        Beginning Invoice Date : "+h6$
        headings$[3]="Ending Customer      : "+h5$+"        Ending Invoice Date      : "+h7$
        headings$[4]="Salesperson       : "+h8$
        headings$[5]="Selected Item     : "+h9$
        headings$[6]="Minimum GP%   : "+str(s6:m9$)

rem --column heading

        dim columns$[11,10]
        columns = 11
            columns$[0,0]="Cust.No & Name",         columns$[0,1]="C",  columns$[0,2]="25"
            columns$[1,0]="Order.No",               columns$[1,1]="N",  columns$[1,2]="8",   columns$[1,10]="T"
            columns$[2,0]="Invoice No",             columns$[2,1]="N",  columns$[2,2]="12",  columns$[2,10]="T"
            columns$[3,0]="Invoice Date",           columns$[3,1]="N",  columns$[3,2]="12",  columns$[3,10]="T"
            columns$[4,0]="By",                     columns$[4,1]="N",  columns$[4,2]="12",  columns$[4,10]="T"
            columns$[5,0]="Sls",                    columns$[5,1]="N",  columns$[5,2]="12",  columns$[5,10]="T"
            columns$[6,0]="P.O#",                   columns$[6,1]="C",  columns$[6,2]="4"
            columns$[7,0]="Ship Via",               columns$[7,1]="N",  columns$[7,2]="12",  columns$[7,10]="T"
            columns$[8,0]="Dist Code",              columns$[8,1]="N",  columns$[8,2]="10"
            columns$[9,0]="Terms",                  columns$[9,1]="N",  columns$[9,2]="12",  columns$[9,10]="T"
            columns$[10,0]="Tax Code",              columns$[10,1]="N", columns$[10,2]="8",  columns$[10,10]="T"
            columns$[11,0]="        ",              columns$[11,1]="N", columns$[11,2]="6"

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,opt01_dev,1,meter_num,status

rem --- Options

        precision num(ivs01a.precision$)

rem --- Initial Read

        read (opt01_dev,key=firm_id$+"  "+s0$,dom=*next)

rem --- retrieve template for OPT_ORDHDR record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_ORDHDR","PRIMARY",opt01a_key_tpl$,table_chans$[all],status$
        dim opt01a_key$:opt01a_key_tpl$


rem --- retrieve template for OPT_ORDDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_ORDDET","PRIMARY",opt11a_key_tpl$,table_chans$[all],status$
        dim opt11a_key$:opt11a_key_tpl$


rem --- retrieve template for OPT_INVLSDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_INVLSDET","PRIMARY",opt21a_key_tpl$,table_chans$[all],status$
        dim opt21a_key$:opt21a_key_tpl$


rem --- Main Loop Starts
        while more

            opt01a_key$=key(opt01_dev,end=done)
            if pos(firm_id$=opt01a_key$)<>1 then break
            if s1$<>"" and opt01a_key.firm_id$+opt01a_key.ar_type$+opt01a_key.customer_id$>firm_id$+"  "+s1$ then break
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            read record (opt01_dev,key=opt01a_key$) opt01a$
            if s2$<>"" and opt01a.invoice_date$<s2$ then continue
            if s3$<>"" and opt01a.invoice_date$>s3$ then continue
            if s4$<>"" and opt01a.slspsn_code$<>s4$ then continue

rem --- Heading

            if opt01a.invoice_type$="V" then

rem --- Void

                OutVect!.addItem(opt01a.customer_id$+ars01a.customer_output$+" "+arm01a.customer_name$)
                OutVect!.addItem(opt01a.order_no$)
                OutVect!.addItem(opt01a.ar_inv_no$)
                OutVect!.addItem(fndate$(opt01a.invoice_date$))
                OutVect!.addItem(opt01a.ord_taken_by$)
                OutVect!.addItem( opt01a.slspsn_code$)
                OutVect!.addItem(" *** VOID ***")
                xwk = fnblank(5)

                gosub find_customer
                continue
            endif

rem --- Print

            gosub selected_item
            if l$<>"PRINT" then continue
            gosub find_customer
            gosub order_header

rem --- Detail

            if l2<>0 then
                for i=1 to l2
                    opt11a_key$=l0$[i,0]
                    opt11a.line_code$=l0$[i,1]
                    opt11a.man_price$=l0$[i,2]
                    opt11a.product_type$=l0$[i,3]
                    opt11a.reserved_str$=l0$[i,4]
                    opt11a.warehouse_id$=l0$[i,5]
                    opt11a.item_id$=l0$[i,6]
                    opt11a.order_memo$=l0$[i,7]

                    opt11a.unit_cost=l0[i,0]
                    opt11a.unit_price=l0[i,1]
                    opt11a.qty_ordered=l0[i,2]
                    opt11a.qty_backord=l0[i,3]
                    opt11a.qty_shipped=l0[i,4]
                    opt11a.std_list_prc=l0[i,5]
                    opt11a.ext_price=l0[i,6]
                    opt11a.taxable_amt=l0[i,7]
                    gosub detail
                next i
                goto invoice_totals
            endif

detail: rem --- Detail

            w0=opt11a.unit_cost
            desc$=opt11a.order_memo$
            if opt11a.line_code$<>ivm10a.product_type$ then
                dim x0$(32)
            endif
            find record (opm02_dev,key=firm_id$+opt11a.line_code$,dom=*next) opm02a$

            if pos(opm02a.line_type$="SP")<>0 then
                find record (ivm01_dev,key=firm_id$+opt11a.item_id$,dom=label_one) ivm01a$
                if pos(" "<>desc$)=0 then let desc$=ivm01a.item_desc$
                opt11a.disc_percent=0
                opt11a.disc_percent=num(opt11a.reserved_str$,err=*next)
                opt11a.comm_percent=opt11a.disc_percent*opt11a.unit_price*opt11a.qty_shipped/100
                opt11a.ext_price=opt11a.unit_price*opt11a.qty_shipped-opt11a.comm_percent
            endif

label_one:

            gosub print_detail
            s[0]=s[0]+opt11a.ext_price
            s[1]=s[1]+opt11a.unit_cost*opt11a.qty_shipped
            s[2]=s[2]+opt11a.comm_percent
            s0=s0+1
            u[0]=u[0]+opt11a.ext_price
            u[1]=u[1]+opt11a.unit_cost*opt11a.qty_shipped
            u[2]=u[2]+opt11a.comm_percent
            ord=ord+opt11a.qty_ordered
            bo=bo+opt11a.qty_backord
            ship=ship+opt11a.qty_shipped
            r9=0
            r9=pos(opm02a.line_type$=r9$)

            if r9<>0 then
                r[r9-1,0]=r[r9-1,0]+opt11a.ext_price
                r[r9-1,1]=r[r9-1,1]+opt11a.unit_cost*opt11a.qty_shipped
                r[r9-1,2]=r[r9-1,2]+opt11a.qty_ordered
                r[r9-1,3]=r[r9-1,3]+opt11a.qty_backord
                r[r9-1,4]=r[r9-1,4]+opt11a.qty_shipped
            endif

            if opm02a.line_type$="O" then
                let r[3,0]=r[3,0]+opt11a.ext_price
            endif

            if opm02a.prod_type_pr$<>"N" then
                if pos(opt11a.product_type$=t9$,3)=0 then let t9$=t9$+opt11a.product_type$
                if len(t9$)/3>max_pcodes then gosub p_codes
                x=pos(opt11a.product_type$=t9$,3)
                x=int(x/3)
                t9[x,0]=t9[x,0]+opt11a.ext_price
                t9[x,1]=t9[x,1]+opt11a.unit_cost*opt11a.qty_shipped
                t9[x,2]=t9[x,2]+opt11a.comm_percent
                t9[x,3]=t9[x,3]+opt11a.qty_shipped
            endif

            return

invoice_totals: rem --- Invoice Totals

            gosub total_freight
            dim s[2]; let s0=0
            ord=0
            bo=0,ship=0

        wend
rem --- Main Loop Ends


done: rem --- Totals

        precision 2
        e9$="E"
        tmp$=str(fnd(u[0]-u[1],u[0]):m8$)
        if len(tmp$)>m8 then dim tmp$(m8,"*")

        xwk = fnblank(12)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk = fnblank(2)
        OutVect!.addItem("****Report Totals: ")
        OutVect!.addItem("Sales Total: "+" "+str(t[0]))
        xwk = fnblank(3)
        OutVect!.addItem(str(u[3]:m1$))
        xwk = fnblank(1)
        OutVect!.addItem(str(u[1]:m1$))
        OutVect!.addItem(str(u[0]-u[1]:m1$))
        OutVect!.addItem(tmp$)

        xwk = fnblank(3)
        OutVect!.addItem("Discount: ")
        xwk = fnblank(3)
        OutVect!.addItem(str(-t[2]:m1$))
        xwk = fnblank(4)

        xwk = fnblank(3)
        OutVect!.addItem("Freight: ")
        xwk = fnblank(3)
        OutVect!.addItem(str(t[1]:m1$))
        xwk = fnblank(4)

        xwk = fnblank(3)
        OutVect!.addItem("Sales Tax: ")
        xwk = fnblank(3)
        OutVect!.addItem(str(t[4]:m1$))
        xwk = fnblank(4)

        xwk = fnblank(3)
        OutVect!.addItem("*  Report Total:")
        xwk = fnblank(3)
        OutVect!.addItem(str(u[3]+t[1]-t[2]+t[4]:m1$))
        xwk = fnblank(4)

        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk = fnblank(3)
        OutVect!.addItem("Total # Of Invoices: ")
        xwk = fnblank(3)
        OutVect!.addItem(str(u2:"###0-"))
        xwk = fnblank(4)


rem --- Totals By Product

        dim t[3]
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("***Product Type Totals*** ")
        xwk = fnblank(11)
        OutVect!.addItem("Product")
        OutVect!.addItem("Units")
        OutVect!.addItem("Sales")
        OutVect!.addItem("Cost")
        OutVect!.addItem("G.P.")
        OutVect!.addItem("G.P. %")
        xwk = fnblank(6)

        if len(t9$)<>0 then
            for x=1 to len(t9$) step 3
                x0=int(x/3)
                rem dim x0$(30)
                let ivm10a.code_desc$="***Not On File***"
                find record (ivm10_dev,key=firm_id$+"A"+t9$(x,3),dom=*next) ivm10a$

                if t9[x0,0]=0 and t9[x0,1]=0 then continue
                OutVect!.addItem(t9$(x,3)+" "+ivm10a.code_desc$)
                OutVect!.addItem(str(t9[x0,3]:m1$))
                OutVect!.addItem(str(t9[x0,0]:m1$))
                OutVect!.addItem(str(t9[x0,1]:m1$))
                OutVect!.addItem(str(t9[x0,0]-t9[x0,1]:m1$))
                OutVect!.addItem(str(fnd(t9[x0,0]-t9[x0,1],t9[x0,0]):m8$))
                xwk = fnblank(6)

                t[0]=t[0]+t9[x0,0]
                t[1]=t[1]+t9[x0,1]
                t[2]=t[2]+t9[x0,2]
                t[3]=t[3]+t9[x0,3]
                l=l+1
            next x
        endif

        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        OutVect!.addItem("Report Totals: ")
        OutVect!.addItem(str(t[3]:m1$))
        OutVect!.addItem(str(t[0]:m1$))
        OutVect!.addItem(str(t[1]:m1$))
        OutVect!.addItem(str(t[0]-t[1]:m1$))
        OutVect!.addItem(str(fnd(t[0]-t[1],t[0]):m8$))
        xwk = fnblank(6)

rem --- Total By Line Type

        dim t[1]

        OutVect!.addItem("*** Line Type Total ***")
        xwk = fnblank(11)
        OutVect!.addItem("Description")
        OutVect!.addItem("Ord")
        OutVect!.addItem("B/O")
        OutVect!.addItem("Ship")
        OutVect!.addItem("Sales")
        OutVect!.addItem("Cost")
        xwk = fnblank(6)
        xwk = fnblank(12)

        if r[0,0]<>0 or r[0,1]<>0 or r[0,2]<>0 or r[0,3]<>0 or r[0,4]<>0 then
            OutVect!.addItem("Standard Items")
            OutVect!.addItem(str(r[0,2]))
            OutVect!.addItem(str(r[0,3]))
            OutVect!.addItem(str(r[0,4]))
            OutVect!.addItem(str(r[0,0]))
            OutVect!.addItem(str(r[0,1]))
            xwk = fnblank(6)
        endif

        if r[1,0]<>0 or r[1,1]<>0 or r[1,2]<>0 or r[1,3]<>0 or r[1,4]<>0 then
            OutVect!.addItem("Promotional Items")
            OutVect!.addItem(str(r[1,2]))
            OutVect!.addItem(str(r[1,3]))
            OutVect!.addItem(str(r[1,4]))
            OutVect!.addItem(str(r[1,0]))
            OutVect!.addItem(str(r[1,1]))
            xwk = fnblank(6)
        endif

        if r[2,1]<>0 or r[2,0]<>0 or r[2,2]<>0 or r[2,3]<>0 or r[2,4]<>0 then
            OutVect!.addItem("Non-Stock Items")
            OutVect!.addItem(str(r[2,2]))
            OutVect!.addItem(str(r[2,3]))
            OutVect!.addItem(str(r[2,4]))
            OutVect!.addItem(str(r[2,0]))
            OutVect!.addItem(str(r[2,1]))
            xwk = fnblank(6)
        endif

        if r[3,0]<>0 then 
            OutVect!.addItem("Other Charges")
            xwk = fnblank(3)
            OutVect!.addItem(str(r[3,0]))
            xwk = fnblank(7)
        endif

        for x=0 to 3
            t[0]=t[0]+r[x,0]
            t[1]=t[1]+r[x,1]
        next x

        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("Report Totals: ")
        xwk = fnblank(3)
        OutVect!.addItem(str(t[0]))
        OutVect!.addItem(str(t[1]))
        xwk = fnblank(6)

        goto std_exit

order_header: rem --- Order Header

        gosub terms_code
        OutVect!.addItem(fnmask$(opt01a.customer_id$(1,p[0]),ars01a.customer_output$)+" "+arm01a.customer_name$)
        OutVect!.addItem(opt01a.order_no$)
        OutVect!.addItem(opt01a.ar_inv_no$)
        OutVect!.addItem(fndate$(opt01a.invoice_date$))
        OutVect!.addItem(opt01a.ord_taken_by$)
        OutVect!.addItem(opt01a.slspsn_code$)
        OutVect!.addItem(opt01a.customer_po_no$)
        OutVect!.addItem(opt01a.ar_ship_via$)
        OutVect!.addItem(opt01a.dist_code$)
        OutVect!.addItem(arm10a.ar_terms_code$)
        OutVect!.addItem(opt01a.tax_code$)
        xwk = fnblank(1)

        xwk = fnblank(12)
        OutVect!.addItem("Ln Cd Prd Whs Item")
        OutVect!.addItem("Ord")
        OutVect!.addItem("B/O")
        OutVect!.addItem("Ship")
        OutVect!.addItem("Disc")
        OutVect!.addItem("Price")
        xwk = fnblank(1)
        OutVect!.addItem("Gross Sales")
        OutVect!.addItem("Cost")
        OutVect!.addItem("Extended Cost")
        OutVect!.addItem("Profit")
        OutVect!.addItem("GP %")

        return

total_freight: rem --- Sales Total Freight Ssles Tax/Invoice Total

        precision 2
        xwk = fnblank(3)
        xwk = fnblank(9)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk = fnblank(3)
        OutVect!.addItem("Sales Total: ")
        xwk = fnblank(3)
        OutVect!.addItem(str(s[0]:m1$))
        xwk = fnblank(1)
        OutVect!.addItem(str(s[1]:m1$))
        OutVect!.addItem(str(s[0]-s[1]:m1$))
        OutVect!.addItem(str(tmp$))

        xwk = fnblank(3)
        OutVect!.addItem("Discount:")
        xwk = fnblank(3)
        OutVect!.addItem(str(-opt01a.discount_amt:m1$))
        xwk = fnblank(4)

        xwk = fnblank(3)
        OutVect!.addItem("Freight:")
        xwk = fnblank(3)
        OutVect!.addItem(str(opt01a.freight_amt:m1$))
        xwk = fnblank(4)

        xwk = fnblank(3)
        OutVect!.addItem("Sales Tax:")
        xwk = fnblank(3)
        OutVect!.addItem(str(opt01a.tax_amount:m1$))
        xwk = fnblank(4)

        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk = fnblank(3)
        OutVect!.addItem("*  Invoice Total:")
        xwk = fnblank(3)
        OutVect!.addItem(str(s[0]+opt01a.freight_amt-opt01a.discount_amt+opt01a.tax_amount:m1$))
        xwk = fnblank(4)

        xwk = fnblank(12)

        tmp$=str(fnd(s[0]-s[1],s[0]):m8$)
        if len(tmp$)>m8 then dim tmp$(m8,"*")

        u[3]=u[3]+s[0]
        t2=t2+1
        u2=u2+1
        l=l+7
        ordt=ordt+ord
        bot=bot+bo
        shipt=shipt+ship
        t[1]=t[1]+opt01a.freight_amt
        t[2]=t[2]+opt01a.discount_amt
        t[4]=t[4]+opt01a.tax_amount
        precision num(ivs01a.precision$)
        return

serialized_inventory: rem --- Serialized/Lotted Inventory

        read (opt21_dev,key=opt11a.firm_id$+opt11a.ar_type$+opt11a.customer_id$+opt11a.ar_inv_no$+opt11a.line_no$,dom=*next)
        while more
            opt21a_key$=key(opt21_dev,end=*break)
            if opt21a_key.firm_id$+opt21a_key.ar_type$+opt21a_key.customer_id$+opt21a_key.ar_inv_no$+opt21a_key.line_no$<>opt11a.firm_id$+opt11a.ar_type$+opt11a.customer_id$+opt11a.ar_inv_no$+opt11a.line_no$ then break
            read record (opt21_dev,key=opt21a_key$) opt21a$
            OutVect!.addItem(x2$+" "+opt21a_key.sequence_no$+" "+r1$)
            OutVect!.addItem(str(r0:m2$))
            OutVect!.addItem(str(r1:m2$))
            xwk = fnblank(5)
            OutVect!.addItem(str(r2:m3$))
            xwk = fnblank(3)
        wend
        return

print_detail: rem --- Print Detail

        if pos(opm02a.line_type$="MO")>0 then
            OutVect!.addItem(opt11a_key.line_no$+"  "+opt11a.line_code$+"  "+opt11a.warehouse_id$+" "+desc$)
            xwk = fnblank(11)
        else
            OutVect!.addItem(opt11a_key.line_no$+"  "+opt11a.line_code$+" "+opt11a.product_type$+"  "+opt11a.warehouse_id$+"   "+cvs(opt11a.item_id$,3)+" "+desc$)
            xwk = fnblank(11)
        endif

        if pos(opm02a.line_type$="M")<=0 then

            if pos(opm02a.line_type$="O")<=0 then
                xwk = fnblank(1)
                OutVect!.addItem(str(opt11a.qty_ordered:m2$))
                OutVect!.addItem(str(opt11a.qty_backord:m2$))
                OutVect!.addItem(str(opt11a.qty_shipped:m2$))
            else
                xwk = fnblank(4)
            endif

            tmp$=str(fnd(opt11a.ext_price-opt11a.unit_cost*opt11a.qty_shipped,opt11a.ext_price):m8$)
            if len(tmp$)>m8 then dim tmp$(m8,"*")
            OutVect!.addItem(str(opt11a.disc_percent:m9$))
            OutVect!.addItem(str(opt11a.unit_price:m3$))
            xwk = fnblank(1)
            OutVect!.addItem(str(opt11a.ext_price:m1$))
            OutVect!.addItem(str(opt11a.unit_cost:m3$))
            OutVect!.addItem(str(opt11a.unit_cost*opt11a.qty_shipped:m1$))
            OutVect!.addItem(str(opt11a.ext_price-opt11a.unit_cost*opt11a.qty_shipped:m1$))
            OutVect!.addItem(str(tmp$))
            
        endif

        if pos(opm02a.line_type$="SP")<>0 and pos(ivs01a.lotser_flag$="SL")<>0 and ivm01a.lotser_item$="Y" then gosub serialized_inventory
        return

find_customer: rem --- Find Customer

        arm01a.customer_name$="Not On File"
        find record (arm01_dev,key=firm_id$+opt01a.customer_id$,dom=*next) arm01a$
        find record (arm02_dev,key=firm_id$+opt01a.customer_id$+"  ",dom=*next) arm02a$
        return

p_codes: rem --- Too Many Pcodes For T9[] Array

        tmp[all]=t9[all]
        max_pcodes=max_pcodes+20
        dim t9[max_pcodes,3]
        for k=0 to max_pcodes-20
            t9[k,0]=tmp[k,0]
            t9[k,1]=tmp[k,1]
            t9[k,2]=tmp[k,2]
            t9[k,3]=tmp[k,3]
        next k
        return

selected_item: rem --- Check For Selected Item and Minimum GP%

        l2=0
        l$=""
        read (opt11_dev,key=opt01a.firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$+$ff$,dom=*next)
        m=1
        opt11a_key$=keyp(opt11_dev,end=no_invoice_detail_history)
        if pos((opt01a.firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$)=opt11a_key$)=1 then 
            
            m=num(opt11a_key.line_no$)
            dim l0$[m,7],l0[m,7],l1[1]
            read (opt11_dev,key=opt01a.firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$+"000",dom=*next)

            while more
                opt11a_key$=key(opt11_dev,end=*break)
                if (opt11a_key.firm_id$+opt11a_key.ar_type$+opt11a_key.customer_id$+opt11a_key.ar_inv_no$)<>(opt01a.firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$) then break
                find record (opt11_dev,key=opt11a_key$) opt11a$
                l2=l2+1

                l0$[l2,0]=opt11a_key$
                l0$[l2,1]=opt11a.line_code$
                l0$[l2,2]=opt11a.man_price$
                l0$[l2,3]=opt11a.product_type$
                l0$[l2,4]=opt11a.reserved_str$
                l0$[l2,5]=opt11a.warehouse_id$
                l0$[l2,6]=opt11a.item_id$
                l0$[l2,7]=cvs(opt11a.order_memo$,2)
                l0[l2,0]=opt11a.unit_cost
                l0[l2,1]=opt11a.unit_price
                l0[l2,2]=opt11a.qty_ordered
                l0[l2,3]=opt11a.qty_backord
                l0[l2,4]=opt11a.qty_shipped
                l0[l2,5]=opt11a.std_list_prc
                l0[l2,6]=opt11a.ext_price
                l0[l2,7]=opt11a.taxable_amt

                if opt11a.line_code$<>opm02a.line_code$ then find record (opm02_dev,key=firm_id$+opt11a.line_code$,dom=*next) opm02a$

                if pos(opm02a.line_type$="SNPO")=0 then continue
                if s5$<>"" then 
                    if opm02a.line_type$<>"O" then
                        if opm02a.line_type$<>"N" and s5$=opt11a.item_id$(1,i[0]) then let l$="PRINT"
                        if opm02a.line_type$="N" and pos(s5$=opt11a.order_memo$)=1 then let l$="PRINT"
                    endif
                else
                    let l$="PRINT"
                endif

                if s6=100 then continue
                if opm02a.line_type$="O" then
                    let l1[0]=l1[0]+opt11a.ext_price
                    continue
                endif
                w9=0
                w9=num(opt11a.reserved_str$,err=*next)
                w9=opt11a.qty_shipped*opt11a.unit_price*w9/100
                l1[0]=l1[0]+opt11a.qty_shipped*opt11a.unit_price-w9
                l1[1]=l1[1]+opt11a.unit_cost*opt11a.qty_shipped
            wend
        endif

rem --- End Of Invoice

        if s6=100 or s5$<>"" and l$="" then return 
        if l1[0]<>0 then
            let w8=(l1[0]-l1[1])*100/l1[0]
        else
            let w8=0
        endif
        return

no_invoice_detail_history: rem --- No Invoice Detail History

        if s5$<>"" then 
            return
        endif

        s[0]=opt01a.total_sales
        s[1]=opt01a.total_cost
        if s[0]<>0 then
            let w8=(s[0]-s[1])*100/s[0]
        else
            let w8=0
        endif      
        if w8>s6 then
            let l$=""
        else
            let l$="PRINT"
        endif
        return

terms_code: rem --- Terms Code

        dim w$(30)
        let arm10a.ar_terms_code$="* Not On File *"
        find record (arm10_dev,key=firm_id$+"A"+opt01a.terms_code$,dom=*next) arm10a$
        let w$=arm10a.code_desc$
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

        def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

rem     def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")
        def fnd(q1,q2)=sgn(abs(q2))*q1*100/(q2+sgn(abs(q2))-1)

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
        def fnblank(q0)
            for q1=1 to q0
                OutVect!.addItem("")
            next q1
            return q1
        fnend

rem #include fndate.src

        def fndate$(q$)
            q1$=""
            q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
            if q1$="" q1$=q$
            return q1$
        fnend

rem #endinclude fndate.src

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release

rem --- #endinclude std_end.src

        end
