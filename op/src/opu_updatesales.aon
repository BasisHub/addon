rem --- Sales Register Update (Sales Analysis And History)
rem --- Program opu_ca v8.0.0 08Feb2008 (opu_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/08/2008 10:10:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

        next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
        if OutVect!<>null() OutVect!=null()

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=28,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]

        files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
        files$[2]="arm-02",ids$[2]="ARM_CUSTDET"
        files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
        files$[4]="ivm-02",ids$[4]="IVM_ITEMWHSE"
        files$[5]="ivw-05",ids$[5]="IVW_LFCOST"
        files$[6]="ope-01",ids$[6]="OPE_ORDHDR"
        files$[7]="ope-04",ids$[7]="OPE_PRNTLIST"
        files$[8]="ope-11",ids$[8]="OPE_ORDDET"
        files$[9]="ope-31",ids$[9]="OPE_ORDSHIP"
        files$[10]="ope-41",ids$[10]="OPE_INVCASH"
        files$[11]="opm-02",ids$[11]="OPC_LINECODE"
        files$[12]="opm-09",ids$[12]="OPM_CUSTJOBS"
        files$[13]="opt-01",ids$[13]="OPT_ORDHDR"
        files$[14]="opt-11",ids$[14]="OPT_ORDDET"
        files$[15]="opt-31",ids$[15]="OPT_INVSHIP"
        files$[16]="opt-41",ids$[16]="OPT_INVCASH"
        files$[17]="sam-01",ids$[17]="SAM_CUSTOMER"
        files$[18]="sam-02",ids$[18]="SAM_TERRITRY"
        files$[19]="sam-03",ids$[19]="SAM_SALESPSN"
        files$[20]="sam-04",ids$[20]="SAM_CUSTTYPE"
        files$[21]="sam-05",ids$[21]="SAM_CUSTSHIP"
        files$[22]="sam-06",ids$[22]="SAM_CUSTSIC"
        files$[23]="sam-07",ids$[23]="SAM_ITEM"
        files$[24]="sam-08",ids$[24]="SAM_WAREHSE"
        files$[25]="sam-09",ids$[25]="SAM_VENDOR"
        files$[26]="sam-10",ids$[26]="SAM_DISTCODE"
        files$[27]="sam-11",ids$[27]="SAM_NONSTOCK"
        files$[28]="ars_params",ids$[28]="ARS_PARAMS"



        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status

        if status goto std_exit

        arm01_dev=channels[1]
        arm02_dev=channels[2]
        ivm01_dev=channels[3]
        ivm02_dev=channels[4]
        ivw05_dev=channels[5]
        ope01_dev=channels[6]
        ope04_dev=channels[7]
        ope11_dev=channels[8]
        ope31_dev=channels[9]
        ope41_dev=channels[10]
        opm02_dev=channels[11]
        opm09_dev=channels[12]
        opt01_dev=channels[13]
        opt11_dev=channels[14]
        opt31_dev=channels[15]
        opt41_dev=channels[16]
        sam01_dev=channels[17]
        sam02_dev=channels[18]
        sam03_dev=channels[19]
        sam04_dev=channels[20]
        sam05_dev=channels[21]
        sam06_dev=channels[22]
        sam07_dev=channels[23]
        sam08_dev=channels[24]
        sam09_dev=channels[25]
        sam10_dev=channels[26]
        sam11_dev=channels[27]
        ars01a_dev=channels[28]


rem --- Dimension string templates
rem opt51a$:templates$[17],opt61a$:templates$[18],opt81a$:templates$[19],sam21a$:templates$[31]

        dim arm01a$:templates$[1],arm02a$:templates$[2],ivm01a$:templates$[3],
:	ivm02a$:templates$[4],ivw05a$:templates$[5],ope01a$:templates$[6],
:       ope04a$:templates$[7],ope11a$:templates$[8],ope31a$:templates$[9],
:       ope41a$:templates$[10],opm02a$:templates$[11],opm09a$:templates$[12],
:       opt01a$:templates$[13],opt11a$:templates$[14],opt31a$:templates$[15],
:	opt41a$:templates$[16],sam01a$:templates$[17],sam02a$:templates$[18],
:       sam03a$:templates$[19],sam04a$:templates$[20],sam05a$:templates$[21],
:       sam06a$:templates$[22],sam07a$:templates$[23],sam08a$:templates$[24],
:       sam09a$:templates$[25],sam10a$:templates$[26],sam11a$:templates$[27],
:       ars01a$:templates$[28]



rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$




rem --- Initializations

        precision i[2]
        dim iv_files[44],iv_info$[3],iv_info[0],iv_params$[4],iv_refs$[20],iv_refs[20]
        iv_files[0]=sys01_dev
        iv_files[1]=ivm01_dev
        iv_files[2]=ivm02_dev
        iv_files[4]=ivm04_dev
        iv_files[40]=ivw04_dev
        iv_info$[0]=firm_id$
        iv_info[0]=g[0]
        iv_params$[0]=sysinfo.system_date$
        iv_params$[1]=sysinfo.user_id$
        iv_params$[2]=i2$
        iv_params$[3]=i3$
        iv_params$[4]=i4$


rem --- retrieve template for OPE_PRNTLIST record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_PRNTLIST","PRIMARY",ope04a_key_tpl$,table_chans$[all],status$
        dim ope04a_key$:ope04a_key_tpl$

rem --- retrieve template for OPE_ORDDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDDET","PRIMARY",ope11a_key_tpl$,table_chans$[all],status$
        dim ope11a_key$:ope11a_key_tpl$

rem --- retrieve template for OPE_ORDHDR record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_ORDHDR","PRIMARY",opt01a_key_tpl$,table_chans$[all],status$
        dim opt01a_key$:opt01a_key_tpl$

rem --- retrieve template for OPE_ORDHDR record key (instead for opt-51)
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_ORDHDR","ALT_KEY_01",opt01a_altkey01_tpl$,table_chans$[all],status$
        dim opt01a_altkey1$:opt01a_altkey01_tpl$

rem --- retrieve template for OPE_ORDHDR record key (instead for opt-61)
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_ORDHDR","ALT_KEY_02",opt01a_altkey02_tpl$,table_chans$[all],status$
        dim opt01a_altkey2$:opt01a_altkey02_tpl$


rem --- Background
rem --- Continue?

        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
        v4$="Are you ready to update the Sales Register"
        call pgmdir$+"adc_yesno.aon",0,v4$,0,v$,v3
        if v$<>"YES" then goto no_to_update
        call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"Sales Analysis And History","Updating","",m0+8,ope04_dev,1,0,ignore_status

rem --- Disallow 'M'enu Option In Error Routine

        exit_ctrl=1
        more=1

rem --- Position File

        read (ope04_dev,key=firm_id$+"I",dom=*next)



rem --- Main read --- Main Loop
while more

        ope04a_key$=key(ope04_dev,end=done)
        read (ope04_dev)
        if pos(firm_id$+"I"=ope04a_key$)<>1 then goto done
        extract record (ope01_dev,key=ope04a_key.firm_id$+ope04a_key.ar_type$+"000",dom=*continue) ope01a$
        if ope01a.print_status$+ope01a.lock_status$<>"YS" then continue
        if ope01a.ordinv_flag$<>"I" then continue
        ope01a.lock_status$="1"
        write record (ope01_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$+ope01a.sequence_000$) ope01a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Addition Reads

        dim b[2]
        find record (arm01_dev,key=firm_id$+ope01a.customer_id$,dom=*next) arm01a$
        find record (arm02_dev,key=firm_id$+ope01a.customer_id$+"  ",dom=*next) arm02a$

rem --- Write Invoice History Header And Sorts

        ah$=a0$
        opt01a$=ope01a$

        opt01a.ar_inv_no$=opt01a.order_no$
        opt01a.order_no$=ope01a.order_no$
        write record (opt01_dev,key=opt01a.firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$+opt01a.sequence_000$) opt01a$

rem     (opt01a_altkey1$ is the first altkey of opt01a which is used instead of opt51a)

        opt01a_altkey1.firm_id$=opt01a.firm_id$
        opt01a_altkey1.ar_type$=opt01a.ar_type$
        opt01a_altkey1.ar_inv_no$=opt01a.ar_inv_no$
        opt01a_altkey1.customer_id$=opt01a.customer_id$
        write record (opt51_dev,key=opt01a_altkey1.firm_id$+opt01a_altkey1.ar_type$+opt01a_altkey1.ar_inv_no$+opt01a_altkey1.customer_id$) opt01a_altkey1$

        opt01a_altkey2.firm_id$=opt01a.firm_id$
        opt01a_altkey2.ar_type$=opt01a.ar_type$
        opt01a_altkey2.invoice_date$=opt01a.invoice_date$
        opt01a_altkey2.ar_inv_no$=opt01a.ar_inv_no$
        opt01a_altkey2.customer_id$=opt01a.customer_id$
        write record (opt61_dev,key=opt61a.firm_id$+opt61a.ar_type$+opt61a.invoice_date$+opt61a.ar_inv_no$+opt61a.customer_id$) opt01a_altkey2$

        art63_k$=opt01a.firm_id$+opt01a.ar_type$+opt01a.order_no$+opt01a.ar_inv_no$+opt01a.customer_id$

rem --- Write Sales Commission History

        if ope01a.invoice_type$="V" then continue

rem --- Write Manual Ship-To History

        if ih$="Y" then
            if arm02a.inv_hist_flg$="Y" then
                find record (ope31_dev,key=ope01a.firm_id$+ope01a.customer_id$+ope01a.order_no$,dom=copy_invoice_to_history) ope31a$

                opt31a.firm_id$=ope31a.firm_id$
                opt31a.customer_id$=ope31a.customer_id$
                opt31a.ar_inv_no$=ope31a.ar_inv_no$

                opt31a.ar_inv_no$=ope31a.ar_inv_no$
                write record (opt31_dev,key=opt31a.firm_id$+opt31a.customer_id$+opt31a.ar_inv_no$) opt31a$
            endif
        endif

copy_invoice_to_history: rem --- Copy Invoice Cash Receipts to History

        if ope01a.cash_sale$="Y" then
            find record (ope41_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=position_invoice_detail_file) ope41a$

            opt41a.firm_id$=ope41a.firm_id$
            opt41a.ar_type$=ope41a.ar_type$
            opt41a.customer_id$=ope41a.customer_id$
            opt41a.ar_inv_no$=ope41a.ar_inv_no$
            opt41a.invoice_date$=ope41a.invoice_date$
            opt41a.cash_rec_cd$=ope41a.cash_rec_cd$
            opt41a.ar_check_no$=ope41a.ar_check_no$
            opt41a.payment_id$=opte1a.payment_id$
            opt41a.expire_date$=ope41a.expire_date$
            opt41a.order_no$=ope41a.order_no$

            opt41a.ar_inv_no$=ope41a.ar_inv_no$
            opt41a.order_no$=ope41a.order_no$

            write record (opt41_dev,key=opt41a.firm_id$+opt41a.ar_type$+opt41a.customer_id$+opt41a.ar_inv_no$) opt41a$
        endif

position_invoice_detail_file: rem --- Position Invoice Detail File

        read (ope11_dev,key=ope04a_key.firm_id$+ope04a_key.ar_type$+ope04a_key.customer_id$+ope04a_key.order_no$,dom=*next)

rem --- Read next line item  --- Inner Loop

        while more
                ope11a_key$=key(ope11_dev,end=*break)
                if ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$<>ope04a_key.firm_id$+ope04a_key.ar_type$+ope04a_key.customer_id$+ope04a_key.order_no$ then break
                read record (ope11_dev) ope11a$
                if lf$="Y" then
                    find record (ivw05_dev,key=ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.item_id$+ope11a.line_no$,err=*next) ivw05a$
                endif

rem --- Write Invoice History Detail
rem --- escape if ih$<>"Y" then goto 2100
rem --- escape if x3$(38,1)<>"Y" then goto 2100

                opt11a.firm_id$=ope11a.firm_id$
                opt11a.ar_type$=ope11a.ar_type$
                opt11a.customer_id$=ope11a.customer_id$
                opt11a.order_no$=ope11a.order_no$
                opt11a.line_no$=ope11a.line_no$
                opt11a.line_code$=ope11a.line_code$
                opt11a.man_price$=ope11a.man_price$
                opt11a.product_type$=ope11a.product_type$
                opt11a.reserved_str$=ope11a.reserved_str$
                opt11a.warehouse_id$=ope11a.warehouse_id$
                opt11a.item_id$=ope11a.item_id$

                opt11a.order_no$=ope01a.ar_inv_no$
                write record (opt11_dev,key=opt11a.firm_id$+opt11a.ar_type$+opt11a.customer_id$+opt11a.order_no$) opt11a$

rem ---Get Line Type

                if ope11a.commit_flag$="N" then continue
                if ope11a.line_code$<>k2$ then
                    k2$=ope11a.line_code$
                    find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*next) opm02a$
                endif

rem ---Commission Detail and Last Price

                if opm02a.line_type$<>"N" then write record (opt81_dev,key=firm_id$+opt11a.customer_id$+opt11a.item_id$) opt81a$
                if pos(opm02a.line_type$="SNP") and opt11a.ext_price>0 then let b[0]=b[0]+opt11a.ext_price
                if opt11a.ext_price<0 then let b[1]=b[1]+opt11a.ext_price
                if pos(opm02a.line_type$="OM") then let b[2]=b[2]+opt11a.ext_price

rem ---Update Sales Analysis

                if sa$<>"Y" then continue
                if pos(opm02a.line_type$="SNPO")=0 then continue
                if pos(opm02a.line_type$="NPO") and opm02a.prod_type_pr$="N" then continue

                ivm01a.sa_level$="I"; rem "FOR JOBS
                arm02a.sa_flag$="I"
                if opm02a.line_type$="N" then let ivm01a.sa_level$="P"
                find record (ivm01_dev,key=firm_id$+ope11a.item_id$,dom=*next) ivm01a$
                find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=*next) ivm02a$
                if ivm01a.stock_level$="W" then
                    vendor$=ivm02a.vendor_id$
                else
                    vendor$=ivm01a.vendor_id$
                endif
                call pgmdir$+"adc_peryear.aon",firm_id$,sys01_dev,ope01a.invoice_date$,period$,year$
                period=num(period$)

rem ---Customer

                if sas01a.by_customer$="Y" and pos(arm02a.sa_flag$="PI")<>0 and pos(ivm01a.sa_level$="PI")=0 then
                    segs=3
                    dim seg_end[segs]
                    seg_end[1]=11
                    seg_end[2]=14
                    seg_end[3]=len(sam01a.firm_id$+sam01a.year$+sam01a.customer_id$+sam01a.product_type$+sam01a.item_id$)+1; rem "End of segment + 1

                    sam01a.firm_id$=firm_id$
                    sam01a.year$=year$
                    sam01a.customer_id$=ope01a.customer_id$                
                    sam01a.product_type$=ope11a.product_type$
                    sam01a.item_id$=ope11a.item_id$

                    sa_dev=sam01_dev
                    if arm01a.sa_flag$="P" or sas01a.customer_lev$="P" then let segs=2
                    if sas01a.customer_lev$="C" then let segs=1
                    x0$=sam01a.firm_id$+sam01a.year$+sam01a.customer_id$+sam01a.product_type$+sam01a.item_id$
                    gosub write_sales_analysis_records

rem ---Product/Item/Customer Xref

                    sam01a.firm_id$=firm_id$
                    sam01a.year$=year$                
                    sam01a.customer_id$=ope11a.customer_id$
                    sam01a.product_type$=ope11a.product_type$
                    sam01a.item_id$=ope11a.item_id$
                    if arm02a.sa_flag$="P" or sas01a.customer_lev$="P" then let sam21a.item_id$=""
                    if sas01a.customer_lev$="C" then
                        sam21a.product_type$=""
                        sam21a.item_id$=""
                    endif
                    write record (sam21_dev,key=sam01a.firm_id$+sam01a.year$+sam01a.customer_id$+sam01a.product_type$+sam01a.item_id$) sam21a$
                endif

rem ---Territory

                if sas01a.by_territory$="Y" and pos(ivm01a.sa_level$="PI")<>0 then
                    segs=3
                    dim seg_end[segs]
                    seg_end[1]=8
                    seg_end[2]=11,seg_end[3]=len(sam02a.firm_id$+sam02a.year$+sam02a.territory$+sam02a.product_type$+sam02a.item_id$)+1; rem "End of segment + 1

                    sam02a.firm_id$=firm_id$
                    sam02a.year$=year$                
                    sam02a.territory$=ope01a.territory$
                    sam02a.product_type$=ope11a.product_type$
                    sam02a.item_id$=ope11a.item_id$                

                    sa_dev=sam02_dev
                    if ivm01a.sa_level$="P" or sas01a.terrcode_lev$="P" then let segs=2
                    if sas01a.terrcode_lev$="T" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem ---Salesperson

                if sas01a.by_salespsn$="Y" and pos(ivm01a.sa_level$="PI")<>0 then
                    segs=3
                    dim seg_end[segs]
                    seg_end[1]=8
                    seg_end[2]=11,seg_end[3]=len(sam03a.firm_id$+sam03a.year$+sam03a.slspsn_code$+sam03a.product_type$+sam03a.item_id$)+1; rem "End of segment + 1

                    sam03a.firm_id$=firm_id$
                    sam03a.year$=year$                
                    sam03a.slspsn_code$=ope01a.slspsn_code$
                    sam03a.product_type$=ope11a.product_type$
                    sam03a.item_id$=ope11a.item_id$                

                    sa_dev=sam03_dev
                    if ivm01a.sa_level$="P" or sas01a.salespsn_lev$="P" then let segs=2
                    if sas01a.salespsn_lev$="S" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem ---Customer Type

                if sas01a.by_customer_type$="Y" and pos(arm02a.sa_flag$="PI")<>0 and pos(ivm01a.sa_level$="PI")<>0 then
                    segs=3
                    dim seg_end[segs]
                    seg_end[1]=8
                    seg_end[2]=11,seg_end[3]=len(sam04a.firm_id$+sam04a.year$+sam04a.cust_type$+sam04a.product_type$+sam04a.item_id$)+1; rem "End of segment + 1
                    x0$(1)=firm_id$+year$+x3$(34,3)+w0$(23,3)+w0$(33,20)

                    sam04a.firm_id$=firm_id$
                    sam04a.year$=year$                
                    sam04a.cust_type$=arm02a.cust_type$
                    sam04a.product_type$=ope11a.product_type$
                    sam04a.item_id$=ope11a.item_id$                

                    sa_dev=sam04_dev
                    if ivm01a.sa_level$="P" or sas01a.custtype_lev$="P" then let segs=2
                    if sas01a.custtype_lev$="C" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem ---Ship-To

                if sas01a.by_shipto$="Y" or pos(arm02a.sa_flag$="PI")<>0 or pos(ivm01a.sa_level$="PI")<>0 then
                    segs=3
                    dim seg_end[segs]
                    seg_end[1]=11
                    seg_end[2]=17,seg_end[3]=len(sam05a.firm_id$+sam05a.year$+sam04a.customer_id$+sam05a.shipto_no$+sam05a.item_id$)+1; rem "End of segment + 1

                    sam05a.firm_id$=firm_id$
                    sam05a.year$=year$                
                    sam05a.customer_id$=ope01a.customer_id$
                    sam05a.shipto_no$=ope01a.shipto_no$
                    sam05a.item_id$=ope11a.item_id$                

                    sa_dev=sam05_dev
                    if arm02a.sa_flag$="P" or sas01a.shipto_lev$="P" then let segs=2
                    if sas01a.shipto_lev$="C" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem ---Standard Industry Code

                if sas01a.by_sic_code$="Y" and pos(ivm01a.sa_level$="PI")<>0 and cvs(arm01a.sic_code$,2)<>"" then
                    segs=3
                    dim seg_end[segs]
                    seg_end[1]=13
                    seg_end[2]=16,seg_end[3]=len(sam06a.firm_id$+sam06a.year$+sam06a.sic_code$+sam06a.product_type$+sam06a.item_id$)+1; rem "End of segment + 1

                    sam06a.firm_id$=firm_id$
                    sam06a.year$=year$                
                    sam06a.sic_code$=arm01a.sic_code$
                    sam06a.product_type$=ope11a.product_type$
                    sam06a.item_id$=ope11a.item_id$                


                    sa_dev=sam06_dev
                    if ivm01a.sa_level$="P" or sas01a.sic_code_lev$="P" then let segs=2
                    if sas01a.sic_code_lev$="C" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem --- Product Type

                if sas01a.by_product$="Y" or pos(ivm01a.sa_level$="PI")<>0 then
                    segs=2
                    dim seg_end[segs]
                    seg_end[1]=8
                    seg_end[2]=len(sam07a.firm_id$+sam07a.year$+sam07a.product_type$+sam07a.item_id$)+1; rem "End of segment + 1

                    sam07a.firm_id$=firm_id$
                    sam07a.year$=year$                
                    sam07a.product_type$=ope11a.product_type$
                    sam07a.item_id$=ope11a.item_id$                

                    sa_dev=sam07_dev
                    if ivm10a.sa_level$="P" or sas01a.product_lev$="P" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem --- Warehouse

                if sas01a.by_whse$="Y" or pos(ivm01a.sa_level$="PI")<>0 then
                    segs=3
                    dim seg_end[segs]
                    seg_end[1]=7
                    seg_end[2]=10,seg_end[3]=len(sam08a.firm_id$+sam08a.year$+sam08a.warehouse_id$+sam08a.product_type$+sam08a.item_id$)+1; rem "End of segment + 1

                    sam08a.firm_id$=firm_id$
                    sam08a.year$=year$                
                    sam08a.warehouse_id$=ope11a.warehouse_id$
                    sam08a.product_type$=ope11a.product_type$
                    sam08a.item_id$=ope11a.item_id$                

                    sa_dev=sam08_dev
                    if ivm01a.sa_level$="P" or sas01a.whse_lev$="P" then let segs=2
                    if sas01a.whse_lev$="W" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem --- Stocking Vendor

                if sas01a.by_vendor$="Y" or pos(ivm01a.sa_level$="PI")<>0 or cvs(vendor$,2)<>"" then
                    segs=3
                    dim seg_end[segs]
                    seg_end[1]=11
                    seg_end[2]=14,seg_end[3]=len(sam09a.firm_id$+sam09a.year$+sam09a.vendor_id$+sam09a.product_type$+sam09a.item_id$)+1; rem "End of segment + 1

                    sam09a.firm_id$=firm_id$
                    sam09a.year$=year$                
                    sam09a.vendor_id$=vendor$
                    sam09a.product_type$=ope11a.product_type$
                    sam09a.item_id$=ope11a.item_id$                

                    sa_dev=sam09_dev
                    if ivm01a.sa_level$="P" or sas01a.vendor_lev$="P" then let segs=2
                    if sas01a.vendor_lev$="V" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem --- Distribution Code

                if sas01a.by_dist_code$="Y" or pos(ivm01a.sa_level$="PI")<>0 then
                    segs=3
                    dim seg_end[segs]
                    seg_end[1]=7
                    seg_end[2]=10,seg_end[3]=len(sam10a.firm_id$+sam10a.year$+sam10a.dist_code$+sam10a.product_type$+sam10a.item_id$)+1; rem "End of segment + 1

                    sam10a.firm_id$=firm_id$
                    sam10a.year$=year$                
                    sam10a.dist_code$=ope01a.dist_code$
                    sam10a.product_type$=ope11a.product_type$
                    sam10a.item_id$=ope11a.item_id$                

                    sa_dev=sam10_dev
                    if ivm01a.sa_level$="P" or sas01a.distcode_lev$="P" then let segs=2
                    if sas01a.distcode_lev$="D" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem --- Non-Stock

                if sas01a.by_nonstock$="Y" or opm02a.line_type$="N" then
                    segs=2
                    dim seg_end[segs]
                    seg_end[1]=8
                    seg_end[2]=len(sam11a.firm_id$+sam11a.year$+sam11a.product_type$+sam11a.nonstock_no$)+1; rem "End of segment + 1

                    sam11a.firm_id$=firm_id$
                    sam11a.year$=year$                
                    sam11a.product_type$=ope11a.product_type$
                    sam11a.nonstock_no$=ope11a.order_memo$

                    sa_dev=sam11_dev
                    if sas01a.nonstock_lev$="P" then let segs=1
                    gosub write_sales_analysis_records
                endif

rem --- Inner Loop Ends
        wend


rem --- Job Numbers

        if jn$="Y" then
            if cvs(ope01a.job_no$,2)<>"" then
                extract record (opm09_dev,key=firm_id$+ope01a.customer_id$+ope01a.job_no$,dom=*next) opm09a$
                opm09a.lstinv_date$=ope01a.invoice_date
                opm09a.total_sales=opm09a.total_sales+b[0]-b[1]-ope01a.discount_amt+ope01a.freight_amt+b[2]+ope01a.tax_amount
                if opm09a.fst_shp_date$="   " then let opm09a.fst_shp_date$=ope01a.invoice_date$
                 write record (opm09_dev,key=opm09a.firm_id$+opm09a.customer_id$+opm09a.job_no$) opm09a$
            endif
        endif

rem --- Loop back for next invoice --- Main Loop Ends
wend

done: rem --- All done

        run pgmdir$+"opu_updateinventory.aon"

no_to_update: rem --- NO to Update: Clear On-Sales-Register Flags

        read (ope04_dev,key=firm_id$+"I",dom=*next)

        while more
            ope04a_key$=key(ope04_dev,end=*break)
            read (ope04_dev)
            if pos(firm_id$+"I"=ope04a_key$)<>1 then break
            extract record (ope01_dev,key=ope04a_key.firm_id$+ope04a_key.ar_type$+"000",dom=*continue) ope01a$
            if ope01a.lock_status$<>"S" then continue
            ope01a.lock_status$="N"
            write record (ope01_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$+ope01a.sequence_000$) ope01a$
        wend

        goto std_exit

write_sales_analysis_records: rem --- Write Sales Analysis Records

        rem x0$(seg_end[segs])=""
        rem dim x[12],y[12],z[12]
        find record (sa_dev,key=x0$,dom=*next) sam01a$
        x[period-1]=x[period-1]+ope11a.qty_shipped
        y[period-1]=round(y[period-1]+ope11a.unit_cost*ope11a.qty_shipped,2)
        z[period-1]=z[period-1]+ope11a.ext_price
        write record (sa_dev,key=x0$) sam01a$
        return

rem --- Update last price

        if opm02a.line_type$<>"N" then write record (opt81_dev,key=firm_id$+opt11a.customer_id$+opt11a.item_id$) opt81a$
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem --- #endinclude std_end.src

        end
