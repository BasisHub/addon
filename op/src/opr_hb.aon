rem --- Sales Register (Cash Sales)
rem --- Program opr_hb v8.0.0 29Jan2008 (opr_hb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/29/2008 02:20:11)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
       
rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Initialize Data

        mor=1
        precision 4
        dim d[1],r[2,1]
        l=l9+1
        headings$[3]="Cash Receipts Summary"
        t0$=""
        t9$=""

rem --- Background

if ars01a.cash_sale$<>"N" then

rem ----------- print @(40,5),"Sorting Cash Sales",'cl',@(0,10),'cl',@(0,11),'cl',@(0,12),'cl',

                call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
                call pgmdir$+"adc_progress.aon","N","","","","",0,ope41_dev,1,meter_num,status

rem ----------- Sort Cash

                read (ope41_dev,key=firm_id$,dom=*next)


rem ------- retrieve template for OPW_INVCASH record key
            call stbl("+DIR_SYP")+"bac_key_template.bbj","OPW_INVCASH","PRIMARY",opw41a_key_tpl$,table_chans$[all],status$
            dim opw41a_key$:opw41a_key_tpl$



rem --- Main Read
        While more
                read record (ope41_dev,end=*break) ope41a$
                if pos(firm_id$=ope41a.firm_id$+ope41a.ar_type$+ope41a.customer_id$+ope41a.order_no$)<>1 then break
                find record (ope01_dev,key=ope41a.firm_id$+ope41a.ar_type$+ope41a.customer_id$+ope41a.order_no$+"000",dom=*continue) ope01a$
                if ope01a.print_status$+ope01a.lock_status$<>"YS" then continue

rem ----------- Write Record

                if seq$="C" then call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                if seq$="I" then call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                rem x0$=d0$(1,4)+d0$(18,3)+d0$(50,7)+d0$(5,13)
                opw41a.firm_id$=ope41a.firm_id$
                opw41a.ar_type$=ope41a.ar_type$
                opw41a.invoice_date$=ope41a.invoice_date$
                opw41a.ar_inv_no$=ope41a.ar_inv_no$
                opw41a.customer_id$=ope41a.customer_id$
                opw41a.order_no$=ope41a.order_no$
                if seq$="C" then let opw41a.ar_inv_no$=""
                write record (opw41_dev,key=opw41a.firm_id$+opw41a.ar_type$+opw41a.invoice_date$+opw41a.ar_inv_no$+opw41a.customer_id$+opw41a.order_no$) opw41a$
        Wend

rem ----------- Print

rem ----------- print @(40,5),"Printing Cash Sales",'cl',@(0,10),'cl',@(0,11),'cl',@(0,12),'cl',

                call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
                call pgmdir$+"adc_progress.aon","N","","","","",0,ope41_dev,1,meter_num,status

                read (opw41_dev,key=firm_id$,dom=*next)

rem --- Main Read
        While more
                opw41a_key$=key(opw41_dev,end=done)
                if pos(firm_id$=opw41a_key$)<>1 then break
                read (opw41_dev)

rem ----------- Breaks

                if opw41a_key.invoice_date$<>t0$ then let i=0; gosub Date_Break
                find record (ope41_dev,key=opw41a_key.firm_id$+opw41a_key.ar_type$+opw41a_key.customer_id$+opw41a_key.order_no$,dom=*continue) ope41a$
                rem dim x1$(30)
                find record (arm10_dev,key=firm_id$+"C"+ope41a.cash_rec_cd$,dom=*next) arm10c$

rem ----------- Get Customer

                find record (arm01_dev,key=firm_id$+ope41a.customer_id$,dom=Label_One) arm01a$
                b1$=arm01a.customer_name$
Label_One:
                if ars10a.cash_sale$="Y" then
                    if ope41a.customer_id$=ars01a.customer_id$ then
                        if cvs(ope41a.customer_name$,2)<>"" then
                            let b1$=ope41a.customer_name$
                        endif
                    endif
                endif


rem ----------- Print

                call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                if l+1>l9 then gosub report_heading
                print (printer_dev)fnmask$(ope41a.customer_id$(1,p[0]),ars01a.customer_output$),@(8),arm01a.customer_name$,
:                              @(40),ope41a.ar_inv_no$,@(49),fndate$(ope41a.invoice_date$),
:                              @(60),ope41a.cash_rec_cd$,
                if arm10c.trans_type$="P" then
                    print (printer_dev)@(64),ope41a.payment_id$,@(81),fndate$(ope41a.expire_date$),
:                                      @(90),ope41a.invoice_amt:ars01a.amount_mask$
                else
                    print (printer_dev)@(104),ope41a.payment_id$,@(120),ope41a.invoice_amt:ars01a.amount_mask$
                endif

                l=l+1

rem ----------- Totals

                for i=0 to 1
                    if arm10c.trans_type$="$" then let r[0,i]=r[0,i]+ope41a.invoice-amt
                    if arm10c.trans_type$="C" then let r[1,i]=r[1,i]+ope41a.invoice-amt
                    if arm10c.trans_type$="P" then let r[2,i]=r[2,i]+ope41a.invoice-amt
                next i
        Wend


done: rem ----- Totals

                t9$="E"
                for i=0 to 1
                    gosub Date_Break
                next i
endif


run pgmdir$+"opr_hc.aon"

report_heading: rem --- Report Heading

        call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
        if status then exitto std_exit
        l=headings+1
        print (printer_dev)""
        print (printer_dev)"Customer",@(40),"Invoice",@(49),"Invoice",@(59),"Pay",
:                                 @(67),"***  Credit Card Deposit  ***",@(106),"***  Cash Deposit  ***"
        print (printer_dev)@(0),"No.     Name",@(40),"Number",@(51),"Date",@(59),"Type",@(66),"Number",
:                                 @(84),"Exp",@(93),"Amount",@(103),"Memo",@(125),"Amount"
        l=l+3
        return

Date_Break: rem --- Date Break

        if t0$<>"" then
            x$="Total For "+fndate$(t0$)
            if i=1 then let x$="Total All Cash Receipts"
            if l+4>l9 then gosub report_heading
            print (printer_dev)@(90),fill(m1,"-"),@(120),fill(m1,"-"),'lf',@(39),x$,
:                              @(66),"Credit Cards:",@(90),r[2,i]:ars01a.amount_mask$,@(103),"Cash:",
:                              @(120),r[0,i]:ars01a.amount_mask$,'lf',@(103),"Checks:",@(120),r[1,i]:ars01a.amount_mask$,'lf'
            l=l+4
        endif

        if t9$<>"" then return
        t0$=opw41a_key.invoice_date$
        for x=0 to 2
            for y=0 to i
                r[x,y]=0
            next y
        next x
        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fndate$(q$)
            q1$=""
            q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
            if q1$="" q1$=q$
            return q1$
        fnend        

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release


rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem #endinclude std_end.src

        end
