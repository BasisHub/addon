rem --- Monthly Sales Register
rem --- Program opr_za v8.0.0 22Jan2008 (opr_za)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/22/2008 04:34:53)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[2]="arm-02",ids$[2]="ARM_CUSTDET"
    files$[3]="arc_distcode",ids$[3]="ARC_DISTCODE"
    files$[4]="ars_params",ids$[4]="ARS_PARAMS"
    files$[5]="glm-01",ids$[5]="GLM_ACCT"
    files$[7]="glw_slsrtotals",ids$[7]="GLW_SLSRTOTALS"
    files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
    files$[9]="ivs_params",ids$[9]="IVS_PARAMS"
    files$[10]="opm-02",ids$[10]="OPC_LINECODE"
    files$[11]="opm-06",ids$[11]="OPC_TAXCODE"
    files$[12]="opt-01",ids$[12]="OPT_INVHDR"
    files$[13]="opt-11",ids$[13]="OPT_INVDET"
    rem files$[14]="opt-31",ids$[14]="OPT_INVSHIP"
    files$[15]="opw-04",ids$[15]="OPW_MTDGLJRN"

    options$[7]="CL",options$[15]="CL"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status

    if status goto std_exit
    arm01_dev=channels[1]
    arm02_dev=channels[2]
    arm10d_dev=channels[3]
    ars01a_dev=channels[4]
    glm01_dev=channels[5]
    glw04_dev=channels[7]
    ivm02_dev=channels[8]
    ivs01a_dev=channels[9]
    opm02_dev=channels[10]
    opm06_dev=channels[11]
    opt01_dev=channels[12]
    opt11_dev=channels[13]
    rem opt31_dev=channels[14]
    opw04_dev=channels[15]

rem --- Dimension string templates

    dim arm01a$:templates$[1],arm02a$:templates$[2]
    dim arm10d$:templates$[3],ars01a$:templates$[4],glm01a$:templates$[5]
    dim glw04a$:templates$[7],ivm02a$:templates$[8]
    dim ivs01a$:templates$[9],opm02a$:templates$[10],opm06a$:templates$[11]
    dim opt01a$:templates$[12],opt11a$:templates$[13]
    dim opw04a$:templates$[15]
    
    rem dim opt31a$:templates$[14]

rem --- Assign form input values to local variables

    r0$= option!.getOptionData("SORT_ORDER")
    r1$= option!.getOptionData("CUSTOMER_ID_1")
    r2$= option!.getOptionData("CUSTOMER_ID_2")
    alt1$= option!.getOptionData("ALT_SEQUENCE_1")
    alt2$= option!.getOptionData("ALT_SEQUENCE_2")
    r3$= option!.getOptionData("INVOICE_DATE_1")
    r4$= option!.getOptionData("INVOICE_DATE_2")
    r5$= option!.getOptionData("SUMM_DTL")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    dim p[2],info$[20]
    n1$=sysinfo.firm_name$,n2$="AR",n3$=sysinfo.task_desc$
    find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    call pgmdir$+"adc_application.aon","OP",info$[all]

    if info$[9]="Y" then
        call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,m0
        p[0]=m0
        p[1]=max(6,p[0])
        p[2]=fnyy_year(ars01a.current_year$)

    rem --- Initializations

        if r0$="" then
            r0$="N"
            r1$=""
            r2$=""
        endif
        
        if r5$="" then
            r5$="S"
        endif
        
        if r0$="A" then
            if alt1$="" and alt2$="" then
                r1$=""
                r2$=""
            endif
            
            if alt1$<>"" and alt2$="" then
                r1$=alt1$
                r2$="Z"
            endif
            
            if alt1$="" and alt2$<>"" then
                r1$="A"
                r2$=alt2$
            endif
            
            if alt1$<>"" and alt2$<>"" then
                r1$=alt1$
                r2$=alt2$
            endif
        endif

    rem --- run overlay
    
        run pgmdir$+"opr_salesregr_o1.aon"
        
    endif

rem --- G/L Not Installed

    msg_id$="GENERIC_WARN"
    dim msg_tokens$[1]
    msg_tokens$[1]="General Ledger Is Required For The "+n3$
    gosub disp_message
    
    goto std_exit

rem --- Functions

    def fnv(q$)=42+int(len(q$)/2)

rem --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year

    def fnyy$(q1$)
        q3$=" 01234567890123456789"
        q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
        return q1$
    fnend

rem --- Convert 2-Char Year to 21st Century Numeric Year

    def fnyy_year(q1$)
        q=num(fnyy$(q1$))
        q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=l8181)
    l8181: 
        if q<q9 then let q=q+100
        return q
    fnend

rem --- FNF$ AlphaNumeric Masking Function

    def fnmask$(q1$,q2$)
        if q2$="" then let q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) then goto alpha_fnf else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
    alpha_fnf: 
        let q=1,q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") then let q0=q0+1 else let q2$(q,1)="X"
            let q=q+1
        wend
        if len(q1$)>len(q2$)-q0 then let q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return

rem --- #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

    end
