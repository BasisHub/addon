rem --- Open Order Detail Report
rem --- Program opr_ia v8.0.0 25Jan2008 (opr_ia)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/25/2008 09:22:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Use Statement

	use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[2]="arm-02",ids$[2]="ARM_CUSTDET"
    files$[3]="arc_termcode",ids$[3]="ARC_TERMCODE"
    files$[4]="ars_params",ids$[4]="ARS_PARAMS"
    files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
    files$[6]="ivm-02",ids$[6]="IVM_ITEMWHSE"
    files$[7]="ivc_prodcode",ids$[7]="IVC_PRODCODE"
    files$[8]="ivs_params",ids$[8]="IVS_PARAMS"
    files$[9]="ope-01",ids$[9]="OPE_ORDHDR"
    files$[10]="ope-04",ids$[10]="OPE_PRNTLIST"
    files$[11]="ope-11",ids$[11]="OPE_ORDDET"
    files$[12]="ope-21",ids$[12]="OPE_ORDLSDET"
    files$[13]="opm-02",ids$[13]="OPC_LINECODE"
    files$[14]="poe-08",ids$[14]="POE_LINKED"
    files$[15]="poe-02",ids$[15]="POE_POHDR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status then goto std_exit
    arm01_dev=channels[1]
    arm02_dev=channels[2]
    arm10a_dev=channels[3]
    ars01a_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivm10_dev=channels[7]
    ivs01a_dev=channels[8]
    ope01_dev=channels[9]
    ope04_dev=channels[10]
    ope11_dev=channels[11]
    ope21_dev=channels[12]
    opm02_dev=channels[13]
    poe08_dev=channels[14]
    poe02_dev=channels[15]

rem --- Dimension string templates

    dim arm01a$:templates$[1],arm02a$:templates$[2],arm10a$:templates$[3],
:       ars01a$:templates$[4],ivm01a$:templates$[5],ivm02a$:templates$[6],
:       ivm10a$:templates$[7],ivs01a$:templates$[8],ope01a$:templates$[9],
:       ope04a$:templates$[10],ope11a$:templates$[11],ope21a$:templates$[12],
:       opm02a$:templates$[13],poe08a$:templates$[14],poe02a$:templates$[15]

rem --- Assign form input values to local variables

	declare Option option!

    s0$  =  option!.getOptionData("CUSTOMER_ID_1")
    s1$  =  option!.getOptionData("CUSTOMER_ID_2")
    s2$  =  option!.getOptionData("ORDER_DATE_1")
    s3$  =  option!.getOptionData("ORDER_DATE_2")
    s5$  =  option!.getOptionData("ORD_TAKEN_BY")
    s7$  =  option!.getOptionData("SALESPERSON")
    s6$  =  option!.getOptionData("PRINT_UPRINT_ALL")
    wo_open$=Option!.getOptionData("OPEN")
    wo_quoted$=Option!.getOptionData("QUOTED")
    wo_backord$=Option!.getOptionData("BACKORDERS")
    wo_cred$=Option!.getOptionData("CREDIT")
    wo_non_stock$=Option!.getOptionData("NON_STOCK")
    s4$=""
    if wo_open$="Y" then s4$=s4$+"O"
    if wo_quoted$="Y" then s4$=s4$+"Q"
    if wo_backord$="Y" then s4$=s4$+"B"
    if wo_cred$="Y" then s4$=s4$+"C"
    if wo_non_stock$="Y" then s4$=s4$+"N"
    s8$  =  option!.getOptionData("NON_STOCK_OPTION")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    dim i[5],p[2]
    n1$=sysinfo.firm_name$,n2$="AR",n4$=sysinfo.task_desc$
    find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    i[0]=ivs01a.item_id_len
    i[1]=num(ivs01a.precision$)
    i[2]=ivs01a.ls_no_len
    i[3]=num(ivs01a.desc_len_01$)
    i[4]=num(ivs01a.desc_len_02$)
    i[5]=num(ivs01a.desc_len_03$)
    p[0]=len(arm02a.customer_id$)
    p[1]=max(6,p[0])

rem --- Initialize Data

    optn$="OQBCN"
    if s4$="" then s4$=optn$
    if s6$="" then s6$="U"

rem --- Run report overlay

    run pgmdir$+"opr_opnorddetail_o1.aon"

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    if status <> 999 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

    end
