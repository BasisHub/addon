rem --- Monthly Sales Register
rem --- Program opr_salesregr_o1.aon v8.0.0 24Sep2008 (opr_zb)
rem --- Created by adx_codeport.bbj v1.1.5 (09/24/2008 08:47:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initializations

    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","I","",g5$,0,g5
    m1=len(m1$)
    t0$=""
    t1$=""
    d1=0
    d2=0
    d3=0
    c1=0
    c2=0
    c3=0
    if r1$="" h5$="First" else if r0$="A" h5$=r1$ else h5$=fnmask$(r1$,m0$)
    if r2$="" h6$="Last" else if r0$="A" h6$=r2$ else h6$=fnmask$(r2$,m0$)
    if r3$="" h7$="First" else h7$=fndate$(r3$)
    if r4$="" h8$="Last" else h8$=fndate$(r4$)
    if r5$="S" h9$="*** Summary ***",x8$="",x9$="" else h9$="*** Detail ***",x8$="No.",x9$="Line"
    when$=sysinfo.system_date$
    clock$=""
    page=0
    width=132
    l9=55
    l=l9+1
    headings=5
    recs=0
    total_recs=0
    dim headings$[headings],j1$(width),j2$(width,"-"),j3$(width,"=")
    headings$[0]=n1$
    headings$[1]=n3$
    headings$[2]=""
    headings$[3]="From Customer: "+h5$+", Through Customer: "+h6$
    headings$[4]="From Invoice Date: "+h7$+", Through Invoice Date: "+h8$
    headings$[5]=h9$

rem -- Column heading

    dim columns$[6,10]
    columns = 6,cur_col=0

    columns$[0,0]="Customer No & Name", columns$[0,1]="C",columns$[0,2]="30"
    columns$[1,0]="Inv.No",             columns$[1,1]="C",columns$[1,2]="8"
    columns$[2,0]="Inv.Date",           columns$[2,1]="C",columns$[2,2]="10"
rem columns$[3,0]="Line.No",            columns$[3,1]="C",columns$[3,2]="8"
    columns$[3,0]="G.L.No.",            columns$[3,1]="C",columns$[3,2]="8"
    columns$[4,0]="Description",        columns$[4,1]="C",columns$[4,2]="25"
    columns$[5,0]="Debit",              columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"
    columns$[6,0]="Credit",             columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"

rem --- Background

    call pgmdir$+"adc_progress.aon","N","OPT_INVHDR","","","",0,opt01_dev,1,meter_num,status
    if status = 999 then goto std_exit
   
    if r0$="N" arm_key_num$="PRIMARY" else arm_key_num$="AO_ALTSEQ_CUST"

rem --- Create Work File

    dim arm01a$:fattr(arm01a$)
    read record(arm01_dev,key=firm_id$+r1$,knum=arm_key_num$,dom=*next)arm01a$;goto trip_read_opt01

l1050:

    arm01_key$=key(arm01_dev,end=l3000)
    if pos(firm_id$=arm01_key$)<>1 goto l3000
    if r2$<>"" and arm01_key$(3,len(cvs(r2$,2)))>cvs(r2$,2) goto l3000
    dim arm01a$:fattr(arm01a$)
    read record(arm01_dev,key=arm01_key$,knum=arm_key_num$)arm01a$

trip_read_opt01:
    read (opt01_dev,key=firm_id$+"  "+arm01a.customer_id$,dom=*next)

l1100: rem --- Initial Read

    dim opt01a$:fattr(opt01a$)
    read record(opt01_dev,end=l1050)opt01a$
    if opt01a.firm_id$<>firm_id$ goto l2900
    if opt01a.customer_id$<>arm01a.customer_id$ goto l1050
    
    total_recs=total_recs+1
    if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
    if status = 999 then goto std_exit
        
    if r3$<>"" and opt01a.invoice_date$<r3$ goto l1100
    if r4$<>"" and opt01a.invoice_date$>r4$ goto l1100
    d0$=opt01a.ar_dist_code$
    gosub do_accounts

rem --- Read Detail

    read (opt11_dev,key=firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$,dom=*next)
l2020:
    opt11_key$=key(opt11_dev,end=l1100)
    if pos(firm_id$+opt01a.ar_type$+opt01a.customer_id$+opt01a.ar_inv_no$=opt11_key$)<>1 goto l1100
    read record (opt11_dev,key=opt11_key$) opt11a$

rem --- Line Type

    dim opm02a$:fattr(opm02a$)
    d1$=""
    find record (opm02_dev,key=firm_id$+opt11a.line_code$,dom=revenue_account) opm02a$
    if opm02a.line_type$="M" goto l2020
    if opm02a.line_type$="S" goto l2200
    if opm02a.line_type$<>"O" d0$=opm02a.ar_dist_code$; goto revenue_account
    find (glm01_dev,key=firm_id$+opm02a.gl_rev_acct$,dom=revenue_account)
    d1$=opm02a.gl_rev_acct$; goto l2360

l2200: rem --- Standard Item

    d0$=opt01a.ar_dist_code$
    
    while 1
        if ars01a.dist_by_item$<>"Y" break
        read record (ivm02_dev,key=firm_id$+opt11a.warehouse_id$+opt11a.item_id$,dom=*break) ivm02a$
        d0$=ivm02a.ar_dist_code$
        break
    wend    

revenue_account: rem --- Find Revenue Account

    if d1$<>"" goto l2360
    dim arm10d$:fattr(arm10d$)
    find record (arm10d_dev,key=firm_id$+"D"+d0$,dom=l2020) arm10d$
    d1$=arm10d.gl_sls_acct$

l2360:
    d0=-opt11a.ext_price
    if r5$="D" z9$=opt11a.orddet_seq_ref$ else z9$=fill(len(opt11a.orddet_seq_ref$))
    gosub l6800
    goto l2020

do_accounts: rem --- A/R Account, Cash Account

    dim arm10d$:fattr(arm10d$)
    find record (arm10d_dev,key=firm_id$+"D"+opt01a.ar_dist_code$,dom=l2700) arm10d$
    if opt01a.cash_sale$="Y" d1$=arm10d.gl_cash_acct$ else d1$=arm10d.gl_ar_acct$
    d0=opt01a.total_sales+opt01a.tax_amount+opt01a.freight_amt-opt01a.discount_amt
    z9$=fill(len(opt11a.orddet_seq_ref$))
    gosub l6800

rem --- Discount Amount

    if opt01a.discount_amt=0 goto freight_amt
    d1$=arm10d.gl_disc_acct$
    d0=opt01a.discount_amt
    z9$=fill(len(opt11a.orddet_seq_ref$))
    gosub l6800

freight_amt: rem --- Freight Amount

    if opt01a.freight_amt=0 goto tax_account
    d1$=arm10d.gl_frgt_acct$
    d0=-opt01a.freight_amt
    z9$=fill(len(opt11a.orddet_seq_ref$))
    gosub l6800

tax_account: rem --- Tax Account

    precision 4
    dim opm06a$:fattr(opm06a$)
    find record (opm06_dev,key=firm_id$+opt01a.tax_code$,dom=l2700) opm06a$
    x=opm06a.tax_rate*opt01a.taxable_amt/100
    precision 2
    x=x*1
    if opm06a.op_max_limit<>0 and abs(x)>opm06a.op_max_limit x=opm06a.op_max_limit*sgn(x)
    y=x
    d1$=opm06a.gl_account$
    d0=-x
    if d0<>0 gosub l6800
    
    for x9=1 to 10
        precision 4
        x1$=field(opm06a$,"ar_tot_code_"+str(x9:"00"))
        if x1$="  " goto l2680
        dim opm06a2$:fattr(opm06a$)
        read record (opm06_dev,key=firm_id$+x1$,dom=l2680) opm06a2$
        x=opm06a2.tax_rate*opt01a.taxable_amt/100
        precision 2
        x=x*1
        if opm06a2.op_max_limit<>0 and abs(x)>opm06a2.op_max_limit x=opm06a2.op_max_limit*sgn(x)
        y=y+x
        d1$=opm06a.gl_account$
        d0=-x
        if d0<>0 gosub l6800
    l2680:
    next x9
    
    precision 2
    if opt01a.tax_amount=y goto l2700
    x=opt01a.tax_amount-y
    d1$=opm06a.gl_account$
    d0=-x
    if d0<>0 gosub l6800
    
l2700:
    return

l2900: rem --- End Of File?

    if r0$="A" goto l1050

l3000: rem --- Initial Read From Work File

    dim opw04a$:fattr(opw04a$)
    if r0$="N" key_num$="PRIMARY" else key_num$="AO_ALTSEQ_CUST"
    read (opw04_dev,key=firm_id$+opw04a.ar_type$+r1$,knum=key_num$,dom=*next)

l3040:

    readrecord(opw04_dev,end=done)opw04a$
    if firm_id$<>opw04a.firm_id$ goto done
    endif    
    
l3050:
rem --- Breaks

    if opw04a.customer_id$<>t0$ gosub cust_break
    if opw04a.ar_inv_no$=t1$ goto get_gl_name
    if d3-abs(c3)<>0 gosub l6200

    if r2$<>""
        if r0$="N"
            if opw04a.customer_id$>r2$ goto done
        else
            if opw04a.alt_sequence$(1,len(cvs(r2$,2)))>cvs(r2$,2) goto done
        endif
    endif    

rem --- Find Invoice Date

    dim opt01a$:fattr(opt01a$)
    read record (opt01_dev,key=firm_id$+opw04a.ar_type$+opw04a.customer_id$+opw04a.ar_inv_no$,dom=*next) opt01a$

rem --- Print Invoice Number & Date

    total_recs=total_recs+1
    if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
    if status = 999 then goto std_exit
        
    if r5$<>"D" goto l3650
    
    if cur_col=0
        OutVect!.addItem("")
    endif
    
    OutVect!.addItem(opt01a.ar_inv_no$)
    OutVect!.addItem(fndate$(opt01a.invoice_date$))
    cur_col=2
    recs=recs+1

l3650:
    t1$=opt01a.ar_inv_no$
    d3=0
    c3=0

get_gl_name: rem --- Find G/L Name

    dim glm01a$:fattr(glm01a$)
    glm01a.gl_acct_desc$="*** Not On File ***"
    find record (glm01_dev,key=firm_id$+opw04a.gl_account$,dom=l3780) glm01a$

l3780: rem --- Print

    if r5$<>"D" goto l3870
    
    if cur_col<2
        xwk=fnblank(3-cur_col)
    endif
    
rem    OutVect!.addItem(opw04a.orddet_seq_ref$)
    OutVect!.addItem(fnmask$(opw04a.gl_account$(1,g5),g5$))
    OutVect!.addItem(glm01a.gl_acct_desc$)
    
    if opw04a.gl_post_amt>0 then
        OutVect!.addItem(str(opw04a.gl_post_amt))
        OutVect!.addItem("")
    else
        OutVect!.addItem("")
        OutVect!.addItem(str(abs(opw04a.gl_post_amt)))
    endif
    
    cur_col=0
    l=l+1
    recs=recs+1
    
l3870:
    if opw04a.gl_post_amt>0
        d1=d1+opw04a.gl_post_amt
        d2=d2+opw04a.gl_post_amt
        d3=d3+opw04a.gl_post_amt
    else
        c1=c1+opw04a.gl_post_amt
        c2=c2+opw04a.gl_post_amt
        c3=c3+opw04a.gl_post_amt
    endif    
    goto l3040

l3900: rem --- End of file?

    if r0$="A" goto l3050

done: rem --- End

    if r5$<>"S"
        if recs=0
            msg_id$="DOC_OUTPUT_NODATA"
            gosub disp_message
            goto std_exit_no_report
        endif
    endif    

    t9$="E"
    gosub cust_break
    if r5$<>"D" goto l4100

    xwk=fnblank(14)
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    OutVect!.addItem("Grand Total : ")
    
    if d2-abs(c2)<>0 then
        xwk=fnblank(3)
        OutVect!.addItem("***")
    else
        xwk=fnblank(4)
    endif
    
    OutVect!.addItem(str(d2))
    OutVect!.addItem(str(abs(c2)))

l4100: rem --- G/L Account Totals

    retain$="YES"
    update$=pgmdir$+"glr_accttotalrpt.aon"
    overlay$=update$
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit

cust_break: rem --- Customer Break

    if t0$="" goto l6100
    if d3-abs(c3)<>0 gosub l6200
    if r5$<>"D" goto l6100
    xwk=fnblank(7)
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    OutVect!.addItem("Customer "+fnmask$(t0$(1,m0),m0$)+" Total: ")
    xwk=fnblank(4)
    OutVect!.addItem(str(d1))
    OutVect!.addItem(str(abs(c1)))
    xwk=fnblank(7)
    cur_col=0
    l=l+3
    recs=recs+1
l6100:
    if t9$="E" goto l6190
    dim arm01a$:fattr(arm01a$)
    arm01a.customer_name$="*** Not On File ***"
    find record (arm01_dev,key=firm_id$+opw04a.customer_id$,knum="PRIMARY",dom=l6150) arm01a$
    x0$=fnmask$(opw04a.customer_id$(1,m0),m0$)+" "+arm01a.customer_name$
    if r5$<>"D" goto l6170
l6150:
    OutVect!.addItem(x0$)
    cur_col=1
    recs=recs+1
l6170:
    t0$=opw04a.customer_id$
    d1=0
    c1=0
    d3=0
    c3=0
    
l6190:
    return

l6200: rem --- Previous Invoice Out Of Balance

    gosub l6400
    if d3-abs(c3)=0 goto l6290
    if r5$<>"D" goto l6290
    if cur_col<4
        xwk=fnblank(4-cur_col)
    endif
    OutVect!.addItem("**")
    OutVect!.addItem(str(d3))
    OutVect!.addItem(str(abs(c3)))
    cur_col=0
    l=l+2
    recs=recs+1
    
l6290:
    return

l6400: rem --- Invoice History Detail Retained?

    read (opt11_dev,key=firm_id$+opw04a.ar_type$+opw04a.customer_id$+opw04a.ar_inv_no$,dom=*next)
    opt11k$=""
    opt11k$=key(opt11_dev,end=*next)
rem jpb Here's where things fail when selecting customer 900 through 1000
    if pos(firm_id$+opw04a.ar_type$+opw04a.customer_id$+opw04a.ar_inv_no$=opt11k$)=1 goto l6495; rem "History retained
    oob=-(d3-abs(c3))

rem --- Summarize Non-Retained Postings

    d1$=fill(g5,"?")
    d0=oob
    gosub l6900
    if r5$<>"D" goto l6495
    
    if cur_col<3
        xwk=fnblank(3-cur_col)
    endif
    
    rem OutVect!.addItem("???")
    OutVect!.addItem(d1$)
    OutVect!.addItem("***Detail Not Retained***")
    
    if oob>0
        OutVect!.addItem(str(oob))
        OutVect!.addItem("")
    else
        OutVect!.addItem("")
        OutVect!.addItem(str(abs(oob)))
    endif
    
    cur_col=0
    recs=recs+1
    if oob>0 d1=d1+oob,d2=d2+oob,d3=d3+oob else c1=c1+oob,c2=c2+oob,c3=c3+oob
    
l6495:
    return

l6800: rem --- Write To Work File

    dim opw04a2$:fattr(opw04a$)
    opw04a2.firm_id$=firm_id$
    opw04a2.ar_type$=opt01a.ar_type$
    opw04a2.customer_id$=opt01a.customer_id$
    opw04a2.ar_inv_no$=opt01a.ar_inv_no$
    opw04a2.gl_account$=d1$
    opw04a2.orddet_seq_ref$=z9$
    opw04a2.alt_sequence$=arm01a.alt_sequence$
    extract record (opw04_dev,key=firm_id$+opw04a2.ar_type$+opw04a2.customer_id$+
:                opw04a2.ar_inv_no$+opw04a2.gl_account$+opw04a2.orddet_seq_ref$,dom=*next) opw04a2$; rem Advisory Locking
    opw04a2.gl_post_amt=opw04a2.gl_post_amt+d0
    opw04a2$=field(opw04a2$)
    write record (opw04_dev) opw04a2$
    
rem --- Update G/L Summary
l6900:
    if d0<>0
        dim glw04a$:fattr(glw04a$)
        glw04a.firm_id$=firm_id$
        glw04a.gl_account$=d1$
        extract record (glw04_dev,key=firm_id$+glw04a.gl_account$,dom=*next) glw04a$; rem Advisory Locking
        let glw04a.gl_post_amt=glw04a.gl_post_amt+d0
        glw04a$=field(glw04a$)
        write record (glw04_dev) glw04a$
    endif
    
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
