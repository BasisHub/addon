rem --- opd_shiptrack_lnk.aon
rem --- Launches carrier's shipment tracking web page for a package (tracking number)

    setesc std_error
    seterr std_error

    enter rd_gui_dev,rdWindow!,rd_field_tvar$,rd_ddm_drill_defs$,rd_drill_pfx$,rd_table_chans$[all]

rem --- Parse input fields from rd_drill_pfx
    pfx!=rd_drill_pfx$
    fields!=BBjAPI().makeVector()
    fields!.addAll(java.util.Arrays.asList(pfx!.split("::")))
    firm_id$=fields!.get(0)
    tracking_no$=cvs(fields!.get(1),2)
    carrier_code$=fields!.get(2)

rem --- Open needed file
    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ARC_CARRIERCODE",open_opts$[1]="OTA@"
    gosub open_tables

rem --- Get carrier's website URL from arc_carriercode
    arcCarrierCode_dev=num(open_chans$[1])
    dim arcCarrierCode$:open_tpls$[1]
    readrecord(arcCarrierCode_dev,key=firm_id$+carrier_code$,dom=*next)arcCarrierCode$

rem --- Launch web page for the tracking number
    carrier_url$=cvs(arcCarrierCode.carrier_url$,3)
    if carrier_url$<>"" then
        if carrier_url$(len(carrier_url$))<>"=" then carrier_url$=carrier_url$+"="
        BBjAPI().getThinClient().browse(carrier_url$+tracking_no$)
    else
        msg_id$="AR_MISSING_CARRIER_C"
        dim msg_tokens$[1]
        msg_tokens$[1]=carrier_code$
        gosub disp_message
    endif
        
rem --- Close needed file
    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="@"+"ARC_CARRIERCODE",open_opts$[1]="CX"
    gosub open_tables;rem close OPT_INVHDR
            
done:
    goto exit_prog

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

exit_prog:rem --- Exit Program

    exit
