rem --- rem OPM Standard Message Code Maintenance Listing
rem --- Program opr_stdmessage v8.0.0 04Aug2008 (opm_gb)
rem --- Created by adx_codeport.bbj v1.1.5 (08/04/2008 01:09:20)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif
	rd_alias_id$=cvs(rd_alias_id$,4)

rem --- Get user approval to proceed

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$+" Listing"
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_report

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ars_params",ids$[1]="ARS_PARAMS"
    files$[2]="opm-04",ids$[2]="OPC_MSG_HDR"
    files$[3]="opm-14",ids$[3]="OPC_MSG_DET"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ars01a_dev=channels[1]
    opm04_dev=channels[2]
    opm14_dev=channels[3]

rem --- Dimension string templates

    dim ars01a$:templates$[1],opm04a$:templates$[2],opm14a$:templates$[3]


rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    dim headings$[2]
    h0=80
    h=0
    h1$=n4$+" Listing"
    l9=50
    l=l9+1
    t0=0
    headings$[0]=n1$
    headings$[1]=h1$
    when$=sysinfo.system_date$
    clock$=""
    more=1,moredetail=1

    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" Listing"

rem --- Document columns

    dim columns$[3,10]
    columns$[0,0]="Code",columns$[0,1]="C",columns$[0,2]="5"
    columns$[1,0]="Description",columns$[1,1]="C",columns$[1,2]="30"
    columns$[2,0]="Seq",columns$[2,1]="C",columns$[2,2]="5"
    columns$[3,0]="Detail LInes",columns$[3,1]="C",columns$[3,2]="40"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Position file

    read (opm04_dev,key=firm_id$,dom=*next)
    call pgmdir$+"adc_progress.aon","NC","","","","",0,opm04_dev,1,meter_num,status


rem --- Main Read

while more

    read record (opm04_dev,end=done) opm04a$
    record_count=record_count+1,hdr_read=1
    if mod(record_count,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    read (opm14_dev,key=firm_id$+opm04a.message_code$,dom=*next)    

    rem --- Detail

    while moredetail

        read record (opm14_dev,end=*break) opm14a$
        if opm14a.firm_id$+opm14a.message_code$<>opm04a.firm_id$+opm04a.message_code$ then break

        rem --- Print: header

        if hdr_read=1
            OutVect!.addItem(opm04a.message_code$)
            OutVect!.addItem(opm04a.code_desc$)
            t0=t0+1
            hdr_read=0
        else
            xwk=fnblank(2)
        endif

        OutVect!.addItem(opm14a.message_seq$)
        OutVect!.addItem(opm14a.message_text$)
    wend
wend

done: rem --- End of file

    OutVect!.addItem("")
    OutVect!.addItem("Total Message Records:")
    OutVect!.addItem(str(t0))
    OutVect!.addItem("")

    goto std_exit

rem --- Create blank line in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    release

rem #endinclude std_end.src

    end
