rem --- Invoice History Purge
rem --- Program opu_da v8.0.0 09Jul2007 (opu_da)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 10:29:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved



    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=12,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="art-01",ids$[3]="ART_INVHDR"
    files$[4]="art-63",ids$[4]=""
    files$[5]="opt-01",ids$[5]="OPT_ORDHDR"
    files$[6]="opt-11",ids$[6]="OPT_ORDDET"
    files$[7]="opt-21",ids$[7]="OPT_INVLSDET"
    files$[8]="opt-31",ids$[8]="OPT_INVSHIP"
    files$[9]="opt-51",ids$[9]="OPT_INVBYINVNO"
    files$[10]="opt-61",ids$[10]="OPT_INVBYDATE"
    files$[11]="ARS_PARAMS",ids$[11]=files$[11]
    files$[12]="IVS_PARAMS",ids$[12]=files$[12]
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm01_dev=channels[2]
    art01_dev=channels[3]
    art63_dev=channels[4]
    opt01_dev=channels[5]
    opt11_dev=channels[6]
    opt21_dev=channels[7]
    opt31_dev=channels[8]
    opt51_dev=channels[9]
    opt61_dev=channels[10]
    ars01a_dev=channels[11]
    ivs01a_dev=channels[12]

rem --- Dimension string templates

    dim arm01a$:templates$[2],art01a$:templates$[3],art63a$:templates$[4],
:       opt01a$:templates$[5],opt11a$:templates$[6],opt21a$:templates$[7],
:       opt31a$:templates$[8],opt51a$:templates$[9],opt61a$:templates$[10],
:       ars01a$:templates$[11],ivs01a$:templates$[12]


rem --- Assign form input values to local variables

    table$=fnget_table$("")
rem value_01$=fnget_fld_data$(table$,"dataname_01")
        Base_Purge_Number_Dates$=fnget_fld_data$(table$,"Base_Purge_Number_Dates")
        Purge_Dates$=fnget_fld_data$(table$,"Purge_Dates")
        Invoices_Per_Customer$=fnget_fld_data$(table$,"Invoices_Per_Customer")   
        Beginning_Customer$=fnget_fld_data$(table$,"Beginning_Customer")
        Ending_Customer$=fnget_fld_data$(table$,"Ending_Customer")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    

rem --- Parameters

    
    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    dim p[1]
    p[0]=num(ars01a.customer_size$)
    p[1]=num(ars01a.max_customer_len$)

rem --- Initialize Data

rem dim j0$(20,"0"),j$(80,"-"),j1$(40," ")
rem dim a[13]
    k0=1
    k9=20
    more=1

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status

Options: rem --- Options

    call pgmdir$+"syc_rs.bbx","",my_context,13005,fill(80),0,"",status
    v0$="S"
    v1$="ERC"
    v2$=p9$
    v3$="ND"
    v4$="N=Leave A # Of Invoices PerCustomer, D=Through Invoice Date, <F4>=End"
    v0=1
    v1=40
    v2=3
    i0=0
    control_id=3000
    on v3 goto Flow_Control1,Options,flow_control,Options,std_exit,Flow_Control1,std_exit
Flow_Control1:
    if pos(v$="ND")=0 goto Options
    p9$=v$
    goto flow_control

Purge_Date: rem --- Purge Through Date

    if p8$="" p8$=sysinfo.system_date$
    if p9$="N" call pgmdir$+"syc_rs.bbx","",my_context,3001,"",0,"",status; goto flow_control
    v0$="D"
    v1$="C"
    v2$=p8$
    v3$=""
    v4$="Enter Invoice Date To Purge Through"
    v0=3
    v1=40
    v2=4
    control_id=3001
    on v3 goto Flow_Control2,Purge_Date,flow_control,Purge_Date,std_exit,Flow_Control2,std_exit
Flow_Control2:
    p8$=v$
    goto flow_control

Invoices_To_Retain: rem --- # Of Invoices To Retain For Each Customer

    if p9$="D" call pgmdir$+"syc_rs.bbx","",my_context,3002,"",0,"",status; goto flow_control
    v0$="N"
    v1$="C"
    v2$=p7$
    v3$="###0"
    v4$="Enter Maximum Number Of Invoices To Retain For Each Customer"
    v0=3
    v1=40
    v2=5
    control_id=3002
    on v3 goto Flow_Control3,Invoices_To_Retain,flow_control,Invoices_To_Retain,std_exit,Flow_Control3,std_exit
Flow_Control3:
    p7=v
    p7$=str(v)
    call pgmdir$+"syc_rs.bbx","",my_context,3002,p7$,0,"",status
    goto flow_control

 Beginning_Customer: rem --- Beginning Customer Number


    v0$="M"
    v1$="CE"
    v2$=p6$
    v3$=m0$
    v4$="<F1>=First, <F3>=Customer Lookup"
    v0=p[0]
    v1=40
    v2=6
    control_id=3003
    on v3 goto Find_Record,Call_Pgm2,Call_Pgm1,Begin_Custom,Call_Pgm2,Find_Record,flow_control
Call_Pgm1:
   let p6$=""; call pgmdir$+"syc_rs.bbx","",my_context,3003,j1$(1,p[0]),0,"",status; goto flow_control
Find_Record:

    if v$="" then 

Call_Pgm2:
           let v3=1,p6$=""; call pgmdir$+"syc_rs.bbx","",my_context,13003,"First",0,"",status; goto  flow_control

Begin_Custom:
            v4=2
            v5=5
            v6=13
            v7=21
            v8=p[0]
            v5$="C"
            v3$=m0$
            call pgmdir$+"syc_lc.bbx",v$
            if len(v$)=0 goto Beginning_Customer
    endif
Find_Record2:
rem    dim x0$(30)
    find record (arm01a_dev,key=firm_id$+v$,dom=*next) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3003,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13003,x0$,0,"",status
    p6$=v$

goto flow_control

Ending_Customer: rem --- Ending Customer Number

    v0$="M"
    v1$="C"
    v2$=p5$
    v3$=m0$
    v4$="<F1>=Last, <F3>=Customer Lookup"
    v0=p[0]
    v1=40
    v2=7
    control_id=3004
    on v3 goto Find_Record3,Call_Pgm4,Call_Pgm3,Call_Pgm5,Call_Pgm4,Find_Record3,flow_control
Call_Pgm3:
   let p5$=""; call pgmdir$+"syc_rs.bbx","",my_context,3004,j1$(1,p[0]),0,"",status; goto flow_control
Find_Record3:
    if v$="" then
Call_Pgm4:
           let v3=1,p5$=""; call pgmdir$+"syc_rs.bbx","",my_context,13004,"Last",0,"",status; goto flow_control

Call_Pgm5:
            v4=2
            v5=5
            v6=13
            v7=21
            v8=p[0]
            v5$="C"
            v3$=m0$
            call pgmdir$+"syc_lc.bbx",v$
            if len(v$)=0 goto Ending_Customer
   endif

    if v$<p6$ goto Ending_Customer
    dim x0$(30)
    find record (arm01a_dev,key=firm_id$+v$,dom=*next) arm01a$
    call pgmdir$+"syc_rs.bbx","",my_context,3004,fnmask$(v$(1,p[0]),m0$),0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,13004,x0$,0,"",status
    p5$=v$
    goto flow_control

Display_Processing: rem --- Display Processing Warning

    i0=5
    dim message$[1]
    if p9$<>"N" then 
         message$[0]="Warning!! All Invoices With A Date Prior To "+fndate$(p8$)+" Will Be Purged"
         gosub Pgm_Dir
         else
Message_Warning:
         message$[0]="Warning!! This Will Retain Only "+p7$+" Invoices Per Customer!"
         gosub Pgm_Dir 
    endif 

flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto Options,Purge_Date,Invoices_To_Retain,Beginning_Customer,Ending_Customer,Display_Processing,done,done

done: rem --- Correct?

    if validate then validate=0;exit_ctrl=1
       else
            v0$="S"
            v1$="KC"
            v2$="Y"
            v3$=""
            v4$="ITAC=Y"
            v0=6
            v1=fnv(v4$)
            v2=22
            control_id=i0-i0_done+1
            done_v3:
            on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
        done_test:

             action=pos(v$="YN")
             flow_ctr=0
             validate_ip=1
             d_key=2

            switch action
                   case flow_ctr
                         goto flow_control
                         break
                    case validate_ip
                         goto validate_input 
                         break
                    case d_key
                         goto do_nonkey1
                         break
                         case default
                    break
            swend

                     
                          

rem           on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
validate_input:
               validate=1
               old_control_id=0
do_nonkey1:
               v3=0
               i0=i0_nonkey1-1
               goto flow_control
    endif



    for x=12 to 14 step 2
        call pgmdir$+"syc_wc.bbx",1,0,80,0,0,x,0
    next x
    if p9$="" goto std_exit
    if p9$="N" and p7=0 goto std_exit
    if p9$="D" and p8$="" goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","Purging","",20,0,1,meter_num,status
    read (opt01_dev,key=firm_id$+"  "+p6$,dom=*next)


    while more
            opt01a_key$=key(opt01_dev,end=Finished)
            if opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$=firm_id$ then 
                    if p5$="" and opt01a_key.CUSTOMER_ID$<p5$ then
                            read record (opt01_dev,key=opt01a_key$) opt01a$
rem                         call pgmdir$+"adc_progress.aon","S","","","",fnmask$(k$(5,p[0]),m0$),0,0,1,meter_num,status
                            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                            if p9$<>"D" then 
                                if opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.CUSTOMER_ID$<>t0$ gosub process_by_count
                                t0=t0+1
                                continue
                            endif



                            if opt01a_key.INVOICE_DATE$>p8$ continue
                            gosub delete_history
    wend

delete_history: rem --- Process History Detail Lines

                            read (opt11_dev,key=opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.CUSTOMER_ID$+opt01a_key.AR_INV_NO$+"000",dom=*next)
             while more
                            opt11a_key$=key(opt11_dev,end=*break)
                            if pos(opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.CUSTOMER_ID$+opt01a_key.AR_INV_NO$= opt11a_key$)<>1 break
                            remove (opt11_dev,key= opt11a_key$)
             wend
rem --- Remove Manual Ship-To



                            remove (opt31_dev,key=opt01a_key.FIRM_ID$+opt01a_key.CUSTOMER_ID$+opt01a_key.AR_INV_NO$,dom=*next)

rem --- Remove Serial/Lotted History Detail

                            read (opt21_dev,key=opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.CUSTOMER_ID$+opt01a_key.AR_INV_NO$,dom=*next)
              while more
                            opt21a_key$=key(opt21_dev,end=*break)
                            if opt21a_key.FIRM_ID$+opt21a_key.AR_TYPE$+opt21a_key.CUSTOMER_ID$+opt21a_key.AR_INV_NO$<>opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.CUSTOMER_ID$+opt01a_key.AR_INV_NO$ break
                            remove (opt21_dev,key=opt21a_key$)
              wend



                            find (art01_dev,key=opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.CUSTOMER_ID$+opt01a_key.AR_INV_NO$+"00",dom=Remove_Next1)
                            goto Remove_History_Header
Remove_Next1: remove (opt51_dev,key=opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.AR_INV_NO$+opt01a_key.CUSTOMER_ID$,dom=*next)

                            remove (opt61_dev,key=opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.INVOICE_DATE$+opt01a_key.AR_INV_NO$+opt01a_key.CUSTOMER_ID$,dom=*next)

rem --- ESCAPE REMOVE (ART63_DEV,KEY=A0$(1,4)+A0$(42,7)+A0$(11,7)+A0$(5,6),DOM=5746)

Remove_History_Header: rem --- Remove History Header Record

                            remove (opt01_dev,key=opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.CUSTOMER_ID$+opt01a_key.AR_INV_NO$+opt01a_key.SEQUENCE_000$)

rem                         call pgmdir$+"adc_progress.aon","S","","","",fnmask$(opt01a_key.CUSTOMER_ID$,m0$)+"  "+opt01a_key.AR_INV_NO$+"-"+opt01a_key.SEQUENCE_000$,0,0,1,meter_num,status
                            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                    return
            endif
         endif

Finished: rem --- Finished

    if p9$="D" goto std_exit
    let t9$="E"
    gosub process_by_count
    goto std_exit

process_by_count: rem --- Purge Based On Number Of Invoices 

    if t0$<>"" then 
       if t0>p7   then
            let t1=t0-p7,t2=0
            read (opt01_dev,key=t0$,dom=*next)

           while more
            let opt01_key$=key(opt01_dev,end=std_exit)
            if  opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.CUSTOMER_ID$<>t0$ break
            find record (opt01a_dev,key=opt01_key$) opt01a$
            gosub delete_history
            let t2=t2+1
            if t2<t1 
           wend
      endif
   endif

    if t9$="E" return
    let t0$=opt01a_key.FIRM_ID$+opt01a_key.AR_TYPE$+opt01a_key.CUSTOMER_ID$
    let t0=0,t1=0,t2=0
    return
rem check it
rem --- Clear Screen 

    for i=13 to 21
        print @(0,i),'CL',
    next i
    return
    call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,"",0,"",status
    call pgmdir$+"syc_rs.bbx","",my_context,control_id,"",0,"",status
    return
Pgm_Dir:
    call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,19,-1,v$,v3
return

rem --- FUNCTIONS

    def fndate$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")
    def fndate$(q1$)=fndate$(q1$(2),q1$)+"/"+fndate$(q1$(3),q1$)+"/"+fndate$(q1$(1),q1$)
    def fndate$(q1$)=fndate$(q1$(2),q1$)+fndate$(q1$(3),q1$)+fndate$(q1$(1),q1$)
    def fndate$(q$)=chr(fnyy_year(q$(5,2))+32)+chr(num(q$(1,2))+32)+chr(num(q$(3,2))+32)
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year

    def fnyy$(q1$)
    let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
    fnend

rem --- Convert 2-Char Year to 21st Century Numeric Year

    def fnyy_year(q1$)
    let q=num(fnyy$(q1$)),q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=l8181)
l8181:
    if q<q9 q=q+100
    return q
    fnend
rem --- FNF$ AlphaNumeric Masking Function
    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
rem     if pos("E"=cvs(q1$,4)) goto *next else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
alpha_fnf:
    let q=1,q0=0
    while len(q2$(q))
          if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
          let q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
rem    run pgmdir$+"ads_process_end.aon",err=*next
       run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
