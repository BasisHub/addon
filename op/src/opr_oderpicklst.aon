rem --- Order/Picking List Batch Print
rem --- Program opr_na v8.0.0 06Jul2007 (opr_na)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:01:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

	enter dummy$,err=*next
	
    setesc std_error
    seterr std_error

rem --- Retrieve the program path
                                                                                                                        
    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=20,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="arm-01",ids$[2]="ARM_CUSTMAST"
    files$[3]="arm-03",ids$[3]="ARM_CUSTSHIP"
    files$[4]="ARC_TERMCODE",ids$[4]="ARC_TERMCODE"
    files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
    files$[6]="ivm-02",ids$[6]="IVM_ITEMWHSE"
    files$[7]="IVC_WHSECODE",ids$[7]=files$[7]
    files$[8]= "ope-01",ids$[8]="OPE_ORDHDR"
    files$[9]="ope-04",ids$[9]="OPE_PRNTLIST"
    files$[10]="ope-11",ids$[10]="OPE_ORDDET"
    files$[11]="ope-21",ids$[11]="OPE_ORDLSDET"
    files$[12]="ope-31",ids$[12]="OPE_ORDSHIP"
    rem files$[13]="opm_pointofsale",ids$[13]="OPM_POINTOFSALE"
    files$[14]="opm-02",ids$[14]="OPC_LINECODE"
    files$[15]="opm-04",ids$[15]="OPC_MSG_HDR"
    files$[16]="opm-14",ids$[16]="OPC_MSG_DET"
    files$[17]="ARS_PARAMS",ids$[17]=files$[17]
    files$[18]="ARS_CREDIT",ids$[18]=files$[18]
    files$[19]="IVS_PARAMS",ids$[19]=files$[19]
    files$[20]="ARC_SALECODE",ids$[20]=files$[20]
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm01_dev=channels[2]
    arm03_dev=channels[3]
    arm10_dev=channels[4]
    ivm01_dev=channels[5]
    ivm02_dev=channels[6]
    ivm10c_dev=channels[7]
    ope01_dev=channels[8]
    ope04_dev=channels[9]
    ope11_dev=channels[10]
    ope21_dev=channels[11]
    ope31_dev=channels[12]
    rem opm01_dev=channels[13]
    opm02_dev=channels[14]
    opm04_dev=channels[15]
    opm14_dev=channels[16]
    ars01a_dev=channels[17]
    ars01c_dev=channels[18]
    ivs01a_dev=channels[19]
    arm10f_dev=channels[20]

rem --- Dimension string templates

    dim arm01a$:templates$[2],arm03a$:templates$[3],arm10a$:templates$[4]
    dim ivm01a$:templates$[5],ivm02a$:templates$[6],ivm10c$:templates$[7]
    dim ope01a$:templates$[8],ope04a$:templates$[9],ope11a$:templates$[10]
    dim ope21a$:templates$[11],ope31a$:templates$[12]; rem ,opm01a$:templates$[13]
    dim opm02a$:templates$[14],opm04a$:templates$[15],opm14a$:templates$[16]
    dim ars01a$:templates$[17],ars01c$:templates$[18],ivs01a$:templates$[19]
    dim arm10f$:templates$[20]   

rem --- Assign form input values to local variables

    on_demand$="N"
    on_demand$=stbl("on_demand",err=*next)
    x$=stbl("!CLEAR","on_demand",err=*next)

    if on_demand$="N"
        p8$=option!.getOptionData("PRINT_PRICE")
        p7$=option!.getOptionData("RESTART")
        cust_id$=option!.getOptionData("CUSTOMER_ID")   
        whse$=option!.getOptionData("WAREHOUSE_ID")
        which_ones$=option!.getOptionData("PRINT_LIST")
    else
        o9=2
        ope01a.firm_id$=firm_id$
        ope01a.customer_id$=on_demand$(2,6)
        ope01a.order_no$=on_demand$(8,7)
        rd_alias_id$="OPR_PICK_DEMAND"
    endif
        
rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    n1$=sysinfo.firm_name$
    n2$="AR"
    n4$=sysinfo.task_desc$
    dim p3$(113)
    find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    dim c9$(55) 
    ars01c.sys_install$="N"
    find record (ars01c_dev,key=firm_id$+"AR01",dom=*next) ars01c$
    rem find record (opm01_dev,key=firm_id$+pad(stbl("+USER_ID"),16),dom=*next) opm01a$

    dim i[6]
    i[0]=ivs01a.item_id_len
    i[1]=ivs01a.vendor_prd_len
    i[2]=num(ivs01a.precision$)
    i[3]=ivs01a.ls_no_len
    i[4]=num(ivs01a.desc_len_01$)
    i[5]=num(ivs01a.desc_len_02$)
    i[6]=num(ivs01a.desc_len_03$)
    desclen=i[4]+i[5]+i[6]

rem --- Initialize Data 

    if p7$="" then p7$="N"
    if p8$="" then p8$="N"
    p9$=sysinfo.system_date$
    if which_ones$="" then which_ones$="B"

rem --- Run overlay

    run pgmdir$+"opr_oderpicklst_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
