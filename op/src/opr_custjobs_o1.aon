rem --- Customer/Job Report
rem --- Program opr_fb v8.0.0 28Jan2008 (opr_fb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/28/2008 11:11:03)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initialize Data

    more=1
    dim headings$[2],a[1]
    headings$[0]=n1$
    headings$[1]=n3$,clock$="",when$=sysinfo.system_date$
    h0=132
    l9=55,l=l9+1,h=0
    t0=0
    total_recs=0

rem ---  column heading

    dim columns$[9,10]
    columns=9
    columns$[0,0]="Customer No/Name",          columns$[0,1]="C",columns$[0,2]="20"
    columns$[1,0]="Job Number ",               columns$[1,1]="C",columns$[1,2]="10"
    columns$[2,0]="Job Name",                  columns$[2,1]="C",columns$[2,2]="20"
    columns$[3,0]="Contact",                   columns$[3,1]="C",columns$[3,2]="20"
    columns$[4,0]="Lien Number",               columns$[4,1]="C",columns$[4,2]="10"
    columns$[5,0]="First ship",                columns$[5,1]="C",columns$[5,2]="10"
    columns$[6,0]="Lien date",                 columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$
    columns$[7,0]="Last Inv",                  columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$
    columns$[8,0]="Lien Amount",               columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m1$
    columns$[9,0]="Sls-To-Date",               columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$

rem --- Background

    call pgmdir$+"adc_progress.aon","CN","OPM_CUSTJOBS","","","",0,opm09_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem --- Initial Read

    read (opm09_dev,key=firm_id$,dom=*next)

rem --- retrieve template for OPM_CUSTJOBS record key

    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPM_CUSTJOBS","PRIMARY",opm09a_key_tpl$,table_chans$[all],status$
    dim opm09a_key$:opm09a_key_tpl$

rem --- Main Loop Starts

    while more

        opm09a_key$=key(opm09_dev,end=*break)
        if pos(firm_id$=opm09a_key$)<>1 then break
        read record (opm09_dev,end=done) opm09a$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

    rem --- Control Breaks

        if p9$<>"" and opm09a.customer_id$<p9$ then continue
        if p8$<>"" and opm09a.customer_id$>p8$ then continue

    rem --- Break

        if opm09a.customer_id$<>t0$ then gosub Customer_Break

    rem --- Print

        OutVect!.addItem(opm09a.job_no$)
        OutVect!.addItem(opm09a.customer_name$)
        OutVect!.addItem(opm09a.contact_name$)
        OutVect!.addItem(opm09a.lien_no$)
        OutVect!.addItem(fndate$(opm09a.fst_shp_date$))
        OutVect!.addItem(fndate$(opm09a.lien_date$))
        OutVect!.addItem(fndate$(opm09a.lstinv_date$))
        OutVect!.addItem(str(opm09a.lien_amount))
        OutVect!.addItem(str(opm09a.total_sales))
        xwk=fnblank(1)
        t0=t0+1

    wend


rem --- Main Loop Ends

done: rem --- End

    if t0>0 then
        xwk=fnblank(9)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        OutVect!.addItem(str(t0)+"  "+"Total Jobs")
        xwk=fnblank(9)
    else
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    goto std_exit

Sub_Head: rem --- Subhead

    OutVect!.addItem(fnmask$(t0$,m0$)+"  "+arm01a.customer_name$)
    return

Customer_Break: rem --- Customer Break

    if t9$<>"" then return
    t0$=opm09a.customer_id$
    arm01a.customer_name$="(Not On File)"
    find record (arm01_dev,key=opm09a.firm_id$+t0$,dom=*next) arm01a$
    gosub Sub_Head

    return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions
rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem --- #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
