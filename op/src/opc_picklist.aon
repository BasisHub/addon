rem --- Picking List/Quotation
rem --- Program opc_picklist.aon v8.0.0 18Jul2007 (opr_pa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/18/2007 03:48:04)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

on_demand: rem --- Entry point for on-demand picklist    

    setesc std_error
    seterr std_error
    
    enter cust_id$, order_no$, callpoint!, table_chans$[all], status
    
    custIds! = BBjAPI().makeVector()
    orderNos! = BBjAPI().makeVector()

    custIds!.addItem( cust_id$ )
    orderNos!.addItem( order_no$ )   
    
    type = 1	
    goto done_with_enter

on_demand_no_col_data: rem --- Entry point for on-demand picklist from Credit Management

    setesc std_error
    seterr std_error
    
    enter cust_id$, order_no$, callpoint!, table_chans$[all], status
    
    custIds! = BBjAPI().makeVector()
    orderNos! = BBjAPI().makeVector()

    custIds!.addItem( cust_id$ )
    orderNos!.addItem( order_no$ )   
    
    type = 1
	no_col_data = 1
    goto done_with_enter

batch_pick: rem --- Batch printing of orders

    setesc std_error
    seterr std_error

    enter custIds!, orderNos!, option!, printed_orders$, table_chans$[all], status
    
    type = 2	
	
done_with_enter:

rem --- Types of calls

    on_demand  = 1
    batch_pick  = 2
	
rem --- Use statements and Declares

	use ::ado_util.src::util
    use ::ado_func.src::func
    use ::ado_pdf.src::PDFHelper
    use ::sys/prog/bao_callpoint.bbj::Callpoint
    use ::sys/prog/bao_option.bbj::Option

    use java.awt.Font
    use java.lang.Float
    use javax.print.attribute.HashPrintRequestAttributeSet
    use javax.print.attribute.standard.MediaPrintableArea
    use javax.print.attribute.standard.MediaSizeName
    use javax.print.attribute.standard.OrientationRequested
    
    declare Callpoint callpoint!
    declare Option option!
    declare BBjVector custIds!
    declare BBjVector orderNos!	

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)
    
rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$
	
rem --- Set document Directory

    docdir$=""
    docdir$=stbl("+DOC_DIR_PDF",err=*next)	
    
rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$
    
rem --- Anything to print?

    if custIds!.size() = 0 or orderNos!.size() = 0 then
		status=998
        goto nothing_printed
    endif

rem --- Derive/set path and filename for logo to go on form

    logofile$ = ""
    start_block = 1
    curr_path$=dsk("")+dir("")

    if start_block then   
        chdir stbl("+CUST_IMAGES",err=*endif),err=*endif
        logofile$="file:"+dsk("")+dir("")+stbl("+FORM_LOGO",err=*endif)
    endif

    chdir curr_path$
    
rem --- Open all files

    num_files = 18
    open_beg  = 1
    open_end  = num_files

    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]="IVC_WHSECODE",  open_opts$[1]="OTA"; rem ivm10c
    open_tables$[2]="IVS_PARAMS",    open_opts$[2]="OTA"
    open_tables$[3]="OPE_ORDHDR",    open_opts$[3]="OTA"; rem ope01
    open_tables$[4]="ARS_CREDIT",    open_opts$[4]="OTA"; rem ars01c
    open_tables$[5]="ARM_CUSTMAST",  open_opts$[5]="OTA"; rem arm01
    open_tables$[6]="ARM_CUSTSHIP",  open_opts$[6]="OTA"; rem arm03
    open_tables$[7]="OPE_ORDSHIP",   open_opts$[7]="OTA"; rem ope31
    open_tables$[8]="ARC_SALECODE",  open_opts$[8]="OTA"; rem arm10f
    open_tables$[9]="ARC_TERMCODE",  open_opts$[9]="OTA"; rem arm10a
    open_tables$[10]="OPE_ORDDET",   open_opts$[10]="OTA"; rem ope11
    open_tables$[11]="OPC_LINECODE", open_opts$[11]="OTA"; rem opm02
    open_tables$[12]="IVM_ITEMMAST", open_opts$[12]="OTA"; rem ivm01
    open_tables$[13]="IVM_ITEMWHSE", open_opts$[13]="OTA"; rem ivm02
    open_tables$[14]="OPE_ORDLSDET", open_opts$[14]="OTA"; rem ope21
    open_tables$[15]="OPE_PRNTLIST", open_opts$[15]="OTA"; rem ope04
    open_tables$[16]="OPC_MSG_HDR",  open_opts$[16]="OTA"; rem opm04
    open_tables$[17]="OPC_MSG_DET",  open_opts$[17]="OTA"; rem opm14
    open_tables$[18]="ARS_REPORT",   open_opts$[18]="OTA"; rem ars01b
   
    gosub open_tables

    whsecode_dev = num(open_chans$[1])
    params_dev   = num(open_chans$[2])
    ordhdr_dev   = num(open_chans$[3])
    credit_dev   = num(open_chans$[4])
    custmast_dev = num(open_chans$[5])
    custship_dev = num(open_chans$[6])
    ordship_dev  = num(open_chans$[7])
    salecode_dev = num(open_chans$[8])
    termcode_dev = num(open_chans$[9])
    orddet_dev   = num(open_chans$[10])
    linecode_dev = num(open_chans$[11])
    itemmast_dev = num(open_chans$[12])
    itemwhse_dev = num(open_chans$[13])
    ordlsdet_dev = num(open_chans$[14])
    prntlist_dev = num(open_chans$[15])
    msghdr_dev   = num(open_chans$[16])
    msgdet_dev   = num(open_chans$[17])
	ars_report_dev = num(open_chans$[18])
    
    dim whsecode_rec$:open_tpls$[1]
    dim params_rec$:open_tpls$[2]
    dim ope01a$:open_tpls$[3]
    dim credit_rec$:open_tpls$[4]
    dim arm01a$:open_tpls$[5]
	dim arm01a1$:open_tpls$[5]
    dim arm03a$:open_tpls$[6]
    dim ope31a$:open_tpls$[7]
    dim salecode_rec$:open_tpls$[8]
    dim termcode_rec$:open_tpls$[9]
    dim ope11a$:open_tpls$[10]
    dim opm02a$:open_tpls$[11]
    dim ivm01a$:open_tpls$[12]
    dim ivm02a$:open_tpls$[13]
    dim ope21a$:open_tpls$[14]
    dim ope04a$:open_tpls$[15]
    dim opm04a$:open_tpls$[16]
    dim opm14a$:open_tpls$[17]
	dim ars01b$:open_tpls$[18]

rem --- Get Parameters
    
    find record (params_dev, key=firm_id$+"IV00", dom=std_missing_params) params_rec$
    find record (credit_dev, key=firm_id$+"AR01") credit_rec$	
	find record (ars_report_dev, key=firm_id$+"AR02", err=std_missing_params) ars01b$

    remit$=ars01b.remit_addr_1$+ars01b.remit_addr_2$+ars01b.remit_city$+ars01b.remit_state$+ars01b.remit_zip$
    call pgmdir$+"adc_address.aon",remit$,24,3,9,30
    remit$=ars01b.remit_name$+remit$

    comp$=ars01b.addr_line_1$+ars01b.addr_line_2$+ars01b.city$+ars01b.state_code$+ars01b.zip_code$
    call pgmdir$+"adc_address.aon",comp$,24,3,9,30
	comp$=ars01b.name$+comp$
	   
rem --- Init PDF printing 

    declare Font textfont!
    declare Font boldfont!
    declare Font italicfont!
    declare Font largefont!
    declare BBjColor white!
    declare BBjColor black!
    declare BBjColor light_gray!
    declare Font smallfont!

    textfont!   = new Font("Times New Roman", Font.PLAIN, 10)
    italicfont! = new Font("Times New Roman", Font.ITALIC, 10)
    boldfont!   = new Font("Arial", Font.BOLD, 10)
    largefont!  = new Font("Arial", Font.BOLD, 14)
    smallfont!  = new Font("Times New Roman", Font.PLAIN, 8)

    white! = BBjAPI().makeColor("WHITE")
    black! = BBjAPI().makeColor("BLACK")
    light_gray! = BBjAPI().makeColor(224, 224, 224)

rem --- Setup PDF printer and print area   

    declare HashPrintRequestAttributeSet requestAttributes!
    declare MediaPrintableArea a!
    declare Float x!
    declare Float y!
    declare Float w!
    declare Float h!

    requestAttributes! = new HashPrintRequestAttributeSet()
    requestAttributes!.add(MediaSizeName.NA_LETTER)
    requestAttributes!.add(OrientationRequested.PORTRAIT)

    units = MediaPrintableArea.INCH
    x! = new Float(0.25).floatValue()
    y! = new Float(0.25).floatValue()
    w! = new Float(8.0).floatValue()
    h! = new Float(10.5).floatValue()
    a! = new MediaPrintableArea(x!,y!,w!,h!,units)

    requestAttributes!.add(a!)

rem --- Create PDF printer, set attributes, and create PDF helper object

    declare BBjPrinter myBBjPrinter!
    declare BBjForm docPrint!
    declare PDFHelper pdf!

    myBBjPrinter! = BBjAPI().getBBjPrinter(1,err=*next)
    if myBBjPrinter!=null()
		status=998
        msg_id$="AD_NOPRINTER"
        gosub disp_message
        goto std_exit
    endif
    
    myBBjPrinter!.setAttributes(requestAttributes!)
    docPrint! = myBBjPrinter!.getForm(0)
    pdf! = new PDFHelper(textfont!)
	
rem --- Inits

    precision num(params_rec.precision$)
	
	address = 30
    more = 1
    total = 0
    start_block = 1
	line = 0
	
    call pgmdir$+"adc_getmask.aon","","AR","I","",m0$,0,m0
    call pgmdir$+"adc_getmask.aon","","IV","A","",m1$,0,m1
    call pgmdir$+"adc_getmask.aon","","IV","U","",m2$,0,m2
    call pgmdir$+"adc_getmask.aon","","IV","C","",m3$,0,m3
    call pgmdir$+"adc_getmask.aon","","IV","P","",m4$,0,m4
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    m4=len(m4$)
 
    when$=sysinfo.system_date$
    dim x4$(400)
    
    func.setLen1( int(num(params_rec.desc_len_01$)) )
    func.setLen2( int(num(params_rec.desc_len_02$)) )
    func.setLen3( int(num(params_rec.desc_len_03$)) )
	
    nothing_printed = 1
    
    if type = on_demand then
        alias$ = callpoint!.getAlias()
    else
        alias$ = option!.getAlias()
		print_prices$=option!.getOptionData("PRINT_PRICE")   
        whse$=option!.getOptionData("WAREHOUSE_ID")
    endif
    	
rem --- Is this company multi-warehouse?
    
    mult_wh=0
    read (whsecode_dev, key=firm_id$+"C", dom=*next)
	read (whsecode_dev)

    if start_block then
        read record (whsecode_dev, end=*endif) whsecode_rec$
        if whsecode_rec.firm_id$ = firm_id$ and whsecode_rec.record_id_c$ = "C" then mult_wh=1
    endif

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",0,0,1,0,status
    if status = 999 then goto std_exit

rem --- Main Read

    for next_item = 0 to custIds!.size() - 1
    
        cust_id$ = str( custIds!.getItem(next_item) )
        order_no$ = str( orderNos!.getItem(next_item) )

		if type = on_demand
            if no_col_data
                extract record (ordhdr_dev, key=firm_id$+"  "+cust_id$+order_no$, dom=std_exit) ope01a$; rem Advisory Locking
            else
                ope01a$ = util.copyFields(fattr(ope01a$), callpoint!)
            endif
		else
			if pos(cust_id$+order_no$=printed_orders$,len(cust_id$)+len(order_no$))=0 goto next_read
			extract record (ordhdr_dev, key=firm_id$+"  "+cust_id$+order_no$, dom=std_exit) ope01a$; rem Advisory Locking
		endif
		
rem --- Set Firm ID for Credit Review and Release orders
		if cvs(ope01a.firm_id$,3)=""
			ope01a.firm_id$ = firm_id$
		endif
		
        if type = on_demand then
            msg_id$="OP_PRINTPRICES"
            gosub disp_message
            print_prices$=msg_opt$
        endif
        
rem --- set number of lines to print
		if ope01a.invoice_type$="S" then
			maxline = 32		
		else
			maxline = 26
		endif
		
        if ope01a.print_status$="Y" and type = batch_pick then 
            gosub is_still_printed
        endif

        if ope01a.reprint_flag$="Y" then  
            reprint$ = ope01a.print_status$
            ope01a.print_status$ = "N"
        endif

        if ope01a.print_status$="Y" and type = batch_pick then continue
        if ope01a.invoice_type$="V" then continue
        if credit_rec.sys_install$="Y" and ope01a.credit_flag$="C" and credit_rec.pick_hold$="N" then continue

        after$="NO"
		if type = batch_pick then
			gosub valid_lines
			if print$="NO" then continue
		endif	
		
    rem --- Get a barista document ID
    
        new_doc_id$ = ""
        pdf_doc$    = ""
        call sypdir$+"bac_documents.bbj", 
:           new_doc_id$, 
:           "", 
:           "", 
:           "I", 
:           "PDF", 
:           docdir$, 
:           "pdf", 
:           alias$, 
:           "C", 
:           ope01a.customer_id$, 
:           table_chans$[all], 
:           "DOC_ID"

    rem --- Heading (bill-to address)

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status
        if status = 999 then exitto std_exit
        
        declare BBjTemplatedString arm01!
        declare BBjTemplatedString arm03!
        declare BBjTemplatedString ope31!
        
        arm01! = BBjAPI().makeTemplatedString(fattr(arm01a1$))
        ope31! = BBjAPI().makeTemplatedString(fattr(ope31a$))
        arm03! = BBjAPI().makeTemplatedString(fattr(arm03a$))

        dim b$(6*address)
        found = 0
        start_block = 1

        if start_block then
            read record (custmast_dev, key=firm_id$+ope01a.customer_id$, dom=*endif) arm01!
            b$ = func.formatAddress(arm01!, address, 6)
            b$ = pad(func.alphaMask(arm01!.getFieldAsString("CUSTOMER_ID"), m0$),address) + b$
            found = 1
        endif

        if !found then
            b$ = pad("Customer not found", address*7)
        endif		

    rem --- Ship-To
    
        c$ = b$
        start_block = 1

        if ope01a.shipto_type$ = "M" then 
            shipto$ = ""

            if start_block then
                find record (ordship_dev, key=firm_id$+ope01a.customer_id$+ope01a.order_no$, dom=*endif) ope31!
                c$ = func.formatAddress(ope31!, address, 7)
            endif

        else
            if ope01a.shipto_type$ = "S" then
                shipto$ = ""

                if start_block then
                    find record (custship_dev,key=firm_id$+ope01a.customer_id$+ope01a.shipto_no$, dom=*endif) arm03!
                    c$ = func.formatAddress(arm03!, address, 7)
                    shipto$ = ope01a.shipto_no$
                endif
            endif
        endif

    rem --- Terms

        dim termcode_rec$:fattr(termcode_rec$)
        termcode_rec.code_desc$ = "Not Found"
        find record (termcode_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=*next) termcode_rec$

    rem --- Salesperson

        salecode_rec.code_desc$ = "Not Found"
        find record (salecode_dev,key=firm_id$+"F"+ope01a.slspsn_code$,dom=*next) salecode_rec$


    rem --- Print Heading

		page=0
        gosub report_heading
        total_sale=0

    rem --- Position Detail File

        read (orddet_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,knum="AO_CUST_ORD_LINE",dom=*next)
		othwhse$=""

        while more

		read record (orddet_dev, end=*break) ope11a$
            if ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$ <> ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$ then break

        rem --- Type

            if start_block then
                find record (linecode_dev,key=firm_id$+ope11a.line_code$,dom=*endif) opm02a$
                
                if pos(ope01a.invoice_type$="P")<>0 or ope11a.commit_flag$<>"N" and pos(ope11a.warehouse_id$=othwhse$)=0 then 
                    othwhse$=othwhse$+ope11a.warehouse_id$
                endif
                
                if whse$<>"" and ope11a.warehouse_id$<>whse$ then continue
            endif

            if pos(opm02a.line_type$="MNO")=0 then 
               
                ivm01a.item_desc$="**Not On File**"

                if pos(opm02a.line_type$=" SRDP")<>0 then
                    if start_block then
                        find record (itemmast_dev,key=firm_id$+ope11a.item_id$,dom=*endif) ivm01a$
                        gosub Compress_Description
                    endif
                   
                    find record (itemwhse_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=*next) ivm02a$
                endif
            endif

            if opm02a.line_type$<>"M" or pos(opm02a.message_type$=" BO")<>0 then 
                gosub line_detail
            endif

            total_sale=total_sale+ope11a.ext_price

		rem --- Any Serial/Lot #'s?

			if ope01a.invoice_type$ = "P" then continue
            if pos(params_rec.lotser_flag$="LS")=0 then continue
            if pos(opm02a.line_type$=" SRDP")=0 then continue
            if ivm01a.lotser_item$<>"Y" then continue

        rem --- There are serial/lots

            total_ls=0
			line = line - 1;rem blank line was added after description in anticipation of going on to next item; if going on to lots, don't skip a line
            ls_start$ = firm_id$+"  "+ope11a.customer_id$+ope11a.order_no$+ope11a.internal_seq_no$
            read (ordlsdet_dev, key=ls_start$, dom=*next)

            while more
                read record (ordlsdet_dev, end=*break) ope21a$
                if pos(ls_start$=ope21a.firm_id$+ope21a.ar_type$+ope21a.customer_id$+ope21a.order_no$+ope21a.orddet_seq_ref$)<>1 break

                if ope21a.qty_ordered then
                    lotser_no$ = ope21a.lotser_no$
                    gosub print_lotser_no
                    total_ls = total_ls + ope21a.qty_shipped
                endif
            wend

            if total_ls<ope11a.qty_ordered then
                lotser_no$=""

                if params_rec.lotser_flag$="L" then 
                    y9=3
                else
                    y9=ope11a.qty_ordered-total_ls
                endif

                for y=1 to y9
                    gosub print_lotser_no
                next y
            endif
			
			line = line + 1;rem add extra line after last lot

        wend

    rem --- Footer

        gosub print_footer
     
        if type = batch_pick then
		
			if ope01a.reprint_flag$="Y"
				ope01a.print_status$=reprint$ 
			else 
				ope01a.print_status$="B"
			endif

			ope01a$=field(ope01a$)
			write record (ordhdr_dev) ope01a$	

        else

			read (ordhdr_dev)	

        endif
		
        nothing_printed = 0		

    rem --- End of picklist/quote

next_read:	
	next next_item

display: rem --- Display PDF

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    if status = 999 then goto std_exit

nothing_printed:    
    
    if nothing_printed then
		status=998
        docPrint!.cancel()
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto all_done
    endif

    docPrint!.preview()

rem --- Updates and final processing

    if type = on_demand 

		after$="YES"
		ope01a.print_status$="Y"
		ope01a.reprint_flag$="Y"
		if no_col_data = 0
			callpoint!.setColumnData("PRINT_STATUS","Y")
			callpoint!.setColumnData("REPRINT_FLAG","Y")
		endif

        ope01a.lock_status$="N";rem --- really?  If on-demand, I'll be returning to OE w/ order up... shouldn't it be locked?

		ope01a$=field(ope01a$)
		write record (ordhdr_dev) ope01a$

        if ope01a.print_status$="Y"
            remove (prntlist_dev,key=firm_id$+ope01a.ordinv_flag$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=*next)
        endif 
	endif

	if type = batch_pick

		msg_id$="AON_UPDT_PICK_QUERY"
		dim msg_tokens$[1]
		msg_tokens$[1]=sysinfo.task_desc$
		gosub disp_message

		if msg_opt$<>"Y" then goto std_exit
		call pgmdir$+"adc_progress.aon","N","","","","",0,prntlist_dev,1,meter_num,status
		if status = 999 then goto std_exit
		
rem --- Position file for update    
    
		read (prntlist_dev,key=firm_id$+"O",dom=*next)		

rem --- Clear Print Flags

		while more

			read record (prntlist_dev,end=*break)ope04a$
			if ope04a.firm_id$+ope04a.ordinv_flag$<>firm_id$+"O" break
			if pos(ope04a.customer_id$+ope04a.order_no$=printed_orders$,len(ope04a.customer_id$)+len(ope04a.order_no$))=0 continue
			call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
			if status = 999 then exitto std_exit
			start_block = 1

			if start_block then
				if pos(ope04a.customer_id$+ope04a.order_no$=printed_orders$,len(ope04a.customer_id$)+len(ope04a.order_no$))=0 continue
				extract record (ordhdr_dev, key=ope04a.firm_id$+ope04a.ar_type$+ope04a.customer_id$+ope04a.order_no$, dom=*endif) ope01a$
				if (which_ones$="P" and ope01a.invoice_type$<>"S") or (which_ones$="Q" and ope01a.invoice_type$<>"P") then continue

				if ope01a.reprint_flag$="Y" then
					ope01a.reprint_flag$=""
					ope01a.lock_status$="N" 
				else
					if pos(ope01a.print_status$="B")=0 then continue
					if pos(ope01a.lock_status$="YS12")<>0 then continue
					after$="YES"
					gosub valid_lines
					ope01a.lock_status$="N"
					if print$="YES" and allprint$="YES" then ope01a.print_status$="Y"
				endif

				if ope01a.print_status$<>"Y" then ope01a.print_status$="N"
				if status <> 999 and type = on_demand ope01a.print_status$="Y"
				ope01a$=field(ope01a$)
				write record (ordhdr_dev) ope01a$
			endif
			
			if ope01a.print_status$="Y" then
				remove (prntlist_dev,key=ope04a.firm_id$+ope04a.ordinv_flag$+ope04a.ar_type$+ope04a.customer_id$+ope04a.order_no$,dom=*next)
			endif  
			
		wend

		msg_id$="UPDATE_COMPLETE"
		dim msg_tokens$[1]
		msg_opt$=""
		gosub disp_message
		
	endif
		
all_done:

    read(ordhdr_dev,end=*next); rem release extract

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
	goto std_exit
	
report_heading: rem --- Report Heading

rem --- Create PDF physical file, if needed

    declare BBjForm docPDF!

    while pdf_doc$ = ""
        prtr_dev = unt
        pdf_doc$ = docdir$ + new_doc_id$ + ".pdf"
        start_block = 1

        if start_block
            open (prtr_dev,err=*endif)pdf_doc$
            close (prtr_dev)
            erase pdf_doc$
        endif

        docPDF! = BBjAPI().getBBjPDFForm(pdf_doc$, requestAttributes!)
    wend

    line = 0
    page = page + 1

rem --- Create pages from both physical and display objects   

    declare BBjFormPage pagePDF!
    declare BBjFormPage pagePrint!

    pagePDF!   = docPDF!.createPage()
    pagePrint! = docPrint!.createPage(err=invalid_printer)

    pdf!.setPage(pagePrint!)

    while 1
	
		if ope01a.invoice_type$="P"
			hd_text$="Q U O T A T I O N"
		else 
			hd_text$="P I C K I N G   L I S T"
		endif

		if ope01a.reprint_flag$="Y"
			z0$="*** R E P R I N T ***" 
		else 
			z0$=""
		endif	

        pdf!.setText(210,10,140,0,hd_text$,largefont!,pdf!.CENTER_JUSTIFY(),black!,white!)
        pdf!.setText(210,40,140,0,z0$,largefont!,pdf!.CENTER_JUSTIFY())
        pdf!.setLogo(0,0,185,68,logofile$)

    rem --- Company Address

        pdf!.setText(50,60,comp$(1,address))
        pdf!.setText(50,72,comp$(31,address))
        pdf!.setText(50,84,comp$(61,address))
        pdf!.setText(50,96,comp$(91,address))

    rem --- Bill To

        pdf!.drawBox(0, 126, 55, 96, light_gray!, light_gray!); rem gray box
        pdf!.setText(0, 132, 50, 0, "Customer", boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)

        pdf!.setText(60, 132, b$(1,address))
        pdf!.setText(60, 144, b$(31,address))
        pdf!.setText(60, 156, b$(61,address))
        pdf!.setText(60, 168, b$(91,address))    
        pdf!.setText(60, 180, b$(121,address))
        pdf!.setText(60, 192, b$(151,address))
        pdf!.setText(60, 204, b$(181,address))

    rem --- Ship to

        pdf!.drawBox(284, 126, 45, 96, light_gray!, light_gray!); rem gray box
        pdf!.drawBox(0, 126, 568, 96); rem outer frame
        pdf!.setText(284, 132, 40, 0, "Ship To", boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)

        pdf!.setText(334, 132, c$(1,address))
        pdf!.setText(334, 144, c$(31,address))
        pdf!.setText(334, 156, c$(61,address))
        pdf!.setText(334, 168, c$(91,address))    
        pdf!.setText(334, 180, c$(121,address))
        pdf!.setText(334, 192, c$(151,address))
        pdf!.setText(334, 204, c$(181,address))

    rem --- Info Box

        pdf!.drawBox(424, 24, 66, 60, light_gray!, light_gray!); rem gray box
        pdf!.drawHLine(424, 42, 144)
        pdf!.drawHLine(424, 62, 144)
        pdf!.drawVLine(490, 24,  60)
        pdf!.drawBox(424, 24, 144, 60); rem outer frame

        pdf!.setText(432, 26, 54, 30, "Page",      boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(432, 46, 54, 54, "Order #",      boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(432, 66, 54, 78, "Order Date", boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)

        pdf!.setText(496, 26, str(page))
        pdf!.setText(496, 46, ope01a.order_no$+" "+ope01a.backord_flag$)
        pdf!.setText(496, 66, func.formatDate(ope01a.order_date$))
               
    rem --- Ribbon info

        pdf!.drawBox(0, 234, 568, 14, light_gray!, light_gray!); rem gray bar    
        pdf!.drawBox(0, 234, 568, 48); rem outer frame

        pdf!.setText(2,     234+2, 132-72,  0, "Order Date", boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)
        pdf!.setText(66+2,  234+2, 204-180, 0, "Sls",        boldfont!, pdf!.LEFT_JUSTIFY(),   light_gray!)
        pdf!.setText(96,    234+2, 288-204, 0, "P/O Number", boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)

        pdf!.setText(288,   234+2, 378-288, 0, "Ship Via",   boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)
        pdf!.setText(378,   234+2, 438-378, 0, "Ship Date",  boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)
        pdf!.setText(438+2, 234+2, 502-438, 0, "Terms",      boldfont!, pdf!.LEFT_JUSTIFY(), light_gray!)
        pdf!.setText(502,   234+2, 568-500, 0, "PC",      boldfont!, pdf!.CENTER_JUSTIFY(), light_gray!)
        
        pdf!.setText(0,     234+16, 132-72,  0, func.formatDate(ope01a.order_date$),      pdf!.CENTER_JUSTIFY())
        pdf!.setText(66+2,  234+16, 204-172, 0, ope01a.slspsn_code$,                      pdf!.LEFT_JUSTIFY())

        pdf!.setText(66+2,  262+2,  288-100, 0, salecode_rec.code_desc$,                  pdf!.LEFT_JUSTIFY())
        pdf!.setText(100,   234+16, 288-100, 0, ope01a.customer_po_no$,                   pdf!.LEFT_JUSTIFY())
        pdf!.setText(288,   234+16, 378-288, 0, ope01a.ar_ship_via$,                      pdf!.CENTER_JUSTIFY())
        pdf!.setText(378,   234+16, 438-378, 0, func.formatDate(ope01a.shipmnt_date$),    pdf!.CENTER_JUSTIFY())
        pdf!.setText(438+2,   234+16, 568-438, 0, ope01a.terms_code$,                       pdf!.LEFT_JUSTIFY())
        pdf!.setText(438+2,   262+2,  568-438, 0, termcode_rec.code_desc$,                  pdf!.LEFT_JUSTIFY())
		pdf!.setText(502,   234+16, 568-500, 0, ope01a.price_code$,                       pdf!.CENTER_JUSTIFY())

        pdf!.drawVLine( 66, 234, 48)
        pdf!.drawVLine( 98, 234, 28)
        pdf!.drawHLine( 98, 262, 190)
        pdf!.drawVLine(288, 234, 48)
        pdf!.drawVLine(378, 234, 48)
        pdf!.drawVLine(438, 234, 48)
		pdf!.drawVLine(500, 234, 28)
		pdf!.drawHLine(500, 262, 68)

    rem --- Detail box and headings

        pdf!.drawBox(0,   294, 568, 14, light_gray!, light_gray!); rem gray box
        pdf!.drawBox(0,   294, 568, 420); rem outer frame

        pdf!.setText(2,     294+2, 45-2, 0, "Order",       boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(45,    294+2, 45-2, 0, "Ship",        boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(90,    294+2, 45-2, 0, "B/O",         boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(135+2, 294+2, "Item# / Description",  boldfont!,                       light_gray!)
        if mult_wh > 0 then pdf!.setText(375, 294+2, "WH", boldfont!,                       light_gray!)
        pdf!.setText(402,   294+2, "Location",             boldfont!,                       light_gray!)
		if print_prices$ = "Y" then pdf!.setText(450, 294+2, 65, 0, "Price", boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)
        pdf!.setText(510,   294+2, 50, 0, "Carton",        boldfont!, pdf!.RIGHT_JUSTIFY(), light_gray!)

        pdf!.drawVLine(45,  294, 420)
        pdf!.drawVLine(90,  294, 420)
        pdf!.drawVLine(135, 294, 420)
        if mult_wh > 0 then pdf!.drawVLine(370, 294, 420)
		pdf!.drawVLine(400, 294, 420)
        if print_prices$ = "Y" then pdf!.drawVLine(465, 294, 420)
		pdf!.drawVLine(520, 294, 420)

    rem --- Duplicate what was done on pagePrint!; if both pages have updated, we're done

        if pdf!.getPage() = pagePDF! then break
        pdf!.setPage(pagePDF!)

    wend    

    return	
	
line_detail: rem --- Item Detail

    if line+1 > maxline then gosub cont; rem Never split item ID and description

    pdf!.setPage(pagePrint!)
    lines_used = 2
    this_y% = fnline2y%(line)

    while 1

        if pos(opm02a.line_type$="MO")=0 then
            pdf!.setText(0,  this_y%, 45-2, 0, str(ope11a.qty_ordered), pdf!.RIGHT_JUSTIFY())
			if ope11a.commit_flag$="N"          
				pdf!.setText(45, this_y%, 45-2, 0, func.formatDate(ope11a.est_shp_date$), pdf!.RIGHT_JUSTIFY())
			else 
				pdf!.drawHLine(55, this_y%+12, 30)
				pdf!.drawHLine(100, this_y%+12, 30)
			endif
			pdf!.drawHLine(530, this_y%+12, 30)			
        endif

        if pos(opm02a.line_type$="MNO") then
            pdf!.setText(135+2, this_y%, ope11a.order_memo$)
        endif

        if pos(opm02a.line_type$=" SRDP") then 
            pdf!.setText(135+9, this_y%, ope11a.item_id$)
        endif

		if ope01a.invoice_type$<>"P"
			if pos(opm02a.line_type$=" SRDNP") and mult_wh > 0 then 
				pdf!.setText(375, this_y%, ope11a.warehouse_id$)
			endif
			        
			if opm02a.dropship$="Y"
				pdf!.setText(400+2, this_y%, "*Dropship")				
			else   
				if pos(opm02a.line_type$=" SRDP")<>0
					pdf!.setText(400+2, this_y%, ivm02a.location$)
				endif
			endif  
		endif

		if pos(opm02a.line_type$=" SRDNP") and print_prices$ = "Y" then 
            pdf!.setText(452, this_y%, 65, 0, str(ope11a.ext_price:m1$), pdf!.RIGHT_JUSTIFY())
        endif

        if opm02a.line_type$="O" and print_prices$ = "Y" then 
            pdf!.setText(452, this_y%, 65, 0, str(ope11a.ext_price:m1$), pdf!.RIGHT_JUSTIFY())
       endif

        if pos(opm02a.line_type$="SP") then
            pdf!.setText(135+2, fnline2y%(line+1), ivm01a.item_desc$)
            lines_used = 3
        endif

        if pdf!.getPage() = pagePDF! then break
        pdf!.setPage(pagePDF!)

    wend

    line = line + lines_used

    return

print_lotser_no: rem --- Serial #'s Here
	
    if line > maxline-1 then
        gosub cont
        if pos(opm02a.line_type$=" SP")<>0 then
            pdf!.setText(135+2, fnline2y%(line), ope11a.item_id$+" (Continued)")
            line = line + 1
        endif
    endif
	
    pdf!.setPage(pagePrint!)
    this_y% = fnline2y%(line)

	while 1

		if params_rec.lotser_flag$<>"L" then
			pdf!.setText(135+2, this_y%, "S/N: "+lotser_no$)			
			if lotser_no$ = "" then pdf!.drawHLine(155, this_y%+12, 100)
		else
			if ope21a.qty_shipped then 
				amount$ = str(ope21a.qty_shipped:m2$)
			else 
				amount$ = fill(m2,"_")
			endif

			pdf!.setText(135+2, this_y%, "Lot: "+ope21a.lotser_no$+"   Shipped: "+amount$)
		endif
	
	    if pdf!.getPage() = pagePDF! then break
        pdf!.setPage(pagePDF!)

	wend

    line = line + 1

    return	
	
print_footer: rem --- print total (if including prices), comments and carton/weight grid

	if print_prices$ = "Y"
	
		if line+1 > maxline then gosub cont

		pdf!.setPage(pagePrint!)
		this_y% = fnline2y%(line)
	
		while 1
	
			pdf!.setText(435, this_y%, "Total:")
			pdf!.setText(452, this_y%, 65, 0, str(total_sale:m1$), pdf!.RIGHT_JUSTIFY())
			
			if pdf!.getPage() = pagePDF! then break
			pdf!.setPage(pagePDF!)
	
		wend
		
		line = line + 1
		
	endif
	
	if ope01a.invoice_type$="S"
		bottom_margin = 570
	else
		bottom_margin = 640
	endif
	
		if fnline2y%(line) > bottom_margin then gosub cont; rem --- keep comments and carton/weight grid on same page (maybe don't have to be, but looks better)
	
	pdf!.setPage(pagePrint!)
	this_y% = fnline2y%(line)

	while 1
	
		pdf!.drawBox(2, bottom_margin, 564, 712-bottom_margin, light_gray!, light_gray!)  
	 
		gosub comments
		
		if ope01a.invoice_type$ <> "P" 		
			spacer$ = fill(20," ")
			carton_hd$="Carton"+spacer$(1,18)
			for x = 1 to 10
				carton_hd$=carton_hd$+str(x)+spacer$
			next x
			carton_hd$=carton_hd$+"Total"	
			
			pdf!.setText(15, 640, carton_hd$, smallfont!, light_gray!)
			pdf!.drawBox(50, 650, 500, 40, light_gray!, black!)
			for x = 1 to 10
				pdf!.drawVLine(50 + (x*45), 650, 40)
			next x
			pdf!.setText(15, 670, "Weight", smallfont!, light_gray!)
			if mult_wh then gosub warehouse_message
		endif
		
		if pdf!.getPage() = pagePDF! then break
		pdf!.setPage(pagePDF!)

	wend
	
	docPDF!.print()
    call pgmdir$+"adc_rptcontrol.aon", alias$, ope01a.customer_id$, "C", new_doc_id$, "pdf"
		
    return
	
cont: rem --- Continued

    pdf!.setPage(pagePrint!)

    while 1

        pdf!.setText(470, 690, 91, 0, "(Continued)", italicfont!, pdf!.RIGHT_JUSTIFY())

        if pdf!.getPage() = pagePDF! then break
        pdf!.setPage(pagePDF!)
    wend

    gosub report_heading

    return	

Compress_Description: rem --- Compress Description

    ivm01a.item_desc$ = pad( func.displayDesc(ivm01a.item_desc$), 79-h0-32)
    return

valid_lines: rem --- Look for valid lines here

    print$="NO"
    allprint$="YES" 
    read (orddet_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,knum="PRIMARY",dom=*next)

    while more
        extract record (orddet_dev, end=*break) ope11a$; rem Advisory Locking
        if pos(ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$ = ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$)<>1 then read(orddet_dev); break
        found_linecode=0
        find record (linecode_dev,key=firm_id$+ope11a.line_code$,dom=*next) opm02a$; found_linecode=1
        if !found_linecode then
            read(orddet_dev)
            continue
        endif

        if ope01a.invoice_type$<>"P"
            if ope11a.commit_flag$="N" then read(orddet_dev); continue
            if whse$<>"" and ope11a.warehouse_id$<>whse$
                if ope11a.pick_flag$<>"Y" then allprint$="NO"
                read(orddet_dev)
                continue 
            endif
        endif
        
        if ope01a.reprint_flag$<>"Y" and ope11a.pick_flag$="Y" then read(orddet_dev); continue; rem "Not a reprint and already printed for selected warehouse(s)
        if ope01a.reprint_flag$="Y" and ope11a.pick_flag$<>"Y" then read(orddet_dev); continue; rem "A reprint and not printed yet for selected warehouse(s)

        if after$="YES" then 
            ope11a.pick_flag$ = "Y"
            ope11a$ = field(ope11a$)
            write record (orddet_dev) ope11a$
        else
            read(orddet_dev)
        endif

        print$="YES"
    wend

    return

warehouse_message: rem --- Print message about which warehouses will fill this order

    if whse$<>"" and len(othwhse$)<2
        message$="All of this order to be filled from these warehouses."
        goto message_creation
    endif

    if pos(whse$=othwhse$)>0
        othwhse$=othwhse$(1,pos(whse$=othwhse$)-1)+othwhse$(pos(whse$=othwhse$)+2)
    endif

    if whse$="" or (whse$<>"" and othwhse$="")
        message$="All of this order to be filled from this warehouse.";goto message_creation
    endif

    message$="Portions of this order are to be filled from warehouse "

Message1: 

    message$=message$+othwhse$(1,2)+", "
    othwhse$=othwhse$(3)
    if len(othwhse$)>0 then goto Message1
    message$=message$(1,len(message$)-2)+"."

    if pos(","=message$)>0 
        message$=message$(1,pos(","=message$,-1)-1)+" and"+message$(pos(","=message$,-1)+1)
    endif

message_creation: 

    pdf!.setText(15, 695, message$, smallfont!, light_gray!)

    return

comments: rem --- comments

    message$=""
    gosub build_msg
	
    if status=0 then
        mline = 0

        if len(message$)>0
            for j=1 to len(message$) step 40
                if mline > 4 then break; rem can't handle more than 10 lines (printing 2 across)          
                pdf!.setText(50, mline*12+bottom_margin+2, message$(j,40), smallfont!, light_gray!)   

                if len(message$)>j+200
                    pdf!.setText(320+2, mline*12+bottom_margin+2, message$(j+200,40), smallfont!, light_gray!)
                endif  
			
                mline = mline + 1
            next j
        endif
    endif	
     
    return

is_still_printed: rem --- Verify if Pick Ticket is still printed

    read (orddet_dev, key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,knum="PRIMARY",dom=*next)

    while more
        flag=0
        read record (orddet_dev, end=*break) ope11a$
        if pos(ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$ = ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$)<>1 then break

        if ope11a.pick_flag$="Y" then 
            flag=1
            break
        endif
    wend

    if flag=0 then 
        ope01a.print_status$="N"
        ope01a.reprint_flag$=""
    endif

    return

build_msg: rem --- message$ is a string of message details, step 40

    status=11
    start_block = 1
    message$ = ""

    if start_block then
        find record (msghdr_dev, key=firm_id$+ope01a.message_code$, dom=*endif) opm04a$; rem mh0$
        status=0
        read (msgdet_dev, key=firm_id$+ope01a.message_code$, dom=*next)

        while 1
            read record (msgdet_dev, end=*break) opm14a$; rem md0$, md1$
            if opm14a.firm_id$<>firm_id$ or opm14a.message_code$<>ope01a.message_code$ then break
            message$ = message$ + pad(opm14a.message_text$, 40)
        wend
    endif

    return

open_tables: rem --- Open tables

    call sypdir$+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        status=912
        goto std_exit
    endif

    return

disp_message: rem --- Display a message

    call sypdir$+"bac_message.bbj",
:       msg_id$,
:       msg_tokens$[all],
:       msg_opt$,
:       table_chans$[all]

    return

invalid_printer:

	msg_id$="AD_NOPRINTER"
	gosub disp_message
	status=998
	goto std_exit

rem #endinclude disp_message.src

rem --- Functions

    def fnline2y%(tmp0)=(tmp0*12)+12+294+3

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    exit

rem #endinclude std_end.src

    end
