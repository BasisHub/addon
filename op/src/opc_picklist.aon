rem --- Picking List/Quotation
rem --- Program opc_picklist.aon v8.0.0 18Jul2007 (opr_pa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/18/2007 03:48:04)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- Send in a list of customer IDs and order numbers to print.

rem --- 1/2016 ------------------------
rem --- Replaced BBjForm-based OP Pick List Print with Jasper-based
rem --- BBjForm-based version of opc_picklist.aon > opc_picklist_BBjForm.aon

rem --- Batch mode option entry form runs opr_picklist.aon
rem --- On-demand option entry form w/in Order Entry or Credit Mgmt runs opr_pick_demand.aon
rem --- Both opr_picklist.aon and opr_pick_demand.aon call opc_picklist.aon 

rem --- There are three sprocs and three main .jaspers for this enhancement:
rem ---    - OPPICKLIST_HDR.prc / OPPickListHdr.jasper
rem ---    - OPPICKLIST_DET.prc / OPPickListDet.jasper
rem ---    - OPPICKLIST_DET_LOTSER.prc / OPPickListDet-LotSer.jasper

rem --- In addition, there is a Master jasper to contain everything in a batch run,
rem ---   a PickPrint jasper to contain pick lists for hard copy (or manual email, if desired),
rem ---   and a QuotePrint jasper to contain quotes for hard copy (i.e., if not going out via rpt ctl)

rem ----------------------------------------------------------------------------
rem --- Design IDEA is this: create Master doc containing everything in the batch run
rem --- Create both a QuotePrint doc and a PickPrint doc
rem --- For quotes, check to see if rpt control should be used
rem --- For quotes, save individual pdf's, and append to master and/or QuotePrint as indicated by rpt control
rem --- For pick lists, don't check rpt control and don't bother to save individual pdf's
rem --- For pick lists, append to master and the PickPrint doc
rem --- For On-demand, don't bother with Master, QuotePrint or PickPrint 

on_demand: rem --- Entry point for on-demand picklist (whether via Order Entry or the Credit Action/Credit Manager)   

    setesc std_error
    seterr std_error
 
    enter cust_id$, order_no$, option!, table_chans$[all], status
    
    custIds! = BBjAPI().makeVector()
    orderNos! = BBjAPI().makeVector()

    custIds!.addItem( cust_id$ )
    orderNos!.addItem( order_no$ )   
    
    type = 1	
    goto done_with_enter

batch_pick: rem --- Batch printing of orders

    setesc std_error
    seterr std_error

    enter custIds!, orderNos!, option!, printed_orders$, table_chans$[all], status
    
    type = 2

done_with_enter:

rem --- Types of calls

    on_demand  = 1
    batch_pick  = 2
    
rem --- Use statements and Declares

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

	declare BBJasperReport BBjReport!
	declare BBJasperViewerWindow BBjReportWindow! 
    
	params! = new java.util.HashMap()
	master_params! = new java.util.HashMap()
    pick_print_params! = new java.util.HashMap()
    quote_print_params! = new java.util.HashMap()
		
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 200; rem keep it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 100
	
    use ::ado_func.src::func
	use ::ado_util.src::util
    use ::ado_rptControl.src::ReportControl
    use ::sys/prog/bao_callpoint.bbj::Callpoint
    use ::sys/prog/bao_option.bbj::Option
    use ::sys/prog/bao_utilities.bbj::BarUtils
    
    declare Callpoint callpoint!
    declare Option option!
    declare BBjVector custIds!
    declare BBjVector orderNos!

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Set document Directory

    docdir$=""
    docdir$=stbl("+DOC_DIR_PDF",err=*next)	
    
rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$
    
rem --- Anything to print?

    if custIds!.size() = 0 or orderNos!.size() = 0 then
		status=998
        goto all_done
    endif

rem --- Derive/set path and filename for logo to go on form

	logo_file$=stbl("+CUST_IMAGES",err=*next)+stbl("+FORM_LOGO",err=*next)
    logo_filename$=""
    if logo_file$<>""
        logo_chn=unt
        open (logo_chn,err=*endif)logo_file$
        logo_filename$=fid(logo_chn)(9)
        close (logo_chn)
    endif

rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)   
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "OPPickListHdr"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"
    masterBaseName$ = "OPPickListMaster"
    master_filename$ = reportDir$ + masterBaseName$+".jasper"
    pickPrintBaseName$ = "OPPickListPickPrint"
    pick_print_filename$ = reportDir$ + pickPrintBaseName$+".jasper"
    quotePrintBaseName$ = "OPPickListQuotePrint"
    quote_print_filename$ = reportDir$ + quotePrintBaseName$+".jasper"    

    declare BBJasperReport report!
    
rem --- Open all files

    num_files = 18
    open_beg  = 1
    open_end  = num_files

    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]="IVC_WHSECODE",  open_opts$[1]="OTA"; rem ivm10c
    open_tables$[2]="IVS_PARAMS",    open_opts$[2]="OTA"
    open_tables$[3]="OPE_ORDHDR",    open_opts$[3]="OTA"; rem ope01
    open_tables$[4]="ARS_CREDIT",    open_opts$[4]="OTA"; rem ars01c
    open_tables$[5]="ARM_CUSTMAST",  open_opts$[5]="OTA"; rem arm01
    open_tables$[6]="ARM_CUSTSHIP",  open_opts$[6]="OTA"; rem arm03
    open_tables$[7]="OPE_ORDSHIP",   open_opts$[7]="OTA"; rem ope31
    open_tables$[8]="ARC_SALECODE",  open_opts$[8]="OTA"; rem arm10f
    open_tables$[9]="ARC_TERMCODE",  open_opts$[9]="OTA"; rem arm10a
    open_tables$[10]="OPE_ORDDET",   open_opts$[10]="OTA"; rem ope11
    open_tables$[11]="OPC_LINECODE", open_opts$[11]="OTA"; rem opm02
    open_tables$[12]="IVM_ITEMMAST", open_opts$[12]="OTA"; rem ivm01
    open_tables$[13]="IVM_ITEMWHSE", open_opts$[13]="OTA"; rem ivm02
    open_tables$[14]="OPE_ORDLSDET", open_opts$[14]="OTA"; rem ope21
    open_tables$[15]="OPE_PRNTLIST", open_opts$[15]="OTA"; rem ope04
    open_tables$[16]="OPC_MSG_HDR",  open_opts$[16]="OTA"; rem opm04
    open_tables$[17]="OPC_MSG_DET",  open_opts$[17]="OTA"; rem opm14
    open_tables$[18]="ARS_REPORT",   open_opts$[18]="OTA"; rem ars01b
   
    gosub open_tables

    whsecode_dev = num(open_chans$[1])
    params_dev   = num(open_chans$[2])
    ordhdr_dev   = num(open_chans$[3])
    credit_dev   = num(open_chans$[4])
    custmast_dev = num(open_chans$[5])
    custship_dev = num(open_chans$[6])
    ordship_dev  = num(open_chans$[7])
    salecode_dev = num(open_chans$[8])
    termcode_dev = num(open_chans$[9])
    orddet_dev   = num(open_chans$[10])
    linecode_dev = num(open_chans$[11])
    itemmast_dev = num(open_chans$[12])
    itemwhse_dev = num(open_chans$[13])
    ordlsdet_dev = num(open_chans$[14])
    prntlist_dev = num(open_chans$[15])
    msghdr_dev   = num(open_chans$[16])
    msgdet_dev   = num(open_chans$[17])
	ars_report_dev = num(open_chans$[18])
    
    dim whsecode_rec$:open_tpls$[1]
    dim params_rec$:open_tpls$[2]
    dim ope01a$:open_tpls$[3]
    dim credit_rec$:open_tpls$[4]
    dim arm01a$:open_tpls$[5]
	dim arm01a1$:open_tpls$[5]
    dim arm03a$:open_tpls$[6]
    dim ope31a$:open_tpls$[7]
    dim salecode_rec$:open_tpls$[8]
    dim termcode_rec$:open_tpls$[9]
    dim ope11a$:open_tpls$[10]
    dim opm02a$:open_tpls$[11]
    dim ivm01a$:open_tpls$[12]
    dim ivm02a$:open_tpls$[13]
    dim ope21a$:open_tpls$[14]
    dim ope04a$:open_tpls$[15]
    dim opm04a$:open_tpls$[16]
    dim opm14a$:open_tpls$[17]
	dim ars01b$:open_tpls$[18]

rem --- Get Parameters
    
    find record (params_dev, key=firm_id$+"IV00", dom=std_missing_params) params_rec$
    find record (credit_dev, key=firm_id$+"AR01") credit_rec$	
	find record (ars_report_dev, key=firm_id$+"AR02", err=std_missing_params) ars01b$

    remit$=ars01b.remit_addr_1$+ars01b.remit_addr_2$+ars01b.remit_city$+ars01b.remit_state$+ars01b.remit_zip$
    call pgmdir$+"adc_address.aon",remit$,24,3,9,30
    remit$=ars01b.remit_name$+remit$

	comp_addrLine_len = 30
    comp$=ars01b.addr_line_1$+ars01b.addr_line_2$+ars01b.city$+ars01b.state_code$+ars01b.zip_code$
    call pgmdir$+"adc_address.aon",comp$,24,3,9,30
	comp$=ars01b.name$+comp$
	
rem --- Initialize Data

    more=1
    precision num(params_rec.precision$)
	
    call pgmdir$+"adc_getmask.aon","","AR","I","",cust_mask$,0,cust_size
    call pgmdir$+"adc_getmask.aon","","AR","A","",amt_mask$,0,amt_mask_size
    call pgmdir$+"adc_getmask.aon","","AR","U","",qty_mask$,0,qty_mask
    call pgmdir$+"adc_getmask.aon","","IV","P","",price_mask$,0,price_mask 
    
    ext_mask$ = amt_mask$

    call pgmdir$+"adc_sizemask.aon",price_mask$,price_mask,11,11
    call pgmdir$+"adc_sizemask.aon",ext_mask$,ext_mask,12,12

	rem --- Make the 'Patterns' used to mask in iReports from Addon masks
	rem       examples:
	rem          ##0.00;##0.00-   Includes negatives with minus at the end
	rem          ##0.00;-##0.00   Includes negatives with minus at the front
	rem          ##0.00;##0.00-   Positives only

	qty_mask_pattern$=fngetPattern$(qty_mask$)
	amt_mask_pattern$=fngetPattern$(amt_mask$)
	ext_mask_pattern$=fngetPattern$(ext_mask$)
	
    func.setLen1( int(num(params_rec.desc_len_01$)) )
    func.setLen2( int(num(params_rec.desc_len_02$)) )
    func.setLen3( int(num(params_rec.desc_len_03$)) )
	
    nothing_printed = 1
    tot_picks = 0
    tot_quotes = 0
    
    if type = on_demand then
        alias$ = option!.getAlias()
        rptctl_alias$="OPR_ODERPICKLST";rem --- use actual alias$ (i.e., OPE_ORDHDR) when putting in doc archive so you know it was an on-demand or batch, but always use OPR_PICKLIST for report control so you don't need two report control records for each customer to handle on-demand vs. batch.        
		restart$ = ""
		restart_customer$ = ""
        print_prices$=option!.getOptionData("PRINT_PRICES")
        whse$=""
        print_what$=""
        send_via_rpt_ctl$ = option!.getOptionData("SEND_VIA_RPT_CTL")
		master_document=0
        pick_print_document=0
        quote_print_document=0
    else
        alias$ = option!.getAlias()
        rptctl_alias$ = alias$
		restart$ = option!.getOptionData("RESTART")
		restart_customer$ = option!.getOptionData("CUSTOMER_ID")       
		print_prices$=option!.getOptionData("PRINT_PRICE")   
        whse$=option!.getOptionData("WAREHOUSE_ID")
        print_what$=option!.getOptionData("PRINT_LIST");rem quotes, pick lists, or both
		master_document=1
        pick_print_document=1
        quote_print_document=1
    endif

    emailFax! = BBjAPI().makeVector()

rem --- See if this document is set up in Addon Report Control
rem --- Will only be using rpt ctl for quotes, not for pick lists

    reportControl!=new ReportControl()
    reportControl!.setDocExtension("pdf")
    rpt_ctl$=reportControl!.getReportControl(rptctl_alias$)
    rpt_ctl$=iff(rpt_ctl$="","NO","YES")
    rpt_id$=iff(rpt_ctl$="YES",reportControl!.getReportID(),"")   
    	
rem --- Is this company multi-warehouse?
    
    mult_wh$="N"
    start_block=1
    read (whsecode_dev, key=firm_id$+"C", dom=*next)
	read (whsecode_dev)

    if start_block then
        read record (whsecode_dev, end=*endif) whsecode_rec$
        if whsecode_rec.firm_id$ = firm_id$ and whsecode_rec.record_id_c$ = "C" then mult_wh$="Y"
    endif

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",0,0,1,0,status
    if status = 999 then goto std_exit

rem --- Main Read

    for next_item = 0 to custIds!.size() - 1
    
        cust_id$ = str( custIds!.getItem(next_item) )
        order_no$ = str( orderNos!.getItem(next_item) )
        
        dim ope01a$:fattr(ope01a$)

		if type <> on_demand
            if pos(cust_id$+order_no$=printed_orders$,len(cust_id$)+len(order_no$))=0 then continue
        endif

        extract record (ordhdr_dev, key=firm_id$+"E"+"  "+cust_id$+order_no$+ope01a.ar_inv_no$,knum="AO_STATUS", dom=std_exit) ope01a$; rem Advisory Locking
		
rem --- Misc setup and qualification
	
        if ope01a.print_status$="Y" and type = batch_pick then 
            gosub is_still_printed
        endif

        if ope01a.reprint_flag$="Y" then
            reprint$ = ope01a.print_status$
            ope01a.print_status$ = "N"
        endif

        pick_or_quote$=ope01a.invoice_type$;rem for param output
        if ope01a.print_status$="Y" and type = batch_pick then continue
        if ope01a.invoice_type$="V" then continue
        if credit_rec.sys_install$="Y" and ope01a.credit_flag$="C" and credit_rec.pick_hold$="N" then continue

        after$="NO"
		if type = batch_pick then
			gosub valid_lines
			if print$="NO" then continue
		endif

        if type = batch_pick then
		
			if ope01a.reprint_flag$="Y"
				ope01a.print_status$=reprint$ 
			else 
				ope01a.print_status$="B"
			endif

            ope01a.mod_user$=sysinfo.user_id$
            ope01a.mod_date$=date(0:"%Yd%Mz%Dz")
            ope01a.mod_time$=date(0:"%Hz%mz")
			ope01a$=field(ope01a$)
			write record (ordhdr_dev) ope01a$     
        endif

        nothing_printed = 0
        add_to_pick_print_report = 0
        add_to_quote_print_report = 0

    rem --- Init Document Archive info

        rep_date$=date(0:stbl("+DATE_MASK"))
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")

        new_doc_id$=""
        new_doc_name$=""
        doc_name$="OPPickQuote_Cust"+ope01a.customer_id$+"_"+alias$
        doc_keywords$="Order: "+ope01a.order_no$

        rd_source_alias$=alias$
        rd_source_type$="O"
        rd_doc_source$="E"
        rd_doc_ext$="PDF"
        rd_source_id$="C"
        rd_source_ref$=ope01a.customer_id$
        rd_doc_keywords$=doc_keywords$


    rem --- Get Next Document Number and update Document Audit for individual pdf
    rem --- Only add individual quotes to doc warehouse, not individual pick lists,
    rem ---   because quotes may be subject to report control (email/faxing) to individual customers

            call stbl("+DIR_SYP")+"bas_sequences.bbj","DOC_NO",new_doc_id$,table_chans$[all] 
            new_doc_name$=new_doc_id$+"_"+doc_name$+".pdf"

        if ope01a.invoice_type$="P"            
            
            call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,rep_date_stamp$,rep_time_stamp$,rd_doc_source$,rd_doc_ext$,docdir$,
:           rd_source_type$,rd_source_alias$,rd_source_id$,rd_source_ref$,table_chans$[all],"",new_doc_name$,doc_name$,doc_keywords$
        endif

    rem --- Get Next Document Number and update Document Audit with JAS entry for master doc, if first time thru

        if master_document
            rd_doc_ext$="JAS"
            rd_archive_action$="DOC_ID-NOREPRINT"
            rd_doc_id$=""
            rd_source_id$="C"
            rd_source_ref$=""
            rd_doc_keywords$=""
            gosub document_whse
            rd_archive_action$=""
            master_doc_id$=rd_doc_id$
            master_doc_name$=master_doc_id$+"_"+masterBaseName$+".pdf"
        endif

    rem --- Get Next Document Number and update Document Audit with JAS entry for pick list print doc, if first time thru

        if pick_print_document
            rd_doc_ext$="JAS"
            rd_archive_action$="DOC_ID-NOREPRINT"
            rd_doc_id$=""
            rd_source_id$="C"
            rd_source_ref$=""
            rd_doc_keywords$=""
            gosub document_whse
            rd_archive_action$=""
            pick_print_doc_id$=rd_doc_id$
            pick_print_doc_name$=pick_print_doc_id$+"_"+pickPrintBaseName$+".pdf"
        endif

    rem --- Get Next Document Number and update Document Audit with JAS entry for quote print doc, if first time thru

        if quote_print_document
            rd_doc_ext$="JAS"
            rd_archive_action$="DOC_ID-NOREPRINT"
            rd_doc_id$=""
            rd_source_id$="C"
            rd_source_ref$=""
            rd_doc_keywords$=""
            gosub document_whse
            rd_archive_action$=""
            quote_print_doc_id$=rd_doc_id$
            quote_print_doc_name$=quote_print_doc_id$+"_"+quotePrintBaseName$+".pdf"
        endif

    rem --- For quotes, use ReportControl object to see if customer wants print, email, or fax

        if ope01a.invoice_type$="P"
            add_to_quote_print_report=1
            add_to_pick_print_report=0
            if rpt_ctl$="YES"     
                found=reportControl!.getRecipientInfo(rpt_id$,cust_id$,"")
                if found         
                    if reportControl!.getPrintYN()<>"Y" then add_to_quote_print_report=0
                    if reportControl!.getEmailYN()="Y" or reportControl!.getFaxYN()="Y"
                        emailFax!.add(rpt_id$)
                        emailFax!.add(cust_id$)
                        emailFax!.add(new_doc_id$)
                    endif
                endif
            endif
        else
            add_to_pick_print_report=1
            add_to_quote_print_report=0
        endif

    rem --- Report parameters  (Master/Print only processed once, followed by actual invoices)
		if master_document
			master_params!.put("RESTART",restart$)
			master_params!.put("RESTART_CUSTOMER",restart_customer$)
			master_params!.put("PRINT_PRICES",print_prices$)
            master_params!.put("SELECTED_WHSE",whse$)
            master_params!.put("PICKLIST_TYPE",print_what$)
		endif

		if pick_print_document
			pick_print_params!.put("RESTART",restart$)
			pick_print_params!.put("RESTART_CUSTOMER",restart_customer$)
			pick_print_params!.put("PRINT_PRICES",print_prices$)
            pick_print_params!.put("SELECTED_WHSE",whse$)
            pick_print_params!.put("PICKLIST_TYPE",print_what$)            
		endif

		if quote_print_document
			quote_print_params!.put("RESTART",restart$)
			quote_print_params!.put("RESTART_CUSTOMER",restart_customer$)
			quote_print_params!.put("PRINT_PRICES",print_prices$)
            quote_print_params!.put("SELECTED_WHSE",whse$)
            quote_print_params!.put("PICKLIST_TYPE",print_what$)            
		endif        

		params!.put("FIRM_ID",ope01a.firm_id$)
		params!.put("AR_TYPE",ope01a.ar_type$)
		params!.put("CUSTOMER_ID",ope01a.customer_id$)
		params!.put("ORDER_NO",ope01a.order_no$)
        params!.put("AR_INV_NO",ope01a.ar_inv_no$)
		params!.put("QTY_MASK",qty_mask$)
		params!.put("QTY_MASK_PATTERN",qty_mask_pattern$)
		params!.put("PRICE_MASK",price_mask$)
		params!.put("AMT_MASK",amt_mask$)
		params!.put("AMT_MASK_PATTERN",amt_mask_pattern$)        
		params!.put("EXT_MASK",ext_mask$)
		params!.put("EXT_MASK_PATTERN",ext_mask_pattern$)  
		params!.put("CUST_MASK",cust_mask$)
		params!.put("CUST_SIZE",str(cust_size))
		params!.put("BARISTA_WD",dir(""))
		params!.put("LOGO_FILE",logo_filename$)
		params!.put("IVS_LOTSER_FLAG",params_rec.lotser_flag$)
        params!.put("PICK_OR_QUOTE",pick_or_quote$)
        params!.put("PRINT_PRICES",print_prices$)
        params!.put("REPRINT",reprint$)
        params!.put("SELECTED_WHSE",whse$)
        params!.put("MULT_WH",mult_wh$)
		
		params!.put("AR_ADDRESS1",comp$((comp_addrLine_len*0)+1,comp_addrLine_len))
		params!.put("AR_ADDRESS2",comp$((comp_addrLine_len*1)+1,comp_addrLine_len))
		params!.put("AR_ADDRESS3",comp$((comp_addrLine_len*2)+1,comp_addrLine_len))
		params!.put("AR_ADDRESS4",comp$((comp_addrLine_len*3)+1,comp_addrLine_len))

        call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(ars01b.phone_no$,2),"",phone_mask$
        tmpphone$=cvs(ars01b.phone_no$,2)
        tmpphone$=str(tmpphone$:phone_mask$,err=*next)
		params!.put("AR_PHONE_NO",tmpphone$)

		params!.put("REMIT1",remit$((remit_addrLine_len*0)+1,remit_addrLine_len))
		params!.put("REMIT2",remit$((remit_addrLine_len*1)+1,remit_addrLine_len))
		params!.put("REMIT3",remit$((remit_addrLine_len*2)+1,remit_addrLine_len))
		params!.put("REMIT4",remit$((remit_addrLine_len*3)+1,remit_addrLine_len))

    rem --- invoke jasper
       
        if master_document
            master_report! = BarUtils.getBBJasperReport(master_filename$)
            master_report!.putParams(master_params!)
            master_report!.setLocale(locale$)
            master_report!.fill()
            master_document=0
        endif

        if pick_print_document
            pick_print_report! = BarUtils.getBBJasperReport(pick_print_filename$)
            pick_print_report!.putParams(pick_print_params!)
            pick_print_report!.setLocale(locale$)
            pick_print_report!.fill()
            pick_print_document=0
        endif

        if quote_print_document
            quote_print_report! = BarUtils.getBBJasperReport(quote_print_filename$)
            quote_print_report!.putParams(quote_print_params!)
            quote_print_report!.setLocale(locale$)
            quote_print_report!.fill()
            quote_print_document=0
        endif        

        report! = BarUtils.getBBJasperReport(filename$)
        report!.putParams(params!)

        locale$ = stbl("!LOCALE")
        locale$ = stbl("+USER_LOCALE",err=*next)
        report!.setLocale(locale$)
     
        report!.fill()
        if ope01a.invoice_type$="P"
            report!.exportToPDF(BBjAPI().FALSE, docdir$+new_doc_name$)
        endif

        if type = batch_pick
			master_report!.appendReport(report!)	
            if add_to_pick_print_report
                pick_print_report!.appendReport(report!)
                tot_picks=tot_picks+1
            endif
            
            if add_to_quote_print_report
                quote_print_report!.appendReport(report!)            
                tot_quotes=tot_quotes+1
            endif

			report!.destroy()
		endif
    rem --- Loop back for next Customer/Order

    next next_item

    if nothing_printed then 
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto all_done
    endif

rem --- bring up jasper viewers (master doc and print doc for Batch Invoices; single doc for On-Demand)

    declare BBJasperViewerWindow masterViewerWindow!
    declare BBJasperViewerWindow pickPrintViewerWindow!
    declare BBJasperViewerWindow quotePrintViewerWindow!    
    declare BBJasperViewerWindow demandViewerWindow!
    declare BBjTopLevelWindow bbjWindowMaster!
    declare BBjTopLevelWindow bbjWindowPickPrint!
    declare BBjTopLevelWindow bbjWindowQuotePrint!    
    declare BBjTopLevelWindow bbjWindowDemand!
    
    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path

	if type = batch_pick
    
    rem --- master jasper - contains ALL pick lists and/or quotes
        repTitle$=masterBaseName$
        rd_doc_name$=master_doc_name$

        rd_doc_id$=master_doc_id$

        gosub OnMasterSaveMenuButton; rem --- force save to doc archive

        masterViewerWindow! = new BBJasperViewerWindow(master_report!,5,5,screen_width,screen_height,repTitle$,$00000093$)
        masterViewerControl! = masterViewerWindow!.getViewerControl()
        masterViewerControl!.setGoogleDefaultDocument(repTitle$)
        masterViewerControl!.setDefaultSaveFolder(rd_doc_path$)
        masterViewerControl!.setDefaultSaveFile(repTitle$)
        masterViewerControl!.setFitWidth()

        rem --- set callbacks for when user presses save or email buttons in jasper viewer
        rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
        masterSaveMenuButton! = masterViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
        masterSaveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnMasterSaveMenuButton")
        masterEmailToolButton! = masterViewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
        masterEmailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnMasterEmailToolButton")

        masterViewerWindow!.setReleaseOnClose(0)
        masterViewerWindow!.show(0)

        bbjWindowMaster!= masterViewerWindow!.getViewerWindow()
        bbjWindowMaster!.setCallback(bbjWindowMaster!.ON_CLOSE,"close_win")
       
    rem --- pick print jasper - contains only pick lists for hard copy and/or manual email (i.e., not via rpt ctl)
    rem --- if there are only picks (no quotes), or only quotes (no picks), then skip pick print copy
        if tot_picks and tot_quotes
            repTitle$=pickPrintBaseName$
            rd_doc_name$=pick_print_doc_name$
            rd_doc_id$=pick_print_doc_id$

            gosub OnPickPrintSaveMenuButton; rem --- force save to doc archive

            pickPrintViewerWindow! = new BBJasperViewerWindow(pick_print_report!,50,50,screen_width,screen_height,repTitle$,$00000093$)
            pickPrintViewerControl! = pickPrintViewerWindow!.getViewerControl()
            pickPrintViewerControl!.setGoogleDefaultDocument(repTitle$)
            pickPrintViewerControl!.setDefaultSaveFolder(rd_doc_path$)
            pickPrintViewerControl!.setDefaultSaveFile(repTitle$)
            pickPrintViewerControl!.setFitWidth()

            pickPrintSaveMenuButton! = pickPrintViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
            pickPrintSaveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnPickPrintSaveMenuButton")
            pickPrintEmailToolButton! = pickPrintViewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
            pickPrintEmailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnPickPrintEmailToolButton")

            pickPrintViewerWindow!.setReleaseOnClose(0)
            pickPrintViewerWindow!.show(0)

            bbjWindowPickPrint!= pickPrintViewerWindow!.getViewerWindow()
            bbjWindowPickPrint!.setCallback(bbjWindowPickPrint!.ON_CLOSE,"close_pick_print_win")
        else
            pick_print_win_closed=1;rem no pick print window; set the closed flag so master close routine won't think it's still up
        endif
        
    rem --- quote print jasper - contains only quotes for hard copy
    rem --- if no quotes, skip the quote print copy
        if tot_quotes
            repTitle$=quotePrintBaseName$
            rd_doc_name$=quote_print_doc_name$
            rd_doc_id$=quote_print_doc_id$

            gosub OnQuotePrintSaveMenuButton; rem --- force save to doc archive

            quotePrintViewerWindow! = new BBJasperViewerWindow(quote_print_report!,80,80,screen_width,screen_height,repTitle$,$00000093$)
            quotePrintViewerControl! = quotePrintViewerWindow!.getViewerControl()
            quotePrintViewerControl!.setGoogleDefaultDocument(repTitle$)
            quotePrintViewerControl!.setDefaultSaveFolder(rd_doc_path$)
            quotePrintViewerControl!.setDefaultSaveFile(repTitle$)
            quotePrintViewerControl!.setFitWidth()

            quotePrintSaveMenuButton! = quotePrintViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
            quotePrintSaveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnQuotePrintSaveMenuButton")
            quotePrintEmailToolButton! = quotePrintViewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
            quotePrintEmailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnQuotePrintEmailToolButton")

            quotePrintViewerWindow!.setReleaseOnClose(0)
            quotePrintViewerWindow!.show(0)

            bbjWindowQuotePrint!= quotePrintViewerWindow!.getViewerWindow()
            bbjWindowQuotePrint!.setCallback(bbjWindowQuotePrint!.ON_CLOSE,"close_quote_print_win")
        else
            quote_print_win_closed=1;rem no quote print window; set the closed flag so master close routine won't think it's still up
        endif
    else

        repTitle$=doc_name$
        rd_doc_name$=new_doc_name$
	    rd_doc_id$=new_doc_id$
	        
        gosub OnDemandSaveMenuButton; rem --- force save to doc archive
	        
	    demandViewerWindow! = new BBJasperViewerWindow(report!,5,5,screen_width,screen_height,repTitle$,$00080093$)
        demandViewerControl! = demandViewerWindow!.getViewerControl()
        demandViewerControl!.setGoogleDefaultDocument(repTitle$)
        demandViewerControl!.setDefaultSaveFolder(rd_doc_path$)
        demandViewerControl!.setDefaultSaveFile(repTitle$)
        demandViewerControl!.setFitWidth()

        demandSaveMenuButton! = demandViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
        demandSaveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnDemandMasterSaveMenuButton")
        demandEmailToolButton! = demandViewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
        demandEmailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnDemandEmailToolButton")

        demandViewerWindow!.setReleaseOnClose(0)
        demandViewerWindow!.show(0)
        
        bbjWindowDemand!= demandViewerWindow!.getViewerWindow()
        bbjWindowDemand!.setCallback(bbjWindowDemand!.ON_CLOSE,"close_win")

	endif

rem --- Event Control

    process_events,err=*same

    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)
    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_tmp_dir$=stbl("+DOC_DIR_PDF",err=*endif)
        rd_temp_wd$=dsk("")+dir("")
        if pos(":"=rd_tmp_dir$) setdrive rd_tmp_dir$(1,pos(":"=rd_tmp_dir$)-1),err=*next
        chdir rd_tmp_dir$,err=*next
        rd_doc_path$=dsk("")+dir("")
        if pos(":"=rd_temp_wd$) setdrive rd_temp_wd$(1,pos(":"=rd_temp_wd$)-1)
        chdir rd_temp_wd$
    endif

    return

OnMasterSaveMenuButton:

rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""

        rd_doc_ext$="PDF"
        rep_title$=repTitle$
        rd_source_id$="C"
        rd_source_ref$=""
        rd_doc_keywords$=""
       

        master_report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)

        gosub document_whse
    endif
    return     

OnMasterEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnMasterSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,table_chans$[all]
    endif
    return

OnPickPrintSaveMenuButton:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_ext$="PDF"


        rep_title$=repTitle$
        rd_source_id$="C"
        rd_source_ref$=""
        rd_doc_keywords$=""
        
        pick_print_report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)

        gosub document_whse
    endif
    return    

OnPickPrintEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnPrintSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,table_chans$[all]
    endif
    return

OnQuotePrintSaveMenuButton:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_ext$="PDF"


        rep_title$=repTitle$
        rd_source_id$="C"
        rd_source_ref$=""
        rd_doc_keywords$=""
        
        quote_print_report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)

        gosub document_whse
    endif
    return    

OnQuotePrintEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnQuoteSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,table_chans$[all]
    endif
    return    

OnDemandSaveMenuButton:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_ext$="PDF"
        rep_title$=repTitle$
        rd_source_id$="C"
        rd_source_ref$=ope01a.customer_id$
        rd_doc_keywords$=doc_keywords$

        report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        
        gosub document_whse
    endif
    return    

OnDemandEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnDemandSaveMenuButton


    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,table_chans$[all]
    endif
    return

close_win:rem --- Master or On-demand viewer closed - do post-processing for batch vs single

    if type=batch_pick
        ok_to_close=1
        if !pick_print_win_closed or !quote_print_win_closed
            msg_id$ = "CONF_CLOSE_PRINT"
            gosub disp_message
            if msg_opt$<>"Y" then ok_to_close=0 
        endif
        
        if !ok_to_close then return
    endif

rem --- Updates and final processing

    msg_id$="AON_UPDT_PICK_QUERY"
    dim msg_tokens$[1]
    msg_tokens$[1]=sysinfo.task_desc$
    gosub disp_message

    if msg_opt$<>"Y" then goto all_done
    
    if type=batch_pick
        call pgmdir$+"adc_progress.aon","N","","","","",0,prntlist_dev,1,meter_num,status
        if status = 999 then goto all_done
		
rem --- Position file for update    
    
		read (prntlist_dev,key=firm_id$+"O",dom=*next)		

rem --- Clear Print Flags

		while more

			read record (prntlist_dev,end=*break)ope04a$
			if ope04a.firm_id$+ope04a.ordinv_flag$<>firm_id$+"O" break
			if pos(ope04a.customer_id$+ope04a.order_no$=printed_orders$,len(ope04a.customer_id$)+len(ope04a.order_no$))=0 continue
			call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
			if status = 999 then exitto std_exit
			start_block = 1

			if start_block then
				if pos(ope04a.customer_id$+ope04a.order_no$=printed_orders$,len(ope04a.customer_id$)+len(ope04a.order_no$))=0 continue
                dim ope01a$:fattr(ope01a$)
				extract record (ordhdr_dev, key=ope04a.firm_id$+"E"+ope04a.ar_type$+ope04a.customer_id$+ope04a.order_no$+ope01a.ar_inv_no$,knum="AO_STATUS", dom=*endif) ope01a$
				if (print_what$="P" and ope01a.invoice_type$<>"S") or (print_what$="Q" and ope01a.invoice_type$<>"P") then continue

				if ope01a.reprint_flag$="Y" then
					ope01a.reprint_flag$=""
					ope01a.lock_status$="N" 
				else
					if pos(ope01a.print_status$="B")=0 then continue
					if pos(ope01a.lock_status$="YS123")<>0 then continue
					after$="YES"
					gosub valid_lines
					ope01a.lock_status$="N"
					if print$="YES" and allprint$="YES" then ope01a.print_status$="Y"
				endif

				if ope01a.print_status$<>"Y" then ope01a.print_status$="N"
                ope01a.mod_user$=sysinfo.user_id$
                ope01a.mod_date$=date(0:"%Yd%Mz%Dz")
                ope01a.mod_time$=date(0:"%Hz%mz")
				ope01a$=field(ope01a$)
				write record (ordhdr_dev) ope01a$
			endif
			
			if ope01a.print_status$="Y" then
				remove (prntlist_dev,key=ope04a.firm_id$+ope04a.ordinv_flag$+ope04a.ar_type$+ope04a.customer_id$+ope04a.order_no$,dom=*next)
			endif  
			
		wend

        if emailFax!.size()
            for email_fax=0 to emailFax!.size()-1 step 3
                reportControl!.addToDocQueue(emailFax!.get(email_fax),emailFax!.get(email_fax+1),"",emailFax!.get(email_fax+2))    
            next email_fax
        endif
        
    else 

		after$="YES"
		ope01a.print_status$="Y"
        ope01a.lock_status$="N"

        ope01a.mod_user$=sysinfo.user_id$
        ope01a.mod_date$=date(0:"%Yd%Mz%Dz")
        ope01a.mod_time$=date(0:"%Hz%mz")
		ope01a$=field(ope01a$)
		write record (ordhdr_dev) ope01a$

        if ope01a.print_status$="Y"
            remove (prntlist_dev,key=firm_id$+ope01a.ordinv_flag$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=*next)
        endif 
        
        if emailFax!.size() and send_via_rpt_ctl$="Y"
            for email_fax=0 to emailFax!.size()-1 step 3
                reportControl!.addToDocQueue(emailFax!.get(email_fax),emailFax!.get(email_fax+1),"",emailFax!.get(email_fax+2))    
            next email_fax
        endif
        
	endif
		
all_done:

    read(ordhdr_dev,knum="AO_STATUS",end=*next); rem release extract, and reset knum in case on-demand printing
    read (orddet_dev,knum="AO_STAT_CUST_ORD",end=*next)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

    reportControl!.destroy(err=*next)    
    masterViewerWindow!.destroy(err=*next)
    pickPrintViewerWindow!.destroy(err=*next)
    quotePrintViewerWindow!.destroy(err=*next)
    demandViewerWindow!.destroy(err=*next)

    if tcb(13) then exit
    
    release
	
close_pick_print_win: rem --- close the Pick Print Copy window

    pickPrintViewerWindow!.destroy(err=*next)
    pick_print_win_closed=1
    
    return

close_quote_print_win: rem --- close the Pick Print Copy window

    quotePrintViewerWindow!.destroy(err=*next)
    quote_print_win_closed=1
    
    return    

valid_lines: rem --- Look for valid lines here

    print$="NO"
    allprint$="YES" 
    orddet_trip$=ope01a.firm_id$+"E"+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$+ope01a.ar_inv_no$
    read (orddet_dev,key=orddet_trip$,knum="AO_STAT_CUST_ORD",dom=*next)
    while more
        orddet_key$=key(orddet_dev,end=*break)
        if pos(orddet_trip$=orddet_key$)<>1 then read(orddet_dev); break
        extract record (orddet_dev) ope11a$; rem Advisory Locking
        found_linecode=0
        find record (linecode_dev,key=firm_id$+ope11a.line_code$,dom=*next) opm02a$; found_linecode=1
        if !found_linecode then
            read(orddet_dev)
            continue
        endif

        if ope01a.invoice_type$<>"P"
            if ope11a.commit_flag$="N" then read(orddet_dev); continue
            if whse$<>"" and ope11a.warehouse_id$<>whse$
                if ope11a.pick_flag$<>"Y" then allprint$="NO"
                read(orddet_dev)
                continue 
            endif
        endif
        
        if ope01a.reprint_flag$<>"Y" and ope11a.pick_flag$="Y" then read(orddet_dev); continue; rem "Not a reprint and already printed for selected warehouse(s)
        if ope01a.reprint_flag$="Y" and ope11a.pick_flag$<>"Y" then read(orddet_dev); continue; rem "A reprint and not printed yet for selected warehouse(s)

        if after$="YES" then 
            ope11a.pick_flag$ = "Y"
            ope11a.mod_user$=sysinfo.user_id$
            ope11a.mod_date$=date(0:"%Yd%Mz%Dz")
            ope11a.mod_time$=date(0:"%Hz%mz")
            ope11a$ = field(ope11a$)
            write record (orddet_dev) ope11a$
        else
            read(orddet_dev)
        endif

        print$="YES"
    wend

    return

warehouse_message: rem --- Print message about which warehouses will fill this order

    if whse$="" and len(othwhse$)>2
        message$="All of this order to be filled from these warehouses."
        goto message_creation
    endif

    if pos(whse$=othwhse$)>0
        othwhse$=othwhse$(1,pos(whse$=othwhse$)-1)+othwhse$(pos(whse$=othwhse$)+2)
    endif

    if whse$="" or (whse$<>"" and othwhse$="")
        message$="All of this order to be filled from this warehouse.";goto message_creation
    endif

    message$="Portions of this order are to be filled from warehouse "

Message1: 

    message$=message$+othwhse$(1,2)+", "
    othwhse$=othwhse$(3)
    if len(othwhse$)>0 then goto Message1
    message$=message$(1,len(message$)-2)+"."

    if pos(","=message$)>0 
        message$=message$(1,pos(","=message$,-1)-1)+" and"+message$(pos(","=message$,-1)+1)
    endif

message_creation: 

    pdf!.setText(15, 695, message$, smallfont!, light_gray!)

    return

comments: rem --- comments

    message$=""
    gosub build_msg
	
    if status=0 then
        mline = 0

        if len(message$)>0
            for j=1 to len(message$) step 40
                if mline > 4 then break; rem can't handle more than 10 lines (printing 2 across)          
                pdf!.setText(50, mline*12+bottom_margin+2, message$(j,40), smallfont!, light_gray!)   

                if len(message$)>j+200
                    pdf!.setText(320+2, mline*12+bottom_margin+2, message$(j+200,40), smallfont!, light_gray!)
                endif  
			
                mline = mline + 1
            next j
        endif
    endif	
     
    return

is_still_printed: rem --- Verify if Pick Ticket is still printed

    orddet_trip$=ope01a.firm_id$+"E"+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$+ope01a.ar_inv_no$
    read (orddet_dev,key=orddet_trip$,knum="AO_STAT_CUST_ORD",dom=*next)
    while more
        flag=0
        orddet_key$=key(orddet_dev,end=*break)
        if pos(orddet_trip$=orddet_key$)<>1 then read(orddet_dev); break
        read record (orddet_dev) ope11a$
        
        if ope11a.pick_flag$="Y" then 
            flag=1
            break
        endif
    wend

    if flag=0 then 
        ope01a.print_status$="N"
        ope01a.reprint_flag$=""
    endif

    return

build_msg: rem --- message$ is a string of message details, step 40

    status=11
    start_block = 1
    message$ = ""

    if start_block then
        find record (msghdr_dev, key=firm_id$+ope01a.message_code$, dom=*endif) opm04a$; rem mh0$
        status=0
        read (msgdet_dev, key=firm_id$+ope01a.message_code$, dom=*next)

        while 1
            read record (msgdet_dev, end=*break) opm14a$; rem md0$, md1$
            if opm14a.firm_id$<>firm_id$ or opm14a.message_code$<>ope01a.message_code$ then break
            message$ = message$ + pad(opm14a.message_text$, 40)
        wend
    endif

    return

open_tables: rem --- Open tables

    call sypdir$+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        status=912
        goto std_exit
    endif

    return

disp_message: rem --- Display a message

    call sypdir$+"bac_message.bbj",
:       msg_id$,
:       msg_tokens$[all],
:       msg_opt$,
:       table_chans$[all]

    return

invalid_printer:

	msg_id$="AD_NOPRINTER"
	gosub disp_message
	status=998
	goto std_exit

rem #endinclude disp_message.src

rem --- Functions

    def fnline2y%(tmp0)=(tmp0*12)+12+294+3

rem --- fngetPattern$: Build iReports 'Pattern' from Addon Mask
	def fngetPattern$(q$)
		q1$=q$
		if len(q$)>0
			if pos("-"=q$)
				q1=pos("-"=q$)
				if q1=len(q$)
					q1$=q$(1,len(q$)-1)+";"+q$; rem Has negatives with minus at the end =>> ##0.00;##0.00-
				else
					q1$=q$(2,len(q$)-1)+";"+q$; rem Has negatives with minus at the front =>> ##0.00;-##0.00
				endif
			endif
			if pos("CR"=q$)=len(q$)-1
				q1$=q$(1,pos("CR"=q$)-1)+";"+q$
			endif
			if q$(1,1)="(" and q$(len(q$),1)=")"
				q1$=q$(2,len(q$)-2)+";"+q$
			endif
		endif
		return q1$
	fnend

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    exit

rem #endinclude std_end.src

    end
