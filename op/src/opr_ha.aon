rem --- Sales Register (Lead Overlay)
rem --- Program opr_ha v8.0.0 29Jan2008 (opr_ha)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/29/2008 02:19:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
       
rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=27,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
        files$[2]="arc_cashcode",ids$[2]="ARC_CASHCODE"
        files$[3]="arc_distcode",ids$[3]="ARC_DISTCODE"
        files$[4]="ars_params",ids$[4]="ARS_PARAMS"
        files$[5]="glm-01",ids$[5]="GLM_ACCT"
        files$[6]="gls_params",ids$[6]="GLS_PARAMS"
        files$[7]="glw-11",ids$[7]="GLW_DAILYDETAIL"
        files$[8]="ivm-01",ids$[8]="IVM_ITEMMAST"
        files$[9]="ivm-02",ids$[9]="IVM_ITEMWHSE"
        files$[10]="ivm-04",ids$[10]="IVM_ITEMTIER"
        files$[11]="ivs_params",ids$[11]="IVS_PARAMS"
        files$[12]="ivw-04",ids$[12]="IVW_LFDET"
        files$[13]="ivw-05",ids$[13]="IVW_LFCOST"
        files$[14]="ope-01",ids$[14]="OPE_ORDHDR"
        files$[15]="ope-04",ids$[15]="OPE_PRNTLIST"
        files$[16]="ope-11",ids$[16]="OPE_ORDDET"
        files$[17]="ope-21",ids$[17]="OPE_ORDLSDET"
        files$[18]="ope-41",ids$[18]="OPE_INVCASH"
        files$[19]="opm-02",ids$[19]="OPC_LINECODE"
        files$[20]="opm-06",ids$[20]="OPC_TAXCODE"
        files$[21]="ops_mtdsales",ids$[21]="OPS_MTDSALES"
        files$[22]="opw-01",ids$[22]="OPW_INVREG"
        files$[23]="opw-11",ids$[23]="OPW_TERRSUMM"
        files$[24]="opw-21",ids$[24]="OPW_LINESUMM"
        files$[25]="opw-31",ids$[25]="OPW_SALESUMM"
        files$[26]="opw-41",ids$[26]="OPW_INVCASH"
        files$[27]="sas-01a",ids$[27]="SAS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        arm01_dev=channels[1]
        arm10_dev=channels[2]
        arm10d_dev=channels[3]
        ars01a_dev=channels[4]
        glm01_dev=channels[5]
        gls01a_dev=channels[6]
        glw11_dev=channels[7]
        ivm01_dev=channels[8]
        ivm02_dev=channels[9]
        ivm04_dev=channels[10]
        ivs01a_dev=channels[11]
        ivw04_dev=channels[12]
        ivw05_dev=channels[13]
        ope01_dev=channels[14]
        ope04_dev=channels[15]
        ope11_dev=channels[16]
        ope21_dev=channels[17]
        ope41_dev=channels[18]
        opm02_dev=channels[19]
        opm06_dev=channels[20]
        ops10_dev=channels[21]
        opw01_dev=channels[22]
        opw11_dev=channels[23]
        opw21_dev=channels[24]
        opw31_dev=channels[25]
        opw41_dev=channels[26]
        sas01a_dev=channels[27]

rem --- Dimension string templates

        dim arm01a$:templates$[1],arm10a$:templates$[2],arm10d$:templates$[3],
:       ars01a$:templates$[4],glm01a$:templates$[5],gls01a$:templates$[6],
:       glw11a$:templates$[7],ivm01a$:templates$[8],ivm02a$:templates$[9],
:       ivm04a$:templates$[10],ivs01a$:templates$[11],ivw04a$:templates$[12],
:       ivw05a$:templates$[13],ope01a$:templates$[14],ope04a$:templates$[15],
:       ope11a$:templates$[16],ope21a$:templates$[17],ope41a$:templates$[18],
:       opm02a$:templates$[19],opm06a$:templates$[20],ops10a$:templates$[21],
:       opw01a$:templates$[22],opw11a$:templates$[23],opw21a$:templates$[24],
:       opw31a$:templates$[25],opw41a$:templates$[26],sas01a$:templates$[27]

rem --- Assign form input values to local variables

        rem value_01$=Option!.getOptionData("form_value_01")
        seq$ = option!.getOptionData("Sequence")

rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        sas01a_key$=firm_id$+"SA00"
        find record (sas01a_dev,key=sas01a_key$,err=std_missing_params) sas01a$

rem --- Open Files
rem --- escape let cvf150=unt; open (cvf150)"CVF150
rem --- escape let jcmdis=unt; open (jcmdis)"JCMDIS
rem --- escape let cvf030=unt; open (cvf030)"CVF030
rem --- escape let mbs_02=unt; open (mbs_02)"MBS-02


rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="AR",n3$=sysinfo.task_desc$,r9$="N",ih$="N",ls$="N",lf$="N",br$="N",gl$="N",jn$="N",sa$="N",po$="N"
        find record (ars01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
        if ars01a.dist_by_item$="Y" then let r9$="Y"
        if ars01a.job_nos$="Y" then let jn$="Y"
        if ars01a.br_interface$="Y" then let br$="Y"
        if ars01a.inv_hist_flg$="Y" then let ih$="Y"
        find record (gls01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$

        g[0]=num(gls01a.totals_per$)
        g[1]=num(gls01a.current_per$)
        g[2]=num(gls01a.current_year$)
        g[3]=num(gls01a.acct_length$)
        g[4]=num(gls01a.max_acct_len$)

        g[2]=fnyy_year(gls01a.current_year$)
        find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
        if pos(ivs01a.lotser_flag$="LS") then let ls$="Y"
        if pos(ivs01a.lifofifo$="LF") then let lf$="Y"
        i[0]=num(ivs01a.item_id_len$)
        i[2]=num(ivs01a.precision$)
        i[3]=num(ivs01a.current_per$)
        i[4]=fnyy_year(ivs01a.current_year$)
        i[5]=num(ivs01a.ls_no_len$)
        p[0]=num(ars01a.customer_size$)
        p[1]=num(ars01a.max_customer_len$)
        p[2]=num(ars01a.current_per$)
        p[3]=fnyy_year(ars01a.current_year$)

        call pgmdir$+"adc_perioddates.aon",sys01_dev,p[2],p[3],x$,g9$,status
        call pgmdir$+"adc_perioddates.aon",sys01_dev,i[3],i[4],x$,p9$,status
        call pgmdir$+"glc_ctlcreate.aon",err=Err_Line,pgm(-2),n2$,glw11$,gl$,status

        if status then goto std_exit
        call pgmdir$+"adc_application.aon","PO",info$[all]
Err_Line:
        po$=info$[20]
        call pgmdir$+"adc_application.aon","SA",info$[all]
        sa$=info$[20]

        if sa$="Y" then
            find record (sys01_dev,key=firm_id$+"SA00",dom=std_missing_params) sas01a$
        endif

        find record (ops10_dev,key=firm_id$+"S",dom=Init_Data) ops10s$

rem --- escape find record (mbs_02,key=firm_id$) mbs_02$

Init_Data: rem --- Initialize Data

        l9=59
        l=l9+1,headings=3,width=132,page=0
        dim headings$[headings],lf_channels[10]
        headings$[0]=n1$
        headings$[1]=n3$,clock$="",when$=sysinfo.system_date$
        dim t[6],u[6]
        seq$="C"
        call pgmdir$+"adc_sizemask.aon",ars01a.amount_mask$,m1,11,11
        m0=len(ars01a.customer_output$)
        errors=0,glstatus=0

rem --- run overlay

        run pgmdir$+"opr_hb.aon"


rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release

rem --- #endinclude std_end.src

        end
