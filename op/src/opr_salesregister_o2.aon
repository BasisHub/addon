rem --- Sales Register (Summary Overlay)
rem --- Program opr_hc v8.0.0 01Feb2008 (opr_hc)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/01/2008 10:08:32)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    next_overlay$=""; rem --- clear next_var and outvect! so bas_process_end doesn't loop...i.e., don't run anything after this

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)
	rd_alias_id$="<OP_SLSREGRECAP>";rem dummy id to allow save for column size settings

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Initializations

	call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",ar_m1$,0,ar_m1

    more=1
    l9=55
    l=l9+1
	headings$[1]=n3$+" "+Translate!.getTranslation("AON_SUMMARY")
    headings$[2]=""
	headings$[3]=""

    dim columns$[1,10]
    columns = 2

    columns$[0,0]="           ",        columns$[0,1]="C",columns$[0,2]="30"
    columns$[1,0]="      ",             columns$[1,1]="N",columns$[1,2]=str(ar_m1)

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Territory Summary

    r1$="A"
    r2$="H"
    h$="Territory"
    work_dev=opw11_dev
    rem dim key_templ$:opw11a_key_tpl$
    dim rec$:fattr(opw11a$)
    gosub process_summary_section

rem --- Transaction Summary

    r1$="B"
    r2$="E"
    h$="Transaction"
    work_dev=opw21_dev
    rem dim key_templ$:opw21a_key_tpl$
    dim rec$:fattr(opw21a$)
    xwk = fnblank(2)
    gosub process_summary_section

    OutVect!.addItem("          Tax")
    OutVect!.addItem(str(u[2]:ar_m1$))

    OutVect!.addItem("          Freight")
    OutVect!.addItem(str(u[3]:ar_m1$))

    OutVect!.addItem("          Discount")
    OutVect!.addItem(str(u[5]:ar_m1$))

rem --- Salesperson Summary

    r1$="C"
    r2$="F"
    h$="Salesperson"
    work_dev=opw31_dev
    rem dim key_templ$:opw31a_key_tpl$
    dim rec$:fattr(opw31a$)
    xwk = fnblank(2)
    gosub process_summary_section

rem --- All done

    if noninv<>0 or inv<>0 then
        if inv<>1 then
            msg_id$="OP_MISSING_LOTSER_NO"
            gosub disp_message
            goto std_exit
        else
            msg_id$="OP_NON_INVENT_SERLOT"
            gosub disp_message
            if msg_opt$<>"Y" then goto std_exit
        endif
    endif
    
    if ars01a.cash_sale$<>"N" and br$="Y" then
        if deposit_errors then
            msg_id$="AR_NO_UPDT_CSHRCPT"
            dim msg_tokens$[1]
            msg_tokens$[1]=Translate!.getTranslation("DDM_TABLES-OPR_SALEREGISTER-DD_ATTR_WINT")
            gosub disp_message
            goto std_exit
        endif
    endif

rem --- Close Files Not Needed For Update Or GL Summary

    close (opw11_dev,err=*next)
    close (opw01_dev,err=*next)
    close (opw21_dev,err=*next)
    close (opw41_dev,err=*next)
    close (opw31_dev,err=*next)

rem --- Run next overlay

    update$="opu_updatesales.aon"
    overlay$=update$
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

    if gl$="Y" then

        dim glcontrol$:(stbl("+GLCONTROL_TPL"))
        start_block = 1
        
        if start_block then
            glcontrol$=stbl("+GLCONTROL",err=*endif)
            glcontrol.prt_gl_sum$ = ars01a.prt_gl_det$; rem --- Print GL Sales Detail Report
            junk$=stbl("+GLCONTROL",glcontrol$)
        endif

        overlay$=pgmdir$+"glr_recap.aon"
        out_action$="PRT-PDF"
        next_overlay$=overlay$
        goto std_exit

    endif

    update$="opu_updatesales.aon"
    run update$,err=std_exit
    goto std_exit

rem --- Subroutines
    
sub_heading: rem --- Subheading

    OutVect!.addItem(h$+" Summary")
    OutVect!.addItem("Amount")

    l=l+3
    
    return

process_summary_section: rem --- Process Summary Section

    call pgmdir$+"adc_progress.aon","N","","","","",0,work_dev,1,meter_num,status
    if status = 999 then exitto std_exit
    gosub sub_heading
    
    read (work_dev,key=firm_id$,dom=*next)

rem --- Read next record

    while more
    
        read record (work_dev, end=*break) rec$; rem X0$,X0
        if firm_id$<>rec$.firm_id$ then break
        
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if status=999 then exitto std_exit

    rem --- Print record

        code$ = ""
        desc$ = "Unknown "+h$
        
        if r2$="E" then 
            code$ = rec.line_code$
            find record (opm02_dev, key=firm_id$+code$, dom=*endif) opm02a$
            if r1$="B" and opm02a.line_type$="M" then continue
            desc$ = opm02a.code_desc$
        else
            if r2$="F" then 
                code$ = rec.slspsn_code$
                find record (arm10f_dev, key=firm_id$+r2$+code$, dom=*endif) arm10f$
                desc$ = arm10f.code_desc$
            else
                if r2$="H" then 
                    code$ = rec.territory$
                    find record (arm10h_dev, key=firm_id$+r2$+code$, dom=*endif) arm10h$
                    desc$ = arm10h.code_desc$
                endif
            endif
        endif

        OutVect!.addItem(code$+" "+desc$)
        OutVect!.addItem(str(rec.invoice_amt:ar_m1$))

        l=l+1
        
    wend
    
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    if status = 999 then exitto std_exit
    
    return
    
rem #include disp_message.src

disp_message: rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return
	
rem #endinclude disp_message.src

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

    end
