rem --- Sales Commission Report (Report Overlay)
rem --- Program opr_mb v8.0.0 17Jul2007 (opr_mb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/17/2007 09:51:22)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    precision 4

rem --- Initializations

    dim a[10],c[1],d[1],t[9],u[9],w[1],x[1],o[11],headings$[8]
    x0$="First Date"
    x1$="Last Date"
    h5$=""
    if beg_date$<>"" then x0$=fndate$(beg_date$)
    if end_date$<>"" then x1$=fndate$(end_date$)
    h4$="Paid Invoices"
    when$=sysinfo.system_date$
    clock$=""
    if option$="B" then h4$="Booked Invoices"
    if begin_salesperson$<>"" then h6$=begin_salesperson$ else h6$="First"
    if end_salesperson$<>"" then h7$=end_salesperson$ else h7$="Last"
    if commission$="S" then h8$="Commission Based On Gross Sales"
    if commission$="P" then h8$="Commission Based On Gross Profit"
    t0$=""
    t0=0
    t1=0
    l9=55
    l=l9+1
    h=0
    h0=132
    x0$="Beginning Date: "+x0$
    x1$="Ending Date    : "+x1$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,11,13
    more=1
    recs=0
    total_recs=0
    times=1

    if option$="B" then
        dim columns$[9,10]
        columns = 9

        columns$[0,0]="Inv.No",             columns$[0,1]="C",columns$[0,2]="8"
        columns$[1,0]="Customer",           columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]="Date",               columns$[2,1]="C",columns$[2,2]="8"
        columns$[3,0]="Gross^Sales",        columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m1$,columns$[3,10]="T"
        columns$[4,0]="Other",              columns$[4,1]="N",columns$[4,2]="8",columns$[4,3]=m1$,columns$[4,10]="T"
        columns$[5,0]="Cost",               columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"
        columns$[6,0]="Gross^Profit",       columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
        columns$[7,0]="G.P %",              columns$[7,1]="N",columns$[7,2]="8",columns$[7,3]=m4$,columns$[7,10]="T"
        columns$[8,0]="Comm %",             columns$[8,1]="N",columns$[8,2]="8",columns$[8,3]=m4$,columns$[8,10]="T"
        columns$[9,0]="Commission",         columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"
    else
        dim columns$[10,10]
        columns = 10

        columns$[0,0]="Inv.No",             columns$[0,1]="C",columns$[0,2]="8"
        columns$[1,0]="Customer",           columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]="Date",               columns$[2,1]="C",columns$[2,2]="8"
        columns$[3,0]="Gross^Sales",        columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m1$,columns$[3,10]="T"
        columns$[4,0]="Other",              columns$[4,1]="N",columns$[4,2]="8",columns$[4,3]=m1$,columns$[4,10]="T"
        columns$[5,0]="Cost",               columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"
        columns$[6,0]="Gross^Profit",       columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
        columns$[7,0]="G.P %",              columns$[7,1]="N",columns$[7,2]="8",columns$[7,3]=m4$,columns$[7,10]="T"
        columns$[8,0]="Comm %",             columns$[8,1]="N",columns$[8,2]="8",columns$[8,3]=m4$,columns$[8,10]="T"
        columns$[9,0]="Commission",         columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"
        columns$[10,0]="Comm. Due",         columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m1$,columns$[10,10]="T"
    endif

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Headings

    dim h1$(h0),h2$(h0),j$(5*m1+2*m4,"-")
    headings$[0]=n1$
    headings$[1]=n3$
    headings$[2]=h4$
    headings$[3]=h8$
    headings$[4]="Beginning Salesperson: "+h6$+"     "+x0$
    headings$[5]="Ending Salesperson    : "+h7$+"     "+x1$
    headings$[6]="[HEADER]"

rem --- Print positions

    o[11]=h0-m1
    h1$="Commission"
    h2$="   Due    "
    h1=o[11]+m1-11
    if option$<>"P" then o[11]=h0-1,h1=o[11],h1$="",h2$=""
    o[1]=8
    o[2]=o[1]+m0+1
    o[10]=o[11]-m1
    o[9]=o[10]-m4
    o[8]=o[9]-m4
    o[7]=o[8]-m1
    o[6]=o[7]-m1
    o[5]=o[6]-m1
    o[4]=o[5]-m1
    o[3]=o[4]-9
    h2=h1
    width=min(30,o[3]-o[2]-1)

rem --- retrieve template for OPT_SALESCOM record key

    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPT_SALESCOM","PRIMARY",opt71a_key_tpl$,table_chans$[all],status$
    dim opt71a_key$:opt71a_key_tpl$

rem --- retrieve template for ART_INVDET record key

    call stbl("+DIR_SYP")+"bac_key_template.bbj","ART_INVDET","PRIMARY",art11a_key_tpl$,table_chans$[all],status$
    dim art11a_key$:art11a_key_tpl$

rem --- Background

    call pgmdir$+"adc_progress.aon","CN","OPT_SALESCOM","","","",0,opt71_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem --- Position File Pointer

    read (opt71_dev,key=firm_id$,dom=*next)

    while more

        opt71a_key$=key(opt71_dev,end=*break)
        read record (opt71_dev,end=Control_Breaks) opt71a$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

        if pos(firm_id$=opt71a.firm_id$)<>1 then break 
        if option$="B" and  beg_date$<>"" and opt71a.INVOICE_DATE$<beg_date$ then continue
        if option$="B" and  end_date$<>"" and opt71a.INVOICE_DATE$>end_date$ then continue
        if begin_salesperson$<>"" and opt71a.SLSPSN_CODE$<begin_salesperson$ then continue
        if end_salesperson$<>"" and opt71a.SLSPSN_CODE$>end_salesperson$ then continue
        if opt71a.invoice_type$="V" then  continue

    Control_Breaks: rem --- Control Breaks

        if opt71a.SLSPSN_CODE$<>t0$ then gosub Salesperson_Break

        if option$<>"B" then

        rem --- Calculate commission due

            gosub Search_Invoice
            if paid=0 then continue
            a[9]=0
            if commission$="S" and  sold<>0 then a[9]=(-paid)/sold*opt71a.TOTAL_SALES*opt71a.COMM_PERCENT/100
            if commission$="P" and  sold<>0 then a[9]=(-paid)/sold*(opt71a.TOTAL_SALES-opt71a.TOTAL_COST)*opt71a.COMM_PERCENT/100

        endif

        arm01a.CUSTOMER_NAME$="(Not On File)"
        find record (arm01_dev,key=firm_id$+opt71a.CUSTOMER_ID$,dom=*next) arm01a$

    rem --- Print

        x0=0
        a[8]=opt71a.TOTAL_SALES*opt71a.COMM_PERCENT/100
        due$=""
        if opt71a.TOTAL_SALES<>0 then x0=100*(opt71a.TOTAL_SALES-opt71a.TOTAL_COST)/opt71a.TOTAL_SALES
        if commission$="P" then a[8]=(opt71a.TOTAL_SALES-opt71a.TOTAL_COST)*opt71a.COMM_PERCENT/100
        if option$="P" then due$=str(a[9])

        OutVect!.addItem(opt71a.AR_INV_NO$)
        OutVect!.addItem(fnmask$(opt71a.CUSTOMER_ID$,m0$)+" "+arm01a.customer_name$)
        OutVect!.addItem(fndate$(opt71a.INVOICE_DATE$))
        OutVect!.addItem(str(opt71a.TOTAL_SALES))
        OutVect!.addItem(str(opt71a.COMM_AMT))
        OutVect!.addItem(str(opt71a.TOTAL_COST))
        OutVect!.addItem(str(opt71a.TOTAL_SALES-opt71a.TOTAL_COST))
        OutVect!.addItem(str(x0))
        OutVect!.addItem(str(opt71a.COMM_PERCENT))
        OutVect!.addItem(str(a[8]))

        if option$="P" then
            OutVect!.addItem(due$)
        endif

        l=l+1
        l1=l1+1
        t1=t1+1
        recs=recs+1

    rem --- Accumulate totals

        precision 2
        t[5]=t[5]+opt71a.COMM_AMT
        u[5]=u[5]+opt71a.COMM_AMT
        t[6]=t[6]+opt71a.TOTAL_SALES
        u[6]=u[6]+opt71a.TOTAL_SALES
        t[7]=t[7]+opt71a.TOTAL_COST
        u[7]=u[7]+opt71a.TOTAL_COST
        t[8]=t[8]+a[8]
        u[8]=u[8]+a[8]
        t[9]=t[9]+a[9]
        u[9]=u[9]+a[9]
        precision 4

    rem --- Next record

    wend

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    t9$="E"
    gosub Salesperson_Break
    subheading$=""
    x0=0
    t0$=""
    x$="Report Totals"
    h5$="Report Summary"
    xwk = fnblank(1)
    OutVect!.addItem(str(t0)+" Total Salespersons")

    if option$="P" then
        xwk = fnblank(9)
    else
        xwk = fnblank(8)
    endif

    if u[6]<>0 then x0=100*(u[6]-u[7])/u[6]
    if option$="P" then due$=str(u[9])
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    xwk = fnblank(1)
    OutVect!.addItem(x$)
    xwk = fnblank(1)
    OutVect!.addItem(str(u[6]))
    OutVect!.addItem(str(u[5]))
    OutVect!.addItem(str(u[7]))
    OutVect!.addItem(str(u[6]-u[7]))
    OutVect!.addItem(str(x0))
    xwk = fnblank(1)
    OutVect!.addItem(str(u[8]))

    if option$="P" then
        OutVect!.addItem(due$)
    endif

rem --- Averages

    if t0=0 then goto std_exit

    for x=0 to 9
        u[x]=u[x]/t0
    next x

    x0=0
    x$="Report Averages"
    if u[6]<>0 then x0=100*(u[6]-u[7])/u[6]
    if option$="P" then due$=str(u[9])
    u[3]=0
    if commission$="S" and u[6]<>0 then u[3]=100*u[8]/u[6]
    if commission$="P" and u[6]-u[7]<>0 then u[3]=100*u[8]/(u[6]-u[7])
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    xwk = fnblank(1)
    OutVect!.addItem(x$)
    xwk = fnblank(1)
    OutVect!.addItem(str(u[6]))
    OutVect!.addItem(str(u[5]))
    OutVect!.addItem(str(u[7]))
    OutVect!.addItem(str(u[6]-u[7]))
    OutVect!.addItem(str(x0))
    OutVect!.addItem(str(u[3]))
    OutVect!.addItem(str(u[8]))

    if option$="P" then
        OutVect!.addItem(due$)
    endif

    goto std_exit

Salesperson_Break: rem --- Salesperson Break

    if t0$<>"" then
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")
        OutVect!.addItem("")

        if option$="P" then
            OutVect!.addItem("")
        endif

        x0=0
        x$="Total For "+h5$
        if len(x$)>o[4] then x$=x$(1,o[4]-1)
        if t[6]<>0 then x0=100*(t[6]-t[7])/t[6]
        if option$="P" then due$=str(t[9])
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk = fnblank(1)
        OutVect!.addItem(x$)
        xwk = fnblank(1)
        OutVect!.addItem(str(t[6]))
        OutVect!.addItem(str(t[5]))
        OutVect!.addItem(str(t[7]))
        OutVect!.addItem(str(t[6]-t[7]))
        OutVect!.addItem(str(x0))
        xwk = fnblank(1)
        OutVect!.addItem(str(t[8]))

        if option$="P" then
            OutVect!.addItem(str(due$))
        endif

        if option$="P" then
            xwk = fnblank(11)
            xwk = fnblank(11)
        else
            xwk = fnblank(10)
            xwk = fnblank(10)
        endif

        t0=t0+1
    endif

Find_Record: 

    if t9$<>"" then return
    dim t[9]
    t0$=opt71a_key.SLSPSN_CODE$
    arm10f.SLSPSN_CODE$="(Not On File)"
    l=l9+1
    l1=0
    find record (arm10_dev,key=firm_id$+"F"+t0$,dom=*next) arm10f$
    h5$="Salesperson"+t0$+"   "+cvs(arm10f.CODE_DESC$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(h5$)

    return

Search_Invoice: rem --- Search Invoice Transactions

    paid=0,sold=0
    read record (art01_dev,key=opt71a.FIRM_ID$+opt71a.AR_TYPE$+opt71a.CUSTOMER_ID$+opt71a.AR_INV_NO$+"00",dom=Invoice_Balance) art01a$
    sold=art01a.invoice_amt
    read record (art11_dev,key=opt71a.FIRM_ID$+opt71a.AR_TYPE$+opt71a.CUSTOMER_ID$+opt71a.AR_INV_NO$,dom=*next) art11a$

    while more
        art11a_key$=key(art11_dev,end=*break)
        if art11a_key.FIRM_ID$+art11a_key.AR_TYPE$+art11a_key.CUSTOMER_ID$+art11a_key.AR_INV_NO$<>opt71a.FIRM_ID$+opt71a.AR_TYPE$+opt71a.CUSTOMER_ID$+opt71a.AR_INV_NO$ then break
        read record (art11_dev,key=art11a_key$) art11a$
        if beg_date$<>"" and art11a.TRANS_DATE$<beg_date$ then continue
        if end_date$<>"" and art11a.TRANS_DATE$>end_date$ then continue

        if art11a.trans_type$="C" then 
            paid=paid+art11a.TRANS_AMT+art11a.ADJDISC_AMT 
        else 
            sold=sold+art11a.TRANS_AMT+art11a.ADJDISC_AMT
        endif
    wend

    return

Invoice_Balance: rem --- Zero Balance Cash Invoice ?

    read record (opt41_dev,key=opt71a.FIRM_ID$+opt71a.AR_TYPE$+CUSTOMER_ID$+opt71a.AR_INV_NO$,dom=*return) opt41a$
    if beg_date$<>"" and opt41a.INVOICE_DATE$<beg_date$ then return
    if end_date$<>"" and opt41a.INVOICE_DATE$>end_date$ then return
    sold=-opt41a.invoice_amt,paid=opt41a.tendered_amt
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call stbl("+DIR_PGM")+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end

