rem --- Sales Register (Lead Overlay)
rem --- Program opr_ha v8.0.0 29Jan2008 (opr_ha)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/29/2008 02:19:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

       
rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)


rem --- Retrieve the program path

         pgmdir$=stbl("+DIR_PGm",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=30,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
        files$[2]="arc_cashcode",ids$[2]="ARC_CASHCODE"
        files$[3]="arc_distcode",ids$[3]="ARC_DISTCODE"
        files$[4]="ars_params",ids$[4]="ARS_PARAMS"
        files$[5]="glm-01",ids$[5]="GLM_ACCT"
        files$[6]="gls_params",ids$[6]="GLS_PARAMS"
        files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
        files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
        files$[9]="ivm-04",ids$[9]="IVM_ITEMTIER"
        files$[10]="ivs_params",ids$[10]="IVS_PARAMS"
        files$[11]="ivw-04",ids$[11]="IVW_LFDET"
        files$[12]="ivw-05",ids$[12]="IVW_LFCOST"
        files$[13]="ope-01",ids$[13]="OPE_ORDHDR"
rem        files$[14]="ope-04",ids$[14]="OPE_PRNTLIST"
        files$[15]="ope-11",ids$[15]="OPE_ORDDET"
        files$[16]="ope-21",ids$[16]="OPE_ORDLSDET"
        files$[17]="ope-41",ids$[17]="OPE_INVCASH"
        files$[18]="opm-02",ids$[18]="OPC_LINECODE"
        files$[19]="opm-06",ids$[19]="OPC_TAXCODE"
        files$[20]="ops_mtdsales",ids$[20]="OPS_MTDSALES"
rem        files$[21]="opw-01",ids$[21]="OPW_INVREG"
        files$[22]="opw-11",ids$[22]="OPW_TERRSUMM"
        files$[23]="opw-21",ids$[23]="OPW_LINESUMM"
        files$[24]="opw-31",ids$[24]="OPW_SALESUMM"
        files$[25]="opw-41",ids$[25]="OPW_INVCASH"
        files$[26]="sas_params",ids$[26]="SAS_PARAMS"
        files$[27]="glm-03",ids$[27]="GLC_JOURNALCODE"
        files$[28]="arc_salecode",ids$[28]="ARC_SALECODE"
        files$[29]="arc_terrcode",ids$[29]="ARC_TERRCODE"

    let options$[22]="CL",options$[23]="CL",options$[24]="CL",options$[25]="CL"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status

        if status goto std_exit
        arm01_dev=channels[1]
        arm10_dev=channels[2]
        arm10d_dev=channels[3]
        ars01a_dev=channels[4]
        glm01_dev=channels[5]
        gls01a_dev=channels[6]
        ivm01_dev=channels[7]
        ivm02_dev=channels[8]
        ivm04_dev=channels[9]
        ivs01a_dev=channels[10]
        ivw04_dev=channels[11]
        ivw05_dev=channels[12]
        ope01_dev=channels[13]
        ope11_dev=channels[15]
        ope21_dev=channels[16]
        ope41_dev=channels[17]
        opm02_dev=channels[18]
        opm06_dev=channels[19]
        ops10_dev=channels[20]
        opw11_dev=channels[22]
        opw21_dev=channels[23]
        opw31_dev=channels[24]
        opw41_dev=channels[25]
        sas01a_dev=channels[26]
        glm03_dev=channels[27]
        arm10f_dev=channels[28]
        arm10h_dev=channels[29]
rem --- Dimension string templates

rem glw11a$:templates$[7],

    dim arm01a$:templates$[1],arm10a$:templates$[2],arm10d$:templates$[3],
:       ars01a$:templates$[4],glm01a$:templates$[5],gls01a$:templates$[6],
:       ivm01a$:templates$[7],ivm02a$:templates$[8],
:       ivm04a$:templates$[9],ivs01a$:templates$[10],ivw04a$:templates$[11],
:       ivw05a$:templates$[12],ope01a$:templates$[13],
:       ope11a$:templates$[15],ope21a$:templates$[16],ope41a$:templates$[17],
:       opm02a$:templates$[18],opm06a$:templates$[19],ops10a$:templates$[20],
:       opw11a$:templates$[22],opw21a$:templates$[23],
:       opw31a$:templates$[24],opw41a$:templates$[25],sas01a$:templates$[26],
:       glm03a$:templates$[27],arm10f$:templates$[28],arm10h$:templates$[29]

rem --- Assign form input values to local variables
    
        seq$ = option!.getOptionData("REPORT_TYPE")

rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        sas01a_key$=firm_id$+"SA00"
        find record (sas01a_dev,key=sas01a_key$,err=std_missing_params) sas01a$

rem --- Parameters

        dim g[4],i[6],p[3],v[15]
        n1$=sysinfo.firm_name$
        n2$="AR"
        n3$=sysinfo.task_desc$
        r9$="N",ih$="N",ls$="N"
        lf$="N",br$="N",gl$="N"
        jn$="N",sa$="N",po$="N"
        find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    
        if ars01a.dist_by_item$="Y" then let r9$="Y"
        if ars01a.job_nos$="Y" then let jn$="Y"
        if ars01a.br_interface$="Y" then let br$="Y"
        if ars01a.inv_hist_flg$="Y" then let ih$="Y"


        find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$

        g[0]=num(gls01a.total_pers$)
        g[1]=num(gls01a.current_per$)
        g[2]=num(gls01a.current_year$)
        g[3]=num(gls01a.acct_length$)
        g[4]=num(gls01a.max_acct_len$)

        g[2]=fnyy_year(gls01a.current_year$)
        find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$

        if pos(ivs01a.lotser_flag$="LS") then let ls$="Y"
        if pos(ivs01a.lifofifo$="LF") then let lf$="Y"

        i[0]=ivs01a.item_id_len
        i[2]=num(ivs01a.precision$)
        i[3]=num(ivs01a.current_per$)
        i[4]=fnyy_year(ivs01a.current_year$)
        i[5]=ivs01a.ls_no_len

        p[0]=num(ars01a.customer_size$)
        p[1]=num(ars01a.max_customer_len$)
        p[2]=num(ars01a.current_per$)
        p[3]=fnyy_year(ars01a.current_year$)

        call pgmdir$+"glc_ctlcreate.aon",err=label_five,pgm(-2),n2$,glw11$,gl$,status
        if status then goto std_exit


        files$[30]=glw11$,ids$[30]="GLW_DAILYDETAIL",options$[30]="CL"
        call pgmdir$+"adc_fileopen.aon",action,30,30,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status

        if status goto std_exit
        glw11_dev=channels[30]
        dim glw11a$:templates$[30]

label_five:
        call pgmdir$+"adc_application.aon","PO",info$[all]
        po$=info$[20]
        call pgmdir$+"adc_application.aon","SA",info$[all]
        sa$=info$[20]
        if sa$="Y" then 
            find record (sas01a_dev,key=firm_id$+"SA00",dom=std_missing_params) sas01a$
        endif

        find record (ops10_dev,key=firm_id$+"S",dom=*next) ops10s$

rem --- Initialize Data

        more=1
        l9=59
        l=l9+1,headings=3,width=132,page=0
        dim headings$[headings],lf_channels[10]
        headings$[0]=n1$
        headings$[1]=n3$
        clock$=""
        when$=sysinfo.system_date$
        rem dim a0$(200),a[13],w1$(64),w[17]
        dim t[6],u[6]
        if seq$="" then
            seq$="C"
        endif
        if seq$="C" then
            headings$[2]="By Customer Number"
        else
            headings$[2]="By Invoice Number"
        endif

        call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,m0
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1
        errors=0
        glstatus=0

        dim columns$[11,10]
        columns = 11

        columns$[0,0]="Cust.No & Name",         columns$[0,1]="C",columns$[0,2]="20"
        columns$[1,0]="Order.No",               columns$[1,1]="C",columns$[1,2]="8"
        columns$[2,0]="Invoice No",             columns$[2,1]="C",columns$[2,2]="8"
        columns$[3,0]="Date",                   columns$[3,1]="C",columns$[3,2]="8"
        columns$[4,0]="Gross Sales",            columns$[4,1]="N",columns$[4,2]="12",  columns$[4,3]=m1$,columns$[4,10]="T"
        columns$[5,0]="Returns",                columns$[5,1]="N",columns$[5,2]="8",   columns$[5,3]=m1$,columns$[5,10]="T"
        columns$[6,0]="Discount",               columns$[6,1]="N",columns$[6,2]="8",   columns$[6,3]=m1$,columns$[6,10]="T"
        columns$[7,0]="Tax",                    columns$[7,1]="N",columns$[7,2]="8",   columns$[7,3]=m1$,columns$[7,10]="T"
        columns$[8,0]="Freight",                columns$[8,1]="N",columns$[8,2]="8",   columns$[8,3]=m1$,columns$[8,10]="T"
        columns$[9,0]="Net Sales",              columns$[9,1]="N",columns$[9,2]="8",   columns$[9,3]=m1$,columns$[9,10]="T"
        columns$[10,0]="Gross Cost",            columns$[10,1]="N",columns$[10,2]="10", columns$[10,3]=m1$,columns$[10,10]="T"
        columns$[11,0]="Gross Profit",          columns$[11,1]="N",columns$[11,2]="15",columns$[11,3]=m1$,columns$[11,10]="T"


rem ------- retrieve template for OPW_INVREG record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPW_INVREG","PRIMARY",opw01a_key_tpl$,table_chans$[all],status$
        dim opw01a_key$:opw01a_key_tpl$

rem ------- retrieve template for OPW_TERRSUMM record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPW_TERRSUMM","PRIMARY",opw11a_key_tpl$,table_chans$[all],status$
        dim opw11a_key$:opw11a_key_tpl$

rem ------- retrieve template for OPW_LINESUMM record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPW_LINESUMM","PRIMARY",opw21a_key_tpl$,table_chans$[all],status$
        dim opw21a_key$:opw21a_key_tpl$

rem ------- retrieve template for OPW_SALESUMM record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPW_SALESUMM","PRIMARY",opw31a_key_tpl$,table_chans$[all],status$
        dim opw31a_key$:opw31a_key_tpl$

rem ------- retrieve template for OPW_INVCASH record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPW_INVCASH","PRIMARY",opw41a_key_tpl$,table_chans$[all],status$
        dim opw41a_key$:opw41a_key_tpl$

rem ------- retrieve template for GLW_DAILYDETAIL record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","GLW_DAILYDETAIL","PRIMARY",glw11a_key_tpl$,table_chans$[all],status$
        dim glw11a_key$:glw11a_key_tpl$

rem ------- retrieve template for OPE_PRNTLIST record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_PRNTLIST","PRIMARY",ope04a_key_tpl$,table_chans$[all],status$
        dim ope04a_key$:ope04a_key_tpl$

rem ------- retrieve template for OPE_ORDDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDDET","PRIMARY",ope11a_key_tpl$,table_chans$[all],status$
        dim ope11a_key$:ope11a_key_tpl$

rem ------- retrieve template for OPE_ORDLSDET record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDLSDET","PRIMARY",ope21a_key_tpl$,table_chans$[all],status$
        dim ope21a_key$:ope21a_key_tpl$


rem        gosub sort_by_invno
        call pgmdir$+"adc_progress.aon","N","","","","",0,ope01_dev,1,meter_num,status


rem --- Initial Read

        if seq$="C" keynum=2 else keynum=3
        read (ope01_dev,key=firm_id$+"I",knum=keynum,dom=*next)

main_read: rem --- Main Read
    while more
        precision 4
        lines$=""
        ope01a_key$=key(ope01_dev,end=*break)
        if pos(firm_id$+"I"=ope01a_key$)<>1 break
        extract record (ope01_dev,key=ope01a_key$,dom=*continue) ope01a$

label_one:
        if ope01a.print_status$<>"Y" or pos(ope01a.lock_status$="12")<>0 then continue
        z7$=""
        z8$=""
        if ope01a.cash_sale$="Y" then
            find record (ope41_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=*next) ope41a$
        endif
        ope01a.lock_status$="S"
        write record (ope01_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$+sequence_000$) ope01a$

rem --- Breaks

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if ope01a.ordinv_flag$<>"I" continue

rem --- Heading

        dim t[6]
        t[2]=ope01a.tax_amount
        t[3]=ope01a.freight_amt
        t[5]=ope01a.discount_amt
        t0=0
        gosub find_customer
        if ope01a.invoice_type$="V" then

rem --- Void

            OutVect!.addItem(fnmask$(ope01a.customer_id$,m0$))
            OutVect!.addItem(ope01a.order_no$)
            OutVect!.addItem(ope01a.ar_inv_no$)
            OutVect!.addItem(fndate$(ope01a.invoice_date$))
            OutVect!.addItem("      * Void *")
            xwk = fnblank(7)
            OutVect!.addItem(arm01a.customer_name$)
            xwk = fnblank(11)

            l=l+3
            continue

        endif

rem --- Determine GL Accounts
   
        dim y2$(80,"0"),y9$(80,"0")
        find record (arm10_dev,key=firm_id$+"D"+ope01a.dist_code$,dom=label_two) arm10d$
        y2$(1)=arm10d$(31,140)

label_two:
        y9$(1,10)=y2$(1,10)
        y9$(31,20)=y2$(31,20)
        if ope01a.cash_sale$="Y" and len(z7$)>=24 then
           find record (arm10_dev,key=firm_id$+"C"+ope41a.cash_rec_cd$,dom=*next) arm10c$
           y9$(1,10)=arm10c.gl_cash_acct$
        endif

rem --- Setup Invoice GL Variables

        gldate$=ope01a.invoice_date$
        memo$=arm01a.customer_name$
        ref1$=fnmask$(ope01a.customer_id$,m0$)
        ref2$=ope01a.ar_inv_no$

rem --- Position Invoice Detail File

        read (ope11_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=*next)

rem --- Detail
        while more
            ope11a_key$=key(ope11_dev,end=*break)
            if ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$<>ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$ then break
            read record (ope11_dev) ope11a$
            rem dim y0$(32),y1$(12)
            find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*next) opm02a$
            if opm02a.dropship$<>"Y" or ars01a.dropshp_cost$<>"Y" then
                if pos(opm02a.line_type$="PS")>0 and ope11a.qty_shipped<>0 gosub cal_cur_item_cost; rem "Go get current cost
            endif

            if ope11a.ext_price<0 then let t[1]=t[1]+ope11a.ext_price
            if ope11a.ext_price>0 then let t[0]=t[0]+ope11a.ext_price
            t0=t0+ope11a.ext_price
            t[4]=t[4]+round(ope11a.unit_cost*ope11a.qty_shipped,2)

rem --- Write Misc

            opw21a.firm_id$=firm_id$
            opw21a.ar_type$=ope01a.ar_type$
            opw21a.line_code$=ope11a.line_code$
            opw21a.invoice_amt=0
            find record (opw21_dev,key=opw21a.firm_id$+opw21a.ar_type$+opw21a.line_code$,dom=*next) opw21a$
            opw21a.invoice_amt=opw21a.invoice_amt+ope11a.ext_price
            write record (opw21_dev,key=opw21a.firm_id$+opw21a.ar_type$+opw21a.line_code$) opw21a$
            t[6]=t[6]+ope11a.ext_price

rem --- Determine GL Postings Here

            if gl$="Y" then
                if opm02a.line_type$="S" then
                    if opm02a.dropship$="Y" then goto non_stock
                    if ars01a.dist_by_item$="N" y9$(21,10)=y2$(21,10),y9$(61,20)=d6$; goto now_post; rem "Distribute by Customer
                        
                    find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=*next) ivm02a$
                    find record (arm10_dev,key=firm_id$+"D"+d1$(13,2),dom=*next) arm10d$
                    y9$(21,10)=arm10d.gl_sls_acct$
                    y9$(61,10)=arm10d.gl_inv_acct$
                    y9$(71,10)=arm10d.gl_cogs_acct$
                    goto now_post
                endif 

rem --- Non-Stock & 'P' Types Here

                if pos(opm02a.line_type$="NP")<>0 then
non_stock:
                        
                    if ars01a.dist_by_item$="N" and opm02a.line_type$="N" then
                        y9$(21,10)=y2$(21,10)
                        y9$(61,10)=y2$(61,10)
                        y9$(71,10)=y2$(71,10)
                        goto 2700
                    endif
                    find record (arm10_dev,key=firm_id$+"D"+y1$(11,2),dom=*next) arm10d$
                    y9$(21,10)=arm10d.gl_sls_acct$
                    y9$(61,10)=arm10d.gl_inv_acct$
                    y9$(71,10)=arm10d.gl_cogs_acct$
                    goto now_post

                endif

rem --- Other Charges Here

                if opm02a.line_type$="O" then
                    y9$(21,10)=y1$(1,10)

now_post: rem --- Now Post Debit/Credit

                    precision 2
                    ref3$=ope11a.internal_seq_no$
                    account$=y9$(21,10)
                    amount=-ope11a.ext_price
                    if ope01a.cash_sale$="Y" then let ref3$=ope11a.line_no$+" (Cash)"
                    gosub glrecap
                    account$=y9$(1,10)
                    amount=ope11a.ext_price
                    gosub glrecap
                    if opm02a.line_type$<>"O" and ope11a.unit_cost*ope11a.qty_shipped<>0 then
                        account$=y9$(61,10)
                        amount=(-ope11a.unit_cost)*ope11a.qty_shipped
                        gosub glrecap
                        account$=y9$(71,10)
                        amount=ope11a.unit_cost*ope11a.qty_shipped
                        if validlncd$<>"" then let account$=ab2$(111,10)
                        gosub glrecap
                    endif
                endif   
            endif


            precision 4
        wend

rem --- Print

            t=0
            t1=t[0]+t[1]
            if t1<>0 then let t=(t1-t[4])*100/t1
            if abs(t)>999 then let t=sgn(t)*999.99

                    OutVect!.addItem(fnmask$(ope01a.customer_id$,m0$))
                    OutVect!.addItem(ope01a.order_no$)
                    OutVect!.addItem(ope01a.ar_inv_no$)
                    OutVect!.addItem(fndate$(ope01a.invoice_date$))
                    OutVect!.addItem(str(t[0]))
                    OutVect!.addItem(str(t[1]))
                    OutVect!.addItem(str(t[5]))
                    OutVect!.addItem(str(t[2]))
                    OutVect!.addItem(str(t[3]))
                    OutVect!.addItem(str(t[0]+t[2]+t[1]-t[5]+t[3]))
                    OutVect!.addItem(str(t[4]))
                    OutVect!.addItem(str(t:"-##0.00%"))
                    OutVect!.addItem(arm01a.customer_name$)
                    xwk = fnblank(11)

            l=l+3
            if gl$="Y" then call pgmdir$+"glc_datecheck.aon",ope01a.invoice_date$,"N",period$,year$,glstatus
            if glstatus then call pgmdir$+"glc_datewarn.aon",printer_dev,ope01a.invoice_date$,glstatus,l,errors,status
            if lines$<>"" then

                for x=1 to len(lines$) step 3
                    OutVect!.addItem("   **** Warning!! Missing Serial Numbers in Line: "+lines$(x,3))
                    xwk = fnblank(11)
                    l=l+1
                next x
            endif

            if g9$>=ope01a.invoice_date$ then let j=0 else let j=8
            for x=0 to 5

                rem --- T(0)=GROSS SALES,T(1)=RETURNS,T(2)=TAX,T(3)=FREIGHT,T(4)=COGS,T(5)=DISCOUNT,T(6)=EXTENTION,T=GROSS PROFIT

                u[x]=u[x]+t[x]
                v[x+j]=v[x+j]+t[x]
            next x

rem --- Territory Codes

            opw11a.firm_id$=firm_id$
            opw11a.ar_type$=ope01a.ar_type$
            opw11a.territory$=ope01a.territory$
            opw11a.invoice_amt=0
            find record (opw11_dev,key=opw11a.firm_id$+opw11a.ar_type$+opw11a.territory$,dom=*next) opw11a$
            opw11a.invoice_amt=opw11a.invoice_amt+t0
            write record (opw11_dev,key=opw11a.firm_id$+opw11a.ar_type$+opw11a.territory$) opw11a$

rem --- Salesperson Codes

            opw31a.firm$=firm_id$
            opw31a.ar_type$=ope01a.ar_type$
            opw31a.slspsn_code$=ope01a.slspsn_code$
            opw31a.invoice_amt=0

            find record (opw31_dev,key=opw31a.firm$+opw31a.ar_type$+opw31a.slspsn_code$,dom=*next) opw31a$
            opw31a.invoice_amt=opw31a.invoice_amt+t0
            write record (opw31_dev,key=opw31a.firm$+opw31a.ar_type$+opw31a.slspsn_code$) opw31a$

rem --- GL Detail For Freight, Discount

            ref3$=""
            if ope01a.cash_sale$="Y" then let ref3$="Cash Sale"
            if ope01a.freight_amt<>0 then
                account$=y9$(41,10)
                amount=-ope01a.freight_amt
                ref3$=""
                gosub glrecap
            endif

            if ope01a.discount_amt<>0 then
                account$=y9$(31,10)
                amount=ope01a.discount_amt
                gosub glrecap
            endif

rem --- GL Detail for Taxes

            if ope01a.tax_amount<>0 then
                precision 4
                dim tax$(60)
                tax0=0
                tax1=0
                tax=ope01a.tax_amount
                taxttl=0
                find record (opm06_dev,key=firm_id$+ope01a.tax_code$,dom=label_three) opm06a$
                tax$(1)=opm06a.firm_id$+" "+opm06a.tax_code$+opm06a.code_desc$
                tax=tax0*ope01a.taxable_amt/100
                precision 2
                tax=tax*1
                if tax1<>0 and abs(tax)>tax1 then let tax=tax1*sgn(tax)
                taxttl=tax
                account$=opm06a.gl_account$
                amount=-tax
                gosub glrecap
                for x9=1 to 10
                    precision 4
                    rem x1$=tax$(26+2*(x9-1),2)
                    if x9=1 then x1$=opm06a.ar_tot_code_1$
                    if x9=2 then x1$=opm06a.ar_tot_code_2$
                    if x9=3 then x1$=opm06a.ar_tot_code_3$
                    if x9=4 then x1$=opm06a.ar_tot_code_4$
                    if x9=5 then x1$=opm06a.ar_tot_code_5$
                    if x9=6 then x1$=opm06a.ar_tot_code_6$
                    if x9=7 then x1$=opm06a.ar_tot_code_7$
                    if x9=8 then x1$=opm06a.ar_tot_code_8$
                    if x9=9 then x1$=opm06a.ar_tot_code_9$
                    if x9=10 then x1$=opm06a.ar_tot_code_10$
                    if x1$="  " then continue
                    dim y5$(4),y6$(60); let tax0=0,tax1=0,tax=0
                    find record (opm06_dev,key=firm_id$+x1$,dom=*continue) opm06a$
                    tax=tax0*ope01a.taxable_amt/100
                    precision 2
                    tax=tax*1
                    if tax1<>0 and abs(tax)>tax1 then let tax=tax1*sgn(tax)
                    taxttl=taxttl+tax
                    account$=opm06a.gl_account$
                    amount=-tax
                    gosub glrecap
                next x9
label_three:
                precision 2
                if ope01a.tax_amount<>taxttl then
                    tax=ope01a.tax_amount-taxttl
                    account$=opm06a.gl_account$
                    amount=-tax
                    gosub glrecap
                endif

rem --- End of Tax routine
            endif

rem --- Net AR/Cash Here

            if ope01a.tax_amount+ope01a.freight_amt-ope01a.discount_amt<>0 then
                account$=y9$(1,10)
                amount=ope01a.tax_amount+ope01a.freight_amt-ope01a.discount_amt
                gosub glrecap
            endif
    wend



rem --- Totals

            u=0
            u1=u[0]+u[1]
            if u1<>0 then let u=(u1-u[4])*100/u1
            if abs(u)>999 then let u=sgn(u)*999.99

                xwk = fnblank(4)
                xwk = fnblank(8)
                TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                OutVect!.addItem("Register Totals:")
                xwk = fnblank(3)
                OutVect!.addItem(str(u[0]))
                OutVect!.addItem(str(u[1]))
                OutVect!.addItem(str(u[5]))
                OutVect!.addItem(str(u[2]))
                OutVect!.addItem(str(u[3]))
                OutVect!.addItem(str(u[0]+u[1]+u[2]+u[3]-u[5]))
                OutVect!.addItem(str(u[4]))
                OutVect!.addItem(str(u:"-##0.00%"))

                xwk = fnblank(4)
                xwk = fnblank(8)
            v=0
            v1=v[0]+v[1]
            if v1<>0 then let v=(v1-v[4])*100/v1
            if abs(v)>999 then let v=sgn(v)*999.99
                TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                OutVect!.addItem("M-T-D Totals:")
                xwk = fnblank(3)
                OutVect!.addItem(str(v[0]))
                OutVect!.addItem(str(v[1]))
                OutVect!.addItem(str(v[5]))
                OutVect!.addItem(str(v[2]))
                OutVect!.addItem(str(v[3]))
                OutVect!.addItem(str(v[0]+v[1]+v[2]+v[3]-v[5]))
                OutVect!.addItem(str(v[4]))
                OutVect!.addItem(str(v:"-##0.00%"))

                xwk = fnblank(4)
                xwk = fnblank(8)

            if v[8]<>0 or v[9]<>0 or v[10]<>0 or v[11]<>0 or v[12]<>0 or v[13]<>0 then
                y=0
                y1=v[8]+v[9]
                if y1<>0 then let y=(y1-v[12])*100/y1
            endif

            if abs(y)>999 then let y=sgn(y)*999.99
                TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                OutVect!.addItem("Next M-T-D Totals:")
                xwk = fnblank(3)
                OutVect!.addItem(str(v[8]))
                OutVect!.addItem(str(v[9]))
                OutVect!.addItem(str(v[13]))
                OutVect!.addItem(str(v[10]))
                OutVect!.addItem(str(v[11]))
                OutVect!.addItem(str(v[8]+v[9]+v[10]+v[11]-v[13]))
                OutVect!.addItem(str(v[12]))
                OutVect!.addItem(str(y:"-##0.00%"))

                xwk = fnblank(4)
                xwk = fnblank(8)

                

        if ars01a.cash_sale$<>"N" then
                update$=pgmdir$+"opr_salesregister_o1.aon"
                overlay$=update$
                out_action$="PRT-PDF"
                next_overlay$=overlay$
                goto std_exit
        else
                update$=pgmdir$+"opr_salesregister_o2.aon"
                overlay$=update$
                out_action$="PRT-PDF"
                next_overlay$=overlay$
                goto std_exit
        endif



display_fields:
            control_id=3000
            cid_cnt=0

        while more
            if cid_cnt=0 then let disp_inp$="C"
            if cid_cnt=1 then let disp_inp$=""
            call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
            call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
            cid_cnt=cid_cnt+1; let control_id=control_id+1
            if cid_cnt>2 then break
        wend

            disp_inp$=""
            disp_desc$=""
            return

find_customer: rem --- Find Customer


        if ope01a.cash_sale$="Y" then
            if cvs(ope41a.customer_name$,2)<>"" then
                arm01a.customer_name$=ope41a.customer_name$
                return
            endif
        endif

        arm01a.customer_name$="Not On File"
        find record (arm01_dev,key=firm_id$+ope01a.customer_id$,dom=*next) arm01a$

        return

lifo_fifo: rem --- LIFO/FIFO

        cost=ope11a.unit_cost
        ret_cost=0
        lf_action$=ivs01a.lifofifo$+"I"
        lf_date$=ope01a.invoice_date$
        dim lf_item$[10]
        lf_item$[0]=firm_id$
        lf_item$[1]=ope11a.warehouse_id$
        lf_item$[2]=ope11a.item_id$

rem --- Inquiry On Tier Cost For Returned Items

        if ope11a.qty_shipped<0 then
            lf_action$(2,1)="R"
            call pgmdir$+"ivc_lifofifo.aon",lf_action$,"I",lf_date$,lf_channels[all],lf_tmpls$[all],lf_item$[all],i[2],abs(ope11a.qty_shipped),cost,ret_cost,status
            if ret_cost<>0 then let cost=ret_cost
        endif

rem --- Report On Tier Cost For Sold Items

        call pgmdir$+"ivc_lifofifo.aon",lf_action$,"R",lf_date$,lf_channels[all],lf_tmpls$[all],lf_item$[all],i[2],abs(ope11a.qty_shipped),cost,ret_cost,status
        if ret_cost<>0 then let icost=ret_cost
        ivw05a.firm_id$=ope11a.firm_id$
        ivw05a.ar_type$=ope11a.ar_type$
        ivw05a.customer_id$=ope11a.customer_id$
        ivw05a.order_no$=ope11a.order_no$
        ivw05a.item_id$=ope11a.item_id$
        ivw05a.line_no$=ope11a.line_no$
        write record (ivw05_dev,key=ivw05a.firm_id$+ivw05a.ar_type$+ivw05a.customer_id$+ivw05a.order_no$+ivw05a.item_id$+ivw05a.line_no$) ivw05a$
        return

cal_cur_item_cost: rem --- Calculate Current Item Cost

        rem dim d2$(62),d[20],h[2]
        q$=""
        q0=0
        q1=0
        icost=ope11a.unit_cost
        find record (ivm01_dev,key=firm_id$+ope11a.item_id$,dom=label_four) ivm01a$
        find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=*next) ivm02a$
        if ivm02a.unit_cost<>0 then let icost=ivm02a.unit_cost
        if lf$="Y" then gosub lifo_fifo
        if ls$<>"Y" or ivm01a.lotser_item$<>"Y" then
            let ope11a.unit_cost=icost
        else
                read (ope21_dev,key=ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.internal_seq_no$,dom=*next)

                while more
                    let ope21a_key$=key(ope21_dev,end=*break)
                    if ope21a_key.firm_id$+ope21a_key.ar_type$+ope21a_key.customer_id$+ope21a_key.order_no$+ope21a_key.orddet_seq_ref$<>ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.line_no$ then break
                    read record (ope21_dev) ope21a$
                    if ivm01a.inventoried$<>"Y" ope21a.unit_cost=icost
                    write record (ope21_dev,key=ope21a_key.firm_id$+ope21a_key.ar_type$+ope21a_key.customer_id$+ope21a_key.order_no$+ope21a_key.orddet_seq_ref$) ope21a$; rem "Reset cost if not inventoried
                    q0=q0+ope21a.qty_shipped
                    q1=q1+ope21a.qty_shipped*ope21a.unit_cost
                wend

label_four:

                if q0<>ope11a.qty_shipped then
                    let lines$=lines$+ope11a.internal_seq_no$
                    if ivm01a.inventoried$<>"Y" then
                        noninv=1
                    else
                        inv=1
                    endif
                endif

                if q0<>0 then let ope11a.unit_cost=q1/q0
        endif

        write record (ope11_dev,key=ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.internal_seq_no$) ope11a$
        return

rem --- Standard G/L Recap Routine

glrecap:

        if gl$<>"Y" then
            return
        endif
        call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,0,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status

        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

REM " --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year"
        def fnyy21_yy$(q1$)
        let q3$=" 01234567890123456789",q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
        return q1$
        fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
rem #endinclude fndate.src

REM " --- Convert 2-Char Year to 21st Century Numeric Year"

        def fnyy_year(q1$)
        let q=num(fnyy21_yy$(q1$)),q9=10,q9=num(STBL("+Y2K_UPPER_LIMIT",err=*next),err=*next)
        if q<q9 THEN let q=q+100
        return q
        fnend

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem #include fndate.src

        def fndate$(q$)
        if cvs(q$,2)="" return ""
        if pos("9"<>q$)=0 return q$
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        return testdate$
        fnend

rem #endinclude fndate.src


rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
