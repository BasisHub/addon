rem --- Sales Register (Lead Overlay)
rem --- Program opr_ha v8.0.0 29Jan2008 (opr_ha)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/29/2008 02:19:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Use statements

    use ::ado_func.src::func
    use ::sys/prog/bao_option.bbj::Option

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=34,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",       ids$[1]="ARM_CUSTMAST"
    files$[2]="arc_cashcode", ids$[2]="ARC_CASHCODE"
    files$[3]="arc_distcode", ids$[3]="ARC_DISTCODE"
    files$[4]="ars_params",   ids$[4]="ARS_PARAMS"
    files$[5]="glm-01",       ids$[5]="GLM_ACCT"
    files$[7]="ivm-01",       ids$[7]="IVM_ITEMMAST"
    files$[8]="ivm-02",       ids$[8]="IVM_ITEMWHSE"
    files$[9]="ivm-04",       ids$[9]="IVM_ITEMTIER"
    files$[10]="ivs_params",  ids$[10]="IVS_PARAMS"
    rem files$[11]="ivw-04",      ids$[11]="IVW_LFDET"
    rem files$[12]="ivw-05",      ids$[12]="IVW_LFCOST"
    files$[13]="opt-01",      ids$[13]="OPE_ORDHDR"
    files$[14]="ope-04",      ids$[14]="OPE_PRNTLIST"
    files$[15]="opt-11",      ids$[15]="OPE_ORDDET"
    files$[16]="opt-21",      ids$[16]="OPE_ORDLSDET"
    files$[17]="opt-41",      ids$[17]="OPE_INVCASH"
    files$[18]="opm-02",      ids$[18]="OPC_LINECODE"
    files$[19]="opm-06",      ids$[19]="OPC_TAXCODE"
    files$[20]="ops_mtdsales",ids$[20]="OPS_MTDSALES"
    files$[21]="opt-31",      ids$[21]="OPE_ORDSHIP"
    files$[22]="opw-11",      ids$[22]="OPW_TERRSUMM", options$[22]="CL"
    files$[23]="opw-21",      ids$[23]="OPW_LINESUMM", options$[23]="CL"
    files$[24]="opw-31",      ids$[24]="OPW_SALESUMM", options$[24]="CL"
    files$[25]="opw-41",      ids$[25]="OPW_INVCASH",  options$[25]="CL"
    files$[26]="sas_params",  ids$[26]="SAS_PARAMS"
    files$[27]="glm-03",      ids$[27]="GLC_JOURNALCODE"
    files$[28]="arc_salecode",ids$[28]="ARC_SALECODE"
    files$[29]="arc_terrcode",ids$[29]="ARC_TERRCODE"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status

    if status goto std_exit
    arm01_dev=channels[1]
    arm10c_dev=channels[2]
    arm10d_dev=channels[3]
    ars01a_dev=channels[4]
    glm01_dev=channels[5]
    ivm01_dev=channels[7]
    ivm02_dev=channels[8]
    ivm04_dev=channels[9]
    ivs01a_dev=channels[10]
    rem ivw04_dev=channels[11]
    rem ivw05_dev=channels[12]
    ope01_dev=channels[13]
    ope04_dev=channels[14]
    ope11_dev=channels[15]
    ope21_dev=channels[16]
    ope41_dev=channels[17]
    opm02_dev=channels[18]
    opm06_dev=channels[19]
    ops10_dev=channels[20]
    ope31_dev=channels[21]
    opw11_dev=channels[22]
    opw21_dev=channels[23]
    opw31_dev=channels[24]
    opw41_dev=channels[25]
    sas01a_dev=channels[26]
    glm03_dev=channels[27]
    arm10f_dev=channels[28]
    arm10h_dev=channels[29]

rem --- Dimension string templates

rem glw11a$:templates$[7],

    dim arm01a$:templates$[1],arm10c$:templates$[2],arm10d$:templates$[3],arm10d0$:templates$[3],
:       ars01a$:templates$[4],glm01a$:templates$[5],
:       ivm01a$:templates$[7],ivm02a$:templates$[8],
:       ivm04a$:templates$[9],ivs01a$:templates$[10],
:       ope01a$:templates$[13],ope04a$:templates$[14],
:       ope11a$:templates$[15],ope21a$:templates$[16],ope41a$:templates$[17],
:       opm02a$:templates$[18],opm06a$:templates$[19],ops10s$:templates$[20],
:       ope31a$:templates$[21],opw11a$:templates$[22],opw21a$:templates$[23],
:       opw31a$:templates$[24],opw41a$:templates$[25],sas01a$:templates$[26],
:       glm03a$:templates$[27],arm10f$:templates$[28],arm10h$:templates$[29]

rem --- Assign form input values to local variables

    declare Option option!

    seq$ = option!.getOptionData("REPORT_TYPE")

rem --- Parameters

    dim i[6],p[3],v[15]
    n1$=sysinfo.firm_name$
    n2$="AR"
    n3$=sysinfo.task_desc$
    r9$="N",ih$="N",ls$="N"
    lf$="N",br$="N",gl$="N"
    jn$="N",sa$="N",po$="N"
    find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$

    if ars01a.dist_by_item$="Y" then r9$="Y"
    if ars01a.job_nos$="Y" then jn$="Y"
    if ars01a.br_interface$="Y" then br$="Y"
    if ars01a.inv_hist_flg$="Y" then ih$="Y"

    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$

    if pos(ivs01a.lotser_flag$="LS") then let ls$="Y"
    if pos(ivs01a.lifofifo$="LF") then let lf$="Y"

    i[0]=ivs01a.item_id_len
    i[2]=num(ivs01a.precision$)
    i[3]=num(ivs01a.current_per$)
    i[4]=num(ivs01a.current_year$)
    i[5]=ivs01a.ls_no_len

    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,m0
    p[0]=m0
    p[1]=max(6,p[0])
    p[2]=num(ars01a.current_per$)
    p[3]=num(ars01a.current_year$)

	call pgmdir$+"adc_perioddates.aon",p[2],p[3],x$,g9$,table_chans$[all],status
    if status goto std_exit
	
    start_block = 1

    if start_block then
        call pgmdir$+"glc_ctlcreate.aon",err=*endif,pgm(-2),n2$,glw11$,gl$,status
        if status then goto std_exit
        process_id$=stbl("+PROCESS_ID")
        batch_no$=stbl("+BATCH_NO")

        files$[30]="glw-11",ids$[30]="GLW_DAILYDETAIL";rem --- no longer using; ,options$[30]="CL"
        call pgmdir$+"adc_fileopen.aon",action,30,30,files$[all],options$[all],
:           ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        glw11_dev=channels[30]
        dim glw11a$:templates$[30]

    rem --- Clear trans for this firm/process/batch from glw-11 work file 
    rem --- If not batching, batch_no$ is zero, and will clear all recs this firm/process

        if gl$="Y"
            rec_pfx$=firm_id$+process_id$+batch_no$
            call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status

            rem --- Get GL Audit Number
            gl_adt_no=0
            glcontrol_tpl$=stbl("+GLCONTROL_TPL",err=*endif)
            dim glcontrol$:glcontrol_tpl$
            glcontrol$=stbl("+GLCONTROL",err=*endif)
            gl_adt_no=num(glcontrol.gl_adt_no$)
        endif

    endif

    call pgmdir$+"adc_application.aon","PO",info$[all]
    po$=info$[20]
    call pgmdir$+"adc_application.aon","SA",info$[all]
    sa$=info$[20]

    if sa$="Y" then 
        find record (sas01a_dev,key=firm_id$+"SA00",dom=std_missing_params) sas01a$
    endif

    find record (ops10_dev,key=firm_id$+"S",dom=*next) ops10s$
    v[0]=ops10s.mtd_sales
    v[1]=ops10s.mtd_returns
    v[2]=ops10s.mtd_tax
    v[3]=ops10s.mtd_freight
    v[4]=ops10s.mtd_cost
    v[5]=ops10s.mtd_discount
    v[8]=ops10s.nmtd_sales
    v[9]=ops10s.nmtd_returns
    v[10]=ops10s.nmtd_tax
    v[11]=ops10s.nxt_mtd_frgt
    v[12]=ops10s.nxt_mtd_cost
    v[13]=ops10s.nxt_mtd_disc

rem --- Additional/optional opens

    if ars01a.cash_sale$<>"N" and br$="Y" then
        files$[31]="art_deposit",ids$[31]="ART_DEPOSIT"
        files$[32]="glt-15",ids$[32]="GLT_BANKOTHER"
        call pgmdir$+"adc_fileopen.aon",action,31,32,files$[all],options$[all],
:           ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        deposit_dev=channels[31]
        glt15_dev=channels[32]
        dim deposit_tpl$:templates$[31]
        dim glt15a$:templates$[32]
    endif

    if lf$="Y" then
        files$[33]="ivw-04", ids$[33]="IVW_LFDET",  options$[33]="CL"
        files$[34]="ivw-05", ids$[34]="IVW_LFCOST"
        call pgmdir$+"adc_fileopen.aon",action,33,34,files$[all],options$[all],
:           ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        ivw04_dev=channels[33]
        ivw05_dev=channels[34]
        dim ivw04a$:templates$[33]
        dim ivw05a$:templates$[34]
        
        rem --- Init LIFO/FIFO files and templates
        dim lf_channels[4],lf_tmpls$[4]
        lf_channels[1]=ivm02_dev
        lf_channels[2]=ivm04_dev
        lf_channels[3]=ivw04_dev
        lf_tmpls$[1]=fattr(ivm02a$)
        lf_tmpls$[2]=fattr(ivm04a$)
        lf_tmpls$[3]=fattr(ivw04a$)
    endif

rem --- Initialize Data

    more=1
    l9=59
    l=l9+1
    headings=3
    width=132
    page=0
    dim headings$[headings]
    headings$[0]=n1$
    headings$[1]=n3$
    clock$=""
    when$=sysinfo.system_date$
    nothing_posted = 1
    dim t[6],u[6]

    if seq$="" then
        seq$="C"
    endif

    if seq$="C" then
        headings$[2]="By Customer Number"
    else
        headings$[2]="By Invoice Number"
    endif

    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1
    errors=0
    glstatus=0
    missing_data=0

    dim columns$[11,10]
    columns = 11

    columns$[0,0]="Cust.No & Name", columns$[0,1]="C",  columns$[0,2]="20"
    columns$[1,0]="Order.No",       columns$[1,1]="C",  columns$[1,2]="8"
    columns$[2,0]="Invoice No",     columns$[2,1]="C",  columns$[2,2]="8"
    columns$[3,0]="Date",           columns$[3,1]="C",  columns$[3,2]="8"
    columns$[4,0]="Gross Sales",    columns$[4,1]="N",  columns$[4,2]=str(m1),  columns$[4,3]=m1$,  columns$[4,10]="T"
    columns$[5,0]="Returns",        columns$[5,1]="N",  columns$[5,2]=str(m1),  columns$[5,3]=m1$,  columns$[5,10]="T"
    columns$[6,0]="Discount",       columns$[6,1]="N",  columns$[6,2]=str(m1),  columns$[6,3]=m1$,  columns$[6,10]="T"
    columns$[7,0]="Tax",            columns$[7,1]="N",  columns$[7,2]=str(m1),  columns$[7,3]=m1$,  columns$[7,10]="T"
    columns$[8,0]="Freight",        columns$[8,1]="N",  columns$[8,2]=str(m1),  columns$[8,3]=m1$,  columns$[8,10]="T"
    columns$[9,0]="Net Sales",      columns$[9,1]="N",  columns$[9,2]=str(m1),  columns$[9,3]=m1$,  columns$[9,10]="T"
    columns$[10,0]="Gross Cost",    columns$[10,1]="N", columns$[10,2]=str(m1), columns$[10,3]=m1$, columns$[10,10]="T"
    columns$[11,0]="Gross Profit",  columns$[11,1]="N", columns$[11,2]=str(m1), columns$[11,3]=m1$, columns$[11,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- retrieve template for OPW_INVREG record key

    call sypdir$+"bac_key_template.bbj","OPW_INVREG","PRIMARY",opw01a_key_tpl$,table_chans$[all],status$
    dim opw01a_key$:opw01a_key_tpl$

rem --- retrieve template for OPW_TERRSUMM record key

rem call sypdir$+"bac_key_template.bbj","OPW_TERRSUMM","PRIMARY",opw11a_key_tpl$,table_chans$[all],status$
rem dim opw11a_key$:opw11a_key_tpl$

rem --- retrieve template for OPW_LINESUMM record key

rem call sypdir$+"bac_key_template.bbj","OPW_LINESUMM","PRIMARY",opw21a_key_tpl$,table_chans$[all],status$
rem dim opw21a_key$:opw21a_key_tpl$

rem --- retrieve template for OPW_SALESUMM record key

rem call sypdir$+"bac_key_template.bbj","OPW_SALESUMM","PRIMARY",opw31a_key_tpl$,table_chans$[all],status$
rem dim opw31a_key$:opw31a_key_tpl$

rem --- retrieve template for OPW_INVCASH record key

    call sypdir$+"bac_key_template.bbj","OPW_INVCASH","PRIMARY",opw41a_key_tpl$,table_chans$[all],status$
    dim opw41a_key$:opw41a_key_tpl$

rem --- retrieve template for GLW_DAILYDETAIL record key

    call sypdir$+"bac_key_template.bbj","GLW_DAILYDETAIL","PRIMARY",glw11a_key_tpl$,table_chans$[all],status$
    dim glw11a_key$:glw11a_key_tpl$

rem --- retrieve template for OPE_ORDDET record key

    call sypdir$+"bac_key_template.bbj","OPE_ORDDET","PRIMARY",ope11a_key_tpl$,table_chans$[all],status$
    dim ope11a_key$:ope11a_key_tpl$

rem --- retrieve template for OPE_ORDLSDET record key

    call sypdir$+"bac_key_template.bbj","OPE_ORDLSDET","PRIMARY",ope21a_key_tpl$,table_chans$[all],status$
    dim ope21a_key$:ope21a_key_tpl$

rem --- gosub sort_by_invno

    call pgmdir$+"adc_progress.aon","N","","","","",0,ope01_dev,1,meter_num,status
    if status=999 then goto std_exit

rem --- Initial Read

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ope_prntlist.firm_id, ope_prntlist.customer_id,"
    sql_prep$=sql_prep$+"       ope_prntlist.order_no, ope_invhdr.ar_inv_no"
    sql_prep$=sql_prep$+"  FROM ope_prntlist INNER JOIN ope_invhdr"
    sql_prep$=sql_prep$+"     ON ope_prntlist.firm_id = ope_invhdr.firm_id AND"
    sql_prep$=sql_prep$+"        ope_invhdr.trans_status in ('E','R') AND"
    sql_prep$=sql_prep$+"        ope_prntlist.ar_type = ope_invhdr.ar_type AND"
    sql_prep$=sql_prep$+"        ope_prntlist.customer_id = ope_invhdr.customer_id AND"
    sql_prep$=sql_prep$+"        ope_prntlist.order_no = ope_invhdr.order_no"
    sql_prep$=sql_prep$+"  WHERE ope_prntlist.firm_id = '"+firm_id$+"' AND ope_prntlist.ordinv_flag='I'"
    if seq$="C"
    	sql_prep$=sql_prep$+"  ORDER BY ope_prntlist.customer_id, ope_prntlist.order_no"
    else
    	sql_prep$=sql_prep$+"  ORDER BY ope_invhdr.ar_inv_no"
    endif

    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem    read (ope04_dev, key=firm_id$+"I", knum=keynum$, dom=*next)

rem --- Main Read

    while more
        precision 4; rem s/b inventory prec?
        items$=""
		read_tpl$=sqlfetch(sql_chan,err=*break) 

rem --- Check to see if record is in use in Invoice Entry
		call stbl("+DIR_SYP")+"bac_lock_record.bbj","OPE_INVHDR",firm_id$+"  "+read_tpl.customer_id$+read_tpl.order_no$,"C","",0,table_chans$[all],lock_stat$
		if lock_stat$="ERR_LOCKED"
			continue
		endif

        extract record (ope01_dev, key=firm_id$+"  "+read_tpl.customer_id$+read_tpl.order_no$+read_tpl.ar_inv_no$, dom=*continue) ope01a$; rem Advisory Locking
        if ope01a.print_status$<>"Y" then read(ope01_dev,end=*continue); continue
        if pos(ope01a.trans_status$="ER")=0 then read(ope01_dev,end=*continue); continue

        if ope01a.cash_sale$="Y" then
            dim ope41a$:fattr(ope41a$)
            find record (ope41_dev, key=firm_id$+"  "+ope01a.customer_id$+ope01a.order_no$+ope01a.ar_inv_no$, dom=*next) ope41a$
            if pos(ope41a.trans_status$="ER")=0 then dim ope41a$:fattr(ope41a$)
        endif

        rem --- Don't change lock_status if re-running a failed update
        if pos(ope01a.lock_status$="12")=0 then ope01a.lock_status$="S"
        ope01a.trans_status$="R"     
        ope01a.mod_user$=sysinfo.user_id$
        ope01a.mod_date$=date(0:"%Yd%Mz%Dz")
        ope01a.mod_time$=date(0:"%Hz%mz")
        ope01a.batch_no$=batch_no$
        if gl_adt_no then ope01a.audit_number=gl_adt_no
        ope01a$ = field(ope01a$)
        write record (ope01_dev) ope01a$

        rem --- Set trans_status for OPE_ORDSHIP
        dim ope31a$:fattr(ope31a$)
        extract record (ope31_dev, key=firm_id$+read_tpl.customer_id$+read_tpl.order_no$+read_tpl.ar_inv_no$, dom=*next) ope31a$; rem Advisory Locking
        if pos(ope31a.trans_status$="ER") then
            ope31a.trans_status$="R"     
            ope31a.mod_user$=sysinfo.user_id$
            ope31a.mod_date$=date(0:"%Yd%Mz%Dz")
            ope31a.mod_time$=date(0:"%Hz%mz")
            ope31a.batch_no$=batch_no$
            if gl_adt_no then ope31a.audit_number=gl_adt_no
            ope31a$ = field(ope31a$)
            write record (ope31_dev) ope31a$
        else
            read(ope31_dev,end=*next); rem release extract
        endif

    rem --- Breaks

        if ope01a.ordinv_flag$<>"I" then continue
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if status = 999 then exitto std_exit

    rem --- Heading

        dim t[6]
        t[2]=ope01a.tax_amount
        t[3]=ope01a.freight_amt
        t[5]=ope01a.discount_amt
        t0=0
        gosub find_customer

    rem --- Void

        if ope01a.invoice_type$="V" then

            OutVect!.addItem(func.alphaMask(ope01a.customer_id$,m0$))
            OutVect!.addItem(ope01a.order_no$)
            OutVect!.addItem(ope01a.ar_inv_no$)
            OutVect!.addItem(func.formatDate(ope01a.invoice_date$))
            OutVect!.addItem("      * Void *")
            xwk = fnblank(7)
            OutVect!.addItem(arm01a.customer_name$)
            xwk = fnblank(11)

            l=l+3
            continue

        endif

    rem --- Determine GL Accounts

        dim y9$(80,"0")

    rem (1,10)  = AR
    rem (11,10) = Cash
    rem (21,10) = Sales
    rem (31,10) = Discount
    rem (41,10) = Freight
    rem (51,10) = Inventory Adjustment
    rem (61,10) = Inventory
    rem (71,10) = Cost of Goods Sold

        find record (arm10d_dev, key=firm_id$+"D"+ope01a.ar_dist_code$, dom=*next) arm10d0$

        y9$(1,10)  = arm10d0.gl_ar_acct$
        y9$(31,10) = arm10d0.gl_disc_acct$
        y9$(41,10) = arm10d0.gl_frgt_acct$

        if ope01a.cash_sale$="Y" and cvs(ope41a.cash_rec_cd$,2)<>"" then
            find record (arm10c_dev,key=firm_id$+"C"+ope41a.cash_rec_cd$,dom=*next) arm10c$
            y9$(1,10)=arm10c.gl_cash_acct$
        endif

    rem --- Setup Invoice GL Variables

        gldate$ = ope01a.invoice_date$
        memo$   = arm01a.customer_name$
        ref1$   = func.alphaMask(ope01a.customer_id$,m0$)
        ref2$   = ope01a.ar_inv_no$

    rem --- Position Invoice Detail File

        read (ope11_dev,key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$+ope01a.ar_inv_no$,dom=*next)

    rem --- Detail

        while more

            ope11a_key$=key(ope11_dev,end=*break)
            if ope11a_key.firm_id$     <> ope01a.firm_id$     then break
            if ope11a_key.customer_id$ <> ope01a.customer_id$ then break
            if ope11a_key.order_no$    <> ope01a.order_no$    then break
            if ope11a_key.ar_inv_no$    <> ope01a.ar_inv_no$   then break
            extract record (ope11_dev) ope11a$; rem Advisory Locking
            if pos(ope11a.trans_status$="ER")=0 then read (ope11_dev); continue
            find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*next) opm02a$; rem y0$, y1$

            if opm02a.dropship$<>"Y" or ars01a.dropshp_cost$<>"Y" then
                if pos(opm02a.line_type$="PS")>0 and ope11a.qty_shipped<>0 then 
                    gosub cal_cur_item_cost; rem "Go get current cost
                endif
            endif
            ope11a.trans_status$="R"     
            ope11a.mod_user$=sysinfo.user_id$
            ope11a.mod_date$=date(0:"%Yd%Mz%Dz")
            ope11a.mod_time$=date(0:"%Hz%mz")
            ope11a.batch_no$=batch_no$
            if gl_adt_no then ope11a.audit_number=gl_adt_no
            ope11a$ = field(ope11a$)
            write record (ope11_dev) ope11a$

            if ope11a.ext_price<0 then t[1]=t[1]+ope11a.ext_price
            if ope11a.ext_price>0 then t[0]=t[0]+ope11a.ext_price
            t0=t0+ope11a.ext_price
            t[4]=t[4]+round(ope11a.unit_cost*ope11a.qty_shipped,2)

        rem --- Write Misc

            opw21a.firm_id$    = firm_id$
            opw21a.ar_type$    = ope01a.ar_type$
            opw21a.line_code$  = ope11a.line_code$
            opw21a.invoice_amt = 0
            find record (opw21_dev, key=opw21a.firm_id$+opw21a.ar_type$+opw21a.line_code$, dom=*next) opw21a$
            opw21a.invoice_amt = opw21a.invoice_amt + ope11a.ext_price
            opw21a$ = field(opw21a$)
            write record (opw21_dev) opw21a$
            t[6]=t[6]+ope11a.ext_price

        rem --- Determine GL Postings Here

            if gl$="Y" then
                if opm02a.line_type$="S" then
                    if opm02a.dropship$="Y" then goto non_stock

                    if ars01a.dist_by_item$="N" then 
                        y9$(21,10) = arm10d0.gl_sls_acct$
                        y9$(61,10) = ivm01a.gl_inv_acct$
                        y9$(71,10) = ivm01a.gl_cogs_acct$
                        goto now_post; rem "Distribute by Customer
                    endif

                    find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=*next) ivm02a$
                    find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=*next) arm10d$
                    y9$(21,10) = arm10d.gl_sls_acct$
                    y9$(61,10) = arm10d.gl_inv_acct$
                    y9$(71,10) = arm10d.gl_cogs_acct$
                    goto now_post
                endif 

            rem --- Non-Stock & 'P' Types Here

                if pos(opm02a.line_type$="NP")<>0 then

                non_stock: 

                    find record (arm10d_dev,key=firm_id$+"D"+opm02a$.ar_dist_code$,dom=*next) arm10d$
                    y9$(21,10) = arm10d.gl_sls_acct$
                    y9$(61,10) = arm10d.gl_inv_acct$
                    y9$(71,10) = arm10d.gl_cogs_acct$

                    if ars01a.dist_by_item$="N" and opm02a.line_type$="N" and opm02a.dropship$="N" then
                        y9$(21,10) = arm10d0.gl_sls_acct$
                    endif
                    goto now_post

                endif

            rem --- Other Charges Here

                if opm02a.line_type$="O" then
                    y9$(21,10)=opm02a.gl_rev_acct$
                endif

            now_post: rem --- Now Post Debit/Credit

                precision 2
                ref3$    = ope11a.line_no$
                account$ = y9$(21,10)
                amount   = -ope11a.ext_price
                if ope01a.cash_sale$="Y" then ref3$=ope11a.line_no$+" (Cash)"
                gosub glrecap

                account$ = y9$(1,10)
                amount   = ope11a.ext_price
                gosub glrecap

                if opm02a.line_type$<>"O" and ope11a.unit_cost*ope11a.qty_shipped<>0 then
                    account$ = y9$(61,10)
                    amount   = (-ope11a.unit_cost)*ope11a.qty_shipped
                    gosub glrecap

                    account$ = y9$(71,10)
                    amount   = ope11a.unit_cost*ope11a.qty_shipped
                    if validlncd$<>"" then account$=ab2$(111,10)
                    gosub glrecap
                endif
            endif

            precision 4
        wend

    rem --- Print


        t=0
        t1=t[0]+t[1]-t[5]
        if t1<>0 then t=(t1-t[4])*100/t1
        if abs(t)>999 then t=sgn(t)*999.99

        update_restart$=""
        if pos(ope01a.lock_status$="12") then
            update_restart$="   ***"+ope01a.lock_status$+"***"
        endif

        OutVect!.addItem(func.alphaMask(ope01a.customer_id$,m0$)+update_restart$)
        OutVect!.addItem(ope01a.order_no$)
        OutVect!.addItem(ope01a.ar_inv_no$)
        OutVect!.addItem(func.formatDate(ope01a.invoice_date$))
        OutVect!.addItem(str(t[0]))
        OutVect!.addItem(str(t[1]))
        OutVect!.addItem(str(t[5]))
        OutVect!.addItem(str(t[2]))
        OutVect!.addItem(str(t[3]))
        OutVect!.addItem(str(t[0]+t[2]+t[1]-t[5]+t[3]))
        OutVect!.addItem(str(t[4]))
        OutVect!.addItem(str(t:"-##0.00%"))
        OutVect!.addItem(arm01a.customer_name$)
        xwk = fnblank(11)

        l=l+3
        if gl$="Y" then call pgmdir$+"glc_datecheck.aon",ope01a.invoice_date$,"N",period$,year$,glstatus
        if glstatus then call pgmdir$+"glc_datewarn.aon",printer_dev,ope01a.invoice_date$,glstatus,l,errors,status

        if stbl("+DTWARN_MSG",err=*endif)<>""
            OutVect!.addItem(stbl("+DTWARN_MSG"))
            xwk=fnblank(11)
        endif

        if items$<>"" then
            for x=1 to len(items$) step 20
                OutVect!.addItem("   **** Warning! Missing Serial Numbers for item: "+items$(x,20))
                xwk = fnblank(11)
                l=l+1
                missing_data=missing_data+1
            next x
        endif

        if g9$>=ope01a.invoice_date$ then j=0 else j=8

    rem --- t(0)=gross sales,t(1)=returns,t(2)=tax,t(3)=freight,t(4)=cogs,t(5)=discount,t(6)=extention,t=gross profit

        for x=0 to 5
            u[x]=u[x]+t[x]
            v[x+j]=v[x+j]+t[x]
        next x

    rem --- Territory Codes

        opw11a.firm_id$    = firm_id$
        opw11a.ar_type$    = ope01a.ar_type$
        opw11a.territory$  = ope01a.territory$
        opw11a.invoice_amt = 0
        find record (opw11_dev, key=opw11a.firm_id$+opw11a.ar_type$+opw11a.territory$, dom=*next) opw11a$
        opw11a.invoice_amt = opw11a.invoice_amt+t0
        opw11a$ = field(opw11a$)
        write record (opw11_dev) opw11a$

    rem --- Salesperson Codes

        opw31a.firm_id$     = firm_id$
        opw31a.ar_type$     = ope01a.ar_type$
        opw31a.slspsn_code$ = ope01a.slspsn_code$
        opw31a.invoice_amt  = 0
        find record (opw31_dev, key=opw31a.firm_id$+opw31a.ar_type$+opw31a.slspsn_code$, dom=*next) opw31a$
        opw31a.invoice_amt = opw31a.invoice_amt+t0
        opw31a$ = field(opw31a$)
        write record (opw31_dev) opw31a$

    rem --- GL Detail For Freight, Discount

        ref3$=""
        if ope01a.cash_sale$="Y" then ref3$="Cash Sale"

        if ope01a.freight_amt<>0 then
            account$=y9$(41,10)
            amount=-ope01a.freight_amt
            ref3$=""
            gosub glrecap
        endif

        if ope01a.discount_amt<>0 then
            account$=y9$(31,10)
            amount=ope01a.discount_amt
            gosub glrecap
        endif

    rem --- GL Detail for Taxes

        if ope01a.tax_amount<>0 then
            precision 4
            tax0=0
            tax1=0
            tax=ope01a.tax_amount
            taxttl=0
            start_block = 1

            if start_block then
                find record (opm06_dev,key=firm_id$+ope01a.tax_code$,dom=*endif) opm06a$
                tax = tax0*ope01a.taxable_amt/100

                precision 2
                tax = tax*1
                if tax1<>0 and abs(tax)>tax1 then tax=tax1*sgn(tax)
                taxttl = tax
                account$ = opm06a.gl_account$
                amount = -tax
                gosub glrecap

                for x9=1 to 10
                    precision 4
                    x1$=field(opm06a$,"ar_tot_code_"+str(x9:"00"))
                    if cvs(x1$,3)="" then continue
                    tax0 = 0
                    tax1 = 0
                    tax  = 0
                    find record (opm06_dev, key=firm_id$+x1$, dom=*continue) opm06a$
                    tax = tax0*ope01a.taxable_amt/100

                    precision 2
                    tax = tax*1
                    if tax1<>0 and abs(tax)>tax1 then tax=tax1*sgn(tax)
                    taxttl   = taxttl+tax
                    account$ = opm06a.gl_account$
                    amount   = -tax
                    gosub glrecap
                next x9
            endif

            precision 2
            if ope01a.tax_amount<>taxttl then
                tax      = ope01a.tax_amount-taxttl
                account$ = opm06a.gl_account$
                amount   = -tax
                gosub glrecap
            endif

        rem --- End of Tax routine

        endif

    rem --- Net AR/Cash Here

        if ope01a.tax_amount+ope01a.freight_amt-ope01a.discount_amt<>0 then
            account$ = y9$(1,10)
            amount   = ope01a.tax_amount+ope01a.freight_amt-ope01a.discount_amt
            gosub glrecap
        endif

    rem --- Posted flag

        nothing_posted = 0

    wend
    read(ope01_dev,end=*next); rem release extract

rem --- Totals

    if nothing_posted then
        msg_id$ = "OP_NOTHING_POSTED"
        gosub disp_message
        goto std_exit
    endif

    u=0
    u1=u[0]+u[1]-u[5]
    if u1<>0 then u=(u1-u[4])*100/u1
    if abs(u)>999 then u=sgn(u)*999.99

    xwk = fnblank(4)
    xwk = fnblank(8)
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    OutVect!.addItem("Register Totals:")
    xwk = fnblank(3)
    OutVect!.addItem(str(u[0]))
    OutVect!.addItem(str(u[1]))
    OutVect!.addItem(str(u[5]))
    OutVect!.addItem(str(u[2]))
    OutVect!.addItem(str(u[3]))
    OutVect!.addItem(str(u[0]+u[1]+u[2]+u[3]-u[5]))
    OutVect!.addItem(str(u[4]))
    OutVect!.addItem(str(u:"-##0.00%"))

    xwk = fnblank(4)
    xwk = fnblank(8)
    v=0
    v1=v[0]+v[1]-v[5]
    if v1<>0 then v=(v1-v[4])*100/v1
    if abs(v)>999 then v=sgn(v)*999.99

    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    OutVect!.addItem("M-T-D Totals:")
    xwk = fnblank(3)
    OutVect!.addItem(str(v[0]))
    OutVect!.addItem(str(v[1]))
    OutVect!.addItem(str(v[5]))
    OutVect!.addItem(str(v[2]))
    OutVect!.addItem(str(v[3]))
    OutVect!.addItem(str(v[0]+v[1]+v[2]+v[3]-v[5]))
    OutVect!.addItem(str(v[4]))
    OutVect!.addItem(str(v:"-##0.00%"))

    xwk = fnblank(4)
    xwk = fnblank(8)

    if v[8]<>0 or v[9]<>0 or v[10]<>0 or v[11]<>0 or v[12]<>0 or v[13]<>0 then
        y=0
        y1=v[8]+v[9]-v[13]
        if y1<>0 then y=(y1-v[12])*100/y1
    endif

    if abs(y)>999 then y=sgn(y)*999.99

    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    OutVect!.addItem("Next M-T-D Totals:")
    xwk = fnblank(3)
    OutVect!.addItem(str(v[8]))
    OutVect!.addItem(str(v[9]))
    OutVect!.addItem(str(v[13]))
    OutVect!.addItem(str(v[10]))
    OutVect!.addItem(str(v[11]))
    OutVect!.addItem(str(v[8]+v[9]+v[10]+v[11]-v[13]))
    OutVect!.addItem(str(v[12]))
    OutVect!.addItem(str(y:"-##0.00%"))

    xwk = fnblank(4)
    xwk = fnblank(8)

rem --- Run overlay

    if ars01a.cash_sale$<>"N" then
        update$       = pgmdir$+"opr_salesregister_o1.aon"
        overlay$      = update$
        out_action$   = "PRT-PDF"
        next_overlay$ = overlay$
        goto std_exit
    else
        update$       = pgmdir$+"opr_salesregister_o2.aon"
        overlay$      = update$
        out_action$   = "PRT-PDF"
        next_overlay$ = overlay$
        goto std_exit
    endif

rem --- Subroutines

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #endinclude disp_message.src


find_customer: rem --- Find Customer

    if ope01a.cash_sale$="Y" then
        if cvs(ope41a.customer_name$,2)<>"" then
            arm01a.customer_name$ = ope41a.customer_name$
            return
        endif
    endif

    arm01a.customer_name$="Not On File"
    find record (arm01_dev, key=firm_id$+ope01a.customer_id$, dom=*next) arm01a$

    return

lifo_fifo: rem --- LIFO/FIFO

    cost       = ope11a.unit_cost
    ret_cost   = 0
    lf_action$ = ivs01a.lifofifo$+"I"
    lf_date$   = ope01a.invoice_date$
    dim lf_item$[10]
    lf_item$[0] = firm_id$
    lf_item$[1] = ope11a.warehouse_id$
    lf_item$[2] = ope11a.item_id$

rem --- Inquiry On Tier Cost For Returned Items

    if ope11a.qty_shipped<0 then
        lf_action$(2,1)="R"
        call pgmdir$+"ivc_lifofifo.aon",lf_action$,"I",lf_date$,lf_channels[all],lf_tmpls$[all],lf_item$[all],i[2],abs(ope11a.qty_shipped),cost,ret_cost,status
        if status then exitto std_exit
        if ret_cost<>0 then cost=ret_cost
    endif

rem --- Report On Tier Cost For Sold Items

    call pgmdir$+"ivc_lifofifo.aon",lf_action$,"R",lf_date$,lf_channels[all],lf_tmpls$[all],lf_item$[all],i[2],abs(ope11a.qty_shipped),cost,ret_cost,status
    if status = 999 then exitto std_exit
    if ret_cost<>0 then icost=ret_cost
    ivw05a.firm_id$=ope11a.firm_id$
    ivw05a.ar_type$=ope11a.ar_type$
    ivw05a.customer_id$=ope11a.customer_id$
    ivw05a.order_no$=ope11a.order_no$
    ivw05a.item_id$=ope11a.item_id$
    ivw05a.line_no$=ope11a.line_no$
    ivw05_key$=ivw05a.firm_id$+ivw05a.ar_type$+ivw05a.customer_id$+ivw05a.order_no$+ivw05a.item_id$+ivw05a.line_no$
    extract record (ivw05_dev,key=ivw05_key$,dom=*next)x$; rem Advisory Locking
    ivw05a$ = field(ivw05a$)
    write record (ivw05_dev) ivw05a$

    return

cal_cur_item_cost: rem --- Calculate Current Item Cost

rem dim d2$(62),d[20],h[2]
    total_shipped=0
    total_ext_cost=0
    icost=ope11a.unit_cost
    dim ivm02a$:fattr(ivm02a$)
    found = 0
    start_block = 1

    if start_block then
        find record (ivm01_dev,key=firm_id$+ope11a.item_id$,dom=*endif) ivm01a$
        found = 1
    endif

    if !found then
        items$ = items$ + pad(ope11a.item_id$, 20)
    else
        find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=*next) ivm02a$
        if ivm02a.unit_cost then icost=ivm02a.unit_cost
        if lf$="Y" then gosub lifo_fifo
    
        if ls$<>"Y" or ivm01a.lotser_item$<>"Y" then
            ope11a.unit_cost=icost
        else
            ls_start$ = firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.ar_inv_no$+ope11a.internal_seq_no$
            read (ope21_dev, key=ls_start$, dom=*next)
    
            while more
                ope21a_key$=key(ope21_dev,end=*break)
                if pos(ls_start$=ope21a_key$) <> 1 then break
                extract record (ope21_dev) ope21a$; rem Advisory Locking
                if pos(ope21a.trans_status$="ER")=0 then read (ope21_dev); continue
    
                if ivm01a.inventoried$<>"Y" then 
                    ope21a.unit_cost=icost
                    ope21a.trans_status$="R"     
                    ope21a.mod_user$=sysinfo.user_id$
                    ope21a.mod_date$=date(0:"%Yd%Mz%Dz")
                    ope21a.mod_time$=date(0:"%Hz%mz")
                    ope21a.batch_no$=batch_no$
                    if gl_adt_no then ope21a.audit_number=gl_adt_no
                    ope21a$ = field(ope21a$)
                    write record (ope21_dev) ope21a$; rem "Reset cost if not inventoried
                else
                    read (ope21_dev)
                endif
    
                total_shipped  = total_shipped  + ope21a.qty_shipped
                total_ext_cost = total_ext_cost + ope21a.qty_shipped*ope21a.unit_cost
            wend
    
            if total_shipped<>ope11a.qty_shipped then
                items$ = items$ + pad(ope11a.item_id$, 20)
            endif
    
            if total_shipped then ope11a.unit_cost=total_ext_cost/total_shipped
        endif
    endif

    return

rem --- Standard G/L Recap Routine

glrecap: 

    if gl$="Y" then
        call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,0,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
        if status = 999 then exitto std_exit
    endif

    return

rem --- Functions

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
