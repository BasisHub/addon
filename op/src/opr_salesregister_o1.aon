rem --- Sales Register (Cash Sales)
rem --- Program opr_hb v8.0.0 29Jan2008 (opr_hb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/29/2008 02:20:11)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    next_overlay$=""; rem --- clear next_var and outvect! so bas_process_end doesn't loop...i.e., don't run anything after this

rem --- Use statements

    use ::ado_func.src::func
    use ::sys/prog/bao_valid_card.bbj::CreditCard

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!
    declare CreditCard credCard!    

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Initialize Data

    more=1
    precision 4
    dim d[1],r[2,1]
    l=l9+1
    headings$[3]="Cash Receipts Summary"
    t0$=""
    t9$=""

rem --- Retrieve template for OPW_INVCASH record key

    call sypdir$+"bac_key_template.bbj","OPW_INVCASH","PRIMARY",opw41a_key_tpl$,table_chans$[all],status$
    dim opw41a_key$:opw41a_key_tpl$

rem --- Inits

    if ars01a.cash_sale$<>"N" then

        dim columns$[8,10]
        columns = 8

        columns$[0,0]="Cust.No & Name", columns$[0,1]="C", columns$[0,2]="25"
        columns$[1,0]="Invoice.No",     columns$[1,1]="C", columns$[1,2]="8"
        columns$[2,0]="Invoice Date",   columns$[2,1]="C", columns$[2,2]="10"
        columns$[3,0]="Pay Type",       columns$[3,1]="C", columns$[3,2]="8"
        columns$[4,0]="Number",         columns$[4,1]="C", columns$[4,2]="15"
        columns$[5,0]="Exp",            columns$[5,1]="C", columns$[5,2]="8"
        columns$[6,0]="Amount",         columns$[6,1]="N", columns$[6,2]=str(m1), columns$[6,3]=m1$, columns$[6,10]="T"
        columns$[7,0]="Memo",           columns$[7,1]="C", columns$[7,2]="8"
        columns$[8,0]="Amount",         columns$[8,1]="N", columns$[8,2]=str(m1), columns$[8,3]=m1$, columns$[8,10]="T"

        call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

        call pgmdir$+"adc_progress.aon","N","","","","",0,ope41_dev,1,meter_num,status

    rem --- Sort Cash

        read (ope41_dev,key=firm_id$+"E",knum="AO_STATUS",dom=*next)

    rem --- Main Read

        while more
            read record (ope41_dev,end=*break) ope41a$
            if firm_id$<>ope41a.firm_id$ then break
            if pos(ope41a.trans_status$="ER")=0 then continue
            find record (ope01_dev, key=ope41a.firm_id$+ope41a.ar_type$+ope41a.customer_id$+ope41a.order_no$+ope41a.ar_inv_no$, dom=*continue) ope01a$
            if ope01a.print_status$<>"Y" or ope01a.lock_status$<>"S" then continue
            if pos(ope01a.trans_status$="ER")=0 then continue            

        rem --- Write Record

            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            if status=999 then exitto std_exit

            opw41a.firm_id$      = ope41a.firm_id$
            opw41a.ar_type$      = ope41a.ar_type$
            opw41a.invoice_date$ = ope41a.invoice_date$
            opw41a.ar_inv_no$    = ope41a.ar_inv_no$
            opw41a.customer_id$  = ope41a.customer_id$
            opw41a.order_no$     = ope41a.order_no$
            if seq$="C" then opw41a.ar_inv_no$=""
            write record (opw41_dev) opw41a$
        wend

    rem --- Print

        rem call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        rem if status=999 then exitto std_exit
        rem call pgmdir$+"adc_progress.aon","N","","","","",0,ope41_dev,1,meter_num,status
        rem if status=999 then exitto std_exit

        read (ope41_dev,key=firm_id$+"E",knum="AO_STATUS",dom=*next)

		rem --- Main Read

        while more
            opw41a_key$=key(opw41_dev,end=*break)
            if pos(firm_id$=opw41a_key$)<>1 then break
            read (opw41_dev)
            if pos(ope41a.trans_status$="ER")=0 then continue

        rem --- Breaks

            if opw41a_key.invoice_date$<>t0$ then 
                i=0
                gosub date_break
            endif

            extractrecord (ope41_dev,key=opw41a_key.firm_id$+opw41a_key.ar_type$+opw41a_key.customer_id$+opw41a_key.order_no$+opw41a_key.ar_inv_no$,knum="PRIMARY",dom=*continue) ope41a$
            ope41a.trans_status$="R"     
            ope41a.mod_user$=sysinfo.user_id$
            ope41a.mod_date$=date(0:"%Yd%Mz%Dz")
            ope41a.mod_time$=date(0:"%Hz%mz")
            ope41a$ = field(ope41a$)
            write record (ope41_dev) ope41a$

            dim arm10c$:fattr(arm10c$)
            find record (arm10c_dev,key=firm_id$+"C"+ope41a.cash_rec_cd$,dom=*next) arm10c$

        rem --- Get Customer

            start_block = 1

            if start_block then
                find record (arm01_dev,key=firm_id$+ope41a.customer_id$,dom=*endif) arm01a$
                b1$=arm01a.customer_name$
            endif

            if ars01a.cash_sale$="Y" then
                if ope41a.customer_id$=ars01a.customer_id$ then
                    if cvs(ope41a.customer_name$,2)<>"" then
                        b1$=ope41a.customer_name$
                    endif
                endif
            endif

        rem --- Print

            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            if status=999 then exitto std_exit

            OutVect!.addItem(func.alphaMask(ope41a.customer_id$,m0$)+" "+arm01a.customer_name$)
            OutVect!.addItem(ope41a.ar_inv_no$)
            OutVect!.addItem(func.formatDate(ope41a.invoice_date$))
            OutVect!.addItem(ope41a.cash_rec_cd$)

            if arm10c.trans_type$="P" then
                credCard! = new CreditCard()
                cc_config$="BAR_CREDIT_CARD"
                cc_no$=""
                cc_no$=credCard!.getMaskedCardValue(credCard!.decryptCard(cvs(ope41a.credit_card_no$,2),cc_config$),err=*next)            
                OutVect!.addItem(cc_no$)
                OutVect!.addItem(func.formatDate(ope41a.expire_date$))
                OutVect!.addItem(str(ope41a.invoice_amt))
                xwk = fnblank(2)
            else
				if arm10c.trans_type$="C" then
					xwk = fnblank(3)
					OutVect!.addItem(ope41a.ar_check_no$)
					OutVect!.addItem(str(ope41a.invoice_amt))
				else
					xwk = fnblank(3)
					OutVect!.addItem(ope41a.payment_id$)
					OutVect!.addItem(str(ope41a.invoice_amt))
				endif
            endif

            l=l+1

        rem --- Totals

            for i=0 to 1
                if arm10c.trans_type$="$" then r[0,i]=r[0,i]+ope41a.invoice_amt
                if arm10c.trans_type$="C" then r[1,i]=r[1,i]+ope41a.invoice_amt
                if arm10c.trans_type$="P" then r[2,i]=r[2,i]+ope41a.invoice_amt
            next i

        wend

    rem ----- Totals

        t9$="E"

        for i=0 to 1
            gosub date_break
        next i

    endif
    
rem --- Next overlay    

    update$       = pgmdir$+"opr_salesregister_o2.aon"
    overlay$      = update$
    out_action$   = "PRT-PDF"
    next_overlay$ = overlay$
    goto std_exit

date_break: rem --- Date Break

    if t0$<>"" then  

        if i=1 then 
            x$="Total All Cash Receipts"
        else
            x$="Total For "+func.formatDate(t0$)
        endif

        xwk = fnblank(9)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        OutVect!.addItem(x$)
        xwk = fnblank(3)
        OutVect!.addItem("Credit Cards:")
        xwk = fnblank(1)
        OutVect!.addItem(str(r[2,i]))
        OutVect!.addItem("Cash:")
        OutVect!.addItem(str(r[0,i]))
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        xwk = fnblank(7)
        OutVect!.addItem("Checks:")
        OutVect!.addItem(str(r[1,i]))
        l=l+4
    endif

    if t9$="" then 
        t0$=opw41a_key.invoice_date$

        for x=0 to 2
            for y=0 to i
                r[x,y]=0
            next y
        next x
    endif

    return

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
    
rem #endinclude std_end.src

    end
