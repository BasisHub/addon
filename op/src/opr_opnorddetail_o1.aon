rem --- Open Order Detail Report
rem --- Program opr_ib v8.0.0 25Jan2008 (opr_ib)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/25/2008 09:23:17)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    use java.util.Iterator
    use java.util.TreeMap

    declare Iterator iter!
    declare TreeMap product_typeMap!
    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!
    declare BBjVector t9!

    product_typeMap! = new TreeMap()
    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Parameters

    h0=132
    headings=9

rem --- Initializations

    ctrl=0
    more=1
    recs=0
    total_recs=0

    precision num(ivs01a.precision$)
    dim r[3,4],headings$[headings+1]
    dim s[2],t[2],u[2],y[20]
    dim h[14],o[14],lines$[2],z0$(32)
    h0=132
    h=0,l9=59,l=l9+1,when$=sysinfo.system_date$,clock$=""
    m9$="-###0.00%"
    r9$="SPN",x2$=""

    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,m0,0
    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,m1,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,m2,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,m3,0
    call pgmdir$+"adc_getmask.aon","","IV","P",imask$,m4$,m4,0

    m9=len(m9$)
    lines$[0]="Standard Items"
    lines$[1]="Promotional Items"
    lines$[2]="Non-Stock Items"
    if ivs01a.lotser_flag$="S" then  x2$="Ser#"
    if ivs01a.lotser_flag$="L" then  x2$="Lot#"

rem --- column heading

    dim columns$[12,10]
    columns = 12
    columns$[0,0]="Customer^Number",columns$[0,1]="C",columns$[0,2]="6"
    columns$[1,0]="Customer Name",  columns$[1,1]="C",columns$[1,2]="15"
    columns$[2,0]="Order^Number",   columns$[2,1]="C",columns$[2,2]="16",  columns$[2,10]="T"
    columns$[3,0]="Order Date",      columns$[3,1]="C",columns$[3,2]="10", columns$[3,10]="T"
    columns$[4,0]="Ship Date",       columns$[4,1]="C",columns$[4,2]="10", columns$[4,10]="T"
    columns$[5,0]="By",              columns$[5,1]="N",columns$[5,2]="10", columns$[5,10]="T"
    columns$[6,0]="Sls",             columns$[6,1]="N",columns$[6,2]="10",  columns$[6,10]="T"
    columns$[7,0]="P.O  Number",     columns$[7,1]="N",columns$[7,2]="10"
    columns$[8,0]="Ship Via",        columns$[8,1]="N",columns$[8,2]="10", columns$[8,10]="T"
    columns$[10,0]="Terms",          columns$[10,1]="C",columns$[10,2]="14",columns$[10,10]="T"
    columns$[11,0]="Tax Code",       columns$[11,1]="C",columns$[11,2]="8", columns$[11,10]="T"
    columns$[12,0]="Prntd",          columns$[12,1]="C",columns$[12,2]="7", columns$[12,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Headings

    if s6$="A" then x1$=""
    if s6$="P" then x1$=Translate!.getTranslation("AON_PRINTED")
    if s6$="U" then x1$=Translate!.getTranslation("AON_UNPRINTED")
    x3$=""
    for i=1 to len(s4$)
        if len(x3$) and s4$(i,1)<>"N" then x3$=x3$+"+"
        if s4$(i,1)="O" then
            x$=Translate!.getTranslation("AON_OPEN/")+"/"
            x3$=x3$+x$(1,pos("/"=x$)-1)
        endif
        if s4$(i,1)="Q" then
            x$=Translate!.getTranslation("AON_QUOTED/")+"/"
            x3$=x3$+x$(1,pos("/"=x$)-1)
        endif
        if s4$(i,1)="B" then x3$=x3$+Translate!.getTranslation("AON_BACKORDERED")
        if s4$(i,1)="C" then x3$=x3$+Translate!.getTranslation("AON_CREDIT_HELD")
    next i
    if len(s4$)=5 or (len(s4$)=4 and pos("N"=s4$)=0) then
        x3$=Translate!.getTranslation("AON_ALL")
        if len(x1$) then x3$=x3$+" "+x1$
        x3$=x3$+" "+Translate!.getTranslation("AON_ORDERS")
    else
        if s4$="N" then x3$=x3$+"Non Stock"+" "
        if len(x1$) then x3$=x3$+" "+x1$
        x3$=x3$+" "+Translate!.getTranslation("AON_ORDERS")+" "+Translate!.getTranslation("AON_ONLY")
    endif
    h8$=x3$

    if s5$="" then h9$="Entered By: All" else h9$="Entered By :"+s5$

    if s7$="" then
        h10$="All"
    else
        h10$=s7$
    endif

    h10$="Salesperson: "+h10$
    headings$[0]=n1$
    headings$[1]=n4$ 
    headings$[7]=h9$

    bs$="Non Stock Option: "
    if s8$="A" or s8$="" then  bs$=bs$+"All"
    if s8$="P" then  bs$=bs$+"With Associated PO's"
    if s8$="N" then  bs$=bs$+"Without Associated PO's"
    headings$[8]=bs$

    if s0$=""headings$[3]="Begining Customer: First" else headings$[3]="Begining Customer:"+s0$
    if s1$="" headings$[3]=headings$[3]+" -- Ending Customer: Last" else headings$[3]=headings$[3]+" -- Ending Customer: "+s1$
    if s2$="" headings$[4]="Begining Order Date: First" else headings$[4]="Begining Order Date "+s2$                
    if s3$="" headings$[4]=headings$[4]+" -- Ending Order Date: Last" else headings$[4]=headings$[4]+" -- Ending Order Date: "+s3$
    headings$[5]=h8$
    headings$[6]=h10$

rem --- Background

    call pgmdir$+"adc_progress.aon","N","OPE_ORDHDR","","","",0,ope01_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem ---Initial File Read

    read (ope01_dev,key=firm_id$+"  "+s0$,dom=*next)

rem --- retrieve template for OPE_ORDHDR record key

    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDHDR","PRIMARY",ope01a_key_tpl$,table_chans$[all],status$
    dim ope01a_key$:ope01a_key_tpl$

rem --- retrieve template for OPE_ORDDET record key

    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDDET","AO_CUST_ORD_LINE",ope11a_key_tpl$,table_chans$[all],status$
    dim ope11a_key$:ope11a_key_tpl$

rem --- retrieve template for OPE_ORDLSDET record key

    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDLSDET","PRIMARY",ope21a_key_tpl$,table_chans$[all],status$
    dim ope21a_key$:ope21a_key_tpl$

rem --- Main Loop Starts

    while more
        ope01a_key$=key(ope01_dev,end=end_of_report)
        if pos(firm_id$+"  "=ope01a_key$)<>1 then break
        if s1$<>"" and ope01a_key.firm_id$+ope01a_key.ar_type$+ope01a_key.customer_id$>firm_id$+"  "+s1$ then break
        read record (ope01_dev,key=ope01a_key$) ope01a$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

        if s2$<>"" and ope01a.order_date$<s2$ then continue
        if s3$<>"" and ope01a.order_date$>s3$ then continue
        if s5$<>"" and ope01a.ord_taken_by$<>s5$ then continue
        if s7$<>"" and ope01a.slspsn_code$<>s7$ then continue
        if ope01a.ordinv_flag$="I" then continue
        stat$="Order"

        if ope01a.invoice_type$="P" then
            stat$="Quote"
        else
            if ope01a.credit_flag$="C" then
                stat$="Credit"
            else
                if ope01a.credit_flag$="R" then
                    stat$="Release"
                else
                    if ope01a.backord_flag$="B" then
                        stat$="B/O"
                    endif
                endif
            endif
        endif

        if s6$<>"A" then
            find (ope04_dev,key=firm_id$+"O"+"  "+ope01a.customer_id$+ope01a.order_no$,dom=label_one)
            if s6$="P" then continue
            goto label_two

        label_one: 
            if s6$="U" then continue
        endif

    label_two: 

        if s4$="N" then
            if ope01a.invoice_type$<>"P" then
                goto heading_1
            else
                continue
            endif
        endif

        if (pos("O"=s4$) <= 0 or ope01a.backord_flag$  = "B" or ope01a.credit_flag$="C" or ope01a.invoice_type$="P") and
:           (pos("B"=s4$)  = 0 or ope01a.backord_flag$ <> "B") and 
:           (pos("C"=s4$)  = 0 or ope01a.credit_flag$  <> "C") and
:           (pos("Q"=s4$) <= 0 or ope01a.invoice_type$ <> "P") 
:       then 
            continue
        endif

    heading_1: rem --- Heading

        gosub get_cust
        if ope01a.invoice_type$="V" then

        rem --- Void

            OutVect!.addItem(fnmask$(ope01a.customer_id$(1,m0),m0$))
            OutVect!.addItem(arm01a.customer_name$)
            OutVect!.addItem(ope01a.order_no$)
            OutVect!.addItem(ope01a.ar_inv_no$)
            OutVect!.addItem(fndate$(ope01a.invoice_date$))
            OutVect!.addItem(ope01a.ord_taken_by$)
            OutVect!.addItem(ope01a.slspsn_code$)
            OutVect!.addItem(" *** VOID ***")
            xwk = fnblank(5) 
            l=l+2
            recs=recs+1
            continue

        endif

    rem --- Print

        prth$="N"
        if s4$<>"N" then gosub ord_header
        read (ope11_dev,key=ope01a_key.firm_id$+ope01a_key.ar_type$+ope01a_key.customer_id$+ope01a.order_no$+"000",knum="AO_CUST_ORD_LINE",dom=label_three)

    rem --- Main order detail loop

    label_three: 

        while more

            ope11a_key$=key(ope11_dev,end=*break)
            if ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$<>ope01a_key.firm_id$+ope01a_key.ar_type$+ope01a_key.customer_id$+ope01a.order_no$ then break
            read record (ope11_dev) ope11a$
            find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*continue) opm02a$
            if s4$="N" and opm02a.line_type$<>"N" then continue
            gosub pos_for_nonstock
            if s4$="N" and pof$<>"Y" then continue
            if prth$="N" then gosub ord_header
            desc$=ope11a.order_memo$

            if pos(opm02a.line_type$="SP")<>0 then
                dim d[9],d1$(i[3]+i[4]+i[5])
                find record (ivm01_dev,key=firm_id$+ope11a.item_id$,dom=label_five) ivm01a$

                if opm02a.dropship$<>"Y" or ars01a.dropshp_cost$<>"Y" then
                    find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$,dom=label_four) ivm02a$
                    ope11a.unit_cost=ivm02a.unit_cost
                endif

            label_four: 
                if cvs(desc$,2)="" then  desc$=fnitem$(ivm01a.item_desc$,i[3],i[4],i[5])
            endif

        label_five: 

			cost=round(ope11a.unit_cost*ope11a.qty_ordered,2)
            price=round(ope11a.unit_price*ope11a.qty_ordered,2)

            if opm02a.line_type$="O" then
                if ope11a.commit_flag$="Y" or ope01a.invoice_type$="P" then
                    cost=ope11a.unit_cost
                    price=ope11a.ext_price
                else
                    cost=ope11a.unit_cost
                    price=ope11a.unit_price
                endif
            endif

            gosub print_detail
            recs=recs+1
            s[0]=s[0]+price
            s[1]=s[1]+cost
            s[2]=s[2]+ope11a.comm_percent
            s0=s0+1
            u[0]=u[0]+price
            u[1]=u[1]+cost
            u[2]=u[2]+ope11a.comm_percent
            r9=pos(opm02a.line_type$=r9$)

            if r9 then
                r[r9-1,0]=r[r9-1,0]+price
                r[r9-1,1]=r[r9-1,1]+cost
                r[r9-1,2]=r[r9-1,2]+ope11a.qty_ordered
                r[r9-1,3]=r[r9-1,3]+ope11a.qty_backord
                r[r9-1,4]=r[r9-1,4]+ope11a.qty_shipped
            endif

            if opm02a.line_type$="O" then  r[3,0]=r[3,0]+price
            if opm02a.prod_type_pr$="N" then continue
            if product_typeMap!.containsKey(ope11a.product_type$) then
                t9!=cast(BBjVector, product_typeMap!.get(ope11a.product_type$))
                t9!.setItem(0, price+cast(BBjNumber, t9!.getItem(0)))
                t9!.setItem(1, cost+cast(BBjNumber, t9!.getItem(1)))
                t9!.setItem(2, ope11a.comm_percent+cast(BBjNumber, t9!.getItem(2)))
                t9!.setItem(3, ope11a.qty_ordered+cast(BBjNumber, t9!.getItem(3)))
                product_typeMap!.put(ope11a.product_type$, t9!)
            else
                t9!=BBjAPI().makeVector()
                t9!.addItem(price)
                t9!.addItem(cost)
                t9!.addItem(ope11a.comm_percent)
                t9!.addItem(ope11a.qty_ordered)
                product_typeMap!.put(ope11a.product_type$, t9!)
            endif
        wend

    rem --- Order Totals

        if s0<>0 or s4$<>"N" then
            if s0>=2 then

                xwk = fnblank(13)
                TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                xwk = fnblank(7)
                OutVect!.addItem(Translate!.getTranslation("AON_ORDER")+" "+Translate!.getTranslation("AON_TOTAL:"))
                OutVect!.addItem(str(s[0]:m1$)+$00$+"R")
                xwk = fnblank(1)
                OutVect!.addItem(str(s[1]:m1$)+$00$+"R")
                OutVect!.addItem(str(s[0]-s[1]:m1$)+$00$+"R")
                OutVect!.addItem(str(fnd(s[0]-s[1],s[0]):m9$)+$00$+"R")

            endif

            t2=t2+1
            u2=u2+1

        endif

        dim s[2]
        s0=0
    wend

rem --- End of Main Loop

end_of_report: rem --- Order Totals

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    xwk = fnblank(13)
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    OutVect!.addItem(str(u2)+" "+" Orders Listed")
    xwk = fnblank(6)
    OutVect!.addItem("Total For Report")
    OutVect!.addItem(str(u[0]:m1$)+$00$+"R")
    xwk = fnblank(1)
    OutVect!.addItem(str(u[1]:m1$)+$00$+"R")
    OutVect!.addItem(str(u[0]-u[1]:m1$)+$00$+"R")
    OutVect!.addItem(str(fnd(u[0]-u[1],u[0]):m9$)+$00$+"R")

rem --- Product Totals

    if product_typeMap!.size()>0 then
        dim t[3]
        l=l+product_typeMap!.size()+7
        gosub prod_subtotals

    rem --- Print Product Types

        iter! = product_typeMap!.keySet().iterator()
        while iter!.hasNext()
        product_type$=cast(BBjString, iter!.next())
        t9!=cast(BBjVector, product_typeMap!.get(product_type$))
        price=cast(BBjNumber, t9!.getItem(0))
        cost=cast(BBjNumber, t9!.getItem(1))
        comm_percent=cast(BBjNumber, t9!.getItem(2))
        qty_ordered=cast(BBjNumber, t9!.getItem(3))
        if price=0 and cost=0 and comm_percent=0 then continue

        ivm10a.code_desc$="Unknown Product Type"
        find record (ivm10_dev,key=firm_id$+"A"+product_type$,dom=*next) ivm10a$

        OutVect!.addItem(product_type$+"  "+ivm10a.code_desc$)
        xwk = fnblank(1)
            OutVect!.addItem(str(qty_ordered:m2$)+$00$+"R")
            OutVect!.addItem(str(price:m1$)+$00$+"R")
            OutVect!.addItem(str(cost:m1$)+$00$+"R")
            OutVect!.addItem(str(price-cost:m1$)+$00$+"R")
            OutVect!.addItem(str(fnd(price-cost,price):m9$)+$00$+"R")
            xwk = fnblank(6)

            t[0]=t[0]+price
            t[1]=t[1]+cost
            t[2]=t[2]+comm_percent
            t[3]=t[3]+qty_ordered
            l=l+1
        wend

    rem --- Report Totals

        xwk = fnblank(13)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        OutVect!.addItem("Totals For Report")
        xwk = fnblank(1)
        OutVect!.addItem(str(t[3]:m2$)+$00$+"R")
        OutVect!.addItem(str(t[0]:m1$)+$00$+"R")
        OutVect!.addItem(str(t[1]:m1$)+$00$+"R")
        OutVect!.addItem(str(t[0]-t[1]:m1$)+$00$+"R")
        OutVect!.addItem(str(fnd(t[0]-t[1],t[0]):m9$)+$00$+"R")
        xwk = fnblank(6)
    endif

label_six: 

	dim t[3]
    xwk = fnblank(13)
    xwk = fnblank(13)
    OutVect!.addItem("Line Type Totals")
    xwk = fnblank(12)
    xwk = fnblank(13)
    OutVect!.addItem("Line Type")
    xwk = fnblank(1)
    OutVect!.addItem("Order "+$00$+"R")
    OutVect!.addItem("B/O "+$00$+"R")
    OutVect!.addItem("Ship "+$00$+"R")
    OutVect!.addItem("Sales "+$00$+"R")
    OutVect!.addItem("Cost "+$00$+"R")
    xwk = fnblank(6)
    xwk = fnblank(13)

    for i=0 to 2
        if r[i,0]=0 and r[i,1]=0 and r[i,2]=0 and r[i,3]=0 and r[i,4]=0 then continue
        OutVect!.addItem(lines$[i])
        xwk = fnblank(1)
        OutVect!.addItem(str(r[i,2]:m2$)+$00$+"R")
        OutVect!.addItem(str(r[i,3]:m2$)+$00$+"R")
        OutVect!.addItem(str(r[i,4]:m2$)+$00$+"R")
        OutVect!.addItem(str(r[i,0]:m1$)+$00$+"R")
        OutVect!.addItem(str(r[i,1]:m1$)+$00$+"R")
        xwk = fnblank(6)
        t[0]=t[0]+r[i,0]
        t[1]=t[1]+r[i,1]
    next i

    if r[3,0]<>0 then
        OutVect!.addItem("Other Charges")
        xwk = fnblank(4)
        OutVect!.addItem(str(r[3,0]:m1$)+$00$+"R")
        xwk = fnblank(7)
        t[0]=t[0]+r[3,0]
    endif

    xwk = fnblank(13)
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    OutVect!.addItem("Totals For Report")
    xwk = fnblank(4)
    OutVect!.addItem(str(t[0]:m1$)+$00$+"R")
    OutVect!.addItem(str(t[1]:m1$)+$00$+"R")
    xwk = fnblank(6)
    
    out_action$="FORMAT"
    goto std_exit

ord_header: rem --- Print Order Header

    prth$="Y"
    gosub get_terms_code
    width=39-len(stat$)-m0-2
    if width>30 then  width=30

    xwk = fnblank(13)
    OutVect!.addItem(fnmask$(ope01a.customer_id$(1,m0),m0$))
    OutVect!.addItem(arm01a.customer_name$)
    OutVect!.addItem(stat$+" "+ope01a.order_no$)
    OutVect!.addItem(fndate$(ope01a.order_date$))
    OutVect!.addItem(fndate$(ope01a.shipmnt_date$))
    OutVect!.addItem(ope01a.ord_taken_by$)
    OutVect!.addItem(ope01a.slspsn_code$)
    OutVect!.addItem(ope01a.customer_po_no$)
    OutVect!.addItem(ope01a.ar_ship_via$)
    OutVect!.addItem(ope01a.ar_dist_code$)
    OutVect!.addItem(w$)
    OutVect!.addItem(ope01a.tax_code$)
    OutVect!.addItem(ope01a.print_status$)
    recs=recs+1

    if ope01a.lock_status$<>"N" then 
        xwk = fnblank(2)
        OutVect!.addItem("**Locked Flag="+ope01a.lock_status$+"**")
        xwk = fnblank(10)
    endif

    xwk = fnblank(13)
    OutVect!.addItem("Cd   Whs"+$00$+"B")
    OutVect!.addItem("Prd"+$00$+"B")
    OutVect!.addItem("Item"+$00$+"B")
    OutVect!.addItem("Order "+$00$+"RB")
    OutVect!.addItem("Back Order "+$00$+"RB")
    OutVect!.addItem("Ship "+$00$+"RB")
    OutVect!.addItem("Disc pct"+$00$+"RB")
    OutVect!.addItem("Price "+$00$+"RB")
    OutVect!.addItem("Ext. Price "+$00$+"RB")
    OutVect!.addItem("Cost "+$00$+"RB")
    OutVect!.addItem("Extended Cost "+$00$+"RB")
    OutVect!.addItem("Profit "+$00$+"RB")
    OutVect!.addItem("GP%"+$00$+"RB")

    return

prod_subtotals: rem --- Product subtotals heading

    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))

    xwk = fnblank(13)
    OutVect!.addItem("Product Totals")
    xwk = fnblank(12)
    xwk = fnblank(13)
    OutVect!.addItem("Product")
    xwk = fnblank(1)
    OutVect!.addItem("Units "+$00$+"R")
    OutVect!.addItem("Sales "+$00$+"R")
    OutVect!.addItem("Cost "+$00$+"R")
    OutVect!.addItem("Profit "+$00$+"R")
    OutVect!.addItem("GP%"+$00$+"R")
    xwk = fnblank(6)
    xwk = fnblank(13)

    return

serial_lotted: rem --- Serialized/Lotted Inventory

    read (ope21_dev,key=ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$+ope11a.internal_seq_no$,dom=*next)

    while more
        ope21a_key$=key(ope21_dev,end=*break)
        if pos(ope11a_key.firm_id$+ope11a_key.ar_type$+ope11a_key.customer_id$+ope11a_key.order_no$+ope11a.internal_seq_no$=ope21a_key$)<>1 then break

        read record (ope21_dev,key=ope21a_key$) ope21a$

        OutVect!.addItem(x2$+" "+ope21a_key.sequence_no$+" "+ope21a.lotser_no$)
        xwk = fnblank(2)
        OutVect!.addItem(str(ope21a.qty_shipped:m2$)+$00$+"R")
        OutVect!.addItem(str(ope21a.qty_shipped:m2$)+$00$+"R")
        xwk = fnblank(4)
        OutVect!.addItem(str(ope21a.unit_cost:m3$)+$00$+"R")
        xwk = fnblank(3)
        l=l+1
    wend    

    return

print_detail: rem --- Print Detail

    ctrl=0
    OutVect!.addItem(ope11a.line_code$+"     "+ ope11a.warehouse_id$)

    if opm02a.line_type$="M" then
        xwk = fnblank(1)
        OutVect!.addItem(desc$) 
        xwk = fnblank(10)
        goto print_detail_end
	endif
	
    if opm02a.line_type$="O" then
        xwk = fnblank(1)
        OutVect!.addItem(desc$) 
        xwk = fnblank(5)
        OutVect!.addItem(str(price:m1$)+$00$+"R")
        xwk = fnblank(4)
        goto print_detail_end
	endif
	
    if opm02a.line_type$<>"M" then
        if opm02a.line_type$<>"O" then
            ctrl=1
            OutVect!.addItem(ope11a.product_type$)
            if pos(opm02a.line_type$="SP") then
                OutVect!.addItem(ope11a.item_id$)
            else
                OutVect!.addItem("")
            endif
            OutVect!.addItem(str(ope11a.qty_ordered:m2$)+$00$+"R")
            OutVect!.addItem(str(ope11a.qty_backord:m2$)+$00$+"R")
            OutVect!.addItem(str(ope11a.qty_shipped:m2$)+$00$+"R")
            OutVect!.addItem(str(ope11a.disc_percent:m9$)+$00$+"R") 
            OutVect!.addItem(str(ope11a.unit_price:m4$)+$00$+"R")
            OutVect!.addItem(str(price:m1$)+$00$+"R")
            OutVect!.addItem(str(ope11a.unit_cost:m1$)+$00$+"R")
            OutVect!.addItem(str(cost:m4$)+$00$+"R")
            OutVect!.addItem(str(price-cost:m4$)+$00$+"R")
            OutVect!.addItem(str(fnd(price-cost,price):m9$)+$00$+"R")
        endif        
    endif

    if ctrl=1 then
        xwk = fnblank(2)
        OutVect!.addItem(desc$) 
        xwk = fnblank(1)
    endif

    if ope11a.est_shp_date$<>"   " and (ope11a.est_shp_date$<>ope01a.shipmnt_date$) and opm02a.line_type$<>"M" then
        OutVect!.addItem("Sched: "+ fndate$(ope11a.est_shp_date$)) 
    else
        xwk = fnblank(1)
    endif

    if opm02a.line_type$="N" then 
        OutVect!.addItem(pol$)
        xwk = fnblank(7)
    else
        xwk = fnblank(8)
    endif

    if pos(opm02a.line_type$="SP") and pos(ivs01a.lotser_flag$="SL") and ivm01a.lotser_item$="Y" then 
        gosub serial_lotted
    endif  
print_detail_end:
    return

get_cust: rem --- Find Customer

    dim b1$(30),c[6]
    arm01a.customer_name$="Not On File"
    find record (arm01_dev,key=firm_id$+ope01a.customer_id$,dom=*next) arm01a$
    find record (arm02_dev,key=firm_id$+ope01a.customer_id$+"  ",dom=*next) arm02a$

    return

pos_for_nonstock: rem --- P/Os for non-stock items

    pol$=""
    pof$=""

    if opm02a.line_type$="N" then 
        pol$="Vnd:"+ope11a.vendor_id$
        dim poe08a$:fattr(poe08a$)
        find record (poe08_dev,key=ope11a.firm_id$+ope11a.customer_id$+ope11a.order_no$+ope11a.line_no$, knum="AO_CUST_ORD", dom=*next) poe08a$
        if (s8$="N" and poe08a.po_no$="") or s8$="A" or (s8$="P" and poe08a.po_no$<>"") then  pof$="Y"

        if pos(s8$="AP") and poe08a.po_no$<>"" then  
            start_block = 1
            if start_block then
                find record (poe02_dev, key=firm_id$+poe08a$.po_no$, dom=*endif) poe02a$
                pol$="Vnd:"+poe02a.vendor_id$+" PO:"+poe08a.po_no$+"-"+poe08a.po_line_no$
            endif
        endif
    endif

    return

get_terms_code: rem --- Terms Code 

    dim w$(30)
    w$="* Not On File *"
    find record (arm10a_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=*next) arm10a$
    w$=arm10a.code_desc$

    return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$
    def fnd(q1,q2)=max(min(sgn(abs(q2))*q1*100/(q2+abs(sgn(q2))-1),999.99),-999.99)

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,ignore_status
    if status <> 999 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
