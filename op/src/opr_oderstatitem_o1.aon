rem --- Order Status Report By Item
rem --- Program opr_ob v8.0.0 28Feb2008 (opr_ob)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/28/2008 04:32:49)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations
rem t1$=""
rem t0$=""
    more=1
    headings=4
    dim t[1],headings$[headings]
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0
    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0    
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    x$="Detail "
    l0=0
    l1=0
    recs=0
    total_recs=0
    if p9$="S" then  x$="Summary "
    h1$=x$+h1$
    clock$=""
    when$=sysinfo.system_date$
    nf$="(Not On File)"
    l9=59
    l=l9+1,h=0,h0=132,total=0,subtotal=0,done=0

rem --- Report Heading

    if p9$="D" then

        dim columns$[13,10]
        columns=13
        columns$[0,0]="Item",                 columns$[0,1]="C",columns$[0,2]="18"
        columns$[1,0]="Prd",                  columns$[1,1]="C",columns$[1,2]="4"
        columns$[2,0]="UM",                   columns$[2,1]="C",columns$[2,2]="6"
        columns$[3,0]="Cust",                 columns$[3,1]="C",columns$[3,2]="7"
        columns$[4,0]="Order^Number",         columns$[4,1]="C",columns$[4,2]="15"
        columns$[5,0]="Order^Date",           columns$[5,1]="C",columns$[5,2]="15"
        columns$[6,0]="Ship^Date",            columns$[6,1]="C",columns$[6,2]="6"
        columns$[7,0]="Status",               columns$[7,1]="C",columns$[7,2]="7"
        columns$[8,0]="Order^Total",          columns$[8,1]="N",columns$[8,2]="8",columns$[8,3]=m1$,columns$[8,10]="T"
        columns$[9,0]="Order^Quantity",       columns$[9,1]="N",columns$[9,2]="9",columns$[9,3]=m2$,columns$[9,10]="T"
        columns$[10,0]="Comm ?",              columns$[10,1]="C",columns$[10,2]="6"
        columns$[11,0]="Quantity^On Hand",    columns$[11,1]="N",columns$[11,2]="10",columns$[11,3]=m2$,columns$[11,10]="T"
        columns$[12,0]="Quantity^Committed",  columns$[12,1]="N",columns$[12,2]="10",columns$[12,3]=m2$,columns$[12,10]="T"
        columns$[13,0]="Quantity^Available",  columns$[13,1]="N",columns$[13,2]="10",columns$[13,3]=m2$,columns$[13,10]="T"

    endif

    if p9$="S" then

        dim columns$[13,10]
        columns=13
        columns$[0,0]="Item",                columns$[0,1]="C",columns$[0,2]="20"
        columns$[1,0]="Prd",                 columns$[1,1]="C",columns$[1,2]="5"
        columns$[2,0]="UM",                  columns$[2,1]="C",columns$[2,2]="5"
        columns$[3,0]="",                    columns$[3,1]="C",columns$[3,2]="1"
        columns$[4,0]="",                    columns$[4,1]="C",columns$[4,2]="23"
        columns$[5,0]="",                    columns$[5,1]="C",columns$[5,2]="1"
        columns$[6,0]="",                    columns$[6,1]="C",columns$[6,2]="1"
        columns$[7,0]="",                    columns$[7,1]="C",columns$[7,2]="1"
        columns$[8,0]="Order Total",         columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m1$,columns$[8,10]="T"
        columns$[9,0]="Order^Quantity",      columns$[9,1]="N",columns$[9,2]="10"
        columns$[10,0]="Comm ?",             columns$[10,1]="C",columns$[10,2]="10"
        columns$[11,0]="Quantity^On Hand",   columns$[11,1]="N",columns$[11,2]="10",columns$[11,3]=m2$
        columns$[12,0]="Quantity^Committed", columns$[12,1]="N",columns$[12,2]="10",columns$[12,3]=m2$
        columns$[13,0]="Quantity^Available", columns$[13,1]="N",columns$[13,2]="10",columns$[13,3]=m2$

    endif

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Headings

    if p8$<>"" then
        find record (ivm10_dev,key=firm_id$+"A"+p8$,dom=*next) ivm10a$
        h4$=h4$+p8$+ivm10a.code_desc$
    else
        h4$="All Products"
    endif

    more=1
    dim x$(h0)
    headings$[0]=n1$
    headings$[1]=h1$
    headings$[2]=h4$
    headings$[3]=h3$
    headings$[4]="[HEADER]"

rem --- Background

    call pgmdir$+"adc_progress.aon","N","OPE_ORDDET","","","",0,ope11_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem retrieve template for OPE_ORDDET record key

    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDDET","STAT_WH_ITEM_ORD",ope11a_altkey01_tpl$,table_chans$[all],status$
    dim ope11a_altkey01$:ope11a_altkey01_tpl$

rem --- Position ope-11, alt_key_01, (old ope-61) Orders by Item

    read (ope11_dev,key=firm_id$+"E"+p6$,knum="STAT_WH_ITEM_ORD",dom=*next)

    while more

        ope11a_altkey01$=key(ope11_dev,end=*break)

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

        if pos(firm_id$+"E"=ope11a_altkey01$)<>1 then
            break
        endif

        if p6$<>""
            if ope11a_altkey01.warehouse_id$<>p6$ then
                break
            endif
        endif

        read (ope11_dev)ope11a$

    rem --- Level breaks

        if ope11a_altkey01.warehouse_id$<>t0$ then
            gosub Warehouse_Break
        endif

        if ope11a_altkey01.item_id$<>t1$ then
            gosub Item_Break
        endif

    rem --- Check product type

        if p8$<>"" then
            if ivm01a.product_type$<>p8$ then
                continue
            endif
        endif

    rem --- Order header

        ope01a.firm_id$=ope11a_altkey01.firm_id$
        ope01a.ar_type$=ope11a_altkey01.ar_type$
        ope01a.customer_id$=ope11a_altkey01.customer_id$
        ope01a.order_no$=ope11a_altkey01.order_no$

        find record (ope01_dev,key=ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.ar_inv_no$,dom=*continue) ope01a$
        if ope01a.invoice_type$="V" then continue
        if ope01a.ordinv_flag$="I" then continue
        if ope01a.trans_status$<>"E" then continue

    rem --- Order line item

        find record (ope11_dev,key=ope11a_altkey01$,dom=*continue) ope11a$
        gosub test_code
        if ignoreit$="Y" then continue
        amount=ope11a.unit_price*ope11a.qty_ordered

        if p5$<>""
            cntr=0

            while more
                if pos("O"=p5$)>0 and ope01a.backord_flag$<>"B" and ope01a.credit_flag$<>"C" and ope01a.invoice_type$<>"P" then break
                if pos("B"=p5$)>0 and ope01a.backord_flag$="B" then break
                if pos("C"=p5$)>0 and ope01a.credit_flag$="C" then break

                if pos("Q"=p5$)>0 and ope01a.invoice_type$="P" then
                    break
                else
                    cntr=1
                    break
                endif
            wend

            if cntr=1
                continue
            endif
        endif

    rem --- Detail or Summary?
        recs=recs+1
        if p9$="D" then

        rem --- Order status

            x$="Order"
            ship$=ope01a.shipmnt_date$

            if ope01a.invoice_type$="P" then
                x$="*Quote"
            else
                x$="Order"
            endif

            if ope01a.credit_flag$="C" then  x$="Credit"
            if ope01a.credit_flag$="R" then  x$="Released"
            if ope01a.backord_flag$="B" then  x$="BackOrder"
            if ope01a.ordinv_flag$="I" then  x$="Invoice"
            if ope11a.est_shp_date$<>"   " then  ship$=ope11a.est_shp_date$

        rem --- Print item stuff?

            if item$<>"" then
                OutVect!.addItem(ivm01a.item_id$)
                OutVect!.addItem(ivm01a.product_type$)
                OutVect!.addItem(ivm01a.unit_of_sale$)
                xwk=fnblank(11)
                OutVect!.addItem("      " + ivm01a.item_desc$)
                xwk=fnblank(13)
                l=l+2           
                item$=""
            endif

        rem --- Print Description for Non-stocks

            if nonstock$="Y" then
                xwk=fnblank(2)
                OutVect!.addItem(ope11a.order_memo$)
                xwk=fnblank(11)
                l=l+1
            endif

        rem --- Print detail line

            xwk=fnblank(3)
            OutVect!.addItem(fnmask$(ope11a_altkey01.customer_id$(1,m0),m0$))
            OutVect!.addItem(ope01a.order_no$+ope01a.backord_flag$)
            OutVect!.addItem(fndate$(ope01a.order_date$))
            OutVect!.addItem(fndate$(ship$))
            OutVect!.addItem(x$)
            OutVect!.addItem(str(amount))
            OutVect!.addItem(str(ope11a.qty_ordered))
            OutVect!.addItem(ope11a.commit_flag$)
            xwk=fnblank(3)
            l=l+1
        endif

    rem --- Accumulate totals

        t[0]=t[0]+amount
        t[1]=t[1]+ope11a.qty_ordered
        l0=l0+1,l1=l1+1
        total=total+amount
        subtotal=subtotal+amount

    wend

done: rem --- End

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub Warehouse_Break
    x$="Total For Report"
    xwk=fnblank(14)
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    xwk=fnblank(4)
    OutVect!.addItem(x$)
    xwk=fnblank(3)
    OutVect!.addItem(str(total))
    xwk=fnblank(5)

    goto std_exit

Warehouse_Break: rem --- Warehouse break

    if t0$<>"" then
        gosub Item_Break
        if l0<>0 then
            l=l+2
            x$="Total For "+h5$
            xwk=fnblank(14)
            TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
            xwk=fnblank(4)
            OutVect!.addItem(x$)
            xwk=fnblank(3)
            OutVect!.addItem(str(subtotal))
            xwk=fnblank(5)
        endif
    endif

    if done>0 then
        return
    endif

    dim x0$(32),x$(h0)
    ivm10c.short_name$=nf$
    t0$=ope11a_altkey01.warehouse_id$
    l0=0
    l=l9+1
    subtotal=0
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    h5$="Warehouse: "+t0$+" "+cvs(ivm10c.short_name$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(h5$)

    return

Item_Break: rem --- Item break

    if t1$<>"" then
        if l1<>0 then
            avail=ivm02a.qty_on_hand-ivm02a.qty_commit
            x$="Total For Item "+ivm01a.item_id$
            if p9$="S" then

                if cvs(ivm01a.item_id$,2)="" then  ivm01a.item_desc$="Non-Stock Item(s)"

                OutVect!.addItem(ivm01a.item_id$)
                OutVect!.addItem(ivm01a.product_type$)
                OutVect!.addItem(ivm01a.unit_of_sale$)
                xwk=fnblank(5)
                OutVect!.addItem(str(t[0]))
                OutVect!.addItem(str(t[1]))
                xwk=fnblank(1)
                OutVect!.addItem(str(ivm02a.qty_commit))
                OutVect!.addItem(str(ivm02a.qty_commit))
                OutVect!.addItem(str(avail))
                OutVect!.addItem("      " + ivm01a.item_desc$)
                xwk=fnblank(13)


                l=l+3
                t[0]=0
                t[1]=0
            else

                TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
                xwk=fnblank(4)
                OutVect!.addItem(x$)
                xwk=fnblank(3)
                OutVect!.addItem(str(t[0]))
                OutVect!.addItem(str(t[1]))
                xwk=fnblank(1)
                OutVect!.addItem(str(ivm02a.qty_on_hand))
                OutVect!.addItem(str(ivm02a.qty_commit))
                OutVect!.addItem(str(avail))

                t[0]=0
                t[1]=0
            endif
        endif
    endif

    if done>0 then return

    t1$=ope11a_altkey01.item_id$
    ivm01a.firm_id$=ope11a_altkey01.firm_id$
    ivm01a.item_id$=t1$
    ivm01a.item_desc$=nf$

    ivm02a.firm_id$=ope11a_altkey01.firm_id$
    ivm02a.warehouse_id$=ope11a_altkey01.warehouse_id$
    ivm02a.item_id$=ope11a_altkey01.item_id$
    item$=t1$
    l1=0
    l=l+2
    find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next) ivm01a$
    find record (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next) ivm02a$

    return

test_code: rem --- Test line code to determine whether to print

    ignoreit$="N"
    nonstock$="N"
    find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*return) opm02a$
    if opm02a.line_type$="M" or opm02a.line_type$="O" then  ignoreit$="Y"
    if opm02a.line_type$="N" then  nonstock$="Y"

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
