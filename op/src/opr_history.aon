rem --- INVOICE HISTORY REPORT
rem --- Program opr_history v8.0.0 23Jan2008 (opr_history)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/23/2008 12:27:56)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        seterr std_error
        setesc std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
       
rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=11,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
        files$[2]="arm-02",ids$[2]="ARM_CUSTDET"
        files$[3]="arc_termcode",ids$[3]="ARC_TERMCODE"
        files$[4]="ars_params",ids$[4]="ARS_PARAMS"
        files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
        files$[6]="ivc_prodcode",ids$[6]="IVC_PRODCODE"
        files$[7]="ivs_params",ids$[7]="IVS_PARAMS"
        files$[8]="opm-02",ids$[8]="OPC_LINECODE"
        files$[9]="opt-01",ids$[9]="OPT_ORDHDR"
        files$[10]="opt-11",ids$[10]="OPT_ORDDET"
        files$[11]="opt-21",ids$[11]="OPT_INVLSDET"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status


        if status goto std_exit
        arm01_dev=channels[1]
        arm02_dev=channels[2]
        arm10_dev=channels[3]
        ars01a_dev=channels[4]
        ivm01_dev=channels[5]
        ivm10_dev=channels[6]
        ivs01a_dev=channels[7]
        opm02_dev=channels[8]
        opt01_dev=channels[9]
        opt11_dev=channels[10]
        opt21_dev=channels[11]


rem --- Dimension string templates

        dim arm01a$:templates$[1],arm02a$:templates$[2],arm10a$:templates$[3],
:       ars01a$:templates$[4],ivm01a$:templates$[5],ivm10a$:templates$[6],
:       ivs01a$:templates$[7],opm02a$:templates$[8],opt01a$:templates$[9],
:       opt11a$:templates$[10],opt21a$:templates$[11]

rem --- Assign form input values to local variables

        
        s0$= option!.getOptionData("customer_id_1")
        s1$= option!.getOptionData("customer_id_2")
        s2$= option!.getOptionData("invoice_date_1")
        s3$= option!.getOptionData("invoice_date_2")
        s4$= option!.getOptionData("salesperson")
        s5$= option!.getOptionData("item_id")
        s6$ = option!.getOptionData("pick_no")

rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$


rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="AR",n4$=sysinfo.task_desc$
        n9$=firm_id$
        find record (ars01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
        find record (ivs01a_dev,key=n9$+"IV00",dom=std_missing_params) ivs01a$
        dim p[2],i[4]

       
        i[0]=ivs01a.item_id_len
        i[1]=ivs01a.vendor_prd_len
        i[2]=num(ivs01a.precision$)
        i[3]=ivs01a.ls_no_len

        p[1]=num(ars01a.max_customer_len$)
        p[2]=num(ars01a.zip_length$)
        p[0]=num(ars01a.customer_size$)


rem --- Initialize Data
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","U","",m2$,0,m2
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","R","",m3$,0,m3
        h0=0
        number=1
        l9=30
        l=0
        dim j$(80,"-"),j1$(40," ")
        m0=len(ars01a.customer_output$)
        S6=num(s6$)
        S6$=str(S6:"-###.00%")

rem --- Run report overlay

        run pgmdir$+"opr_history_o1.aon"


rem --- FUNCTIONS

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
        
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNF$ AlphaNumeric Masking Function

        def fnmask$(q1$,q2$)
        if q2$="" then let q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) then goto alpha_fnf else return str(-num(q1$,err=alpha_fnf):q2$,err=alpha_fnf)
alpha_fnf:
        let q=1,q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") then let q0=q0+1 else let q2$(q,1)="X"
              let q=q+1
        wend
        if len(q1$)>len(q2$)-q0 then let q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
        fnend

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release

rem --- #endinclude std_end.src

        end
