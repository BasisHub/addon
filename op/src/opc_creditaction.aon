rem --- Order Entry/Credit Action
rem --- Program opc_creditaction v8.0.0 10Jul2009 (ope_df)
rem --- Created by adx_codeport.bbj v1.1.5 (07/10/2009 11:17:11)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    enter cust_id$, order_no$, table_chans$[all], callpoint!, action$, status
    
rem --- Use statements, declares

    use ::sys/prog/bao_callpoint.bbj::Callpoint
    use ::ado_order.src::OrderHelper
    use ::ado_util.src::util
    
    declare Callpoint callpoint!
    declare OrderHelper ordHelp!
    declare BBjControl creditHoldControl!
    declare BBjControl backorderedControl!

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Open needed files

    num_files=10
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]="ARM_CUSTDET",  open_opts$[1]="OTA"
    open_tables$[2]="ARC_TERMCODE", open_opts$[2]="OTA"
    open_tables$[3]="ARS_PARAMS",   open_opts$[3]="OTA"
    open_tables$[4]="IVS_PARAMS",   open_opts$[4]="OTA"
    open_tables$[5]="OPE_ORDHDR",   open_opts$[5]="OTA"
    open_tables$[7]="OPE_CREDDATE", open_opts$[7]="OTA"
    open_tables$[8]="OPE_ORDDET",   open_opts$[8]="OTA"
    open_tables$[9]="OPC_LINECODE", open_opts$[9]="OTA"
    open_tables$[10]="ARS_CREDIT",  open_opts$[10]="OTA"

    gosub open_tables

    arm02_dev  = num(open_chans$[1])
    arm10_dev  = num(open_chans$[2])
    ars01a_dev = num(open_chans$[3])
    ivs01a_dev = num(open_chans$[4])
    ope01_dev  = num(open_chans$[5])
    ope03_dev  = num(open_chans$[7])
    ope11_dev  = num(open_chans$[8])
    opm02_dev  = num(open_chans$[9])
    ars01c_dev = num(open_chans$[10])

    dim arm02a$:open_tpls$[1]
    dim arm10a$:open_tpls$[2]
    dim ars01a$:open_tpls$[3]
    dim ivs01a$:open_tpls$[4]
    dim ope03a$:open_tpls$[7]
    dim ope11a$:open_tpls$[8]
    dim opm02a$:open_tpls$[9]
    dim ars01c$:open_tpls$[10]
    
rem --- Retrieve parameter record(s)

    find record (ars01c_dev, key=firm_id$+"AR01", err=std_missing_params) ars01c$

rem --- Initialize Data

    action$=""
    start_block = 1
    
    if start_block then
        found = 0
        find record (ope01_dev, key=firm_id$+"  "+cust_id$+order_no$, dom=*endif) 
        found = 1
    endif
    
    if !found then goto std_exit
    
    backorderedControl! = cast(BBjControl, callpoint!.getDevObject("backordered_control"))
    
rem --- Has order/invoice been printed?
rem --- This section will never be executed from Order Entry. Maybe from Invoice Entry, so I'll leave it --- jpb 9/7/10
    if callpoint!.getColumnData("PRINT_STATUS") = "Y" then
    
        rem --- Exit silently
    
        rem msg_id$="OP_PRINTED_CREDIT"
        rem gosub disp_message
        
        rem if msg_opt$ = "N" then
            action$ = "S"
            backorderedControl!.setText("Order/Invoice is Printed")
            goto std_exit
        rem endif
    endif

rem --- Check For Quotes
rem --- This should never get executed here either. Order Entry is now preventing quotes from getting to this call
    if callpoint!.getColumnData("INVOICE_TYPE")="P" then
		escape
        status$="This is a Quote"
        backorderedControl!.setText(status$)
        
        callpoint!.setColumnData("CREDIT_FLAG","")
        callpoint!.setStatus("SETORIG")
        
        action$ = "Q"
        goto std_exit
    endif

rem --- Credit memos shouldn't get processed
    if num(callpoint!.getColumnData("TOTAL_SALES")) <=0 then
        action$ = "M"
        backorderedControl!.setText("Credit Memo: no processing")
        goto final_updates
    endif
    
rem --- Get over credit limit flag

    if ars01c.display_bal$ <> "A" and callpoint!.getDevObject("credit_status_done") <> "Y" then
    
    rem --- Display credit management (status)
    
        call pgmdir$+"opc_creditmgmnt.aon", cust_id$, order_no$, table_chans$[all], callpoint!, status
        if status = 999 then goto std_exit
    endif
    
    ordHelp! = cast(OrderHelper, callpoint!.getDevObject("order_helper_object"))
    over_credit_limit = ordHelp!.calcOverCreditLimit()
    credit_hold_reason$ = ordHelp!.getCreditHoldReason()
	if callpoint!.getColumnData("CREDIT_FLAG") = "C" over_credit_limit = 1
	
rem --- Is credit ok?

    status$ = ""
    
    if !over_credit_limit then
        status$="Credit is OK"
		callpoint!.setDevObject("msg_credit_okay","Y")
    else
        if callpoint!.getColumnData("CREDIT_FLAG")="R" then 
			callpoint!.setDevObject("msg_released","Y")
            status$="Order is Released"
        endif
    endif
    
rem --- Use Credit Hold text control to display status since it won't show it in the CREDITACTION form
    
    if status$ <> "" then 
rem        backorderedControl!.setText(status$)
        action$="U"
        goto final_updates 
    endif

display_form: rem --- Display   

    dim dflt_data$[2,1]
    dflt_data$[1,0] = "STATUS_MESSAGE"
    dflt_data$[1,1] = credit_hold_reason$
    dflt_data$[2,0] = "AR_TERMS_CODE"
    dflt_data$[2,1] = callpoint!.getColumnData("TERMS_CODE")
    
    credit_action = 0
    callpoint!.setDevObject("cust_id", cust_id$)
    callpoint!.setDevObject("order_no", order_no$)
    
    call sypdir$+"bam_run_prog.bbj", "OPE_CREDITACTION", stbl("+USER_ID"), "", "", table_chans$[all], "", dflt_data$[all]   

    temp$ = str(callpoint!.getDevObject("credit_action"))
    if temp$="null" or temp$="none" then goto display_form
    credit_action = num(temp$)
    
    switch credit_action 
        case 1
        
        rem --- Hold order
		
			callpoint!.setColumnData("CREDIT_FLAG","C")
            action$ = "H"
            break
            
        case 2
        
        rem --- Hold The Customer
        
            extract record (arm02_dev,key=firm_id$+cust_id$+"  ") arm02a$
            arm02a.cred_hold$ = "Y"
            arm02a$ = field(arm02a$)
            write record (arm02_dev) arm02a$
            
            action$ = "C"
            break
            
        case 3
        
        rem --- Release this order
        
            terms$ = str(callpoint!.getDevObject("new_terms_code"))

            if terms$<>"null" then
                action$ = "R"
				callpoint!.setColumnData("CREDIT_FLAG","R")
				callpoint!.setDevObject("msg_released","Y")
            else
                rem action$ = ?
            endif
        
            break
            
        case 4
        
        rem --- Delete order
        
            action$="D"
            callpoint!.setColumnData("CREDIT_FLAG","")
            break
            
        case default
            rem action$ = ?
    swend
    
final_updates: 

rem --- Update Tickler File

    gosub update_tickler

rem --- Update order header file

    callpoint!.setColumnData("LOCK_STATUS","N")
	if action$<>"D"
		callpoint!.setStatus("SAVE")
	endif
    
    callpoint!.setDevObject("credit_action_done", "Y")
    
    goto std_exit

rem ==========================================================================    
rem --- Subroutines
rem ==========================================================================    

update_tickler: rem --- Update Tickler File

    update = 1
    read (ope03_dev, key=firm_id$+cust_id$+order_no$, knum="BY_ORDER", dom=*next)

rem --- Find only tickler records for this order    

    while 1
    
        read record (ope03_dev, end=*break) ope03a$
        if ope03a.firm_id$+ope03a.customer_id$ <> firm_id$+cust_id$ then break
        if ope03a.order_no$<>order_no$ then continue
    
    rem --- Found and no need to remove or update
    
        if callpoint!.getColumnData("ORDER_DATE") = ope03a.rev_date$ and callpoint!.getColumnData("CREDIT_FLAG")="C" then 
            update = 0
            break
        endif
        
    rem --- Found and needs to be removed, and possibly updated
        
        remove (ope03_dev, key=firm_id$+ope03a.rev_date$+cust_id$+order_no$, dom=*next)
        break
        
    wend

rem --- Update tickler file with new record
    
    if callpoint!.getColumnData("CREDIT_FLAG")="C" and update then
        dim ope03a$:fattr(ope03a$)
        ope03a.firm_id$ = firm_id$
        ope03a.rev_date$ = callpoint!.getColumnData("ORDER_DATE")
        ope03a.customer_id$ = cust_id$
        ope03a.order_no$ = order_no$
        ope03a$ = field(ope03a$)
        write record (ope03_dev) ope03a$
    endif
    
    return

open_tables: rem --- Open tables

    call sypdir$+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        status=912
        goto std_exit
    endif

    return

disp_message: rem --- Display Message Dialog

    call sypdir$+"bac_message.bbj",
:       msg_id$,
:       msg_tokens$[all],
:       msg_opt$,
:       table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    exit
    
rem #endinclude std_end.src

    end
