rem --- Invoice Edit Report
rem --- Program opr_jb v8.0.0 25Jan2008 (opr_jb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/25/2008 03:03:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Use Statements

    use ::ado_func.src::func

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initialize Data

    more=1
    recs=0
    total_recs=0
    precision i[1]
    
    func.setLen1(int(i[3]))
    func.setLen2(int(i[4]))
    func.setLen3(int(i[5]))

    dim lf_item$[10],lf_channels[10]
    dim lf_item$[10],lf_channels[10]
    dim o[4],r[3,4],s[2],t[4],t9[100,3],u[3]
    ord=0
    ship=0,bo=0,l9=50,l=l9+1,h=0,nf$="(Not On File)"
    pbufwidth=200
    m8$="##0.00-"
    m9$="###.0%",clock$="",when$=sysinfo.system_date$
    
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0
rem call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1  
    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,m1,0  
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,m2,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,m3,0
    
    m8=len(m8$)
    m9=len(m9$)
    
    r9$="SPN"
    if print_stat$="P" then  x1$="Printed Invoices"
    if print_stat$="U" then  x1$="Unprinted Invoices"
    if print_stat$="A" then  x1$="All Invoices"
    h8$=x1$
    
    lot_ser$=""
    if taken_by$="" h9$="Invoiced By:All"  else h9$="Invoiced By: "+taken_by$
    if ivs01a.lotser_flag$="S" then  lot_ser$="Ser#"
    if ivs01a.lotser_flag$="L" then  lot_ser$="Lot#"
    
    if from_cust$="" then  h4$="First" else h4$=from_cust$
    if thru_cust$="" then  h5$="Last"  else h5$=thru_cust$
    if from_ord$="" then  h6$="First" else h6$=from_ord$
    if thru_ord$="" then  h7$="Last"  else h7$=thru_ord$

    while more
        if m2*3+m3*2+m1*3+27+i[0]<132 then break
        call pgmdir$+"adc_sizemask.aon",m1$,m1,max(10,m1-1),max(10,m1-1)
        call pgmdir$+"adc_sizemask.aon",m2$,m2,max(10,m2-1),max(10,m2-1)
        call pgmdir$+"adc_sizemask.aon",m3$,m3,max(10,m3-1),max(10,m3-1)
    wend

    dim columns$[11,10]
    columns=11

    columns$[0,0]="Customer^Number Name ",  columns$[0,1]="C",  columns$[0,2]="24"
    columns$[1,0]="Order^Number",           columns$[1,1]="N",  columns$[1,2]="10",  columns$[1,10]="T"
    columns$[2,0]="Invoice^Number",         columns$[2,1]="N",  columns$[2,2]="10",  columns$[2,10]="T"
    columns$[3,0]="Invoice^Date",           columns$[3,1]="N",  columns$[3,2]="10",  columns$[3,10]="T"
    columns$[4,0]="By",                     columns$[4,1]="N",  columns$[4,2]="9",   columns$[4,10]="T"
    columns$[5,0]="Sls",                    columns$[5,1]="N",  columns$[5,2]="9",   columns$[5,10]="T"
    columns$[6,0]="P.O^Number",             columns$[6,1]="C",  columns$[6,2]="12"
    columns$[7,0]="Ship Via",               columns$[7,1]="N",  columns$[7,2]="12",  columns$[7,10]="T"
    columns$[8,0]="Dist^Code",              columns$[8,1]="N",  columns$[8,2]="6",   columns$[8,10]="T"
    columns$[9,0]="Terms",                  columns$[9,1]="N",  columns$[9,2]="10",  columns$[9,10]="T"
    columns$[10,0]="Tax^Code",              columns$[10,1]="N", columns$[10,2]="10", columns$[10,10]="T"
    columns$[11,0]="Prntd?",                columns$[11,1]="N", columns$[11,2]="10"
    
rem --- Headings

    headings=6
    dim headings$[6]
    headings$[0]=n1$
    headings$[1]=n4$
    headings$[2]=x1$
    headings$[3]=h9$
    headings$[4]="Beginning Customer : "+h4$+"      "+"Beginning Order #: "+h6$
    headings$[5]="Ending Customer     : "+h5$+"      "+"Ending Order     #: "+h7$

    rt$="Report Totals"+$00$+"R"
    
rem --- Print positions

    lw=m1*3+m3*2+m2*3+m8+m9
    o[0]=h0-m1*3-m3*2,o[1]=h0-m1*3-m3-m8

rem --- Retrieve templates

    call sypdir$+"bac_key_template.bbj","OPE_ORDHDR","PRIMARY",ope01a_key_tpl$,table_chans$[all],status$
    dim ope01a_key$:ope01a_key_tpl$

    call sypdir$+"bac_key_template.bbj","OPE_ORDLSDET","PRIMARY",ope21a_key_tpl$,table_chans$[all],status$
    dim ope21a_key$:ope21a_key_tpl$

rem --- Background

    call pgmdir$+"adc_progress.aon","N","OPE_ORDHDR","","","",0,ope01_dev,1,meter_num,status
    if status = 999 goto std_exit

rem --- Initial Read

    read (ope01_dev,key=firm_id$+"  "+from_cust$+from_ord$,dom=*next)

rem --- Main Loop Starts

    while more
        ope01a_key$=key(ope01_dev,end=*break)
        
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit
        
        if pos(firm_id$+"  "=ope01a_key$)<>1 then break
        if thru_cust$<>"" and ope01a_key.firm_id$+ope01a_key.ar_type$+ope01a_key.customer_id$>firm_id$+"  "+thru_cust$ then break
        if thru_ord$<>"" and ope01a_key.order_no$>thru_ord$ then break
        
        read record (ope01_dev,key=ope01a_key$) ope01a$
        if ope01a.ordinv_flag$<>"I" or ope01a.ar_inv_no$=fill(len(ope01a.ar_inv_no$)) then continue
        if taken_by$<>"" and ope01a.ord_taken_by$<>taken_by$ then continue
        
        if print_stat$<>"A" then
            if print_stat$="P" and ope01a.print_status$<>"Y" then continue
            if print_stat$="U" and ope01a.print_status$="Y" then continue
        endif

    rem --- Heading

        if ope01a.invoice_type$="V" then

        rem --- Void
        
            gosub find_customer
            OutVect!.addItem(ope01a.customer_id$+" "+arm01a.customer_name$)
            OutVect!.addItem(ope01a.order_no$)
            OutVect!.addItem(ope01a.ar_inv_no$)
            OutVect!.addItem(func.formatDate(ope01a.invoice_date$))
            OutVect!.addItem(ope01a.ord_taken_by$)
            OutVect!.addItem(ope01a.slspsn_code$)
            OutVect!.addItem("(Void)")
            xwk=fnblank(5)
            recs=recs+1

            if page_break$="Y" and print_stat$<>"U" then
                subheading$=""
                BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
                HdrVect!.addItem(subheading$)
            endif
            
            continue
        endif

    rem --- Print

        gosub find_customer
        gosub order_header
        recs=recs+1

    rem --- Detail

        read (ope11_dev, knum=3, key=ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$, dom=*next)

        while more
            read record (ope11_dev, end=*break) ope11a$
            
            if  ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$ <> 
:               ope01a.firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$ 
:           then 
                break
            endif
            
            desc$=ope11a.order_memo$
            start_block = 1
            
            if start_block then
                find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*endif) opm02a$
                
                if pos(opm02a.line_type$="SP")<>0 then
                    find record (ivm01_dev,key=firm_id$+ope11a.item_id$,dom=*endif) ivm01a$
                    if opm02a.dropship$<>"Y" or ars10a.dropshp_cost$<>"Y" then
                        if cvs(desc$,2)="" then  desc$=func.displayDesc(ivm01a.item_desc$)
                        find record (ivm02_dev,key=firm_id$+ope11a.warehouse_id$+ope11a.item_id$,dom=*endif) ivm02a$
                        if ivm02a.unit_cost<>0 then  ope11a.unit_cost=ivm02a.unit_cost
                        if ivs01a.lifofifo$<>"N" then
                            gosub lifo_fifo
                            ope11a.unit_cost=ret_cost
                        endif
                    endif
                endif
            endif
            
            gosub print_detail
            
            s[0]=s[0]+ope11a.ext_price
            s[1]=s[1]+ope11a.unit_cost*ope11a.qty_shipped
            s[2]=s[2]+ope11a.comm_percent
            s0=s0+1
            u[0]=u[0]+ope11a.ext_price
            u[1]=u[1]+ope11a.unit_cost*ope11a.qty_shipped
            u[2]=u[2]+ope11a.comm_percent

            ord=ord+ope11a.qty_ordered
            bo=bo+ope11a.qty_backord
            ship=ship+ope11a.qty_shipped
            
            r9=0
            r9=pos(opm02a.line_type$=r9$)
            
            if r9<>0 then
                x=r9-1
                r[x,0]=r[x,0]+ope11a.ext_price
                r[x,1]=r[x,1]+ope11a.unit_cost*ope11a.qty_shipped
                r[x,2]=r[x,2]+ope11a.qty_ordered
                r[x,3]=r[x,3]+ope11a.qty_backord
                r[x,4]=r[x,4]+ope11a.qty_shipped
            endif

            if opm02a.line_type$="O" then  r[3,0]=r[3,0]+ope11a.ext_price
            if opm02a.prod_type_pr$="N" then continue
            if pos(ope11a.product_type$=t9$,3)=0 then  t9$=t9$+ope11a.product_type$
            
            x=pos(ope11a.product_type$=t9$,3)
            x=int(x/3)
            t9[x,0]=t9[x,0]+ope11a.ext_price
            t9[x,1]=t9[x,1]+ope11a.unit_cost*ope11a.qty_shipped
            t9[x,2]=t9[x,2]+ope11a.comm_percent
            t9[x,3]=t9[x,3]+ope11a.qty_shipped
        wend

    rem --- Invioce Totals

        gosub sales_total
        dim s[2]
        s0=0
        ord=0,bo=0,ship=0
        
    wend
    
rem --- Main Loop Ends

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

rem --- Totals

    precision 2

    e9$="E"
    
    if page_break$="Y" and print_stat$<>"U" then
        subheading$=""
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        HdrVect!.addItem(subheading$)
    endif
    
    xwk=fnblank(12)
    
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(rt$)
    OutVect!.addItem(str(ordt:m2$))
    OutVect!.addItem(str(bot:m2$))
    OutVect!.addItem(str(shipt:m2$))
    xwk=fnblank(2)
    OutVect!.addItem("Sales Total:"+$00$+"R")
    OutVect!.addItem(str(u[0]:m1$))
    OutVect!.addItem(str(u[1]:m1$))
    OutVect!.addItem(str(u[0]-u[1]:m1$))
    OutVect!.addItem(func.grossProfit(u[0], u[1]))
    xwk=fnblank(1)

    xwk=fnblank(6)
    OutVect!.addItem("Sales Discount"+$00$+"R")
    OutVect!.addItem(str(-t[2]:m1$))
    xwk=fnblank(4)

    xwk=fnblank(6)
    OutVect!.addItem("Freight"+$00$+"R")
    OutVect!.addItem(str(t[1]:m1$))
    xwk=fnblank(4)

    xwk=fnblank(6)
    OutVect!.addItem("Sales Tax"+$00$+"R")
    OutVect!.addItem(str(t[4]:m1$))
    xwk=fnblank(4)

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(str(u2:"###0")+" Total Invoices")
    xwk=fnblank(5)
    OutVect!.addItem(rt$)
    OutVect!.addItem(str(u[0]+t[1]-t[2]+t[4]:m1$))
    xwk=fnblank(4)

    xwk=fnblank(12)

rem --- Totals By Product

    OutVect!.addItem("Product Type Totals")
    xwk=fnblank(11)

    OutVect!.addItem("Products")
    OutVect!.addItem("Units")
    OutVect!.addItem("Sales")
    OutVect!.addItem("Cost")
    OutVect!.addItem("G.P")
    OutVect!.addItem("GP %")
    xwk=fnblank(6)

    if len(t9$)<>0 then
        for x=1 to len(t9$) step 3
            x0=int(x/3)
            ivm10a.code_desc$=nf$
            find record (ivm10_dev,key=firm_id$+"A"+t9$(x,3),dom=*next) ivm10a$
            if t9[x0,0]=0 and t9[x0,1]=0 then continue

            OutVect!.addItem(t9$(x,3)+" "+ivm10a.code_desc$)
            OutVect!.addItem(str(t9[x0,3]:m2$))
            OutVect!.addItem(str(t9[x0,0]:m1$))
            OutVect!.addItem(str(t9[x0,1]:m1$))
            OutVect!.addItem(str(t9[x0,0]-t9[x0,1]:m1$))
            OutVect!.addItem(func.grossProfit(t9[x0,0], t9[x0,1]))
            xwk=fnblank(6)

            t[0]=t[0]+t9[x0,0]
            t[1]=t[1]+t9[x0,1]
            t[2]=t[2]+t9[x0,2]
            t[3]=t[3]+t9[x0,3]
        next x
    endif

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(rt$)
    OutVect!.addItem(str(t[3]:m2$))
    OutVect!.addItem(str(t[0]:m1$))
    OutVect!.addItem(str(t[1]:m1$))
    OutVect!.addItem(str(t[0]-t[1]:m1$))
    OutVect!.addItem(func.grossProfit(t[0], t[1]))
    xwk=fnblank(6)
    
    xwk=fnblank(12)

rem --- Total By Line Type

    dim t[1]

    OutVect!.addItem("Line Type Total")
    xwk=fnblank(11)

    OutVect!.addItem("Description")
    OutVect!.addItem("Ord")
    OutVect!.addItem("B/O")
    OutVect!.addItem("Ship")
    OutVect!.addItem("Sales")
    OutVect!.addItem("Cost")
    xwk=fnblank(6)

    if r[0,0]<>0 or r[0,1]<>0 or r[0,2]<>0 or r[0,3]<>0 or r[0,4]<>0 then
        OutVect!.addItem("Standard Items")
        OutVect!.addItem(str(r[0,2]:m2$))
        OutVect!.addItem(str(r[0,3]:m2$))
        OutVect!.addItem(str(r[0,4]:m2$))
        OutVect!.addItem(str(r[0,0]:m3$))
        OutVect!.addItem(str(r[0,1]:m3$))
        xwk=fnblank(6)
    endif

    if r[1,0]<>0 or r[1,1]<>0 or r[1,2]<>0 or r[1,3]<>0 or r[1,4]<>0 then
        OutVect!.addItem("Promotional Items")
        OutVect!.addItem(str(r[1,2]:m2$))
        OutVect!.addItem(str(r[1,3]:m2$))
        OutVect!.addItem(str(r[1,4]:m2$))
        OutVect!.addItem(str(r[1,0]:m3$))
        OutVect!.addItem(str(r[1,1]:m3$))
        xwk=fnblank(6)
    endif

    if r[2,1]<>0 or r[2,0]<>0 or r[2,2]<>0 or r[2,3]<>0 or r[2,4]<>0 then
        OutVect!.addItem("Non-Stock Items")
        OutVect!.addItem(str(r[2,2]:m2$))
        OutVect!.addItem(str(r[2,3]:m2$))
        OutVect!.addItem(str(r[2,4]:m2$))
        OutVect!.addItem(str(r[2,0]:m3$))
        OutVect!.addItem(str(r[2,1]:m3$))
        xwk=fnblank(6)
    endif

    if r[3,0]<>0 then 
        OutVect!.addItem("Other Charges")
        xwk=fnblank(3)
        OutVect!.addItem(str(r[3,0]:m2$))
        xwk=fnblank(7)
    endif

    for x=0 to 3
        t[0]=t[0]+r[x,0]
        t[1]=t[1]+r[x,1]
    next x

    xwk=fnblank(12)
    
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(rt$)
    xwk=fnblank(3)
    OutVect!.addItem(str(t[0]:m1$))
    OutVect!.addItem(str(t[1]:m1$))
    xwk=fnblank(6)

    out_action$="FORMAT"
    goto std_exit

order_header: rem --- Order Header

    gosub terms_code
    
    OutVect!.addItem((ope01a.customer_id$+" "+arm01a.customer_name$))
    OutVect!.addItem(ope01a.order_no$)
    OutVect!.addItem(ope01a.ar_inv_no$)
    OutVect!.addItem(func.formatDate(ope01a.invoice_date$))
    OutVect!.addItem(ope01a.ord_taken_by$)
    OutVect!.addItem(ope01a.slspsn_code$)
    OutVect!.addItem(ope01a.customer_po_no$)
    OutVect!.addItem(ope01a.ar_ship_via$)
    OutVect!.addItem(ope01a.ar_dist_code$)
    OutVect!.addItem(arm10a.ar_terms_code$)
    OutVect!.addItem(ope01a.tax_code$)
    OutVect!.addItem(ope01a.print_status$)

    if ope01a.lock_status$<>"N" then
        OutVect!.addItem("Lock Flag = "+ope01a.lock_status$)
        xwk=fnblank(11)
    endif
    
rem --- Detail headings

    xwk=fnblank(12)

    xwk=fnblank(7)
    OutVect!.addItem("Gross"+$00$+"B")
    OutVect!.addItem("Ext'd"+$00$+"B")
    xwk=fnblank(3)

    OutVect!.addItem("Cd Prd Whs Item"+$00$+"B")
    OutVect!.addItem("Ord"+$00$+"B")
    OutVect!.addItem("B/O"+$00$+"B")
    OutVect!.addItem("Ship"+$00$+"B")
    OutVect!.addItem("Price"+$00$+"B")
    OutVect!.addItem("Disc"+$00$+"B")
    OutVect!.addItem("Cost"+$00$+"RB")
    OutVect!.addItem("Sales"+$00$+"B")
    OutVect!.addItem("Cost"+$00$+"B")
    OutVect!.addItem("Profit"+$00$+"B")
    OutVect!.addItem("GP %"+$00$+"B")
    xwk=fnblank(1)

    return

sales_total: rem --- Sales Total/Freight/Sales Tax/Invoice Total

    precision 2
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))

    OutVect!.addItem("")
    OutVect!.addItem(str(ord:m2$))
    OutVect!.addItem(str(bo:m2$))
    OutVect!.addItem(str(ship:m2$))
    xwk=fnblank(2)
    OutVect!.addItem("Sales Total"+$00$+"R")
    OutVect!.addItem(str(s[0]:m1$))
    OutVect!.addItem(str(s[1]:m1$))
    OutVect!.addItem(str(s[0]-s[1]:m1$))
    OutVect!.addItem(func.grossProfit(s[0], s[1]))
    OutVect!.addItem("")

    xwk=fnblank(6)
    OutVect!.addItem("Sales Discount"+$00$+"R")
    OutVect!.addItem(str(-ope01a.discount_amt:m1$))
    xwk=fnblank(4)

    xwk=fnblank(6)
    OutVect!.addItem("Freight"+$00$+"R")
    OutVect!.addItem(str(ope01a.freight_amt:m1$))
    xwk=fnblank(4)

    xwk=fnblank(6)
    OutVect!.addItem("Sales Tax"+$00$+"R")
    OutVect!.addItem(str(ope01a.tax_amount:m1$))
    xwk=fnblank(4)

    xwk=fnblank(6)
    OutVect!.addItem("Invoice Total"+$00$+"R")
    OutVect!.addItem(str(s[0]+ope01a.freight_amt-ope01a.discount_amt+ope01a.tax_amount:m1$))
    xwk=fnblank(4)

    xwk=fnblank(12)

    if page_break$="Y" and print_stat$<>"U" then
        subheading$=""
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        HdrVect!.addItem(subheading$)
    endif

    u[3]=u[3]+s[0]
    t2=t2+1
    u2=u2+1,l=l+7,ordt=ordt+ord,bot=bot+bo,shipt=shipt+ship
    t[2]=t[2]+ope01a.discount_amt
    t[1]=t[1]+ope01a.freight_amt
    t[4]=t[4]+ope01a.tax_amount
    
    precision i[1]
    
    return

serialized_inventory: rem --- Serialized/Lotted Inventory

    ls_start$ = firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.internal_seq_no$
    read (ope21_dev, key=ls_start$, dom=*next)

    while more
        ope21a_key$=key(ope21_dev,end=*break)
        if ope21a_key.firm_id$+ope21a_key.ar_type$+ope21a_key.customer_id$+ope21a_key.order_no$+ope21a_key.orddet_seq_ref$ <> ls_start$ then break
        read record (ope21_dev,key=ope21a_key$) ope21a$
        
        OutVect!.addItem("  "+lot_ser$+" "+ope21a_key.sequence_no$+" "+ope21a.lotser_no$)
        OutVect!.addItem(str(ope21a.qty_ordered:m2$))
		OutVect!.addItem("")
        OutVect!.addItem(str(ope21a.qty_shipped:m2$))
        xwk=fnblank(8)
    wend

    return

print_detail: rem --- Print Detail

rem --- First line

    column1$=ope11a.line_code$+" "+ope11a.product_type$+" "+ope11a.warehouse_id$
    
    if pos(opm02a.line_type$="SP")<>0
        column1$=column1$+" "+ope11a.item_id$
    endif
    
    OutVect!.addItem(column1$)
    
    if  pos(opm02a.line_type$="SP")   and 
:       pos(ivs01a.lotser_flag$="SL") and 
:       ivm01a.lotser_item$="Y" 
:   then 
        gosub average_item_cost
    endif
    
    if ser_qty then
        ope11a.unit_cost=ser_cost/ser_qty
    endif
    
    OutVect!.addItem(str(ope11a.qty_ordered:m2$))
    OutVect!.addItem(str(ope11a.qty_backord:m2$))
    OutVect!.addItem(str(ope11a.qty_shipped:m2$))
    OutVect!.addItem(str(ope11a.unit_price:m3$))
    OutVect!.addItem(str(ope11a.disc_percent:m9$))
    OutVect!.addItem(str(ope11a.unit_cost:m3$)+$00$+"R")
    OutVect!.addItem(str(ope11a.ext_price:m1$))
    OutVect!.addItem(str(ope11a.unit_cost*ope11a.qty_shipped:m1$))
    OutVect!.addItem(str(ope11a.ext_price-(ope11a.unit_cost*ope11a.qty_shipped):m1$))
    OutVect!.addItem(func.grossProfit(ope11a.ext_price, ope11a.unit_cost*ope11a.qty_shipped))
    OutVect!.addItem("")

rem --- Second line
    
    rem OutVect!.addItem(desc$+$00$+"L")
    OutVect!.addItem("  "+desc$)
    xwk=fnblank(11)
    
rem --- Subsequent lines

    if  pos(opm02a.line_type$="SP")   and 
:       pos(ivs01a.lotser_flag$="SL") and 
:       ivm01a.lotser_item$="Y" 
:   then 
        gosub serialized_inventory
    endif
    
    return

find_customer: rem --- Find Customer

    arm01a.firm_id$=firm_id$
    arm01a.customer_id$=ope01a.customer_id$
    arm01a.customer_name$=nf$
    find record (arm01_dev,key=arm01a.firm_id$+arm01a.customer_id$,dom=*next) arm01a$
    find record (arm02_dev,key=arm01a.firm_id$+arm01a.customer_id$+"  ",dom=*next) arm02a$
    return

lifo_fifo: rem --- LIFO/FIFO

    if ope11a.qty_shipped=0 then
        return
    endif
    ret_cost=ope11a.unit_cost
    
    if opm02a.dropship$="Y" or pos(opm02a.line_type$="SP")=0 then
        return
    endif
    
    lf_channels[0]=ivm04_dev
    lf_channels[1]=ivw04_dev
    lf_channels[2]=ivm02_dev
    lf_action$=ivs01a.lifofifo$+"I"
    lf_date$=ope01a.invoice_date$
    if ope11a.qty_shipped<0 then  lf_action$(2,1)="R"
    lf_item$[0]=firm_id$
    lf_item$[1]=ope11a.warehouse_id$
    lf_item$[2]=ope11a.item_id$
    
    call pgmdir$+"ivc_lifofifo.aon",
:       lf_action$,
:       "R",
:       lf_date$,
:       lf_channels[all],
:       lf_tmpls$[all],
:       lf_item$[all],
:       i[1],
:       abs(ope11a.qty_shipped),
:       ope11a.unit_cost,
:       ret_cost,
:       status

    return

average_item_cost: rem --- Get Average Of Serialized/Lotted Item Cost

    ser_qty=0
    ser_cost=0
    start_ls$ = firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.internal_seq_no$
    read (ope21_dev, key=start_ls$, dom=*next)

    while more
        read record (ope21_dev, end=*break) ope21a$
        if ope21a.firm_id$+ope21a.ar_type$+ope21a.customer_id$+ope21a.order_no$+ope21a.orddet_seq_ref$ <> start_ls$ then break
        ser_cost=ser_cost+ope21a.qty_shipped*ope21a.unit_cost
        ser_qty=ser_qty+ope21a.qty_shipped
    wend

    return

terms_code: rem --- Terms Code

    arm10a.code_desc$=nf$
    find record (arm10_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=*next) arm10a$
    w$=arm10a.code_desc$
    
    return

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
