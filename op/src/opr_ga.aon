rem --- Batch Invoice Printing
rem --- Program opr_ga v8.0.0 29Jan2008 (opr_ga)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/29/2008 04:18:27)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
       
rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=16,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
        files$[2]="arm-03",ids$[2]="ARM_CUSTSHIP"
        files$[3]="arc_termcode",ids$[3]="ARC_TERMCODE"
        files$[4]="ars_params",ids$[4]="ARS_PARAMS"
        files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
        files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
        files$[7]="ope-01",ids$[7]="OPE_ORDHDR"
        files$[8]="ope-04",ids$[8]="OPE_PRNTLIST"
        files$[9]="ope-11",ids$[9]="OPE_ORDDET"
        files$[10]="ope-21",ids$[10]="OPE_ORDLSDET"
        files$[11]="ope-31",ids$[11]="OPE_ORDSHIP"
        files$[12]="ope-41",ids$[12]="OPE_INVCASH"
        files$[13]="opm-02",ids$[13]="OPC_LINECODE"
        files$[14]="opm-04",ids$[14]="OPC_MSG_HDR"
        files$[15]="opm-09",ids$[15]="OPM_CUSTJOBS"
        files$[16]="opm-14",ids$[16]="OPC_MSG_DET"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        arm01_dev=channels[1]
        arm03_dev=channels[2]
        arm10_dev=channels[3]
        ars01a_dev=channels[4]
        ivm01_dev=channels[5]
        ivs01a_dev=channels[6]
        ope01_dev=channels[7]
        ope04_dev=channels[8]
        ope11_dev=channels[9]
        ope21_dev=channels[10]
        ope31_dev=channels[11]
        ope41_dev=channels[12]
        opm02_dev=channels[13]
        opm04_dev=channels[14]
        opm09_dev=channels[15]
        opm14_dev=channels[16]

rem --- Dimension string templates

        dim arm01a$:templates$[1],arm03a$:templates$[2],arm10a$:templates$[3],
:       ars01a$:templates$[4],ivm01a$:templates$[5],ivs01a$:templates$[6],
:       ope01a$:templates$[7],ope04a$:templates$[8],ope11a$:templates$[9],
:       ope21a$:templates$[10],ope31a$:templates$[11],ope41a$:templates$[12],
:       opm02a$:templates$[13],opm04a$:templates$[14],opm09a$:templates$[15],
:       opm14a$:templates$[16]

rem --- Assign form input values to local variables

        rem value_01$=Option!.getOptionData("form_value_01")
        message$  = Option!.getOptionData("Message")
        p7$ =       Option!.getOptionData("Re_Start")
        p5$ =       Option!.getOptionData("Customer_No")
rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

        find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
        firm_id$=sys01t.firm_id$
        n1$=sysinfo.firm_name$,n2$="AR",n4$=sysinfo.task_desc$
        find record (ars01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
        find record (ivs01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
        dim p[2],i[6]
        for i=0 to 6
            i[i]=num(i2$(i*2+1,2))
        next i
        desclen=i[4]+i[5]+i[6]
        p[0]=num(ars01a.customer_size$)
        p[1]=num(ars01a.max_customer_len$)
        m0=len(ars01a.customer_output$)
        m2=len(ars01a.unit_mask$)
        m3=len(ars10a.rate_mask$)
        m4=len(ivs01a.price_mask$)
        call pgmdir$+"adc_sizemask.aon",ars01a.amount_mask$,m1,8,12

rem --- Initialize Data

        p5$=""

rem --- Display Resource

        dim resparams$[20],resparams[20]
        resaction$=""
        resparams$[0]=pgm(-2)
        call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
        rem gosub flow_initializations
        goto display_fields

Message_1: rem --- Message

        v0$="S"
        v1$="E",v2$=message$,v0=40,v1=38,v2=3,i0=0,v3$="",v4$="",control_id=3000
        rem gosub std_input
        on v3 goto Label_One,Message_1,flow_control,Message_1,flow_control,Label_One,flow_control

Label_One:
        message$=v$
        goto flow_control

Re_Start_1: rem --- Restart

        v0$="Y"
        v1$="R",v2$="N",v0=1,v1=38,v2=5,v3$="",v4$="",control_id=3001
        rem gosub std_input
        on v3 goto Label_Two,Re_Start_1,flow_control,Re_Start_1,flow_control,Label_Two,flow_control

Label_Two:
        p7$=v$
        goto flow_control

Customer: rem --- Customer

        if p7$="N" then goto flow_control
        v0$="M"
        v1$="K",v2$="",v3$=p1$,v0=p[1],v1=38,v2=7
        v4$="Enter A Valid Customer Number, <F3>=Lookup"
        control_id=3002
        rem gosub std_input
        on v3 goto Label_Four,Customer,flow_control,Label_Three,flow_control,Label_Four,flow_control

Label_Three:
        call pgmdir$+"syc_lc.bbx",v$

Label_Four:
        p5$=v$
        find record (arm01_dev,key=firm_id$+p5$,dom=Customer) arm01a$
        call pgmdir$+"syc_rs.bbx","",my_context,3002,fnmask$(ars01a.customer_output$(1,p[0]),m0$),0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,13002,arm01a.customer_name$,0,"",status
        goto flow_control

flow_control:
        switch v3
            case 0
            case 1
            case 3; let i0=i0+1; break
            case 2; if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1) fi; break
            case 4; let i0=i0_done; break
            case default; exitto done_v3
        swend
        on i0 goto Message_1,Re_Start_1,Customer,done,done,done,Message_1

done: rem --- Correct?

        if !validate then 
            v0$="S"
            v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
            rem gosub std_input

done_v3:
            on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done

done_test:
            rem on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
            Switch pos(v$="YN")
                case 0
                case 1; exitto flow_control
                case 2; break
                case 3; exitto do_nonkey1
            Swend

validate_input:
            validate=1
            old_control_id=0

do_nonkey1:
            v3=0
            i0=i0_nonkey1-1
            goto flow_control
        else
            let validate=0
        endif

rem --- Open Printer

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status then goto std_exit

rem --- Run Overlay

        o9$="sys_ac.bbx"
        o9=1
        run ars01a.cntr_prt_pgm$,err=*next

rem --- Missing Invoice Print Program

        number=1
        dim message$[number]
        message$[0]="Invoice print program "+ars01a.cntr_prt_pgm$+" not found."
        message$[1]="         <Enter>=Continue"
        call pgmdir$+"adc_stdmessage.aon",2,message$[all],number,-1,-1,v$,v3
        goto std_exit

display_fields:
        control_id=3000
        cid_cnt=0

        While more
            if cid_cnt=0 then let disp_inp$=""
            if cid_cnt=1 then let disp_inp$="N"
            if cid_cnt=2 then let disp_inp$=""
            call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
            call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
            cid_cnt=cid_cnt+1; let control_id=control_id+1
            if cid_cnt>3 then break
        Wend

        let disp_inp$="",disp_desc$=""
        let i0=i0_done
        goto done



rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
    rem #endinclude std_end.src

        end
