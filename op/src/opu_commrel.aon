rem --- Commit & Release Future Orders
rem --- Program opu_ea v8.0.0 06Jul2007 (opu_ea)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:08:59)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=16,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="arm-02",ids$[2]="ARM_CUSTDET"
    files$[3]="arm-10",ids$[3]="ARC_TERMCODE"
    files$[4]="ivm-01",ids$[4]="IVM_ITEMMAST"
    files$[5]="ivm-02",ids$[5]="IVM_ITEMWHSE"
    files$[6]="ivm-07",ids$[6]="IVM_LSMASTER"
    files$[7]="ope-01",ids$[7]="OPE_ORDHDR"
    files$[8]="ope-02",ids$[8]="OPE_CREDCUST"
    files$[9]="ope-03",ids$[9]="OPE_CREDDATE"
    files$[10]="ope-04",ids$[10]="OPE_PRNTLIST"
    files$[11]="ope-11",ids$[11]="OPE_ORDDET"
    files$[12]="ope-21",ids$[12]="OPE_ORDLSDET"
    files$[13]="opm-02",ids$[13]="OPC_LINECODE"
    files$[14]="ARS_PARAMS",ids$[14]=files$[14]
    files$[15]="ARS_PARAMS",ids$[15]=files$[15]
    files$[16]="IVS_PARAMS",ids$[16]=files$[16]
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm02_dev=channels[2]
    arm10_dev=channels[3]
    ivm01_dev=channels[4]
    ivm02_dev=channels[5]
    ivm07_dev=channels[6]
    ope01_dev=channels[7]
    ope02_dev=channels[8]
    ope03_dev=channels[9]
    ope04_dev=channels[10]
    ope11_dev=channels[11]
    ope21_dev=channels[12]
    opm02_dev=channels[13]
    ars01_dev=channels[14]
    ars01c_dev=channels[15]
    ivs01a_dev=channels[16]

rem --- Dimension string templates

    dim arm02a$:templates$[2],arm10a$:templates$[3],ivm01a$:templates$[4]
    dim ivm02a$:templates$[5],ivm07a$:templates$[6],ope01a$:templates$[7]
    dim ope02a$:templates$[8],ope03a$:templates$[9],ope04a$:templates$[10]
    dim ope11a$:templates$[11],ope21a$:templates$[12],opm02a$:templates$[13]
    dim ars01a$:templates$[14],ars01c$:templates$[15],ivs01a$:templates$[16]

rem --- Assign form input values to local variables

    next$=option!.getOptionData("COMMIT_THRU")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ars01c_key$=firm_id$+"AR00"
    find record (ars01c_dev,key=ars01c_key$,err=std_missing_params) ars01c$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$


rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Parameters
  
    n2$="AR"
    ls$="N"
    find record (ars01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    dim c9$(55)
    find record (ars01c_dev,key=firm_id$+n2$+"01",dom=std_missing_params) ars01c$
    ars01c.display_bal$="N"
    find record (ivs01a_dev,key=firm_id$+"IV"+"00",dom=std_missing_params) ivs01a$
    dim p[1],i[2]
    p[0]=num(ivs01a.item_id_len$)
    i[2]=num(ivs01a.precision$)
    if pos(ivs01a.lotser_flag$="LS") ls$="Y"

rem --- Initialize Data

    precision num(ivs01a.precision$)
    dim iv_files[44],iv_info$[3],iv_info[0],iv_params$[4],iv_refs$[11],iv_refs[5]
    iv_files[0]=sys01_dev
    iv_files[1]=ivm01_dev
    iv_files[2]=ivm02_dev
    iv_info$[0]=firm_id$
    iv_params$[0]=sysinfo.system_date$
    iv_params$[1]=sysinfo.user_id$
    iv_params$[2]=i2$
    iv_params$[3]=i3$
    iv_params$[4]=i4$
    more=1

rem --- Additional File Opens

    if ls$="Y" then
        files$[12]="ope-21"
        files$[13]="ivm-07"
        call pgmdir$+"adc_fileopen.aon",1,12,files,files$[all],options$[all],channels[all],batch,status
        if status goto std_exit
        ope21_dev=channels[12]
        ivm07_dev=channels[13]
        iv_files[7]=ivm07_dev
    endif

rem --- Initialize Progress Meter

    call pgmdir$+"adc_progress.aon","N","","","","",0,ope01_dev,1,meter_num,status
    read (ope01_dev,key=firm_id$,dom=*next)

rem --- Header loop

    while more  
        read record (ope01_dev,end=*break) ope01a$
        if firm_id$<>ope01a.firm_id$ break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        if ope01a.invoice_type$="P" continue
        if ope01a.invoice_type$="I" continue
        if ope01a.lock_status$<>"N" continue
        new$="NO"
        ope01a.lock_status$="Y"; rem "Lock it while processing
        write record (ope01_dev,key=ope01a_key$) ope01a$

rem --- Process Lines Here

        read (ope11_dev,key=firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=*next)
        while more
            read record (ope11_dev,end=*break) ope11a$
            if firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$<>ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$ break
            if ope11a.commit_flag$="Y" continue
            if ope11a.est_shp_date$>next$ continue
            find record (opm02a_dev,key=firm_id$+ope11a.line_code$,dom=*continue) opm02a$
            if pos(opm02a.line_type$="NOM")=0
                if opm02a.dropship$<>"Y"
                    iv_info$[1]=ope11a.warehouse_id$
                    iv_info$[2]=ope11a.item_id$
                    iv_info$[3]=""
                    iv_refs[0]=ope11a.qty_ordered
                    call pgmdir$+"ivc_ua.bbx","OE",iv_files[all],iv_info[all],iv_params$[all],iv_info$[all],iv_refs$[all],iv_refs[all],iv_status; rem "Commit warehouse quantities

rem --- Serialized/Lotted Items

                    if ls$="Y" then
                        read (ope21_dev,key=ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.line_no$,dom=*next)
                        while more
                            are23_k$=key(ope21_dev,end=*break)
                            if pos(ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.line_no$=are23_k$)<>1 break
                            read record (ope21_dev) ope21a$

rem --- Commit Lot/Serial Quantities

                            iv_info$[1]=ope11a.warehouse_id$
                            iv_info$[2]=ope11a.item_id$
                            iv_info$[3]=""
                            iv_refs[0]=ope21a.qty_shipped
                            call pgmdir$+"ivc_ua.bbx","UC",iv_files[all],iv_info[all],iv_params$[all],iv_info$[all],iv_refs$[all],iv_refs[all],iv_status; rem "Uncommit previous warehouse quantites
                            iv_info$[3]=ope21a.lotser_no$
                            call pgmdir$+"ivc_ua.bbx","OE",iv_files[all],iv_info[all],iv_params$[all],iv_info$[all],iv_refs$[all],iv_refs[all],iv_status; rem "Commit warehouse andlot/serial quantites
                        wend
                    endif
                endif
            endif

            w1$=ope11a.commit_flag$+ope11a.pick_flag$
            w1$="YN"
            ope11a.qty_shipped=ope11a.qty_ordered
            x6=ope11a.ext_price
            x7=ope11a.taxable_amt
            precision 2
            if opm02a.line_type$="O" and ope11a.ext_price=0 and ope11a.unit_price<>0 
                ope11a.ext_price=ope11a.unit_price
                ope11a.unit_price=0
            endif
            if pos(opm02a.line_type$="MO")=0
                ope11a.EXT_PRICE=ope11a.unit_price*ope11a.qty_shipped
            endif
            gosub Taxable_Check
            ope01a.taxable_amt=ope01a.taxable_amt+ope11a.taxable_amt-x7
            ope01a.total_sales=ope01a.total_sales+ope11a.ext_price-x6
            ope01a.total_cost=ope01a.total_cost+unit_cost*ope11a.qty_shipped
            precision num(ivs01a.precision$)
            write record (ope11_dev,key=ope11a_key$) ope11a$
            new$="YES"; rem "Changed one. Generate pick ticket."
        wend

Order_End: rem --- End of Order Here

        if new$="YES"
            ope01a.print_status$="N"
            if ars01c.SYS_INSTALL$="Y"
                credit$="1"; rem "Initialize Credit Okay
                read record (arm02_dev,key=firm_id$+ope01a.customer_id$+ope01a.ar_type$,dom=Credit_Initialize)arm02a$
                call pgmdir$+"opc_ca.bbx",ope01_dev,arm02_dev,firm_id$,ope01a.customer_id$,c9$,credit$,i6$,0
Credit_Initialize:
                if credit$<>"1"
                    ope01a.credit_flag$="C"
                    gosub Update_Credit

rem goto Not_Credit; rem "Credit Not Okay
                    read record (arm10_dev,key=firm_id$+"A"+ope01a.terms_code$,dom=Record_Write) arm10a$
                    if arm10a.cred_hold$="Y"
                        ope01a.credit_flag$="C"
                        gosub Update_Credit
                    endif
rem goto Not_Credit
Record_Write:
                    ope04a_key$=firm_id$+"O"+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$
                    write record (ope04_dev,key=ope04a_key$) ope04a$
                endif
                ope01a.lock_status$="N"
                write record (ope01_dev) ope01a$
                if t9$="END" return
            endif    
        endif    
    wend

rem --- End of orders
    t9$="END"
    gosub Order_End
    extract record (ars01_dev,key=firm_id$+n2$+"00") ars01a$
    ars01a.lstcom_date$=next$
    write record (ars01_dev,key=p0$) ars01a$
    goto std_exit

Taxable_Check: rem --- Check If Taxable

    ope11a.taxable_amt=0
    if opm02a.taxable_flag$<>"N"
        read record (ivm01_dev,key=firm_id$+ope11a.item_id$,dom=Back) ivm01a$
        if pos(opm02a.line_type$="MNO")<>0 if ivm01a.taxable_flag$<>"N" then
            ope11a.taxable_amt=ope11a.ext_price
        endif
    endif
Back:
    return

Update_Credit: rem --- Update Credit Manager Tickler File

    read (ope02_dev,key=firm_id$+ope01a.customer_id$,dom=*next)
Date_Find:
    read record (ope02_dev,end=Record_Date)ope02a$
    if ope02a.firm_id$+ope02a.customer_id$=firm_id$+ope01a.customer_id$
        if ope02a.order_no$<>ope01a.order_no$ goto Date_Find
        if ope02a.rev_date$=fnyy_yy21$(fndate$(fndate$(ope01a.order_date$))) return
        remove (ope02_dev,key=firm_id$+ope01a.customer_id$+ope02a.rev_date$+ope01a.order_no$,dom=*next)
        remove (ope03_dev,key=firm_id$+ope02a.rev_date$+ope02a.customer_id$+ope02a.order_no$,dom=*next)
    endif
Record_Date:
    let ope02a_key$=firm_id$+ope01a.customer_id$+fnyy_yy21$(fndate$(fndate$(ope01a.order_date$)))+ope01a.order_no$
    write record (ope02_dev,key=ope02a_key$) ope02a$
    let ope03a_key$=firm_id$+fnyy_yy21$(fndate$(fndate$(ope01a.order_date$)))+ope01a.customer_id$+ope01a.order_no$
    write record (ope03_dev,key=ope03a_key$) ope03a$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end