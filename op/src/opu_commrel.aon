rem --- Commit & Release Future Orders
rem --- Program opu_commrel v8.0.0 06Jul2007 (opu_ea)
rem --- Created by adx_codeport.bbx v1.1.5 (07/06/2007 02:08:59)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    rem print 'show', pgm(-2), "..."; rem debug

rem --- Use statements and declares  

    use ::sys/prog/bao_option.bbj::Option

    declare Option option!
    declare BBjVector OutVect!

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    num_files = 16
    open_beg  = 1
    open_end  = num_files

    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[2]="ARM_CUSTDET",   open_opts$[2]="OTA"
    open_tables$[3]="ARC_TERMCODE",  open_opts$[3]="OTA"
    open_tables$[4]="IVM_ITEMMAST",  open_opts$[4]="OTA"
    open_tables$[7]="OPE_ORDHDR",    open_opts$[7]="OTA"
    open_tables$[9]="OPE_CREDDATE",  open_opts$[9]="OTA"
    open_tables$[10]="OPE_PRNTLIST", open_opts$[10]="OTA"
    open_tables$[11]="OPE_ORDDET",   open_opts$[11]="OTA"
    open_tables$[12]="OPE_ORDLSDET", open_opts$[12]="OTA"
    open_tables$[13]="OPC_LINECODE", open_opts$[13]="OTA"
    open_tables$[14]="ARS_PARAMS",   open_opts$[14]="OTA"
    open_tables$[15]="ARS_CREDIT",   open_opts$[15]="OTA"
    open_tables$[16]="IVS_PARAMS",   open_opts$[16]="OTA"

    gosub open_tables

    arm02_dev=num(open_chans$[2])
    arm10_dev=num(open_chans$[3])
    ivm01_dev=num(open_chans$[4])
    ope01_dev=num(open_chans$[7])
    ope03_dev=num(open_chans$[9])
    ope04_dev=num(open_chans$[10])
    ope11_dev=num(open_chans$[11])
    ope21_dev=num(open_chans$[12])
    opm02_dev=num(open_chans$[13])
    ars01_dev=num(open_chans$[14])
    ars01c_dev=num(open_chans$[15])
    ivs01a_dev=num(open_chans$[16])

rem --- Dimension string templates

    dim arm02a$:open_tpls$[2],arm10a$:open_tpls$[3],ivm01a$:open_tpls$[4]
    dim ope01a$:open_tpls$[7],ope03a$:open_tpls$[9],ope04a$:open_tpls$[10]
    dim ope11a$:open_tpls$[11],ope21a$:open_tpls$[12],opm02a$:open_tpls$[13]
    dim ars01a$:open_tpls$[14],ars01c$:open_tpls$[15],ivs01a$:open_tpls$[16]

rem --- Assign form input values to local variables

    next$=option!.getOptionData("COMMIT_THRU")

    print "---next$: ", next$; rem debug

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ars01c_key$=firm_id$+"AR01"
    find record (ars01c_dev,key=ars01c_key$,err=std_missing_params) ars01c$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Parameters

    n2$="AR"
    ls$="N"
    find record (ars01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
    dim c9$(55)
    find record (ars01c_dev,key=firm_id$+n2$+"01",dom=std_missing_params) ars01c$
    ars01c.display_bal$="N"
    find record (ivs01a_dev,key=firm_id$+"IV"+"00",dom=std_missing_params) ivs01a$
    if pos(ivs01a.lotser_flag$="LS") then ls$="Y"

rem --- Initialize Data

    call "ivc_itemupdt.aon::init",iv_channels[all],ivs01a$,iv_items$[all],iv_refs$[all],iv_refs[all],iv_table_chans$[all],status

    precision num(ivs01a.precision$)
    more=1
    recs=0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0

rem --- Initialize Progress Meter

    call pgmdir$+"adc_progress.aon","N","","","","",0,ope01_dev,1,meter_num,status
    read (ope01_dev,key=firm_id$,dom=*next)

rem --- Header loop

    while more  
        read record (ope01_dev,end=*break) ope01a$
        if firm_id$<>ope01a.firm_id$ break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        if ope01a.invoice_type$="P" continue
        if ope01a.invoice_type$="I" continue
        if ope01a.lock_status$<>"N" continue

        new$="NO"
        ope01a.lock_status$ = "Y"; rem "Lock it while processing
        ope01a$ = field(ope01a$)
        write record (ope01_dev) ope01a$

        rem input "--- customer/order: " + ope01a.customer_id$ + "/" + ope01a.order_no$, *; rem debug

    rem --- Process Lines Here

        read (ope11_dev,key=firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$,dom=*next)

        while more
            read record (ope11_dev,end=*break) ope11a$
            if firm_id$+ope01a.ar_type$+ope01a.customer_id$+ope01a.order_no$<>ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$ break
            print "------line: ", ope11a$.line_no$; rem debug
            print "------commit flag: ", ope11a.commit_flag$; rem debug
            if ope11a.commit_flag$="Y" continue
            print "------ship date: ", ope11a.est_shp_date$; rem debug
            if ope11a.est_shp_date$>next$ continue

            find record (opm02_dev,key=firm_id$+ope11a.line_code$,dom=*continue) opm02a$

            if pos(opm02a.line_type$="NOM")=0
                if opm02a.dropship$<>"Y"
                    iv_items$[1]=ope11a.warehouse_id$
                    iv_items$[2]=ope11a.item_id$
                    iv_items$[3]=""
                    iv_refs$[0]=sysinfo.system_date$
                    iv_refs[0]=ope11a.qty_ordered
                    call pgmdir$+"ivc_itemupdt.aon","OE",iv_channels[all],ivs01a$,iv_items$[all],iv_refs$[all],iv_refs[all],iv_table_chans$[all],status

                rem --- Serialized/Lotted Items

                    if ls$="Y" then
                        read (ope21_dev,key=ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.line_no$,dom=*next)

                        while more
                            are23_k$=key(ope21_dev,end=*break)
                            if pos(ope11a.firm_id$+ope11a.ar_type$+ope11a.customer_id$+ope11a.order_no$+ope11a.line_no$=are23_k$)<>1 break
                            read record (ope21_dev) ope21a$

                        rem --- Commit Lot/Serial Quantities

                            iv_items$[1]=ope11a.warehouse_id$
                            iv_items$[2]=ope11a.item_id$
                            iv_items$[3]=""
                            iv_refs$[0]=sysinfo.system_date$
                            iv_refs[0]=ope21a.qty_shipped
                            call pgmdir$+"ivc_itemupdt.aon","UC",iv_channels[all],ivs01a$,iv_items$[all],iv_refs$[all],iv_refs[all],iv_table_chans$[all],status
                            iv_items$[3]=ope21a.lotser_no$
                            call pgmdir$+"ivc_itemupdt.aon","OE",iv_channels[all],ivs01a$,iv_items$[all],iv_refs$[all],iv_refs[all],iv_table_chans$[all],status
                        wend
                    endif
                endif
            endif

            ope11a.commit_flag$="Y"
            ope11a.pick_flag$="N"
            ope11a.qty_shipped=ope11a.qty_ordered
            x6=ope11a.ext_price
            x7=ope11a.taxable_amt
            precision 2

            if opm02a.line_type$="O" and ope11a.ext_price=0 and ope11a.unit_price<>0 
                ope11a.ext_price=ope11a.unit_price
                ope11a.unit_price=0
            endif

            if pos(opm02a.line_type$="MO")=0
                ope11a.ext_price=ope11a.unit_price*ope11a.qty_shipped
            endif

            gosub Taxable_Check
            ope01a.taxable_amt=ope01a.taxable_amt+ope11a.taxable_amt-x7
            ope01a.total_sales=ope01a.total_sales+ope11a.ext_price-x6
            ope01a.total_cost=ope01a.total_cost+unit_cost*ope11a.qty_shipped
            precision num(ivs01a.precision$)
            ope11a$ = field(ope11a$)
            write record (ope11_dev,key=ope11a_key$) ope11a$

            new$="YES"; rem "Changed one. Generate pick ticket."
            recs=recs+1
        wend

    Order_End: rem --- End of Order Here

        if new$="YES"
            ope01a.print_status$="N"

            if ars01c.sys_install$="Y"
                credit$="1"; rem "Initialize Credit Okay
                read record (arm02_dev,key=firm_id$+ope01a.customer_id$+ope01a.ar_type$,dom=Credit_Initialize)arm02a$
                x$=stbl("!batch","Y")
                call pgmdir$+"opc_creditmgmnt.aon", ope01a.customer_id$, ope01a.order_no$, table_chans$[all], null(), status

                batch$=stbl("!batch")
                x$=stbl("!CLEAR","!batch")

                if batch$="B"
                    credit$="0"
                    msg_id$="OP_ORD_ON_HOLD"
                    dim msg_tokens$[2]
                    msg_tokens$[1]=ope01a.order_no$
                    msg_tokens$[2]=fnmask$(ope01a.customer_id$(1,m0),m0$)
                    gosub disp_message
                endif

                if status = 999 then goto std_exit

            Credit_Initialize: 

                if credit$<>"1" goto Bad_Credit; rem Credit Not Okay
                read record (arm10_dev, key=firm_id$+"A"+ope01a.terms_code$, dom=Update_Print) arm10a$
                if arm10a.cred_hold$="Y" goto Bad_Credit

            Update_Print: 
                dim ope04a$:fattr(ope04a$)
                ope04a.firm_id$     = firm_id$
                ope04a.ordinv_flag$ = "O"
                ope04a.ar_type$     = ope01a.ar_type$
                ope04a.customer_id$ = ope01a.customer_id$
                ope04a.order_no$    = ope01a.order_no$
                write record (ope04_dev) ope04a$
                goto Unlock_Order

            Bad_Credit: 
                ope01a.credit_flag$="C"
                gosub Update_Credit
            endif    
        endif    

    Unlock_Order: 
        ope01a.lock_status$="N"
        write record (ope01_dev) ope01a$
        if t9$="END" then return
    wend

rem --- End of orders

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    t9$="END"
    gosub Order_End
    extract record (ars01_dev,key=firm_id$+n2$+"00") ars01a$
    ars01a.lstcom_date$=next$
    write record (ars01_dev) ars01a$

    goto std_exit

Taxable_Check: rem --- Check If Taxable

    ope11a.taxable_amt=0

    if opm02a.taxable_flag$<>"N" then
        read record (ivm01_dev,key=firm_id$+ope11a.item_id$,dom=*endif) ivm01a$

        if pos(opm02a.line_type$="MNO")<>0 if ivm01a.taxable_flag$<>"N" then
            ope11a.taxable_amt=ope11a.ext_price
        endif
    endif

    return

Update_Credit: rem --- Update Credit Manager Tickler File

    read (ope03_dev, key=firm_id$+ope01a.customer_id$+ope01a.order_no$, knum="BY_ORDER", dom=*next)

    while 1
        read record (ope03_dev,end=*break)ope03a$
        if ope03a.firm_id$+ope03a.customer_id$ <> firm_id$+ope01a.customer_id$ then break
        if ope03a.order_no$<>ope01a.order_no$ then continue
        if ope03a.rev_date$=ope01a.order_date$ then return
        remove (ope03_dev,key=firm_id$+ope03a.rev_date$+ope03a.customer_id$+ope03a.order_no$,dom=*next)
        break
    wend    

    ope03a.firm_id$     = firm_id$
    ope03a.rev_date$    = ope01a.order_date$
    ope03a.customer_id$ = ope01a.customer_id$
    ope03a.order_no$    = ope01a.order_no$
    ope03a$ = field(ope03a$)
    write record (ope03_dev) ope03a$

    return

open_tables: rem --- Open tables

    call sypdir$+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        status=912
        goto std_exit
    endif

    return

disp_message: rem --- Display Message Dialog

    call sypdir$+"bac_message.bbj",
:       msg_id$,
:       msg_tokens$[all],
:       msg_opt$,
:       table_chans$[all]

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update: 
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

    end

