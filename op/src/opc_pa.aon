rem --- Price and Availability Display
rem --- Program opc_pa v8.0.0 11Dec2007 (opc_pa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/11/2007 11:48:04)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved



            seterr std_error
            setesc std_error
            enter channels[all],firm_id$,cust$,whs$,item$,priccd$,listcd$,date$,status

rem --- Retrieve the program path

            pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+sysinfo",err=*next)
            milestone=num(stbl("+milestone",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

            files=7,begfile=1,endfile=files
            dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
            files$[1]="ars_params",ids$[1]="ARS_PARAMS"
            files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
            files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
            files$[4]="ivm-03",ids$[4]="IVX_ITEMPROD"
            files$[5]="ivm-06",ids$[5]="IVM_ITEMPRIC"
            files$[6]="ivc_priccode",ids$[6]="IVC_PRICCODE"
            files$[7]="ivs_params",ids$[7]="IVS_PARAMS"
            call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
            if status goto std_exit
            ars01a_dev=channels[1]
            ivm01_dev=channels[2]
            ivm02_dev=channels[3]
            ivm03_dev=channels[4]
            ivm06_dev=channels[5]
            ivm10_dev=channels[6]
            ivs01a_dev=channels[7]

rem --- Dimension string templates

            dim ars01a$:templates$[1],ivm01a$:templates$[2],ivm02a$:templates$[3],
:           ivm03a$:templates$[4],ivm06a$:templates$[5],ivm10a$:templates$[6],
:           ivs01a$:templates$[7]

rem --- Retrieve parameter records

            ars01a_key$=firm_id$+"AR00"
            find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
            ivs01a_key$=firm_id$+"IV00"
            find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open Files

            sys01_dev=channels[0]
            ivm01_dev=channels[1],ivm02_dev=channels[2],ivm03_dev=channels[3]
            ivm06_dev=channels[6]
            ivm10_dev=channels[10]

rem --- Determine interface

            call pgmdir$+"syc_dg.bbx",sysgui_dev,event$,event_len,sysfin$,sysfin,ui$,status
            if status then goto std_exit
            if ui$="W" then let main_context=sysfin.current_context

rem --- Parameters

            find record (ivs01_dev,key=firm_id$+"IV00",dom=error_exit) ivs01a$
            i7=len(i7$)
            i9=len(i9$)

rem --- Initialize Data
            more=1
            digits=num(i2$(5,1))
            status=0
            precision digits
            discmsk$="##.00-"
            disc=len(discmsk$),breaks=10

rem --- Resize masks, if necessary, to insure windows fit on screen

            maxwdth=80
            avail=maxwdth-12-disc,needed=4*i7+2*i9
            if needed>=avail then 
                    maxmask=int(avail/6)
                    call pgmdir$+"adc_sizemask.aon",i7$,i7,5,maxmask
                    call pgmdir$+"adc_sizemask.aon",i9$,i9,5,maxmask
            endif   

display_pricing: rem --- Display Pricing Window

  while more



    if ui$<>"W" then 
                width=i9*2+i7*2+13
                height=breaks+4,win_x=79-width,win_y=6
                title$="Available Prices"
                call pgmdir$+"syc_wa.bbx",mode,width,height,win_x,win_y,title$,opwin$
                dim heading$(width-2)
                heading$(1,5)="Table"
                heading$(5+i9-5,5)="Price",heading$(5+i9+i7-3,3)="Qty",heading$(5+i9+i7+disc-5,5)="Disc%",heading$(5+i9*2+i7*2+disc-5,5)="Price"
                if i7>=9 then let heading$(width-1-i9-9,8)="Contract" else let heading$(width-1-i9-5,4)="Cont"; if i9>=11 then let heading$(width-1-i9-1,4)="ract"
                print 'br',@(0,0),heading$,'er'
           break
    endif            

gui: rem --- GUI

                dim resparams$[20],resparams[20]
                resparams$[0]=pgm(-2)
                resparams$[1]=pgm(-2)
                resparams$[6]="Price And Availability Display"
                call pgmdir$+"syc_ra.bbx","P",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
                if status then goto std_exit
            break

  wend

pricing_window: rem --- Pricing Window

            find record (ivm01_dev,key=firm_id$+item$,dom=warehouse_window) ivm01a$
            class$=ivm01a.item_class$
            find record (ivm02_dev,key=firm_id$+whs$+item$,dom=warehouse_window) ivm02a$
            price=ivm02a.cur_price
            cost=ivm02a.unit_cost
            if ui$<>"W" then print @(0,1),"List",@(5,1),price:i9$,0:i7$,0:discmsk$,
            if ui$="W" then call pgmdir$+"syc_rs.bbx","",my_context,2000,"List",0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,2001,str(price:i9$),0,"",status

rem --- Get Pricing Table

            l=2
            read record (ivm10_dev,key=firm_id$+"E"+class$+priccd$,dom=contract_pricing) ivm10e$
            for i=0 to breaks-1
                if tablbrk[i]=0 and tabldisc[i]=0 then continue
                on pos(ivm10e.iv_price_mth$="CML") goto next_loop,cost,over_cost,list_price
    
cost: rem --- Mark-Up From Cost

while more
    
                disprc=cost+cost*tabldisc[i]/100
                break

over_cost: rem --- Margin Over Cost
    
                if tabldisc[i]>=100 continue; rem "No such thing as 100% margin unless cost=0
                disprc=cost*100/(100-tabldisc[i])
                break

list_price: rem --- Mark-Down List Price
    
               disprc=price-price*tabldisc[i]/100
               break
wend
    
pricing_table: rem --- Display Pricing Table
    
            if ui$<>"W" then 
                print @(0,l),ivm10e.pricing_code$,@(5,l),disprc:i9$,tablbrk[i]:i7$,tabldisc[i]:discmsk$,ivm10e.iv_price_mth$,
                l=l+1
                goto next_loop
            endif
pgm_call:
                fieldx=i+2010
                call pgmdir$+"syc_rs.bbx","",my_context,fieldx,ivm10e.pricing_code$,0,"",status
                call pgmdir$+"syc_rs.bbx","",my_context,fieldx+10,str(disprc:i9$),0,"",status
                call pgmdir$+"syc_rs.bbx","",my_context,fieldx+20,str(tablbrk[i]:i7$),0,"",status
                call pgmdir$+"syc_rs.bbx","",my_context,fieldx+30,str(tabldisc[i]:discmsk$),0,"",status
                call pgmdir$+"syc_rs.bbx","",my_context,fieldx+40,ivm10e.iv_price_mth$,0,"",status
next_loop:
                next i

contract_pricing: rem --- Get Contract Pricing

    l=2
       if ivm06_dev<>0 then
        find record (ivm06_dev,key=firm_id$+cust$+item$,dom=warehouse_window) ivm06a$
          if !(ivm06a.from_date$<>"   " and date$<ivm06a.from_date$) then 
              if !( ivm06a.thru_date$<>"   " and date$>ivm06a.thru_date$) then 
                    for i=0 to breaks-1
                        if conbrk[i]=0 then continue
                        if ui$="W" then call pgmdir$+"syc_rs.bbx","",my_context,2060+i,str(conbrk[i]:i7$),0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,2070+i,str(conprc[i]:i9$),0,"",status
                        if ui$<>"W" then print @(width-1-i7-i9,l),conbrk[i]:i7$,conprc[i]:i9$,
                        l=l+1
                    next i
               endif   
           endif         
    endif      

warehouse_window: rem --- Warehouse Window

    gosub display_wh
    count=0
    l=1,done=0
    read (ivm03_dev,key=firm_id$+"G"+item$,dom=*next)

rem --- top of loop

while more 

    ivm03a_key$=key(ivm03_dev,end=more_warehouse)
    if pos(firm_id$+"G"+item$=ivm03a_key$)<>1 then goto more_warehouse
    read (ivm03_dev)
    read record (ivm02_dev,key=firm_id$+ivm03a_key$(24,2)+item$,dom=*continue) ivm02a$

display_warehouse: rem --- Display Warehouse Data

    if ui$="W" then gosub display_detail; continue
    if l>height2-3 then break
    print @(0,l),ivm02a.warehouse_id$,
    print @(3,l),ivm02a.qty_on_hand-ivm02a.qty_commit:i7$,ivm02a.qty_on_order:i7$,
    count=count+1
    l=l+1

wend



over_flow: rem --- Overflow

while more
    l=0
    v0$="S"
    v1$="C",v2$="",v3$="",v4$="<Enter>=Continue",v0=1,v1=fncenter(v4$,width2)+len(v4$),v2=height2
    if done or v3=4 then goto std_exit
    print @(0,1),'ce',
    goto display_warehouse

more_warehouse: rem --- Now More Warehouses For This Item

        if ui$="W" then break
        done=1
        if count>0 then continue
        x$="(Item not assigned to a warehouse.)"
        print @(fncenter(x$,width2),int((height2)/2)),x$,
   wend

gui_display: rem --- Gui Display

    fkey=0
    if !(found) then gosub no_more_wh

rem --- Display last page

    if fkey=4 then goto std_exit
    answer$="|EOF"
    gosub lightbar

done: rem --- All done

    goto std_exit

error_exit: rem --- Return STATUS = ERR

    status=err
    if status=0 then let status=999
    goto std_exit

lightbar: rem --- Middle window processing

    row=1
    l=1,answer=0
    call pgmdir$+"syc_sa.bbx",5,llist$[all],more$[all],linfo$[all],answer$,answer,page,pages,maxrow,name$,height2,width2,fkey
    return

display_wh: rem --- Display Warehouse Window

    listbox_id=8000
    header_id=2090
    width2=5+i7*2
    win_x2=78-width-width2+1
    if ui$="W" then let height=18
    height2=height
    win_y2=win_y,title$="Whse Avail",maxrow=height2-5
    call pgmdir$+"syc_sa.bbx::init",str(ui$),maxrow,pages,linfo$[all]
    if ui$<>"W" then call pgmdir$+"syc_wa.bbx",mode,width2,height2,win_x2,win_y2,title$,opwin2$
    dim heading2$(width2-2)
    heading2$(1,3)="Whs"
    heading2$(width2-i7-6)="Avail",heading2$(width2-7,6)="On Ord"
    if ui$<>"W" then print 'br',@(0,0),heading2$,'er'; return
    call pgmdir$+"syc_rs.bbx","",my_context,header_id,heading2$,0,"",status
    linfo$[0]=str(my_context)
    linfo$[1]=str(listbox_id),linfo$[3]=str(my_context)
    dim llist$[pages,maxrow,5],more$[pages,maxrow,5]
    l=1
    found=0,row=1,page=1,fkey=0
    return

display_detail: rem --- Display detail line

    dim disp$(width2-2)
    fkey=0
    if l+1>maxrow then gosub lightbar
    if fkey=4 then exitto std_exit
    disp$(1)=ivm02a.warehouse_id$
    disp$(3)=str(ivm02a.qty_on_hand-ivm02a.qty_commit:i7$)+str(ivm02a.qty_on_order:i7$)
    llist$[page,row,1]=disp$
    found=1,row=row+1,l=l+1,count=count+1
    return

rem --- No More Warehouses For This Item

no_more_wh:
    done=1
    if count then return
       if l+1>maxrow then gosub lightbar
         if fkey=4 then return
          dim disp$(width2-2)
       let disp$(1)="(No Warehouse Found)"
    let llist$[page,row,1]=disp$,found=1,row=row+1,l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
