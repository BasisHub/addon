rem --- Tax Report Purge
rem --- Program opu_fa v8.0.0 28Jan2008 (opu_fa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/28/2008 03:28:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


        seterr std_error
        setesc std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)
       
rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=4,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="ars_params",ids$[1]="ARS_PARAMS"
        files$[2]="art-02",ids$[2]="ART_SALESTAX"
        files$[3]="gls_params",ids$[3]="GLS_PARAMS"
        files$[4]="ivs_params",ids$[4]="IVS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        ars01a_dev=channels[1]
        art02_dev=channels[2]
        gls01a_dev=channels[3]
        ivs01a_dev=channels[4]

rem --- Dimension string templates

        dim ars01a$:templates$[1],art02a$:templates$[2],gls01a$:templates$[3],
:       ivs01a$:templates$[4]

rem --- Assign form input values to local variables

        p9$ = option!.getOptionData("Thru_Dates")

rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="AR",n3$=sysinfo.task_desc$
        find record (ars01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ars01a$
        find record (gls01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
        dim p[4],g[4]
        for x=0 to 4
            g[x]=num(g2$(x*2+1,2),err=*next)
        l470:
        next x
        g[2]=fnyy_year(gls01a.current_year$)

rem --- Initialize Data

        more=1
        h0=40
        h1=70,h=0,h1$=n1$,h2$=n3$,h8$=fid(0),h8$=h8$(1,1)
        l9=50
        l=l9+1
        dim j$(80,"-"),j0$(40,"0"),j1$(40," "),h9$(40,$0a$)
        m1$="####,###.00CR"
        dim a[1]
        m1$="-####,###.00"
        m2$="-###,###"
        m0=len(ars01a.customer_output$)
		call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1
		call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","U","",m2$,0,m2
        dim j2$(m2+5*m1,"-")
        p9$=sys01t.current_date$
        p8$=p9$
        p7$=p9$

rem --- Display Resource

        dim resparams$[20],resparams[20]
        resaction$=""
        resparams$[0]=pgm(-2)
        call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
        gosub display_fields
        goto start_done


rem --- retrieve template for ART_SALESTAX record key
        call stbl("+DIR_SYP")+"bac_key_template.bbj","ART_SALESTAX","PRIMARY",art02a_key_tpl$,table_chans$[all],status$
        dim art02a_key$:art02a_key_tpl$


Through_Date: rem --- Through Date

        v0$="D"
        v1$="ERC6N",v2$=p9$,v0=8,v1=40,v2=3,i0=0,v4$="Enter The Date Through Which All Transactions Will Be Deleted",v3$="",control_id=3000
        rem gosub std_input
        on v3 goto Label_One,Through_Date,flow_control,Through_Date,flow_control,Label_One,flow_control

Label_One:
        p9$=v$
        goto flow_control

flow_control:
        switch v3
            case 0
            case 1
            case 3; let i0=i0+1; break
            case 2; if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1) fi; break
            case 4; let i0=i0_done; break
            case default; exitto done_v3
        swend
        on i0 goto Through_Date,done,done

start_done:
        i0=i0_done
done: rem --- Correct?

        if !validate then 
            v0$="S"
            v1$="KC",v2$="Y",v3$="",v4$="Are You Ready To Clear All Detail Through "+fndate$(p9$)+" (Y/N)? ",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
            rem gosub std_input
done_v3:
            on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
            rem on pos(v$="YN") goto flow_control,validate_input,do_nonkey1
            Switch pos(v$="YN")
                case 0
                case 1; exitto flow_control
                case 2; exitto validate_input
                case 3; v3=0; i0=i0_nonkey1-1; exitto flow_control
            Swend

validate_input:
            validate=1
            old_control_id=0
do_nonkey1:
            v3=0
            i0=i0_nonkey1-1
            goto flow_control
        else
            let validate=0
            exit_ctl=1
            gosub Clear_Data
            goto std_exit
        endif

display_fields:
        control_id=3000
        cid_cnt=0

        While more
            if cid_cnt=0 then let disp_inp$=fndate$(sys01a.current_date$)
            call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
            call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
            cid_cnt=cid_cnt+1; let control_id=control_id+1
            if cid_cnt>i0_done-1 then break
        Wend


        disp_inp$=""
        disp_desc$=""
        return
        v4$="Are You Ready To Clear All Detail Through "+fndate$(p9$)

Clear_Data: rem --- Clear Data

        call pgmdir$+"adc_progress.aon","N","","","","",0,art02_dev,1,meter_num,status
        read (art02_dev,key=firm_id$,dom=*next)

        While more
            art02a_key$=key(art02_dev,end=*break)
            read (art02_dev)
            if art02a_key.fimr_id$<>firm_id$ then break
            if art02a_key.year$+art02a_key.month$>p9$(1,4) then continue
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            remove (art02_dev,key=art02a_key$)
        wend

        return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fndate$(q$)
            q1$=""
            q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
            if q1$="" q1$=q$
            return q1$
        fnend

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem -   #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem --- #endinclude std_end.src

        end
