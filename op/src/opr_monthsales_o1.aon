rem --- MTD Sales Report/Print
rem --- Program opr_eb v8.0.0 22Jan2008 (opr_eb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/22/2008 03:12:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    precision 4

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    more=1
    recs=0
    total_recs=0
    dim a[13],t0$(28),t1$(28),x[1],t[8],u[8]
    x0$="First Date"
    x1$="Last Date",page=0,width=132,l9=59,l=l9+1,headings=3
    dim headings$[headings]
    if p8$<>"" then  x0$=fndate$(p8$)
    if p9$<>"" then  x1$=fndate$(p9$)
    h3$="From "+x0$+" Thru "+x1$
    clock$="",when$=sysinfo.system_date$
    headings$[0]=n1$
    headings$[1]=n3$,headings$[2]=h3$
    m4$="-##0.00%"
    m4=len(m4$)
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",m0$,0,m0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","A","",m1$,0,m1
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","U","",m2$,0,m2
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","R","",m3$,0,m3
    call pgmdir$+"adc_sizemask.aon",m1$,m1,8,13

rem ---  column heading

    dim columns$[10,10]
    columns=10
    columns$[0,0]="Invoice^Number",            columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]="Customer No",               columns$[1,1]="C",columns$[1,2]="10"
    columns$[2,0]="Date",                      columns$[2,1]="C",columns$[2,2]="20"
    columns$[3,0]="Sales",                     columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m1$,columns$[3,10]="T"
    columns$[4,0]="Tax",                       columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m1$,columns$[4,10]="T"
    columns$[5,0]="Freight",                   columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"
    columns$[6,0]="Discount",                  columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    columns$[7,0]="Total",                     columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$,columns$[7,10]="T"
    columns$[8,0]="Cost",                      columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m1$,columns$[8,10]="T"
    columns$[9,0]="Gross Profit",              columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"
    columns$[10,0]="GP%",                      columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m4$,columns$[10,10]="T"

rem --- Background

    call pgmdir$+"adc_progress.aon","CN","OPT_INVHDR","","","",0,opt01_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem --- Initial File Read

    read (opt01_dev,key=firm_id$+opt01a.ar_type$+p8$,knum=2,dom=*next)

rem --- Main Loop (Invoice Read)

    while more

        read record(opt01_dev,end=*break)opt01a$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

        if opt01a.firm_id$<>firm_id$ then break
        if p9$<>"" and  opt01a.invoice_date$>p9$ then break

    rem --- Void

        if opt01a.invoice_type$="V" then

            OutVect!.addItem(opt01a.ar_inv_no$)
            OutVect!.addItem("Void")
            xwk=fnblank(9)
            l=l+1
            continue
        endif

    rem ---  Get Customer Name

        gosub Find_Customer

    rem --- Print

        x0=0

        if opt01a.total_sales<>0 then
            x0=100*(opt01a.total_sales-opt01a.total_cost)/opt01a.total_sales
        endif

        OutVect!.addItem(opt01a.ar_inv_no$)
        OutVect!.addItem(opt01a.customer_id$)
        OutVect!.addItem(fndate$(opt01a.invoice_date$))
        OutVect!.addItem(str(opt01a.total_sales$))
        OutVect!.addItem(str(opt01a.tax_amount))
        OutVect!.addItem(str(opt01a.freight_amt))
        OutVect!.addItem(str(opt01a.discount_amt))
        OutVect!.addItem(str(opt01a.total_sales+opt01a.tax_amount+opt01a.freight_amt-opt01a.discount_amt))
        OutVect!.addItem(str(opt01a.total_cost))
        OutVect!.addItem(str(opt01a.total_sales-opt01a.total_cost))
        OutVect!.addItem(str(x0))
        xwk=fnblank(2)
        OutVect!.addItem(arm01a.customer_name$)
        xwk=fnblank(8)

        l=l+2
        recs=recs+1 

    rem --- Totals

        t0=t0+1
        t[0]=t[0]+opt01a.tax_amount
        t[1]=t[1]+opt01a.freight_amt
        t[2]=t[2]+opt01a.discount_amt
        t[3]=t[3]+opt01a.comm_percent
        t[4]=t[4]+opt01a.taxable_amt
        t[5]=t[5]+opt01a.comm_amt
        t[6]=t[6]+opt01a.total_sales
        t[7]=t[7]+opt01a.total_cost
    wend

rem --- Main Loop Ends

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    x0=0
    if t[6]<>0 then  x0=100*(t[6]-t[7])/t[6]

    OutVect!.addItem("Total Invoices:")
    OutVect!.addItem(str(t0))
    xwk=fnblank(9)
    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    OutVect!.addItem("Totals:")
    xwk=fnblank(2)
    OutVect!.addItem(str(t[6]))
    OutVect!.addItem(str(t[0]))
    OutVect!.addItem(str(t[1]))
    OutVect!.addItem(str(t[2]))
    OutVect!.addItem(str(t[6]+t[0]+t[1]-t[2]))
    OutVect!.addItem(str(t[7]))
    OutVect!.addItem(str(t[6]-t[7]))
    OutVect!.addItem(str(x0)) 

rem --- Averages

    if t0<>0 then
        for x=0 to 7
            t[x]=t[x]/t0
        next x

        x0=0
        if t[6]<>0 then  x0=100*(t[6]-t[7])/t[6]

        OutVect!.addItem("Averages:")
        xwk=fnblank(2)
        OutVect!.addItem(str(t[6]))
        OutVect!.addItem(str(t[0]))
        OutVect!.addItem(str(t[1]))
        OutVect!.addItem(str(t[2]))
        OutVect!.addItem(str(t[6]+t[0]+t[1]-t[2]))
        OutVect!.addItem(str(t[7]))
        OutVect!.addItem(str(t[6]-t[7]))
        OutVect!.addItem(str(x0))

    endif

    goto std_exit

    if opt01a.total_cost>999 then  opt01a.total_cost=999.99
    if opt01a.invoice_type$<>"V" then

        OutVect!.addItem(opt01a.customer_id$)
        OutVect!.addItem(str(opt01a.ar_inv_no$))
        OutVect!.addItem(fndate$(opt01a.invoice_date$))
        OutVect!.addItem(str(opt01a.tax_amount))
        OutVect!.addItem(str(opt01a.freight_amt))
        OutVect!.addItem(str(opt01a.discount_amt))
        OutVect!.addItem(str(opt01a.comm_percent))
        OutVect!.addItem(str(opt01a.taxable_amt))
        OutVect!.addItem(str(opt01a.tax_amount+opt01a.discount_amt+opt01a.freight_amt-opt01a.comm_percent+opt01a.taxable_amt))
        OutVect!.addItem(str(opt01a.taxable_amt))
        OutVect!.addItem(str(opt01a.total_sales))
        OutVect!.addItem(str(opt01a.total_cost))
        OutVect!.addItem(arm01a.customer_name$)

        l=l+3
        u[0]=u[0]+opt01a.tax_amount
        u[1]=u[1]+t[1]
        u[2]=u[2]+opt01a.discount_amt 
        u[5]=u[5]+opt01a.comm_percent
        u[3]=u[3]+opt01a.taxable_amt
        u1=u1+opt01a.total_sales
        u=u+opt01a.total_cost

    endif

rem --- Print VOID

    OutVect!.addItem(opt01a.customer_id$)
    OutVect!.addItem(str(opt01a.ar_inv_no$))
    OutVect!.addItem((fndate$(opt01a.sequence_000$))+"   ****Void****",'lf')
    l=l+2

Find_Customer: rem --- Find Customer

    arm01a.customer_name$="Not On File"
    find record (arm01_dev,key=firm_id$+opt01a.customer_id$,dom=*next) arm01a$

    return

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions
rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src


std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem --- #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
