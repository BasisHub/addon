rem ==========================================================================
rem --- gmx_fixxrefs.aon 
rem --- Remove broken links in Addon-GoldMine cross reference file.
rem --- 
rem --- AddonSoftware Version 15.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    setesc std_error
    seterr std_error

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL")
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Run Report?

    msg_id$="AON_RUN_QUERY"
    dim msg_tokens$[1]
    msg_tokens$[1]=sysinfo.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_report

rem --- Open/Lock files

    num_files=3
    dim open_tables$[1:num_files], open_opts$[1:num_files], open_chans$[1:num_files], open_tpls$[1:num_files]
    open_tables$[1] ="GMS_PARAMS",    open_opts$[1] = "OTA"
    open_tables$[2] ="GMX_CUSTOMER",  open_opts$[2] = "OTA"
    open_tables$[3] ="ARM_CUSTMAST",  open_opts$[3] = "OTA"
    
    gosub open_tables
    
    gmsParams_dev = num(open_chans$[1])
    gmxCustomer_dev = num(open_chans$[2])
    armCustmast_dev = num(open_chans$[3])
    
    dim gmsParams$:open_tpls$[1]
    dim gmxCustomer$:open_tpls$[2]
    dim armCustmast$:open_tpls$[3]

rem --- GoldMine connection parameters must exist

    findrecord(gmsParams_dev,key=firm_id$+"GM",err=std_missing_params)gmsParams$
    if cvs(gmsParams.webservice_url$,2)="" or cvs(gmsParams.db_url$,2)="" then
        msg_id$="GM_MISS_CONN_PARAM"
        gosub disp_message
        goto std_exit
    endif
    
    use ::gmo_GmInterfaceClient.aon::GmInterfaceClient
    declare GmInterfaceClient gmClient!
    gmClient!=new GmInterfaceClient()
    
rem --- Get customer_id mask

    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Column headings

    columns=4
    dim columns$[columns,10]
    columns$[0,0]=Translate!.getTranslation("AON_STATUS"),                               columns$[0,1]="C", columns$[0,2]="8"
    columns$[1,0]="GM ACCOUNTNO",                                                        columns$[1,1]="C", columns$[1,2]="20"
    columns$[2,0]="GM RECID",                                                            columns$[2,1]="C", columns$[2,2]="15"
    columns$[3,0]=Translate!.getTranslation("DDM_ELEMENTS-FIRM_ID_ENTRY-DD_ATTR_LABL"),  columns$[3,1]="C", columns$[3,2]="8"
    columns$[4,0]=Translate!.getTranslation("AON_CUST_NO"),                              columns$[4,1]="C", columns$[4,2]="8"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Report headings

    headings=1
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$ 

rem --- Init progress meter

    temp_xfin$=fin(gmxCustomer_dev,err=*return)
    total_recs=dec(temp_xfin$(77,4))
    curr_rec=0
    task_val$="GMX_FIXXREFS"
    task_desc$="Validating GM Cross Refs"

    progress! = bbjAPI().getGroupNamespace()
    progress!.setValue("+process_task",task_val$+"^C^"+task_desc$+"^CNC^"+str(total_recs)+"^")

    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    if milestone>total_recs/10 then
        milestone=int(total_recs/10)
        if milestone<1 then milestone=1
    endif

rem --- Validate all cross references in gmx_customer

    read(gmxCustomer_dev,key="",dom=*next)
    while 1
        gmxCustomer_key$=key(gmxCustomer_dev,end=*break)
        readrecord(gmxCustomer_dev)gmxCustomer$

        rem --- Update Progress Meter
        curr_rec=curr_rec+1
        if mod(curr_rec,milestone)=0
            progress!.setValue("+process_task",task_val$+"^U^"+str(curr_rec)+"^")
        endif
        
        rem --- Verify firm_id + customer_id exists in arm_custmast
        recordFound=0
        find(armCustmast_dev,key=gmxCustomer.firm_id$+gmxCustomer.customer_id$,dom=*next); recordFound=1
        if !recordFound then
            rem --- Broken cross reference, remove link
            gosub remove_link
            continue
        endif
        
        rem --- Verify accountno + recid exists in GoldMine
        contactInfo!=gmClient!.getGmContactInfo(gmxCustomer.gm_accountno$,gmxCustomer.gm_recid$,firm_id$)
        if contactInfo!.isEmpty() then
            rem --- Broken cross reference, remove link
            gosub remove_link
            continue
        endif
    wend

rem --- All done

    if recs=0
        msg_id$="GM_NO_BROKEN_LINKS"
        gosub disp_message
        goto std_exit_no_report
    endif

    gmClient!.close()
    goto std_exit

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

remove_link: rem --- Remove link for broken cross reference

        remove(gmxCustomer_dev,key=gmxCustomer_key$)

        rem --- Log link removed
        recs=recs+1
        OutVect!.addItem("Removed")
        OutVect!.addItem(gmxCustomer.gm_accountno$)
        OutVect!.addItem(gmxCustomer.gm_recid$)
        OutVect!.addItem(gmxCustomer.firm_id$)
        OutVect!.addItem(fnmask$(gmxCustomer.customer_id$(1,customer_size),m0$))

    return
    
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto std_exit
    endif

    return

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return

rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    progress!.setValue("+process_task",task_val$+"^D^")
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

std_exit_no_report:

    progress!.setValue("+process_task",task_val$+"^D^")
    OutVect!=null()
    goto std_exit

    end
