rem ==========================================================================
rem --- gmm_custimport.aon 
rem --- Loads GoldMine's customers/contacts into Addon's arm_custmast.
rem --- Generates report/log showing customers imported into Addon.
rem --- 
rem --- AddonSoftware Version 15.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    use ::gmo_Gm2AonCustomer.aon::Gm2AonCustomer
    use ::gmo_GmInterfaceClient.aon::GmInterfaceClient

    use java.util.Properties

    setesc std_error
    seterr std_error

rem --- Initializations

    pgmdir$=stbl("+DIR_PGM",err=*next)
    dir_syp$=stbl("+DIR_SYP")
    sysGUI! = BBjAPI().getSysGui()

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL")
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$
    
rem --- Set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif    
   	rd_alias_id$=cvs(rd_alias_id$,4)

rem --- Run Report?

    msg_id$="AON_RUN_QUERY"
    dim msg_tokens$[1]
    msg_tokens$[1]=sysinfo.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_report

rem --- Open/Lock files

    num_files=1
    dim open_tables$[1:num_files], open_opts$[1:num_files], open_chans$[1:num_files], open_tpls$[1:num_files]
    open_tables$[1] ="ARM_CUSTMAST",  open_opts$[1] = "OTA"
    
    gosub open_tables
    
    armCustmast_dev = num(open_chans$[1]); dim armCustmast$:open_tpls$[1]

rem --- Get customer_id mask

    call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",m0$,0,customer_size
    
rem --- Document initializations

    OutVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Column headings

    columns=5
    dim columns$[columns,10]
    columns$[0,0]=Translate!.getTranslation("AON_STATUS"),                               columns$[0,1]="C", columns$[0,2]="15"
    columns$[1,0]=Translate!.getTranslation("AON_COMPANY"),                              columns$[1,1]="C", columns$[1,2]="35"
    columns$[2,0]=Translate!.getTranslation("AON_CONTACT"),                              columns$[2,1]="C", columns$[2,2]="35"
    columns$[3,0]=Translate!.getTranslation("DDM_ELEMENTS-FIRM_ID_ENTRY-DD_ATTR_LABL"),  columns$[3,1]="C", columns$[3,2]="6"
    columns$[4,0]=Translate!.getTranslation("AON_CUST_NO"),                              columns$[4,1]="C", columns$[4,2]="8"
    columns$[5,0]=Translate!.getTranslation("AON_CUSTOMER_NAME"),                        columns$[5,1]="C", columns$[5,2]="30"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Report headings

    headings=1
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$ 

rem --- Get GoldMine interface client and the import grid

    gmClient!=callpoint!.getDevObject("gmClient")
    importGrid!=callpoint!.getDevObject("importGrid")
    gm2AonCustomer!=new Gm2AonCustomer(firm_id$)
    companyMap!=new java.util.HashMap()
    
rem --- Start progress meter

    meter_title$=Translate!.getTranslation("AON_IMPORTING_SELECTED_RECORDS")
    meter_total_recs=importGrid!.getNumRows()
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST-OK"
    gosub disp_meter

rem --- Read through GoldMine import grid processing records for this firm

    for row=0 to importGrid!.getNumRows()-1
        rem --- Capture cell data for this grid row in local variables
        gmData!=new Properties()
        addCheckBox=importGrid!.getCellState(row,0)
        linkCheckBox=importGrid!.getCellState(row,1)
        updateCheckBox=importGrid!.getCellState(row,2)
        gmCompany$=importGrid!.getCellText(row,3)
        gmData!.setProperty("company",gmCompany$)
        gmContact$=importGrid!.getCellText(row,4)
        gmData!.setProperty("contact",gmContact$)
        aon_firm_id$=firm_id$
        aon_customer_id$=importGrid!.getCellText(row,5)
        aon_customer_name$=importGrid!.getCellText(row,6)
        aon_contact_name$=importGrid!.getCellText(row,7)
        gmData!.setProperty("phone1",importGrid!.getCellText(row,8))
        gmData!.setProperty("ext1",importGrid!.getCellText(row,9))
        gmData!.setProperty("fax",importGrid!.getCellText(row,10))
        gmData!.setProperty("address1",importGrid!.getCellText(row,11))
        gmData!.setProperty("address2",importGrid!.getCellText(row,12))
        gmData!.setProperty("address3",importGrid!.getCellText(row,13))
        gmData!.setProperty("city",importGrid!.getCellText(row,14))
        gmData!.setProperty("state",importGrid!.getCellText(row,15))
        gmData!.setProperty("zip",importGrid!.getCellText(row,16))
        gmData!.setProperty("country",importGrid!.getCellText(row,17))
        gmData!.setProperty("accountno",importGrid!.getCellText(row,18))
        gmData!.setProperty("recid",importGrid!.getCellText(row,19))

        rem --- Add
        if addCheckBox then
            status$=Translate!.getTranslation("AON_ADDED")
            meter_proc_recs=meter_proc_recs+1
            
            rem --- Create new Addon customer for this GoldMine company
            aon_customer_id$=gm2AonCustomer!.addCustomer(gmData!)

            rem --- Update log
            OutVect!.addItem(status$)
            OutVect!.addItem(gmCompany$)
            OutVect!.addItem(gmContact$)
            OutVect!.addItem(aon_firm_id$)
            OutVect!.addItem(fnmask$(aon_customer_id$,m0$))
            aonProps! = gmClient!.mapToAddon("company",gmCompany$)
            OutVect!.addItem(aonProps!.getProperty("value1"))
        endif

        rem --- Link
        if linkCheckBox then
            status$=Translate!.getTranslation("AON_LINKED")
            meter_proc_recs=meter_proc_recs+1

            rem --- Write Addon-GoldMine cross reference record
            gm2AonCustomer!.linkCustomer(aon_customer_id$,gmData!)

            rem --- Update log
            OutVect!.addItem(status$)
            OutVect!.addItem(gmCompany$)
            OutVect!.addItem(gmContact$)
            OutVect!.addItem(aon_firm_id$)
            OutVect!.addItem(fnmask$(aon_customer_id$,m0$))
            aonProps! = gmClient!.mapToAddon("company",gmCompany$)
            OutVect!.addItem(aonProps!.getProperty("value1"))
        endif

        rem --- Update
        if updateCheckBox then
            status$=Translate!.getTranslation("AON_UPDATED")
            meter_proc_recs=meter_proc_recs+1
            
            rem --- Get existing Addon record before any changes
            dim beforeCustmast$:fattr(armCustmast$)
            foundCustmast=0
            readrecord(armCustmast_dev,key=aon_firm_id$+aon_customer_id$,knum="PRIMARY",dom=*next)beforeCustmast$; foundCustmast=1

            rem --- Update existing Addon customer with GoldMine contact data
            gm2AonCustomer!.updateCustomer(aon_customer_id$,gmData!)

            rem --- Update log
            OutVect!.addItem(status$)
            OutVect!.addItem(gmCompany$)
            OutVect!.addItem(gmContact$)
            OutVect!.addItem(aon_firm_id$)
            OutVect!.addItem(fnmask$(aon_customer_id$,m0$))
            aonProps! = gmClient!.mapToAddon("company",gmCompany$)
            
            OutVect!.addItem(aonProps!.getProperty("value1"))
            if foundCustmast then
                rem --- Show updated fields Before and After
                OutVect!.addItem("")
                OutVect!.addItem(Translate!.getTranslation("AON_BEFORE")+$00$+"CB")
                OutVect!.addItem(Translate!.getTranslation("AON_AFTER")+$00$+"CB")
                ignore=fnblank(3)

                rem --- Get Addon record after changes
                dim armCustmast$:fattr(armCustmast$)
                readrecord(armCustmast_dev,key=aon_firm_id$+aon_customer_id$,knum="PRIMARY",dom=*next)armCustmast$
                
                rem --- Loop thru beforeCustmast$ and report what was changed in armCustmast$
                fieldList$=fattr(beforeCustmast$,"")
                while len(fieldList$)>0
                    xpos=pos($0A$=fieldList$)
                    field$=fieldList$(1,xpos-1)
                    fieldList$=fieldList$(xpos+1)
                    
                    rem --- Fields we are interested in are all character fields
                    wk$=fattr(beforeCustmast$,field$)
                    if dec(wk$(1,1))<>1 then continue

                    rem --- Report changes
                    before$=field(beforeCustmast$,field$)
                    after$=field(armCustmast$,field$)
                    if after$<>before$ then
                        OutVect!.addItem(field$+":"+$00$+"R")
                        OutVect!.addItem(before$)
                        OutVect!.addItem(after$)
                        ignore=fnblank(3)
                    endif
                wend
                
                ignore=fnblank_line(void)
            else
                OutVect!.addItem(Translate!.getTranslation("AON_ERROR")+":"+$00$+"RB")
                OutVect!.addItem(Translate!.getTranslation("AON_EXISTING_CUSTOMER_RECORD_NOT_FOUND")+$00$+"B")
                ignore=fnblank(4)
                
                ignore=fnblank_line(void)
            endif
        endif

        rem --- Skip
        if addCheckBox+linkCheckBox+updateCheckBox=0 then
            status$=Translate!.getTranslation("AON_SKIPPED")

            rem --- Update log
            OutVect!.addItem(status$)
            OutVect!.addItem(gmCompany$)
            OutVect!.addItem(gmContact$)
            OutVect!.addItem(aon_firm_id$)
            if cvs(aon_customer_id$,2)="" then
                OutVect!.addItem(aon_customer_id$)
            else
                OutVect!.addItem(fnmask$(aon_customer_id$,m0$))
            endif
            OutVect!.addItem(aon_customer_name$)
        endif
        
        rem --- Increment progress meter
        meter_text$=status$+" ... "+gmCompany$
        meter_action$="MTR-LST"
        gosub disp_meter
    next row

rem --- All done

    if meter_proc_recs=0 then
        ignore=fnblank_line(void)
        
        OutVect!.addItem(Translate!.getTranslation("AON_NO_RECORDS_SELECTED_FOR_IMPORTING")+$00$+"B")
        ignore=fnblank(5)
    endif

    rem --- Stop progress meter
    meter_text$=""
    meter_proc_recs=meter_total_recs
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Enable DocOut special formatting
    out_action$="FORMAT"

    goto std_exit

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
    for q1=1 to q0
        OutVect!.addItem("")
    next q1
    return void
    fnend

rem --- Create a blank line.  'void' is simply a variable; it's there to remind you that this function takes no input

    def fnblank_line(void)=fnblank(columns+1)

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend
    
disp_meter:rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return
    
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto std_exit
    endif

    return

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return

rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
