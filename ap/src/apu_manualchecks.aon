rem --- Manual Check Register Update
rem --- Program apr_manualcheck v8.0.0 11Feb2007 (apu_ca)
rem --- Created by adx_codeport.bbx v1.1.5 (02/11/2007 03:09:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- WIP to fill in missing logic 10/07.CH
rem --- post codeport work done, but needs careful testing!.CH

    seterr std_error
    setesc std_error

    next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()

rem --- Close printer and destroy current progress meter (if one exists)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

rem --- Skip update if errors were encountered

    if errors goto std_exit

rem --- Initializations

    tot_pers=num(gls01a.total_pers$)
    curr_ap_yr=num(aps01a.current_year$)
    curr_1099_yr=num(aps01a.cur_1099_yr$)
    gl_per_end$=field(gls01a$,"per_ending_"+str(tot_pers:"00"))
    if gl_per_end$<gls01a.per_ending_01$ curr_ap_yr=curr_ap_yr+1
    gl_per_end$=str(curr_ap_yr:"0000")+gl_per_end$
    gl_pri_per_end$=str(curr_ap_yr-1:"0000")+gl_per_end$(5)
    gl_calendar_dt$=str(curr_1099_yr:"0000")+"1231"
    gl_pri_calendar_dt$=str(curr_1099_yr-1:"0000")+"1231"

    dim t[2]

rem --- Get user approval to update

    msg_id$="AON_UPDT_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,ape02_dev,1,meter_num,status
    read (ape02_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)

rem --- Read next Check Header (ape-02) record

    while moreheaders
          k$=key(ape02_dev,end=*break)
          if pos(firm_id$+batch_no$=k$)<>1 break
          read record (ape02_dev,key=k$) ape02a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Initializations for this invoice

          ape02a_key$=ape02a.firm_id$+ape02a.ap_type$+ape02a.check_no$+ape02a.vendor_id$
          check$=ape02a.firm_id$+ape02a.ap_type$+ape02a.check_no$+ape02a.vendor_id$
          inval_tran=0

          if ape02a.trans_type$<>"V"
              rem --- Retrieve Vendor Master (apm-01) record

              dim apm01a$:fattr(apm01a$)
              apm01a.firm_id$=firm_id$
              apm01a.vendor_id$=ape02a.vendor_id$
              apm01a.vendor_name$=nf$
              k$=apm01a.firm_id$+apm01a.vendor_id$ 
              find record (apm01_dev,key=firm_id$+apm01a.vendor_id$,dom=*next) apm01a$

              when$=ape02a.check_date$
              ref3$=ape02a.check_no$+" "+ape02a.ap_type$
          endif

          switch pos(ape02a.trans_type$="MRV")
          
            case 1; rem manual

              rem --- Position the Invoice Detail (ape-22) file

              read (ape22_dev,key=check$,dom=*next)

              rem --- Read the next Invoice Detail (ape-22) record

              while moredetail
                    ape22a_key$=key(ape22_dev,end=*break)
                    if pos(check$=ape22a_key$)<>1 break
                    read record (ape22_dev) ape22a$
                    ref2$=ape22a.ap_inv_no$

                    dim apt01a$:fattr(apt01a$)
                    dim apm02a$:fattr(apm02a$)
                    read record (apm02_dev,key=firm_id$+ape22a.vendor_id$+ape22a.ap_type$,dom=*next)apm02a$
                    apt01a.firm_id$=ape22a.firm_id$
                    apt01a.ap_type$=ape22a.ap_type$
                    apt01a.vendor_id$=ape22a.vendor_id$
                    apt01a.ap_inv_no$=ape22a.ap_inv_no$
                    apt01a.sequence_00$="00"
                    apt01a.ap_dist_code$=ape22a.ap_dist_code$
                    apt01a.payment_grp$=apm02a.payment_grp$
                    apt01a.ap_terms_code$=apm02a.ap_terms_code$
                    apt01a.invoice_date$=ape22a.invoice_date$
                    apt01a.accting_date$=ape22a.invoice_date$
                    apt01a.inv_due_date$=ape22a.invoice_date$
                    apt01a.disc_date$=ape22a.invoice_date$
                    apt01a.invoice_amt=ape22a.invoice_amt
                    apt01a.discount_amt=ape22a.discount_amt
                    apt01a.retention=ape22a.retention
                    apt01a.invoice_bal=apt01a.invoice_amt

                    found_hist=0
                    found_mc_inv_flag$=""
                    found_mc_inv_adj$=""
                    
                    while 1
                    extract record (apt01_dev,key=ape22a.firm_id$+ape22a.ap_type$+ape22a.vendor_id$+ape22a.ap_inv_no$,dom=*break)apt01a$
                        found_hist=1
                        found_mc_inv_flag$=apt01a.mc_inv_flag$
                        found_mc_inv_adj$=apt01a.mc_inv_adj$
                        break
                    wend
                    
                    v0$="M"                    
                    if found_hist=0
                        f0$="OI";rem Outside Invoice Flag
                        apt01a.mc_inv_flag$="M"
                    endif
                    
                    if apt01a.mc_inv_flag$="M" and apt01a.mc_inv_adj$<>"A" and apt01a.mc_inv_rev$<>"R" then f0$="OI";rem --- per v7 apu_ca 1/2011 CAH
                    
                    gosub open_inv
                    apt01a.invoice_bal=apt01a.invoice_bal+apt11a.trans_amt
                    apt01a$=field(apt01a$)
                    writerecord(apt01_dev)apt01a$

                    if f0$<>"OI"
                        o9=1
                        gosub update_vendhist
                    else
                        rem --- Position GL distribution detail (ape-12) file

                        detail$=ape22a.firm_id$+ape22a.ap_type$+ape22a.check_no$+
:                         ape22a.vendor_id$+ape22a.ap_inv_no$

                        rem --- Process miscellaneous GL entries

                        read (ape12_dev,key=detail$,dom=*next)
                        while moredetail
                              ape12a_key$=key(ape12_dev,end=*break)
                              if pos(detail$=ape12a_key$)<>1 break
                              read record (ape12_dev) ape12a$
                              
                              dim apt02a$:fattr(apt02a$)                             
                              apt02a.firm_id$=ape22a.firm_id$
                              apt02a.ap_type$=ape22a.ap_type$
                              apt02a.vendor_id$=ape22a.vendor_id$
                              apt02a.invoice_type$="C"
                              apt02a.reference$=ape22a.check_no$
                              apt02a.gl_account$=ape12a.gl_account$
                              apt02a.accting_date$=ape02a.check_date$                             
                              extract record (apt02_dev,key=apt02a.firm_id$+apt02a.ap_type$+apt02a.vendor_id$+apt02a.invoice_type$+
:                                apt02a.reference$+apt02a.gl_account$+apt02a.accting_date$,dom=*next) apt02a$
                              apt02a.gl_post_amt=apt02a.gl_post_amt+ape12a.gl_post_amt
                              apt02a.units=apt02a.units+ape12a.units
                              apt02a$=field(apt02a$)
                              write record (apt02_dev) apt02a$

                              rem --- Delete GL Distribution Detail (ape-12) record 
                              rem --- and loop back for the next one

                              remove (ape12_dev,key=ape12a_key$)
                        wend
                        o9=0
                        gosub update_vendhist
                    endif
        
                    rem --- Open CK
                    
                    dim apt05a1$:fattr(apt05a$)
                    apt05a1.firm_id$=ape22a.firm_id$
                    apt05a1.ap_type$=ape22a.ap_type$
                    apt05a1.check_no$=ape22a.check_no$
                    apt05a1.vendor_id$=ape22a.vendor_id$
                    apt05a1.ap_inv_no$=ape22a.ap_inv_no$
                    apt05a1.check_date$=ape02a.check_date$
                    apt05a1.trans_type$=ape02a.trans_type$
                    apt05a1.ap_dist_code$=ape22a.ap_dist_code$
                    
                    apt05a1.vendor_name$=ape02a.vendor_name$
                    apt05a1.invoice_amt=ape22a.invoice_amt
                    apt05a1.discount_amt=ape22a.discount_amt
                    apt05a1.retention=ape22a.retention

                    multi_tp$=apt05a1.ap_type$
                    if multitypes<>1 multi_tp$=fill(len(multi_tp$)," ")

                    gosub remove_reversal
                    extract record (apt05_dev,key=apt05a1.firm_id$+apt05a1.ap_type$+apt05a1.check_no$+apt05a1.vendor_id$+apt05a1.ap_inv_no$,dom=*next)xwk$;rem Advisory Locking
                    apt05a1$=field(apt05a1$)
                    write record (apt05_dev) apt05a1$
                    v0$="O"
                    if bankrec gosub bank_rec

                    rem --- Delete Invoice Detail (ape-22) record and loop back for the next one

                    remove (ape22_dev,key=ape22a_key$)
              wend            
            break

            case 2; rem reversal

                dim apt05a1$:fattr(apt05a$)
                dim apt05a2$:fattr(apt05a$)

                read (apt05_dev,key=ape02a_key$,dom=*next)
                while more
                    apt05_key$=key(apt05_dev,end=*break)
                    if apt05_key$(1,len(ape02a_key$))<>ape02a_key$ break
                    read record (apt05_dev) apt05a1$
                    if apt05a1.firm_id$+apt05a1.ap_type$+apt05a1.check_no$+apt05a1.vendor_id$ <>
:                      ape02a.firm_id$+ape02a.ap_type$+ape02a.check_no$+ape02a.vendor_id$ continue
    
                    apt05a2$=apt05a1$
                    apt05a2.invoice_amt=-apt05a2.invoice_amt
                    apt05a2.discount_amt=-apt05a2.discount_amt
                    apt05a2.retention=-apt05a2.retention

                    rem --- Open Invoice
                    
                    dim apt01a$:fattr(apt01a$)
                    apt01a.firm_id$=apt05a1.firm_id$
                    apt01a.ap_type$=apt05a1.ap_type$
                    apt01a.vendor_id$=apt05a1.vendor_id$
                    apt01a.ap_inv_no$=apt05a1.ap_inv_no$
                    apt01a.sequence_00$="00"

                    o9=0
                    
                    while 1
                    find record (apt01_dev,key=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$,dom=*break) apt01a$
                        o9=1
                        break
                    wend
                    
                    if o9=1
                        if apt01a.mc_inv_flag$="M" 
                            if apt01a.mc_inv_rev$<>"R"
                                extract record (apt01_dev,key=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$,dom=*next)xwk$;rem Advisory Locking
                                apt01a.mc_inv_rev$="R"
                                write record (apt01_dev) apt01a$
                            endif
                        endif
                    endif

                    v0$="R"
                    extract record (apt01_dev,key=apt01a.firm_id$+apt01a.ap_type$+
:                       apt01a.vendor_id$+apt01a.ap_inv_no$) apt01a$

                    rem --- before gosub open_inv, which assumes we have an ape22a$, we need to dim/fill ape22$ w/ values from apt-05,
                    rem --- because we don't have an ape22$ on a reversal.
                    rem --- old pgms did this by setting the ape22 iolist var Y0$... to B0$... which was coming from apt-05 (or ape-05 in v6). 1/2011 CAH
                    
                    dim ape22a$:fattr(ape22a$)
                    ape22a.firm_id$=apt05a1.firm_id$
                    ape22a.ap_type$=apt05a1.ap_type$
                    ape22a.check_no$=apt05a1.check_no$
                    ape22a.vendor_id$=apt05a1.vendor_id$
                    ape22a.ap_inv_no$=apt05a1.ap_inv_no$
                    ape22a.sequence_00$="00"
                    ape22a.invoice_date$=apt05a1.check_date$
                    ape22a.ap_dist_code$=apt05a1.ap_dist_code$
                    ape22a.invoice_amt=-apt05a1.invoice_amt
                    ape22a.discount_amt=-apt05a1.discount_amt
                    ape22a.retention=-apt05a1.retention
                                        
                    gosub open_inv
                    apt01a.invoice_bal=apt01a.invoice_bal+apt11a.trans_amt
                    apt01a$=field(apt01a$)
                    write record (apt01_dev) apt01a$
                    
                    gosub update_vendhist

                    rem --- check detail
                    rem --- why is it doing this? the keys are the same, so writing, then turning around and removing, only to write again below... old versions had same code. 1/2011 CAH
                    write record (apt05_dev) apt05a2$
                    remove (apt05_dev,key=apt05_key$)

                    v0$="R"
                    if bankrec gosub bank_rec
                wend

                rem --- Reverse Dist
                
                if cvs(apt05a2.firm_id$,3) <> "" then
                    d$=apt05a2.firm_id$+apt05a2.ap_type$+apt05a2.vendor_id$+"C"+apt05a2.check_no$
                    read (apt02_dev,key=d$,dom=*next)
                    while more
                        k$=key(apt02_dev,end=*break)
                        if k$(1,len(d$))<>d$ break
                        extract record (apt02_dev) apt02a$;rem Advisory Locking

                        apt02a.invoice_type$="I"
                        apt02a.reference$=ape22a.ap_inv_no$
                        apt02a$=field(apt02a$)
                        write record (apt02_dev) apt02a$
                        remove (apt02_dev,key=k$,dom=*next)
                    wend
                endif

                rem --- Write Open Check
                
                dim apt05a1$:fattr(apt05a$)
                apt05a1.firm_id$=ape02a.firm_id$
                apt05a1.ap_type$=ape02a.ap_type$
                apt05a1.check_no$=ape02a.check_no$
                apt05a1.vendor_id$=ape02a.vendor_id$
                apt05a1.ap_inv_no$=ape22a.ap_inv_no$
                apt05a1.trans_type$=ape02a.trans_type$
                apt05a1.ap_dist_code$=ape22a.ap_dist_code$
                apt05a1.check_date$=ape02a.check_date$
                apt05a1.vendor_name$=ape02a.vendor_name$
                apt05a1.invoice_amt=0
                apt05a1.discount_amt=0
                apt05a1.retention=0
                if multitypes<>1 apt05a1.ap_type$=""

                extract record (apt05_dev,key=apt05a1.firm_id$+apt05a1.ap_type$+apt05a1.check_no$+apt05a1.vendor_id$+apt05a1.ap_inv_no$,dom=*next)xwk$;rem Advisory Locking
                apt05a1$=field(apt05a1$)
                write record (apt05_dev) apt05a1$

            break

            case 3; rem void

                dim apt05a1$:fattr(apt05a$)
                apt05a1.firm_id$=ape02a.firm_id$
                apt05a1.ap_type$=ape02a.ap_type$
                apt05a1.check_no$=ape02a.check_no$
                apt05a1.vendor_id$=ape02a.vendor_id$
                apt05a1.trans_type$=ape02a.trans_type$
                apt05a1.check_date$=ape02a.check_date$
				dim apm02a$:fattr(apm02a$)
				find record (apm02_dev,key=firm_id$+ape02a.vendor_id$+ape02a.ap_type$,dom=*next) apm02a$
                apt05a1.ap_dist_code$=apm02a.ap_dist_code$
                apt05a1.vendor_name$=ape02a.vendor_name$
                apt05a1.invoice_amt=0
                apt05a1.discount_amt=0
                apt05a1.retention=0
                
                if multitypes=0 apt05a1.ap_type$=""
                extract record (apt05_dev,key=apt05a1.firm_id$+apt05a1.ap_type$+apt05a1.check_no$+apt05a1.vendor_id$+apt05a1.ap_inv_no$,dom=*next)xwk$;rem Advisory Locking
                apt05a1$=field(apt05a1$)                
                write record (apt05_dev) apt05a1$
                v0$="V"
                if bankrec gosub bank_rec

            break

            case default
                inval_tran=1
            break

          swend

          rem --- Delete Check Header (ape-02) record and loop back for the next one
          
          if inval_tran<>1
            remove (ape02_dev,key=ape02a_key$)
          endif
    wend

rem --- All done

    if gl$="Y"
       call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,status
       call pgmdir$+"glc_ctlupdate.aon",status
       call pgmdir$+"glc_ctldelete.aon",status
    endif
    call pgmdir$+"adc_batchdelete.aon",err=*next,status
    goto std_exit

open_inv:

    apt11_key$=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$
    read (apt11_dev,key=apt11_key$,dom=*next)

open_inv_dtl:
    while more

        k$=key(apt11_dev,end=*break)
        if k$(1,len(apt11_key$))<>apt11_key$ break
        read record (apt11_dev) apt11a$
        c1=num(apt11a.sequence_num$)

        rem --- Find Open Slot

        if apt11a.trans_type$=" " break
        t[0]=t[0]+apt11a.trans_amt
        t[1]=t[1]+apt11a.trans_disc
        t[2]=t[2]+apt11a.trans_ret

    wend

    apt11a.firm_id$=apt01a.firm_id$
    apt11a.ap_type$=apt01a.ap_type$
    apt11a.vendor_id$=apt01a.vendor_id$
    apt11a.ap_inv_no$=apt01a.ap_inv_no$
    apt11a.trans_type$=v0$
    apt11a.trans_date$=ape02a.check_date$
    apt11a.trans_ref$=ape02a.check_no$
    apt11a.trans_amt=(-ape22a.invoice_amt)+ape22a.retention
    apt11a.trans_disc=-ape22a.discount_amt
    if found_mc_inv_flag$="M" and found_mc_inv_adj$<>"A" 
        gosub same_inv_vend_diff_check
    else
        rem --- just setting c1=c1+1 here should take care of case where it was zero, or just increment it normally
        apt11a.sequence_num$=str(c1+1:"00")
        extract record (apt11_dev,key=apt11a.firm_id$+apt11a.ap_type$+apt11a.vendor_id$+apt11a.ap_inv_no$+apt11a.sequence_num$,dom=*next)xwk$;rem Advisory Locking
        apt11a$=field(apt11a$)
        write record (apt11_dev) apt11a$
    endif

    t[0]=t[0]+apt11a.trans_amt
    t[1]=t[1]+apt11a.trans_disc
    t[2]=t[2]+apt11a.trans_ret
return

same_inv_vend_diff_check: rem --- Same (Invoice#, Vendor#) Different Check#

rem --- Create a Record for Each Transaction

    dim cc1$(11),c[2],cc[2]
    let apt11a.sequence_num$=str(c1+1:"00")
    apt11a.trans_amt=ape22a.invoice_amt-ape22a.retention
    apt11a.trans_disc=ape22a.discount_amt
    apt11a.trans_type$="S"
    apt11a.trans_date$=ape02a.check_date$
    apt11a.trans_ref$=Translate!.getTranslation("AON_INVOICE")

    extract record (apt11_dev,key=apt11a.firm_id$+apt11a.ap_type$+apt11a.vendor_id$+apt11a.ap_inv_no$+apt11a.sequence_num$,dom=*next)xwk$;rem Advisory Locking
    apt11a$=field(apt11a$)
    rem --- the write record had a DOM= to itself ... removed for now.CH
    write record (apt11_dev) apt11a$
    extract record (apt01_dev,key=apt11a.firm_id$+apt11a.ap_type$+apt11a.vendor_id$+apt11a.ap_inv_no$)apt01a$;rem Advisory Locking
    apt01a.invoice_bal=apt01a.invoice_bal+apt11a.trans_amt
    apt01a$=field(apt01a$)
    write record (apt01_dev) apt01a$

    let apt11a.sequence_num$=str(num(apt11a.sequence_num$)+1:"00")
    apt11a.trans_type$=v0$
    apt11a.trans_date$=ape02a.check_date$
    apt11a.trans_ref$=ape02a.check_no$
    let apt11a.trans_amt=-apt11a.trans_amt,apt11a.trans_disc=-apt11a.trans_disc
    extract record (apt11_dev,key=apt11a.firm_id$+apt11a.ap_type$+apt11a.vendor_id$+apt11a.ap_inv_no$+apt11a.sequence_num$,dom=*next)xwk$;rem Advisory Locking
    apt11a$=field(apt11a$)    
    write record (apt11_dev) apt11a$
    let apt11a.trans_amt=-apt11a.trans_amt,apt11a.trans_disc=-apt11a.trans_disc; rem "Change sign back cuz 6450 expects the positive value "
return

update_vendhist: rem --- Vendor
    while more
        extract record (apm02_dev,key=firm_id$+ape22a.vendor_id$+ape22a.ap_type$,dom=*break) apm02a$
        let apm02a.lstpay_date$=ape02a.check_date$
        if ape02a.check_date$<=gl_pri_per_end$ apm02a.pyr_payments=apm02a.pyr_payments+ape22a.invoice_amt-ape22a.retention-ape22a.discount_amt,apm02a.pri_yr_discs=apm02a.pri_yr_discs+ape22a.discount_amt
        if ape02a.check_date$>gl_pri_per_end$ and ape02a.check_date$<=gl_per_end$ apm02a.ytd_payments=apm02a.ytd_payments+ape22a.invoice_amt-ape22a.retention-ape22a.discount_amt,apm02a.ytd_discs=apm02a.ytd_discs+ape22a.discount_amt
        if ape02a.check_date$>gl_per_end$ apm02a.nyr_payments=apm02a.nyr_payments+ape22a.invoice_amt-ape22a.retention-ape22a.discount_amt,apm02a.nyr_disc=apm02a.nyr_disc+ape22a.discount_amt
        if ape02a.check_date$<=gl_pri_calendar_dt$ apm02a.pri_cal_pmt=apm02a.pri_cal_pmt+ape22a.invoice_amt-ape22a.retention-ape22a.discount_amt
        if ape02a.check_date$>gl_pri_calendar_dt$ and ape02a.check_date$<=gl_calendar_dt$ apm02a.cur_cal_pmts=apm02a.cur_cal_pmts+ape22a.invoice_amt-ape22a.retention-ape22a.discount_amt
        if ape02a.check_date$>gl_calendar_dt$ apm02a.nxt_cyr_pmts=apm02a.nxt_cyr_pmts+ape22a.invoice_amt-ape22a.retention-ape22a.discount_amt
        if o9=1 apm02a.open_invs=apm02a.open_invs-ape22a.invoice_amt+ape22a.retention
        if o9=0 and ape02a.check_date$<=gl_pri_per_end$ apm02a.pyr_purch=apm02a.pyr_purch+ape22a.invoice_amt-ape22a.retention
        if o9=0 and ape02a.check_date$>gl_pri_per_end$ and ape02a.check_date$<=gl_per_end$ apm02a.ytd_purch=apm02a.ytd_purch+ape22a.invoice_amt-ape22a.retention
        if o9=0 if ape02a.check_date$>gl_per_end$ apm02a.nyr_purch=apm02a.nyr_purch+ape22a.invoice_amt-ape22a.retention
        apm02a$=field(apm02a$)
        write record (apm02_dev) apm02a$
        break
    wend
return

remove_reversal: rem --- Remove Reversal

    dim apt05a2$:fattr(apt05a$)
    wkey$=apt05a1.firm_id$+multi_tp$+apt05a1.check_no$
    read (apt05_dev,key=wkey$,dom=*next)
    while more
        k$=key(apt05_dev,end=*break)
        if k$(1,len(wkey$))<>wkey$ break
        extract record (apt05_dev) apt05a2$;rem Advisory Locking
        if apt05a2.trans_type$="R" remove (apt05_dev,key=k$) else read (apt05_dev)
    wend
return

bank_rec: rem --- Bank Rec

    if gl$="Y" then
        dim apm10b$:fattr(apm10b$)
        find record (apm10b_dev,key=apt05a1.firm_id$+"B"+apt05a1.ap_dist_code$,dom=*next) apm10b$
        glt05a.firm_id$=apt05a1.firm_id$
        glt05a.gl_account$=apm10b.gl_cash_acct$;rem cash acct
        glt05a.check_no$=apt05a1.check_no$
        glt05a.check_type$="A"
        glt05a.bnk_chk_date$=apt05a1.check_date$
        glt05a.description$=ape02a.vendor_name$
        glt05a.description$=apm01a.vendor_name$
        glt05a.check_amount=0
        extract record (glt05_dev,key=glt05a.firm_id$+glt05a.gl_account$+glt05a.check_no$,dom=*next) glt05a$;rem Advisory Locking
        glt05a.paid_code$=v0$
        if v0$="R" then
            glt05a.check_amount=glt05a.check_amount-(apt05a1.invoice_amt-apt05a1.discount_amt-apt05a1.retention)
        else
            glt05a.check_amount=glt05a.check_amount+(apt05a1.invoice_amt-apt05a1.discount_amt-apt05a1.retention)
        endif
        write record (glt05_dev) glt05a$
    endif

return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
