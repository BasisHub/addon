rem --- AP Check Printing for Jasper version of checks (Print Overlay)
rem --- Program apr_apchecks-jasper.aon v8.0.0 19Oct2007 (apr_eb)
rem --- Created by adx_codeport.bbx v1.1.5 (10/19/2007 05:37:14)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- (3/6/2013)
rem --- New Jasper version took the name, apr_apchecks.aon
rem --- BBjForm version renamed to apr_apchecks_BBjForm.aon

rem --- NOTES...

rem --- Assumptions
rem ---   - Accounting Stub drives overflow logic since it may have more rows if 'Print GL on Stub' param is set.
rem ---   - Memos print on both stubs if the 'Print Memo on Stub' flag is set.
rem ---   - Invoice info matches on the stubs for each check page regardless of overflow
rem ---     For example, say the Accting stub requires 3 pages (checks) such that check 1001 prints Inv 1 and 2,
rem ---     check 1002 prints Invs 3, 4, and 5, and check 1003 prints rest of Inv 5 plus Inv 6.

rem ---                               Check 1001             Check 1002                Check 1003
rem ---                             ---------------         ---------------           ---------------
rem ---         Accounting stub     First page of rows      Second page of rows        Third page of rows
rem ---                            (Invs 1, 2 w/GL)        (Invs 3, 4, 5 w/GL)        (Invs 5 w/rest of GL, 6 w/GL)
rem ---         Acct stub totals    ** Continued **         ** Continued **            Values
rem ---                             --------------------------------------------------------------------------
rem ---         Vendor stub        (Invs 1, 2,blank rows)  (Invs 3, 4, 5,blank rows)  (Invs 6, w/blank rows)
rem ---         Vend stub totals    ** Continued **         ** Continued **	           Values
rem ---                             --------------------------------------------------------------------------
rem ---         Check itself         VOID                    VOID                      Check data


rem --- Report components
rem ---   O/E Form
rem ---      apr_checks
rem ---         Introduces one additional control for selecting check section order
rem ---   Addon Backend
rem ---      apr_apchecks.aon
rem ---         Uses essentially pre-jasper logic, to fill the print work file, apw_chkjasperprn, 
rem ---         which is processed by the jaspers and .prcs.
rem ---   SPROCS
rem ---      APCHECKS_MAIN.prc
rem ---         Gets driver info from apw_chkjasperprn by using SELECT DISTINCT. 
rem ---         Rwsult set is passed back to Main jasper to use in calling sub-reports (stub and check).
rem ---      APCHECKS_STUB.prc
rem ---         Processes based on input param specifying Vendor stub or Accounting stub.
rem ---         Does a SELECT on apw_chkjasperprn to get, format and pass to jasper stub data.
rem ---         Rows passed out include the Totals row with formatted totals, and may include
rem ---         blank rows to ensure jasper prints the totals in the totals line.
rem ---      APCHECKS_CHECK.prc
rem ---         Does a SELECT on apw_chkjasperprn to get, format and pass to jasper check data: 
rem ---            check date, check amount, and the text of the "Exactly" string.
rem ---   Jaspers
rem ---      APCheck-Main.jasper/jrxml
rem ---         Just a driver, prints no actual data.
rem ---         Has three Detail sections each may print either stub or check.
rem ---         When printing stub, Main passes the specific stub-type (Vendor/Accouting) to stub-SPROC.
rem ---         Due to the nature of checks printing on stock, the sizes of each section are important.
rem ---      APCheck-Stub.jasper/jrxml
rem ---         Prints "Vendor Copy" or "Accounting Copy" depending on stub-type passed in.
rem ---         Does NOT do totally or formatting, just prints what's in apw_chkjasperprn.
rem ---      APCheck-Check.jasper/jrxml
rem ---         The actual check section. Prints either VOID or the payment amounts.
rem ---   New Files: apw_chkjasperprn and adx_locks
rem ---      apw_chkjasperprn
rem ---         This new workfile, apw_chkjasperprn, holds all data needed by the jaspers and .prcs for printing.
rem ---         It is similar in concept to the DocOut's OutVect!.
rem ---         The SPROCs query this work file for data in each jasper Detail section.
rem ---         It is ordered by firm, APType, check#, and allows the three sections (Stub, Stub, Check)
rem ---         to print in various orders.
rem ---         The order of the check section printing is determined by O/E selection which is passed to the
rem ---         jaspers that take care of printing the data.
rem ---      adx_locks
rem ---         New table, adx_locks, is essentially used to put a softlock on apw_chkjasperprn.
rem ---         We don't want data in apw_chkjasperprn to be changed while a print run is processing,
rem ---         but locking apw_chkjasperprn directly caused Jasper to err when trying to access the locked table.
rem ---          - Written to in callpoint ASVA, After Save Validation passes other tests.
rem ---          - Removed in .aon when exiting program.
rem ---                 Note: Old behavior allowed checks to be run repeatedly. This hasn't changed other than the
rem ---                       requirement that an actual print run be completed before another can start for a firm.


    setesc std_error
    seterr std_error

	use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

    use ::sys/prog/bao_utilities.bbj::BarUtils

	declare BBJasperReport BBjReport!
	declare BBJasperViewerWindow BBjReportWindow! 
    
    params! = Option!.getOptionMap()
		
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 50; rem -50 keeps it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 50
	
rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

	rem --- Set document Directory

    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)

    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    user_id$=sysinfo.user_id$
    proc_date$=date(jul(num(sysinfo.system_date$(1,4)),num(sysinfo.system_date$(5,2)),num(sysinfo.system_date$(7,2))):stbl("+DATE_MASK"))
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
	menu_option_id$=sysinfo.menu_option_id$

rem --- Derive/set path and filename for logo to go on form

    logo_file$=stbl("+CUST_IMAGES",err=*next)+stbl("+FORM_LOGO",err=*next)
    logo_filenm$=""
    if logo_file$<>""
        logo_chn=unt
        open (logo_chn,err=*endif)logo_file$
        logo_filenm$=fid(logo_chn)(9)
        close (logo_chn)
    endif

rem --- Make Document Archive Record and Get ID

    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=rd_alias_id$
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$="DOC_ID-NOREPRINT"
    gosub document_whse
    rd_archive_action$=""

rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)
    repTitle!=sysinfo.task_desc$+"_"+rd_doc_id$
    repTitle$=repTitle!.replace(" ","_")
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "APCheck-Main"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"

    declare BBJasperReport report!
	
rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",  ids$[1]="APS_PARAMS"
    files$[2]="ape-04",      ids$[2]="APE_CHECKS"
    files$[3]="apm-01",      ids$[3]="APM_VENDMAST"
    files$[4]="ape-04",      ids$[4]="APE_CHECKS"
    files$[5]="apm_payaddr", ids$[5]="APM_PAYADDR"
    files$[6]="apc_typecode",ids$[6]="APC_TYPECODE"
    files$[7]="apt-02",      ids$[7]="APT_INVOICEDIST"
    files$[8]="apw-01",      ids$[8]="APW_CHECKINVOICE"
    files$[9]="aps_report",  ids$[9]="APS_REPORT"
	files$[10]="apw_chkjasperprn",ids$[10]="APW_CHKJASPERPRN"
	files$[11]="adx_locks",  ids$[11]="ADX_LOCKS"
    files$[12]="aps_payauth",ids$[12]="APS_PAYAUTH"
    files$[13]="apm_approvers",ids$[13]="APM_APPROVERS"
    files$[14]="apt_invapproval",ids$[14]="APT_INVAPPROVAL"
	
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto all_done

    aps01_dev=channels[1]
    ape04_dev=channels[2]
    apm01_dev=channels[3]
    ape04_dev2=channels[4]
    apm08_dev=channels[5]
    apm10_dev=channels[6]
    apt02_dev=channels[7]
    apw01_dev=channels[8]
    aps01b_dev=channels[9]
	apw_chkprn_dev=channels[10]; rem apw_chkjasperprn
	adxlocks_dev=channels[11]
    payauth_dev=channels[12]
    apm_approvers_dev=channels[13]
    apt_invapproval_dev=channels[14]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ape04a$:templates$[2],apm01a$:templates$[3]
    dim ape04b$:templates$[4],apm08a$:templates$[5],apm10a$:templates$[6]
    dim apt02a$:templates$[7],apw01a$:templates$[8],aps01b$:templates$[9]
	dim apw_chkprn$:templates$[10]
	dim adxlocks$:templates$[11]
    dim payauth$:templates$[12],apm_approvers$:templates$[13],apt_invapproval$:templates$[14]

rem --- Clear any existing (stale) recs for this firm from the jasper print file

	call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",apw_chkprn_dev,firm_id$,status

rem --- Assign form input values to local variables

    check_date$=option!.getOptionData("CHECK_DATE")
    check_no$=option!.getOptionData("CHECK_NO")
    restart$=option!.getOptionData("PICK_CHECK")
    ap_type$=option!.getOptionData("AP_TYPE")
    vendor_id$=option!.getOptionData("VENDOR_ID")
	
	form_order$=option!.getOptionData("FORM_ORDER")
	top_part$=form_order$(1,1)
	middle_part$=form_order$(2,1)
	bottom_part$=form_order$(3,1)

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    find record (payauth_dev,key=aps01a_key$,dom=*next) payauth$
    
	call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",vend_mask$,0,vendor_length
    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",gl_acct_mask$,0,gl_acct_length
    
rem --- If using Payment Authorization, get all possible signers and their signature files

    if payauth.use_pay_auth then
        rem --- Build HashMap of signature files
        signerSignatureMap!=new java.util.HashMap()
        read(apm_approvers_dev,key=firm_id$,dom=*next)
        while 1
            apm_approvers_key$=key(apm_approvers_dev,end=*break)
            if pos(firm_id$=apm_approvers_key$)<>1 then break
            readrecord(apm_approvers_dev)apm_approvers$
            if apm_approvers.check_signer and !signerSignatureMap!.containsKey(apm_approvers.user_id$) then
                signerSignatureMap!.put(apm_approvers.user_id$,apm_approvers.signature_file$)
            endif
        wend
        
        rem --- Build HashMap of authorization limits
        signerAuthLimitMap!=new java.util.HashMap()
        read(apm_approvers_dev,key=firm_id$,dom=*next)
        while 1
            apm_approvers_key$=key(apm_approvers_dev,end=*break)
            if pos(firm_id$=apm_approvers_key$)<>1 then break
            readrecord(apm_approvers_dev)apm_approvers$
            if apm_approvers.check_signer and apm_approvers.limit_auth and !signerAuthLimitMap!.containsKey(apm_approvers.user_id$) then
                signerAuthLimitMap!.put(apm_approvers.user_id$,apm_approvers.max_auth_amt)
            endif
        wend
        
        rem --- Create TreeSet for signers of current check
        signerSet!=new java.util.TreeSet()
    endif
	
rem --- Set A/P Type if multiple types not installed

    if aps01a.multi_types$<>"Y"
        aptype$=fattr(ape04a$,"AP_TYPE")
        aptype_len=dec(aptype$(10,2))
        dim ap_type$(aptype_len)
    endif
	
initializations: rem --- Initializations

    q6=0
    show_progress=1
    prev_aptype_t0$=""
    prev_aptype_vend_t1$=""
    dim t[3]
	
    stub_amt_mask$="########.00CR"
    exactly_amt_mask$="*#######"
    check_amt_mask$="*"+stub_amt_mask$(2,10)
	
    more=1
    recs=0
	memodist_width=len(stub_amt_mask$)+gl_acct_length+3; rem Memo/GL Dist col width to align-Rt GL amts which are appended to GL Accts (aligned-L)
	
	acctstub_rowcnt=1; rem 1-based Accting Stub may have more rows than vend stub, so use it to determine overflow (old 'L')
	vendstub_rowcnt=1; rem 1-based

	max_stub_rows=14; rem change this to change # rows printing on stub. AND CHANGE jrxml to accomodate diff # of rows.
	
rem --- Check From Address

    aps01b_key$=firm_id$+"AP02"
    find record (aps01b_dev,key=aps01b_key$,err=std_missing_params) aps01b$
    ap_address$=aps01b.addr_line_1$+aps01b.addr_line_2$+aps01b.city$+aps01b.state_code$+aps01b.zip_code$
    call pgmdir$+"adc_address.aon",ap_address$,24,3,9,35

    if cvs(ap_address$(71),2)<>"" then
        stub_address$=ap_address$(71)
    else
        stub_address$=ap_address$(36,35)
    endif

rem --- Assign needed jasper params 

	params!.put("REPORT_NAME",sysinfo.task_desc$)
    params!.put("FIRM_ID",firm_id$)
	params!.put("FIRM_NAME",firm_name$)
    params!.put("BARISTA_WD",dir(""))  

	params!.put("CHECK_DATE",check_date$)
    params!.put("AP_TYPE",ap_type$)
    params!.put("VENDOR_ID",vendor_id$)

	params!.put("TOP_PART",top_part$)
    params!.put("MIDDLE_PART",middle_part$)
    params!.put("BOTTOM_PART",bottom_part$)
	
	params!.put("VEND_MASK", vend_mask$)
	params!.put("GL_ACCT_MASK", gl_acct_mask$)
	params!.put("STUB_AMT_MASK", stub_amt_mask$)
	params!.put("EXACTLY_AMT_MASK", exactly_amt_mask$)
	params!.put("CHECK_AMT_MASK", check_amt_mask$)
	
	params!.put("AP_ADDRESS1_NAME",aps01b.name$)
	params!.put("AP_ADDRESS2",ap_address$(1,35))
	params!.put("AP_ADDRESS3",ap_address$(36,35))
	params!.put("AP_ADDRESS4",ap_address$(71))
	params!.put("AP_ADDR3_STUB",stub_address$)
	
	params!.put("LOGO_FILE",logo_filenm$)
	
	params!.put("MAX_STUB_ROWS",str(max_stub_rows))

rem --- Initialize the print work file fields

	rem firm_id$ As was input via params
	rem ap_type$ Starts as was input via params/adjusted above; possibly modified below
	
	check_no_mask$="0000000"
	rem check_no$ Starts as was input via params; incremented below
	
	chk_pagenum_mask$="000"
	chk_pagenum=1; rem Will be one for one-page checks; incremented on overflow
	
	section_type$=top_part$; rem Start with top of check
	
	section_detseq_mask$="00000"
	section_detseq$=str(1:section_detseq_mask$); rem 1-based ID of rows in a section
	
	rem check_date$ As was input via params--constant	
	rem vendor_id$ Starts as was input via params
	
	stub_inv_no$=""; rem Assigned in stub sections
	stub_inv_date$=""; rem Assigned in stub sections
	stub_memo_dist$=""; rem Possible Memo or GL distribution info on accounting stub
	stub_is_total$="N"; rem Y when rec is total line for a stub
	
	chk_is_void$="N"; rem Y means print VOID on the check instead of amount
	chk_exactly$=""; rem Text for amount on check ('Exactly*10*dollars'...)
	chk_amt_str$=""; rem Masked check amount or "*VOID*"

	stub_inv_amt=0
	stub_inv_discamt=0
	stub_inv_amt_pd=0
	chk_amt=0
	
rem --- Start progress meter and position check File (ape-04)

    call pgmdir$+"adc_progress.aon","NC","","","","",0,ape04_dev,1,meter_num,status

rem --- Init Read

    read (ape04_dev,key=firm_id$,dom=*next)
    if restart$="Y" read (ape04_dev,key=firm_id$+ap_type$+vendor_id$,dom=*next)

rem --- Main Read
rem --- First pass gets Accounting stub and actual check data

    while more
        k$=key(ape04_dev,end=*break)
        if pos(firm_id$=k$)<>1 break
        recs=recs+1
        read record (ape04_dev) ape04a$

rem --- Breaks

        if ape04a.ap_type$<>prev_aptype_t0$ gosub ap_type_break
        if ape04a.ap_type$+ape04a.vendor_id$<>prev_aptype_vend_t1$ gosub new_vendor 

        gosub inv_detail

rem --- Accumulate

        t[0]=t[0]+ape04a.invoice_amt; rem +ape04a.retention
        t[1]=t[1]+ape04a.discount_amt
        t[2]=t[2]+ape04a.retention
		t[3]=t[3]+ape04a.payment_amt
        
        rem --- If using Payment Authorization, get signers that approved this invoice
        if payauth.use_pay_auth then
            partialkey$ = ape04a.firm_id$ + ape04a.vendor_id$ + ape04a.ap_inv_no$
            read (apt_invapproval_dev, key=partialkey$, dom=*next)
            while 1
                apt_invapproval_key$=key(apt_invapproval_dev,end=*break)
                if pos(partialkey$ = apt_invapproval_key$) <> 1 then break
                read record(apt_invapproval_dev)apt_invapproval$
                if apt_invapproval.approval_type$="S" then
                    signerSet!.add(apt_invapproval.user_id$)
                endif
            wend
        endif
    wend

rem --- Totals

    t9$="E"; do_vend_header=0
    gosub new_vendor

    rem --- invoke jasper
    report! = BarUtils.getBBJasperReport(filename$)
    report!.putParams(params!)

    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)
    report!.setLocale(locale$)

rem --- Fill Report and Show

    rc=report!.fill(1)
    if rc<>BBJasperReport.getSUCCESS() then goto close_win

    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path
    
    declare BBJasperViewerWindow viewerWindow!
    viewerWindow! = new BBJasperViewerWindow(report!,0,0,screen_width,screen_height,repTitle$,$00080093$)

    viewerControl! = viewerWindow!.getViewerControl()
    viewerControl!.setGoogleDefaultDocument(repTitle$)
    viewerControl!.setDefaultSaveFolder(rd_doc_path$)
    viewerControl!.setDefaultSaveFile(repTitle$)
    viewerControl!.setFitWidth()

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    rem --- setReleaseOnClose(0) not needed, but clarifies that we don't want BBjasper to release when we close the viewer - we'll handle close processing here via close_win
    rem --- show(0) tells BBjasper to be modeless, i.e., show the viewer, then return here for process_events
    saveMenuButton! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    saveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnSaveMenuButton")

    savMenuItem! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_ITEM_NAME())
    savMenuItem!.setCallback(BBjMenuItem.ON_POPUP_ITEM_SELECT,"OnSaveMenuButton")

    emailToolButton! = viewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    emailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnEmailToolButton")

    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)

    declare BBjTopLevelWindow bbjWindow!
    bbjWindow!= viewerWindow!.getViewerWindow()
    cancelled=1
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"close_win",err=*next); cancelled=0
    if cancelled then goto close_win

rem --- Event Control

    process_events,err=*same

    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_tmp_dir$=stbl("+DOC_DIR_PDF",err=*endif)
        rd_temp_wd$=dsk("")+dir("")
        if pos(":"=rd_tmp_dir$) setdrive rd_tmp_dir$(1,pos(":"=rd_tmp_dir$)-1),err=*next
        chdir rd_tmp_dir$,err=*next
        rd_doc_path$=dsk("")+dir("")
        if pos(":"=rd_temp_wd$) setdrive rd_temp_wd$(1,pos(":"=rd_temp_wd$)-1)
        chdir rd_temp_wd$
    endif

    return

OnSaveMenuButton:
rem --- save save and display confirmation dialog

    show_save_dlg$="YES"
 
exportToPDF:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_name$=repTitle$+".pdf"
        rd_doc_ext$="PDF"
        report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif

    if show_save_dlg$="YES"
        msg_id$="DOC_OUTPUT_COMP"
        gosub disp_message
        show_save_dlg$=""
    endif
    return    

OnEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub exportToPDF

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

close_win:rem --- Viewer Window Closed
    viewerWindow!.destroy(err=*next)
    rdForm!.destroy(err=*next)   
    if tcb(13) then exit
	
	rem --- Clear softlock on jasper work file, apw_chkjasperprn	
	remove (adxlocks_dev,key=firm_id$+menu_option_id$,dom=*next)
	goto std_exit_no_report
	
    release

all_done: rem --- Exit

	rem --- Clear softlock on jasper work file, apw_chkjasperprn	
	remove (adxlocks_dev,key=firm_id$+menu_option_id$,dom=*next)
	
    goto std_exit
	

inv_detail: rem --- Invoice Detail

    if acctstub_rowcnt>max_stub_rows gosub overflow
	
	acctstub_row_has_printed=0; rem Will need to print row if doesn't print in Memo or GLDist sections
	vendstub_row_has_printed=0; rem Will need to print row if doesn't print in Memo section
	
	rem --- Conditionally print invoice's memo on stubs
	if aps01a.ap_chk_memo$="Y" and cvs(ape04a.ap_inv_memo$, 2) <> "" then 
		stub_memo_dist$=ape04a.ap_inv_memo$(1,16)
		
		section_type$=  "A"; rem accounting stub
		gosub check_stub_detail
		acctstub_rowcnt=acctstub_rowcnt+1
		acctstub_row_has_printed=1
		
		section_type$=  "V"; rem vendor stub
		gosub check_stub_detail
		vendstub_rowcnt=vendstub_rowcnt+1		
		vendstub_row_has_printed=1
	endif

    rem --- Conditionally print invoice's GL Distribution on Accounting stub
	if aps01a.ap_chk_dist$ <> "N" then 
        total=ape04a.payment_amt + ape04a.discount_amt
        posted=0
        factor=1
        if ape04a.orig_inv_amt<>0 then factor=total/ape04a.orig_inv_amt

        read (apt02_dev,key=firm_id$+ape04a.ap_type$+ape04a.vendor_id$+"I"+ape04a.ap_inv_no$,dom=*next)
        while 1
            k1$=key(apt02_dev,end=*break)
            if k1$(1,21)<>firm_id$+ape04a.ap_type$+ape04a.vendor_id$+"I"+ape04a.ap_inv_no$ then break
            read record (apt02_dev) apt02a$
            gl_account$=fnmask$(apt02a.gl_account$(1,gl_acct_length),gl_acct_mask$)
            gl_post_amt=round(apt02a.gl_post_amt*factor,2)
            posted=posted+gl_post_amt
            
            rem --- Adjust last distribution for possible penney rounding errors
            apt02_key$=""
            apt02_key$=key(apt02_dev,end=*next)
            if pos(firm_id$+ape04a.ap_type$+ape04a.vendor_id$+"I"+ape04a.ap_inv_no$=apt02_key$)<>1 then
                gl_post_amt=gl_post_amt+(total-posted)
            endif

            gl_post_amt$=str(gl_post_amt:stub_amt_mask$)
            gl_post_amt$=gl_post_amt$(pos(" "<>gl_post_amt$))

			rem --- Split GL Account and Amount to two lines if necessary
			dim x$(memodist_width)
			x$(1)=cvs(gl_account$,2)
			x$(memodist_width-len(gl_post_amt$)+1)=gl_post_amt$

            if acctstub_rowcnt>max_stub_rows then gosub overflow

			stub_memo_dist$=x$
            
			section_type$=  "A"; rem accounting stub
			gosub check_stub_detail
            acctstub_rowcnt=acctstub_rowcnt+1

			acctstub_row_has_printed=1
        wend

    endif
	
	rem --- print invoice data if not already printed w/Memo or GLDist
	if acctstub_row_has_printed=0
		stub_memo_dist$=""
		
		section_type$=  "A"; rem accounting stub
		gosub check_stub_detail
		acctstub_rowcnt=acctstub_rowcnt+1
	endif
	
	if vendstub_row_has_printed=0
		stub_memo_dist$=""
			
		section_type$=  "V"; rem vendor stub
		gosub check_stub_detail
		vendstub_rowcnt=vendstub_rowcnt+1
	endif
    return

check_stub_detail:

	rem --- Write STUB detail row record to jasper print file
	
    dim apw_chkprn$:fattr(apw_chkprn$)
	
    apw_chkprn.firm_id$=       firm_id$
    apw_chkprn.ap_type$=       ape04a.ap_type$
    apw_chkprn.check_no$=      check_no$
    apw_chkprn.chk_pagenum$=   str(chk_pagenum:chk_pagenum_mask$)
    apw_chkprn.section_type$=  section_type$

	if section_type$="A" 
		apw_chkprn.section_detseq$=str(acctstub_rowcnt:section_detseq_mask$)
	else
		apw_chkprn.section_detseq$=str(vendstub_rowcnt:section_detseq_mask$)
	endif
	
	apw_chkprn.check_date$=    check_date$
	apw_chkprn.vendor_id$=     ape04a.vendor_id$
	
	apw_chkprn.stub_inv_no$=    ape04a.ap_inv_no$
	apw_chkprn.stub_inv_date$=  ape04a.invoice_date$
	apw_chkprn.stub_memo_dist$= stub_memo_dist$
	apw_chkprn.stub_is_total$=  "N"	
	
    apw_chkprn.chk_is_void$=   chk_is_void$
	apw_chkprn.chk_exactly$=   ""
	apw_chkprn.chk_amt_str$=   ""

    apw_chkprn.signature_1$=   ""
    apw_chkprn.signature_2$=   ""
	
	apw_chkprn.stub_inv_amt=    ape04a.invoice_amt
	apw_chkprn.stub_inv_discamt=ape04a.discount_amt
	apw_chkprn.stub_inv_amt_pd= ape04a.payment_amt
	
	apw_chkprn.chk_amt=0
	
    write record (apw_chkprn_dev) apw_chkprn$
	
    return

stub_total: rem --- Stub Total

	rem --- Write STUB TOTAL record to jasper print file
	
    dim apw_chkprn$:fattr(apw_chkprn$)
	
    apw_chkprn.firm_id$=       firm_id$
    apw_chkprn.ap_type$=       prev_aptype_vend_t1$
    apw_chkprn.check_no$=      check_no$
    apw_chkprn.chk_pagenum$=   str(chk_pagenum:chk_pagenum_mask$)
    apw_chkprn.section_type$=  section_type$
	
	if section_type$="A" 
		apw_chkprn.section_detseq$=str(acctstub_rowcnt:section_detseq_mask$)
	else
		apw_chkprn.section_detseq$=str(vendstub_rowcnt:section_detseq_mask$)
	endif
	
	apw_chkprn.check_date$=    check_date$
	apw_chkprn.vendor_id$=     prev_aptype_vend_t1$(3,6)
	
	apw_chkprn.stub_inv_no$=    ""
	apw_chkprn.stub_inv_date$=  ""
	apw_chkprn.stub_memo_dist$= stub_memo_dist$; rem passed in since variable: overflow vs actual total
	apw_chkprn.stub_is_total$=  "Y"	
	
    apw_chkprn.chk_is_void$=   "N"
	apw_chkprn.chk_exactly$=   ""
	apw_chkprn.chk_amt_str$=   ""

    apw_chkprn.signature_1$=   ""
    apw_chkprn.signature_2$=   ""
	
	apw_chkprn.stub_inv_amt=    stub_inv_amt; rem passed in since variable: overflow vs actual total
	apw_chkprn.stub_inv_discamt=stub_inv_discamt; rem passed in since variable: overflow vs actual total
	apw_chkprn.stub_inv_amt_pd= stub_inv_amt_pd; rem passed in since variable: overflow vs actual total
	
	apw_chkprn.chk_amt=0
	
    write record (apw_chkprn_dev) apw_chkprn$
	
	stub_inv_amt=     0
	stub_inv_discamt= 0
	stub_inv_amt_pd=  0
	stub_memo_dist$= ""
	
    return

check_face: rem --- Print Check

	chk_amt=t[3]
    check_tot_cents$=str(fpt(chk_amt)*100:"00")
    if check_tot_cents$="00" then check_tot_cents$="NO"
	
    chk_exactly$=Translate!.getTranslation("AON_EXACTLY*")+str(int(chk_amt):exactly_amt_mask$)+Translate!.getTranslation("AON_*DOLLARS*AND*")+check_tot_cents$+Translate!.getTranslation("AON_*CENTS")
    
    chk_amt_str$=str(chk_amt:check_amt_mask$)

    dim apw01a$:fattr(apw01a$)
    apw01a.firm_id$=firm_id$
    apw01a.ap_type$=prev_aptype_vend_t1$(1,2)
    apw01a.check_no$=check_no$
    apw01a.comp_or_void$="C"
    apw01a.check_date$=check_date$
    apw01a.vendor_id$=prev_aptype_vend_t1$(3,6)
    apw01a.ap_inv_no$=t2.ap_inv_no$
    if aps01a.multi_types$="Y" remove (apw01_dev,key=firm_id$+"  "+apw01a.check_no$,dom=*next)
    write record (apw01_dev) apw01a$

    rem --- If using Payment Authorization, put signature(s) on the check.
    signature1$=""
    signature2$=""
    if payauth.use_pay_auth then
        rem --- Remove approvers from signerSet! TreeSet that have exceeded ther authorization limit
        iter!=signerSet!.iterator()
        while iter!.hasNext()
            signer$=iter!.next()
                if signerAuthLimitMap!.containsKey(signer$)
:               and cast(BBjNumber, signerAuthLimitMap!.get(signer$))>chk_amt then
                    signerSet!.remove(signer$)
                endif
        wend

        rem --- It is possible to have more than two signers approve invoices being paid by this check.
        rem --- For now, just use the first two signers in the signerSet! TreeSet.
        signature1$=cast(BBjString, signerSignatureMap!.get(signerSet!.first()))
        if signerSet!.size()>1 then
            rem --- Two signatures needed. Remove first signer, so can get second signer.
            signer$=signerSet!.first()
            signerSet!.remove(signer$)
            signature2$=cast(BBjString, signerSignatureMap!.get(signerSet!.first()))
        endif
    endif

	rem --- Write CHECK record to jasper print file
	
    dim apw_chkprn$:fattr(apw_chkprn$)
	
    apw_chkprn.firm_id$=       firm_id$
    apw_chkprn.ap_type$=       prev_aptype_vend_t1$(1,2)
    apw_chkprn.check_no$=      check_no$
    apw_chkprn.chk_pagenum$=   str(chk_pagenum:chk_pagenum_mask$)
    apw_chkprn.section_type$=  "C"
	apw_chkprn.section_detseq$=str(1:section_detseq_mask$); rem Check itself has only one rec
	
	apw_chkprn.check_date$=    check_date$
	apw_chkprn.vendor_id$=     prev_aptype_vend_t1$(3,6)
	
	apw_chkprn.stub_inv_no$=    ""
	apw_chkprn.stub_inv_date$=  ""
	apw_chkprn.stub_memo_dist$= ""	
	apw_chkprn.stub_is_total$=  ""	
	
    apw_chkprn.chk_is_void$=   "N"
	apw_chkprn.chk_exactly$=   chk_exactly$
	apw_chkprn.chk_amt_str$=   chk_amt_str$

	apw_chkprn.signature_1$=   signature1$
    apw_chkprn.signature_2$=   signature2$

	apw_chkprn.stub_inv_amt=0
	apw_chkprn.stub_inv_discamt=0
	apw_chkprn.stub_inv_amt_pd=0
	
	apw_chkprn.chk_amt=chk_amt
	
    write record (apw_chkprn_dev) apw_chkprn$
	
    return

overflow: rem --- Overflow

	chk_is_void$="Y"

    rem --- Write stubs' Total rec w/"*Continued*" so stub prints right
	stub_inv_amt=     0
	stub_inv_discamt= 0
	stub_inv_amt_pd=  0
	stub_memo_dist$= "** Continued **"
	
	section_type$=  "A"; rem accounting stub
	gosub stub_total; rem accounting stub
	acctstub_rowcnt=1
		
	stub_inv_amt=     0
	stub_inv_discamt= 0
	stub_inv_amt_pd=  0
	stub_memo_dist$= "** Continued **"
	section_type$=  "V"; rem vendor stub
	gosub stub_total; rem vendor stub
	vendstub_rowcnt=1
	
	rem --- Write void for check itself
	gosub void_check

	rem --- Increment counter of number of checks for this vend/aptype
	chk_pagenum=chk_pagenum+1
	
	acctstub_rowcnt=1
	vendstub_rowcnt=1
	chk_is_void$="N"	
    		
	return

void_check: rem --- Void check

    chk_exactly$=Translate!.getTranslation("AON_***VOID***VOID***VOID***VOID***")
    chk_amt_str$=Translate!.getTranslation("AON_***VOID***")

rem --- Write Void

    apw01a.firm_id$=     firm_id$
    apw01a.ap_type$=     ape04a.ap_type$
    apw01a.check_no$=    check_no$
    apw01a.comp_or_void$="V"
    apw01a.vendor_id$=   ape04a.vendor_id$
    apw01a.check_date$=  check_date$
    apw01a.ap_inv_no$=   ape04a.ap_inv_no$
    if aps01a.multi_types$<>"Y" apw01a.ap_type$=""
    write record (apw01_dev) apw01a$

	rem --- Write VOID record to jasper print file
	
    dim apw_chkprn$:fattr(apw_chkprn$)
	
    apw_chkprn.firm_id$=       firm_id$
    apw_chkprn.ap_type$=       ape04a.ap_type$
    apw_chkprn.check_no$=      check_no$
    apw_chkprn.chk_pagenum$=   str(chk_pagenum:chk_pagenum_mask$)
    apw_chkprn.section_type$=  "C"
	apw_chkprn.section_detseq$=str(1:section_detseq_mask$); rem Check itself has only one rec
	
	apw_chkprn.check_date$=    check_date$
	apw_chkprn.vendor_id$=     ape04a.vendor_id$
	
	apw_chkprn.stub_inv_no$=    ""
	apw_chkprn.stub_inv_date$=  ""
	apw_chkprn.stub_memo_dist$= ""
	apw_chkprn.stub_is_total$=  ""	
	
    apw_chkprn.chk_is_void$=   chk_is_void$
	apw_chkprn.chk_exactly$=   chk_exactly$
	apw_chkprn.chk_amt_str$=   chk_amt_str$

    apw_chkprn.signature_1$=   ""
    apw_chkprn.signature_2$=   ""
	
	apw_chkprn.stub_inv_amt=0
	apw_chkprn.stub_inv_discamt=0
	apw_chkprn.stub_inv_amt_pd=0
	
	apw_chkprn.chk_amt=chk_amt
	
    write record (apw_chkprn_dev) apw_chkprn$
	
	gosub increment_check
	
    return

new_vendor: rem --- New Vendor

    if prev_aptype_vend_t1$ <> "" then 
		stub_inv_amt=     t[0]
		stub_inv_discamt= t[1]
		stub_inv_amt_pd=  t[3]
		stub_memo_dist$=  ""
			
		section_type$=  "A"; rem accounting stub
		gosub stub_total; rem accounting stub
		acctstub_rowcnt=1
			
		stub_inv_amt=     t[0]
		stub_inv_discamt= t[1]
		stub_inv_amt_pd=  t[3]
		stub_memo_dist$=  ""
		section_type$=  "V"; rem vendor stub
		gosub stub_total; rem vendor stub
		vendstub_rowcnt=1

        if t[3] <= 0 then 
            gosub void_check 
        else 
            gosub check_face
        endif

rem --- Now go back and re-write ape-04 using ape04_dev2 and ape04b$
rem --- using the current check number and firm_id$ + prev_aptype_vend_t1$ (ap type and vendor number)

        dim ape04b$:fattr(ape04b$)

        read(ape04_dev2,key=firm_id$+prev_aptype_vend_t1$,dom=*next)

        while more
            extract record (ape04_dev2,end=*break) ape04b$;rem Advisory Locking
            if pos(firm_id$+prev_aptype_vend_t1$=ape04b$)<>1 then read (ape04_dev2); break
            ape04b.check_no$ = check_no$
            ape04b$ = field(ape04b$)
            write record (ape04_dev2) ape04b$
        wend

        gosub increment_check
    endif

vendor_header:

    if do_vend_header then
        dim t[3]
		chk_pagenum=1
		
        dim address$(81)
        dim apm01a$:fattr(apm01a$)
        dim t2$:fattr(ape04a$)
        t2$=ape04a$
        
        find record (apm01_dev,key=firm_id$+ape04a.vendor_id$,dom=*next) apm01a$
        address$(1)=apm01a.addr_line_1$+apm01a.addr_line_2$+apm01a.city$+apm01a.state_code$+apm01a.zip_code$
		vend_name$=apm01a.vendor_name$

        rem --- If using Payment Authorization, clear TreeSet for signers of current check
        if payauth.use_pay_auth then
            signerSet!.clear()
        endif
        
		prev_aptype_vend_t1$=ape04a.ap_type$+ape04a.vendor_id$
        
        start_block = 1

        if start_block
            find record (apm08_dev,key=firm_id$+ape04a.vendor_id$,dom=*endif) apm08a$
            address$(1) = apm08a.addr_line_1$+apm08a.addr_line2$+apm08a.city$+apm08a.state_code$+apm08a.zip_code$
            vend_name$  = apm08a.vendor_name$
        endif
    endif
    
    return

increment_check: rem --- Increment Check #

    p8=num(check_no$)+1
    if p8>9999999 p8=1
    check_no$=str(p8:check_no_mask$)
    if show_progress call pgmdir$+"adc_progress.aon","S","","","",check_no$,0,0,1,0,ignore_status

    return


ap_type_break: rem --- AP Type Break

    while more
        t9$="A"; do_vend_header=0
        gosub new_vendor
        prev_aptype_t0$=ape04a.ap_type$
        prev_aptype_vend_t1$=""
        t9$=""; do_vend_header=1
        ap_type$=""
        if aps01a.ap_check_seq$="N" and q6 then break
        q6=1
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status

rem --- New Checks

        if aps01a.ap_check_seq$ = "Y" then
            dim msg_tokens$[1]
            find record (apm10_dev,key=firm_id$+"A"+prev_aptype_t0$,dom=*next) apm10a$
            msg_id$="AP_CHECKS"
            msg_tokens$[1]=cvs(apm10a.code_desc$,3)
            gosub disp_message
        endif
    break
    wend

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$


rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
    q1$=""
    q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
    if q1$="" q1$=q$
    return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    return str(-num(q1$,err=*next):q2$,err=*next)
    q=1
    q0=0
    while len(q2$(q))
        if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
        q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
    q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
    if q then q$=q$(q+1)
    if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$
	fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
    q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
    return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
    q1$=stbl(q$,err=*next)
    return q1$
    fnend

rem #endinclude std_functions.src   
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    release
rem #endinclude std_end.src

    end