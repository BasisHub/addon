rem --- Check Printing (Print Overlay)
rem --- Program apr_apchecks v8.0.0 19Oct2007 (apr_eb)
rem --- Created by adx_codeport.bbx v1.1.5 (10/19/2007 05:37:14)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="ape-04",ids$[2]="APE_CHECKS"
    files$[3]="apm-01",ids$[3]="APM_VENDMAST"
    files$[4]="ape-04",ids$[4]="APE_CHECKS"
    files$[5]="apm_payaddr",ids$[5]="APM_PAYADDR"
    files$[6]="apc_typecode",ids$[6]="APC_TYPECODE"
    files$[7]="apt-02",ids$[7]="APT_INVOICEDIST"
    files$[8]="apw-01",ids$[8]="APW_CHECKINVOICE"
    files$[9]="aps_report",ids$[9]="APS_REPORT"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    aps01_dev=channels[1]
    ape04_dev=channels[2]
    apm01_dev=channels[3]
    ape04_dev2=channels[4]
    apm08_dev=channels[5]
    apm10_dev=channels[6]
    apt02_dev=channels[7]
    apw01_dev=channels[8]
    aps01b_dev=channels[9]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ape04a$:templates$[2],apm01a$:templates$[3]
    dim ape04b$:templates$[4],apm08a$:templates$[5],apm10a$:templates$[6]
    dim apt02a$:templates$[7],apw01a$:templates$[8],aps01b$:templates$[9]

rem --- Assign form input values to local variables

    check_date$=option!.getOptionData("CHECK_DATE")
    check_no$=option!.getOptionData("CHECK_NO")
    restart$=option!.getOptionData("PICK_CHECK")
    ap_type$=option!.getOptionData("AP_TYPE")
    vendor_id$=option!.getOptionData("VENDOR_ID")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_length
    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,acct_length
    
rem --- Set A/P Type if multiple types not installed

    if aps01a.multi_types$<>"Y"
        aptype$=fattr(ape04a$,"AP_TYPE")
        aptype_len=dec(aptype$(10,2))
        dim ap_type$(aptype_len)
    endif

initializations: rem --- Initializations

    q6=0
    show_progress=1
    t0$=""
    t1$=""
    dim t[2]
    m1$="########.00CR"
    m8$="*#######"
    m9$="*"+m1$(2,10)
    l9=12
    l=0
    rem h0=0
    more=1
    stub_offset=266
    recs=0

rem --- Check From Address

    aps01b_key$=firm_id$+"AP02"
    find record (aps01b_dev,key=aps01b_key$,err=std_missing_params) aps01b$
    ap_address$=aps01b.addr_line_1$+aps01b.addr_line_2$+aps01b.city$+aps01b.state_code$+aps01b.zip_code$
    call pgmdir$+"adc_address.aon",ap_address$,24,3,9,35

    if cvs(ap_address$(71),2)<>"" then
        stub_address$=ap_address$(71)
    else
        stub_address$=ap_address$(36,35)
    endif


rem --- Open the printer

    textfont!   = new java.awt.Font("Times New Roman",java.awt.Font.PLAIN,10)
    italicfont! = new java.awt.Font("Times New Roman",java.awt.Font.ITALIC,10)
    boldfont!   = new java.awt.Font("Times New Roman",java.awt.Font.BOLD,10)
    largefont!  = new java.awt.Font("Arial",java.awt.Font.BOLD,26)

    left_justify=0
    right_justify=1
    center_justify=2

rem create file
    myAPI!=BBjAPI()
    myBBjPrinter!=myAPI!.getBBjPrinter(1,err=*next)
    if myBBjPrinter!=null()
        msg_id$="AD_NOPRINTER"
        gosub disp_message
        goto std_exit
    endif

rem Create a set of request attributes
    requestAttributes!=new javax.print.attribute.HashPrintRequestAttributeSet()
    requestAttributes!.add(javax.print.attribute.standard.MediaSizeName.NA_LETTER)
    requestAttributes!.add(javax.print.attribute.standard.OrientationRequested.PORTRAIT)

    x!=new java.lang.Float(0.25).floatValue()
    y!=new java.lang.Float(0.25).floatValue()
    w!=new java.lang.Float(8.0).floatValue()
    h!=new java.lang.Float(10.5).floatValue()
    units=javax.print.attribute.standard.MediaPrintableArea.INCH
    a!=new javax.print.attribute.standard.MediaPrintableArea(x!,y!,w!,h!,units)

    requestAttributes!.add(a!)
    myBBjPrinter!.setAttributes(requestAttributes!)

    doc!=myBBjPrinter!.getForm(0)

rem --- Start progress meter and position check File (ape-04)

    call pgmdir$+"adc_progress.aon","NC","","","","",0,ape04_dev,1,meter_num,status

rem --- Init Read

    read (ape04_dev,key=firm_id$,dom=*next)
    if restart$="Y" read (ape04_dev,key=firm_id$+ap_type$+vendor_id$,dom=*next)

rem --- Main Read

    while more
        k$=key(ape04_dev,end=*break)
        if k$(1,2)<>firm_id$ break
        recs=recs+1
        read record (ape04_dev) ape04a$

rem --- Breaks

        if k$(3,2)<>t0$ gosub ap_type_break
        if k$(3,8)<>t1$ gosub new_vendor 

        gosub inv_detail

rem --- Accumulate

        t[0]=t[0]+ape04a.invoice_amt+ape04a.discount_amt+ape04a.retention
        t[1]=t[1]+ape04a.discount_amt
        t[2]=t[2]+ape04a.retention
    wend

rem --- Totals

    t9$="E"
    gosub new_vendor

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    doc!.preview()
    rem doc!.print()

    goto std_exit

check_header: rem --- Check Stub Header

    l=0
    right_margin=568
    dim col[6]
    col[1]=67
    col[2]=162
    col[3]=261
    col[4]=343
    col[5]=446
    col[6]=500

    page!=doc!.createPage(err=std_error)
    page!.setRightMargin(18)
    page!.setLeftMargin(18)
    page!.setTopMargin(18)
    page!.setBottomMargin(18)

    return

check_stub:

    tmp=fntext(6,1+stub,aps01b.name$,boldfont!)
    tmp=fntext(6,12+stub,ap_address$(1,35),textfont!)
    tmp=fntext(6,24+stub,stub_address$,textfont!)   

    tmp=fntext(175,1+stub,x1$,boldfont!)
    tmp=fntext2(350,1+stub,50,0+stub,Translate!.getTranslation("AON_CHECK_NO:"),italicfont!,right_justify)
    tmp=fntext(400,1+stub,check_no$,boldfont!)
    tmp=fntext(175,12+stub,vend_name$,boldfont!)
    tmp=fntext(175,24+stub,Translate!.getTranslation("AON_CHECK_DATE:"),italicfont!)
    tmp=fntext(228,24+stub,fndate$(check_date$),boldfont!)

    tmp=fntext2(0,36+stub,col[1],36+stub,Translate!.getTranslation("AON_INV_DATE"),italicfont!,center_justify)
    tmp=fntext(col[1]+6,36+stub,Translate!.getTranslation("AON_INV_NUMBER"),italicfont!)
    tmp=fntext2(col[2],36+stub,col[3]-col[2]-6,36+stub,Translate!.getTranslation("AON_INV_AMOUNT"),italicfont!,right_justify)
    tmp=fntext2(col[3],36+stub,col[4]-col[3]-6,36+stub,Translate!.getTranslation("AON_DISCOUNT"),italicfont!,right_justify)
    tmp=fntext2(col[4],36+stub,col[5]-col[4]-6,36+stub,Translate!.getTranslation("AON_AMT_PAID"),italicfont!,right_justify)

    memo_dist$=""
    if aps01a.ap_chk_memo$="Y" then memo_dist$=memo_dist$+Translate!.getTranslation("AON_MEMO")
    if aps01a.ap_chk_memo$="Y" and aps01a.ap_chk_dist$="Y" then memo_dist$=memo_dist$+"/"
    if aps01a.ap_chk_dist$="Y" memo_dist$=memo_dist$+Translate!.getTranslation("AON_DISTRIBUTION")
    tmp=fntext(col[5]+6,36+stub,memo_dist$,italicfont!)

    tmp=fnbox(0,0+stub,right_margin,228)
    tmp=fnline(0,36+stub,right_margin,36+stub)
    tmp=fnline(0,48+stub,right_margin,48+stub)

    tmp=fnline(166,0+stub,166,36+stub)
    tmp=fnline(col[1],36+stub,col[1],216+stub)
    tmp=fnline(col[2],36+stub,col[2],216+stub)
    tmp=fnline(col[3],36+stub,col[3],216+stub)
    tmp=fnline(col[4],36+stub,col[4],216+stub)
    tmp=fnline(col[5],36+stub,col[5],216+stub)  

    return

inv_detail: rem --- Invoice Detail

    if l>l9 gosub overflow

    row=49+l*12

    stub=0
    gosub check_stub_detail
    stub=stub_offset
    gosub check_stub_detail

    l1=0

    if cvs(ape04a.ap_inv_memo$, 2) <> "" then 
        if aps01a.ap_chk_memo$="Y" then 
            tmp=fntext(col[5]+6,row,ape04a.ap_inv_memo$(1,16),boldfont!)
            tmp=fntext(col[5]+6,row+stub_offset,ape04a.ap_inv_memo$(1,16),boldfont!)
        endif

        if aps01a.ap_chk_dist$ <> "N" then 
            if aps01a.ap_chk_memo$="Y" then l=l+1,l1=l1+1
            row=49+l*12 
        endif
    endif

    if aps01a.ap_chk_dist$ <> "N" then 
        read (apt02_dev,key=firm_id$+ape04a.ap_type$+ape04a.vendor_id$+"I"+ape04a.ap_inv_no$,dom=*next)

        while 1
            k1$=key(apt02_dev,end=*break)
            if k1$(1,21)<>firm_id$+ape04a.ap_type$+ape04a.vendor_id$+"I"+ape04a.ap_inv_no$ then break
            read record (apt02_dev) apt02a$
            if l>l9 then gosub overflow
            row=49+l*12

            if ape04a.orig_inv_amt then 
                x0=apt02a.gl_post_amt*(ape04a.invoice_amt+ape04a.discount_amt)/ape04a.orig_inv_amt 
            else 
                x0=0
            endif

            x$=fnmask$(apt02a.gl_account$(1,acct_length),g0$)
            y$=str(x0:m1$)
            y$=y$(pos(" "<>y$))
            if l+1>l9 then gosub overflow
            row=49+l*12
            tmp=fntext(col[5]+6,row,x$,boldfont!)
            tmp=fntext(col[5]+6,row+stub_offset,x$,boldfont!)
            x$=y$
            tmp=fntext2(col[6], row, right_margin-col[6]-6, row, x$, boldfont!, right_justify)
            tmp=fntext2(col[6], row+stub_offset, right_margin-col[6]-6, row+stub_offset, x$, boldfont!, right_justify)    
            l1=l1+1
            l=l+1
            x$(1)=""
            row=49+l*12
        wend
    endif

    if l1=0 l=l+1
    row=49+l*12

    return

check_stub_detail:

    tmp = fntext2(0, row+stub, col[1], row+stub, fndate$(ape04a.invoice_date$), boldfont!, center_justify)
    tmp = fntext(col[1]+6, row+stub, ape04a.ap_inv_no$, boldfont!)
    tmp = fntext2(col[2], row+stub, col[3]-col[2]-6, row+stub, str(ape04a.invoice_amt + ape04a.retention + ape04a.discount_amt:m1$), boldfont!, right_justify)
    tmp = fntext2(col[3], row+stub, col[4]-col[3]-6 ,row+stub, str(ape04a.discount_amt:m1$), boldfont!, right_justify)
    tmp = fntext2(col[4], row+stub, col[5]-col[4]-6, row+stub, str(ape04a.invoice_amt:m1$), boldfont!, right_justify)

    return

stub_total: rem --- Stub Total

    stub=0

    tmp=fntext2(col[2],204,col[3]-col[2]-6,204,str(t[0]:m1$),boldfont!,right_justify)
    tmp=fntext2(col[3],204,col[4]-col[3]-6,204,str(t[1]:m1$),boldfont!,right_justify)
    tmp=fntext2(col[4],204,col[5]-col[4]-6,204,str(t[0]-t[2]-t[1]:m1$),boldfont!,right_justify)
    tmp=fntext2(col[5],216,118,216,Translate!.getTranslation("AON_ACCOUNTING_COPY"),boldfont!,right_justify)
    tmp=fnbox2(col[1],204,col[2]-col[1],12)
    tmp=fntext3(col[1],204,col[2]-col[1]-6,204,Translate!.getTranslation("AON_TOTALS"),boldfont!,right_justify)

    tmp=fnline(0,204,right_margin,204)
    tmp=fnline(0,216,right_margin,216)

    gosub check_stub

    stub=stub_offset

    tmp=fntext2(col[2],204+stub_offset,col[3]-col[2]-6,204+stub,str(t[0]:m1$),boldfont!,right_justify)
    tmp=fntext2(col[3],204+stub_offset,col[4]-col[3]-6,204+stub,str(t[1]:m1$),boldfont!,right_justify)
    tmp=fntext2(col[4],204+stub_offset,col[5]-col[4]-6,204+stub,str(t[0]-t[2]-t[1]:m1$),boldfont!,right_justify)
    tmp=fntext2(col[5],216+stub_offset,118,216+stub,Translate!.getTranslation("AON_VENDOR_COPY"),boldfont!,right_justify)
    tmp=fnbox2(col[1],204+stub,col[2]-col[1],12)
    tmp=fntext3(col[1],204+stub,col[2]-col[1]-6,204+stub_offset,Translate!.getTranslation("AON_TOTALS"),boldfont!,right_justify)

    tmp=fnline(0,204+stub,right_margin,204+stub)
    tmp=fnline(0,216+stub,right_margin,216+stub)

    gosub check_stub

    return

check_face: rem --- Print Check

    call pgmdir$+"adc_address.aon",address$,24,3,9,35

    x$=str(fpt(t[0]-t[2]-t[1])*100:"00")
    if x$="00" then x$="NO"

    gosub common_check_face

    exactly$=Translate!.getTranslation("AON_EXACTLY*")+str(int(t[0]-t[2]-t[1]):m8$)+Translate!.getTranslation("AON_*DOLLARS*AND*")+x$+Translate!.getTranslation("AON_*CENTS")
    tmp=fntext(36,612,exactly$,boldfont!)

    tmp=fntext2(332,582, 58,582,fndate$(check_date$),boldfont!,center_justify)
    tmp=fntext2(390,582, 54,582,check_no$,boldfont!,center_justify)
    tmp=fntext2(444,582,118,582,str(t[0]-t[1]-t[2]:m9$),boldfont!,right_justify)

    tmp=fntext(72,672,vend_name$,boldfont!)
    tmp=fntext(72,684,address$(1,35),boldfont!)
    tmp=fntext(72,696,address$(36,35),boldfont!)
    tmp=fntext(72,708,address$(71,35),boldfont!)

    dim apw01a$:fattr(apw01a$)
    apw01a.firm_id$=firm_id$
    apw01a.ap_type$=t1$(1,2)
    apw01a.check_no$=check_no$
    apw01a.comp_or_void$="C"
    apw01a.check_date$=check_date$
    apw01a.vendor_id$=t1$(3,6)
    apw01a.ap_inv_no$=t2.ap_inv_no$
    if aps01a.multi_types$="Y" remove (apw01_dev,key=firm_id$+"  "+apw01a.check_no$,dom=*next)
    write record (apw01_dev,key=firm_id$+apw01a.ap_type$+apw01a.check_no$) apw01a$

    return

common_check_face:

    tmp=fnbox2(332,564, 58, 12)
    tmp=fnbox2(390,564, 54, 12)
    tmp=fnbox2(444,564,124, 12)
    tmp=fnbox(332,576, 58, 24)
    tmp=fnbox(390,576, 54, 24)
    tmp=fnbox(444,576,124, 24)

    tmp=fntext3(332,564,58,12,Translate!.getTranslation("AON_DATE"),textfont!,center_justify)
    tmp=fntext3(390,564,54,12,Translate!.getTranslation("AON_CHECK_#"),textfont!,center_justify)
    tmp=fntext3(444,564,118,12,Translate!.getTranslation("AON_AMOUNT"),textfont!,right_justify)

    tmp=fntext(36,552,aps01b.name$,boldfont!)
    tmp=fntext(36,564,ap_address$(1,35),textfont!)
    tmp=fntext(36,576,ap_address$(36,35),textfont!)
    tmp=fntext(36,588,ap_address$(71),textfont!)

    tmp=fntext(6,672,Translate!.getTranslation("AON_PAY"),italicfont!)
    tmp=fntext(6,684,Translate!.getTranslation("AON_TO_THE"),italicfont!)
    tmp=fntext(6,696,Translate!.getTranslation("AON_ORDER"),italicfont!)
    tmp=fntext(6,708,Translate!.getTranslation("AON_OF"),italicfont!)

    tmp=fnbox(342,720,216,1)
    tmp=fntext2(342,722,216,722,Translate!.getTranslation("AON_AUTHORIZED_SIGNATURE"),italicfont!,center_justify)

    return

overflow: rem --- Overflow

    gosub cont_and_void
    gosub check_header
    return

void_check: rem --- Void check

    gosub common_check_face

    tmp=fntext(36,612,Translate!.getTranslation("AON_***VOID***VOID***VOID***VOID***"),boldfont!)
    tmp=fntext2(332,582, 58,582,fndate$(check_date$),boldfont!,center_justify)
    tmp=fntext2(390,582, 54,582,check_no$,boldfont!,center_justify)
    tmp=fntext2(444,582,118,582,Translate!.getTranslation("AON_***VOID***"),boldfont!,right_justify)

    tmp=fntext2(342,690,216,690,"**VOID**VOID**",largefont!,center_justify)

rem --- Write Void

    apw01a.firm_id$=firm_id$
    apw01a.ap_type$=ape04a.ap_type$
    apw01a.check_no$=check_no$
    apw01a.comp_or_void$="V"
    apw01a.vendor_id$=ape04a.vendor_id$
    apw01a.check_date$=check_date$
    apw01a.ap_inv_no$=ape04a.ap_inv_no$
    if aps01a.multi_types$<>"Y" apw01a.ap_type$=""
    write record (apw01_dev,key=firm_id$+apw01a.ap_type$+apw01a.check_no$) apw01a$
    gosub increment_check

    return

new_vendor: rem --- New Vendor

    if t1$ <> "" then 
        gosub stub_total

        if t[0]-t[2]-t[1] <= 0 then 
            gosub void_check 
        else 
            gosub check_face
        endif

rem --- Now go back and re-write ape-04 using ape04_dev2 and ape04b$
rem --- using the current check number and firm_id$ + t1$ (ap type and vendor number)

        dim ape04b$:fattr(ape04b$)

        read(ape04_dev2,key=firm_id$+t1$,dom=*next)

        while more
            read record (ape04_dev2,end=*break) ape04b$
            if pos(firm_id$+t1$=ape04b$)<>1 then break
            ape04b.check_no$ = check_no$
            ape04b$ = field(ape04b$)
            write record (ape04_dev2) ape04b$
        wend

        gosub increment_check
    endif

vendor_header:

    if t9$ = "" then
        dim x1$(vendor_length)
        dim t[2]
        dim address$(81)
        dim apm01a$:fattr(apm01a$)
        dim t2$:fattr(ape04a$)
        t2$=ape04a$
        accntid$=""
        find record (apm01_dev,key=firm_id$+ape04a.vendor_id$,dom=*next) apm01a$
        address$(1)=apm01a.addr_line_1$+apm01a.addr_line_2$+apm01a.city$+apm01a.state_code$+apm01a.zip_code$,vend_name$=apm01a.vendor_name$
        x1$(1)=fnmask$(ape04a.vendor_id$(1,vendor_length),m0$)

        t1$=k$(3,8)
        accntid$=apm01a.vendor_acct$
        start_block = 1

        if start_block
            find record (apm08_dev,key=firm_id$+ape04a.vendor_id$,dom=*endif) apm08a$
            address$(1) = apm08a.addr_line_1$+apm08a.addr_line2$+apm08a.city$+apm08a.state_code$+apm08a.zip_code$
            vend_name$  = apm08a.vendor_name$
        endif

        gosub check_header
    endif
    
    return

increment_check: rem --- Increment Check #

    p8=num(check_no$)+1
    if p8>9999999 p8=1
    check_no$=str(p8:fill(7,"0"))
    if show_progress call pgmdir$+"adc_progress.aon","S","","","",check_no$,0,0,1,0,ignore_status

    return

cont_and_void: rem --- Continue and Void Check

    rem debug --- the following lines have not been converted
    rem print (printer_dev)h9$(1,l9-l+1)
    rem print (printer_dev)@(h0+22+2*m1),Translate!.getTranslation("AON_*CONTINUED*")
    gosub void_check

    return

ap_type_break: rem --- AP Type Break

    while more
        t9$="A"
        gosub new_vendor
        t0$=ape04a.ap_type$
        t1$=""
        t9$=""
        ap_type$=""
        if aps01a.ap_check_seq$="N" and q6 then break
        q6=1
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status

rem --- New Checks

        if aps01a.ap_check_seq$ = "Y" then
            dim msg_tokens$[1]
            find record (apm10_dev,key=firm_id$+"A"+t0$,dom=*next) apm10a$
            msg_id$="AP_CHECKS"
            msg_tokens$[1]=cvs(apm10a.code_desc$,3)
            gosub disp_message
        endif
    break
    wend

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$


rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
    q1$=""
    q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
    if q1$="" q1$=q$
    return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
    if q2$="" q2$=fill(len(q1$),"0")
    return str(-num(q1$,err=*next):q2$,err=*next)
    q=1
    q0=0
    while len(q2$(q))
        if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
        q=q+1
    wend
    if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
    return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
    q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
    if q then q$=q$(q+1)
    if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$
	fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
    q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
    return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
    q1$=stbl(q$,err=*next)
    return q1$
    fnend

rem #endinclude std_functions.src   
    
rem --- fntext: Form Text command

    def fntext(tmp_x,tmp_y,tmp_text$,tmp_font!)
        tmp_text$=cvs(tmp_text$,3)
        tmp!.destroy(err=*next)
        tmp!=page!.newParagraph()
        tmp!.setHorizontalFill(1)
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setText(tmp_text$)
        tmp!.setFont(tmp_font!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fntext2: Form Text command

    def fntext2(tmp_x,tmp_y,tmp_x2,tmp_y2,tmp_text$,tmp_font!,tmp_just)
        tmp_text$=cvs(tmp_text$,3)
        tmp!.destroy(err=*next)
        tmp!=page!.newParagraph()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        if tmp_just then tmp!.setSize(tmp_x2,tmp_y2)
        if tmp_just=1 then tmp!.setHorizontalAlignment(tmp!.RIGHT_JUSTIFIED)
        if tmp_just=2 then tmp!.setHorizontalAlignment(tmp!.CENTER_JUSTIFIED)
        tmp!.setText(tmp_text$)
        tmp!.setFont(tmp_font!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fntext3: Form Text command

    def fntext3(tmp_x,tmp_y,tmp_x2,tmp_y2,tmp_text$,tmp_font!,tmp_just)
        tmp_text$=cvs(tmp_text$,3)
        tmp!.destroy(err=*next)
        tmp!=page!.newParagraph()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        if tmp_just then tmp!.setSize(tmp_x2,tmp_y2)
        if tmp_just=1 then tmp!.setHorizontalAlignment(tmp!.RIGHT_JUSTIFIED)
        if tmp_just=2 then tmp!.setHorizontalAlignment(tmp!.CENTER_JUSTIFIED)
        tmp!.setBackgroundColor(myAPI!.makeColor("Black"))
        tmp!.setTextColor(myAPI!.makeColor("White"))
        tmp!.setText(tmp_text$)
        tmp!.setFont(tmp_font!)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnbox: Form Box command

    def fnbox(tmp_x,tmp_y,tmp_w,tmp_h)
        tmp!=page!.newFrame()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setWidth(tmp_w)
        tmp!.setHeight(tmp_h)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnbox2: Form Box command

    def fnbox2(tmp_x,tmp_y,tmp_w,tmp_h)
        tmp!=page!.newFrame()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setWidth(tmp_w)
        tmp!.setHeight(tmp_h)
        tmp!.setFillColor(myAPI!.makeColor(Translate!.getTranslation("AON_BLACK")))
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnline: Form Line command

    def fnline(tmp_x,tmp_y,tmp_w,tmp_h)
        tmp!=page!.newLine()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmp!.setWidth(tmp_w)
        tmp!.setHeight(tmp_h)
        page!.add(tmp!)
        return(1)
    fnend

rem --- fnframe: Form Frame command

    def fnframe(tmp_x,tmp_y,tmp_x2,tmp_y2)
        tmp!=page!.newFrame()
        tmp!.setPosition(new java.awt.Point(tmp_x,tmp_y))
        tmpdim!=new java.awt.Dimension(tmp_x2,tmp_y2)
        tmp!.setSize(tmpdim!)
        page!.add(tmp!)
        return(1)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    release
rem #endinclude std_end.src

    end