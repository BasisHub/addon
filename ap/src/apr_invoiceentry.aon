rem --- Invoice Entry Register
rem --- Program apr_invoiceentry v8.0.0 04Feb2007 (apr_aa)
rem --- Created by adx_codeport.bbx v1.1.5 (02/04/2007 11:28:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif

rem --- see if batching

rem ---     call stbl("+DIR_PGM")+"adc_getbatch.aon","",pgm(-2)
rem --- if a batch number is returned, process only the ape-01/11 recs for that batch (use knum)

rem --- Open/Lock files

        files=13,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="aps_params",ids$[1]="APS_PARAMS";rem "aps-01
        files$[2]="ape-01",ids$[2]="APE_INVOICEHDR";rem "ape-01
        files$[3]="ape-11",ids$[3]="APE_INVOICEDET";rem "ape-11
        files$[4]="apm-01",ids$[4]="APM_VENDMAST";rem "apm-01
        files$[5]="apm-02",ids$[5]="APM_VENDHIST";rem "apm-02
        files$[7]="apc_typecode",ids$[7]="APC_TYPECODE";rem "apm-10A
        files$[8]="apt-01",ids$[8]="APT_INVOICEHDR";rem "apt-01
        files$[9]="apt-02",ids$[9]="APT_INVOICEDIST";rem "apt-02
        files$[11]="apt-11",ids$[11]="APT_INVOICEDET";rem "apt-11
        files$[12]="gls_params",ids$[12]="GLS_PARAMS";rem "gls-01
        files$[13]="apc_distribution",ids$[13]="APC_DISTRIBUTION";rem "apm-10B
        options$[2]="L"
        options$[3]="L"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        aps01_dev=channels[1]
        ape01_dev=channels[2]
        ape11_dev=channels[3]
        apm01_dev=channels[4]
        apm02_dev=channels[5]
        apm10_dev=channels[7]
        apt01_dev=channels[8]
        apt02_dev=channels[9]
        apt11_dev=channels[11]
        gls01_dev=channels[12]
        apm10b_dev=channels[13]

rem --- Dimension string templates

        dim ape01a$:templates$[2],ape11a$:templates$[3],apm01a$:templates$[4]
        dim apm02a$:templates$[5],apm10a$:templates$[7],apt01a$:templates$[8]
        dim apt02a$:templates$[9],apt11a$:templates$[11],aps01a$:templates$[1]
        dim gls01a$:templates$[12],apm10b$:templates$[13]

rem --- Retrieve parameter records

        aps01a_key$=firm_id$+"AP00"
        find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        call pgmdir$+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
        call pgmdir$+"adc_getmask.aon","","AP","A","",m1$,0,0
        multitypes=aps01a.multi_types$="Y"
        retention=aps01a.ret_flag$="Y"
        cashbasis=aps01a.cash_basis$="Y"
        prior_yr$=str(num(aps01a.current_year$)-1:"0000")
        call pgmdir$+"adc_sizemask.aon",m1$,m1,9,13
        m0=len(m0$)
        m1=len(m1$)
        call pgmdir$+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,acct_length
        call pgmdir$+"adc_getmask.aon","","GL","A","",g1$,0,0
        max_acct_len=num(gls01a.max_acct_len$)
        g0=len(g0$)
        g1=len(g1$)


rem --- Is General Ledger installed and being used?

        application$="AP"
        gl$="N"
        status=0
        source$=pgm(-2)
        call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,application$,glw11$,gl$,status
 
        if status 
            goto std_exit
        endif


rem --- Initializations

        headings=3
        dim headings$[headings],underline$(m1*2,"-"),o[11],h[11],gd[2],gh[2]
        dim pt[2],rt[2],at[2],vt[2],msg$[1]
	msg$[0]="This Report Is Out Of Balance Or Missing Information"
        units=0
        errors=0
        glstatus=0
        done=0
        page=0
        width=132
        printed=0
        maxlines=59
        lines=maxlines+1
        moreheaders=1
        moredetail=1
        recs=0
        when$=sysinfo.system_date$
        clock$=""
        nf$="(Not on File)"
        ac$="Account"
        ds$="Description"
        amt$="Amount"
        lasttype$=""
        lastacct$=""
        lastvendor$=""
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$
        headings$[2]="[HEADER]" 
        h2$=""
        h3$="Discount"
        if retention 
          h2$=h3$+"/"
          h3$="Retention"
        endif

rem --- Define invoice print and header positions

        o[0]=0
        o[1]=max(7,o[0]+m0+1)
        o[11]=width-m1
        o[10]=o[11]-m1
        o[9]=o[10]-17
        o[8]=o[9]-10
        o[7]=o[8]-10
        o[6]=o[7]-3
        o[5]=o[6]-3
        o[4]=o[5]-3
        o[3]=o[4]-3
        o[2]=o[3]-12
        vw=min(30,o[2]-o[1]-1)
        for x=0 to 9
            h[x]=o[x]
        next x
        h[10]=o[10]+m1-8
        h[11]=o[11]+m1-(max(len(h2$),len(h3$))+1)

rem --- Define GL print and header positions

        gd[0]=o[2]
        gd[1]=gd[0]+g0+1
        gd[2]=o[10]-g1-1
        gh[0]=gd[0]
        gh[1]=gd[1] 
        gh[2]=gd[2]+g1-7
        gw=min(35,gd[2]-gd[1]-1)

rem --- Additional file opens

        files=3,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="glm-01",ids$[1]="GLM_ACCT"
        files$[2]="glt-04",ids$[2]="GLE_DAILYDETAIL"
        files$[3]=glw11$
        options$[3]="CL"
        if gl$="Y" call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                             ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        glm01_dev=channels[1]
        glt04_dev=channels[2]
        glw11_dev=channels[3]

rem --- Dimension string templates

        if gl$="Y" dim glm01a$:templates$[1]

rem --- Get user approval to proceed

        msg_id$="AON_RUN_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message
        if msg_opt$<>"Y" then goto std_exit

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --column heading 
        dim columns$[13,10]
        columns=13

        columns$[0,0]="Vendor",columns$[0,1]="C",columns$[0,2]="10"
        columns$[1,0]="Name",columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]="Invoice",columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]="DC",columns$[3,1]="C",columns$[3,2]="8"
        columns$[4,0]="PG",columns$[4,1]="C",columns$[4,2]="3"
        columns$[5,0]="TC",columns$[5,1]="C",columns$[5,2]="3"
        columns$[6,0]="HD",columns$[6,1]="C",columns$[6,2]="3"
        columns$[7,0]="Invoice Dt",columns$[7,1]="C",columns$[7,2]="10"
        columns$[8,0]="Due Date",columns$[8,1]="C",columns$[8,2]="10"
        columns$[9,0]="Acct Date",columns$[9,1]="C",columns$[9,2]="10"
        columns$[10,0]="Disc Date",columns$[10,1]="C",columns$[10,2]="10"
        columns$[11,0]="Reference/Memo",columns$[11,1]="C",columns$[11,2]="12"
        columns$[12,0]="Invoice Amt",columns$[12,1]="N",columns$[12,2]="10",columns$[12,3]=m1$,columns$[12,10]="T"
        columns$[13,0]="Discount Amt",columns$[13,1]="N",columns$[13,2]="8",columns$[13,3]=m1$,columns$[13,10]="T"

rem --- Start progress meter and position header file

        
        call pgmdir$+"adc_progress.aon","NC","","","","",0,ape01_dev,1,meter_num,status
        read (ape01_dev,key=firm_id$,dom=*next)

rem --- Read next Invoice Header (ape-01) record

    while moreheaders
          read record (ape01_dev,end=*break) ape01a$
          if ape01a.firm_id$<>firm_id$ break
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          recs=recs+1

rem --- Level breaks

          if ape01a.ap_type$<>lasttype$ gosub type_break
          if ape01a.vendor_id$<>lastvendor$ gosub vendor_break

rem --- Retrieve vendor name

          dim vendor$(m0),name$(30),vendorref$(10)
          dim apm01a$:fattr(apm01a$)
          apm01a.firm_id$=ape01a.firm_id$
          apm01a.vendor_id$=ape01a.vendor_id$
          apm01a.vendor_name$=nf$
          k$=apm01a.firm_id$+apm01a.vendor_id$
          find record (apm01_dev,key=k$,dom=*next) apm01a$
          vendor$(1)=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
          name$(1)=apm01a.vendor_name$
          vendorref$(1)=vendor$
          errors=errors+(pos(nf$=name$)=1)
          
        
rem --- Initializations for this invoice

          dim a[2]
          a[0]=ape01a.invoice_amt
          a[1]=ape01a.discount_amt
          a[2]=ape01a.retention
          invoice$=ape01a.firm_id$+ape01a.ap_type$+ape01a.vendor_id$+
:                  ape01a.ap_inv_no$

rem --- Retrieve distribution code and update GL recap

          while gl$="Y"
                while cashbasis=0
                      dim apm10b$:fattr(apm10b$)
                      apm10b.firm_id$=ape01a.firm_id$
                      apm10b.record_id_b$="B"
                      apm10b.ap_dist_code$=ape01a.ap_dist_code$
                      apm10b.code_desc$=nf$
                      k$=apm10b.firm_id$+apm10b.record_id_b$+apm10b.ap_dist_code$
                      find record (apm10b_dev,key=k$,dom=*break) apm10b$
                      account$=apm10b.gl_ap_acct$
                      gldate$=ape01a.accting_date$
                      ref1$=vendorref$
                      ref2$=ape01a.ap_inv_no$
                      ref3$=""
                      memo$=name$
                      if multitypes ref3$="AP Type "+ape01a.ap_type$
                      amount=ape01a.retention-ape01a.invoice_amt
                      units=0
                      gosub glrecap
                      if retention
                         if ape01a.retention
                            account$=apm10b.gl_ret_acct$
                            amount=-ape01a.retention
                            gosub glrecap
                         endif
                      endif
                      break
                wend
                break
          wend    
 
rem --- Print invoice header

          if lines+3>maxlines 
rem gosub report_heading
          invdate$=""
          duedate$=""
          acctdate$=""
          discdate$=""
          retention$=""
          if retention retention$=str(ape01a.retention)
          if cvs(ape01a.invoice_date$,2)<>"" invdate$=fndate$(ape01a.invoice_date$)
          if cvs(ape01a.inv_due_date$,2)<>"" duedate$=fndate$(ape01a.inv_due_date$)
          if cvs(ape01a.accting_date$,2)<>"" acctdate$=fndate$(ape01a.accting_date$)
          if cvs(ape01a.disc_date$,2)<>"" discdate$=fndate$(ape01a.disc_date$)

          xwk=fnblank(14)
          OutVect!.addItem(vendor$)
          OutVect!.addItem(name$)
          OutVect!.addItem(ape01a.ap_inv_no$)
          OutVect!.addItem(ape01a.ap_dist_code$)
          OutVect!.addItem(ape01a.payment_grp$)
          OutVect!.addItem(ape01a.ap_terms_code$)
          OutVect!.addItem(ape01a.hold_flag$)
          OutVect!.addItem(invdate$)
          OutVect!.addItem(duedate$)
          OutVect!.addItem(acctdate$)
          OutVect!.addItem(discdate$)
          OutVect!.addItem(ape01a.reference$+" "+ape01a.ap_inv_memo$)
          OutVect!.addItem(str(ape01a.invoice_amt))
          OutVect!.addItem(str(ape01a.discount_amt+ape01a.retention))
         
         xwk=fnblank(2)
         OutVect!.addItem(ac$)
         OutVect!.addItem(ds$)
         xwk=fnblank(10)

          if gl$="Y" call pgmdir$+"glc_datecheck.aon",ape01a.accting_date$,"N",period$,year$,glstatus
          if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,ape01a.accting_date$,glstatus,lines,errors,status

          if stbl("+DTWARN_MSG",err=*endif)<>""
              OutVect!.addItem("")
              OutVect!.addItem(stbl("+DTWARN_MSG"))
              xwk=fnblank(12)
          endif

          for x=0 to 2
              vt[x]=vt[x]+a[x]
              at[x]=at[x]+a[x]
              rt[x]=rt[x]+a[x]
          next x

rem --- Position the Invoice Detail (ape-11) file

          if gl$<>"Y" continue
          gllines=0
          gltotal=0
          read (ape11_dev,key=invoice$,dom=*next)

rem --- Read the next Invoice Detail (ape-11) record

          while moredetail
                k$=key(ape11_dev,end=*break)
                if pos(invoice$=k$)<>1 break
                read record (ape11_dev) ape11a$

rem --- Retrieve GL account master

                dim glm01a$:fattr(glm01a$),description$(gw)
                glm01a.firm_id$=ape11a.firm_id$
                glm01a.gl_account$=ape11a.gl_account$
                glm01a.gl_acct_desc$=nf$
                k$=glm01a.firm_id$+glm01a.gl_account$
                find record (glm01_dev,key=k$,dom=*next) glm01a$
                description$(1)=glm01a.gl_acct_desc$
                errors=errors+(pos(nf$=description$)=1)
                rem --- Print the detail line

                if gllines=0 gosub account_heading
                if lines+1>maxlines
                rem   gosub report_heading
                   gosub account_heading
                endif

                 xwk=fnblank(2)
                 OutVect!.addItem(fnmask$(ape11a.gl_account$(1,acct_length),g0$))
                 OutVect!.addItem(description$)
                 xwk=fnblank(8)
                 OutVect!.addItem(str(ape11a.gl_post_amt))
                 xwk=fnblank(1)
                
                lines=lines+1
                gllines=gllines+1
                gltotal=gltotal+ape11a.gl_post_amt

                rem --- Update the GL recap

                while cashbasis=0
                      account$=ape11a.gl_account$
                      gldate$=ape01a.accting_date$
                      ref3$="Line "+ape11a.sequence_num$
                      amount=ape11a.gl_post_amt
                      units=ape11a.units
                      gosub glrecap 
                    break
                wend
          wend

          rem --- Check for out of balance condition

          if gllines=0 continue
          if gltotal=ape01a.invoice_amt continue
          difference=ape01a.invoice_amt-gltotal
          if lines+2>maxlines
              gosub account_heading
          endif

          xwk=fnblank(14)
          OutVect!.addItem("")
          OutVect!.addItem("WARNING: This transaction is out of balance by "+str(difference:m1$))
          xwk=fnblank(12)
	  errors=errors+1
          lines=lines+2

          rem --- Loop back for next Invoice Header

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub type_break
    aptype$=""
    total$="Totals For Report"
    for x=0 to 2
        pt[x]=rt[x]
    next x
    gosub print_total

rem --- Any errors encountered?

    while errors
          if lines+2>maxlines
            xwk=fnblank(14)
            OutVect!.addItem("")
            OutVect!.addItem("WARNING: This register is out of balance or missing information")
            xwk=fnblank(12)
            lines=lines+2
          endif
          break
    wend

rem --- Destroy the progress meter and run the next overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

    update$=pgmdir$+"apu_invoiceentry.aon"
    if errors
    	gosub Display_Message
    	if special_flag$<>"Y" then update$=""
    endif

    overlay$=update$
    if gl$="Y" overlay$=pgmdir$+"glr_recap_DO.aon"
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit
  
    if cvs(aptype$,2)<>""
    lines=lines+1
    endif




account_heading: rem --- Account subheading

    if lines+3>maxlines 
    lines=lines+2
    endif
    return

print_total: rem --- Print totals

    if lines+3>maxlines
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk=fnblank(9)
        OutVect!.addItem(total$)
        xwk=fnblank(2)
        OutVect!.addItem(str(pt[0]))
        OutVect!.addItem(str(pt[1]))
        lines=lines+3
    endif    
    return

type_break: rem --- AP Type break

    while lasttype$<>""
          gosub vendor_break
          if multitypes
             total$="Total for "+aptype$
             for x=0 to 2
                 pt[x]=at[x]
             next x
             gosub print_total
          endif
          break
    wend
    if multitypes=0 return
    if done return
    dim apm10a$:fattr(apm10a$),at[2]
    apm10a.firm_id$=ape01a.firm_id$
    apm10a.record_id_a$="A"
    apm10a.ap_type$=ape01a.ap_type$
    apm10a.code_desc$=nf$
    k$=apm10a.firm_id$+apm10a.record_id_a$+apm10a.ap_type$
    find record (apm10_dev,key=k$,dom=*next) apm10a$
    aptype$="AP Type "+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(aptype$)
    lines=maxlines+1
    errors=errors+(pos(nf$=apm10a.code_desc$)=1)
    lasttype$=apm10a.ap_type$
    return

vendor_break: rem --- Vendor break

    while lastvendor$<>""
          if printed=1 break
          x$=lastvendor$(1,4)
          if x$<>"TEMP" x$=fnmask$(lastvendor$(1,vendor_size),m0$)
          total$="Total for Vendor "+x$
          for x=0 to 2
              pt[x]=vt[x]
          next x
          gosub print_total
          break
    wend
    if done return
    dim vt[2]
    printed=0
    lastvendor$=ape01a.vendor_id$
    return

glrecap: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    return

Display_Message: rem --- Display Message Routine

    msg_id$="AON_REG_ERRS"
    gosub disp_message
    if pos("PASSVALID"=msg_opt$)<>0 special_flag$="Y"
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return
	
rem #endinclude disp_message.src


rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    release

rem #endinclude std_end.src

    end
