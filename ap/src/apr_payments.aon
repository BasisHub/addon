rem --- Payment Selection Report
rem --- Program apr_payments v8.0.0 28Jan2007 (apr_da)
rem --- Created by adx_codeport.bbx v1.1.5 (01/28/2007 01:24:45)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- set rd_alias_id$, if needed, for DocOut Settings

    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS";rem "aps-01
    files$[2]="ape-01",ids$[2]="APE_INVOICEHDR";rem ape-01
    files$[3]="ape-04",ids$[3]="APE_CHECKS";rem "ape-04
    files$[4]="ape-11",ids$[4]="APE_INVOICEDET";rem ape-11
    files$[5]="ape-16",ids$[5]="APE_SELECTIONDET";rem "ape-16
    files$[6]="apm-01",ids$[6]="APM_VENDMAST";rem "apm-01
    files$[7]="apc_typecode",ids$[7]="APC_TYPECODE";rem "apm-10A
    
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    
    aps01_dev=channels[1]
    ape01_dev=channels[2]
    ape04_dev=channels[3]
    ape11_dev=channels[4]
    ape16_dev=channels[5]
    apm01_dev=channels[6]
    apm10_dev=channels[7]

rem --- Dimension string templates

    dim aps01a$:templates$[1],ape01a$:templates$[2],ape04a$:templates$[3]
    dim ape11a$:templates$[4],ape16a$:templates$[5],apm01a$:templates$[6]
    dim apm10a$:templates$[7]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","A","",m1$,0,0
    multitypes=aps01a.multi_types$="Y"
    retention=aps01a.ret_flag$="Y"
    m0=len(m0$)
    m1=len(m1$)
    maxheadings=9

rem --- Initializations

    dim headings$[maxheadings],underline$((2)*m1,"-")
    dim h[9],o[9],detail[2],totals[2],at[2],rt[2],vt[2],totals[2]
    vm=max(m0,8)
    done=0
    page=0
    width=132
    maxlines=59
    lines=maxlines+1
    printed=0
    more=1
    headings=1
    negative_checks=0
    when$=sysinfo.system_date$
    clock$=""
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    aptype$=""
    vendor$=""
    name$=""
    thisvendor$=""
    thisname$=""
    if multitypes headings$[2]="[HEADER]"
    recs=0

rem --- Prompt user for permission to continue

    msg_id$="AP_CHECK_SELECT"
    dim msg_tokens$[1]
    gosub disp_message
    if msg_opt$="N" goto std_exit_no_report

rem --- Headings and print positions

    if retention
        dim columns$[9,10]
        columns = 9
    else
        dim columns$[8,10]
        columns = 8
    endif

    columns$[0,0]=Translate!.getTranslation("AON_VENDOR"),           columns$[0,1]="C",columns$[0,2]="6"
    columns$[1,0]=Translate!.getTranslation("AON_NAME"),             columns$[1,1]="C",columns$[1,2]="25"
    columns$[2,0]=Translate!.getTranslation("AON_INVOICE"),          columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_INVOICE_DT"),       columns$[3,1]="C",columns$[3,2]="10"
    columns$[4,0]=Translate!.getTranslation("AON_DUE_DT"),           columns$[4,1]="C",columns$[4,2]="10"
    columns$[5,0]=Translate!.getTranslation("AON_DISCOUNT_DT"),      columns$[5,1]="C",columns$[5,2]="10"
    columns$[6,0]=Translate!.getTranslation("AON_INVOICE_AMT"),      columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_DISCOUNT_AMT"),     columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$,columns$[7,10]="T"
    columns$[8,0]=Translate!.getTranslation("AON_PAYMENT_AMT"),      columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m1$,columns$[8,10]="T"

    if retention
        columns$[9,0]=Translate!.getTranslation("AON_RETENTION_AMT"),   columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"
    endif

rem --- Define print positions

    o[9]=width-1
    retention_hdr1$=""
    retention_hdr2$="",n=3
    
    if retention
        o[9]=width-m1
        retention_hdr1$=Translate!.getTranslation("AON_RETENTION")
        retention_hdr2$=Translate!.getTranslation("AON____AMOUNT")
    endif
    
    o[8]=o[9]-m1
    o[7]=o[8]-m1
    o[6]=o[7]-m1
    o[5]=o[6]-10
    o[4]=o[5]-9
    o[3]=o[4]-9
    o[2]=o[3]-11
    o[0]=0
    o[1]=vm
    w=min(30,o[2]-o[1]-1)
    
    for x=0 to 9
        h[x]=o[x]
    next x
    
    h[6]=h[6]+m1-8
    h[7]=h[7]+m1-9
    h[8]=h[8]+m1-8
    if retention h[9]=h[9]+m1-10

rem --- Open printer, start the progress meter and position payment selections file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,ape04_dev,1,meter_num,status
    read (ape16_dev,key=firm_id$,dom=*next)

rem --- Position the check detail file

    read (ape04_dev,key=firm_id$,dom=*next)

rem --- Read next Check Detail (ape-04) record

    while more

        k$=key(ape04_dev,end=*break)
        if pos(firm_id$=k$)<>1 break
        recs=recs+1
        read record (ape04_dev) ape04a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

    rem --- Level breaks

        if ape04a.ap_type$<>lasttype$ gosub type_break
        if ape04a.vendor_id$<>lastvendor$ gosub vendor_break

    rem --- Format detail line fields

        retention$=""
        if retention retention$=str(ape04a.retention)

        OutVect!.addItem(vendor$)
        OutVect!.addItem(name$)
        OutVect!.addItem(ape04a.ap_inv_no$)
        OutVect!.addItem(fndate$(ape04a.invoice_date$))
        OutVect!.addItem(fndate$(ape04a.inv_due_date$))
        OutVect!.addItem(fndate$(ape04a.disc_date$))
        OutVect!.addItem(str(ape04a.invoice_amt))
        OutVect!.addItem(str(ape04a.discount_amt))
        OutVect!.addItem(str(ape04a.invoice_amt-ape04a.discount_amt-ape04a.retention)); rem payment

        if retention
            OutVect!.addItem(retention$)
        endif

        lines=lines+1
        printed=printed+1
        vendor$=""
        name$=""

    rem --- Accumulate totals

        detail[0]=ape04a.invoice_amt
        detail[1]=ape04a.discount_amt
        detail[2]=ape04a.retention
        
        for x=0 to 2
            vt[x]=vt[x]+detail[x]
            at[x]=at[x]+detail[x]
            rt[x]=rt[x]+detail[x]
        next x

    rem --- Loop back for next check detail record

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub type_break

    total$=Translate!.getTranslation("AON_TOTALS_FOR_REPORT")
    for x=0 to 2
        totals[x]=rt[x]
    next x
    gosub print_total

    while negative_checks
        warning$=Translate!.getTranslation("AON_WARNING:_THIS_PAYMENT_SELECTION_REPORT_CONTAINS_NEGATIVE_CHECKS!")

        xwk = fnblank(1)

        OutVect!.addItem(warning$)

        msg_id$="NEG_CHECKS_ON_RPT"
        gosub disp_message
        break
    wend

    goto std_exit

print_total: rem --- Print totals

    retention$=""
    if retention retention$=str(totals[2])
    payment=totals[0]-totals[1]-totals[2]

    if warning$<>""
        xwk = fnblank(1)
        OutVect!.addItem(warning$)
        if retention wblanks=8 else wblanks=7
        xwk=fnblank(wblanks)
    endif

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))

    xwk = fnblank(1) 
    OutVect!.addItem(total$)
    xwk=fnblank(4)
    OutVect!.addItem(str(totals[0]))
    OutVect!.addItem(str(totals[1]))
    OutVect!.addItem(str(payment))

    if retention
        OutVect!.addItem(retention$)
    endif

    lines=lines+2
    return

type_break: rem --- AP type break

    gosub vendor_break
    if multitypes=0 return
    
    while lasttype$<>""
        total$=Translate!.getTranslation("AON_TOTALS_FOR_")+aptype$
        
        for x=0 to 2
            totals[x]=at[x]
        next x
        
        gosub print_total
        xwk=fnblank(9)
        if retention OutVect!.addItem("")
        break
    wend

    if done return
    
    dim apm10a$:fattr(apm10a$),at[3]
    apm10a.firm_id$=ape04a.firm_id$
    apm10a.record_id_a$="A"
    apm10a.ap_type$=ape04a.ap_type$
    apm10a.code_desc$=nf$
    k$=apm10a.firm_id$+apm10a.record_id_a$+apm10a.ap_type$
    find record (apm10_dev,key=k$,dom=*next) apm10a$
    lasttype$=apm10a.ap_type$
    aptype$=Translate!.getTranslation("AON_AP_TYPE_")+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(aptype$)
    lines=maxlines+1
    
    return

vendor_break: rem --- Vendor break

    while lastvendor$<>""
        if pos("TEMP"=lastvendor$)=1 then 
            x$=lastvendor$(1,4)
        else 
            x$=fnmask$(lastvendor$(1,vendor_size),m0$)
        endif
        
        total$=Translate!.getTranslation("AON_TOTALS_FOR_VENDOR_")+x$
        
        for x=0 to 2
            totals[x]=vt[x]
        next
        
        warning$=""
        payment=totals[0]-totals[1]-totals[2]
        
        if payment<0 
            negative_checks=1
            warning$=Translate!.getTranslation("AON_WARNING:_NEGATIVE_CHECK_AMOUNT")
        endif
        
        if printed>=1 
            gosub print_total
            xwk=fnblank(9)
            if retention OutVect!.addItem("")
            break
        endif
        
        if warning$="" break

        xwk = fnblank(1)

        OutVect!.addItem(warning$)
        xwk = fnblank(7)
        
        if retention
            xwk = fnblank(1)
        endif
        
        lines=lines+1
        xwk=fnblank(9)
        if retention OutVect!.addItem("")
        break
    wend

    if done return
    
    dim vt[2]
    lastvendor$=ape04a.vendor_id$
    if cvs(lastvendor$,2)="" return
    dim apm01a$:fattr(apm01a$)
    apm01a.firm_id$=ape04a.firm_id$
    apm01a.vendor_id$=ape04a.vendor_id$
    apm01a.vendor_name$=nf$
    k$=apm01a.firm_id$+apm01a.vendor_id$
    find record (apm01_dev,key=k$,dom=*proceed) apm01a$
    vendor$=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
    name$=apm01a.vendor_name$
    thisvendor$=vendor$
    thisname$=name$
    
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    release

rem #endinclude std_end.src

    end
