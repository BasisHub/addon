rem --- Recurring Invoice Entry Register
rem --- Program apr_recurring v8.0.0 11Feb2007 (apr_na)
rem --- Created by adx_codeport.bbx v1.1.5 (02/11/2007 11:28:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations
        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=11,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="aps_params",ids$[1]=files$[1];rem "aps-01A
        files$[2]="ape-01",ids$[2]="APE_INVOICEHDR"
        files$[3]="ape-03",ids$[3]="APE_RECURRINGHDR"
        files$[4]="ape-11",ids$[4]="APE_INVOICEDET"
        files$[5]="ape-13",ids$[5]="APE_RECURRINGDET"
        files$[6]="apm-01",ids$[6]="APM_VENDMAST"
        files$[7]="apc_typecode",ids$[7]=files$[7];rem "apm-10a
        files$[8]="apt-01",ids$[8]="APT_INVOICEHDR"
        files$[9]="apc_distribution",ids$[9]=files$[9];rem "apm-10B
        files$[10]="apc_termscode",ids$[10]=files$[10];rem "apm-10C
        files$[11]="gls_params",ids$[11]=files$[11];rem "gls-01
        options$[3]="L"
        options$[5]="L"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        aps01_dev=channels[1]
        ape01_dev=channels[2]
        ape03_dev=channels[3]
        ape11_dev=channels[4]
        ape13_dev=channels[5]
        apm01_dev=channels[6]
        apm10a_dev=channels[7]
        apt01_dev=channels[8]
        apm10b_dev=channels[9]
        apm10c_dev=channels[10]
        gls01_dev=channels[11]
    

rem --- Dimension string templates

    dim aps01a$:templates$[1]
    dim ape01a$:templates$[2],ape03a$:templates$[3],ape11a$:templates$[4],
:       ape13a$:templates$[5],apm01a$:templates$[6],
:       apm10a$:templates$[7],apt01a$:templates$[8],apm10b$:templates$[9],
:       apm10c$:templates$[10],gls01a$:templates$[11]

rem --- store ape01/11 templates for update

        ape01_tpl$=templates$[2],ape11_tpl$=templates$[4]

rem --- Assign form input values to local variables

        month$=Option!.getOptionData(Translate!.getTranslation("AON_MONTH"))
        year$=Option!.getOptionData(Translate!.getTranslation("AON_YEAR"))
        month=num(month$)
        year=num(year$)

rem --- Retrieve parameter records

        aps01a_key$=firm_id$+"AP00"
        find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","A","",m1$,0,0        
        multitypes=aps01a.multi_types$="Y"
        retention=aps01a.ret_flag$="Y"
        cashbasis=aps01a.cash_basis$="Y"
        m0=len(m0$)
        m1=len(m1$)

		call pgmdir$+"adc_getmask.aon","","GL","I","",g0$,0,acct_length
		call pgmdir$+"adc_getmask.aon","","GL","A","",g1$,0,g1
        g0=len(g0$)

rem --- Is General Ledger installed and being used?

        application$="AP"
        gl$="N"
        status=0
        call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,application$,glw11$,gl$,status
        if status goto std_exit
        process_id$=stbl("+PROCESS_ID")
        batch_no$=stbl("+BATCH_NO")

rem --- Initializations

        headings=2
        dim headings$[headings],underline$(m1*2,"-"),o[11],h[11],gd[2],gh[2]
        dim pt[2],rt[2],at[2],vt[2]
        units=0
        errors=0
        glstatus=0
        done=0
        page=0
        width=132
        printed=0
        maxlines=59
        lines=maxlines+1
        moreheaders=1
        moredetail=1
        ac$=Translate!.getTranslation("AON_ACCOUNT")
        ds$=Translate!.getTranslation("AON_DESCRIPTION")
        amt$=Translate!.getTranslation("AON_AMOUNT")
        when$=sysinfo.system_date$
        clock$=""
        nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
        lasttype$=""
        lastacct$=""
        lastvendor$=""
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$
        if multitypes then headings$[2]="[HEADER]"
        h2$=""
        h3$=Translate!.getTranslation("AON_DISCOUNT")
        if retention 
           h2$=h3$+"/"
           h3$=Translate!.getTranslation("AON_RETENTION")
        endif
        recs=0

rem --column heading 
        dim columns$[13,10]
        columns=13

        columns$[0,0]=Translate!.getTranslation("AON_VENDOR"),          columns$[0,1]="C",columns$[0,2]="8"
        columns$[1,0]=Translate!.getTranslation("AON_NAME"),            columns$[1,1]="C",columns$[1,2]="20"
        columns$[2,0]=Translate!.getTranslation("AON_INVOICE"),         columns$[2,1]="C",columns$[2,2]="8"
        columns$[3,0]="DC",              columns$[3,1]="C",columns$[3,2]="10"
        columns$[4,0]="PG",              columns$[4,1]="C",columns$[4,2]="4"
        columns$[5,0]="TC",              columns$[5,1]="C",columns$[5,2]="4"
        columns$[6,0]="HD",              columns$[6,1]="C",columns$[6,2]="4"
        columns$[7,0]=Translate!.getTranslation("AON_INVOICE_DT"),    columns$[7,1]="C",columns$[7,2]="8"
        columns$[8,0]=Translate!.getTranslation("AON_DUE_DT"),        columns$[8,1]="C",columns$[8,2]="8"
        columns$[9,0]=Translate!.getTranslation("AON_ACCT_DT"),       columns$[9,1]="C",columns$[9,2]="8"
        columns$[10,0]=Translate!.getTranslation("AON_DISC_DT"),      columns$[10,1]="C",columns$[10,2]="8"
        columns$[11,0]=Translate!.getTranslation("AON_REFERENCE/MEMO"),      columns$[11,1]="C",columns$[11,2]="15"
        columns$[12,0]=Translate!.getTranslation("AON_INVOICE_AMT"), columns$[12,1]="N",columns$[12,2]="10",columns$[12,3]=m1$,columns$[12,10]="T"
        columns$[13,0]=Translate!.getTranslation("AON_DISCOUNT_AMT"),columns$[13,1]="N",columns$[13,2]="8",columns$[13,3]=m1$,columns$[13,10]="T"

rem --- Define invoice print and header positions

        o[0]=0
        o[1]=max(7,o[0]+m0+1)
        o[11]=width-m1
        o[10]=o[11]-m1
        o[9]=o[10]-17
        o[8]=o[9]-10
        o[7]=o[8]-10
        o[6]=o[7]-3
        o[5]=o[6]-3
        o[4]=o[5]-3
        o[3]=o[4]-3
        o[2]=o[3]-12
        vw=min(30,o[2]-o[1]-1)
        for x=0 to 9
            h[x]=o[x]
        next x
        h[10]=o[10]+m1-8
        h[11]=o[11]+m1-(max(len(h2$),len(h3$))+1)

rem --- Update report heading with month and year

        x=jul(year,month,1)
        headings$[1]=headings$[1]+Translate!.getTranslation("AON__FOR_")+date(x:"%Ms")+" "+date(x:"%Yl")

rem --- Define GL print and header positions

        gd[0]=o[2]
        gd[1]=gd[0]+g0+1
        gd[2]=o[10]-g1-1
        gh[0]=gd[0]
        gh[1]=gd[1] 
        gh[2]=gd[2]+g1-7
        gw=min(35,gd[2]-gd[1]-1)

rem --- Additional file opens

        files=2,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="glm-01",ids$[1]="GLM_ACCT"
        files$[2]="glw-11",ids$[2]="GLW_DAILYDETAIL"
        rem --- no longer clearing entire file; options$[2]="CL"
        if gl$="Y" call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                             ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        glm01_dev=channels[1]
        glw11_dev=channels[2]

rem --- Clear trans for this firm/process/batch from glw-11 work file (if not batching, batch_no$ is zero, and will clear all recs this firm/process)

        if gl$="Y"
            rec_pfx$=firm_id$+process_id$+batch_no$
            call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
        endif    

rem --- Dimension string templates

    if gl$="Y" dim glm01a$:templates$[1]

rem --- Open printer, start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,ape03_dev,1,meter_num,status
    read (ape03_dev,key=firm_id$,dom=*next)

rem --- Read next Recurring Invoice Header (ape-03) record

    while moreheaders
          read record (ape03_dev,end=*break) ape03a$
          if ape03a.firm_id$<>firm_id$ break
          recs=recs+1
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Level breaks

          if ape03a.ap_type$<>lasttype$ gosub type_break
          if ape03a.vendor_id$<>lastvendor$ gosub vendor_break

          rem --- Retrieve vendor name

          dim vendor$(m0),name$(30),vendorref$(10)
          dim apm01a$:fattr(apm01a$)
          apm01a.firm_id$=ape03a.firm_id$
          apm01a.vendor_id$=ape03a.vendor_id$
          apm01a.vendor_name$=nf$
          k$=apm01a.firm_id$+apm01a.vendor_id$
          find record (apm01_dev,key=k$,dom=*proceed) apm01a$
          vendor$(1)=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
          name$(1)=apm01a.vendor_name$
          vendorref$(1)=vendor$
          errors=errors+(pos(nf$=name$)=1)

          rem --- Retrieve terms code for this invoice

          dim apm10c$:fattr(apm10c$)
          apm10c.firm_id$=ape03a.firm_id$
          apm10c.record_id_c$="C"
          apm10c.terms_codeap$=ape03a.ap_terms_code$
          apm10c.code_desc$=nf$
          k$=apm10c.firm_id$+apm10c.record_id_c$+apm10c.terms_codeap$
          find record (apm10c_dev,key=k$,dom=*next) apm10c$
          errors=errors+(pos(nf$=apm10c.code_desc$)=1)

          rem --- Recalculate dates for this recurring invoice

          wrong=1
          calculating=1
          d=num(ape03a.invoice_date$(7,2))
          while calculating
                while wrong
                      if (month=4 or month=6 or month=9 or month=11) and d>30 d=30
                      if month=2 and d>29 d=29
                      if month=2 and (int(month/4)<>month/4) and d>28 d=28
                      x=jul(year,month,d,err=*break)
                      invoice_date$=date(x:"%Yl%Mz%Dz")
                      wrong=0
                wend
                if wrong=0 break
                d=d-1
          wend
          ape03a.invoice_date$=invoice_date$
          ape03a.accting_date$=invoice_date$
          call pgmdir$+"adc_duedate.aon",apm10c.prox_or_days$,ape03a.invoice_date$,
:                                        apm10c.due_days,ape03a.inv_due_date$,status
          call pgmdir$+"adc_duedate.aon",apm10c.prox_or_days$,ape03a.invoice_date$,
:                                        apm10c_disc_days,ape03a.disc_date$,status

          rem --- Generate unique invoice number for this recurring invoice

          wrong=1
          calculating=1
          d=num(ape03a.invoice_date$(7,2))+1
          invoice$=""
          while calculating
                while wrong        
                      d=d-1
                      x=jul(year,month,d,err=*continue)
                      break
                wend
                x$=str(x:"0000000")
                invoice$=ape03a.ap_inv_no$(1,6)+x$(4)
                k$=ape03a.firm_id$+ape03a.ap_type$+ape03a.vendor_id$+invoice$
                find record (apt01_dev,key=k$,dom=*break)
          wend           

          rem --- Initializations for this invoice

          dim a[2]
          a[0]=ape03a.invoice_amt
          a[1]=ape03a.discount_amt
          a[2]=ape03a.retention

          rem --- Retrieve distribution code and update GL recap

          while gl$="Y"
                while cashbasis=0
                      dim apm10b$:fattr(apm10b$)
                      apm10b.firm_id$=ape03a.firm_id$
                      apm10b.record_id_b$="B"
                      apm10b.ap_dist_code$=ape03a.ap_dist_code$
                      apm10b.code_desc$=nf$
                      k$=apm10b.firm_id$+apm10b.record_id_b$+apm10b.ap_dist_code$
                      find record (apm10b_dev,key=k$,dom=*break) apm10b$
                      account$=apm10b.gl_ap_acct$
                      gldate$=ape03a.accting_date$
                      ref1$=vendorref$
                      ref2$=ape03a.ap_inv_no$
                      ref3$=""
                      memo$=name$
                      if multitypes ref3$=Translate!.getTranslation("AON_AP_TYPE_")+ape03a.ap_type$
                      amount=ape03a.retention-ape03a.invoice_amt
                      units=0
                      gosub glrecap
                      if retention
                         if ape03a.retention
                            account$=apm10b.gl_ret_acct$
                            amount=-ape03.retention
                            gosub glrecap
                         endif
                      endif
                      break
                wend
                break
          wend    
 
          rem --- Print invoice header

          if lines+3>maxlines 
          invdate$=""
          duedate$=""
          acctdate$=""
          discdate$=""
          retention$=""
          if retention retention$=str(ape03a.retention:m1$)
          if cvs(ape03a.invoice_date$,2)<>"" invdate$=fndate$(ape03a.invoice_date$)
          if cvs(ape03a.inv_due_date$,2)<>"" duedate$=fndate$(ape03a.inv_due_date$)
          if cvs(ape03a.accting_date$,2)<>"" acctdate$=fndate$(ape03a.accting_date$)
          if cvs(ape03a.disc_date$,2)<>"" discdate$=fndate$(ape03a.disc_date$)
          
          xwk=fnblank(14)
          OutVect!.addItem(vendor$)
          OutVect!.addItem(name$)
          OutVect!.addItem(ape03a.ap_inv_no$)
          OutVect!.addItem(ape03a.ap_dist_code$)
          OutVect!.addItem(ape03a.payment_grp$)
          OutVect!.addItem(ape03a.ap_terms_code$)
          OutVect!.addItem(ape03a.hold_flag$)
          OutVect!.addItem(invdate$)
          OutVect!.addItem(duedate$)
          OutVect!.addItem(acctdate$)
          OutVect!.addItem(discdate$)
          OutVect!.addItem(ape03a.reference$+" "+ape03a.ap_inv_memo$)
          OutVect!.addItem(ape03a.invoice_amt$)
          OutVect!.addItem(ape03a.discount_amt$)
       

          xwk=fnblank(2)
          OutVect!.addItem(ac$)
          OutVect!.addItem(ds$)
          xwk=fnblank(10)
    
          if gl$="Y" call pgmdir$+"glc_datecheck.aon",ape03a.accting_date$,"N",period$,year$,glstatus
          if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,ape03a.accting_date$,glstatus,lines,errors,status

          if stbl("+DTWARN_MSG",err=*endif)<>""
              xwk=fnblank(1)
              OutVect!.addItem(stbl("+DTWARN_MSG"))
              xwk=fnblank(12)
          endif
          
          rem --- Accumulate totals

          for x=0 to 2
              vt[x]=vt[x]+a[x]
              at[x]=at[x]+a[x]
              rt[x]=rt[x]+a[x]
          next x

          rem --- Position the Recurring Invoice Detail (ape-13) file

          if gl$<>"Y" continue
          gllines=0
          total=0
          invoice$=ape03a.firm_id$+ape03a.ap_type$+ape03a.vendor_id$+
:                  ape03a.ap_inv_no$
          read (ape13_dev,key=invoice$,dom=*next)

          rem --- Read the next Recurring Invoice Detail (ape-13) record

          while moredetail
                k$=key(ape13_dev,end=*break)
                if pos(invoice$=k$)<>1 break
                read record (ape13_dev) ape13a$

                rem --- Retrieve GL account master

                dim glm01a$:fattr(glm01a$)
                description$=nf$
                glacct$=Translate!.getTranslation("AON_NONE")
                glm01a.firm_id$=ape13a.firm_id$
                glm01a.gl_account$=ape13a.gl_account$
                glm01a.gl_acct_desc$=nf$
                k$=glm01a.firm_id$+glm01a.gl_account$
                find record (glm01_dev,key=k$,dom=*next) glm01a$
                if cvs(glm01a.gl_account$,3)<>"" 
                    glacct$=fnmask$(pad(ape13a.gl_account$(1,acct_length),acct_length),g0$)
                    description$=glm01a.gl_acct_desc$
                endif
                errors=errors+(pos(nf$=description$)=1)
                
                rem --- Print the detail line

                if gllines=0 gosub account_heading
                if lines+1>maxlines

                   gosub account_heading
                endif

                 xwk=fnblank(2)
                 OutVect!.addItem(glacct$)
                 OutVect!.addItem(description$)
                 xwk=fnblank(8)
                 OutVect!.addItem(ape13a.gl_post_amt$)
                 xwk=fnblank(1)
                 lines=lines+1
                 gllines=gllines+1
                 total=total+ape13a.gl_post_amt

                rem --- Update the GL recap

                while cashbasis=0
                      account$=ape13a.gl_account$
                      gldate$=ape03a.accting_date$
                      ref3$=Translate!.getTranslation("AON_LINE_")+ape13a.sequence_num$
                      amount=ape13a.gl_post_amt
                      units=ape13a.units
                      gosub glrecap
                      break
                wend

          wend

          rem --- Check for out of balance condition

              if gllines=0 continue
              if total=ape03a.invoice_amt continue
              difference=ape03a.invoice_amt-total
              if lines+2>maxlines
              gosub account_heading
          endif

            xwk=fnblank(14)
            OutVect!.addItem("")
            OutVect!.addItem(Translate!.getTranslation("AON_WARNING:_THIS_TRANSACTION_IS_OUT_OF_BALANCE_BY_")+str(difference:m1$))
            xwk=fnblank(12)


          rem --- Loop back for next Recurring Invoice Header

    wend

rem --- All done

        if recs=0
            msg_id$="DOC_OUTPUT_NODATA"
            gosub disp_message
            goto std_exit_no_report
        endif

        done=1
        gosub type_break
        aptype$=""
        total$=Translate!.getTranslation("AON_TOTALS_FOR_REPORT")
        for x=0 to 2
            pt[x]=rt[x]
        next x
        gosub print_total

rem --- Any errors encountered?

    while errors
          if lines+2>maxlines 
            xwk=fnblank(14)
            OutVect!.addItem("")
            OutVect!.addItem(Translate!.getTranslation("AON_WARNING:_THIS_REGISTER_IS_OUT_OF_BALANCE_OR_MISSING_INFORMATION"))
            xwk=fnblank(12)
            lines=lines+2
          endif  
          break
    wend

rem --- Destroy the progress meter and run the next overlay

        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

        update$=pgmdir$+"apu_recurring.aon"
        if errors
        gosub Display_Message
        if special_flag$<>"Y" then update$=""
    endif

        overlay$=update$
        if gl$="Y" overlay$=pgmdir$+"glr_recap.aon"
        out_action$="PRT-PDF"
        next_overlay$=overlay$
        goto std_exit

    if cvs(aptype$,2)<>""
       OutVect!.addItem(fncenter(aptype$,width),aptype$)
       lines=lines+1
       lines=lines+3

account_heading: rem --- Account subheading

    if lines+3>maxlines 
    lines=lines+2
    return

print_total: rem --- Print totals

    if lines+3>maxlines 
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk=fnblank(9)
        OutVect!.addItem(total$)
        xwk=fnblank(2)
        OutVect!.addItem(str(pt[0]))
        OutVect!.addItem(str(pt[1]))
        lines=lines+3
    return

type_break: rem --- AP Type break

    while lasttype$<>""
          gosub vendor_break
          if multitypes
             total$=Translate!.getTranslation("AON_TOTAL_FOR_")+aptype$
             for x=0 to 2
                 pt[x]=at[x]
             next x
             gosub print_total
          endif
          break
    wend
    if multitypes=0 return
    if done return
    dim apm10a$:fattr(apm10a$),at[2]
    apm10a.firm_id$=ape03a.firm_id$
    apm10a.record_id_a$="A"
    apm10a.ap_type$=ape03a.ap_type$
    apm10a.code_desc$=nf$
    k$=apm10a.firm_id$+apm10a.record_id_a$+apm10a.ap_type$
    find record (apm10a_dev,key=k$,dom=*next) apm10a$
    aptype$=Translate!.getTranslation("AON_AP_TYPE_")+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(aptype$)
    lines=maxlines+1
    lasttype$=apm10a.ap_type$
    return

vendor_break: rem --- Vendor break

    while lastvendor$<>""
          if printed=1 break
          x$=lastvendor$(1,4)
          if x$<>"TEMP" x$=fnmask$(lastvendor$(1,vendor_size),m0$)
          total$=Translate!.getTranslation("AON_TOTAL_FOR_VENDOR_")+x$
          for x=0 to 2
              pt[x]=vt[x]
          next x
          gosub print_total
          break
    wend
    if done return
    dim vt[2]
    printed=0
    lastvendor$=ape03a.vendor_id$
    return

glrecap: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    return

Display_Message: rem --- Display Message Routine

    msg_id$="AON_REG_ERRS"
    gosub disp_message
    if pos("PASSVALID"=msg_opt$)<>0 special_flag$="Y"
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return
    
rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    release

rem #endinclude std_end.src

    end
