rem --- Vendor Label Printing
rem --- Program apr_labels v8.0.0 22Dec2006 (apr_kb)
rem --- Created by adx_codeport.bbx v1.1.5 (12/22/2006 01:43:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- this is one of only one or two pgms in the Barista version of Addon that 
rem --- use adc_printer to open the printer device (based on the printer selected in
rem --- Barista's File ==> processing settings, default printer).

rem --- depending on the alias line in your barista.cfg, you may need to adjust the 
rem --- label specifications in the AP Params record to get a printout.

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS";rem aps-01
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="apc_typecode",ids$[3]="APC_TYPECODE";rem apm-10A

   call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    aps01_dev=channels[1]
    apm01_dev=channels[2]
    apm10_dev=channels[3]

rem --- Dimension string templates

    dim aps01a$:templates$[1],apm01a$:templates$[2],apm10a$:templates$[3]

rem --- Assign form input values to local variables

    sequence$=Option!.getOptionData("REPORT_TYPE")
    labels$=Option!.getOptionData("PICK_INTEGER")
    begvendor$=Option!.getOptionData("VENDOR_ID_1")
    endvendor$=Option!.getOptionData("VENDOR_ID_2")
    begalt$=Option!.getOptionData("ALT_SEQUENCE_1")
    endalt$=Option!.getOptionData("ALT_SEQUENCE_2")
    begzip$=Option!.getOptionData("ZIP_CODE_1")
    endzip$=Option!.getOptionData("ZIP_CODE_2")
    labels=num(labels$)
    vend_type$=Option!.getOptionData("VENDOR_TYPE")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    across=num(aps01a.label_across$)
    length=num(aps01a.label_length$)
    width=num(aps01a.label_width$)

rem --- Initializations

    dim label$(across*width*4),linefeeds$(length,$0A$)
    answer$="Y"
    msg_id$="PRINT_TEST_PATTERN"
    more=1
    first=1
    lines=4
    if length<4 lines=length
    offset=0
    keynum$="PRIMARY"
    begvalue$=begvendor$
    endvalue$=endvendor$
    keyfield$="VENDOR_ID"
    if sequence$="A"
       keynum$="AO_ALTSEQ_VEND"
       begvalue$=cvs(begalt$,3)
       endvalue$=cvs(endalt$,3)
       keyfield$="ALT_SEQUENCE"
    endif
    if sequence$="Z"
       keynum$="AO_ZIP_VEND"
       begvalue$=cvs(begzip$,3)
       endvalue$=cvs(endzip$,3)
       keyfield$="ZIP_CODE"
    endif
    endvaluelen=len(endvalue$)
    total_recs=0

rem --- Print test patterns until the user is satisfied

    while answer$="Y"
        dim msg_tokens$[1]
        msg_opt$=""
        gosub disp_message
        if msg_opt$<>"Y" break

        rem --- Print test pattern

        call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
        if status exitto std_exit
        dim label$(across*width*length,"X")
        printed_across=1
        gosub label
        close (printer_dev)
        msg_id$="ANOTHER_PATTERN"
    wend

    if msg_opt$="C" goto std_exit

    close (printer_dev,err=*next)    
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit


rem --- Start the progress meter and position the file

    call pgmdir$+"adc_progress.aon","NC","APM_VENDMAST","","","",0,apm01_dev,1,meter_num,status
    read record(apm01_dev,key=firm_id$+begvalue$,knum=keynum$,dir=0,dom=*next)apm01a$

rem --- Read next Vendor Master (apm-01) record

    while more
          read record(apm01_dev,end=*break)apm01a$
          if apm01a.firm_id$<>firm_id$ break
          if endvaluelen > 0 then
             vendfield$=pad(cvs(field(apm01a$,keyfield$),3),endvaluelen)
             if vendfield$>endvalue$ break
          endif
          
          if vend_type$="P" and apm01a.temp_vend$="Y" then continue
          if vend_type$="T" and apm01a.temp_vend$<>"Y" then continue
         
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

          rem --- Print the label(s) for this vendor

          printed=1
          while printed<=labels
                printed=printed+1
                if printed_across>=across gosub label
                printed_across=printed_across+1
                address$=apm01a.addr_line_1$+apm01a.addr_line_2$+apm01a.city$+apm01a.state_code$+apm01a.zip_code$
                call pgmdir$+"adc_address.aon",address$,24,3,9,30
                label$(width*(printed_across-1)+1,width)=apm01a.vendor_name$
                label$(width*(across+printed_across-1)+1,width)=address$(1,30)
                label$(width*(2*across+printed_across-1)+1,width)=address$(31,30)
                label$(width*(3*across+printed_across-1)+1,width)=address$(61,30)
          wend

          rem --- Loop back for next vendor master

    wend

rem --- All done

    gosub label
    goto std_exit

label: rem --- Print the label(s)

    if printed_across=0 return
    if first 
       for x=1 to length
           print (printer_dev) ""
       next x
       first=0
    endif
    for x=0 to lines-1
        print (printer_dev) @(offset),label$(x*across*width+1,across*width)
    next x
    if length>4 print (printer_dev) linefeeds$(1,length-5)
    printed_across=0
    label$(1)=""
    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end