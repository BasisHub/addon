rem --- Check & Zero Balance Invoice Purge Register
rem --- Program apr_zerobalance v8.0.0 05Feb2007 (apr_ra)
rem --- Created by adx_codeport.bbx v1.1.5 (02/05/2007 04:01:05)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS";rem "aps-01A
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[4]="apt-01",ids$[4]="APT_INVOICEHDR"
    files$[5]="apt-02",ids$[5]="APT_INVOICEDIST"
    files$[6]="apt-05",ids$[6]="APT_CHECKHISTORY"
    files$[7]="apt-11",ids$[7]="APT_INVOICEDET"
    files$[8]="apw-06",ids$[8]="APW_INVOICEPURGE"
    files$[9]="apw-16",ids$[9]="APW_CHECKPURGE"
    files$[10]="gls_params",ids$[10]="GLS_PARAMS";rem "gls-01
    options$[4]="L"
    options$[7]="L"
    options$[8]="CL"
    options$[9]="CL"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01_dev=channels[1]
    apm01_dev=channels[2]
    apt01_dev=channels[4]
    apt02_dev=channels[5]
    apt05_dev=channels[6]
    apt11_dev=channels[7]
    apw06_dev=channels[8]
    apw16_dev=channels[9]
    gls01_dev=channels[10]

rem --- Dimension string templates

    dim aps01a$:templates$[1]
    dim apm01a$:templates$[2],apt01a$:templates$[4],
:       apt02a$:templates$[5],apt05a$:templates$[6],apt11a$:templates$[7],
:       apw06a$:templates$[8],apw16a$:templates$[9],gls01a$:templates$[10]

rem --- Assign form input values to local variables

    purgedate$=Option!.getOptionData("REPORT_DATE")

rem --- Validate date

    if len(cvs(purgedate$,2))=0 
        dim msg$[1]
        msg$[0]="Invalid date entered."
        call stbl("+DIR_PGM")+"adc_stdmessage.aon",1,msg$[all],0,-1,-1,v$,v3
        goto std_exit
    endif

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","A","",m1$,0,0
    retention=aps01a.ret_flag$="Y"
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    m0=len(m0$)
    m1=len(m1$)
    headings=3

rem --- Initializations

    dim headings$[headings],types$[4],o[8],h[8]
    invoices=0
    checks=0
    done=0
    page=0
    width=80
    maxlines=59
    lines=maxlines+1
    more=1
    moreheaders=1
    moredetail=1
    when$=sysinfo.system_date$
    clock$=""
    nf$="(Not on File)"
    total$="Invoice Total"
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]="Purge Through "+fndate$(purgedate$)
    retention_header$=""
    if retention retention_header$="Retention"
    types$[0]="???"
    types$[1]="Adj"
    types$[2]="Chk"
    types$[3]="Man"
    types$[4]="Rev"
    lastvendor$=""

rem --- Define print positions

    o[0]=0
    o[8]=width-1
    if retention o[8]=width-m1
    o[7]=o[8]-m1
    o[6]=o[7]-m1
    o[5]=o[6]-2
    o[4]=o[5]-3
    o[3]=o[4]-9
    o[2]=o[3]-9
    o[1]=o[2]-14
    for x=0 to 5
        h[x]=o[x]
    next x
    h[6]=o[6]+m1-7
    h[7]=o[7]+m1-8
    h[8]=o[8]
    if retention h[8]=o[8]+m1-10
    t=o[6]-len(total$)-1

rem --- Open printer, start progress meter and position header file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC","","","","",0,apt01_dev,1,meter_num,status
    read (apt01_dev,key=firm_id$,dom=*next)

rem --- First we need to find all the zero balance invoices

    while moreheaders
          k$=key(apt01_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (apt01_dev,key=k$) apt01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          if apt01a.accting_date$>purgedate$ continue          

          rem --- Initializations for this invoice

          gosub invoice_initializations

          rem --- Position the Invoice Detail (apt-11) file

          read (apt11_dev,key=invoice$,dom=*next)

          rem --- Read the next Invoice Detail (apt-11) record

          while moredetail
                k$=key(apt11_dev,end=*break)
                if pos(invoice$=k$)<>1 break
                read record (apt11_dev) apt11a$
                if cvs(apt11a.trans_type$,2)="" continue
                if apt11a.trans_date$>purgedate$ continue
                total[0]=total[0]+apt11a.trans_amt
                total[1]=total[1]+apt11a.trans_disc
                total[2]=total[2]+apt11a.trans_ret
          wend

          rem --- Zero balance?

          if total[0] continue
          if total[2] continue

          rem --- Position the Invoice Detail (apt-11) file

          read (apt11_dev,key=invoice$,dom=*next)

          rem --- Now retrieve all the checks used to pay this invoice and
          rem --- update the register work files.

          while moredetail
                k$=key(apt11_dev,end=*break)
                if pos(invoice$=k$)<>1 break
                read record (apt11_dev) apt11a$
                if pos(apt11a.trans_type$="CM")=0 continue
                dim apw06a$:fattr(apw06a$),apw16a$:fattr(apw16a$)
                apw06a.firm_id$=apt11a.firm_id$
                apw06a.ap_type$=apt11a.ap_type$
                apw06a.ap_inv_no$=apt11a.ap_inv_no$
                apw06a.check_no$=apt11a.trans_ref$
                k$=apw06a.firm_id$+apw06a.ap_type$+apw06a.ap_inv_no$+apw06a.check_no$
                write (apw06_dev,key=k$) apw06a$
                apw16a.firm_id$=apt11a.firm_id$
                apw16a.ap_type$=apt11a.ap_type$
                apw16a.check_no$=apt11a.trans_ref$
                k$=apw16a.firm_id$+apw16a.ap_type$+apw16a.check_no$
                write (apw16_dev,key=k$) apw16a$
          wend

          rem --- Loop back for next Invoice Header

    wend

rem --- Now we need to make sure that any checks used to pay the zero balance invoices
rem --- are going to be purged as well.

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","NC","","","","",0,apt05_dev,1,meter_num,status
    read (apt05_dev,key=firm_id$,dom=*next)

rem --- Read next Check Detail (apt-05) record

    while more
          k$=key(apt05_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (apt05_dev,key=k$) apt05a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Loop back for next check record

    wend

rem --- Verify that both the invoices and the checks used to pay them will be purged

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","NC","","","","",0,apw06_dev,1,meter_num,status
    read (apw06_dev,key=firm_id$,dom=*next)

rem --- Read next invoice work record

    while more
          k$=key(apw06_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (apw06_dev) apw06a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    wend

rem --- We need to re-verify invoices to be purged to make sure no invoices or checks
rem --- were removed from the work files for some reason.

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","NC","","","","",0,apt01_dev,1,meter_num,status
    read (apt01_dev,key=firm_id$,dom=*next)

rem --- Verify invoices and checks to be purged and print them

    while moreheaders
          k$=key(apt01_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (apt01_dev,key=k$) apt01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Okay to purge this invoice?

          invoice$=apt01a.firm_id$+apt01a.ap_type$+apt01a.ap_inv_no$
          read (apw06_dev,key=invoice$,dom=*next)
          k$=key(apw06_dev,end=*continue)
          if pos(invoice$=k$)<>1 continue

          rem --- Vendor break?

          if apt01a.vendor_id$<>lastvendor$ gosub vendor_break

          rem --- Initializations for this invoice

          gosub invoice_initializations

          rem --- Print invoice header information (Note: This resets invoice$)

          if lines+2>maxlines gosub report_heading
          print (printer_dev) @(o[1]),apt01a.ap_inv_no$,@(o[2]),fndate$(apt01a.invoice_date$),
:                             @(o[3]),fndate$(apt01a.inv_due_date$),@(o[4]),apt01a.payment_grp$,
:                             @(o[5]),apt01a.hold_flag$,@(o[6]),apt01a.invoice_amt:m1$,
:                             @(o[7]),apt01a.discount_amt:m1$,
:                             @(o[8]),fnretention$(retention,apt01a.retention,m1$)
          lines=lines+1
          invoices=invoices+1

          rem --- Position the Invoice Detail (apt-11) file

          read (apt11_dev,key=invoice$,dom=*next)

          rem --- Read the next Invoice Detail (apt-11) record

          while moredetail
                k$=key(apt11_dev,end=*break)
                if pos(invoice$=k$)<>1 break
                read record (apt11_dev) apt11a$
                if cvs(apt11a.trans_type$,2)="" continue

                rem --- Print this detail record

                x=pos(apt11a.trans_type$="ACMR")
                type$=types$[x]
                if lines+1>maxlines gosub report_heading
                print (printer_dev) @(o[1]+2),type$," ",apt11a.trans_ref$,
:                                   @(o[2]),fndate$(apt11a.trans_date$),
:                                   @(o[6]),apt11a.trans_amt:m1$,@(o[7]),apt11a.trans_disc:m1$,
:                                   @(o[8]),fnretention$(retention,apt11a.trans_ret,m1$)
                lines=lines+1

                rem --- Accumulate totals

                total[0]=total[0]+apt11a.trans_amt
                total[1]=total[1]+apt11a.trans_disc
                total[2]=total[2]+apt11a.trans_ret

                rem --- Loop back for next invoice detail

          wend

          rem --- Print invoice total

          if lines+1>maxlines gosub report_heading
          print (printer_dev) @(t),total$,@(o[6]),total[0]:m1$,@(o[7]),total[1]:m1$,
:                             @(o[8]),fnretention$(retention,total[2],m1$)
          lines=lines+1

          rem --- Loop back for next invoice header

    wend

rem --- Count the number of checks to be deleted

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    call pgmdir$+"adc_progress.aon","NC","","","","",0,apw16_dev,1,meter_num,status
    read (apw16_dev,key=firm_id$,dom=*next)

rem --- Read next check work record

    while more
          k$=key(apw16_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (apw16_dev) apw16a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          checks=checks+1
    wend

rem --- All done

    invoices$="No"
    checks$="No"
    if invoices invoices$=str(invoices)
    if checks checks$=str(checks)
    if lines+3>maxlines gosub report_heading
    print (printer_dev) ""
    print (printer_dev) invoices$," Invoices will be purged"
    print (printer_dev) checks$," Checks will be purged"
    run pgmdir$+"apu_zerobalance.aon",err=std_exit

report_heading: rem --- Report Heading

    lines=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,
:                                  clock$,status
    if status exitto std_exit
    print (printer_dev) @(h[0]),"Vendor",@(h[1]),"Invoice",@(h[2]),"Date",@(h[3]),"Due Date",
:                       @(h[4]),"PG",@(h[5]),"H",@(h[6]),"Amount",@(h[7]),"Discount",
:                       @(h[8]),retention_header$
    return

vendor_break: rem --- Vendor break

    dim name$(30)
    dim apm01a$:fattr(apm01a$)
    apm01a.firm_id$=apt01a.firm_id$
    apm01a.vendor_id$=apt01a.vendor_id$
    apm01a.vendor_name$=nf$
    k$=apm01a.firm_id$+apm01a.vendor_id$
    find record (apm01_dev,key=k$,dom=*proceed) apm01a$
    vendor$=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
    name$(1)=apm01a.vendor_name$
    lastvendor$=apm01a.vendor_id$
    if lines+4>maxlines gosub report_heading
    print (printer_dev) ""
    print (printer_dev) @(o[0]),vendor$,@(o[0]+m0+1),name$
    lines=lines+2
    return

invoice_initializations: rem --- Initializations for this invoice

    dim total[2]
    total[0]=apt01a.invoice_amt
    total[1]=apt01a.discount_amt
    total[2]=apt01a.retention
    invoice$=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+
:            apt01a.ap_inv_no$
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnretention$: Return null string or masked amount

    def fnretention$(q1,q2,q1$)
        q2$=""
        if q1 q2$=str(q2:q1$)
        return q2$
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
