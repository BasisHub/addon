rem --- Purchase Journal (Report Overlay)
rem --- Program apr_purchases v8.0.0 18Jan2007 (apr_ob)
rem --- Created by adx_codeport.bbx v1.1.5 (01/18/2007 08:11:06)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)    

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",   ids$[1]="APS_PARAMS";rem "aps-01
    files$[2]="apm-01",       ids$[2]="APM_VENDMAST"
    files$[4]="apc_typecode", ids$[4]="APC_TYPECODE";rem "apm-10A
    files$[5]="apt-02",       ids$[5]="APT_INVOICEDIST"
    files$[6]="apt-05",       ids$[6]="APT_CHECKHISTORY"
    files$[7]="gls_params",   ids$[7]="GLS_PARAMS";rem "gls-01
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    
    aps01_dev=channels[1]
    apm01_dev=channels[2]
    apm10_dev=channels[4]
    apt02_dev=channels[5]
    apt05_dev=channels[6]
    gls01_dev=channels[7]

rem --- Dimension string templates

    dim aps01a$:templates$[1]
    dim apm01a$:templates$[2]
    dim apm10a$:templates$[4]
    dim apt02a$:templates$[5]
    dim apt05a$:templates$[6]
    dim gls01a$:templates$[7]

rem --- Assign form input values to local variables

    period$=Option!.getOptionData("PERIOD")
    year$=Option!.getOptionData("YEAR")
    sequence$=Option!.getOptionData("REPORT_SEQUENCE")
    vend_type$=Option!.getOptionData("VENDOR_TYPE")
    year=num(year$)
    period=num(period$)
    call pgmdir$+"adc_perioddates.aon",gls01_dev,period,year,begdate$,enddate$,status

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    call pgmdir$+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
    multitypes=aps01a.multi_types$="Y"
	call pgmdir$+"adc_getmask.aon","","AP","A","",m1$,0,m1
    m0=len(m0$)
    call pgmdir$+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,acct_length
    g0=len(g0$)
    headings=4
    if multitypes then headings=5

rem --- Is General Ledger installed?

    gl$="N"
    application$="AP"
    call pgmdir$+"adc_application.aon",application$,info$[all]
    gl$=info$[9]

    if gl$="Y"
        application$="GL"
        call pgmdir$+"adc_application.aon",application$,info$[all]
        gl$=info$[20]

        if gl$="Y"
			call pgmdir$+"adc_getmask.aon","","GL","A","",m1$,0,m1
        endif
    endif

rem --- Initializations

    dim headings$[headings],underline$(m1,"-"),o[6],h[11]
    vm=max(m0,8)
    gm=max(g0,9)
    done=0
    page=0
    width=132
    report=0
    maxlines=59
    lines=maxlines+1
    more=1
    recs=0
    when$=sysinfo.system_date$
    clock$=""
    total_recs=0
    
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    lasttype$=""
    lastacct$=""
    lastvendor$=""
    lastdetail$=""
    altseq$=""
    vendor$=""
    name$=""
    account$=""
    description$=""
    ah$=Translate!.getTranslation("AON_ACCOUNT")
    dh$=Translate!.getTranslation("AON_DESCRIPTION")
    if gl$<>"Y"
       ah$=""
       dh$=""
       gm=0
       g0=0
       width=80
    endif
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=Translate!.getTranslation("AON_FOR_PERIOD_")+str(period)+Translate!.getTranslation("AON__FROM_")+fndate$(begdate$)+Translate!.getTranslation("AON__THROUGH_")+fndate$(enddate$)
    
    if sequence$="D" then 
       headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_DISTRIBUTION_ACCOUNT")
       keynum$="AO_GLACCT_VEND"
    endif
    
    if sequence$="V" then 
       headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_VENDOR")
       keynum$="PRIMARY"
    endif
    
    if sequence$="A" then 
       headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_ALTERNATE_SEQUENCE")
    endif
    
    if vend_type$="A" then
        headings$[3]=Translate!.getTranslation("AON_ALL_VENDORS")
    endif
    
    if vend_type$="P" then
        headings$[3]=Translate!.getTranslation("AON_PERMANENT_VENDORS_ONLY")
    endif

    if vend_type$="T" then
        headings$[3]=Translate!.getTranslation("AON_TEMPORARY_VENDORS_ONLY")
    endif

    
    alternate=1
    distribution=2
    vendor=3
    if multitypes then headings$[4]="[HEADER]"

rem --- Column Headings

dim columns$[6,10]
    columns = 6
    
    if sequence$="D" then 
        columns$[0,0]=ah$,             columns$[0,1]="C",columns$[0,2]="10"
        columns$[1,0]=dh$,             columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]=Translate!.getTranslation("AON_VENDOR"),        columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]=Translate!.getTranslation("AON_NAME"),          columns$[3,1]="C",columns$[3,2]="25"
        columns$[4,0]=Translate!.getTranslation("AON_INV/CHK"),       columns$[4,1]="C",columns$[4,2]="10"
        columns$[5,0]=Translate!.getTranslation("AON_DATE"),          columns$[5,1]="C",columns$[5,2]="8"
        columns$[6,0]=Translate!.getTranslation("AON_AMOUNT"),        columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    endif
    
    if sequence$="V" then 
        columns$[0,0]=Translate!.getTranslation("AON_VENDOR"),        columns$[0,1]="C",columns$[0,2]="10"
        columns$[1,0]=Translate!.getTranslation("AON_NAME"),          columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]=Translate!.getTranslation("AON_INV/CHK"),       columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]=Translate!.getTranslation("AON_DATE"),          columns$[3,1]="C",columns$[3,2]="8"
        columns$[4,0]=ah$,             columns$[4,1]="C",columns$[4,2]="10"
        columns$[5,0]=dh$,             columns$[5,1]="C",columns$[5,2]="25"
        columns$[6,0]=Translate!.getTranslation("AON_AMOUNT"),        columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    endif
    
    if sequence$="A" then 
        columns$[0,0]=Translate!.getTranslation("AON_ALT_SEQ"),       columns$[0,1]="C",columns$[0,2]="10"
        columns$[1,0]=Translate!.getTranslation("AON_VENDOR"),        columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]=Translate!.getTranslation("AON_INV/CHK"),       columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]=Translate!.getTranslation("AON_DATE"),          columns$[3,1]="C",columns$[3,2]="8"
        columns$[4,0]=ah$,             columns$[4,1]="C",columns$[4,2]="10"
        columns$[5,0]=dh$,             columns$[5,1]="C",columns$[5,2]="25"
        columns$[6,0]=Translate!.getTranslation("AON_AMOUNT"),        columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    endif
    
rem --- Initialize print positions

    if sequence$="D" then 
        o[0]=0
        o[6]=width-m1
        o[1]=o[0]+gm+1
        o[2]=o[1]+36
        o[3]=o[2]+vm
        w=gm+3
        o[5]=o[6]-10
        o[4]=o[5]-14
        dw=min(30,o[4]-o[3]-1)
    endif
    
    if sequence$="V" then 
       o[1]=o[0]+vm
       o[2]=o[1]+31
       o[3]=o[2]+14
       w=max(3+vm,gm)
       o[4]=o[3]+9
       o[5]=o[4]+gm+1
       dw=min(35,o[6]-o[5]-1)
    endif
    
    if sequence$="A" then 
       o[1]=11
       o[2]=o[1]+vm+31
       o[3]=o[2]+14
       w=13
       o[4]=o[3]+9
       o[5]=o[4]+gm+1
       dw=min(35,o[6]-o[5]-1)
    endif

rem --- Additional file opens

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    if gl$="Y"
       files$[1]="glm-01",ids$[1]="GLM_ACCT"
       files$[2]="glw-04",ids$[2]="GLW_ACCTTOTALS"
       options$[2]="CL"
    endif
    if gl$="Y" call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                              ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    glw04_dev=channels[2]

rem --- Dimension string templates

    if gl$="Y" then dim glm01a$:templates$[1],glw04a$:templates$[2]

rem --- Sort Invoice History (apt-02) by alternate sequence

    if sequence$ = "A" then 
    
        sql_prep$ = ""
        sql_prep$ = sql_prep$ + "SELECT apm_vendmast.alt_sequence, apt_invoicedist.ap_type, apt_invoicedist.vendor_id, apt_invoicedist.invoice_type, "
        sql_prep$ = sql_prep$ + "       apt_invoicedist.reference, apt_invoicedist.gl_account, apt_invoicedist.accting_date "
        sql_prep$ = sql_prep$ + "  FROM apt_invoicedist INNER JOIN apm_vendmast "
        sql_prep$ = sql_prep$ + "    ON apt_invoicedist.firm_id = apm_vendmast.firm_id AND "
        sql_prep$ = sql_prep$ + "       apt_invoicedist.vendor_id = apm_vendmast.vendor_id "
        sql_prep$ = sql_prep$ + " WHERE apt_invoicedist.firm_id = '" + firm_id$ + "' AND " 
        sql_prep$ = sql_prep$ + "       apt_invoicedist.accting_date > '" + begdate$ + "' AND apt_invoicedist.accting_date < '" + enddate$ + "' "
        sql_prep$ = sql_prep$ + "ORDER BY apm_vendmast.alt_sequence, apt_invoicedist.vendor_id, apt_invoicedist.invoice_type, "
        sql_prep$ = sql_prep$ + "         apt_invoicedist.reference, apt_invoicedist.gl_account, apt_invoicedist.accting_date "
        
        sql_chan=sqlunt
        sqlopen(sql_chan)stbl("+DBNAME")
        sqlprep(sql_chan)sql_prep$
        dim read_tpl$:sqltmpl(sql_chan)
        sqlexec(sql_chan)

    endif
    
rem --- Start progress meter and position the driver file

    sequence=pos(sequence$="ADV")
    call pgmdir$+"adc_progress.aon","NC","APT_INVOICEDIST","","","",0,apt02_dev,1,meter_num,status
    if pos(sequence$="VD") then read (apt02_dev,key=firm_id$,knum=keynum$,dom=*next)

rem --- Read next invoice history or sort record

    while more
    
        if sequence$ = "A" then
            
            read_tpl$=sqlfetch(sql_chan,err=*break) 
            
            apt02a.firm_id$      = firm_id$
            apt02a.ap_type$      = read_tpl.ap_type$
            apt02a.vendor_id$    = read_tpl.vendor_id$
            apt02a.invoice_type$ = read_tpl.invoice_type$
            apt02a.reference$    = read_tpl.reference$
            apt02a.gl_account$   = read_tpl.gl_account$
            apt02a.accting_date$ = read_tpl.accting_date$
            
            k$ = apt02a.firm_id$ + apt02a.ap_type$ + apt02a.vendor_id$ + apt02a.invoice_type$ +
:                apt02a.reference$ + apt02a.gl_account$ + apt02a.accting_date$
            find record (apt02_dev,key=k$,dom=*continue) apt02a$
            
        else
    
            k$=key(apt02_dev,end=*break)
            if pos(firm_id$=k$)<>1 then break
            if pos(sequence$="VD") then read record (apt02_dev,key=k$) apt02a$
            
            rem --- Is the record in the requested period?

            if apt02a.accting_date$<begdate$ continue
            if apt02a.accting_date$>enddate$ continue

        endif
        
        rem --- extra apm01 read here to facilitate including/skipping vendors based on temp vend flag
        if vend_type$<>"A"
            read record (apm01_dev,key=firm_id$+apt02a.vendor_id$,dom=*continue)apm01a$
            if (vend_type$="P" and apm01a.temp_vend$="Y") or (vend_type$="T" and apm01a.temp_vend$<>"Y") then continue
        endif
          
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

        rem --- Level breaks

        detail$ = apt02a.invoice_type$ + apt02a.reference$
        if apt02a.ap_type$ <> lasttype$ then       gosub type_break
        if apt02a.gl_account$ <> lastaccount$ then gosub account_break
        if apt02a.vendor_id$ <> lastvendor$ then   gosub vendor_break
        if detail$ <> lastdetail$ then             gosub detail_break

        rem --- Retrieve GL account description if necessary

        if sequence$<>"D" then
            if gl$<>"Y" then
                account$=""
                description$=""
            else 
                gosub gl_account
            endif
        endif

          rem --- Print detail line

          amount=apt02a.gl_post_amt
          switch sequence
                 case alternate
                      if vendor$<>"" 
                         xwk=fnblank(7)
                      endif
                      if description$<>"" then description$=description$(1,dw)
                      name$=vendor$+" "+name$
                      vendor$=altseq$
                      OutVect!.addItem(vendor$)
                      OutVect!.addItem(name$)
                      OutVect!.addItem(invoice$)
                      OutVect!.addItem(invdate$)
                      OutVect!.addItem(account$)
                      OutVect!.addItem(description$)
                      OutVect!.addItem(str(amount))
                 break
                 case distribution
                      if account$<>"" or vendor$<>"" 
                         xwk=fnblank(7)
                         if name$<>"" name$=name$(1,dw)
                      OutVect!.addItem(account$)
                      OutVect!.addItem(description$)
                      OutVect!.addItem(vendor$)
                      OutVect!.addItem(name$)
                      OutVect!.addItem(invoice$)
                      OutVect!.addItem(invdate$)
                      OutVect!.addItem(str(amount))
                      endif
                 break
                 case vendor
                      if vendor$<>"" 
                         xwk=fnblank(7)
                      endif
                      if description$<>"" description$=description$(1,dw)
                      OutVect!.addItem(vendor$)
                      OutVect!.addItem(name$)
                      OutVect!.addItem(invoice$)
                      OutVect!.addItem(invdate$)
                      OutVect!.addItem(account$)
                      OutVect!.addItem(description$)
                      OutVect!.addItem(str(amount))
                 break
                 case default
                 break
          swend  
          lines=lines+1
          recs=recs+1

          rem --- Generate GL Recap

          if gl$="Y"
             account$=glm01a.gl_account$
             gosub update_gl
          endif

          rem --- Accumulate totals

          atotal=atotal+amount
          gtotal=gtotal+amount
          vtotal=vtotal+amount
          rtotal=rtotal+amount

          rem --- Initialize fields for the next record

          altseq$=""
          vendor$=""
          name$=""
          account$=""
          description$=""

          rem --- Loop back for next record
    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub type_break
    total$=Translate!.getTranslation("AON_TOTAL_FOR_REPORT")
    total=rtotal
    gosub print_total
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

rem --- Run next overlay

    if gl$<>"Y" goto std_exit
    overlay$=pgmdir$+"glr_accttotals.aon"
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit

print_total: rem --- Print subtotal/total

    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    if sequence$="D" 
        xwk=fnblank(3)
        OutVect!.addItem(total$)
        xwk=fnblank(2)
        OutVect!.addItem(str(total))
    else
        xwk=fnblank(5)
        OutVect!.addItem(total$)
        OutVect!.addItem(str(total))        
    endif
    
    return

type_break: rem --- AP type break

    if lasttype$<>"" then 
        if sequence$="D" then
            gosub account_break
        else 
            gosub vendor_break
        endif
    
        if multitypes
            total$=Translate!.getTranslation("AON_TOTAL_FOR_")+aptype$
            total=atotal
            gosub print_total
        endif
    endif
    
    if multitypes=0 or done then return

    dim apm10a$:fattr(apm10a$)
    apm10a.firm_id$=apt02a.firm_id$
    apm10a.record_id_a$="A"
    apm10a.ap_type$=apt02a.ap_type$
    apm10a.code_desc$=nf$
    k$=apm10a.firm_id$+apm10a.record_id_a$+apm10a.ap_type$
    find record (apm10_dev,key=k$,dom=*next) apm10a$
    aptype$=Translate!.getTranslation("AON_AP_TYPE_")+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1))) 
    HdrVect!.addItem(aptype$)
    lines=maxlines+1
    atotal=0
    lasttype$=apm10a.ap_type$
    return

account_break: rem --- GL account break

    if sequence$<>"D" or gl$<>"Y" then return

    if lastaccount$<>""
        gosub vendor_break
        total$=Translate!.getTranslation("AON_TOTAL_FOR_ACCOUNT_")+fnmask$(lastaccount$(1,acct_length),g0$)
        total=gtotal
        gosub print_total
    endif
    
    if !(done) then 
        gosub gl_account
        gtotal=0
    endif
    
    return

vendor_break: rem --- Vendor break

    if lastvendor$<>""
        gosub detail_break
        x$=lastvendor$(1,4)
        if x$<>"TEMP" then x$=fnmask$(lastvendor$(1,vendor_size),m0$)
        total$=Translate!.getTranslation("AON_TOTAL_FOR_VENDOR_")+x$
        total=vtotal
        gosub print_total
    endif
    
    if done then return
    dim apm01a$:fattr(apm01a$)
    apm01a.firm_id$=apt02a.firm_id$
    apm01a.vendor_id$=apt02a.vendor_id$
    apm01a.vendor_name$=nf$
    k$=apm01a.firm_id$+apm01a.vendor_id$
    find record (apm01_dev,key=k$,dom=*next) apm01a$
    vendor$=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
    name$=apm01a.vendor_name$
    altseq$=apm01a.alt_sequence$
    vtotal=0
    lastvendor$=apm01a.vendor_id$
    
    return

detail_break: rem --- Invoice type/reference (Invoice/Check) break

    if done then return
    invoice$=apt02a.reference$
    invdate$=fndate$(apt02a.accting_date$)
    lastdetail$=apt02a.invoice_type$+apt02a.reference$

    rem --- Read the Check History (apt-05) record

    invoice$="MC "+apt02a.reference$(1,7)
    if pos("TEMP"=apt02a.vendor_id$)<>1 return
    dim apt05a$:fattr(apt05a$)
    apt05a.firm_id$=apt02a.firm_id$
    apt05a.ap_type$=apt02a.ap_type$
    apt05a.check_no$=apt02a.reference$(1,7)
    apt05a.vendor_id$=apt02a.vendor_id$
    apt05a.vendor_name$=nf$
    apt05_key$=apt05a.firm_id$+apt05a.ap_type$+apt05a.check_no$+apt05a.vendor_id$
    read (apt05_dev,key=apt05_key$,dom=*next)
    k$=key(apt05_dev,end=*return)
    if pos(apt05_key$=k$)=1 read record (apt05_dev) apt05a$
    vendor$=apt05a.vendor_id$
    name$=apt05a.vendor_name$
    
    return

gl_account: rem --- Retrieve the GL account master

    dim glm01a$:fattr(glm01a$)
    glm01a.firm_id$=apt02a.firm_id$
    glm01a.gl_account$=apt02a.gl_account$
    glm01a.gl_acct_desc$=nf$
    k$=glm01a.firm_id$+glm01a.gl_account$
    find record (glm01_dev,key=k$,dom=*next) glm01a$
    account$=fnmask$(glm01a.gl_account$(1,acct_length),g0$)
    description$=glm01a.gl_acct_desc$
    lastaccount$=glm01a.gl_account$
    
    return

update_gl: rem --- Update GL summary

    if gl$<>"Y" or amount=0 then return

    dim glw04a$:fattr(glw04a$)
    glw04a.firm_id$=apt02a.firm_id$
    glw04a.gl_account$=account$
    k$=glw04a.firm_id$+glw04a.gl_account$
    extract record (glw04_dev,key=k$,dom=*next) glw04a$;rem Advisory Locking
    glw04a.gl_post_amt=glw04a.gl_post_amt+amount
    glw04a$=field(glw04a$)
    write record (glw04_dev) glw04a$
    
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
