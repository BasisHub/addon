rem --- Purchase Journal (Report Overlay)
rem --- Program apr_purchases v8.0.0 18Jan2007 (apr_ob)
rem --- Created by adx_codeport.bbx v1.1.5 (01/18/2007 08:11:06)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS";rem "aps-01
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[4]="apc_typecode";ids$[4]="APC_TYPECODE";rem "apm-10A
    files$[5]="apt-02",ids$[5]="APT_INVOICEDIST"
    files$[6]="apt-05",ids$[6]="APT_CHECKHISTORY"
    files$[8]="apw-14",ids$[8]="APW_PURCHASENAME"
    options$[8]="C"
    files$[9]="gls_params";ids$[9]="GLS_PARAMS";rem "gls-01
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    
    aps01_dev=channels[1]
    apm01_dev=channels[2]
    apm10_dev=channels[4]
    apt02_dev=channels[5]
    apt05_dev=channels[6]
    apw14_dev=channels[8]
    gls01_dev=channels[9]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm10a$:templates$[4],apt02a$:templates$[5]
    dim apt05a$:templates$[6],apw14a$:templates$[8]
    dim aps01a$:templates$[1],gls01a$:templates$[9]

rem --- Assign form input values to local variables

    period$=Option!.getOptionData("PERIOD")
    year$=Option!.getOptionData("YEAR")
    sequence$=Option!.getOptionData("REPORT_SEQUENCE")
    year=num(year$)
    period=num(period$)
    call pgmdir$+"adc_perioddates.aon",gls01_dev,period,year,begdate$,enddate$,status

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    call pgmdir$+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
    multitypes=aps01a.multi_types$="Y"
    m0=len(m0$)
    m1=len(m1$)
    call pgmdir$+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,acct_length
    call pgmdir$+"adc_getmask.aon","","GL","A","",g1$,0,0
    g0=len(g0$)
    headings=3
    if multitypes headings=4

rem --- Is General Ledger installed?

    gl$="N"
    application$="AP"
    call pgmdir$+"adc_application.aon",application$,info$[all]
    gl$=info$[9]
    if gl$="Y"
       application$="GL"
       call pgmdir$+"adc_application.aon",application$,info$[all]
       gl$=info$[20]
    endif
    if gl$="Y"
       m1$=gls01a.amount_mask$
       m1=len(m1$)
    endif

rem --- Initializations

    dim headings$[headings],underline$(m1,"-"),o[6],h[11]
    vm=max(m0,8)
    gm=max(g0,9)
    done=0
    page=0
    width=132
    report=0
    maxlines=59
    lines=maxlines+1
    more=1
    when$=sysinfo.system_date$
    clock$=""
    nf$="(Not on File)"
    lasttype$=""
    lastacct$=""
    lastvendor$=""
    lastdetail$=""
    altseq$=""
    vendor$=""
    name$=""
    account$=""
    description$=""
    ah$="Account"
    dh$="Description"
    if gl$<>"Y"
       ah$=""
       dh$=""
       gm=0
       g0=0
       width=80
    endif
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]="For Period "+str(period)+" From "+fndate$(begdate$)+" Through "+fndate$(enddate$)
    if sequence$="D"
       channel=apt02_dev 
       headings$[1]=headings$[1]+" By Distribution Account"
       keynum=1
    endif
    if sequence$="V" 
       channel=apt02_dev
       headings$[1]=headings$[1]+" By Vendor"
       keynum=0
    endif
    if sequence$="A"
       channel=apw14_dev
       headings$[1]=headings$[1]+" By Alternate Sequence"
    endif
    sorting=pos(sequence$="A")
    alternate=1
    distribution=2
    vendor=3
    headings$[3]="[HEADER]"

rem --- Column Headings

dim columns$[6,10]
    columns = 6
    if sequence$="D"
        columns$[0,0]=ah$,             columns$[0,1]="C",columns$[0,2]="10"
        columns$[1,0]=dh$,             columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]="Vendor",        columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]="Name",          columns$[3,1]="C",columns$[3,2]="25"
        columns$[4,0]="Inv/Chk",       columns$[4,1]="C",columns$[4,2]="10"
        columns$[5,0]="Date",          columns$[5,1]="C",columns$[5,2]="8"
        columns$[6,0]="Amount",        columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    endif
    if sequence$="V"
        columns$[0,0]="Vendor",        columns$[0,1]="C",columns$[0,2]="10"
        columns$[1,0]="Name",          columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]="Inv/Chk",       columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]="Date",          columns$[3,1]="C",columns$[3,2]="8"
        columns$[4,0]=ah$,             columns$[4,1]="C",columns$[4,2]="10"
        columns$[5,0]=dh$,             columns$[5,1]="C",columns$[5,2]="25"
        columns$[6,0]="Amount",        columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    endif
    if sequence$="A"
        columns$[0,0]="Alt Seq",       columns$[0,1]="C",columns$[0,2]="10"
        columns$[1,0]="Vendor",        columns$[1,1]="C",columns$[1,2]="25"
        columns$[2,0]="Inv/Chk",       columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]="Date",          columns$[3,1]="C",columns$[3,2]="8"
        columns$[4,0]=ah$,             columns$[4,1]="C",columns$[4,2]="10"
        columns$[5,0]=dh$,             columns$[5,1]="C",columns$[5,2]="25"
        columns$[6,0]="Amount",        columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    endif
    
rem --- Initialize print positions

    o[0]=0
    o[6]=width-m1
    o[1]=o[0]+gm+1
    o[2]=o[1]+36
    o[3]=o[2]+vm
    w=gm+3
    o[5]=o[6]-10
    o[4]=o[5]-14
    dw=min(30,o[4]-o[3]-1)
    if sequence$="V"
       o[1]=o[0]+vm
       o[2]=o[1]+31
       o[3]=o[2]+14
       w=max(3+vm,gm)
       o[4]=o[3]+9
       o[5]=o[4]+gm+1
       dw=min(35,o[6]-o[5]-1)
    endif
    if sequence$="A"
       o[1]=11
       o[2]=o[1]+vm+31
       o[3]=o[2]+14
       w=13
       o[4]=o[3]+9
       o[5]=o[4]+gm+1
       dw=min(35,o[6]-o[5]-1)
    endif

rem --- Additional file opens

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    if gl$="Y"
       files$[1]="glm-01",ids$[1]="GLM_ACCT"
       files$[2]="glw-04",ids$[2]="GLW_ACCTTOTALS"
       options$[2]="CL"
    endif
    if gl$="Y" call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                              ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    glw04_dev=channels[2]

rem --- Dimension string templates

    if gl$="Y" dim glm01a$:templates$[1],glw04a$:templates$[2]

rem --- Sort Invoice History (apt-02) by alternate sequence

    call pgmdir$+"adc_progress.aon","NC","","","","",0,apt02_dev,1,meter_num,status
    while sorting
          read (apt02_dev,key=firm_id$,dom=*next)

          rem --- Read next history record

          while more
                k$=key(apt02_dev,end=*break)
                if pos(firm_id$=k$)<>1 break
                read record (apt02_dev) apt02a$
                call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                if apt02a.accting_date$<begdate$ continue
                if apt02a.accting_date$>enddate$ continue

                rem --- Initialize and write sort record

                dim apm01a$:fattr(apm01a$),apw14a$:fattr(apw14a$)
                apm01a.firm_id$=apt02a.firm_id$
                apm01a.vendor_id$=apt02a.vendor_id$
                k$=apm01a.firm_id$+apm01a.vendor_id$
                find record (apm01_dev,key=k$,dom=*break) apm01a$
                apw14a.firm_id$=apt02a.firm_id$
                apw14a.ap_type$=apt02a.ap_type$
                apw14a.alt_sequence$=apm01a.alt_sequence$
                apw14a.vendor_id$=apt02a.vendor_id$
                apw14a.invoice_type$=apt02a.invoice_type$
                apw14a.reference$=apt02a.reference$
                apw14a.gl_account$=apt02a.gl_account$
                apw14a.accting_date$=apt02a.accting_date$
                apw14a$=field(apw14a$)
                k$=apw14a.firm_id$+apw14a.ap_type$+apw14a.alt_sequence$+
:                  apw14a.vendor_id$+apw14a.invoice_type$+apw14a.reference$+
:                  apw14a.gl_account$+apw14a.accting_date$
                write record (apw14_dev,key=k$) apw14a$
 
                rem --- Loop back for next invoice record

          wend

          rem --- Sorting completed

          sorting=0
          break
    wend  
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

rem --- Start progress meter and position the driver file

    sequence=pos(sequence$="ADV")
    call pgmdir$+"adc_progress.aon","NC","","","","",0,channel,1,meter_num,status
    read (apw14_dev,key=firm_id$,dom=*next)
    read (apt02_dev,key=firm_id$,knum=keynum,dom=*next)

rem --- Read next invoice history or sort record

    while more
          k$=key(channel,end=*break)
          if pos(firm_id$=k$)<>1 break
          if pos(sequence$="VD") read record (apt02_dev,key=k$) apt02a$
          if sequence$="A"
             read record (apw14_dev,key=k$) apw14a$
             apt02a.firm_id$=apw14a.firm_id$
             apt02a.ap_type$=apw14a.ap_type$
             apt02a.vendor_id$=apw14a.vendor_id$
             apt02a.invoice_type$=apw14a.invoice_type$
             apt02a.reference$=apw14a.reference$
             apt02a.gl_account$=apw14a.gl_account$
             apt02a.accting_date$=apw14a.accting_date$
          endif
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
          if pos(sequence$="A")
              k$=apt02a.firm_id$+apt02a.ap_type$+apt02a.vendor_id$+apt02a.invoice_type$+
:                apt02a.reference$+apt02a.gl_account$+apt02a.accting_date$
              find record (apt02_dev,key=k$,dom=*continue) apt02a$
          endif

          rem --- Is the record in the requested period?

          if apt02a.accting_date$<begdate$ continue
          if apt02a.accting_date$>enddate$ continue

          rem --- Level breaks

          detail$=apt02a.invoice_type$+apt02a.reference$
          if apt02a.ap_type$<>lasttype$ gosub type_break
          if apt02a.gl_account$<>lastaccount$ gosub account_break
          if apt02a.vendor_id$<>lastvendor$ gosub vendor_break
          if detail$<>lastdetail$ gosub detail_break

          rem --- Retrieve GL account description if necessary

          if sequence$<>"D"
:            if gl$<>"Y" account$="",
:                        description$=""
:                   else gosub gl_account

          rem --- Print detail line

          amount=apt02a.gl_post_amt
          switch sequence
                 case alternate
                      if vendor$<>"" 
                         xwk=fnblank(7)
                      endif
                      if description$<>"" description$=description$(1,dw)
                      name$=vendor$+" "+name$
                      vendor$=altseq$
                      OutVect!.addItem(vendor$)
                      OutVect!.addItem(name$)
                      OutVect!.addItem(invoice$)
                      OutVect!.addItem(invdate$)
                      OutVect!.addItem(account$)
                      OutVect!.addItem(description$)
                      OutVect!.addItem(str(amount))
                 break
                 case distribution
                      if account$<>"" or vendor$<>"" 
                         xwk=fnblank(7)
                         if name$<>"" name$=name$(1,dw)
                      OutVect!.addItem(account$)
                      OutVect!.addItem(description$)
                      OutVect!.addItem(vendor$)
                      OutVect!.addItem(name$)
                      OutVect!.addItem(invoice$)
                      OutVect!.addItem(invdate$)
                      OutVect!.addItem(str(amount))
                      endif
                 break
                 case vendor
                      if vendor$<>"" 
                         xwk=fnblank(7)
                      endif
                      if description$<>"" description$=description$(1,dw)
                      OutVect!.addItem(vendor$)
                      OutVect!.addItem(name$)
                      OutVect!.addItem(invoice$)
                      OutVect!.addItem(invdate$)
                      OutVect!.addItem(account$)
                      OutVect!.addItem(description$)
                      OutVect!.addItem(str(amount))
                 break
                 case default
                 break
          swend  
          lines=lines+1

          rem --- Generate GL Recap

          if gl$="Y"
             account$=glm01a.gl_account$
             gosub update_gl
          endif

          rem --- Accumulate totals

          atotal=atotal+amount
          gtotal=gtotal+amount
          vtotal=vtotal+amount
          rtotal=rtotal+amount

          rem --- Initialize fields for the next record

          altseq$=""
          vendor$=""
          name$=""
          account$=""
          description$=""

          rem --- Loop back for next record

    wend

rem --- All done

    done=1
    gosub type_break
    total$="Total For Report"
    total=rtotal
    gosub print_total
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

rem --- Run next overlay

    if gl$<>"Y" goto std_exit
    overlay$=pgmdir$+"glr_accttotals.aon"
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit

print_total: rem --- Print subtotal/total

    TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
    if sequence$="D" 
        xwk=fnblank(3)
        OutVect!.addItem(total$)
        xwk=fnblank(2)
        OutVect!.addItem(str(total))
    else
        xwk=fnblank(5)
        OutVect!.addItem(total$)
        OutVect!.addItem(str(total))        
    endif
    
    return

type_break: rem --- AP type break

    while lasttype$<>""
          if sequence$="D" gosub account_break
:                     else gosub vendor_break
          if multitypes
             total$="Total for "+aptype$
             total=atotal
             gosub print_total
          endif
          break
    wend
    if multitypes=0 return
    if done return
    dim apm10a$:fattr(apm10a$)
    apm10a.firm_id$=apt02a.firm_id$
    apm10a.record_id_a$="A"
    apm10a.ap_type$=apt02a.ap_type$
    apm10a.code_desc$=nf$
    k$=apm10a.firm_id$+apm10a.record_id_a$+apm10a.ap_type$
    find record (apm10_dev,key=k$,dom=*next) apm10a$
    aptype$="AP Type "+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1))) 
    HdrVect!.addItem(aptype$)
    lines=maxlines+1
    atotal=0
    lasttype$=apm10a.ap_type$
    return

account_break: rem --- GL account break

    if sequence$<>"D" return
    if gl$<>"Y" return
    while lastaccount$<>""
          gosub vendor_break
          total$="Total For Account "+fnmask$(lastaccount$(1,acct_length),g0$)
          total=gtotal
          gosub print_total
          break
    wend
    if done return
    gosub gl_account
    gtotal=0
    return

vendor_break: rem --- Vendor break

    while lastvendor$<>""
          gosub detail_break
          x$=lastvendor$(1,4)
          if x$<>"TEMP" x$=fnmask$(lastvendor$(1,vendor_size),m0$)
          total$="Total for Vendor "+x$
          total=vtotal
          gosub print_total
          break
    wend
    if done return
    dim apm01a$:fattr(apm01a$)
    apm01a.firm_id$=apt02a.firm_id$
    apm01a.vendor_id$=apt02a.vendor_id$
    apm01a.vendor_name$=nf$
    k$=apm01a.firm_id$+apm01a.vendor_id$
    find record (apm01_dev,key=k$,dom=*next) apm01a$
    vendor$=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
    name$=apm01a.vendor_name$
    altseq$=apm01a.alt_sequence$
    vtotal=0
    lastvendor$=apm01a.vendor_id$
    return

detail_break: rem --- Invoice type/reference (Invoice/Check) break

    if done return
    invoice$=apt02a.reference$
    invdate$=fndate$(apt02a.accting_date$)
    lastdetail$=apt02a.invoice_type$+apt02a.reference$

    rem --- Read the Check History (apt-05) record

    invoice$="MC "+apt02a.reference$(1,7)
    if pos("TEMP"=apt02a.vendor_id$)<>1 return
    dim apt05a$:fattr(apt05a$)
    apt05a.firm_id$=apt02a.firm_id$
    apt05a.ap_type$=apt02a.ap_type$
    apt05a.check_no$=apt02a.reference$(1,7)
    apt05a.vendor_id$=apt02a.vendor_id$
    apt05a.vendor_name$=nf$
    apt05_key$=apt05a.firm_id$+apt05a.ap_type$+apt05a.check_no$+apt05a.vendor_id$
    read (apt05_dev,key=apt05_key$,dom=*next)
    k$=key(apt05_dev,end=*return)
    if pos(apt05_key$=k$)=1 read record (apt05_dev) apt05a$
    vendor$=apt05a.vendor_id$
    name$=apt05a.vendor_name$
    return

gl_account: rem --- Retrieve the GL account master

    dim glm01a$:fattr(glm01a$)
    glm01a.firm_id$=apt02a.firm_id$
    glm01a.gl_account$=apt02a.gl_account$
    glm01a.gl_acct_desc$=nf$
    k$=glm01a.firm_id$+glm01a.gl_account$
    find record (glm01_dev,key=k$,dom=*next) glm01a$
    account$=fnmask$(glm01a.gl_account$(1,acct_length),g0$)
    description$=glm01a.gl_acct_desc$
    lastaccount$=glm01a.gl_account$
    return

update_gl: rem --- Update GL summary

    if gl$<>"Y" return
    if amount=0 return
    dim glw04a$:fattr(glw04a$)
    glw04a.firm_id$=apt02a.firm_id$
    glw04a.gl_account$=account$
    k$=glw04a.firm_id$+glw04a.gl_account$
    find record (glw04_dev,key=k$,dom=*next) glw04a$
    glw04a.gl_post_amt=glw04a.gl_post_amt+amount
    glw04a$=field(glw04a$)
    write record (glw04_dev,key=k$) glw04a$
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
