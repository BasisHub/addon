rem --- Period-End Update
rem --- Program apu_period_end v8.0.0 15Oct2007 (apu_da)
rem --- Created by adx_codeport.bbx v1.1.5 (10/15/2007 09:40:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error
    
rem --- Use statements

    use ::ado_func.src::func

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="apm-02",ids$[2]="APM_VENDHIST"
    files$[3]="apt-01",ids$[3]="APT_INVOICEHDR"
    files$[4]="apt-02",ids$[4]="APT_INVOICEDIST"
    files$[5]="apt-11",ids$[5]="APT_INVOICEDET"
    files$[6]="gls_params",ids$[6]="GLS_PARAMS"
    options$[2]="L",options$[3]="L",options$[5]="L"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_update
    aps01_dev=channels[1]
    apm02_dev=channels[2]
    apt01_dev=channels[3]
    apt02_dev=channels[4]
    apt11_dev=channels[5]
    gls01_dev=channels[6]

rem --- Dimension string templates

    dim aps01a$:templates$[1],apm02a$:templates$[2],apt01a$:templates$[3],
:       apt02a$:templates$[4],apt11a$:templates$[5],gls01a$:templates$[6]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    current_period=num(aps01a.current_per$)
    current_year=num(aps01a.current_year$)
    call pgmdir$+"adc_perioddates.aon",gls01_dev,current_period,current_year,begdate$,
:       enddate$,status
    p9$=enddate$

initializations: rem --- Initializations

    dim t[2]
    p9=num(aps01a.current_per$)
    more=1

rem --- Get user approval to proceed

    msg_id$="CLOSE_PERIOD"
    dim msg_tokens$[2]
    msg_tokens$[0]=str(current_period)
    msg_tokens$[1]=func.formatDate(begdate$)
    msg_tokens$[2]=func.formatDate(enddate$)
    gosub disp_message
    if msg_opt$="N" goto std_exit_no_update

rem --- Init Invoice Read

    if aps01a.hold_zero$="Y" goto roll_totals
    read (apt01_dev,key=firm_id$,dom=*next)
    call pgmdir$+"adc_progress.aon","NC","","","","",0,apt01_dev,1,meter_num,status

rem --- Invoice Read

    while more
        read record(apt01_dev,end=roll_totals)apt01a$
        if firm_id$<>apt01a.firm_id$ exitto roll_totals
        if apt01a.sequence_00$<>"00" gosub remove_invoice; continue
        if apt01a.invoice_date$>p9$ or apt01a.accting_date$>p9$ continue
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

    rem --- Init Totals

        dim t[2]
    rem o9=0; rem remove zero balance invoices
        o9=1; rem keep zero balance invoices

    rem --- Find Totals

        t[0]=t[0]+apt01a.invoice_amt
        t[1]=t[1]+apt01a.discount_amt
        t[2]=t[2]+apt01a.retension

    rem --- Invoice Detail

        read (apt11_dev,key=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$,dom=*next)
        can_delete$="Y"
        while more
            read record (apt11_dev,end=*break) apt11a$
            if apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$<>
:               apt11a.firm_id$+apt11a.ap_type$+apt11a.vendor_id$+apt11a.ap_inv_no$ break
            if apt11a.trans_type$=" " continue
            if apt11a.trans_date$>p9$ can_delete$="N"; break
            if pos(apt11a.trans_type$="CMR") can_delete$="N"; break; rem "Can't remove yet because there are outstanding checks
            t[0]=t[0]+apt11a.trans_amt
            t[1]=t[1]+apt11a.trans_disc
            t[2]=t[2]+apt11a.trans_ret
        wend
        if can_delete$="N" continue

    rem --- Keep or Remove

        if t[0]<>0 or t[2]<>0 continue
        if o9=0 gosub remove_invoice

    rem --- Next Invoice

    wend

roll_totals: rem --- Roll Over Totals at Fiscal Year-End

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    if p9<>num(gls01a.total_pers$) goto done
    read record (apm02_dev,key=firm_id$,dom=*next) apm02a$
    call pgmdir$+"adc_progress.aon","NC","","","","",0,apm02_dev,1,meter_num,status

rem --- Main Vendor Read

    while more
        apm02_key$=key(apm02_dev,end=done)
        if apm02_key$(1,2)<>firm_id$ goto done
        read record (apm02_dev) apm02a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        apm02a.pyr_purch    = apm02a.ytd_purch
        apm02a.ytd_purch    = apm02a.nyr_purch
        apm02a.nyr_purch    = 0
        apm02a.pri_yr_discs = apm02a.ytd_discs
        apm02a.ytd_discs    = apm02a.nyr_disc
        apm02a.nyr_disc     = 0
        apm02a.pyr_payments = apm02a.ytd_payments
        apm02a.ytd_payments = apm02a.nyr_payments
        apm02a.nyr_payments = 0
        write record (apm02_dev,key=k0$) apm02a$
    wend

done: rem --- Increment Period

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    if p9<=num(aps01a.current_per$) 
        extract record (aps01_dev,key=firm_id$+"AP00",dom=*next) aps01a$
        aps01a.current_per$=str(num(aps01a.current_per$)+1:"00")
        if num(aps01a.current_per$)>num(gls01a.total_pers$) 
            aps01a.current_per$="01"
            aps01a.current_year$=str(num(aps01a.current_year$)+1:"0000")
        endif
        write record (aps01_dev,key=firm_id$+"AP00") aps01a$
    endif    
    goto std_exit

remove_invoice: rem --- Remove Invoice

    read (apt11_dev,key=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$,dom=*next)
    while more
        read record(apt11_dev,end=*break)apt11a$
        if apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$<>
:           apt11a.firm_id$+apt11a.ap_type$+apt11a.vendor_id$+apt11a.ap_inv_no$ break
        remove (apt11_dev,key=apt11a.firm_id$+apt11a.ap_type$+apt11a.vendor_id$+apt11a.ap_inv_no$)
    wend

    remove (apt01_dev,key=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$+apt01a.sequence_00$,dom=*next)
    read (apt02_dev,key=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+"I"+apt01a.ap_inv_no$,dom=*next)
    while more
        read record(apt02_dev,end=*break)apt02a$
        if apt02a.firm_id$+apt02a.ap_type$+apt02a.vendor_id$+apt02a.invoice_type$+apt02a.ap_inv_no$<>
:           apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+"I"+apt01a.ap_inv_no$ break
        remove (apt02_dev,key=apt02a.firm_id$+apt02a.ap_type$+apt02a.vendor_id$+apt02a.invoice_type$+apt02a.ap_inv_no$)
    wend

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
