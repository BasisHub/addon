rem --- Aging Report (Report Overlay)
rem --- Program apr_cashrequire v8.0.0 01Feb2007 (apr_cb)
rem --- Created by adx_codeport.bbx v1.1.5 (02/01/2007 01:10:36)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)

rem --- Open/Lock files

    files=8,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS";rem "aps-01A
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[4]="apc_typecode",ids$[4]="APC_TYPECODE"; rem apm-10A
    files$[5]="apt-01",ids$[5]="APT_INVOICEHDR"
    files$[6]="apt-11",ids$[6]="APT_INVOICEDET"
    files$[7]="apw-02",ids$[7]="APW_INVOICENAME"
    options$[7]="C"
    files$[8]="gls_params",ids$[8]="GLS_PARAMS";rem "gls-01
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01_dev=channels[1]
    apm01_dev=channels[2]
    apm10_dev=channels[4] ; rem TYPE CODE only
    apt01_dev=channels[5]
    apt11_dev=channels[6]
    apw02_dev=channels[7]
    gls01_dev=channels[8]

rem --- Dimension string templates

    dim apm01a$:templates$[2],apm10a$:templates$[4],
:       apt01a$:templates$[5],apt11a$:templates$[6],apw02a$:templates$[7],
:       aps01a$:templates$[1],gls01a$:templates$[8]

rem --- Assign form input values to local variables

    agingdate$=Option!.getOptionData("AGING_DATE")
    option$=Option!.getOptionData("REPORT_OPTION")
    future$=Option!.getOptionData("PICK_CHECK")
    sequence$=Option!.getOptionData("REPORT_SEQUENCE")
    level$=Option!.getOptionData("REPORT_SUMM_DET")
    method$=Option!.getOptionData("REPORT_TYPE")
    days$=Option!.getOptionData("PICK_INTEGER")
    discount$=Option!.getOptionData("INCLUDE_DISC")
    export_format$=Option!.getOptionData("EXPORT_FORMAT")
    rd_alias_id$=Option!.getAlias()    
    
    if export_format$="Y" then
        if len(rd_alias_id$)>15 then rd_alias_id$=rd_alias_id$(1,15)
        rd_alias_id$=rd_alias_id$+"X"
    endif
    
    days=num(days$,err=*next)
    method=pos(method$="PD")
    sorting=sequence$="A"
    detail=level$="D"
    summary=level$="S"
    include=future$="Y"
    discounts=discounts$="Y"

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","A","",m1$,0,0
    multitypes=aps01a.multi_types$="Y"
    retention=aps01a.ret_flag$="Y"
    apperiod=num(aps01a.current_per$)
    m0=len(m0$)
    m1=len(m1$)
    periodend$=""
    maxperiods=num(gls01a.total_pers$)
    
    for x=1 to maxperiods
        periodend$=periodend$+field(gls01a$,"per_ending_"+str(x:"00"))
    next x

rem --- Initializations

    dim headings$[8],o[12]
    dim pt[4],pr[4],rt[4],rr[4],at[4],ar[4],vt[4],vr[4],it[2]

    typebreak_flag = 0; rem -- Flag for  typebreak  

    done=0
    page=0
    width=132
    offset=1
    headings=6
    maxlines=59
    lines=maxlines+1
    moreheaders=1
    moredetail=1
    byperiod=1
    bydays=2
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    m5$="###-###-####"
    lasttype$=""
    lastvendor$=""
    clock$=""
    when$=sysinfo.system_date$
    total_recs=0
    
    header2$=Translate!.getTranslation("AON_ALL_ACTIVITY_BASED_ON_")
    if option$="I" header2$=header2$+Translate!.getTranslation("AON_INVOICE_DATE")
    if option$="D" header2$=header2$+Translate!.getTranslation("AON_DUE_DATE")
    if option$="A" header2$=header2$+Translate!.getTranslation("AON_ACCOUNTING_DATE")
    if detail header1$=Translate!.getTranslation("AON_DETAIL_")+sysinfo.task_desc$
    if summary header1$=Translate!.getTranslation("AON_SUMMARY_")+sysinfo.task_desc$
    if detail and discounts header2$=header2$+Translate!.getTranslation("AON__WITH_DISCOUNTS")
    headings$[0]=sysinfo.firm_name$
    headings$[2]=header2$
    
    if multitypes
       headings=7
       offset=2
    endif
    
    if sequence$="V"
       channel=apt01_dev
       channel_name$="APT_INVOICEHDR"
       headings$[1]=header1$+Translate!.getTranslation("AON__BY_VENDOR_NUMBER")
    endif
    
    if sequence$="A" 
       channel=apw02_dev
       channel_name$="APW_INVOICENAME"
       headings$[1]=header1$+Translate!.getTranslation("AON__BY_ALTERNATE_SEQUENCE")
    endif
    
    if multitypes then headings$[3]="[HEADER]"

rem --- Determine period beginning and ending dates based on the aging method selected

    switch method

        rem --- By period

        case byperiod

            rem --- Determine which period the aging date falls into

            year=num(agingdate$(1,4))
            mmdd$=agingdate$(5,4)
            
            for x=1 to maxperiods
                period=x
                if mmdd$>periodend$((x*4)-3,4) continue
                if x=1 if mmdd$>periodend$((maxperiods*4)-3,4) break
                if x>1 if mmdd$>periodend$(((x-1)*4)-3,4) break
                if x=1 if periodend$((x*4)-3,4)<periodend$(maxperiods*4-3,4) break
                if x>1 if periodend$((x*4)-3,4)<periodend$((x-1)*4-3,4) break
            next x

            rem --- Get current period beginning and ending dates

            if agingdate$(5,2)<periodend$(1,2) year=year-1
            call pgmdir$+"adc_perioddates.aon",gls01_dev,period,year,begperiod$,endperiod$,status
            begdates$=begperiod$
            enddates$=endperiod$

            rem --- Calculate prior period beginning and ending dates

            base=period
            base_yr=year
            
            for x=1 to 3
                period=base-x
                
                if period<1
                   period=maxperiods+period
                   year=base_yr-1
                endif
                
                call pgmdir$+"adc_perioddates.aon",gls01_dev,period,year,begperiod$,endperiod$,status
                begdates$=begdates$+begperiod$
                enddates$=enddates$+endperiod$
            next x
            
        break

        rem --- By days

        case bydays
            begdates$=""
            enddates$=""
                        
                        rem setup the asked for report date as the date to start the count back with (plus the increment)       
                        thisdate=jul(num(agingdate$(1,4)),num(agingdate$(5,2)),num(agingdate$(7,2))) + 1

                        rem build the end & start date strings from curr to previous dates
                        for x=0 to 3
                                enddate$=date(thisdate-1,"%Y%Mz%Dz")
                                rem count back # days specified in the entry screen
                                thisdate=thisdate-days
                                rem this gets us the start date for this period
                                begdate$=date(thisdate,"%Y%Mz%Dz")
                                enddates$=enddates$+enddate$
                                begdates$=begdates$+begdate$    
            next x
                                

            
        break

        case default
        break

    swend

rem --- Headings and print positions

    dim date1b$(8),date1e$(8),date2b$(8),date2e$(8),date3b$(8),date3e$(8),date4e$(8)
    dim date1$(24),date2$(24),date3$(24),date4$(24)
    dim head2$(10),head3$(10),head4$(10),head5$(10),head6$(10)

    date1b$ = fndate$(begdates$(1,8))
    date1e$ = fndate$(enddates$(1,8))
    date2b$ = fndate$(begdates$(9,8))
    date2e$ = fndate$(enddates$(9,8))
    date3b$ = fndate$(begdates$(17,8))
    date3e$ = fndate$(enddates$(17,8))
    date4e$ = fndate$(enddates$(25,8))

    date1$ = date1b$ + "-^" + date1e$
    date2$ = date2b$ + "-^" + date2e$
    date3$ = date3b$ + "-^" + date3e$
    date4$ = Translate!.getTranslation("AON_FIRST_-^") + date4e$
 
    if detail then
        head2$=Translate!.getTranslation("AON_REFERENCE")
        head3$=Translate!.getTranslation("AON_INVOICE")
        head4$=Translate!.getTranslation("AON_AGING_DATE")
        head5$="PG"
        head6$="H"
    endif

    if export_format$="Y" then
        if detail then
            columns=14
        else
            columns=9
        endif
        
        dim columns$[columns,10]
        columns$[0,0]=Translate!.getTranslation("AON_VENDOR_ID"),          columns$[0,1]="C",columns$[0,2]="8"
        columns$[1,0]=Translate!.getTranslation("AON_NAME"),               columns$[1,1]="C",columns$[1,2]="20"
        columns$[2,0]=Translate!.getTranslation("AON_PHONE"),              columns$[2,1]="C",columns$[2,2]="10"        
        columns$[3,0]=Translate!.getTranslation("AON_ALT_SEQ"),            columns$[3,1]="C",columns$[3,2]="10"        
    else
        if detail then
            columns=12
        else
            columns=7
        endif
        dim columns$[columns,10]
        columns$[0,0]=Translate!.getTranslation("AON_VENDOR_ID^NAME"),          columns$[0,1]="C",columns$[0,2]="20"
        columns$[1,0]=Translate!.getTranslation("AON_ALT_SEQ^PHONE"),           columns$[1,1]="C",columns$[1,2]="10"
    endif

    if summary=0
        columns$[columns-10,0]=head2$,  columns$[columns-10,1]="C", columns$[columns-10,2]="8"
        columns$[columns-9,0]=head3$,   columns$[columns-9,1]="C",  columns$[columns-9,2]="8"
        columns$[columns-8,0]=head4$,   columns$[columns-8,1]="C",  columns$[columns-8,2]="8"
        columns$[columns-7,0]=head5$,   columns$[columns-7,1]="C",  columns$[columns-7,2]="3"
        columns$[columns-6,0]=head6$,   columns$[columns-6,1]="C",  columns$[columns-6,2]="3"
    endif
    
    columns$[columns-5,0]=Translate!.getTranslation("AON_FUTURE"), columns$[columns-5,1]="N",  columns$[columns-5,2]=str(m1-3), columns$[columns-5,3]=m1$, columns$[columns-5,10]="T"
    columns$[columns-4,0]=date1$,   columns$[columns-4,1]="N",  columns$[columns-4,2]=str(m1-3), columns$[columns-4,3]=m1$, columns$[columns-4,10]="T"
    columns$[columns-3,0]=date2$,   columns$[columns-3,1]="N",  columns$[columns-3,2]=str(m1-3), columns$[columns-3,3]=m1$, columns$[columns-3,10]="T"
    columns$[columns-2,0]=date3$,   columns$[columns-2,1]="N",  columns$[columns-2,2]=str(m1-3), columns$[columns-2,3]=m1$, columns$[columns-2,10]="T"
    columns$[columns-1,0]=date4$,   columns$[columns-1,1]="N",  columns$[columns-1,2]=str(m1-3), columns$[columns-1,3]=m1$, columns$[columns-1,10]="T"
    columns$[columns,0]=Translate!.getTranslation("AON_TOTAL"),    columns$[columns,1]="N",    columns$[columns,2]=str(m1-3),   columns$[columns,3]=m1$,   columns$[columns,10]="T"

rem --- Define print positions

    o[12]=width-m1
    o[0]=0
    o[1]=o[0]+m0+1
    
    for x=11 to 7 step -1
        o[x]=o[x+1]-m1
    next x
    
    if summary
       for x=2 to 6
           o[x]=o[7]
       next x
       
       if sequence$="A"
          o[1]=o[0]+m0+12
       endif
       
       w=o[7]-1
    endif
    
    if detail
       o[6]=o[7]-2
       o[5]=o[6]-3
       o[4]=o[5]-9
       o[3]=o[4]-11
       o[2]=o[3]-11
       o[1]=11
       w=o[3]-1
    endif

rem --- Initialize remaining report headings

    dim header1$(width),header2$(width)
    retention$=Translate!.getTranslation("AON_RETENTION")
    if summary headings=headings+1
    
rem --- Sort Invoice Headers (apt-01) by vendor alternate sequence

    if sorting then 

        read (apt01_dev,key=firm_id$,dom=*next)
        call pgmdir$+"adc_progress.aon","NC","APT_INVOICEHDR",Translate!.getTranslation("AON_SORTING"),"","",0,apt01_dev,1,meter_num,status
        
        rem --- Read next invoice record

        while moreheaders
        
            k$=key(apt01_dev,end=*break)
            if pos(firm_id$=k$)<>1 then break
            
            read record (apt01_dev) apt01a$
            total_recs=total_recs+1
            if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

            rem --- Retrieve vendor master record if necessary

            if pos("TEMP"=apt01a.vendor_id$)=1
               lastvendor$=apt01a.vendor_id$
               apm01a.alt_sequence$=apt01a.vendor_id$
            endif
            
            if lastvendor$<>apt01a.vendor_id$
               dim apm01a$:fattr(apm01a$)
               lastvendor$=apt01a.vendor_id$
               apm01a.firm_id$=apt01a.firm_id$
               apm01a.vendor_id$=apt01a.vendor_id$
               k$=apm01a.firm_id$+apm01a.vendor_id$
               find record (apm01_dev,key=k$,dom=*next) apm01a$
            endif

            rem --- Write sort record

            dim apw02a$:fattr(apw02a$)
            apw02a.firm_id$=apt01a.firm_id$
            apw02a.ap_type$=apt01a.ap_type$
            apw02a.alt_sequence$=apm01a.alt_sequence$
            apw02a.vendor_id$=apt01a.vendor_id$
            apw02a.ap_inv_no$=apt01a.ap_inv_no$
            apw02a.sequence_00$=apt01a.sequence_00$
            k$=apw02a.firm_id$+apw02a.ap_type$+apw02a.alt_sequence$+apw02a.vendor_id$+
:               apw02a.ap_inv_no$+apw02a.sequence_00$
            write record (apw02_dev) apw02a$

           rem --- Loop back for next record

        wend

        rem --- Sorting completed

        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
        wait 1; rem --- gives first progress meter a chance to clear; less confusing to the eye
    endif

rem --- Start progress meter and position driver file

    lastvendor$=""
    total_recs=0
    call pgmdir$+"adc_progress.aon","NC",channel_name$,"","","",0,channel,1,meter_num,status
    read (channel,key=firm_id$,dom=*next)

rem --- Read next Invoice Header (apt-01) record
  
    while moreheaders
        k$=key(channel,end=*break)
        if pos(firm_id$=k$)<>1 then break
        
        if sequence$="A"
            read record (apw02_dev,key=k$) apw02a$
            apt01a.firm_id$=apw02a.firm_id$
            apt01a.ap_type$=apw02a.ap_type$
            apt01a.vendor_id$=apw02a.vendor_id$
            apt01a.ap_inv_no$=apw02a.ap_inv_no$
            apt01a.sequence_00$=apw02a.sequence_00$
            k$=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$
        endif
        
        read record (apt01_dev,key=k$,dom=*continue) apt01a$
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        
        rem --- Level breaks

        if apt01a.ap_type$<>lasttype$ then gosub type_break
        if apt01a.vendor_id$<>lastvendor$ then gosub vendor_break

        rem --- Initializations for this invoice

        dim it[2]
        it[0]=apt01a.invoice_amt
        it[1]=apt01a.discount_amt
        it[2]=apt01a.retention
        future=apt01a.invoice_amt
        invoice$=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+apt01a.ap_inv_no$

        rem --- Position Invoice Detail (apt-11) file

        read (apt11_dev,key=invoice$,dom=*next)

        rem --- Calculate invoice totals by including any detail transactions

        while moredetail
            k$=key(apt11_dev,end=*break)
            if pos(invoice$=k$)<>1 then break
            
            read record (apt11_dev) apt11a$
            if cvs(apt11a.trans_type$,2)="" then continue
            if include=0 and apt11a.trans_date$>agingdate$ then continue

            it[0]=it[0]+apt11a.trans_amt
            it[1]=it[1]+apt11a.trans_disc
            it[2]=it[2]+apt11a.trans_ret
        wend

        rem --- Assign the chosen date for aging purposes

        if option$="I" then dateused$=apt01a.invoice_date$
        if option$="A" then dateused$=apt01a.accting_date$
        
        if option$="D" then
            dateused$=apt01a.inv_due_date$
            
            if discounts and apt01a.disc_date$>=agingdate$ and apt01a.disc_date$<>apt01a.invoice_date$ then 
                dateused$=apt01a.disc_date$
                it[0]=it[0]-it[1]
            endif
            
        endif

        rem --- Age this invoice

        if include=0 and dateused$>agingdate$
            if it[0]=future or detail then continue
            it[0]=it[0]-future
        endif

        rem --- No reason to continue if it's a zero balance invoice

        if it[0]=0 then continue

        rem --- Age this invoice

        printed=printed+1
        period=pos(dateused$>enddates$,8)

                rem --- if the dateused is not greater than any of the end dates, put to first

        if period=0 then period=4 else period=int(period/8)

        rem --- Accumulate totals

        vt[period]=vt[period]+it[0]
        at[period]=at[period]+it[0]
        rt[period]=rt[period]+it[0]
        ar[period]=ar[period]+it[2]
        rr[period]=rr[period]+it[2]

        rem --- Print invoice if this is a detail report

        if summary then continue

        if export_format$="Y"
            OutVect!.addItem(apm01a.vendor_id$)
            OutVect!.addItem(apm01a.vendor_name$)
            OutVect!.addItem(phone$)
            OutVect!.addItem(apm01a.alt_sequence$)
        else
            if vendor$<>""
                xwk = fnblank(columns+1)
                OutVect!.addItem(apm01a.vendor_id$)
                OutVect!.addItem(apm01a.alt_sequence$)
                xwk=fnblank(columns-1)
                OutVect!.addItem(apm01a.vendor_name$)
                OutVect!.addItem(phone$)
                lines=lines+2
                vendor$=""
            else
                xwk=fnblank(2)
            endif
        endif

        OutVect!.addItem(apt01a.reference$)
        OutVect!.addItem(apt01a.ap_inv_no$)
        OutVect!.addItem(fndate$(dateused$))
        OutVect!.addItem(apt01a.payment_grp$)
        OutVect!.addItem(apt01a.hold_flag$)
        
        for x=0 to 4
            if x=period
                OutVect!.addItem(str(it[0]))
            else
                OutVect!.addItem("")
            endif
        next x
        
        OutVect!.addItem(str(it[0]))

        lines=lines+1

        rem --- Loop back for next record

    wend

rem --- All done

    done=1
    gosub type_break
    total$=Translate!.getTranslation("AON_TOTALS_FOR_REPORT")
    
    for x=0 to 4
        pt[x]=rt[x]
        pr[x]=rr[x]
    next x
    
    gosub print_total
    goto std_exit

print_total: rem --- Print totals

    if export_format$="Y" then return
    totamt=0
    totret=0
    
    for x=0 to 4
        totamt=totamt+pt[x]
        totret=totret+pr[x]
    next x

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(total$)
   
	if summary
        xwk=fnblank(9)
    else
        xwk=fnblank(6)
    endif    
   
    OutVect!.addItem(str(pt[0]))
    OutVect!.addItem(str(pt[1]))
    OutVect!.addItem(str(pt[2]))
    OutVect!.addItem(str(pt[3]))
    OutVect!.addItem(str(pt[4]))
    OutVect!.addItem(str(totamt))

    lines=lines+(2+retention)
    return

type_break: rem --- AP Type break

    if lasttype$<>"" then 
        gosub vendor_break
        
        if multitypes
            total$=Translate!.getTranslation("AON_TOTALS_FOR_")+aptype$
            typebreak_flag = 1
            
            for x=0 to 4
                pt[x]=at[x]
                pr[x]=ar[x]
            next x
            
            gosub print_total
        endif
        
    endif   
    
    if multitypes and !(done) then 
        dim apm10a$:fattr(apm10a$),at[4],ar[4]
        apm10a.firm_id$=apt01a.firm_id$
        apm10a.record_id_a$="A"
        apm10a.ap_type$=apt01a.ap_type$
        apm10a.code_desc$=nf$
        
        k$=apm10a.firm_id$+apm10a.record_id_a$+apm10a.ap_type$
        find record (apm10_dev,key=k$,dom=*next) apm10a$
        lasttype$=apm10a.ap_type$
        
        aptype$=Translate!.getTranslation("AON_AP_TYPE_")+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        HdrVect!.addItem(aptype$)
        lines=maxlines+1
    endif
    
    return

vendor_break: rem --- Vendor break

    if lastvendor$<>"" then
    
        if detail and printed>=1 then 
            total$=Translate!.getTranslation("AON_TOTALS_FOR_VENDOR_")+vendorid$
            typebreak_flag = 0
            
            for x=0 to 4
                pt[x]=vt[x]
                pr[x]=vr[x]
            next x
            
            flag=retention
            retention=0
            gosub print_total
            retention=flag
        endif
        
        if summary and export_format$<>"Y" and printed
            totamt=0
            
            for x=0 to 4
                totamt=totamt+vt[x]
            next x

            xwk = fnblank(columns+1)
            OutVect!.addItem(apm01a.vendor_id$)
            OutVect!.addItem(apm01a.alt_sequence$)
            xwk=fnblank(columns-1)
            OutVect!.addItem(apm01a.vendor_name$)
            OutVect!.addItem(phone$)

            OutVect!.addItem(str(vt[0]))
            OutVect!.addItem(str(vt[1]))
            OutVect!.addItem(str(vt[2]))
            OutVect!.addItem(str(vt[3]))
            OutVect!.addItem(str(vt[4]))
            OutVect!.addItem(str(totamt))

            lines=lines+2
        endif

        if summary and export_format$="Y" and printed
            totamt=0
            
            for x=0 to 4
                totamt=totamt+vt[x]
            next x

            OutVect!.addItem(apm01a.vendor_id$)
            OutVect!.addItem(apm01a.vendor_name$)
            OutVect!.addItem(phone$)
            OutVect!.addItem(apm01a.alt_sequence$)
            OutVect!.addItem(str(vt[0]))
            OutVect!.addItem(str(vt[1]))
            OutVect!.addItem(str(vt[2]))
            OutVect!.addItem(str(vt[3]))
            OutVect!.addItem(str(vt[4]))
            OutVect!.addItem(str(totamt))

            lines=lines+1
        endif
    endif   
    
    if !(done) then 
        dim vt[4],vr[4]
        lastvendor$=apt01a.vendor_id$
        altseq$=""
        printed=0
        
        dim apm01a$:fattr(apm01a$)
        apm01a.firm_id$=apt01a.firm_id$
        apm01a.vendor_id$=apt01a.vendor_id$
        apm01a.vendor_name$=nf$
        
        k$=apm01a.firm_id$+apm01a.vendor_id$
        find record (apm01_dev,key=k$,dom=*proceed) apm01a$
        
        if sequence$="A"
           altseq$=apm01a.alt_sequence$+" "
        endif
        
        call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(apm01a.phone_no$,2),"",phone_mask$
        phone$=cvs(apm01a.phone_no$,2)
        phone$=str(phone$:phone_mask$,err=*next)
        
        vendorid$=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
        vendor$=altseq$+vendorid$+" "+apm01a.vendor_name$
    endif
    
    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call stbl("+DIR_SYP")+"bac_noparams.bbj",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    close(apw02_dev);rem avoid potential err 0 (on lock before clear) if another pgm using this work file gets run
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
