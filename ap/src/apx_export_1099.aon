rem --- Export Year-end 1099s to txt for 3rd party print product
rem --- Program apx_export_1099_1 v8.0.0 13Oct2007 (apx_ya)
rem --- Created by adx_codeport.bbx v1.1.5 (10/13/2007 08:39:22)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="apm-02",ids$[3]="APM_VENDHIST"
    files$[4]="aps_report",ids$[4]="APS_REPORT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_update
    aps01_dev=channels[1]
    apm01_dev=channels[2]
    apm02_dev=channels[3]
    aps_report_dev=channels[4]

rem --- Dimension string templates

    dim aps01a$:templates$[1],apm01a$:templates$[2],apm02a$:templates$[3]
    dim aps01b$:templates$[4]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    aps01b_key$=firm_id$+"AP02"
    find record (aps_report_dev,key=aps01b_key$,err=std_missing_params) aps01b$

rem --- Get Option Data

    minimum=num(option!.getOptionData("MINIMUM_AMT"))

rem --- Parameters

    appath$=stbl("+APDATA")
    if appath$(len(appath$))<>"/" appath$=appath$+"/"
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size

rem --- Init Data

    more=1
    dim msgs$[5],msg_tokens$[3]
    m1$="#######.00-"
    phonem$="XXX-XXX-XXXX"
    ten99file$="ap1099data"+firm_id$+".txt"
    clientfile$="apclient"+firm_id$+".txt"
    sysyear$=aps01a.cur_1099_yr$
    gosub init_client; rem "Initialize export variables

rem --- Display file information

    while more
        msg_id$="1099_EXPORT_NOTE"
        msg_tokens$[1]=firm_id$
        msg_tokens$[2]=appath$+clientfile$
        msg_tokens$[3]=appath$+ten99file$
        gosub disp_message
        if msg_opt$="N" exitto std_exit_no_update
        if msg_opt$="Y" break
    wend    

rem --- Check for company phone number

    if num(aps01b.phone_no$,err=*next) goto start_export
    msgs$[0]="Company Phone Number is required on 1099-MISC after 1996."
    msgs$[1]="Use AP's Report Parameter Maintenance to enter the number."
    msgs$[2]="              <Enter> to Continue"
    call pgmdir$+"adc_stdmessage.aon",2,msgs$[all],2,-1,-1,v$,v3
    goto std_exit_no_update

start_export:


rem --- Initialize the text export files

    erase appath$+ten99file$,err=*next
    erase appath$+clientfile$,err=*next; rem "'Client' equates to Employer
    string appath$+ten99file$
    string appath$+clientfile$
    ten99_dev=unt
    open (ten99_dev,isz=-1,err=open_error)appath$+ten99file$
    client_dev=unt
    open (client_dev,isz=-1,err=open_error)appath$+clientfile$
    goto fix_fed

open_error: rem --- Error on open of text files

    msgs$[0]="Unable to create text files in the data directory listed for"
    msgs$[1]="the AP system in the 'Application Description Maintenance' task."
    msgs$[2]=""
    msgs$[3]="Modify the 'Data Path' field for the AP system description record"
    msgs$[4]="or adjust the permissions on the directory listed."
    call pgmdir$+"adc_stdmessage.aon",0,msgs$[all],4,-1,-1,v$,v3
    goto std_exit_no_update

fix_fed: rem --- Fix Up Fed ID Number (Strip out all but the 9 digits)

    tin_type$="EIN"
    taxpayer_id$=""
    for i=1 to len(aps01b.federal_id$)
        if aps01b.federal_id$(i,1)>="0" and aps01b.federal_id$(i,1)<="9" taxpayer_id$=taxpayer_id$+aps01b.federal_id$(i,1)
    next i
    taxpayer_id$=pad(taxpayer_id$,9)

rem --- Client (ie Employer) data

    client_id$=fndequote$(sysyear$+"AP"+firm_id$)
    name1$=fndequote$(aps01b.name$)
    if cvs(aps01b.phone_no$,2)<>"" phone$=str(cvs(aps01b.phone_no$,2):phonem$)
    address1$=fndequote$(aps01b.addr_line_1$)
    address2$=fndequote$(aps01b.addr_line_2$)
    city$=fndequote$(aps01b.city$)
    state$=aps01b.state_code$
    zip$=aps01b.zip_code$

rem --- Corp address

    corp_name1$=name1$
    corp_address1$=address1$
    corp_address2$=address2$
    corp_city$=city$
    corp_state$=state$
    corp_zip$=zip$

rem --- Write to Client export file

    rec$=$22$+client_id$+$22$+","
    rec$=rec$+$22$+name1$+$22$+","
    rec$=rec$+$22$+name2$+$22$+","
    rec$=rec$+$22$+address1$+$22$+","
    rec$=rec$+$22$+address2$+$22$+","
    rec$=rec$+$22$+city$+$22$+","
    rec$=rec$+$22$+state$+$22$+","
    rec$=rec$+$22$+zip$+$22$+","
    rec$=rec$+$22$+corp_name1$+$22$+","
    rec$=rec$+$22$+corp_name2$+$22$+","
    rec$=rec$+$22$+corp_address1$+$22$+","
    rec$=rec$+$22$+corp_address2$+$22$+","
    rec$=rec$+$22$+corp_city$+$22$+","
    rec$=rec$+$22$+corp_state$+$22$+","
    rec$=rec$+$22$+corp_zip$+$22$+","
    rec$=rec$+$22$+report_corp_2irs$+$22$+","
    rec$=rec$+$22$+combo_fedst$+$22$+","
    rec$=rec$+$22$+final_return$+$22$+","
    rec$=rec$+$22$+name_control$+$22$+","
    rec$=rec$+$22$+tin_type$+$22$+","
    rec$=rec$+$22$+taxpayer_id$+$22$+","
    rec$=rec$+$22$+rt_num$+$22$+","
    rec$=rec$+$22$+phone$+$22$+","
    rec$=rec$+$22$+main_contact$+$22$+","
    rec$=rec$+$22$+fax$+$22$+","
    rec$=rec$+$22$+email$+$22$+","
    rec$=rec$+$22$+establish$+$22$+","
    rec$=rec$+$22$+other_ein$+$22$+","
    rec$=rec$+$22$+state1$+$22$+","
    rec$=rec$+$22$+state1_id$+$22$+","
    rec$=rec$+$22$+state2$+$22$+","
    rec$=rec$+$22$+state2_id$+$22$+","
    rec$=rec$+$22$+state3$+$22$+","
    rec$=rec$+$22$+state3_id$+$22$+","
    rec$=rec$+$22$+state4$+$22$+","
    rec$=rec$+$22$+state4_id$+$22$+","
    rec$=rec$+$22$+state5$+$22$+","
    rec$=rec$+$22$+state5_id$+$22$+$0D$
    print (client_dev)rec$

rem --- Now do 1099 file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,apm01_dev,1,meter_num,status
    while more
        gosub init_1099; rem "Init text file variables
        k$=key(apm01_dev,end=*break)
        if k$(1,2)<>firm_id$ break
        dim apm01a$:fattr(apm01a$)
        read record (apm01_dev) apm01a$
        if apm01a.vendor_1099$<>"Y" continue; rem "1099 flag
        name_line_1$=fndequote$(apm01a.vendor_name$)
        optional_acct_num$=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Accumulate

        read (apm02_dev,key=a0$,dom=*next)
        curr_calendar_paymts=0

rem --- Get vendor detail

        while more
            apm02_k$=key(apm02_dev,end=*break)
            if apm02_k$(1,8)<>a0$ break
            read record (apm02_dev) apm02a$
            curr_calendar_paymts=curr_calendar_paymts+apm02a.cur_cal_pmts
        wend    

rem --- Assign export variables

        if curr_calendar_paymts<minimum continue
        nonemployee_compensation=curr_calendar_paymts

rem --- Fix Up Fed ID Number (Strip out all but the 9 digits)

        tmp_fedid$=cvs(apm01a.federal_id$,2)
        taxpayer_id$=""
        tin_type$="N/A"
        if len(tmp_fedid$)=0 goto address
        tin_type$="EIN"
        for i=1 to len(tmp_fedid$)
            if tmp_fedid$(i,1)>="0" and tmp_fedid$(i,1)<="9" taxpayer_id$=taxpayer_id$+tmp_fedid$(i,1)
        next i
        taxpayer_id$=pad(taxpayer_id$,9)

address: rem --- Address

        street_addr1$=fndequote$(apm01a.addr_line_1$)
        street_addr2$=fndequote$(apm01a.addr_line_2$)
        city$=fndequote$(apm01a.city$)
        state$=apm01a.state_code$
        zip$=apm01a.zip_code$

rem --- Write record. Loop up for next Vendor

        rec$=rec$+$22$+name_line_1$+$22$
        rec$=rec$+","+$22$+name_line_2$+$22$
        rec$=rec$+","+$22$+street_addr1$+$22$
        rec$=rec$+","+$22$+street_addr2$+$22$
        rec$=rec$+","+$22$+city$+$22$
        rec$=rec$+","+$22$+state$+$22$
        rec$=rec$+","+$22$+zip$+$22$
        rec$=rec$+","+$22$+foreign_addr_flag$+$22$
        rec$=rec$+","+$22$+foreign_postal_code$+$22$
        rec$=rec$+","+$22$+tin_type$+$22$
        rec$=rec$+","+$22$+taxpayer_id$+$22$
        rec$=rec$+","+$22$+name_control$+$22$
        rec$=rec$+","+$22$+optional_acct_num$+$22$
        rec$=rec$+","+$22$+cfsp_code$+$22$
        rec$=rec$+","+$22$+direct_sales_flag$+$22$
        rec$=rec$+","+$22$+second_tin_notice_flag$+$22$
        rec$=rec$+","+str(rents)
        rec$=rec$+","+str(royalties)
        rec$=rec$+","+str(other_income)
        rec$=rec$+","+str(fed_income_tax_withheld)
        rec$=rec$+","+str(fishing_boat_proceeds)
        rec$=rec$+","+str(medical_health_care)
        rec$=rec$+","+str(nonemployee_compensation)
        rec$=rec$+","+str(substitute_payments)
        rec$=rec$+","+str(crop_insurance_proceeds)
        rec$=rec$+","+$22$+state1$+$22$
        rec$=rec$+","+str(state1_income)
        rec$=rec$+","+str(state1_tax_withheld)
        rec$=rec$+","+$22$+state2$+$22$
        rec$=rec$+","+str(state2_income)
        rec$=rec$+","+str(state2_tax_withheld)
        rec$=rec$+","+str(golden_parachute_payments)
        rec$=rec$+","+str(gross_paid_to_attorney)
        rec$=rec$+","+$22$+box15_1$+$22$
        rec$=rec$+","+$22$+box15_2$+$22$
        rec$=rec$+","+$22$+idms$+$22$
        print (ten99_dev)rec$,$0D0A$,
    wend

done:

    goto std_exit

init_client: rem --- Init variables for Client text file

rem --- NOTE: 'Client' equates to PAYER

    client_id$=""
    name1$=""
    name2$=""
    address1$=""
    address2$=""
    city$=""
    state$=""
    zip$=""
    corp_name1$=""
    corp_name2$=""
    corp_address1$=""
    corp_address2$=""
    corp_city$=""
    corp_state$=""
    corp_zip$=""
    report_corp_2irs$=""
    combo_fedst$=""
    final_return$=""
    name_control$=""
    let tin_type$=""
    let taxpayer_id$=""
    let rt_num$=""
    let phone$=""
    let main_contact$=""
    let fax$=""
    let email$=""
    let establish$=""
    let other_ein$=""
    let state1$=""
    let state1_id$=""
    let state2$=""
    let state2_id$=""
    let state3$=""
    let state3_id$=""
    let state4$=""
    let state4_id$=""
    let state5$=""
    let state5_id$=""
    return

init_1099: rem --- Init variables for 1099 text file

    name_line_1$=""
    name_line_2$=""
    street_addr1$=""
    street_addr2$=""
    city$=""
    state$=""
    zip$=""
    foreign_addr_flag$=""
    foreign_postal_code$=""
    tin_type$=""
    taxpayer_id$=""
    name_control$=""
    optional_acct_num$=""
    cfsp_code$=""
    direct_sales_flag$=""
    second_tin_notice_flag$=""
    rents=0
    royalties=0
    other_income=0
    fed_income_tax_withheld=0
    fishing_boat_proceeds=0
    medical_health_care=0
    nonemployee_compensation=0
    substitute_payments=0
    crop_insurance_proceeds=0
    state1$=""
    state1_income=0
    state1_tax_withheld=0
    state2$=""
    state2_income=0
    state2_tax_withheld=0
    golden_parachute_payments=0
    gross_paid_to_attorney=0
    box15_1$=""
    box15_2$=""
    idms$=""
    rec$=""
return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
	return


rem " --- Remove quotes and trailing spaces  

    def fndequote$(q$)                           
        q$=cvs(q$,1+2)                           
        q=pos($22$=q$)                           
        while q                                      
            q$(q,1)="'",q=pos($22$=q$)               
        wend                                         
        return q$                                    
    fnend                                        

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
