rem --- Vendor Cross Reference Listing
rem --- Program apr_vendorxref v8.0.0 17Dec2006 (apr_ia)
rem --- Created by adx_codeport.bbx v1.1.5 (12/17/2006 10:32:31)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS";rem "aps-01A
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="apm-01",ids$[3]="APM_VENDMAST"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01_dev=channels[1]
    apm01_dev1=channels[2]
    apm01_dev2=channels[3]

rem --- Dimension string templates

    dim aps01a$:templates$[1]
    dim apm01a$:templates$[2]
   
rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    vendor_size=num(aps01a.vendor_size$)
    m0$=aps01a.vendor_output$
    m0=len(m0$)

rem --- Initializations

    headings=4
    width=80
    dim headings$[headings],buffer$(width),o[1]
    more=1
    page=0
    records=0
    maxlines=59
    lines=maxlines+1
    when$=sysinfo.system_date$
    clock$=""

rem --- Define print positions

    o[0]=1
    o[1]=42

rem --- Report headings

    buffer$(o[0])="Vendor ID Sequence"
    buffer$(o[1])="Alternate Sequence"
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[3]=buffer$

rem --- Get user approval to run the report

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit

rem --- Open the printer, start the progress meter and position the file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","NC","","","","",0,apm01_dev1,1,meter_num,status
    read (apm01_dev1,knum=0,key=firm_id$,dom=*next)
    read (apm01_dev2,knum=2,key=firm_id$,dom=*next)

rem --- Read the next Vendor Header (apm-01) record

while more
      dim buffer$(width)

      rem --- By vendor ID 

      k$=key(apm01_dev1,knum=0,end=*break)
      if pos(firm_id$=k$)<>1 break
      read record (apm01_dev1,key=k$,knum=0) apm01a$
      buffer$(o[0])=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)+" "+apm01a.vendor_name$
      call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
      records=records+1

      rem --- By alternate sequence

      k$=key(apm01_dev2,knum=2,end=*break)
      if pos(firm_id$=k$)<>1 break
      read record (apm01_dev2,key=k$,knum=2) apm01a$
      buffer$(o[1]-1)=" "+apm01a.alt_sequence$+" "+fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)+
:                     " "+apm01a.vendor_name$

      rem --- Print report line

      if lines+1>maxlines gosub report_heading
      print (printer_dev) buffer$
      lines=lines+1
 
      rem --- Loop back for next vendor master
wend

rem --- All done

    if lines+2>maxlines gosub report_heading
    print (printer_dev) ""
    print (printer_dev) records," Vendor(s) Listed"
    goto std_exit

report_heading: rem --- Report Heading

    lines=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    return

rem --- Functions

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return
	
rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
