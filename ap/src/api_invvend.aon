rem AP Open Invoice Vendor Lookup Link
rem Proprietary Software. BASIS International Ltd.
rem Program ID: api_invvend.aon  <Jul 17, 2013>
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    setesc std_error
    seterr std_error

    enter inq_mode$,rec_tpl$,calc_tpl$,table_chans$[all],status$

rem rec_tpl$       - Current inquiry record
rem table_chans$[] - Barista opened channels array
rem status$        - Returned status: "SKIP" = Skip current record

    apm_vendhist=fnget_dev("APM_VENDHIST")
    dim apm_vendhist$:fnget_tpl$("APM_VENDHIST"),err=*next
    
    if apm_vendhist=0 or apm_vendhist$="" then
        num_files=1
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="APM_VENDHIST",open_opts$[1]="OTA"

        gosub open_tables

        apm_vendhist=num(open_chans$[1])
        dim apm_vendhist$:open_tpls$[1]
    endif

rem --- Main process

	ap_type!=BBjAPI().getNamespace("ap_type","query",0)
	ap_type$=ap_type!.getValue("ap_type",err=*next)
    status$="SKIP"

    while 1
        readrecord(apm_vendhist,key=rec_tpl.firm_id$+rec_tpl.vendor_id$+ap_type$,err=*break)
        status$=""
		break
    wend

    goto std_exit

rem --- Functions

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]

open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

std_exit: rem --- Exit Program

    exit
