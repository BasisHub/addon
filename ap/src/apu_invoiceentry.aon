rem --- Invoice Entry Update
rem --- Program apu_invoiceentry v8.0.0 03Dec2006 (apu_aa)
rem --- Created by adx_codeport.bbx v1.1.3 (12/03/2006 02:21:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem --- Was an incomplete stub that just cleared the entry files; 
rem --- added remaining code 10/07.CH

    seterr std_error
    setesc std_error

    next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
    if OutVect!<>null() OutVect!=null()

rem --- Close printer and destroy current progress meter (if one exists)

    close (printer_dev,err=*next)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

rem --- Initializations

rem --- Get user approval to update

        msg_id$="AON_UPDT_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message
        if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,ape01_dev,1,meter_num,status
    read (ape01_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)

rem --- Read next Invoice Header (ape-01) record

    while moreheaders
        k$=key(ape01_dev,end=*break)
        if pos(firm_id$+batch_no$=k$)<>1 break
        read record (ape01_dev,key=k$) ape01a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        rem --- Initializations for this invoice

        ape01a_key$=k$
        invoice$=ape01a.firm_id$+ape01a.ap_type$+ape01a.vendor_id$+ape01a.ap_inv_no$

        rem --- Retrieve Vendor Master (apm-01) record

        dim apm01a$:fattr(apm01a$)
        apm01a.firm_id$=firm_id$
        apm01a.vendor_id$=ape01a.vendor_id$
        apm01a.vendor_name$=nf$
        k$=apm01a.firm_id$+apm01a.vendor_id$ 
        find record (apm01_dev,key=k$,dom=*next) apm01a$

        rem --- ****** code between here and corres. rem was missing - added 10/07.CH

        rem --- update vendor history
        x$=ape01a.accting_date$
        call pgmdir$+"adc_fiscalperyr.aon",firm_id$,gls01_dev,x$,period$,year$
        extract record (apm02_dev,key=firm_id$+ape01a.vendor_id$+ape01a.ap_type$,dom=*next) apm02a$
        apm02a.open_invs=apm02a.open_invs+ape01a.invoice_amt
        apm02a.open_ret=apm02a.open_ret+ape01a.retention
        apm02a.lstinv_date$=ape01a.invoice_date$
        if year$<=prior_yr$ apm02a.pyr_purch=apm02a.pyr_purch+ape01a.invoice_amt
        if year$>prior_yr$ and year$<=aps01a.current_year$ apm02a.ytd_purch=apm02a.ytd_purch+ape01a.invoice_amt
        if year$>aps01a.current_year$ apm02a.nyr_purch=apm02a.nyr_purch+ape01a.invoice_amt
        apm02a$=field(apm02a$)
        write record (apm02_dev,key=firm_id$+ape01a.vendor_id$+ape01a.ap_type$) apm02a$

        rem --- distribution code
        if ape01a.ap_dist_code$<>k1$
            k1$=ape01a.ap_dist_code$
            find record (apm10b_dev,key=firm_id$+"B"+k1$,dom=*next) apm10b$
            z1$=apm10b.gl_purc_acct$
            z0$=apm10b.gl_ap_acct$
        endif

        open_invoice: rem --- Open Invoice

        u0=0,c1=0,apt01a.firm_id$="XX"
        extract record (apt01_dev,key=ape01a.firm_id$+ape01a.ap_type$+ape01a.vendor_id$+
:           ape01a.ap_inv_no$,dom=*next) apt01a$
        if apt01a.firm_id$="XX"

            rem --- took dom; New Invoice
            apt01a.firm_id$=ape01a.firm_id$
            apt01a.ap_type$=ape01a.ap_type$
            apt01a.vendor_id$=ape01a.vendor_id$
            apt01a.ap_inv_no$=ape01a.ap_inv_no$
            apt01a.sequence_00$=ape01a.sequence_00$
            apt01a.ap_dist_code$=ape01a.ap_dist_code$
            apt01a.payment_grp$=ape01a.payment_grp$
            apt01a.ap_terms_code$=ape01a.ap_terms_code$
            apt01a.invoice_date$=ape01a.invoice_date$
            apt01a.accting_date$=ape01a.accting_date$
            apt01a.inv_due_date$=ape01a.inv_due_date$
            apt01a.disc_date$=ape01a.disc_date$
            apt01a.reference$=ape01a.reference$
            apt01a.ap_inv_memo$=ape01a.ap_inv_memo$
            apt01a.hold_flag$=ape01a.hold_flag$
            apt01a.mc_inv_flag$=ape01a.invoice_type$
            apt01a.invoice_amt=ape01a.invoice_amt
            apt01a.discount_amt=ape01a.discount_amt
            apt01a.retention=ape01a.retention

            u0=u0+apt01a.invoice_amt
            write record (apt01_dev,key=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+
:               apt01a.ap_inv_no$+apt01a.sequence_00$,dom=open_invoice) apt01a$

        else
            if apt01a.mc_inv_flag$="M" apt01a.mc_inv_adj$="A"
            apt01a.payment_grp$=ape01a.payment_grp$
            apt01a.ap_terms_code$=ape01a.ap_terms_code$
            apt01a.invoice_date$=ape01a.invoice_date$
            apt01a.inv_due_date$=ape01a.inv_due_date$
            apt01a.disc_date$=ape01a.disc_date$
            apt01a.reference$=ape01a.reference$
            apt01a.ap_inv_memo$=ape01a.ap_inv_memo$
            apt01a.hold_flag$=ape01a.hold_flag$
            apt01a.mc_inv_flag$=ape01a.invoice_type$
            u0=u0+apt01a.invoice_amt+ape01a.invoice_amt
            write record (apt01_dev,key=ape01a.firm_id$+ape01a.ap_type$+ape01a.vendor_id$+
:               ape01a.ap_inv_no$) apt01a$

            rem --- Find Detail Record

            apt11_key$=ape01a.firm_id$+ape01a.ap_type$+ape01a.vendor_id$+ape01a.ap_inv_no$
            read (apt11_dev,key=apt11_key$,dom=*next)

            while moredetail
                k$=key(apt11_dev,end=*break)
                if k$(1,len(apt11_key$))<>apt11_key$ break
                read record (apt11_dev) apt11a$
                c1=num(apt11a.sequence_num$)
                u0=u0+apt11a.trans_amt

                rem --- Find Open Record

                if apt11a.trans_type$=" " then exitto update_apt11
            wend

            rem --- New Record

            apt11a.firm_id$=ape01a.firm_id$
            apt11a.ap_type$=ape01a.ap_type$
            apt11a.vendor_id$=ape01a.vendor_id$
            apt11a.ap_inv_no$=ape01a.ap_inv_no$
            apt11a.sequence_num$=str(c1+1:"00")

            update_apt11: rem --- Update

            apt11a.trans_type$="A"
            apt11a.trans_date$=ape01a.accting_date$
            apt11a.trans_ref$=ape01a.reference$
            apt11a.trans_amt=ape01a.invoice_amt
            apt11a.trans_disc=ape01a.discount_amt
            apt11a.trans_ret=ape01a.retention

            write record (apt11_dev,key=apt11a.firm_id$+apt11a.ap_type$+apt11a.vendor_id$+
:              apt11a.ap_inv_no$+apt11a.sequence_num$) apt11a$
        endif

        rem --- ****** end of missing code 11/07.CH

        rem --- Position the Invoice Detail (ape-11) file

        read (ape11_dev,key=invoice$,dom=*next)

        rem --- Read the next Invoice Detail (ape-11) record

        while moredetail
            k$=key(ape11_dev,end=*break)
            if pos(invoice$=k$)<>1 break
            read record (ape11_dev) ape11a$

            rem --- ****** another section of missing code.CH
            rem --- Invoice Detail

            apt02_key$=ape11a.firm_id$+ape11a.ap_type$+ape11a.vendor_id$+"I"+
:                      ape11a.ap_inv_no$+ape11a.gl_account$+ape01a.accting_date$
            apt02a.gl_post_amt=0
            apt02a.units=0
            extract record (apt02_dev,key=apt02_key$,dom=*next) apt02a$
            apt02a.firm_id$=ape11a.firm_id$
            apt02a.ap_type$=ape11a.ap_type$
            apt02a.vendor_id$=ape11a.vendor_id$
            apt02a.invoice_type$="I"
            apt02a.reference$=ape11a.ap_inv_no$
            apt02a.gl_account$=ape11a.gl_account$
            apt02a.accting_date$=ape01a.accting_date$
            apt02a.gl_post_amt=apt02a.gl_post_amt+ape11a.gl_post_amt
            apt02a.units=apt02a.units+ape11a.units
            apt02a$=field(apt02a$)

            write record (apt02_dev,key=apt02_key$) apt02a$

            rem --- ****** end missing code.CH
            remove (ape11_dev,key=k$)
          wend
          
          rem --- remove header and loop back
          
          remove (ape01_dev,key=invoice$)
    wend
        
rem --- All done

    if gl$="Y"
       call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,status
       call pgmdir$+"glc_ctlupdate.aon",status
       call pgmdir$+"glc_ctldelete.aon",status
    endif
    call pgmdir$+"adc_batchdelete.aon",err=*next,status
    goto std_exit

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

glpost: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release


rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"U","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
