rem apr - Vendor Comment Listing
rem Program apr_comments v8.0.0 15Aug2006 (apr_qb)
rem Created by adx_progconv.bbx v1.0.3 (08/15/2006 01:04:09)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    use ::ado_func.src::func

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)
rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)    

rem --- Open/Lock files

    files=2,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS";rem "aps-01
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01_dev=channels[1]
    apm01_dev=channels[2]

rem --- Dimension string templates

    dim aps01a$:templates$[1],apm01a$:templates$[2]

rem --- Assign form input values to local variables

    begvendor$=option!.getOptionData("VENDOR_ID_1")
    endvendor$=option!.getOptionData("VENDOR_ID_2")
    vend_type$=option!.getOptionData("VENDOR_TYPE")
    rem "VENDOR INACTIVE FEATURE"
    inactive$=Option!.getOptionData("VEND_INACTIVE")
    
rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
    m8$="(###) ###-####"
    m0=len(m0$)
    m8=len(m8$)

rem --- Initializations

    headings=3
    dim headings$[headings],o[3]
    page=0
    width=80
    total=0
    recs=0
    maxlines=59
    lines=maxlines+1
    when$=sysinfo.system_date$
    clock$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[2]=Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_VENDORS")+" = "+inactive$
    total_recs=0

rem --- Column Headings

dim columns$[3,10]
    columns = 3
    columns$[0,0]=Translate!.getTranslation("AON_VENDOR"),             columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_NAME"),               columns$[1,1]="C",columns$[1,2]="50"
    columns$[2,0]=Translate!.getTranslation("AON_CONTACT"),            columns$[2,1]="C",columns$[2,2]="20"
    columns$[3,0]=Translate!.getTranslation("AON_TELEPHONE"),          columns$[3,1]="C",columns$[3,2]="10"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Initialize print positions

    o[0]=0
    o[1]=max(m0+1,7)
    o[2]=o[1]+32
    o[3]=width-m8
    cw=min(20,o[3]-o[2]-1)

rem --- Start progress meter and position Vendor Master file

    call pgmdir$+"adc_progress.aon","NC","APM_VENDMAST","","","",0,apm01_dev,1,meter_num,status
    read (apm01_dev,key=firm_id$,dom=*next)
    while begvendor$<>""
          read (apm01_dev,key=firm_id$+begvendor$,dom=*next)
          read (apm01_dev,dir=-1,err=*next)
          begvendor$=""
    wend

rem --- Read next Vendor Master (apm-01) record

    while 1
        apm01_key$=key(apm01_dev,end=*break)
        if pos(firm_id$=apm01_key$)<>1 break
        read record (apm01_dev,key=apm01_key$) apm01a$
        if endvendor$<>"" if apm01a.vendor_id$>endvendor$ break
          
        if vend_type$="P" and apm01a.temp_vend$="Y" then continue
        if vend_type$="T" and apm01a.temp_vend$<>"Y" then continue
        if inactive$="Y" and apm01a.vend_inactive$="Y" then continue
        if cvs(apm01a.memo_1024$,2)="" then continue
          
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

        rem --- Initializations for this vendor
        dim continued$(width)
        call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(apm01a.phone_no$,2),"",phone_mask$
        phone$=cvs(apm01a.phone_no$,2)
        phone$=str(phone$:phone_mask$,err=*next)

        rem --- Print the vendor info
        gosub print_vendor

        rem --- Print the comment lines
        lineVect!=func.splitMultiLineField(apm01a.memo_1024$,50+20+10)
        if lineVect!.size() then
            for i=0 to lineVect!.size()-1
                OutVect!.addItem("")
                OutVect!.addItem(lineVect!.getItem(i))
                xwk=fnblank(2)
                recs=recs+1
            next i
        endif
    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    x$=Translate!.getTranslation("AON_NO")
    if total x$=str(total)
    xwk=fnblank(5)
    OutVect!.addItem(x$+Translate!.getTranslation("AON__VENDOR(S)_LISTED"))
    xwk=fnblank(2)
    goto std_exit

print_vendor: rem --- Print vendor information

    first=0
    total=total+1
    xwk=fnblank(4)
    OutVect!.addItem(fnmask$(apm01a.vendor_id$(1,vendor_size),m0$))
    OutVect!.addItem(apm01a.vendor_name$)
    OutVect!.addItem(apm01a.contact_name$(1,cw))
    OutVect!.addItem(phone$)
    xwk=fnblank(4)
    continued$(o[0]+1)=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
    continued$(o[1])=apm01a.vendor_name$
    continued$(o[2])=Translate!.getTranslation("AON_(CONTINUED)")

    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:          else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
        alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
