rem --- Monthly Check Report
rem --- Program apr_checkreport v8.0.0 27Jan2007 (apr_hb)
rem --- Created by adx_codeport.bbx v1.1.5 (01/27/2007 02:04:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)    

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"; rem "aps-01"
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[4]="apc_typecode",ids$[4]="APC_TYPECODE"
    files$[5]="apt-05",ids$[5]="APT_CHECKHISTORY"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01_dev=channels[1]
    apm01_dev=channels[2]
    apm10_dev=channels[4]
    apt05_dev=channels[5]

rem --- Dimension string templates
      
    dim aps01a$:templates$[1],apm01a$:templates$[2],apm10a$:templates$[4],
:       apt05a$:templates$[5]

rem --- Assign form input values to local variables

	begdate$=Option!.getOptionData("CHECK_DATE_1")
	enddate$=Option!.getOptionData("CHECK_DATE_2")
	begvend$=Option!.getOptionData("VENDOR_ID_1")
	endvend$=Option!.getOptionData("VENDOR_ID_2")
	checkno$=Option!.getOptionData("CHECK_NO")
	inv_no$=Option!.getOptionData("INV_NO")
    vend_type$=Option!.getOptionData("VENDOR_TYPE")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","A","",m1$,0,0
    multitypes=aps01a.multi_types$="Y"
    retention=aps01a.ret_flag$="Y"
    m0=len(m0$)
    m1=len(m1$)
    headings=3
    if multitypes headings=4

rem --- Initializations

    dim headings$[headings],types$[4],m5$(7,"0")
    dim detail[3],totals[3],at[3],rt[3]
    done=0
    number=0
    printed=0
    more=1
    recs=0
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    total_recs=0
    
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__FROM_")+fndate$(begdate$)+
:                Translate!.getTranslation("AON__THROUGH_")+fndate$(enddate$)

    if vend_type$="A" then
        headings$[2]=Translate!.getTranslation("AON_ALL_VENDOR_TYPES")
    endif
    
    if vend_type$="P" then
        headings$[2]=Translate!.getTranslation("AON_PERMANENT_VENDORS_ONLY")
    endif

    if vend_type$="T" then
        headings$[2]=Translate!.getTranslation("AON_TEMPORARY_VENDORS_ONLY")
    endif
	headings$[2]=headings$[2]+" "
	if cvs(begvend$,3)<>""
		headings$[2]=headings$[2]+Translate!.getTranslation("AON_FROM_VENDOR:_")+fnmask$(begvend$(1,vendor_size),m0$)
	else
		headings$[2]=headings$[2]+Translate!.getTranslation("AON_FROM_THE_FIRST_VENDOR")
	endif

	headings$[2]=headings$[2]+" "+Translate!.getTranslation("AON_TO")+" "
	
	if cvs(endvend$,3)<>""
		headings$[2]=headings$[2]+Translate!.getTranslation("AON_VENDOR:_")+fnmask$(endvend$(1,vendor_size),m0$)
	else
		headings$[2]=headings$[2]+Translate!.getTranslation("AON_THE_LAST_VENDOR")
	endif

	if cvs(checkno$,3)<>"" headings$[2]=headings$[2]+" "+Translate!.getTranslation("AON_CHECK_NO")+" "+checkno$
	if cvs(inv_no$,3)<>"" headings$[2]=headings$[2]+" "+Translate!.getTranslation("AON_INVOICE_#")+" "+inv_no$

    if multitypes then headings$[3]="[HEADER]"
    types$[0]=Translate!.getTranslation("AON_UNKNOWN")
    types$[1]=Translate!.getTranslation("AON_VOID")
    types$[2]=Translate!.getTranslation("AON_REVERSAL")
    types$[3]=Translate!.getTranslation("AON_MANUAL")
    types$[4]=Translate!.getTranslation("AON_COMPUTER")
    lasttype$=""
    lastcheck$=""

rem --- Define print positions

    retention_hdr1$=""
    retention_hdr2$="",n=3
    if retention
       retention_hdr1$=Translate!.getTranslation("AON_RETENTION")
       retention_hdr2$=Translate!.getTranslation("AON____AMOUNT")
    endif

rem --- OutVect! for DocOut, date/time 

	OutVect!=bbjAPI().getSysGui().makeVector()
	HdrVect!=bbjAPI().getSysGui().makeVector()
	BrkVect!=bbjAPI().getSysGui().makeVector()
	TotVect!=bbjAPI().getSysGui().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)

rem --- column headings
    dim columns$[7,10]
    columns=7
    if retention dim columns$[8,10]; columns=8
    columns$[0,0]=Translate!.getTranslation("AON_CHK_NO"),       columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_CHK_DATE"),     columns$[1,1]="C",columns$[1,2]="10"
    columns$[2,0]=Translate!.getTranslation("AON_TYPE"),         columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_VENDOR"),       columns$[3,1]="C",columns$[3,2]="10"
    columns$[4,0]=Translate!.getTranslation("AON_NAME"),         columns$[4,1]="C",columns$[4,2]="30"
    columns$[5,0]=Translate!.getTranslation("AON_PAYMENT_AMT"),  columns$[5,1]="N",columns$[5,2]="12",columns$[5,3]=m1$,columns$[5,10]="T"
    columns$[6,0]=Translate!.getTranslation("AON_INVOICE_AMT"),  columns$[6,1]="N",columns$[6,2]="12",columns$[6,3]=m1$,columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_DISCOUNT_AMT"), columns$[7,1]="N",columns$[7,2]="12",columns$[7,3]=m1$,columns$[7,10]="T"
    if retention
        columns$[8,0]=Translate!.getTranslation("AON_RETENTION_AMT"),columns$[8,1]="N",columns$[8,2]="12",columns$[8,3]=m1$,columns$[8,10]="T"
    endif

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Open printer, start progress meter and position the file

    call pgmdir$+"adc_progress.aon","NC","APT_CHECKHISTORY","","","",0,apt05_dev,1,meter_num,status
    read (apt05_dev,key=firm_id$,dom=*next)

rem --- Read the next Check History (apt-05) record

    while more
          k$=key(apt05_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          read record (apt05_dev) apt05a$
          total_recs=total_recs+1
          if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
          if apt05a.check_date$<begdate$ continue
          if apt05a.check_date$>enddate$ continue
		  if cvs(begvend$,3)<>"" if apt05a.vendor_id$<begvend$ continue
		  if cvs(endvend$,3)<>"" if apt05a.vendor_id$>endvend$ continue
          if cvs(checkno$,3)<>"" if apt05a.check_no$<>checkno$ continue
		  if cvs(inv_no$,3)<>"" if apt05a.ap_inv_no$<>inv_no$ continue

          rem --- extra apm01 read here to facilitate including/skipping vendors based on temp vend flag
          if vend_type$<>"A"
              read record (apm01_dev,key=firm_id$+apt05a.vendor_id$,dom=*continue)apm01a$
              if (vend_type$="P" and apm01a.temp_vend$="Y") or (vend_type$="T" and apm01a.temp_vend$<>"Y") then continue
          endif
          

          rem --- Level breaks

          if apt05a.ap_type$<>lasttype$ gosub type_break

          rem --- Initializations for this check

          dim detail[3]
          check$=apt05a.check_no$
          paid$=fndate$(apt05a.check_date$)
          vendor$=""
          name$=""
          payment$=""
          invoice$=""
          discount$=""
          retention$=""
          type=pos(apt05a.trans_type$="VRMC")
          type$=types$[type]

          rem --- Process check header

          mark$=""
          if lastcheck$<>"" if apt05a.check_no$<>lastcheck$ mark$="*"
          x=10000000
          x=num(apt05a.check_no$,err=*next)+1
          if x<10000000 lastcheck$=str(x:m5$)
          if type=0 continue

          rem --- Addition processing for manual and computer checks

          check=type>2
          while check
                detail[1]=apt05a.invoice_amt
                detail[2]=apt05a.discount_amt
                detail[3]=apt05a.retention
                thischeck$=apt05a.firm_id$+apt05a.ap_type$+apt05a.check_no$+apt05a.vendor_id$

                rem --- Additional records for this check?

                while more
                      k$=key(apt05_dev,end=*break)
                      if pos(thischeck$=k$)<>1 break
                      read record (apt05_dev) apt05a$
                      detail[1]=detail[1]+apt05a.invoice_amt
                      detail[2]=detail[2]+apt05a.discount_amt
                      detail[3]=detail[3]+apt05a.retention
                wend

                rem --- Format detail line amount fields

                detail[0]=detail[1]-detail[2]-detail[3]
                payment$=str(detail[0])
                invoice$=str(detail[1])
                discount$=str(detail[2])
                retention$=""
                if retention retention$=str(detail[3])
                check=0
                break
          wend

          rem --- Retrieve vendor (if necessary)

          while type>1
                dim apm01a$:fattr(apm01a$)
                apm01a.firm_id$=apt05a.firm_id$
                apm01a.vendor_id$=apt05a.vendor_id$
                apm01a.vendor_name$=nf$
                k$=apm01a.firm_id$+apm01a.vendor_id$
                find record (apm01_dev,key=k$,dom=*proceed) apm01a$
                vendor$=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
                name$=apm01a.vendor_name$
                break
          wend  

          rem --- Print detail line

          OutVect!.addItem(check$+mark$)
          OutVect!.addItem(paid$)
          OutVect!.addItem(type$)
          OutVect!.addItem(vendor$)
          OutVect!.addItem(name$)
          OutVect!.addItem(payment$)
          OutVect!.addItem(invoice$)
          OutVect!.addItem(discount$)
          if retention
            OutVect!.addItem(retention$)
          endif  
          recs=recs+1

          rem --- Accumulate totals

          for x=0 to 3
              at[x]=at[x]+detail[x]
              rt[x]=rt[x]+detail[x]
          next x

          rem --- Loop back for next check history record

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub type_break
    total$=Translate!.getTranslation("AON_TOTAL_FOR_REPORT")
    for x=0 to 3
        totals[x]=rt[x]
    next x
    gosub print_total
    goto std_exit

print_total: rem --- Print totals

    retention$=""
    if retention retention$=str(totals[3])
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk=fnblank(4)
    OutVect!.addItem(total$)
    OutVect!.addItem(str(totals[0]))
    OutVect!.addItem(str(totals[1]))
    OutVect!.addItem(str(totals[2]))
    if retention OutVect!.addItem(retention$)

    return

type_break: rem --- AP type break

    if multitypes=0 return
    while lasttype$<>""
          total$=Translate!.getTranslation("AON_TOTAL_FOR_")+aptype$
          for x=0 to 3
              totals[x]=at[x]
          next x
          gosub print_total
          break
    wend
    if done return
    dim apm10a$:fattr(apm10a$),at[3]
    apm10a.firm_id$=apt05a.firm_id$
    apm10a.record_id_a$="A"
    apm10a.ap_type$=apt05a.ap_type$
    apm10a.code_desc$=nf$
    k$=apm10a.firm_id$+apm10a.record_id_a$+apm10a.ap_type$
    find record (apm10_dev,key=k$,dom=*next) apm10a$
    lasttype$=apm10a.ap_type$
    aptype$=Translate!.getTranslation("AON_AP_TYPE_")+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(aptype$)

    return

rem --- Functions

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- Create blank line in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,meter_num,status
    run STBL("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
