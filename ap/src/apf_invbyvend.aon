rem --- Open Invoices By Vendor Query filter program
rem --- Program ID: apf_invbyvend.aon
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- Run by Barista as part of the AP_INVBYVEND query.
rem --- For each row in the result set, this program runs to adjust the INVOICE_AMT when necessary.

    setesc std_error
    seterr std_error

    enter inq_mode$,rec_tpl$,calc_tpl$,table_chans$[all],status$

rem inq_mode$      - not used until recently - current use not yet documented
rem rec_tpl$       - Current row database columns
rem calc_tpl$      - Current row calculated columns
rem table_chans$[] - Barista opened channels array
rem status$        - Returned status: "SKIP" = Skip current record

rem --- Initialize data
    status$=""

rem --- Open tables

    if pos(pad("@"+"APT_INVOICEDET",17)=table_chans$[0,0],20)=0 then
        num_files=1
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="APT_INVOICEDET",open_opts$[1]="OTA@"
                
        gosub open_tables        
    endif

    apt_invoicedet_dev=fnget_dev("@"+"APT_INVOICEDET")
    dim apt_invoicedet$:fnget_tpl$("@"+"APT_INVOICEDET")

rem --- Sum up adjustment amounts for this invoice
    trip_key$=rec_tpl.firm_id$+rec_tpl.ap_type$+rec_tpl.vendor_id$+rec_tpl.ap_inv_no$
    read(apt_invoicedet_dev,key=trip_key$,dom=*next)
    while 1
        readrecord(apt_invoicedet_dev,end=*break)apt_invoicedet$
        if apt_invoicedet.firm_id$+apt_invoicedet.ap_type$+apt_invoicedet.vendor_id$+apt_invoicedet.ap_inv_no$<>trip_key$ then break
        
        rem --- Add adjustments to the INVOICE_AMT for this line
        if apt_invoicedet.trans_type$="A" then
            rec_tpl.invoice_amt=rec_tpl.invoice_amt+apt_invoicedet.trans_amt
        endif
    wend

rem --- Done

    if rec_tpl.invoice_bal=0 then status$="SKIP"
    goto exit_prog

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- Functions

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
    
exit_prog:rem --- Exit Program

    exit
