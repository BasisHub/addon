rem --- PO QA Receipt By Vendor Query filter program
rem --- Program ID: apf_qa_recipt.aon
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- Run by Barista as part of the AP_QA_RECEIPT query.
rem --- For each row in the result set, this program runs to calculate the WIP Amount.

    setesc std_error
    seterr std_error

    enter inq_mode$,rec_tpl$,calc_tpl$,table_chans$[all],status$

rem inq_mode$      - not used until recently - current use not yet documented
rem rec_tpl$       - Current row database columns
rem calc_tpl$      - Current row calculated columns
rem table_chans$[] - Barista opened channels array
rem status$        - Returned status: "SKIP" = Skip current record

rem --- Initialize data
    status$=""

rem --- Open tables
    poe_qadet_dev=fnget_dev("@"+"POE_QADET")
    poc_linecode_dev=fnget_dev("@"+"POC_LINECODE")

    if poe_qadet_dev_dev=0 or poc_linecode_dev=0 then
        rem --- PO installed?
        call dir_pgm$+"adc_application.aon","PO",info$[all]
        po$=info$[20]
        if po$<>"Y" then
            status$="SKIP"
            goto exit_prog
        endif

        num_files=2
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="POE_QADET",open_opts$[1]="OTA@"
        open_tables$[2]="POC_LINECODE",open_opts$[2]="OTA@"
                
        gosub open_tables        

        poe_qadet_dev=fnget_dev("@"+"POE_QADET")
        poc_linecode_dev=fnget_dev("@"+"POC_LINECODE")
    endif

    dim poe_qadet$:fnget_tpl$("@"+"POE_QADET")
    dim poc_linecode$:fnget_tpl$("@"+"POC_LINECODE")

    rem --- Sum up WIP amount for this PO in this Receiver
    wip_total_amt=0
    read(poe_qadet_dev,key=rec_tpl.firm_id$+rec_tpl.receiver_no$+rec_tpl.po_no$,dom=*next)
    while 1
        readrecord(poe_qadet_dev,end=*break)poe_qadet$
        if poe_qadet.firm_id$+poe_qadet.receiver_no$+poe_qadet.po_no$<>rec_tpl.firm_id$+rec_tpl.receiver_no$+rec_tpl.po_no$ then break
        
        rem --- Get Line Type for this Line Code
        if poc_linecode.po_line_code$<>poe_qadet.po_line_code$ then
            findrecord(poc_linecode_dev,key=poe_qadet.firm_id$+poe_qadet.po_line_code$,dom=*continue)poc_linecode$
        endif
        
        if poc_linecode.line_type$="O" then
            qty=1
        else
            qty=poe_qadet.qa_wip_qty
        endif
        wip_total_amt=wip_total_amt+(qty*poe_qadet.unit_cost)
    wend
    
    rec_tpl.wip_amt=wip_total_amt

rem --- Done
    goto exit_prog

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- Functions

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif    

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
    
exit_prog:rem --- Exit Program

    exit
