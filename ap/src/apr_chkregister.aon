rem --- AP Check Register
rem --- Program apr_chkregister v8.0.0 08Feb2007 (apr_fa)
rem --- Created by adx_codeport.bbx v1.1.5 (02/08/2007 12:12:42)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"; rem aps-01
    files$[2]="ape-04",ids$[2]="APE_CHECKS"
    files$[5]="apm-01",ids$[5]="APM_VENDMAST"
    files$[6]="apm-02",ids$[6]="APM_VENDHIST"
    files$[9]="apt-01",ids$[9]="APT_INVOICEHDR"
    files$[10]="apt-02",ids$[10]="APT_INVOICEDIST"
    files$[11]="apt-05",ids$[11]="APT_CHECKHISTORY"
    files$[12]="apt-11",ids$[12]="APT_INVOICEDET"
    files$[13]="apw-01",ids$[13]="APW_CHECKINVOICE"
    options$[2]="L"
    files$[14]="apc_typecode",ids$[14]="APC_TYPECODE";rem apm-10A
    files$[15]="apc_distribution",ids$[15]="APC_DISTRIBUTION";rem apm-10B

call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_report
    aps01_dev=channels[1]
    ape04_dev=channels[2]
    apm01_dev=channels[5]
    apm02_dev=channels[6]
    apt01_dev=channels[9]
    apt02_dev=channels[10]
    apt05_dev=channels[11]
    apt11_dev=channels[12]
    apw01_dev=channels[13]
    apm10a_dev=channels[14]
    apm10b_dev=channels[15]

rem --- Dimension string templates

    dim ape04a$:templates$[2],
:       apm01a$:templates$[5],apm02a$:templates$[6],
:       apt01a$:templates$[9],apt02a$:templates$[10],
:       apt05a$:templates$[11],apt11a$:templates$[12],apw01a$:templates$[13],       
:       apm10a$:templates$[14],apm10b$:templates$[15],
:       aps01a$:templates$[1]

rem  glt14a$:templates$[11],glw11a$:templates$[12],

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,vendor_size
    call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","A","",m1$,0,0
    multitypes=aps01a.multi_types$="Y"
    retention=aps01a.ret_flag$="Y"
    cashbasis=aps01a.cash_basis$="Y"
    bankrec=aps01a.br_interface$="Y"
    m0=len(m0$)
    m1=len(m1$)

rem --- Is General Ledger installed and being used?

    source$=pgm(-2)
    application$="AP"
    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,application$,glw11$,gl$,status
    if status goto std_exit_no_report
    process_id$=stbl("+PROCESS_ID")
    batch_no$=stbl("+BATCH_NO")

rem --- Initializations

    headings=2
    dim headings$[headings],underline$(m1*(3+retention),"-")
    dim o[11],h[11],pt[3],vt[3],at[3],rt[3]
    units=0
    errors=0
    glstatus=0
    done=0
    page=0
    width=132
    printed=0
    maxlines=59
    lines=maxlines+1
    moreheaders=1
    moredetail=1
    when$=sysinfo.system_date$
    clock$=""
    nf$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    lasttype$=""
    lastcode$=""
    lastvendor$=""
    taskdesc$=sysinfo.task_desc$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=taskdesc$
    retention_hdr1$=""
    retention_hdr2$=""
    if retention
       retention_hdr1$=Translate!.getTranslation("AON_RETENTION")
       retention_hdr2$=Translate!.getTranslation("AON____AMOUNT") 
    endif
    if multitypes then headings$[2]="[HEADER]"
    recs=0
    voids=0
    non_voids=0
    
rem --- set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif
	rd_alias_id$=cvs(rd_alias_id$,4)

rem --- Headings and print positions

 
    if retention
        dim columns$[6,10]
        columns = 6
    else
        dim columns$[5,10]
        columns = 5
    endif

    columns$[0,0]=Translate!.getTranslation("AON_CHECK_NO"),       columns$[0,1]="C",columns$[0,2]="8"
    columns$[1,0]=Translate!.getTranslation("AON_CHECK_DATE"),         columns$[1,1]="C",columns$[1,2]="8"
    columns$[2,0]=Translate!.getTranslation("AON_VENDOR"),             columns$[2,1]="C",columns$[2,2]="25"
    columns$[3,0]=Translate!.getTranslation("AON_INVOICE_AMT"),     columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m1$,columns$[3,10]="T"
    columns$[4,0]=Translate!.getTranslation("AON_DISCOUNT_AMT"),    columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m1$,columns$[4,10]="T"
    columns$[5,0]=Translate!.getTranslation("AON_PAYMENT_AMT"),     columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"
    if retention
        columns$[6,0]=Translate!.getTranslation("AON_RETENTION_AMOUNT"),   columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    endif

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]
    
rem --- Determine print positions

    o[0]=0
    o[1]=o[0]+9
    o[2]=o[1]+10
    o[6]=width-1
    if retention 
       o[6]=width-m1
       h[6]=o[6]+m1-10
    endif
    o[5]=o[6]-m1
    o[4]=o[5]-m1
    o[3]=o[4]-m1
    h[0]=o[0]
    h[1]=o[1]
    h[2]=o[2]
    h[3]=o[3]+m1-8
    h[4]=o[4]+m1-9
    h[5]=o[5]+m1-8

rem --- Additional file opens

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]="glt-04",ids$[2]="GLE_DAILYDETAIL"
    files$[3]="glt-05",ids$[3]="GLT_BANKCHECKS"
    files$[4]="glw-11",ids$[4]="GLW_DAILYDETAIL"
    
    if gl$="Y" call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                             ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_report
    glm01_dev=channels[1]
    glt04_dev=channels[2]
    glt05_dev=channels[3]
    glw11_dev=channels[4]
    
rem --- Clear trans for this firm/process/batch from glw-11 work file (if not batching, batch_no$ is zero, and will clear all recs this firm/process)

        if gl$="Y"
            rec_pfx$=firm_id$+process_id$+batch_no$
            call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
        endif    

rem --- Get user approval to proceed

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_report

rem --- start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,apw01_dev,1,meter_num,status
    read (apw01_dev,key=firm_id$,dom=*next)

rem --- Read next Check Detail (apw-01) record

    while moreheaders
          k$=key(apw01_dev,end=*break)
          if pos(firm_id$=k$)<>1 break
          recs=recs+1

          read record (apw01_dev) apw01a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

          rem --- Level breaks
    
          if apw01a.ap_type$<>lasttype$ gosub type_break

          rem --- Voided check?

          if apw01a.comp_or_void$="V"
             gosub print_voided
             continue
          endif

          rem --- Check transaction date if GL is being used

          first=1
          gldate$=apw01a.check_date$
          glstatus=0
          if gl$="Y" call pgmdir$+"glc_datecheck.aon",gldate$,"N",period$,year$,glstatus

          rem --- Read next invoice detail for this check

          while moredetail
                notfound=0
                while first
                      dim ape04a$:fattr(ape04a$),vt[3]
                      notfound=1
                      k$=apw01a.firm_id$+apw01a.ap_type$+apw01a.vendor_id$+
:                        apw01a.ap_inv_no$
                      read record (ape04_dev,key=k$,dom=*break) ape04a$
                      if ape04a.check_no$<>apw01a.check_no$
                         gosub print_voided
                         break
                      endif
                      notfound=0
                      lastvendor$=ape04a.firm_id$+ape04a.ap_type$+ape04a.vendor_id$
                      dim apm01a$:fattr(apm01a$)
                      apm01a.firm_id$=ape04a.firm_id$
                      apm01a.vendor_id$=ape04a.vendor_id$
                      apm01a.vendor_name$=nf$
                      k$=apm01a.firm_id$+apm01a.vendor_id$
                      find record (apm01_dev,key=k$,dom=*proceed) apm01a$
                      vendor$=fnmask$(apm01a.vendor_id$(1,vendor_size),m0$)
                      name$=apm01a.vendor_name$
                      errors=errors+(pos(nf$=name$)=1)
                      memo$=name$
                      ref1$=vendor$
                      ref2$=apw01a.ap_inv_no$
                      ref3$=apw01a.check_no$
                      if multitypes ref3$=ref3$+" "+apw01a.ap_type$
                      break
                wend

                while first=0
                      notfound=1
                      k$=key(ape04_dev,end=*break)
                      if pos(lastvendor$=k$)<>1 break
                      read record (ape04_dev) ape04a$
                      if pos("TEMP"=ape04a.vendor_id$)=1 break
                      notfound=0
                      ref2$=ape04a.ap_inv_no$
                      break
                wend
                if notfound break
                first=0

                rem --- Accumulate totals

                dim ct[3]
                ct[0]=ape04a.invoice_amt
                ct[1]=ape04a.discount_amt
                ct[3]=ape04a.retention
                ct[2]=ape04a.payment_amt; rem payment
                for x=0 to 3
                    vt[x]=vt[x]+ct[x]
                    at[x]=at[x]+ct[x]
                    rt[x]=rt[x]+ct[x]
                next x

                rem --- If GL isn't being used, we're done with this check

                if gl$<>"Y" continue

                rem --- Add up the original invoice amount including adjustments

                dim apt01a$:fattr(apt01a$)
                apt01a.firm_id$=apw01a.firm_id$
                apt01a.ap_type$=apw01a.ap_type$
                apt01a.vendor_id$=apw01a.vendor_id$
                apt01a.ap_inv_no$=ape04a.ap_inv_no$
                apt01a.sequence_00$="00"
                invoice$=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+
:                        apt01a.ap_inv_no$
                k$=apt01a.firm_id$+apt01a.ap_type$+apt01a.vendor_id$+
:                  apt01a.ap_inv_no$
                find record (apt01_dev,key=k$) apt01a$
                total=apt01a.invoice_amt
                read (apt11_dev,key=invoice$,dom=*next)
 
                rem --- Total up the invoice detail records

                while moredetail
                      k$=key(apt11_dev,end=*break)
                      if pos(invoice$=k$)<>1 break
                      read record (apt11_dev) apt11a$
                      if pos(apt11a.trans_type$="IA") total=total+apt11a.trans_amt
                wend

                rem --- Retrieve the distribution code record for this invoice

                if apt01a.ap_dist_code$<>lastcode$
                   dim apm10b$:fattr(apm10b$)
                   apm10b.firm_id$=apt01a.firm_id$
                   apm10b.record_id_b$="B"
                   apm10b.ap_dist_code$=apt01a.ap_dist_code$
                   apm10b.code_desc$=nf$
                   k$=apm10b.firm_id$+apm10b.record_id_b$+apm10b.ap_dist_code$
                   find record (apm10b_dev,key=k$,dom=*proceed) apm10b$
                   errors=errors+(pos(nf$=apm10b.code_desc$)=1)
                   lastcode$=apm10b.ap_dist_code$
                endif

                rem --- Calculate GL distribution when operating on a cash basis
                rem --- and update the recap file

                if cashbasis then
                      total=ape04a.payment_amt + ape04a.discount_amt
                      posted=0
                      factor=1
                      if ape04a.orig_inv_amt<>0 then factor=total/ape04a.orig_inv_amt
                      account$=""
                      invoice$=ape04a.firm_id$+ape04a.ap_type$+ape04a.vendor_id$+"I"+ape04a.ap_inv_no$
                      read (apt02_dev,key=invoice$,dom=*next)
                      while 1
                            k$=key(apt02_dev,end=*break)
                            if pos(invoice$=k$)<>1 break
                            read record (apt02_dev) apt02a$
                            account$=apt02a.gl_account$
                            gl_post_amt=round(apt02a.gl_post_amt*factor,2)
                            posted=posted+gl_post_amt
                            
                            rem --- Adjust last distribution for possible penney rounding errors
                            apt02_key$=""
                            apt02_key$=key(apt02_dev,end=*next)
                            if pos(firm_id$+ape04a.ap_type$+ape04a.vendor_id$+"I"+ape04a.ap_inv_no$=apt02_key$)<>1 then
                                gl_post_amt=gl_post_amt+(total-posted)
                            endif

                            amount=gl_post_amt
                            units=apt02a.units*factor
                            gosub glrecap
                      wend
                endif

                rem --- Generate remaining GL distribution and update the recap file
 
                rem --- Cash account

                account$=apm10b.gl_cash_acct$
                amount=(-ape04a.payment_amt); rem payment
                units=0
                gosub glrecap

                rem --- Payables account

                if cashbasis=0
                   account$=apm10b.gl_ap_acct$
                   amount=ape04a.payment_amt+ape04a.discount_amt
                   units=0
                   gosub glrecap
                endif

                rem --- Discount account

                if ape04a.discount_amt<>0
                   account$=apm10b.gl_disc_acct$
                   amount=-ape04a.discount_amt
                   units=0
                   gosub glrecap
                endif

                rem --- Loop back for next invoice detail for this check

          wend
          if notfound and first continue

          rem --- Print the information for this check

          if lines+2>maxlines gosub set_linecount

          OutVect!.addItem(apw01a.check_no$)
          OutVect!.addItem(fndate$(apw01a.check_date$))
          OutVect!.addItem(vendor$ + " " + name$)
          OutVect!.addItem(str(vt[0]))
          OutVect!.addItem(str(vt[1]))
          OutVect!.addItem(str(vt[2]))

          if retention
            retention$=fnretention$(retention,vt[3],m1$)
            OutVect!.addItem(retention$)
          endif
  
          if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,gldate$,glstatus,lines,errors,status

          if stbl("+DTWARN_MSG",err=*endif)<>""
              xwk=fnblank(1)
              OutVect!.addItem(stbl("+DTWARN_MSG"))
              xwk=fnblank(columns-1)
          endif

          lines=lines+1

          rem --- Loop back for next Check Detail

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub type_break
    headings$[1]=taskdesc$
    total$=Translate!.getTranslation("AON_TOTALS_FOR_REPORT")
    for x=0 to 3
        pt[x]=rt[x]
    next x
    gosub print_total

rem --- Any errors encountered?

    while errors
          if lines+2>maxlines gosub set_linecount
          OutVect!.addItem("")
          OutVect!.addItem(Translate!.getTranslation("AON_WARNING:_THIS_REGISTER_IS_OUT_OF_BALANCE_OR_MISSING_INFORMATION"))
          xwk=fnblank(columns-1)
          lines=lines+2
          break
    wend

rem --- Destroy the progress meter and run the next overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    update$=pgmdir$+"apu_chkregister.aon"
    if errors
        gosub Display_Message
        if special_flag$<>"Y" then update$=""
    endif

    overlay$=update$
    if gl$="Y" and non_voids>0 overlay$=pgmdir$+"glr_recap.aon"

rem --- run overlay$,err=std_exit

    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit

set_linecount: rem --- Report Heading

    lines=headings+1
    lines=lines+3

    return

print_total: rem --- Print totals

    if lines+2>maxlines gosub set_linecount

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))

    xwk = fnblank(2)

    OutVect!.addItem(total$)
    OutVect!.addItem(str(pt[0]))
    OutVect!.addItem(str(pt[1]))
    OutVect!.addItem(str(pt[2]))

    if retention
        retention$=fnretention$(retention,pt[3],m1$)
        OutVect!.addItem(retention$)
    endif


    lines=lines+2
    return

print_voided: rem --- Print a voided check

    if lines+1>maxlines gosub set_linecount

    OutVect!.addItem(apw01a.check_no$)
    OutVect!.addItem(fndate$(apw01a.check_date$))
    OutVect!.addItem(Translate!.getTranslation("AON_(VOID)"))

    if retention
        xwk = fnblank(4)
    else
        xwk = fnblank(3)
    endif    

    lines=lines+1
    return

type_break: rem --- AP Type break

    while lasttype$<>""
          if multitypes
             total$=Translate!.getTranslation("AON_TOTAL_FOR_")+aptype$
             for x=0 to 3
                 pt[x]=at[x]
             next x
             gosub print_total
          endif
          break
    wend
    if multitypes=0 return
    if done return
    dim apm10a$:fattr(apm10a$),at[3]
    apm10a.firm_id$=apw01a.firm_id$
    apm10a.record_id_a$="A"
    apm10a.ap_type$=apw01a.ap_type$
    apm10a.code_desc$=nf$
    k$=apm10a.firm_id$+apm10a.record_id_a$+apm10a.ap_type$
    find record (apm10a_dev,key=k$,dom=*next) apm10a$
    aptype$=Translate!.getTranslation("AON_AP_TYPE_")+apm10a.ap_type$+" "+cvs(apm10a.code_desc$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(taskdesc$+" - "+aptype$)
    errors=errors+(pos(nf$=apm10a.code_desc$)=1)
    lines=maxlines+1
    lasttype$=apm10a.ap_type$
    return

glrecap: rem --- Standard GL Recap Routine

    if gl$="Y" call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,notused,account$,gldate$,
:                                            ref1$,ref2$,ref3$,memo$,amount,units,status
    non_voids=non_voids+1
    return

Display_Message: rem --- Display Message Routine

    msg_id$="AON_REG_ERRS"
    gosub disp_message
    if pos("PASSVALID"=msg_opt$)<>0 special_flag$="Y"
    return

rem --- Functions

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnretention$: Return null string or masked amount

    def fnretention$(q1,q2,q1$)
        q2$=""
        if q1 q2$=str(q2:q1$)
        return q2$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

rem #endinclude std_end.src

    end
