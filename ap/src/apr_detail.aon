rem Vendor Detail Listing
rem Copyright BASIS International Ltd.  All Rights Reserved.
rem Program ID: apr_vendinv_irpt.aon  <Dec 10, 2008>

    setesc std_error
    seterr std_error

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

    use ::ado_rptControl.src::ReportControl
    
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 50; rem -50 keeps it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 50

rem --- Get HashMap of Values in Options Entry Form

    params! = Option!.getOptionMap()

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    user_id$=sysinfo.user_id$
    proc_date$=date(jul(num(sysinfo.system_date$(1,4)),num(sysinfo.system_date$(5,2)),num(sysinfo.system_date$(7,2))):stbl("+DATE_MASK"))
    firm_id$=sysinfo.firm_id$
	firm_name$=sysinfo.firm_name$
	
rem --- Open files

    num_files=6
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="APS_PARAMS",     open_opts$[1]="OTA"
    open_tables$[2]="APM_EMAILFAX",   open_opts$[2]="OTA"
    open_tables$[3]="APM_VENDREPL",   open_opts$[3]="OTA"
    open_tables$[4]="APM_VENDCMTS",   open_opts$[4]="OTA"
    open_tables$[5]="APM_VENDADDR",   open_opts$[5]="OTA"
    open_tables$[6]="APM_VENDHIST",   open_opts$[6]="OTA"

    gosub open_tables

    aps_params_dev=num(open_chans$[1])
    dim aps_params$:open_tpls$[1]

rem --- Close files after ensuring they exist

    num_files=5
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="APM_EMAILFAX",   open_opts$[1]="CX"
    open_tables$[2]="APM_VENDREPL",   open_opts$[2]="CX"
    open_tables$[3]="APM_VENDCMTS",   open_opts$[3]="CX"
    open_tables$[4]="APM_VENDADDR",   open_opts$[4]="CX"
    open_tables$[5]="APM_VENDHIST",   open_opts$[5]="CX"

    gosub open_tables

rem --- retrieve retention value from param file

    readrecord(aps_params_dev,key=firm_id$+"AP00",dom=*next)aps_params$
    
rem --- Set additional params

    params!.put("FIRM_ID",firm_id$)
	params!.put("FIRM_NAME",firm_name$)
    params!.put("REPORT_NAME",sysinfo.task_desc$)
    params!.put("BARISTA_WD",dir(""))       
    if params!.get("VENDOR_ID_2")="" then params!.put("VENDOR_ID_2","~~~~~~")    
    params!.put("RETENTION",aps_params.ret_flag$)
    
    rem --- because temp vendor flag can be empty, N or Y in Addon,
    rem --- have set up the WHERE clause in iReport SQL to look for
    rem --- apm_vendmast.temp_vend = temp_vend_1 or 2 or 3,
    rem --- as set below
    
    switch pos(params!.get("VENDOR_TYPE")="APT")
        case 1; rem all vendors, so allow for any state of temp vend flag
            params!.put("TEMP_VEND_1","")
            params!.put("TEMP_VEND_2","N")
            params!.put("TEMP_VEND_3","Y")
        break
        case 2; rem permanent vendors, so allow for empty or N in temp vend flag
            params!.put("TEMP_VEND_1","")
            params!.put("TEMP_VEND_2","N")
            params!.put("TEMP_VEND_3","N")
        break
        case 3; rem temp vendors, so only allow for Y in temp vend flag
            params!.put("TEMP_VEND_1","Y")
            params!.put("TEMP_VEND_2","Y")
            params!.put("TEMP_VEND_3","Y")
        break
        case default; rem make same as all vendors, so allow for any state of temp vend flag
            params!.put("TEMP_VEND_1","")
            params!.put("TEMP_VEND_2","N")
            params!.put("TEMP_VEND_3","Y")
        break    
    swend

rem --- Make Document Archive Record and Get ID

    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=rd_alias_id$
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$="DOC_ID-NOREPRINT"
    gosub document_whse
    rd_archive_action$=""

rem --- Document Output Report Parameters

    params!.put("DOC_NO",rd_doc_id$)
    params!.put("DATE_REP",rep_date$+"  "+rep_time$)

rem --- Add masks to params!

	call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","I","",msk$,0,0
	masks$="gl_id_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","U","",msk$,0,0
	masks$=masks$+"ap_unit_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","A","",msk$,0,0
	masks$=masks$+"ap_amt_mask^"+msk$+"|"

	params!.put("MASKS",masks$)

rem --- Build Pattern and Replacement string from Vendor Mask

		call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",msk$,0,0
		pattern=pos("-"=msk$,1,0)
		replacement$=""
		if pattern=0
			pattern$="("+pad(".",len(msk$))+")"
			replacement$="$1"
		else
			pattern$="("
			for x9=1 to len(msk$)
				if msk$(x9,1)<>"-"
					pattern$=pattern$+"."
				else
					pattern$=pattern$+")("
				endif
			next x9
			pattern$=pattern$+")"
			for x9=1 to pattern+1
				replacement$=replacement$+"$"+str(x9)+"-"
			next x9
			replacement$=replacement$(1,len(replacement$)-1)
		endif

		params!.put("VEND_PATTERN",pattern$)
		params!.put("VEND_REPLACE",replacement$)

rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)
    repTitle!=sysinfo.task_desc$+"_"+rd_doc_id$
    repTitle$=repTitle!.replace(" ","_")
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "VendorDetail"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"

    declare BBJasperReport report!
    
rem --- Check for user authentication

    dbserver$="localhost"
    dbsqlport$=":2001"
    rem dbtimeout$="&socket_timeout=5000"
  
    dbserver$=stbl("+DBSERVER",err=*next)
    dbsqlport$=":"+stbl("+DBSQLPORT",err=*next)
    dbssl=num(stbl("+DBSSL",err=*next))
    rem dbtimeout$="&socket_timeout="+stbl("+DBTIMEOUT",err=*next)
    
    if dbssl
        dbssl$="&ssl=true"
    else
        dbssl$="&ssl=false"
    endif

    url_user$="&user=guest"
    if stbl("!DSUDDB",err=*endif)<>"" then
        url_user$=""
    endif
	
	dbname$ = stbl("+DBNAME")
	dbname_api$ = stbl("+DBNAME_API")
    if pos("jdbc:apache"=cvs(dbname$,8))=1 then
        url$ = dbname$
    else
		if pos("jdbc:"=cvs(dbname$,8))=1 then			
			url$=dbname$+url_user$+dbssl$
		else
			url$ = "jdbc:basis:"+dbserver$+dbsqlport$+"?database="+dbname_api$+url_user$+dbssl$
		endif
    endif

    report! = new BBJasperReport(filename$,url$)
    report!.putParams(params!)

    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)
    report!.setLocale(locale$)

rem --- Fill Report and Show

    report!.fill(1)
    
    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path
    
    declare BBJasperViewerWindow viewerWindow!
    viewerWindow! = new BBJasperViewerWindow(report!,0,0,screen_width,screen_height,repTitle$,$00080093$)

    viewerControl! = viewerWindow!.getViewerControl()
    viewerControl!.setGoogleDefaultDocument(repTitle$)
    viewerControl!.setDefaultSaveFolder(rd_doc_path$)
    viewerControl!.setDefaultSaveFile(repTitle$)

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    rem --- setReleaseOnClose(0) not needed, but clarifies that we don't want BBjasper to release when we close the viewer - we'll handle close processing here via close_win
    rem --- show(0) tells BBjasper to be modeless, i.e., show the viewer, then return here for process_events
    saveMenuButton! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    saveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnSaveMenuButton")

    emailToolButton! = viewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    emailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnEmailToolButton")

    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)

	declare BBjTopLevelWindow bbjWindow!
	bbjWindow!= viewerWindow!.getViewerWindow()
	cancelled=1
	bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"close_win",err=*next); cancelled=0
    if cancelled then goto close_win

rem --- Event Control

    process_events,err=*same
    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_tmp_dir$=stbl("+DOC_DIR_PDF",err=*endif)
        rd_temp_wd$=dsk("")+dir("")
        if pos(":"=rd_tmp_dir$) setdrive rd_tmp_dir$(1,pos(":"=rd_tmp_dir$)-1),err=*next
        chdir rd_tmp_dir$,err=*next
        rd_doc_path$=dsk("")+dir("")
        if pos(":"=rd_temp_wd$) setdrive rd_temp_wd$(1,pos(":"=rd_temp_wd$)-1)
        chdir rd_temp_wd$
    endif

    return

OnSaveMenuButton:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_name$=repTitle$+".pdf"
        rd_doc_ext$="PDF"
        report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif
    return    

OnEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

close_win:rem --- Viewer Window Closed
rem --- see if this report is set up for report control (email/fax)
rem --- next_overlay$ (and stbl("+AUTO_SEND")) will get set only if this report is defined for automated email/faxing
      
    if Option!<>null()
        rpt_id$=Option!.getAlias()
    else
        rpt_id$=pgm(-2)
        rpt_id$=rpt_id$(max(pos("/"="/"+rpt_id$,-1),pos("\"="\"+rpt_id$,-1)))
        rpt_id$=rpt_id$(1,pos("."=rpt_id$+".")-1)
        rpt_id$=cvs(rpt_id$,4)
    endif

    reportControl!=new ReportControl()
    reportControl!.setDocExtension("pdf")
    tmp$=reportControl!.getReportControl(rpt_id$)
    next_overlay$=iff(tmp$<>"",tmp$,overlay$)
    
    auto_send$=stbl("+AUTO_SEND",err=*next)
    if auto_send$<>"" then dummy$=stbl("+AUTO_SEND",auto_send$+rd_doc_id$+"^");rem add doc id ourselves for jaspers; DocOut adds it for DocOut reports

    viewerWindow!.destroy()
    rdForm!.destroy(err=*next)
    
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next    
    if tcb(13) then exit
    release

connect_err:rem --- Connection Error

    declare java.lang.Exception Exception!
    Exception! = bbjapi().getLastException()
    if Exception! = null() then 
       x = msgbox(errmes(-1),16,"Connection Failed")
    else
       x = msgbox(Exception!.getLocalizedMessage(),16,"Connection Failed")
    endif

    release
    
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

std_exit: rem --- Exit Program

    exit


