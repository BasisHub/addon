rem Vendor Open Invoice Listing
rem Proprietary Software. BASIS International Ltd.
rem Program ID: apr_vendinv_irpt.aon  <Dec 10, 2008>

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow

    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 50; rem -50 keeps it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 50
    
rem --- Get HashMap of Values in Options Entry Form

    params! = Option!.getOptionMap()

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    user_id$=sysinfo.user_id$
    proc_date$=date(jul(num(sysinfo.system_date$(1,4)),num(sysinfo.system_date$(5,2)),num(sysinfo.system_date$(7,2))):stbl("+DATE_MASK"))
    firm_id$=sysinfo.firm_id$
	firm_name$=sysinfo.firm_name$
	
rem --- Open files

    num_files=6
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="APS_PARAMS",     open_opts$[1]="OTA"
    open_tables$[2]="APM_EMAILFAX",   open_opts$[2]="OTA"
    open_tables$[3]="APM_VENDREPL",   open_opts$[3]="OTA"
    open_tables$[4]="APM_VENDCMTS",   open_opts$[4]="OTA"
    open_tables$[5]="APM_VENDADDR",   open_opts$[5]="OTA"
    open_tables$[6]="APM_VENDHIST",   open_opts$[6]="OTA"

    gosub open_tables

    aps_params_dev=num(open_chans$[1])
    dim aps_params$:open_tpls$[1]

rem --- Close files after ensuring they exist

    num_files=5
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="APM_EMAILFAX",   open_opts$[1]="CX"
    open_tables$[2]="APM_VENDREPL",   open_opts$[2]="CX"
    open_tables$[3]="APM_VENDCMTS",   open_opts$[3]="CX"
    open_tables$[4]="APM_VENDADDR",   open_opts$[4]="CX"
    open_tables$[5]="APM_VENDHIST",   open_opts$[5]="CX"

    gosub open_tables

rem --- retrieve retention value from param file

    readrecord(aps_params_dev,key=firm_id$+"AP00",dom=*next)aps_params$
    
rem --- Set additional params

    params!.put("FIRM_ID",firm_id$)
	params!.put("FIRM_NAME",firm_name$)
    params!.put("BARISTA_WD",dir(""))       
    if params!.get("VENDOR_ID_2")="" then params!.put("VENDOR_ID_2","~~~~~~")    
    params!.put("RETENTION",aps_params.ret_flag$)
    
    rem --- because temp vendor flag can be empty, N or Y in Addon,
    rem --- have set up the WHERE clause in iReport SQL to look for
    rem --- apm_vendmast.temp_vend = temp_vend_1 or 2 or 3,
    rem --- as set below
    
    switch pos(params!.get("VENDOR_TYPE")="APT")
        case 1; rem all vendors, so allow for any state of temp vend flag
            params!.put("TEMP_VEND_1","")
            params!.put("TEMP_VEND_2","N")
            params!.put("TEMP_VEND_3","Y")
        break
        case 2; rem permanent vendors, so allow for empty or N in temp vend flag
            params!.put("TEMP_VEND_1","")
            params!.put("TEMP_VEND_2","N")
            params!.put("TEMP_VEND_3","N")
        break
        case 3; rem temp vendors, so only allow for Y in temp vend flag
            params!.put("TEMP_VEND_1","Y")
            params!.put("TEMP_VEND_2","Y")
            params!.put("TEMP_VEND_3","Y")
        break
        case default; rem make same as all vendors, so allow for any state of temp vend flag
            params!.put("TEMP_VEND_1","")
            params!.put("TEMP_VEND_2","N")
            params!.put("TEMP_VEND_3","Y")
        break    
    swend

rem --- Make Document Archive Record and Get ID

    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=rd_alias_id$
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$=rd_out_status$

call rd_dir_syp$+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       "DOC_ID-NOREPRINT"

rem --- Document Output Report Parameters

    params!.put("DOC_NO",rd_doc_id$)
    params!.put("DATE_REP",rep_date$+"  "+rep_time$)
    
rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)
rem reportDir$=reportDir$+"testing/";rem testing SQL vs SPROC driven; rem this for SQL version CH
    reportTitle$="Vendor Detail Listing"
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "VendorDetail"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"

    declare BBJasperReport report!
    
rem --- Check for user authentication

    dbserver$="localhost"
    dbsqlport$=":2001"
    dbtimeout$="&socket_timeout=5000"
  
    dbserver$=stbl("+DBSERVER",err=*next)
    dbsqlport$=":"+stbl("+DBSQLPORT",err=*next)
    dbssl=num(stbl("+DBSSL",err=*next))
    dbtimeout$="&socket_timeout="+stbl("+DBTIMEOUT")
    
    if dbssl
        dbssl$="&ssl=true"
    else
        dbssl$="&ssl=false"
    endif

    url_user$="&user=guest"
    if stbl("!DSUDDB",err=*endif)<>"" then
        url_user$=""
    endif
	
	dbname$ = stbl("+DBNAME")
	dbname_api$ = stbl("+DBNAME_API")
    if pos("jdbc:apache"=cvs(dbname$,8))=1 then
        url$ = dbname$
    else
		if pos("jdbc:"=cvs(dbname$,8))=1 then			
			url$=dbname$+url_user$
		else
			url$ = "jdbc:basis:"+dbserver$+dbsqlport$+"?database="+dbname_api$+url_user$+dbssl$+dbtimeout$
		endif
    endif

    report! = new BBJasperReport(filename$,url$)
    report!.putParams(params!)

    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)
    report!.setLocale(locale$)

rem --- Fill Report and Show

    declare BBJasperViewerWindow viewerWindow!

    report!.fill()
    viewerWindow! = new BBJasperViewerWindow(report!,0,0,screen_width,screen_height,reportTitle$,$93$)
    viewerWindow!.setReleaseOnClose(1)
    viewerWindow!.show(0)
        
rem --- Event Control

    process_events,err=*same

    release

connect_err:rem --- Connection Error

    declare java.lang.Exception Exception!
    Exception! = bbjapi().getLastException()
    if Exception! = null() then 
       x = msgbox(errmes(-1),16,"Connection Failed")
    else
       x = msgbox(Exception!.getLocalizedMessage(),16,"Connection Failed")
    endif

    release
    
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return


