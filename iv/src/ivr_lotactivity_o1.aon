rem --- Lot/Serial Activity Report (Report Overlay)
rem --- Program ivr_lotactivity_o1.aon v8.0.0 16Jul2007 (ivr_6b)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:10:07)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        seterr std_error
        setesc std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Initializations
    
        precision p[1]
        dim files[3],period$[1],item[12]
        files[2]=ivm17_dev
        files[3]=ivm02_dev
        t0$=""
        t1$=""
        x$="Item"
        if sequence$="L" x$="Lot/Serial Number"
        when$=sysinfo.system_date$
        clock$=""
        h9$=""
        number=0
        width=132
        page=0
        done=0
        selection$="END"
        if sequence$="I" then headings=5 else headings=4
        period$[0]=begyear$+begper$
        period$[1]=endyear$+endper$
        more=1

        call pgmdir$+"adc_progress.aon","N","","","","",0,ivm07_dev,1,meter_num,status

rem --- Report headings

        dim headings$[headings+1]
        h8$="All Item Types"
        if type$<>"" h8$="Item Type "+type$
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$+" By "+x$+" From Period "+begper$+" "+begyear$+" Through Period "+endper$+" "+endyear$
        if begitem$="" headings$[2]="From Item: First" else headings$[2]="From Item: "+begitem$
        if enditem$="" headings$[2]=headings$[2]+" -- To Item: Last" else headings$[2]=headings$[2]+" -- To Item: "+enditem$
        if begprod$="" headings$[3]="From Product: First" else headings$[3]="From Product: "+begprod$                
        if endprod$="" headings$[3]=headings$[3]+" -- To Product: Last" else headings$[3]=headings$[3]+" -- To Product: "+endprod$
        if cvs(beglot$,2)="" headings$[4]="From Lot/Serial Number: First" else headings$[4]="From Lot/Serial Number: "+beglot$
        if cvs(endlot$,2)="" headings$[4]=headings$[4]+"-- To Lot/Serial Number: Last" else headings$[4]=headings$[4]+" -- To Lot/Serial Number: "+endlot$
        if sequence$="I" then headings$[5]="[HEADER]"
        if ivs01a.lotser_flag$="L" p8$="Lot #" else p8$="Serial #"
        if sequence$="I" then column_head$="Item^Lot/Serial #" else column_head$=p8$+"^Whse Item"

rem ----  column heading
        
        dim columns$[10,10]
        columns=11
        columns$[0,0]=column_head$,            columns$[0,1]="C",columns$[0,2]="15"
        columns$[1,0]="Received^or Built",     columns$[1,1]="C",columns$[1,2]="10"
        columns$[2,0]="Sold or^Issued",        columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]=vh$,                     columns$[3,1]="C",columns$[3,2]="10"
        columns$[4,0]="Prod",                  columns$[4,1]="C",columns$[4,2]="5"
        columns$[5,0]="Beginning^Balance",     columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m2$,columns$[5,10]="T"
        columns$[6,0]="Received^& Built",      columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$,columns$[6,10]="T"
        columns$[7,0]="Sold &^Issued",         columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$,columns$[7,10]="T"
        columns$[8,0]="Adjustments^& Returns", columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m2$,columns$[8,10]="T"
        columns$[9,0]="Transfers^In & Out",    columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m2$,columns$[9,10]="T"
        columns$[10,0]="Ending^Balance",       columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m2$,columns$[10,10]="T"

rem --- Position lot/serial master
    
        if sequence$="I" then
            ivm07a_key$=firm_id$+begwhse$
            if begwhse$<>"" and begitem$<>"" ivm07a_key$=ivm07a_key$+begitem$+beglot$
            read (ivm07_dev,key=ivm07a_key$,dom=*next) ivm07a$ 
        endif

        if sequence$="L" then
            ivm08a_key$=firm_id$+beglot$
            if beglot$<>"" and begwhse$<>"" ivm08a_key$=ivm08a_key$+begwhse$+begitem$
            read (ivm08_dev,key=ivm08a_key$,dom=*next)
        endif
   
rem --- Get next lot/serial master

        while more
            if sequence$ ="I" then
                ivm07a_key$=key(ivm07_dev,end=*break)
                if pos(firm_id$=ivm07a_key$)<>1 then break
                if endwhse$<>"" and ivm07a_key.warehouse_id$>endwhse$ then break
                if begitem$<>"" and ivm07a_key.item_id$<begitem$ then read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+begitem$,dom=*continue);continue
                if enditem$<>"" and ivm07a_key.item_id$>enditem$ then read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+$FF$,dom=*continue);continue
                if beglot$<>"" and ivm07a_key.lotser_no$<beglot$ then read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+ivm07a_key.item_id$+beglot$,dom=*continue);continue
                if endlot$<>"" and ivm07a_key.lotser_no$>endlot$ then read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+ivm07a_key.item_id$+$FF$,dom=*continue);continue
                x$=ivm07a_key.warehouse_id$+" "+ivm07a_key.item_id$+" "+ivm07a_key.lotser_no$
            else
                ivm08a_key$=key(ivm08_dev,end=*break)
                if pos(firm_id$=ivm08a_key$)<>1 then break
                if endlot$<>"" if ivm08a_key.lotser_no$>endlot$ then break
                if begwhse$<>"" and ivm08a.warehouse_id$<begwhse$ then read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+begwhse$,dom=*continue);continue
                if endwhse$<>"" and ivm08a.warehouse_id$>endwhse$ then read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+$FF$,dom=*continue);continue
                if begitem$<>"" and ivm08a.item_id$<begitem$ then read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+ivm08a_key.warehouse_id$+begitem$,dom=*continue);continue
                if enditem$<>"" and ivm08a.item_id$>enditem$ then read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+ivm08a_key.warehouse_id$+$FF$,dom=*continue);continue
                read (ivm08_dev)
                ivm07a_key$=ivm08a_key.firm_id$+ivm08a_key.warehouse_id$+ivm08a_key.item_id$+ivm08a_key.lotser_no$
                x$=ivm08a_key.item_id$+" "+ivm08a_key.warehouse_id$+" "+ivm08a_key.lotser_no$
            endif

rem --- Retrieve lot/serial master

            read record (ivm07_dev,key=ivm07a_key$,dom=*continue) ivm07a$
            if ocb$="O" if ivm07a.qty_on_hand=0 continue
            if ocb$="C" if ivm07a.qty_on_hand<>0 continue
            
            ivm01a_key$=firm_id$+ivm07a_key.item_id$
            ivm01a.item_desc$="(Not On File)"
            ivm01a.product_type$=""
            read record (ivm01_dev,key=ivm01a_key$,dom=activity) ivm01a$
            if type$<>"" if ivm01a.item_type$<>type$ continue
            if begprod$<>"" if ivm01a.product_type$<begprod$ continue
            if endprod$<>"" if ivm01a.product_type$>endprod$ continue

activity: rem --- Retrieve item and activity

            call pgmdir$+"adc_progress.aon","S","","","",ivm07a_key.lotser_no$,0,0,1,meter_num,status

            dim item$[3],activity[12]
            action$="L"
            item$[0]=firm_id$
            item$[1]=ivm07a_key.warehouse_id$
            item$[2]=ivm07a_key.item_id$
            item$[3]=ivm07a_key.lotser_no$
            call pgmdir$+"ivc_whseact.aon",action$,files[all],item$[all],period$[all],activity[all],status
            call pgmdir$+"ivc_periodqty.aon",selection$,activity[all],balance

rem --- Format detail line fields

            receipt$=ivm07a.lstrec_date$
            issued$=ivm07a.lstsal_date$
            if ivm07a.lstblt_date$>receipt$ receipt$=ivm07a.lstblt_date$
            if ivm07a.lstiss_date$>issued$ issued$=ivm07a.lstiss_date$
            if cvs(receipt$,2)<>"" receipt$=fndate$(receipt$)
            if cvs(issued$,2)<>"" issued$=fndate$(issued$)

            if ap$<>"N" then
                apm01a_key$=firm_id$+ivm07a.vendor_id$
                apm01a.vendor_name$=""
                find record (apm01_dev,key=apm01a_key$,dom=*next) apm01a$
                vendor_id$=ivm07a.vendor_id$
                vendor_name$=apm01a.vendor_name$
            endif

rem --- Print detail line by item

            if sequence$="I" then
                if ivm07a_key.warehouse_id$<>t0$ gosub whse_break
                if ivm07a_key.item_id$<>t1$ gosub item_break
                if h9$<>"" gosub item_subheading

                OutVect!.addItem("   "+ivm07a.lotser_no$)
                OutVect!.addItem(receipt$)
                OutVect!.addItem(issued$)
                OutVect!.addItem(vendor_id$)
                OutVect!.addItem("")
                OutVect!.addItem(str(activity[0]))
                OutVect!.addItem(str(activity[1]))
                OutVect!.addItem(str(activity[3]))
                OutVect!.addItem(str(activity[5]))
                OutVect!.addItem(str(activity[6]))
                OutVect!.addItem(str(balance))
                xwk=fnblank(3)
                OutVect!.addItem("  "+vendor_name$)
                xwk=fnblank(2)
                OutVect!.addItem(str(activity[2]))
                OutVect!.addItem(str(activity[4]))
                OutVect!.addItem(str(activity[8]))
                OutVect!.addItem(str(activity[7]))
                OutVect!.addItem("")
                number=number+1              

rem --- Accumulate item totals

                for x=0 to 11
                    item[x]=item[x]+activity[x]
                next x
                item[12]=item[12]+balance
                continue
            endif

rem --- Print detail line by lot/serial number

            if sequence$="L"then  
                if ivm07a_key.item_id$<>t1$ gosub assign_item_head
                OutVect!.addItem(ivm07a.lotser_no$)
                OutVect!.addItem(receipt$)
                OutVect!.addItem(issued$)
                OutVect!.addItem(vendor_id$)
                OutVect!.addItem(ivm01a.product_type$)
                OutVect!.addItem(str(activity[0]))
                OutVect!.addItem(str(activity[1]))
                OutVect!.addItem(str(activity[3]))
                OutVect!.addItem(str(activity[5]))
                OutVect!.addItem(str(activity[6]))
                OutVect!.addItem(str(balance))
                OutVect!.addItem("   "+h9$)
                xwk=fnblank(2)
                OutVect!.addItem("  "+vendor_name$)
                OutVect!.addItem("")
                OutVect!.addItem("")
                OutVect!.addItem(str(activity[2]))
                OutVect!.addItem(str(activity[4]))
                OutVect!.addItem(str(activity[8]))
                OutVect!.addItem(str(activity[7]))
                OutVect!.addItem("")
                number=number+1  
            endif
        wend

done: rem --- All done

        if number<>0 then
            done=1
            if sequence$="I" gosub item_break
        else
            OutVect!.addItem("No Lot/Serial Number Activity Found")  
            xwk=fnblank(columns-1)
        endif
        goto std_exit


item_subheading: rem --- Item subheading
  
        xwk=fnblank(columns)
        OutVect!.addItem(h9$)
        xwk=fnblank(3)
        OutVect!.addItem(ivm01a.product_type$)
        xwk=fnblank(columns-5)
        xwk=fnblank(columns)
        h9$=""
        return

whse_break: rem --- Warehouse Break

        if t0$<>"" then gosub item_break
        let t0$=ivm07a_key.warehouse_id$,ivm10c.short_name$="(Not on File)"
        find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
        let x$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2)+" For "+h8$
        BrkVect!.addItem(str(OutVect!.size()/(columns)))
        HdrVect!.addItem(x$)
        return

item_break: rem --- Item Break

        if t1$<>"" 
            x$="   Total For Item "+t1$
            xwk=fnblank(columns)
            TotVect!.addItem(str(OutVect!.size()/(columns)))
            OutVect!.addItem(x$)
            xwk=fnblank(4)
            OutVect!.addItem(str(item[0]))
            OutVect!.addItem(str(item[1]))
            OutVect!.addItem(str(item[3]))
            OutVect!.addItem(str(item[5]))
            OutVect!.addItem(str(item[7]))
            OutVect!.addItem(str(item[12]))
            xwk=fnblank(6)
            OutVect!.addItem(str(item[2]))
            OutVect!.addItem(str(item[4]))
            OutVect!.addItem(str(item[6]))
            OutVect!.addItem(str(item[8]))
            xwk=fnblank(1)
            xwk=fnblank(columns)
        endif
assign_item_head:
        if done return
        dim item[12]
        let t1$=ivm07a_key.item_id$,ivm01a_key$=firm_id$+t1$,ivm01a.item_desc$="(Not On File)",ivm01a.product_type$=""
        find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$
        let description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        if sequence$="I" h9$=ivm01a.item_id$+" "+description$
        if sequence$="L" h9$=whse$+" "+ivm01a.item_id$+" "+description$
        call pgmdir$+"adc_progress.aon","S","","","",ivm07a_key.warehouse_id$+" "+ivm07a_key.item_id$,0,0,1,meter_num,status
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
