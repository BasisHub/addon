rem --- Lot/Serial Activity Report (Report Overlay)
rem --- Program ivr_lotactivity_o1.aon v8.0.0 16Jul2007 (ivr_6b)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:10:07)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Use function object

    use ::ado_func.src::func

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector BrkVect!
    declare BBjVector HdrVect!
    declare BBjVector TotVect!

    OutVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]
    dim files[3],period$[1],item[12]
    files[2]=ivm17_dev
    files[3]=ivm02_dev
    t0$=""
    t1$=""
    x$=Translate!.getTranslation("AON_ITEM")
    if sequence$="L" x$=Translate!.getTranslation("AON_LOT/SERIAL_NUMBER")
    when$=sysinfo.system_date$
    clock$=""
    h9$=""
    number=0
    width=132
    page=0
    done=0
    selection$="END"
    if sequence$="I" then headings=6 else headings=5
    period$[0]=begyear$+begper$
    period$[1]=endyear$+endper$
    more=1
    recs=0
    total_recs=0

    call pgmdir$+"adc_progress.aon","N","IVM_LSMASTER","","","",0,ivm07_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem --- Report headings

    dim headings$[headings+1]
    h8$=Translate!.getTranslation("AON_ALL_ITEM_TYPES")
    if type$<>"" h8$=Translate!.getTranslation("AON_ITEM_TYPE_")+type$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_")+x$+Translate!.getTranslation("AON__FROM_PERIOD_")+begper$+" "+begyear$+Translate!.getTranslation("AON__THROUGH_PERIOD_")+endper$+" "+endyear$
    if begitem$="" headings$[2]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[2]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" headings$[2]=headings$[2]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[2]=headings$[2]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if begprod$="" headings$[3]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    if cvs(beglot$,2)="" headings$[4]=Translate!.getTranslation("AON_FROM_LOT/SERIAL_NUMBER:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_LOT/SERIAL_NUMBER:_")+beglot$
    if cvs(endlot$,2)="" headings$[4]=headings$[4]+Translate!.getTranslation("AON_--_TO_LOT/SERIAL_NUMBER:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_LOT/SERIAL_NUMBER:_")+endlot$
    headings$[5]=Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_ITEMS")+" = "+inactive$
    if sequence$="I" then headings$[6]="[HEADER]"
    if ivs01a.lotser_flag$="L" p8$=Translate!.getTranslation("AON_LOT_#") else p8$=Translate!.getTranslation("AON_SERIAL_#")
    if sequence$="I" then column_head$=Translate!.getTranslation("AON_ITEM^LOT/SERIAL_#") else column_head$=p8$+Translate!.getTranslation("AON_^WHSE_ITEM")

rem ----  column heading

    dim columns$[10,10]
    columns=11
    columns$[0,0]=column_head$,            columns$[0,1]="C",  columns$[0,2]="15"
    columns$[1,0]=Translate!.getTranslation("AON_RECEIVED^OR_BUILT"),     columns$[1,1]="C",  columns$[1,2]="10"
    columns$[2,0]=Translate!.getTranslation("AON_SOLD_OR^ISSUED"),        columns$[2,1]="C",  columns$[2,2]="10"
    columns$[3,0]=vh$,                     columns$[3,1]="C",  columns$[3,2]="10"
    columns$[4,0]=Translate!.getTranslation("AON_PROD"),                  columns$[4,1]="C",  columns$[4,2]="5"
    columns$[5,0]=Translate!.getTranslation("AON_BEGINNING^BALANCE"),     columns$[5,1]="N",  columns$[5,2]=str(m2),  columns$[5,3]=m2$,  columns$[5,10]="T"
    columns$[6,0]=Translate!.getTranslation("AON_RECEIVED^&_BUILT"),      columns$[6,1]="N",  columns$[6,2]=str(m2),  columns$[6,3]=m2$,  columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_SOLD_&^ISSUED"),         columns$[7,1]="N",  columns$[7,2]=str(m2),  columns$[7,3]=m2$,  columns$[7,10]="T"
    columns$[8,0]=Translate!.getTranslation("AON_ADJUSTMENTS^&_RETURNS"), columns$[8,1]="N",  columns$[8,2]=str(m2),  columns$[8,3]=m2$,  columns$[8,10]="T"
    columns$[9,0]=Translate!.getTranslation("AON_TRANSFERS^IN_&_OUT"),    columns$[9,1]="N",  columns$[9,2]=str(m2),  columns$[9,3]=m2$,  columns$[9,10]="T"
    columns$[10,0]=Translate!.getTranslation("AON_ENDING^BALANCE"),       columns$[10,1]="N", columns$[10,2]=str(m2), columns$[10,3]=m2$, columns$[10,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Position lot/serial master

    if sequence$="I" then
        ivm07a_key$=firm_id$+begwhse$
        if begwhse$<>"" and begitem$<>"" ivm07a_key$=ivm07a_key$+begitem$+beglot$
        read (ivm07_dev,key=ivm07a_key$,dom=*next) ivm07a$ 
    endif

    if sequence$="L" then
        ivm08a_key$=firm_id$+beglot$
        if beglot$<>"" and begwhse$<>"" ivm08a_key$=ivm08a_key$+begwhse$+begitem$
        read (ivm07_dev, knum="AO_LOT_WH_ITEM", key=ivm08a_key$, dom=*next)
    endif

rem --- Get next lot/serial master

    while more
        if sequence$ ="I" then
            ivm07a_key$ = key(ivm07_dev, end=*break)
            if pos(firm_id$=ivm07a_key$) <> 1 then break
            if endwhse$<>"" and ivm07a_key.warehouse_id$>endwhse$ then break
            if begitem$<>"" and ivm07a_key.item_id$<begitem$ then read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+begitem$,dom=*continue);continue
            if enditem$<>"" and ivm07a_key.item_id$>enditem$ then read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+$FF$,dom=*continue);continue
            if beglot$<>"" and ivm07a_key.lotser_no$<beglot$ then read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+ivm07a_key.item_id$+beglot$,dom=*continue);continue
            if endlot$<>"" and ivm07a_key.lotser_no$>endlot$ then read (ivm07_dev,key=ivm07a_key.firm_id$+ivm07a_key.warehouse_id$+ivm07a_key.item_id$+$FF$,dom=*continue);continue
            x$=ivm07a_key.warehouse_id$+" "+ivm07a_key.item_id$+" "+ivm07a_key.lotser_no$
        else
            ivm08a_key$ = key(ivm07_dev, end=*break)
            if pos(firm_id$=ivm08a_key$) <> 1 then break
            if endlot$<>"" if ivm08a_key.lotser_no$>endlot$ then break
            if begwhse$<>"" and ivm08a.warehouse_id$<begwhse$ then read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+begwhse$,dom=*continue);continue
            if endwhse$<>"" and ivm08a.warehouse_id$>endwhse$ then read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+$FF$,dom=*continue);continue
            if begitem$<>"" and ivm08a.item_id$<begitem$ then read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+ivm08a_key.warehouse_id$+begitem$,dom=*continue);continue
            if enditem$<>"" and ivm08a.item_id$>enditem$ then read (ivm08_dev,key=ivm08a_key.firm_id$+ivm08a_key.lotser_no$+ivm08a_key.warehouse_id$+$FF$,dom=*continue);continue
            ivm07a_key$=ivm08a_key.firm_id$+ivm08a_key.warehouse_id$+ivm08a_key.item_id$+ivm08a_key.lotser_no$
            x$=ivm08a_key.item_id$+" "+ivm08a_key.warehouse_id$+" "+ivm08a_key.lotser_no$
        endif

    rem --- Retrieve lot/serial master

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

        read record (ivm07_dev) ivm07a$
        if ocb$="O" and ivm07a.qty_on_hand=0 continue
        if ocb$="C" and ivm07a.qty_on_hand<>0 continue

        ivm01a_key$=firm_id$+ivm07a_key.item_id$
        ivm01a.item_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
        ivm01a.product_type$=""
        read record (ivm01_dev,key=ivm01a_key$,dom=activity) ivm01a$
        if type$<>"" and ivm01a.item_type$<>type$ continue
        if begprod$<>"" and ivm01a.product_type$<begprod$ continue
        if endprod$<>"" and ivm01a.product_type$>endprod$ continue
        rem -- Check for inactive item
        if inactive$="Y" and ivm01a.item_inactive$="Y" then continue

    activity: rem --- Retrieve item and activity

        dim item$[3],activity[12]
        action$="L"
        item$[0]=firm_id$
        item$[1]=ivm07a_key.warehouse_id$
        item$[2]=ivm07a_key.item_id$
        item$[3]=ivm07a_key.lotser_no$
        call pgmdir$+"ivc_whseact.aon",action$,files[all],item$[all],period$[all],activity[all],status
        if status = 999 then exitto std_exit
        call pgmdir$+"ivc_periodqty.aon",selection$,"",activity[all],balance,status
        if status = 999 then exitto std_exit

    rem --- Format detail line fields

        receipt$=ivm07a.lstrec_date$
        issued$=ivm07a.lstsal_date$
        if ivm07a.lstblt_date$>receipt$ receipt$=ivm07a.lstblt_date$
        if ivm07a.lstiss_date$>issued$ issued$=ivm07a.lstiss_date$
        if cvs(receipt$,2)<>"" receipt$=func.formatDate(receipt$)
        if cvs(issued$,2)<>"" issued$=func.formatDate(issued$)

        if ap$<>"N" then
            apm01a_key$=firm_id$+ivm07a.vendor_id$
            apm01a.vendor_name$=""
            find record (apm01_dev,key=apm01a_key$,dom=*next) apm01a$
            vendor_id$=ivm07a.vendor_id$
            vendor_name$=apm01a.vendor_name$
        endif

    rem --- Print detail line by item

        if sequence$="I" then
            if ivm07a_key.warehouse_id$<>t0$ gosub whse_break
            if ivm07a_key.item_id$<>t1$ gosub item_break
            if h9$<>"" gosub item_subheading

            OutVect!.addItem("   "+ivm07a.lotser_no$)
            OutVect!.addItem(receipt$)
            OutVect!.addItem(issued$)
            OutVect!.addItem(vendor_id$)
            OutVect!.addItem("")
            OutVect!.addItem(str(activity[0]))
            OutVect!.addItem(str(activity[1]))
            OutVect!.addItem(str(activity[3]))
            OutVect!.addItem(str(activity[5]))
            OutVect!.addItem(str(activity[6]))
            OutVect!.addItem(str(balance))
            xwk=fnblank(3)
            OutVect!.addItem("  "+vendor_name$)
            xwk=fnblank(2)
            OutVect!.addItem(str(activity[2]))
            OutVect!.addItem(str(activity[4]))
            OutVect!.addItem(str(activity[8]))
            OutVect!.addItem(str(activity[7]))
            OutVect!.addItem("")
            number=number+1
            recs=recs+1

        rem --- Accumulate item totals

            for x=0 to 11
                item[x]=item[x]+activity[x]
            next x

            item[12]=item[12]+balance
            continue
        endif

    rem --- Print detail line by lot/serial number

        if sequence$="L"then  
            if ivm07a_key.item_id$<>t1$ gosub assign_item_head
            OutVect!.addItem(ivm07a.lotser_no$)
            OutVect!.addItem(receipt$)
            OutVect!.addItem(issued$)
            OutVect!.addItem(vendor_id$)
            OutVect!.addItem(ivm01a.product_type$)
            OutVect!.addItem(str(activity[0]))
            OutVect!.addItem(str(activity[1]))
            OutVect!.addItem(str(activity[3]))
            OutVect!.addItem(str(activity[5]))
            OutVect!.addItem(str(activity[6]))
            OutVect!.addItem(str(balance))
            OutVect!.addItem("   "+h9$)
            xwk=fnblank(2)
            OutVect!.addItem("  "+vendor_name$)
            OutVect!.addItem("")
            OutVect!.addItem("")
            OutVect!.addItem(str(activity[2]))
            OutVect!.addItem(str(activity[4]))
            OutVect!.addItem(str(activity[8]))
            OutVect!.addItem(str(activity[7]))
            OutVect!.addItem("")
            number=number+1
            recs=recs+1
        endif
    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if number<>0 then
        done=1
        if sequence$="I" gosub item_break
    else
        OutVect!.addItem(Translate!.getTranslation("AON_NO_LOT/SERIAL_NUMBER_ACTIVITY_FOUND"))  
        xwk=fnblank(columns-1)
    endif

    goto std_exit


item_subheading: rem --- Item subheading

    xwk=fnblank(columns)
    OutVect!.addItem(h9$)
    xwk=fnblank(3)
    OutVect!.addItem(ivm01a.product_type$)
    xwk=fnblank(columns-5)
    xwk=fnblank(columns)
    h9$=""

    return

whse_break: rem --- Warehouse Break

    if t0$<>"" then gosub item_break
    t0$=ivm07a_key.warehouse_id$
    ivm10c.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x$=Translate!.getTranslation("AON_WAREHOUSE_")+t0$+" "+cvs(ivm10c.short_name$,2)+Translate!.getTranslation("AON__FOR_")+h8$
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)

    return

item_break: rem --- Item Break

    if t1$<>"" 
        x$=Translate!.getTranslation("AON____TOTAL_FOR_ITEM_")+t1$
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem(x$)
        xwk=fnblank(4)
        OutVect!.addItem(str(item[0]))
        OutVect!.addItem(str(item[1]))
        OutVect!.addItem(str(item[3]))
        OutVect!.addItem(str(item[5]))
        OutVect!.addItem(str(item[7]))
        OutVect!.addItem(str(item[12]))
        xwk=fnblank(6)
        OutVect!.addItem(str(item[2]))
        OutVect!.addItem(str(item[4]))
        OutVect!.addItem(str(item[6]))
        OutVect!.addItem(str(item[8]))
        xwk=fnblank(1)
        xwk=fnblank(columns)
    endif

    gosub assign_item_head

    return

assign_item_head: 

    if !done then
        dim item[12]
        t1$=ivm07a_key.item_id$
        ivm01a_key$=firm_id$+t1$
        ivm01a.item_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
        ivm01a.product_type$=""
        find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$
        description$ = func.displayDesc(ivm01a.item_desc$, p[3], p[4], p[5])
        if sequence$="I" then h9$=ivm01a.item_id$+" "+description$
        if sequence$="L" then h9$=whse$+" "+ivm01a.item_id$+" "+description$

        call pgmdir$+"adc_progress.aon","S","","","",ivm07a_key.warehouse_id$+" "+ivm07a_key.item_id$,0,0,1,meter_num,status
        if status = 999 then exitto std_exit
    endif

    return

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,ignore_status
    if status = 0 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
