rem --- Physical Inventory Register
rem --- Program ivr_va v8.0.0 09Jul2007 (ivr_va)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:45:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=18,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="ive-03",ids$[2]="IVE_PHYSICAL"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="ivm-02",ids$[4]="IVM_ITEMWHSE"
    files$[5]="ivm-04",ids$[5]="IVM_ITEMTIER"
    files$[6]="ivm-07",ids$[6]="IVM_LSMASTER"
    files$[7]="ivm-08",ids$[7]="IVX_LSXREF"
    files$[8]="IVC_PRODCODE",ids$[8]=files$[8]
    files$[9]="ivm-12",ids$[9]="IVM_ITEMACT"
    files$[10]="ivm-17",ids$[10]="IIVM_LSACT"
    files$[11]="ivt-01",ids$[11]="IVT_LSTRANS"
    files$[12]="ivt-02",ids$[12]="IVX_LSCUST"
    files$[13]="ivt-03",ids$[13]="IVX_LSVEND"
    files$[14]="ivt-04",ids$[14]="IVT_ITEMTRAN"
    files$[15]="ivw-04",ids$[15]="IVW_LFDET"
    files$[16]="ivw-10",ids$[16]="IVW_PHYSICAL"
    files$[17]="IVC_PHYSCODE",ids$[17]=files$[17]
    files$[18]="IVS_PARAMS",ids$[18]=files$[18]
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    ive03_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm04_dev=channels[5]
    ivm07_dev=channels[6]
    ivm08_dev=channels[7]
    ivm10a_dev=channels[8]
    ivm12_dev=channels[9]
    ivm17_dev=channels[10]
    ivt01_dev=channels[11]
    ivt02_dev=channels[12]
    ivt03_dev=channels[13]
    ivt04_dev=channels[14]
    ivw04_dev=channels[15]
    ivw10_dev=channels[16]
    ivm10p_dev=channels[17]
    ivs01a_dev=channels[18]

rem --- Dimension string templates

    dim ive03a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm04a$:templates$[5],ivm07a$:templates$[6],ivm08a$:templates$[7],
:       ivm10a$:templates$[8],ivm12a$:templates$[9],ivm17a$:templates$[10],
:       ivt01a$:templates$[11],ivt02a$:templates$[12],ivt03a$:templates$[13],
:       ivt04a$:templates$[14],ivw04a$:templates$[15],ivw10a$:templates$[16],
:       ivm10p$:templates$[17],ivs01a$:templates$[18]


rem --- Assign form input values to local variables

    table$=fnget_table$("")
    whse_Id$=fnget_fld_data$(table$,"whse_id")
    cycle$=fnget_fld_data$(table$,"cycle_id")
    status$=fnget_fld_data$(table$,"status")
    cutoff$=fnget_fld_data$(table$,"cut_off")
    tdate$=fnget_fld_data$(table$,"tdate")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    

rem --- Parameters

    dim p[5]
    firm_id$=sysinfo.firm_id$
    n2$="IV"
    ls$="N"
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=ivs01a.item_id_len
    p[1]=num(ivs01a.precision$)
    p[2]=ivs01a.ls_no_len
    p[3]=num(ivs01a.desc_len$)
    p[4]=num(ivs01a.desc_len$)
    p[5]=num(ivs01a.desc_len$)
    dw=p[3]+p[4]+p[5]
    if pos(ivs01a.lotser_flag$="SL")>0 ls$="Y"
    lf$=ivs01a.lifofifo$

rem --- Initializations

    precision num(ivs01a.precision$)
    dim headings$[3]
    dim o[10],item[6],cycle[6],report[6],lf_chans[2]
    clock$=""
    when$=sysinfo.system_date$
    l9=55
    l=l9+1
    width=132
    headings=2
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    lsh$=""
    done=0
    qh$="Quantity"
    th$="Total Value"
    if ls$="Y" lsh$="Lot/Serial Number"
    more=1
rem --- Additional file opens

    if ls$="Y" then
        files$[11]="ivm-08"
        files$[12]="ivm-17"
        files$[13]="ivt-01"
        files$[14]="ivt-02"
        files$[15]="ivt-03"
        files$[16]="ivm-07"
    endif
    if pos(lf$="LF") files$[17]="ivw-04",options$[17]="CL"
    call pgmdir$+"adc_fileopen.aon",1,11,17,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm08_dev=channels[11]
    ivm17_dev=channels[12]
    ivt01_dev=channels[13]
    ivt02_dev=channels[14]
    ivt03_dev=channels[15]
    ivm07_dev=channels[16]
    if pos(lf$="LF") ivw04_dev=channels[17],lf_chans[0]=ivm04_dev,lf_chans[1]=ivw04_dev,lf_chans[2]=ivm02_dev

rem --- Resize masks
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    x=m1+m2
    dim ph$(x,"-"),sh$(x,"-"),vh$(x,"-")
    ph$(fncenter(x,10),10)=" Physical "
    sh$(fncenter(x,8),8)=" System "
    vh$(fncenter(x,10),10)=" Variance "

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    main_context=resparams[0]
    if status goto std_exit

rem --- GOSUB FLOW_INITIALIZATIONS
rem --- Process input

    action$="R"
    whse$=ivs01a.warehouse_id$
    cutoff$=""
    quantity$="N"
    call pgmdir$+"ivc_ic.bbx",action$,channels[all],whse$,cutoff$,quantity$,fkey,status,my_context,throw$
    if fkey<>0 goto std_exit
    if status<>0 goto std_exit
    if throw$="Y" goto std_exit

rem --- Retrieve warehouse and build HEADINGS$

    find record (ivm10c_dev,key=firm_id$+"C"+whse$,dom=std_exit) ivm10c$
    headings$[1]=sysinfo.task_desc$+" For Warehouse "+x0$(4,2)+" "+cvs(x0$(6,24),2)
    if quantity$="Y" sqh$="Quantity"

rem --- Print positions

    o[10]=width-m1
    o[9]=o[10]-m2
    o[8]=o[9]-m1-1
    o[7]=o[8]-m2
    o[6]=o[7]-m1-1
    o[5]=o[6]-m2
    o[4]=o[5]-11
    o[3]=o[4]-3
    o[1]=3
    o[2]=o[3]-max(p[2],18)

rem --- Position file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    rem call pgmdir$+"adc_progress.aon","N","","","Printing","",17+p[0],0,1,meter_num,status
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivw10_dev,1,meter_num,status
    read (ivw10_dev,key=firm_id$,dom=*next)

rem --- Read next entry record
    while more
        ivw10a_key$=key(ivw10_dev,end=*continue)
        if pos(firm_id$=ivw10a_key$)<>1 continue
        read (ivw10_dev)

rem --- Position physical inventory record

        first$=ivw10a_key.firm_id$+whse$+ivw10a_key.cycle_code$
        read (ive03_dev,key=first$,dom=*next)

rem --- Read next physical inventory record
        while more
            ive03a_key$=key(ive03_dev,end=*break)
            if pos(first$=ive03a_key$)<>1 break
            read record (ive03_dev) ive03a$
            call pgmdir$+"adc_progress.aon","S","","","",ive03a.warehouse_id$+" "+ive03a.cycle_code$+" "+ive03a_key.inv_location$+" "+ive03a_key.item_id$,0,0,1,meter_num,status

rem --- Level breaks

            if ive03a.cycle_code$<>t0$ gosub Cycle_Break
            if ive03a.item_id$<>t1$ gosub Item_Break

rem --- Retrieve lot/serial master

            if ls$="Y" or ivm01a.LOTSER_ITEM$+ivm01a.INVENTORIED$="YY" then
                rem dim d0$(44),d1$(96),d[12]
                ivm07a_key$=ive03a.firm_id$+ive03a.warehouse_id+ive03a.item_id$
                ivm07a.inv_location$=ive03a.inv_location$
                ivm07a.unit_cost=cost
                if cvs(ive03a.lotser_no$,2)="" then
                    if ive03a.freeze_qty<>0 ive03a.lotser_item$="Y"; rem "Count always entered for Missingand Blank
                    if ive03a.freeze_qty=0 ive03a.lotser_no$="None"
                    if ive03a.ACT_PHYS_CNT<>0 ive03a.lotser_no$="Blank"
                    if ive03a.ACT_PHYS_CNT<>0 and ive03a.freeze_qty>ive03a.ACT_PHYS_CNT ive03a.lotser_no$="Blank & Missing"
                    if ive03a.ACT_PHYS_CNT<>0 and ive03a.freeze_qty<ive03a.ACT_PHYS_CNT ive03a.lotser_no$="Blank & Extra"
                    if ive03a.ACT_PHYS_CNT=0 and ive03a.freeze_qty>ive03a.ACT_PHYS_CNT ive03a.lotser_no$="Missing"
                    if ive03a.ACT_PHYS_CNT=0 and ive03a.freeze_qty<ive03a.ACT_PHYS_CNT ive03a.lotser_no$="Extra"
                    if pos("Blank"=ive03a.lotser_no$)<>1 ivm07a.inv_location$=".........."
                endif
                find record (ivm07a_dev,key=ivm07a_key$,dom=Total_Value) ivm07a$
                cost=ivm07a.unit_cost
            endif
Total_Value: rem --- Calculate total value and variance

            dim t[6]
            if ive03a.lotser_item$<>"Y" ive03a.ACT_PHYS_CNT=ive03a.freeze_qty
            t[0]=ive03a.ACT_PHYS_CNT
            t[1]=t[0]*cost
            t[2]=ive03a.freeze_qty
            t[3]=t[2]*cost
            t[4]=t[0]-t[2]
            t[5]=t[1]-t[3]
            mark$=""
            if ls$<>"Y" and cvs(ive03a.lotser_no$,2)<>"None" then
                if ive03a.lotser_item$<>"Y" t[6]=1,mark$="*"
            endif
rem --- Print non-lotted/serialized item

            if ls$<>"Y" if ivm01a.LOTSER_ITEM$+ivm01a.INVENTORIED$<>"YY" then
                if l+2>l9 gosub report_heading
                print (printer_dev)@(o[0]),ivm01a.ITEM_Id$,mark$,@(o[3]),ivm01a.unit_of_sale$,@(o[4]),ive03a.inv_location$,@(o[5]),t[0]:m2$,@(o[6]),t[1]:m1$,@(o[7]),t[2]:m2$,@(o[8]),t[3]:m1$,@(o[9]),t[4]:m2$,@(o[10]),t[5]:m1$
                print (printer_dev)@(o[1]),description$
                l=l+2
                continue
            endif
 rem --- Print lotted/serialized item

            if ive03a.firm_id$+ive03a.warehouse_id+ive03a.cycle_code$+ive03a.inv_location$+ive03a.item_id$<>last$ gosub Item_Head
            if l+1>l9 l=l9+1; gosub Item_Head
            print (printer_dev)@(o[2]),ive03a.lotser_no$,len(cvs(ive03a.lotser_no$,2)),mark$,@(o[4]),ivm07a.inv_location$,@(o[5]),t[0]:m2$,@(o[6]),t[1]:m1$,@(o[7]),t[2]:m2$,@(o[8]),t[3]:m1$,@(o[9]),t[4]:m2$,@(o[10]),t[5]:m1$
            l=l+1
            l1=l1+1

rem --- Loop back for next physical inventory record

            for x=0 to 6
                item[x]=item[x]+t[x]
                cycle[x]=cycle[x]+t[x]
                report[x]=report[x]+t[x]
            next x
        wend
rem --- Loop back for next entry record

    wend

done: rem --- All done

    done=1
    gosub Cycle_Break
    dim totals$[5]
    total$="Register "
    totals$[1]=str(report[1]:m1$)
    nl=1
    totals$[3]=str(report[3]:m1$)
    totals$[5]=str(report[5]:m1$)
    warning=report[6]
    gosub Print_Line
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run pgmdir$+"ivu_va.bbx"

report_heading: rem --- Report Heading

    l=headings+4
    nl=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[5]),ph$,@(o[7]),sh$,@(o[9]),vh$
    print (printer_dev)@(o[0]),"Item",@(o[2]),lsh$,@(o[3]),"UM",@(o[4]),"Location",@(o[5]+m2-9),qh$,@(o[6]+m1-12),th$,@(o[7]+m2-9),qh$,@(o[8]+m1-12),th$,@(o[9]+m2-9),qh$,@(o[10]+m1-12),th$
    print (printer_dev)""
    return

Item_Head: rem --- Item subheading (lotted/serialized)

    if l+3>l9 gosub report_heading
    print (printer_dev)@(o[0]),ive03a.item_id$,@(o[3]),ivm01a.unit_of_sale$,@(o[4]),ive03a.inv_location$," ",continued$
    print (printer_dev)@(o[1]),description$
    l=l+2
    continued$="(Continued)"
    last$=ive03a.firm_id$+ive03a.warehouse_id+ive03a.cycle_code$+ive03a.inv_location$+ive03a.item_id$
    return

Cycle_Break: rem --- Cycle Break

    if t0$<>"" then
        gosub Item_Break
        dim totals$[5]
        total$="Cycle Code "+t0$
        totals$[1]=str(cycle[1]:m1$)
        nl=1
        totals$[3]=str(cycle[3]:m1$)
        totals$[5]=str(cycle[5]:m1$)
        warning=cycle[6]
        gosub Print_Line
    endif
    if done return
    dim cycle[6]
    t0$=ive03a.cycle_code$
    ivm10p_key$=firm_id$+"P"+whse$+t0$
    ivm10p.cutoff_date$=sysinfo.system_date$
    find record (ivm10p_dev,key=ivm10p_key.firm_id$+ivm10p_key.record_id_p$+ivm10p_key.warehouse_id$+ivm10p_key.cycle_code$,dom=*next) ivm10p$
    ivm10p.phys_ivn_sts$="3"
    l=l9+1
    headings=3
    headings$[2]="Cycle Code "+t0$+" - Cutoff Date "+fndate$(ivm10p.cutoff_date$)
    write record (ivm10_dev,key=ivm10p_key.firm_id$+ivm10p_key.record_id_p$+ivm10p_key.warehouse_id$+ivm10p_key.cycle_code$) ivm10p$
    return

Item_Break: rem --- Item Break

    if t1$<>"" or l1>=1 then 
        dim totals$[5]
        let total$="Item "+t1$,nl=0,warning=0
        let totals$[0]=str(item[0]:m2$),totals$[1]=str(item[1]:m1$)
        let totals$[2]=str(item[2]:m2$),totals$[3]=str(item[3]:m1$)
        let totals$[4]=str(item[4]:m2$),totals$[5]=str(item[5]:m1$)
        gosub Print_Line
    endif
    if done return
    dim description$(dw),item[6]
    let ivm01a_key$=firm_id$+ive03a.item_id$,ivm01a.item_desc$="(Not On File)",t1$=ive03a.item_id$
    let ivm02a_key$=firm_id$+ive03a.warehouse_id$+ive03a.item_id$,ivm02a.unit_cost=0,l1=0
    find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
    find record (ivm02a_dev,key=ivm02a_key$,dom=*next) ivm02a$
    let description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5]),continued$="",cost=ivm02a.unit_cost

rem --- Get LIFO/FIFO Cost As Necessary

    if pos(lf$="LF")=0 return
    if ls$="Y" and ivm01a.LOTSER_ITEM$+ivm01a.INVENTORIED$="YY" return; rem "Use lot/serial cost
    dim lf_item$[2]
    let lf_item$[0]=firm_id$,lf_item$[1]=ive03a.warehouse_id$,lf_item$[2]=ive03a.item_id$
    let lf_act$=lf$+"R",lf_type$="R",lf_date$=ive03a.cutoff_date$,lf_qnty=ive03a.ACT_PHYS_CNT-ive03a.freeze_qty,lf_cost=0
    if lf_qnty<0 lf_act$=lf$+"I"
    call pgmdir$+"ivc_lf.bbx",lf_act$,lf_type$,lf_date$,lf_chans[all],lf_item$[all],p[1],abs(lf_qnty),cost,lf_cost,status
    if lf_qnty<0 and lf_cost<>0 cost=lf_cost
    return

Print_Line: rem --- Print total line

    let needed=1
    if warning>0 needed=3
    if nl>0 needed=needed+1
    if l+needed>l9 gosub report_heading
    if nl>0 print (printer_dev)""
    print (printer_dev)@(o[1]),"Totals For ",total$,@(o[5]),totals$[0],@(o[6]),totals$[1],@(o[7]),totals$[2],@(o[8]),totals$[3],@(o[9]),totals$[4],@(o[10]),totals$[5]
    if warning<>0 then
        print (printer_dev)""
        print (printer_dev)@(o[1]),"WARNING:",warning," Item(s) Not Entered For"+total$
    endif
    let l=l+needed,nl=0
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
