rem --- EOQ, Order Point & Safety Stock Report (Update Overlay)
rem --- Program ivu_itemeoqupdate.aon v8.0.0 21Dec2007 (previously ivu_oa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/21/2007 09:39:44)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    seterr std_error
    setesc std_error

	next_overlay$="";rem --- clear next_overlay and OutVect! so adc_process_end doesn't loop...i.e., don't run anything after this
	OutVect!=null()
    
rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Find out what the user wants to update

    if stbl("+EOQ_CARRY",err=*next)="" then 
        rem --- Run IVU_ITEMEOQUPDAT form when stbl("+EOQ_CARRY") is not defined or is empty
        x$=stbl("+EOQ_CARRY",str(carry))
        call stbl("+DIR_SYP")+"bam_run_prog.bbj","IVU_ITEMEOQUPDAT",stbl("+USER_ID"),"MNT","",table_chans$[all]
        goto done
    else
        rem --- Clear stbl("+EOQ_CARRY") so ready to run IVU_ITEMEOQUPDAT form again
        x$=stbl("!CLEAR","+EOQ_CARRY",err=*next)

        rem --- Capture what was entered in IVU_ITEMEOQUPDAT form
        eoqUpdt%=int(num(Option!.getOptionData("EOQ_UPDT")))
        orderPointUpdt%=int(num(Option!.getOptionData("ORDERPOINT_UPDT")))
        safetyStockUpdt%=int(num(Option!.getOptionData("SAFETYSTOCK_UPDT")))
        if eoqUpdt%+orderPointUpdt%+safetyStockUpdt%=0 then goto done; rem --- not updating anything
    endif

rem --- Open/Lock files  

	num_files=5
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

	open_tables$[1]="IVM_ITEMMAST",open_opts$[1]="OTA"
	open_tables$[2]="IVM_ITEMWHSE",open_opts$[2]="OTA"
	open_tables$[3]="IVS_PARAMS",open_opts$[3]="OTA"
	open_tables$[4]="IVW_EOQPROD",open_opts$[4]="OTA"
	open_tables$[5]="IVW_EOQWHSE",open_opts$[5]="OTA"

	gosub open_tables

	ivm01_dev=num(open_chans$[1])
	ivm02_dev=num(open_chans$[2])
	ivs01a_dev=num(open_chans$[3])
	ivw11_dev=num(open_chans$[4])
	ivw21_dev=num(open_chans$[5])

rem --- Dimension string templates

	dim ivm01a$:open_tpls$[1],ivm02a$:open_tpls$[2],ivs01a$:open_tpls$[3]
	dim ivw11a$:open_tpls$[4],ivw21a$:open_tpls$[5]

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initializations

    precision num(ivs01a.precision$)
 
rem --- Position file

    call stbl("+DIR_PGM")+"adc_progress.aon","N","IVW_EOQWHSE","","","",0,ivw21_dev,1,meter_num,status
    read (ivw21_dev,key=firm_id$,dom=*next)

    while 1
        rem --- Read next ivw-21 record

        ivw21a_key$=key(ivw21_dev,end=done)
        if pos(firm_id$=ivw21a_key$)<>1 then goto done
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        read record (ivw21_dev) ivw21a$

        rem --- Update warehouse
        extract record (ivm02_dev,key=ivw21a.firm_id$+ivw21a.warehouse_id$+ivw21a.item_id$,dom=*continue) ivm02a$; rem Advisory Locking
        if ivw21a.unit_cost<>0 then
            if eoqUpdt% and ivm02a.eoq_code$<>"N" then
                ivm02a.eoq_code$="D"
                ivm02a.eoq=ivw21a.eoq_02
            endif
        endif

        if orderPointUpdt% and ivm02a.ord_pnt_code$<>"N" then
            ivm02a.ord_pnt_code$="D"
            ivm02a.order_point=ivw21a.order_point_02
        endif

        if safetyStockUpdt% and ivm02a.saf_stk_code$<>"N" then
            ivm02a.saf_stk_code$="D"
            ivm02a.safety_stock=ivw21a.safety_stock_02
        endif

        write record (ivm02_dev) ivm02a$

        rem --- Loop back for next record
    wend

done: rem --- All done

    goto std_exit

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
       msg_id$="ENTRY_OPEN_ERROR"
       dim msg_tokens$[1]
       msg_tokens$[1]=open_status$
       gosub disp_message
       rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
       release
    endif

    return

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
