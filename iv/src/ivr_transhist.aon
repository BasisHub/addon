rem ivr - Inventory Transaction History Listing (Report Overlay)
rem Program ivr_transhist.aon v8.0.0 26Oct2006 (ivr_qb)
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 12:56:00)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$
    sys_date$=sysinfo.system_date$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open files

    files=12,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="arm-01",ids$[4]="ARM_CUSTMAST"
    files$[5]="ivc_whsecode",ids$[5]="IVC_WHSECODE"
    files$[6]="ivc_prodcode",ids$[6]="IVC_PRODCODE"
    files$[7]="ivc_trancode",ids$[7]="IVC_TRANCODE"
    files$[8]="ivt-04",ids$[8]="IVT_ITEMTRAN"
    files$[9]="aps_params",ids$[9]="APS_PARAMS"
    files$[10]="ars_params",ids$[10]="ARS_PARAMS"
    files$[12]="ivt-04",ids$[12]="IVT_ITEMTRAN"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivs01_dev=channels[1]
    apm01_dev=channels[2]
    ivm01_dev=channels[3]
    arm01_dev=channels[4]
    ivm10c_dev=channels[5]
    ivm10a_dev=channels[6]
    ivm10b_dev=channels[7]
    ivt04_dev=channels[8]
    aps01_dev=channels[9]
    ars01_dev=channels[10]
    ivt04_dev2=channels[12]

rem --- Dimension string templates

    dim ivs01a$:templates$[1],apm01a$:templates$[2],ivm01a$:templates$[3]
    dim arm01a$:templates$[4],ivm10c$:templates$[5],ivm10a$:templates$[6]
    dim ivm10b$:templates$[7],ivt04a$:templates$[8]
    dim	aps01a$:templates$[9],ars01a$:templates$[10],ivt04b$:templates$[12]

rem --- Assign form input values to local variables
    dim ttypes$[9]

    beg_date$=option!.getOptionData("pick_date_1")
	if len(beg_date$)<>0
		beg_date_sql$=beg_date$(1,4)+"-"+beg_date$(5,2)+"-"+beg_date$(7,2); rem SQL engine expects YYYY-MM-DD formatted date data
	endif
    end_date$=option!.getOptionData("pick_date_2")
    beg_whse$=option!.getOptionData("warehouse_id_1")
    end_whse$=option!.getOptionData("warehouse_id_2")
    beg_prod$=option!.getOptionData("product_type_1")
    end_prod$=option!.getOptionData("product_type_2")
    beg_item$=option!.getOptionData("item_id_1")
    end_item$=option!.getOptionData("item_id_2")
    itype$=option!.getOptionData("item_type")
    ttypes$[0]=option!.getOptionData("tran_hst_all")
    ttypes$[1]=option!.getOptionData("tran_hst_po")
    ttypes$[2]=option!.getOptionData("tran_hst_op")
    ttypes$[3]=option!.getOptionData("tran_hst_it")
    ttypes$[4]=option!.getOptionData("tran_hst_ph")
    ttypes$[5]=option!.getOptionData("tran_hst_ti")
    ttypes$[6]=option!.getOptionData("tran_hst_to")
    ttypes$[7]=option!.getOptionData("tran_hst_wi")
    ttypes$[8]=option!.getOptionData("tran_hst_wo")
    ttypes$[9]=option!.getOptionData("tran_hst_bm")
    rem "ITEM INACTIVE FEATURE"
    inactive$=Option!.getOptionData("ITEM_INACTIVE")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- check application settings

    call pgmdir$+"adc_application.aon","IV",info$[all]
    gl$=info$[9];rem --- post to GL?
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]; rem --- AR installed?
    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]; rem --- AP installed?

rem --- Initializations

    dim p[7]
    P[0]=ivs01a.item_id_len
    P[1]=ivs01a.vendor_prd_len
    p[2]=num(ivs01a.precision$)
    p[3]=ivs01a.ls_no_len
    p[5]=num(ivs01a.desc_len_01$)
    p[6]=num(ivs01a.desc_len_02$)
    p[7]=num(ivs01a.desc_len_03$)
    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15
    call pgmdir$+"adc_sizemask.aon",m3$,m3,10,15

    if ar$="Y" then
        find record (ars01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
        call pgmdir$+"adc_getmask.aon","CUSTOMER_ID","","",imask$,x9$,0,x8
        x9=len(x9$)
    endif
    
    if ap$="Y" then
        find record (aps01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
        call pgmdir$+"adc_getmask.aon","VENDOR_ID","","",imask$,x7$,0,x6
        x7=len(x7$)
    endif

    call pgmdir$+"adc_getmask.aon","GLACCT","","",imask$,g5$,0,g2

    alltypes$="POOPITPHTITOWIWOBM"
    for x=1 to 9
        if ttypes$[x] = "Y" ttype$=ttype$+alltypes$((x-1)*2+1,2)
    next x

    h0=60
    h1=115
    h=0
    h1$=firm_name$
    h2$=task_desc$
    if ttypes$[0]="Y" or ttype$="" then all$="Y"

    precision p[2]
    headings=8
    when$=sys_date$
    clock$=""
    h9$=""
    dim headings$[headings]
    dim ivchannels[6],params[6],masks$[3]
    headings$[0]=firm_name$
    headings$[1]=Translate!.getTranslation("AON_TRANSACTION_HISTORY")
    width=132
    page=0
    done=0
    more=1
    ivchannels[0]=ivm01_dev
    ivchannels[1]=ivm10a_dev
    ivchannels[2]=arm01_dev
    ivchannels[3]=apm01_dev
    ivchannels[4]=glm01_dev
    ivchannels[5]=ivm10b_dev
    ivchannels[6]=ivm10c_dev
    params[0]=p[0]
    params[1]=x8
    params[2]=x6
    params[3]=g2
    params[4]=p[5]
    params[5]=p[6]
    params[6]=p[7]
    masks$[0]=firm_id$
    masks$[1]=x9$
    masks$[2]=x7$
    masks$[3]=g5$

init_headings: rem --- Initialize HEADINGS$

    x1$=Translate!.getTranslation("AON_FIRST_DATE")
    x2$=Translate!.getTranslation("AON_LAST_DATE")
    if beg_date$<>"" x1$=fndate$(beg_date$)
    if end_date$<>"" x2$=fndate$(end_date$)
    headings$[2]=Translate!.getTranslation("AON_FROM_")+x1$+Translate!.getTranslation("AON__THROUGH_")+x2$
    
    if all$="Y" then
        headings$[3]=Translate!.getTranslation("AON_FOR_ALL_TRANSACTION_TYPES")
    else
        headings$[3]=Translate!.getTranslation("AON_FOR_TRANSACTION_TYPES_")
        for x=0 to len(ttype$)-1 step 2
            headings$[3]=headings$[3]+ttype$(x+1,2)+" "
        next x
        headings$[3]=cvs(headings$[3],2)
    endif

    if beg_item$="" then headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_")+beg_item$
    if end_item$="" then headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_")+end_item$
    if beg_prod$="" then headings$[5]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[5]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+beg_prod$                
    if end_prod$="" then headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+end_prod$
    if itype$="" then headings$[6]=Translate!.getTranslation("AON_ALL_ITEM_TYPES") else headings$[6]=Translate!.getTranslation("AON_ITEM_TYPE_")+itype$
    headings$[7]=Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_ITEMS")+" = "+inactive$
    headings$[8]="[HEADER]"

rem --- column headings

    dim columns$[7,10]
    columns=8
    columns$[0,0]=Translate!.getTranslation("AON_ITEM"),                   columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_DATE"),                   columns$[1,1]="C",columns$[1,2]="8"
    columns$[2,0]=Translate!.getTranslation("AON_TYPE"),                   columns$[2,1]="C",columns$[2,2]="5"
    columns$[3,0]=Translate!.getTranslation("AON_REFERENCE_INFORMATION"),  columns$[3,1]="C",columns$[3,2]="35"
    columns$[4,0]=Translate!.getTranslation("AON_QUANTITY"),               columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$,columns$[4,10]="T"
    columns$[5,0]=Translate!.getTranslation("AON_UNIT_COST"),              columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m3$
    columns$[6,0]=Translate!.getTranslation("AON_EXTENSION"),              columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_BALANCE"),                columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

    call stbl("+DIR_PGM")+"adc_progress.aon","NC","IVT_ITEMTRAN","","","",0,ivt04_dev,1,meter_num,status

rem --- Position files

	no_records = 1
    total_recs = 0
    read (ivt04_dev,key=firm_id$+cvs(beg_whse$,2),dom=*next)

rem --- Get next record

    while more
        read record (ivt04_dev,end=*break) ivt04a$
        if pos(firm_id$=ivt04a.firm_id$)<>1 break
        whse$=ivt04a.warehouse_id$
        item$=ivt04a.item_id$
        
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

rem --- Valid Warehouse/Item?

        if end_whse$<>"" if whse$>end_whse$ break
        if beg_item$<>"" if item$<beg_item$ read (ivt04_dev,key=firm_id$+whse$+beg_item$,dom=*continue)
        if end_item$<>"" if item$>end_item$ read (ivt04_dev,key=firm_id$+whse$+$FF$,dom=*continue)

rem --- Valid Product/Type/Date?

        if beg_date$<>"" if ivt04a.trans_date$<beg_date$ read (ivt04_dev,key=firm_id$+whse$+item$+beg_date$,dom=*continue)
        if end_date$<>"" if ivt04a.trans_date$>end_date$ read (ivt04_dev,key=firm_id$+whse$+item$+$FF$,dom=*continue)
        if ivt04a.trans_source$="BB" continue
        if all$<>"Y" if pos(ivt04a.trans_source$=ttype$,2)=0 continue

        find record (ivm01_dev,key=firm_id$+item$,dom=*continue) ivm01a$
        if beg_prod$<>"" if ivm01a.product_type$<beg_prod$ continue
        if end_prod$<>"" if ivm01a.product_type$>end_prod$ continue
        if itype$<>"" if ivm01a.item_type$<>itype$ continue
        rem -- Check for inactive item
        if inactive$="Y" and ivm01a.item_inactive$="Y" then continue

rem --- Level breaks?

        if whse$<>t0$ gosub whse_break
        if item$<>t1$ gosub item_break
        balance=balance+ivt04a.trans_qty

rem --- Get Reference Block

        dim desc$[2]
        call pgmdir$+"ivc_transdata.aon",ivt04a$,ivchannels[all],params[all],masks$[all],type$,desc$[all]
        if type$="" continue

rem --- Build Totals Array

        while more
            x=pos(type$=item_tot$,4)
            if x=0 item_tot$=item_tot$+type$; continue
            break
        wend
        
        x=(x+3)/4
        item_qty[x]=item_qty[x]+ivt04a.trans_qty
        item_ext[x]=item_ext[x]+ivt04a.trans_qty*ivt04a.unit_cost

rem --- Print subheading?

        if subhead1$<>"" 
            xwk=fnblank(columns)
            OutVect!.addItem(subhead1$)
            xwk=fnblank(2)
            OutVect!.addItem(subhead2$)
            xwk=fnblank(4)
            subhead1$="",subhead2$=""
        endif

print_detail: rem --- Print detail line

        OutVect!.addItem("")
        OutVect!.addItem(fndate$(ivt04a.trans_date$))
        OutVect!.addItem(type$)
        OutVect!.addItem(desc$[0])
        OutVect!.addItem(str(ivt04a.trans_qty))
        OutVect!.addItem(str(ivt04a.unit_cost))
        OutVect!.addItem(str(ivt04a.trans_qty*ivt04a.unit_cost))
        if all$="Y" then OutVect!.addItem(str(balance)) else OutVect!.addItem("")
        if cvs(desc$[1],2)="" continue
        xwk=fnblank(3)
        OutVect!.addItem(cvs(desc$[1],2))
        xwk=fnblank(columns-4)
		
		no_records = 0
    wend

done: rem --- All done

	if no_records then            
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
	else
        done=1
        gosub item_break
	endif
	
    goto std_exit
    
whse_break: rem Warehouse Break
    
    gosub item_break
    t0$=whse$
    ivm10c.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x0$=ivm10c.short_name$
    x$=Translate!.getTranslation("AON_WAREHOUSE_")+t0$+" "+cvs(x0$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)
    return
    
item_break: rem --- Item Break
    
    if t1$<>"" then
        if len(item_tot$)<>0 then
            xwk=fnblank(columns)
            TotVect!.addItem(str(OutVect!.size()/(columns)))
            
            for x=1 to len(item_tot$) step 4
                xwk=fnblank(3)
                OutVect!.addItem("     "+item_tot$(x,4)+Translate!.getTranslation("AON__TOTAL"))           
                OutVect!.addItem(str(item_qty[(x+3)/4]))
                OutVect!.addItem("")
                OutVect!.addItem(str(item_ext[(x+3)/4]))
                OutVect!.addItem("")
                net_qty=net_qty+item_qty[(x+3)/4]
                net_ext=net_ext+item_ext[(x+3)/4]
            next x
            
            if all$<>"N" 
                xwk=fnblank(3)
                OutVect!.addItem(Translate!.getTranslation("AON______NET_CHANGE"))
                OutVect!.addItem(str(net_qty))
                OutVect!.addItem("")
                OutVect!.addItem(str(net_ext))
                OutVect!.addItem("")
                xwk=fnblank(columns)
           endif
        endif
    endif
    
    if done then return
    dim item_qty[9],item_ext[9]
    t1$=ivt04a.item_id$
    item_tot$=""
    net_qty=0
    net_ext=0
    wkdesc$=fnitem$(ivm01a.item_desc$,p[5],p[6],p[7])
    if all$="Y" then gosub get_beg_bal

    subhead1$=t1$(1,p[0])+" "+wkdesc$
    subhead2$=Translate!.getTranslation("AON_PRODUCT_TYPE:_")+ivm01a.product_type$
    return
    
get_beg_bal: rem --- Determine starting beginning balance

    balance=0
    if itype$<>"" return
    found=0
    sql_prep$="select firm_id, warehouse_id, item_id, trans_date, iv_hist_seq from ivt_itemtran "
    sql_prep$=sql_prep$+"where firm_id = '"+firm_id$+"' and trans_source='BB' and item_id='"+item$+"' and "
    sql_prep$=sql_prep$+"warehouse_id='"+whse$+"' and trans_date <= '"+beg_date_sql$+"' order by trans_date desc"
    sql_chan=sqlunt
    sqlopen(sql_chan)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

    while more
        read_tpl$=sqlfetch(sql_chan,err=*break)
        found=1
        break
    wend
    
    sqlclose(sql_chan)

    if found=1
        read record (ivt04_dev2,key=firm_id$+read_tpl.warehouse_id$+read_tpl.item_id$+read_tpl.trans_date$+read_tpl.iv_hist_seq$)ivt04b$
        balance=ivt04b.trans_qty
    endif

    while found=1
        dim ivt04b$:fattr(ivt04b$)
        read record(ivt04_dev2,end=*break)ivt04b$
        if ivt04b.firm_id$+ivt04b.warehouse_id$+ivt04b.item_id$<>firm_id$+whse$+item$ break
        if ivt04b.trans_date$>=beg_date$ break
        let balance=balance+ivt04b.trans_qty
    wend
    
    return
    
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- Find length of field
    def fnfldlen(q$,q1$)
        dim q2$:q$
        wkq$=fattr(q2$,q1$)
        wkq=dec(wkq$(10,2))
        return wkq
    fnend

rem --- Create blank line in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call stbl("+DIR_PGM")+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report:

    OutVect!=null()
    goto std_exit

rem #endinclude std_end.src
    
        end
