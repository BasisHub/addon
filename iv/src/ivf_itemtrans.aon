rem --- PO Requisitions By Item Query filter program
rem --- Program ID: ivf_requisitions.aon
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- Run by Barista as part of the IV_REQUISITIONS query.
rem --- For each row in the result set, this program runs to provide a description for
rem --- requisition source code.

    setesc std_error
    seterr std_error

    enter inq_mode$,rec_tpl$,calc_tpl$,table_chans$[all],status$

rem inq_mode$      - not used until recently - current use not yet documented
rem rec_tpl$       - Current row database columns
rem calc_tpl$      - Current row calculated columns
rem table_chans$[] - Barista opened channels array
rem status$        - Returned status: "SKIP" = Skip current record

rem --- Initialize data
    status$=""

rem --- Make sure +PROPS_NAME STBL is set
    testSTBL$=stbl("+PROPS_NAME",err=*next)
    if testSTBL$="" then
        call stbl("+DIR_SYP")+"bas_process_beg.bbj",stbl("+USER_ID"),table_chans$[all]
    endif

rem --- Open tables
    ivm01_dev=fnget_dev("@"+"IVM_ITEMMAST")
    ivm10a_dev=fnget_dev("@"+"IVC_PRODCODE")
    arm01_dev=fnget_dev("@"+"ARM_CUSTMAST")
    apm01_dev=fnget_dev("@"+"APM_VENDMAST")
    glm01_dev=fnget_dev("@"+"GLM_ACCT")
    ivm10b_dev=fnget_dev("@"+"IVC_TRANCODE")
    ivm10c_dev=fnget_dev("@"+"IVC_WHSECODE")
    ivt04_dev=fnget_dev("@"+"IVT_ITEMTRAN")
    ivs01_dev=fnget_dev("@"+"IVS_PARAMS")

    if ivm01_dev=0 or ivm10a_dev=0 or arm01_dev=0 or apm01_dev=0 or glm01_dev=0 or ivm10b_dev=0 or ivm10c_dev=0 or 
:       ivm10c_dev=0 then
        rem --- PO installed?
        num_files=9
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="IVM_ITEMMAST",open_opts$[1]="OTA@"
        open_tables$[2]="IVC_PRODCODE",open_opts$[2]="OTA@"
        open_tables$[3]="ARM_CUSTMAST",open_opts$[3]="OTA@"
        open_tables$[4]="APM_VENDMAST",open_opts$[4]="OTA@"
        open_tables$[5]="GLM_ACCT",open_opts$[5]="OTA@"
        open_tables$[6]="IVC_TRANCODE",open_opts$[6]="OTA@"
        open_tables$[7]="IVC_WHSECODE",open_opts$[7]="OTA@"
        open_tables$[8]="IVT_ITEMTRAN",open_opts$[8]="OTA@"
        open_tables$[9]="IVS_PARAMS",open_opts$[9]="OTA@"
                
        gosub open_tables        

        ivm01_dev=fnget_dev("@"+"IVM_ITEMMAST")
        ivm10a_dev=fnget_dev("@"+"IVC_PRODCODE")
        arm01_dev=fnget_dev("@"+"ARM_CUSTMAST")
        apm01_dev=fnget_dev("@"+"APM_VENDMAST")
        glm01_dev=fnget_dev("@"+"GLM_ACCT")
        ivm10b_dev=fnget_dev("@"+"IVC_TRANCODE")
        ivm10c_dev=fnget_dev("@"+"IVC_WHSECODE")
        ivt04_dev=fnget_dev("@"+"IVT_ITEMTRAN")
        ivs01_dev=fnget_dev("@"+"IVS_PARAMS")
    endif

    dim ivt04a$:fnget_tpl$("@"+"IVT_ITEMTRAN")
    dim ivs01a$:fnget_tpl$("@"+"IVS_PARAMS")
    
rem --- Get ivt_itemtran (ivt-04) record
    ivt04_key$=rec_tpl.firm_id$+rec_tpl.warehouse_id$+rec_tpl.item_id$+rec_tpl.trans_date$+rec_tpl.iv_hist_seq$
    findrecord(ivt04_dev,key=ivt04_key$,dom=exit_prog)ivt04a$

rem --- Initialize ivchannels[] array
    dim ivchannels[6]
    ivchannels[0]=ivm01_dev
    ivchannels[1]=ivm10a_dev
    ivchannels[2]=arm01_dev
    ivchannels[3]=apm01_dev
    ivchannels[4]=glm01_dev
    ivchannels[5]=ivm10b_dev
    ivchannels[6]=ivm10c_dev

rem --- Initialize params[] array
    findrecord(ivs01_dev,key=rec_tpl.firm_id$+"IV00",err=exit_prog)ivs01a$
    call pgmdir$+"adc_getmask.aon","CUSTOMER_ID","","",imask$,x9$,0,x8
    call pgmdir$+"adc_getmask.aon","VENDOR_ID","","",imask$,x7$,0,x6
    call pgmdir$+"adc_getmask.aon","GLACCT","","",imask$,g5$,0,g2
    dim params[6]
    params[0]=ivs01a.item_id_len
    params[1]=x8
    params[2]=x6
    params[3]=g2
    params[4]=num(ivs01a.desc_len_01$)
    params[5]=num(ivs01a.desc_len_02$)
    params[6]=num(ivs01a.desc_len_01$)

rem --- Initialize masks$[] array
    dim masks$[3]
    masks$[0]=rec_tpl.firm_id$
    masks$[1]=x9$
    masks$[2]=x7$
    masks$[3]=g5$

rem --- Set trans_type and info_* fields
    dim desc$[2]
    call pgmdir$+"ivc_transdata.aon",ivt04a$,ivchannels[all],params[all],masks$[all],type$,desc$[all]
    rec_tpl.trans_type$=type$
    calc_tpl.info_1$=desc$[0]
    calc_tpl.info_2$=desc$[1]
    calc_tpl.info_3$=desc$[2]

rem --- Done
    goto exit_prog

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- Functions

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)
        q$=pad(q$,q1+q2+q3)
        return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif    

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
    
exit_prog:rem --- Exit Program

    exit
