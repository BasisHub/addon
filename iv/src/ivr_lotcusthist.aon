rem --- Lot/Serial Transaction History By Customer Report (Input)
rem --- Program ivr_lotcusthist.aon v8.0.0 09Jul2007 (ivr_9a)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:51:31)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
    files$[2]="ars_params",ids$[2]="ARS_PARAMS"
    files$[3]="gls_params",ids$[3]="GLS_PARAMS"
    files$[4]="arm-01",ids$[4]="ARM_CUSTMAST"
    files$[5]="glm-01",ids$[5]="GLM_ACCT"
    files$[6]="ivm-01",ids$[6]="IVM_ITEMMAST"
    files$[7]="ivm-07",ids$[7]="IVM_LSMASTER"
    files$[8]="ivc_prodcode",ids$[8]="IVC_PRODCODE"
    files$[9]="ivc_trancode",ids$[9]="IVC_TRANCODE"
    files$[10]="ivc_whsecode",ids$[10]="IVC_WHSECODE"
    files$[11]="ivt-01",ids$[11]="IVT_LSTRANS"
    files$[12]="ivt-02",ids$[12]="IVX_LSCUST"   

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivs01a_dev=channels[1]
    ars01a_dev=channels[2]
    gls01a_dev=channels[3]
    arm01_dev=channels[4]
    glm01_dev=channels[5]
    ivm01_dev=channels[6]
    ivm07_dev=channels[7]
    ivm10a_dev=channels[8]
    ivm10b_dev=channels[9]
    ivm10c_dev=channels[10]
    ivt01_dev=channels[11]
    ivt02_dev=channels[12]
    
rem --- Dimension string templates

    dim ivs01a$:templates$[1],ars01a$:templates$[2],gls01a$:templates$[3],
:       arm01a$:templates$[4],glm01a$:templates$[5],ivm01a$:templates$[6],
:       ivm07a$:templates$[7],ivm10a$:templates$[8],ivm10b$:templates$[9],
:       ivm10c$:templates$[10],ivt01a$:templates$[11],ivt02a$:templates$[12]

rem --- Assign form input values to local variables

    beg_cust$=option!.getOptionData("customer_id_1")
    end_cust$=option!.getOptionData("customer_id_2")
    beg_date$=option!.getOptionData("pick_date_1")
    end_date$=option!.getOptionData("pick_date_2")
    beg_whse$=option!.getOptionData("warehouse_id_1")
    end_whse$=option!.getOptionData("warehouse_id_2")
    beg_prod$=option!.getOptionData("product_type_1")
    end_prod$=option!.getOptionData("product_type_2")
    beg_item$=option!.getOptionData("item_id_1")
    end_item$=option!.getOptionData("item_id_2")
    item_type$=option!.getOptionData("item_type")
    ocb$=option!.getOptionData("op_cl_both")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    dim p[7],info$[20]
    p[0]=ivs01a.item_id_len
    p[1]=ivs01a.vendor_prd_len
    p[2]=num(ivs01a.precision$)
    p[3]=ivs01a.ls_no_len
    p[5]=num(ivs01a.desc_len_01$)
    p[6]=num(ivs01a.desc_len_01$)
    p[7]=num(ivs01a.desc_len_02$)
	call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",custmask$,0,custlen
	call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g5$,0,g5

rem --- Init Data

    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","P",imask$,m4$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,10,12
    call pgmdir$+"adc_sizemask.aon",m4$,m4,6,12

rem --- Retrieve key template

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_LSMASTER","PRIMARY",ivm07_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_LSCUST","PRIMARY",ivt02_key_tpl$,rd_table_chans$[all],status$
    dim ivm07a_key$:ivm07_key_tpl$,ivt02a_key$:ivt02_key_tpl$

rem --- Run overlay

    run pgmdir$+"ivr_lotcusthist_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
