rem --- ABC Analysis Update
rem --- Program ivu_pa v8.0.0 06Dec2007 (ivu_pa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/06/2007 03:51:17)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


            seterr std_error
            setesc std_error
            
            next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
            if OutVect!<>null() OutVect!=null()

rem --- Retrieve the program path

            pgmdir$=stbl("+DIR_PGM",err=*next)
            precision p[1]

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+SYSINFO",err=*next)
            milestone=num(stbl("+MILESTONE",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Options

            msg_id$="AON_UPDT_QUERY"
            dim x$:stbl("+SYSINFO_TPL")
            dim msg_tokens$[1]
            x$=stbl("+SYSINFO")                                                            
            msg_tokens$[1]=x.task_desc$
            gosub disp_message
            if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Progress meter

            call pgmdir$+"adc_progress.aon","N","","","","",0,arm01_dev,1,meter_num,status

rem --- Disallow 'M'enu option in Error Routine

            exit_ctrl=1
            more=1

rem --- Position file

if level$<>"W"

    read (ive07_dev,key=firm_id$,dom=*next)

rem --- Loop Starts

    While more
        ive07a_key$=key(ive07_dev,end=*break)
        if pos(firm_id$=ive07a_key$)<>1 
            break
        endif
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        read record (ive07_dev) ive07a$

rem --- Update item

        ivm01a.firm_id$=firm_id$
        ivm01a.item_id$=ive07a.item_id$
        find record (ivm01_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*continue) ivm01a$
        ivm01a.abc_code$=ive17a.abc_code_02$
        ivm01a$=field(ivm01a$)
        write record (ivm01_dev) ivm01a$

rem --- Loop Ends
    Wend
endif

rem --- Position file

if level$<>"I"
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    read (ive17_dev,key=firm_id$,dom=*next)

rem --- Loop Starts
    While more

        ive17a_key$=key(ive17_dev,end=done)
        if pos(firm_id$=ive17a_key$)<>1
            break
        endif
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        read record (ive17_dev) ive17a$

rem --- Update warehouse

        ivm02a.firm_id$=ive17a.firm_id$
        ivm02a.warehouse_id$=ive17a.warehouse_id$
        ivm02a.item_id$=ive17a.item_id$
        find record (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*continue) ivm02a$
        ivm02a.abc_code$=ive17a.abc_code_02$
        ivm02a$=field(ivm02a$)
        write record (ivm02_dev) ivm02a$

rem --- Loop Ends
    Wend
endif

done: rem --- All done

    goto std_exit

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
