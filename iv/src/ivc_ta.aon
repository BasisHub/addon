rem --- Process Inventory Transaction Display Window
rem --- Program ivc_ta v8.0.0 11Dec2007 (ivc_ta)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/11/2007 11:21:12)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        seterr std_error
        setesc std_error
        enter action$,channels[all],params[all],params$[all],selection$,fkey

rem --- Retrieve the program path

        pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+sysinfo",err=*next)
        milestone=num(stbl("+milestone",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=2,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
        files$[2]="ivt-04",ids$[2]="IVT_ITEMTRAN"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        ivs01a_dev=channels[1]
        ivt04_dev=channels[2]

rem --- Dimension string templates

        dim ivs01a$:templates$[1],ivt04a$:templates$[2]

rem --- Retrieve parameter records

        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Determine interface, open resource

    inter$=pad(fnglobal$("+INTERFACE"),512),ui$=inter$(26,1)
    if ui$<>"W" then goto parameters
    main_context=params[14]
    dim resparams$[20],resparams[20]
    resparams[0]=main_context
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","O",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    my_context=resparams[0]

    parameters: rem --- Parameters

        win_x=0
        win_y=5
        maxrow=params[8]
        width=params[9],height=params[10]
        keylen=params[11]
        balance=params[13],keyval$=params$[4]
        begdate$=params$[5]
        enddate$=params$[6],name$=params$[7]
        m1$=params$[9]
        m2$=params$[10],m3$=params$[11]
        m1=len(m1$)
        m2=len(m2$),m3=len(m3$),ivt04_dev=channels[5]
        source$="BMITOPPHPOTITOWIWO"
        sources=len(source$)/2
        call pgmdir$+"syc_sa.bbx::init",str(ui$),maxrow,pages,linfo$[all]

rem --- Initializations

    precision params[12]
    dim o[3],values[6],masks$[6]
    dim types$[sources],qty[sources],amt[sources]
    dim llist$[pages,maxrow,5],more$[pages,maxrow,5]
    controls=2
    dim heading$(width-2),footing$(width-2),control[controls]
    title$=selection$
    listbox_id=8000,header_id=2000,footer_id=2001
    control[0]=listbox_id
    control[1]=header_id,control[2]=footer_id
    d=keylen-7
    l=1,found=0,row=1,page=1,selection$="",h0=width-1,o[3]=h0
    if pos("B"=action$) then let o[3]=h0-m2
    o[2]=o[3]-m1
    o[1]=o[2]-m3,o[0]=o[1]-m2
    dw=((h0-m1-(m2*2)-m3)-16)+1
    netqty=0,netamt=0
    more=1

rem --- Normal headings

    if title$="Lot/Serial Number History" then
rem --- Lot/Serial headings
        heading$(1)="   Date   Type Reference"
        heading$(h0-m1-m3-9)="Quantity"
        heading$(h0-m1-5)="Cost"
        heading$(h0-10)="Extension"
        footing$(1)=" <F1>=Next Lot/Serial Number"
        if ui$="W" then let footing$(2)="Lot/Serial Number History" else let footing$(width-26)="PgUp PgDn F4=End"
    else
        heading$(1)="   Date   Type Reference"
        heading$(h0-m1-m2-m3-9)="Quantity"
        heading$(h0-m1-m2-5)="Cost"
        heading$(h0-m2-10)="Extension"
        heading$(h0-8)="Balance"
        footing$(1)=" <F1>=Next Warehouse"
        dw=((h0-m1-(m2*2)-m3)-16)+1
        o[3]=h0-m2
        o[2]=o[3]-m1,o[1]=o[2]-m3,o[0]=o[1]-m2
        if ui$="W" then let footing$(2)="Transaction History"
    endif
rem --- Display Resource
    if ui$="W" then
        call pgmdir$+"syc_ff.bbx","",my_context,0,controls,control[all],ignore_status
        call pgmdir$+"syc_rs.bbx","",my_context,header_id,heading$,0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,footer_id,footing$,0,"",status
        linfo$[0]=str(my_context)
        linfo$[1]=str(listbox_id),linfo$[3]=str(my_context)
    else
        print @(0,11),'ce',
        call pgmdir$+"syc_wa.bbx",0,width,height,win_x,win_y,title$,name$
        print @(0,0),'cs','sb','br',heading$,'er','sf',
        print @(0,height-3),'sb','br',footing$,'er','sf',
    endif

rem --- Options

    for i=0 to 6
        values[i]=params[i]
        masks$[i]=params$[i]
    next i

rem --- Position file

    rem b0$(1)=keyval$+begdate$
        ivt04a.firm_id$=keyval$(1,2)
        ivt04a.warehouse_id$=keyval$(3,2)
        ivt04a.item_id$=keyval$(5,20)
        ivt04a.trans_date$=begdate$(25,3)
    read (ivt04_dev,key=ivt04a_key.FIRM_ID$+ivt04a_key.WAREHOUSE_ID$+ivt04a_key.ITEM_ID$+
:   ivt04a_key.TRANS_DATE$+ivt04a_key.IV_HIST_SEQ$,dom=*next)

rem --- Main Loop Starts
    While more

        ivt04a_key$=key(ivt04_dev,end=*break)
        if pos(keyval$=ivt04a_key$)<>1 then
            break
        endif
        if enddate$<>"" and ivt04a_key$(d,3)>enddate$ then
            break
        endif
        read record (ivt04_dev) ivt04a$

rem --- Calculate running balance

        if ivt04a_key.FIRM_ID$="BB" then 
            let balance=ivt04a.TRANS_QTY
        else 
            let balance=balance+ivt04a.TRANS_QTY
        endif

rem --- Format detail fields

        dim description$[2]
        call pgmdir$+"ivc_td.bbx",b1$,channels[all],values[all],masks$[all],type$,description$[all]
        amount=ivt04a.TRANS_QTY*ivt04a.UNIT_COST
        needed=1
        if cvs(description$[1],2)<>"" then let needed=needed+1

rem --- Display page?

        if l+needed>maxrow then
            gosub lightbar
            if fkey=1 or fkey=4 or selection$<>"" then
                goto std_exit
            endif
       endif
            dim g1$(width-2)
            g1$(2)=fndate$(ivt04a$(d,3))+" "+type$
            g1$(16,dw)=description$[0]
            g1$(o[0])=str(ivt04a.TRANS_QTY:m2$)
            g1$(o[1])=str(ivt04a.UNIT_COST:m3$)
            g1$(o[2])=str(amount:m1$)
            if pos("B"=action$) then let g1$(o[3])=str(balance:m2$)
            llist$[page,row,1]=g1$
            row=row+1,found=1,l=l+1
            if description$[1]<>"" then
                g1$(1)=""
                g1$(16,dw)=description$[1]
                llist$[page,row,1]=g1$
                row=row+1,l=l+1
            endif
        

rem --- Which totals element?

        if ivt04a_key.FIRM_ID$="BB" then
            continue
        endif
        p=0
        for i=1 to sources
            if type$=types$[i] then let p=i; break
        next i

        if !p then
            p=pos(ivt04a_key.FIRM_ID$=source$,2)
            if p=0 then
                continue
            endif
            p=(p+1)/2
        endif
    
rem --- Accumulate totals

        types$[p]=type$
        qty[p]=qty[p]+ivt04a.TRANS_QTY,amt[p]=amt[p]+amount

rem --- Loop back for next record
    Wend

rem --- No more transactions
    if !found then
        dim message$[1]
        message$[0]="No Transactions Found (<Enter>=Continue)"
        call pgmdir$+"adc_stdmessage.aon",3,message$[all],0,-1,-1,ignore$,v3
        goto std_exit
    endif
rem --- Add totals to display page
    for i=0 to sources+1
        dim g1$(width-2)
        if i>0 and i<=sources and types$[i]="" then continue
        rem --- Display page?
        if l>=maxrow then
            gosub lightbar
            if fkey=1 or fkey=4 or selection$<>"" then exitto std_exit
        endif

rem --- Insert bar
        if i<>0 then
rem --- Store totals element
            if i=sources+1 then
                g1$(16)="Net Change"
                g1$(o[0])=str(netqty:m2$)
                g1$(o[2])=str(netamt:m1$)
            else
                g1$(11)=types$[i]
                g1$(16)="Total"
                g1$(o[0])=str(qty[i]:m2$)
                g1$(o[2])=str(amt[i]:m1$)
                netqty=netqty+qty[i]
                netamt=netamt+amt[i]
            endif
        else
            dim g1$(width-2,"-")
        endif

        rem --- Store line
    
        let llist$[page,row,1]=g1$,row=row+1,found=1,l=l+1
    
        rem --- Next totals element
    
    next i

rem --- Display last page
    if row<=maxrow then for i=row to maxrow; let llist$[page,i,1]=""; next i
    let selection$="|EOF"
    gosub lightbar
    if fkey=4 then goto std_exit

rem --- Window processing
    lightbar:
        let row=1,l=1,selection=0
        call pgmdir$+"syc_sa.bbx",5,llist$[all],more$[all],linfo$[all],selection$,selection,page,pages,maxrow,name$,height,width,fkey
        if fkey=5 or fkey=6 then let fkey=4
    return
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
