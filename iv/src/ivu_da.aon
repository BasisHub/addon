rem --- Inventory Transfer Update
rem --- Program ivu_da v8.0.0 05Dec2007 (ivu_da)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 12:22:18)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


                seterr std_error
                setesc std_error

rem --- Retrieve the program path

                pgmdir$=stbl("+dir_pgm",err=*next)
                precision p[2]

rem --- Retrieve sysinfo data

                sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
                dim sysinfo$:sysinfo_template$
                sysinfo$=stbl("+sysinfo",err=*next)
                milestone=num(stbl("+milestone",err=*next),err=*next)
                firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

                files=15,begfile=1,endfile=files
                dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
                files$[1]="arc_distcode",ids$[1]="ARC_DISTCODE"
                files$[2]="glm-01",ids$[2]="GLM_ACCT"
                files$[3]="glt-04",ids$[3]="GLE_DAILYDETAIL"
                files$[4]="glt-14",ids$[4]="GLX_DAILYXRF"
                files$[5]="ive-02",ids$[5]="IVE_TRANSFER"
                files$[6]="ivm-01",ids$[6]="IVM_ITEMMAST"
                files$[7]="ivm-02",ids$[7]="IVM_ITEMWHSE"
                files$[8]="ivm-04",ids$[8]="IVM_ITEMTIER"
                files$[9]="ivm-07",ids$[9]="IVM_LSMASTER"
                files$[10]="ivm-08",ids$[10]="IVX_LSXREF"
                files$[11]="ivm-12",ids$[11]="IVM_ITEMACT"
                files$[12]="ivm-17",ids$[12]="IVM_LSACT"
                files$[13]="ivs_params",ids$[13]="IVS_PARAMS"
                files$[14]="ivt-01",ids$[14]="IVT_LSTRANS"
                files$[15]="ivt-04",ids$[15]="IVT_ITEMTRAN"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
                if status goto std_exit
                arm10_dev=channels[1]
                glm01_dev=channels[2]
                glt04_dev=channels[3]
                glt14_dev=channels[4]
                ive02_dev=channels[5]
                ivm01_dev=channels[6]
                ivm02_dev=channels[7]
                ivm04_dev=channels[8]
                ivm07_dev=channels[9]
                ivm08_dev=channels[10]
                ivm12_dev=channels[11]
                ivm17_dev=channels[12]
                ivs01a_dev=channels[13]
                ivt01_dev=channels[14]
                ivt04_dev=channels[15]

rem --- Dimension string templates

                dim arm10a$:templates$[1],glm01a$:templates$[2],glt04a$:templates$[3],
:               glt14a$:templates$[4],ive02a$:templates$[5],ivm01a$:templates$[6],
:               ivm02a$:templates$[7],ivm04a$:templates$[8],ivm07a$:templates$[9],
:               ivm08a$:templates$[10],ivm12a$:templates$[11],ivm17a$:templates$[12],
:               ivs01a$:templates$[13],ivt01a$:templates$[14],ivt04a$:templates$[15]

rem --- Assign form input values to local variables

                value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

                 ivs01a_key$=firm_id$+"IV00"
                 find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Close Printer Before Asking Update Question

                 if gl$<>"Y" then close (printer_dev,err=*next)

rem --- Initializations

                precision p[2]
                dim files[44],params[10],params$[10],item$[3]
                files$[11]="ivm-12"
                files$[12]="ivt-04"
                if a9$<>"Y" then let gl$="N"

rem --- Additional File Opens

                if gl$="Y" then let files$[13]="glt-04",files$[14]="glt-14"
                if ls$="Y" then let files$[15]="ivm-07",files$[16]="ivm-08",files$[17]="ivm-17",files$[18]="ivt-01"
                call pgmdir$+"adc_fileopen.aon",1,11,18,files$[all],options$[all],channels[all],batch,status
                if status then goto std_exit
                ivm12_dev=channels[11]
                ivt04_dev=channels[12],glt04_dev=channels[13]
                glt14_dev=channels[14]
                ivm07_dev=channels[15],ivm08_dev=channels[16]
                ivm17_dev=channels[17]
                ivt01_dev=channels[18]

rem --- Background

                call pgmdir$+"syc_cn.bbx","",0,3,'ce',status

rem --- Run Update?

                msg_id$="AON_UPDT_QUERY"
                dim x$:stbl("+SYSINFO_TPL")
                dim msg_tokens$[1]
                x$=stbl("+SYSINFO")                                                            
                msg_tokens$[1]=x.task_desc$
                gosub disp_message
                if msg_opt$<>"Y" then goto std_exit

rem --- Initialize update arrays

                files[0]=sys01_dev
                files[1]=ivm01_dev,files[2]=ivm02_dev
                files[7]=ivm07_dev
                files[8]=ivm08_dev,files[12]=ivm12_dev
                files[17]=ivm17_dev
                files[41]=ivt01_dev,files[44]=ivt04_dev
                params[0]=g[0]
                more=1
                params$[0]=sysinfo.system_date$,params$[1]=sysinfo.user_id$
                params$[2]=p2$
                params$[3]=p3$,params$[4]=p4$,files[4]=ivm04_dev

                call pgmdir$+"adc_progress.aon","N","","","","",0,arm01_dev,1,meter_num,status

rem --- Disallow 'M'enu option in Error Routine

                exit_ctrl=1

rem --- Position file

                 read (ive02_dev,key=firm_id$,dom=*next)

rem --- Loop starts

While more

    ive02a_key$=key(ive02_dev,end=done)
    if pos(firm_id$=ive02a_key$)<>1
        break
    endif
    read record (ive02_dev) ive02a$
    if ls$="Y" then let xitem$=ive02a.ITEM_ID$(1+p[0],p[1]) else let xitem$=ive02a.ITEM_ID$(1,p[0])
    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
    if ive02a.TRANS_QTY<>0

        rem --- Retrieve item

        
            ivm01a.FIRM_ID$=firm_id$
            ivm01a.ITEM_ID$=ive02a.ITEM_ID$
            find record (ivm01_dev,key=ivm01a.FIRM_ID$+ivm01a.ITEM_ID$,dom=Remove_Record) ivm01a$

        rem --- Inventory initializations

            dim item$[3],refs$[20],refs[20]
            item$[0]=ive02a.FIRM_ID$
            item$[2]=ive02a.ITEM_ID$
            if ls$="Y" then let item$[3]=ive02a.LOTSER_NO$
            refs$[0]=ive02a.TRANS_DATE$
            refs$[2]=ive02a.INV_XFER_NO$,account$=""
            refs[1]=ive02a.UNIT_COST

        rem --- GL initializations

            if gl$="Y"
                when$=ive02a.TRANS_DATE$
                memo$=ive02a.ITEM_ID$(1,p[0])+" "+fnitem$(ivm01a.ITEM_DESC$,p[3],p[4],p[5])
                ref1$="Xfr "+ive02a.INV_XFER_NO$
            endif
        rem --- From warehouse GL update

            if gl$="Y"
                ivm02a.FIRM_ID$=ive02a.FIRM_ID$
                ivm02a.WAREHOUS_ID$=ive02a.WAREHOUSE_ID$
                ivm02a.ITEM_ID$=ive02a.ITEM_ID$
                find record (ivm02_dev,key=ivm02a.FIRM_ID$+ivm02a.WAREHOUSE_ID$+ivm02a.ITEM_ID$,dom=GlUpdat) ivm02a$
                ive02a.EXT_COST=ive02a.TRANS_QTY*ive02a.UNIT_COST
                amount=-ive02a.EXT_COST
                units=-ive02a.TRANS_QTY
                ref2$="Fr Whse "+ive02a.WAREHOUSE_ID$
                ref3$="To Whse "+ve02a.WAREHOUSE_ID_TO$
                gosub Update_Gl
            endif
        rem --- From warehouse inventory update

                item$[1]=ive02a.WAREHOUE_ID$
                refs$[4]=ive02a.WAREHOUE_ID_TO$,refs$[7]=account$
                action$="TO"
                refs[0]=-ive02a.TRANS_QTY
                gosub Update_Inventory

GlUpdat: rem --- To warehouse GL update

            if gl$="Y"
       
                ivm02a.FIRM_ID$=ive02a.FIRM_ID$
                ivm02a.WAREHOUSE_ID$=ive02a.WAREHOUSE_ID$
                ivm02a.ITEM_ID$=ive02a.ITEM_ID$
                find record (ivm02_dev,key=ivm02a.FIRM_ID$+ivm02a.WAREHOUSE_ID$+ivm02a.ITEM_ID$,dom=Inv_Update) ivm02a$
                amount=ive02a.EXT_COST
                units=ive02a.TRANS_QTY
                ref3$="Fr Whse "+ive02a.WAREHOUE_ID$
                ref2$="To Whse "+ive02a.WAREHOUE_ID_TO$
                gosub Update_Gl
            endif

Inv_Update: rem --- To warehouse inventory update

                item$[1]=ive02a.WAREHOUE_ID_TO$
                refs$[4]=ive02a.WAREHOUE_ID$,refs$[7]=account$
                action$="TI"
                refs[0]=ive02a.TRANS_QTY
                gosub Update_Inventory
    endif
Remove_Record: rem --- Remove record

                remove (ive02_dev,key=ive02a_key$,dom=done)

Wend

done: rem --- All done

                if gl$="Y" then call pgmdir$+"glc_ctlupdate.aon",status
                call pgmdir$+"adc_batchdelete.aon",status
                goto std_exit

Update_Gl: rem --- Update GL

                dim x$(8*g[4],"0")
                account$=ivm01a.gl_inv_acct$
                find record (arm10_dev,key=firm_id$+"D"+ivm02a.AR_DIST_CODE$,dom=prcn) arm10d$
                account$=arm10d.gl_inv_acct$+arm10d.gl_cogs_acct$+arm10d.gl_cogs_adj$+arm10d.gl_ppv_acct$+arm10d.gl_purc_acct$
prcn:
                precision 2
                amount=amount*1
                precision p[2]
                gosub glpost
                return

Update_Inventory: rem --- Update Inventory

                call pgmdir$+"ivc_ua.bbx",action$,files[all],params[all],params$[all],item$[all],refs$[all],refs[all],status
                return

rem --- Standard G/L Posting Routine

glpost:

                if gl$="Y"
                    call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,glt14_dev,account$,when$,ref1$,ref2$,ref3$,memo$,amount,units,status
                endif    
                return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
