rem --- Physical Inventory Count Sheets
rem --- Program ivr_physcountsheets.aon v8.0.0 09Jul2007 (ivr_ua)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:44:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2009 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
	
rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)
	
rem --- Use for type checking

    use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Run Update?

    msg_id$="IV_READY_TO_PRINT"
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit
	
rem --- Assign form input values to local variables

    declare Option option!
    declare BBjObjectTable ot!

    whse$     = option!.getOptionData("WAREHOUSE_ID")	
    quantity$ = option!.getOptionData("PRINT_SYS_QTYS")

    ot! = BBjAPI().getObjectTable()
    selected_all = num( ot!.get("IVR_PHYSPRINT.SELECTED_ALL") )

rem --- Close Physcode file, it's locked by the Options Entry code

    call sypdir$ + "bac_open_table.bbj",
:		"IVC_PHYSCODE",
:		"C",
:		rd_table_chans$[all],
:		open_chan,
:		table_tpl$,
:		proc_mssg$	

rem --- Open all files

    num_files = 6
    open_beg  = 1
    open_end  = num_files

    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]="IVS_PARAMS",   open_opts$[1]="OTA"
    open_tables$[2]="IVE_PHYSICAL", open_opts$[2]="OTA"
    open_tables$[3]="IVC_PHYSCODE", open_opts$[3]="OTAL"
    open_tables$[5]="IVM_ITEMMAST", open_opts$[5]="OTA"
	open_tables$[6]="IVC_WHSECODE", open_opts$[6]="OTA"

    gosub open_tables

    params_dev   = num(open_chans$[1])
    physical_dev = num(open_chans$[2])
    physcode_dev = num(open_chans$[3])
    itemmast_dev = num(open_chans$[5])
	whsecode_dev = num(open_chans$[6])

    dim params_rec$:open_tpls$[1]
    dim physical_rec$:open_tpls$[2]
    dim physcode_rec$:open_tpls$[3]
    dim itemmast_rec$:open_tpls$[5]
	dim whsecode_rec$:open_tpls$[6]

rem --- Parameters

    find record (params_dev, key=firm_id$+"IV00", dom=std_missing_params) params_rec$	
    if pos(params_rec.lotser_flag$ = "LS") then ls$="Y" else ls$ = "N"

rem --- Open Lot/serial file if necessary

    if ls$ = "Y" then 
        open_beg = 1
        open_end = 1
        open_tables$[1]="IVM_LSMASTER", open_opts$[1]="OTA"
        gosub open_tables
        lsmaster_dev = num(open_chans$[1])
        dim lsmaster_rec$:open_tpls$[1]
    endif

rem --- Parameters

    dim p[5]
    p[0]=params_rec.item_id_len
    p[1]=num(params_rec.precision$)
    p[2]=params_rec.ls_no_len
    p[3]=num(params_rec.desc_len_01$)
    p[4]=num(params_rec.desc_len_02$)
    p[5]=num(params_rec.desc_len_03$)
    dw=(p[3]+p[4]+p[5])/2

rem --- Initializations

    precision p[1]
	
    if ls$="Y" then lsh$="Lot/Serial Number" else lsh$=""
	if quantity$="Y" then sqh$="Quantity" else sqh$=" "
	
rem --- Resize masks

    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12

rem --- Retrieve warehouse and build HEADINGS$

	whsecode_rec.short_name$="(Warehouse Not Found)"
    find record (whsecode_dev, key=firm_id$+"C"+whse$, dom=*next) whsecode_rec$
	
	headings=4
	dim headings$[headings]
	headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" For Warehouse "+whse$+" "+cvs(whsecode_rec.short_name$,2)
    headings$[3]="[HEADER]"

rem --- Print positions

    width=132

	dim o[6]
    o[1]=p[0]+1
    o[3]=o[1]+max(dw,40)+1
    o[2]=o[3]
    o[4]=o[3]+4
    o[5]=o[4]+11
    o[6]=o[5]
    split=0
    if quantity$="Y" o[6]=o[5]+m2+2
	
    if o[6]>=93 then
        o[6]=92
        o[5]=o[6]
        if quantity$="Y" then o[5]=o[6]-m2-2
        o[4]=o[5]-11
        o[3]=o[4]-4
        dw=o[3]-o[1]-1
    endif
	
    dim j9$(width-o[6],"_")

    if ls$="Y" then 
		o[2] = o[3] - max(p[2], len(lsh$)) - 1
	endif
	
rem --- Document initializations

	declare BBjVector OutVect!
	declare BBjVector HdrVect!
	declare BBjVector BrkVect!

	OutVect!=BBjAPI().makeVector()
	HdrVect!=BBjAPI().makeVector()
	BrkVect!=BBjAPI().makeVector()
	
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)	
	
rem --- Column headings
	
    columns=6
    dim columns$[columns,10]

    columns$[0,0] = "Item",           columns$[0,1] = "C", columns$[0,2] = str(p[0])
    columns$[1,0] = "Description",    columns$[1,1] = "C", columns$[1,2] = str(dw)
    columns$[2,0] = lsh$,             columns$[2,1] = "C", columns$[2,2] = str( iff(lsh$="", 0, p[2]) ); rem Lot/Serial#
    columns$[3,0] = "UM",             columns$[3,1] = "C", columns$[3,2] = "2"
	columns$[4,0] = "Location",       columns$[4,1] = "C", columns$[4,2] = "10"
    columns$[5,0] = sqh$,             columns$[5,1] = "N", columns$[5,2] = str( iff(sqh$="", 0, m2) ), columns$[5,3] = m2$; rem system QOH
	columns$[6,0] = "Physical Count", columns$[6,1] = "C", columns$[6,2] = str(len(j9$))
	
rem --- Report headings

    headings=2
	dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$	
	headings$[headings]="[HEADER]"

rem --- Report Inits

    call pgmdir$+"adc_progress.aon","N","","","","",0,physical_dev,1,meter_num,ignore_status
	
    number=0
    more=1
	nl=0
	
	read (physcode_dev, key=firm_id$, dom=*next)

rem --- Get next cycle

    while more

		read record (physcode_dev, end=*break) physcode_rec$
		if physcode_rec.firm_id$ <> firm_id$ then break
		if physcode_rec.pending_action$ <> "2" then continue

        whse_id$    = physcode_rec.warehouse_id$
		cycle_code$ = physcode_rec.pi_cyclecode$
		
rem --- Cycle code break

		last$=""
		BrkVect!.addItem( str(OutVect!.size()/(columns+1)) )
		HdrVect!.addItem( "Cycle Code "+cycle_code$+" - Physical Date "+fndate$(physcode_rec.cutoff_date$) )
		
rem --- Get physical inventory record(s) (may be lot/serial)

		first_time = 1
		first$ = firm_id$+whse_id$+cycle_code$
		read (physical_dev, key=first$, dom=*next)
		
		while more
		
			physical_key$ = key(physical_dev, end=*break)
			if pos(first$ = physical_key$) <> 1 then break
			read record (physical_dev) physical_rec$

			item_id$   = physical_rec.item_id$
			location$  = physical_rec.location$
			lotser_no$ = physical_rec.lotser_no$
			
			call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
		
rem --- Retrieve item master

			dim description$(dw)
			itemmast_rec.item_desc$="(Item Not Found)"
			find record (itemmast_dev, key=firm_id$+item_id$, dom=*next) itemmast_rec$
			description$=fnitem$(itemmast_rec.item_desc$,p[3],p[4],p[5])
			number=number+1
                        this_item_not_lotser = 1
                        if ls$="N" or itemmast_rec.lotser_item$ <> "Y" or itemmast_rec.inventoried$ <> "Y" then
                            this_item_not_lotser = 0
                        endif
                        this_item_not_lotser = (ls$ = "N" or itemmast_rec.lotser_item$ <> "Y" or itemmast_rec.inventoried$ <> "Y")
			
rem --- Print detail line (non-lotted/serialized)

			if this_item_not_lotser
				if nl>0 then ignore=fnblank_line(void)
				
				if split then x$="" else x$=description$
				if quantity$="Y" then qty$=str(physical_rec.freeze_qty) else qty$=" "
				OutVect!.addItem(physical_rec.item_id$)
				OutVect!.addItem(x$)
				OutVect!.addItem("")
				OutVect!.addItem(itemmast_rec.unit_of_sale$)
				OutVect!.addItem(physical_rec.location$)
				OutVect!.addItem(qty$)
				OutVect!.addItem(j9$)

				if split then x$=description$ else x$=""
				OutVect!.addItem("")
				OutVect!.addItem(x$)
				ignore=fnblank(5)
				
				continue
			endif
			
rem --- Print detail line (lotted/serialized)

			if firm_id$+whse_id$+cycle_code$+location$+item_id$ <> last$ then
				gosub item_subhead
			endif
			
rem --- Print detail for blank lot/serial number	
rem     The only reason a lot/serial# should be blank is if it is missing.
		
			if cvs(physical_rec.lotser_no$,2) = "" then 
				physical_rec.lotser_no$ = "Missing"
				print_loc$ = fill(10, ".")

rem 			Lotted				
				if params_rec.lotser_flag$ = "L" then
					qty = physical_rec.act_phys_cnt
					gosub print_detail
				else
rem 				Serial#'s					
					for count = 1 to physical_rec.act_phys_cnt
						qty = 1
						gosub print_detail
					next count
				endif
			
			else
			
rem --- Retrieve and print lot/serial record, determine source of location 

				print_loc$ = physical_rec.location$
				find record (lsmaster_dev, key=firm_id$+whse_id$+item_id$+physical_rec.lotser_no$, dom=*next) lsmaster_rec$
				print_loc$ = lsmaster_rec.ls_location$
				
rem 			Lotted				
				if params_rec.lotser_flag$ = "L" then
					qty = physical_rec.act_phys_cnt
					gosub print_detail
				else
rem 				Serial#'s					
					for count = 1 to physical_rec.act_phys_cnt
						qty = 1
						gosub print_detail
					next count
				endif
			
			endif
		
rem --- Next physical record

		wend
		
rem --- Cycle code update

		find record (physcode_dev, key=firm_id$+whse_id$+cycle_code$, dom=*endif) physcode_rec$
		physcode_rec.phys_inv_sts$   = physcode_rec.pending_action$
		physcode_rec.pending_action$ = "0"
		physcode_rec$ = field(physcode_rec$)
		write record (physcode_dev) physcode_rec$
		
rem --- Loop back for next SQL record

    wend

rem --- All done

	call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,ignore_status

    if number=0 then 
		OutVect!.addItem("")
		OutVect!.addItem("No Physical Inventory Entries Found")
		ignore=fnblank(5)
	endif
	
    goto std_exit

item_subhead: rem --- Item subheading (lotted/serialized)

    if nl then ignore=fnblank_line(void)
	
    if split then x$="" else x$=description$ 
	OutVect!.addItem(physical_rec.item_id$)
	OutVect!.addItem(x$)
	OutVect!.addItem("")
	OutVect!.addItem(itemmast_rec.unit_of_sale$)
	OutVect!.addItem(physical_rec.location$)
	ignore=fnblank(2)
	
    if split then x$=description$ else x$=""
	OutVect!.addItem("")
	OutVect!.addItem(x$)
	ignore=fnblank(5)
	
    l=l+2+nl
	last$ = firm_id$+whse_id$+cycle_code$+location$+item_id$
	
    return

print_detail: rem --- Print lot/serial detail

    nl=1
    if quantity$="Y" then qty$=str(qty) else qty$=" "
	ignore=fnblank(2)
	OutVect!.addItem(physical_rec.lotser_no$)
	OutVect!.addItem("")
	OutVect!.addItem(print_loc$)
	OutVect!.addItem(qty$)
	OutVect!.addItem(j9$)
    first_time=0
	
    return

open_tables: rem --- Open tables

    call sypdir$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        status=912
        goto std_exit
    endif

    return

disp_message: rem --- Display Message Dialog

    call sypdir$+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

    return
	
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return void
    fnend

rem --- Create a blank line.  "void" is simply a variable; it's there to remind you that this function takes no input

	def fnblank_line(void)=fnblank(columns+1)

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    
    rem --- Close Warehouse file, it's locked by the Options Entry code
	
    call sypdir$ + "bac_open_table.bbj",
:		"IVC_PHYSCODE",
:		"C",
:		rd_table_chans$[all],
:		open_chan,
:		table_tpl$,
:		proc_mssg$	

    run sypdir$+"bas_process_end.bbj",err=*next
    release

    end
