rem --- Lot/Serial Number Status Report (Report Overlay)
rem --- Program ivr_lotstatus_o1.aon v8.0.0 16Jul2007 (ivr_yb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:08:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]
    dim warehouse[4],item[4],report[4],total[4]
    when$=sysinfo.system_date$
    clock$=""
    h9$=""
    width=132
    page=0
    done=0
    if sequence$="L" headings=5 else headings=6
    dim headings$[headings+1]
    if ivs01a.lotser_flag$="L" p8$=Translate!.getTranslation("AON_LOT_#") else p8$=Translate!.getTranslation("AON_SERIAL_#")
    more=1
    recs=0
    total_recs=0

    call pgmdir$+"adc_progress.aon","N","IVM_LSMASTER","","","",0,ivm07_dev,1,meter_num,status

rem --- initialize HEADINGS$

    headings$[0]=sysinfo.firm_name$
    x3$=Translate!.getTranslation("AON_ALL_ITEM_TYPES")
    if type$<>"" x3$=Translate!.getTranslation("AON_ITEM_TYPE_")+type$
    if sequence$="I" headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_ITEM_FOR_")+x3$
    if sequence$="L" headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_LOT/SERIAL_NUMBER_FOR_")+x3$
    if open_status$="O" headings$[1]=Translate!.getTranslation("AON_OPEN_")+headings$[1]
    if open_status$="C" headings$[1]=Translate!.getTranslation("AON_CLOSED_")+headings$[1]

    if begitem$="" headings$[2]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[2]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" headings$[2]=headings$[2]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[2]=headings$[2]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if beglot$=""  headings$[3]=Translate!.getTranslation("AON_FROM_LOT/SERIAL_NUMBER:__FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_LOT/SERIAL_NUMBER:__")+beglot$
    if endlot$=""  headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_LOT/SERIAL_NUMBER:_LAST") else headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_LOT/SERIAL_NUMBER:_")+endlot$
    if begprod$="" headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$

    if sequence$="L"
        if begwhse$="" headings$[5]=Translate!.getTranslation("AON_FROM_WAREHOUSE:__FIRST") else headings$[5]=Translate!.getTranslation("AON_FROM_WAREHOUSE:_")+begwhse$                
        if endwhse$="" headings$[5]=headings$[5]+Translate!.getTranslation("AON__--__TO_WAREHOUSE:__LAST") else headings$[5]=headings$[5]+Translate!.getTranslation("AON__--___TO_WAREHOUSE:_") +endwhse$
    endif

    if sequence$="I" then column_head$=Translate!.getTranslation("AON_ITEM^LOT/SERIAL_#") else column_head$=p8$+Translate!.getTranslation("AON_^WHSE_ITEM")
    if sequence$="I" then headings$[6]="[HEADER]"

rem --- Column Headings

    dim columns$[9,10]
    columns=10
    columns$[0,0]=column_head$,            columns$[0,1]="C",columns$[0,2]="15"
    columns$[1,0]=Translate!.getTranslation("AON_RECEIVED"),              columns$[1,1]="C",columns$[1,2]="10"
    columns$[2,0]=Translate!.getTranslation("AON_SOLD_OR^ISSUED"),        columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_VENDOR"),                columns$[3,1]="C",columns$[3,2]="10"
    columns$[4,0]=Translate!.getTranslation("AON_PROD^TYPE"),             columns$[4,1]="C",columns$[4,2]="5"
    columns$[5,0]=Translate!.getTranslation("AON_QUANTITY^ON_HAND"),      columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m2$
    columns$[6,0]=Translate!.getTranslation("AON_COMMITTED^QUANTITY_"),   columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$
    columns$[7,0]=Translate!.getTranslation("AON_QUANTITY^AVAILABLE"),    columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$
    columns$[8,0]=Translate!.getTranslation("AON_UNIT_COST"),             columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m3$
    columns$[9,0]=Translate!.getTranslation("AON_TOTAL_VALUE"),           columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Position file

    if sequence$="I" then
        keynum$="PRIMARY"
        ivm07a_key$=firm_id$+begwhse$
        if begwhse$<>"" and begitem$<>"" ivm07a_key$=ivm07a_key$+begitem$+beglot$
    endif

    if sequence$="L" then
        keynum$="AO_LOT_WH_ITEM"
        ivm07a_key$=firm_id$+beglot$
        if beglot$<>"" and begwhse$<>"" ivm07a_key$=ivm07a_key$+begwhse$+begitem$
    endif

    found_first=0
    read (ivm07_dev,key=ivm07a_key$,knum=keynum$,dom=*next)ivm07a$;found_first=1

	lotser_len$=fattr(ivm07a$,"lotser_no","")
	lotser_len=dec(lotser_len$(10,2))
	if cvs(beglot$,2)<>"" beglot$=pad(beglot$,lotser_len)
	if cvs(endlot$,2)<>"" endlot$=pad(endlot$,lotser_len)

rem --- Next record

    while more
        if foundfirst=0
            read record(ivm07_dev,end=*break)ivm07a$
            found_first=1
        endif

        if sequence$="I"
            if pos(firm_id$=ivm07a.firm_id$)<>1 then break
            if endwhse$<>"" and ivm07a.warehouse_id$>endwhse$ then break
            if begitem$<>"" and ivm07a.item_id$<begitem$ then read (ivm07_dev,key=ivm07a.firm_id$+ivm07a.warehouse_id$+begitem$,knum=keynum$,dom=*continue);continue
            if enditem$<>"" and ivm07a.item_id$>enditem$ then read (ivm07_dev,key=ivm07a.firm_id$+ivm07a.warehouse_id$+$FF$,knum=keynum$,dom=*continue);continue
            if beglot$<>"" and ivm07a.lotser_no$<beglot$ then read (ivm07_dev,key=ivm07a.firm_id$+ivm07a.warehouse_id$+ivm07a.item_id$+beglot$,knum=keynum$,dom=*continue);continue
            if endlot$<>"" and ivm07a.lotser_no$>endlot$ then read (ivm07_dev,key=ivm07a.firm_id$+ivm07a.warehouse_id$+ivm07a.item_id$+$FF$,knum=keynum$,dom=*continue);continue
            x$=ivm07a.warehouse_id$+" "+ivm07a.item_id$+" "+ivm07a.lotser_no$
        else
            if pos(firm_id$=ivm07a.firm_id$)<>1 then break
            if endlot$<>"" if ivm07a.lotser_no$>endlot$ then break
            if begwhse$<>"" and ivm07a.warehouse_id$<begwhse$ then read (ivm07_dev,key=ivm07a.firm_id$+ivm07a.lotser_no$+begwhse$,knum=keynum$,dom=*continue);continue
            if endwhse$<>"" and ivm07a.warehouse_id$>endwhse$ then read (ivm07_dev,key=ivm07a.firm_id$+ivm07a.lotser_no$+$FF$,knum=keynum$,dom=*continue);continue
            if begitem$<>"" and ivm07a.item_id$<begitem$ then read (ivm07_dev,key=ivm07a.firm_id$+ivm07a.lotser_no$+ivm07a.warehouse_id$+begitem$,knum=keynum$,dom=*continue);continue
            if enditem$<>"" and ivm07a.item_id$>enditem$ then read (ivm07_dev,key=ivm07a.firm_id$+ivm07a.lotser_no$+ivm07a.warehouse_id$+$FF$,knum=keynum$,dom=*continue);continue
            x$=ivm07a.item_id$+" "+ivm07a.warehouse_id$+" "+ivm07a.lotser_no$
        endif

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

    rem --- Read ivm-07 Lot/Serial Master

        if open_status$="O" and ivm07a.qty_on_hand=0 then continue
        if open_status$="C" and ivm07a.qty_on_hand<>0 then continue

    rem --- Format output fields

        dim amount[4]
        whse$=ivm07a.warehouse_id$
        item$=ivm07a.item_id$
        lotser$=ivm07a.lotser_no$
        find record (ivm01_dev,key=firm_id$+item$,dom=*next) ivm01a$
        if begprod$<>"" and ivm01a.product_type$<begprod$ then continue
        if endprod$<>"" and ivm01a.product_type$>endprod$ then continue
        if type$<>"" and ivm01a.item_type$<>type$ then continue
        amount[0]=ivm07a.qty_on_hand
        amount[1]=ivm07a.qty_commit
        amount[2]=ivm07a.qty_on_hand-ivm07a.qty_commit
        amount[3]=ivm07a.unit_cost
        amount[4]=(ivm07a.qty_on_hand-ivm07a.qty_commit)*ivm07a.unit_cost
        received$=ivm07a.lstrec_date$
        issued$=ivm07a.lstsal_date$
        if ivm07a.lstblt_date$>received$ received$=ivm07a.lstblt_date$
        if ivm07a.lstiss_date$>issued$ issued$=ivm07a.lstiss_date$
        if cvs(received$,2)<>"" received$=fndate$(received$)
        if cvs(issued$,2)<>"" issued$=fndate$(issued$)
        comment$=cvs(ivm07a.ls_comments$,2)
        vendor$=ivm07a.vendor_id$

    rem --- Branch based on sequence

        if sequence$="I" then
        rem --- Item Sequence

            if whse$<>t0$ gosub whse_break
            if item$<>t1$ gosub item_break
            gosub total_accum

        rem --- Item subheading

            if h9$<>"" then                     
                OutVect!.addItem(h9$)
                xwk=fnblank(3)
                OutVect!.addItem(prod_type$)
                xwk=fnblank(columns-5)
                h9$=""
            endif

        rem --- Print detail line

            OutVect!.addItem("   "+lotser$)
            OutVect!.addItem(received$)
            OutVect!.addItem(issued$)
            OutVect!.addItem(vendor$)
            OutVect!.addItem("")
            OutVect!.addItem(str(amount[0]))
            OutVect!.addItem(str(amount[1]))
            OutVect!.addItem(str(amount[2]))
            OutVect!.addItem(str(amount[3]))
            OutVect!.addItem(str(amount[4]))

            xwk=fnblank(1)
            OutVect!.addItem("  "+comment$)
            xwk=fnblank(columns-2)
            recs=recs+1
            continue
        endif

    rem --- Lot/Serial Sequence

        if item$<>t1$ gosub assign_item_head
        gosub total_accum

    rem --- Print detail line

        OutVect!.addItem(lotser$)
        OutVect!.addItem(received$)
        OutVect!.addItem(issued$)
        OutVect!.addItem(vendor$)
        OutVect!.addItem("")
        OutVect!.addItem(str(amount[0]))
        OutVect!.addItem(str(amount[1]))
        OutVect!.addItem(str(amount[2]))
        OutVect!.addItem(str(amount[3]))
        OutVect!.addItem(str(amount[4]))
        OutVect!.addItem("   "+h9$)
        xwk=fnblank(3)
        OutVect!.addItem(prod_type$)
        xwk=fnblank(columns-5)

        xwk=fnblank(1)
        OutVect!.addItem("  "+comment$)
        xwk=fnblank(columns-2)
        recs=recs+1

    rem --- Loop back for next record

    wend

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    if sequence$="I" gosub whse_break
    total$=Translate!.getTranslation("AON_REPORT")
    t=0

    for x=0 to 4
        total[x]=report[x]
    next x

    gosub print_total_line
    goto std_exit

whse_break: rem --- Warehouse Break

    if t0$<>"" then 
        if sequence$="I" gosub item_break
        total$=Translate!.getTranslation("AON_WAREHOUSE_")+t0$
        t=0

        for x=0 to 4
            total[x]=warehouse[x]
        next x

        gosub print_total_line
    endif

    if done return
    dim warehouse[4]
    t0$=whse$
    ivm10c.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x$=Translate!.getTranslation("AON_WAREHOUSE_")+t0$+" "+cvs(ivm10c.short_name$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)

    return

item_break: rem --- Item break

    if t1$<>"" then 
        total$=Translate!.getTranslation("AON_ITEM_")+t1$
        t=1

        for x=0 to 4
            total[x]=item[x]
        next x

        gosub print_total_line
    endif

assign_item_head: 

    dim item[4]
    t1$=item$,ivm01a_key$=firm_id$+item$,description$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm01_dev,key=ivm01a_key$,dom=*return) ivm01a$
    description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
    if sequence$="I" h9$=ivm01a.item_id$+" "+description$
    if sequence$="L" h9$=whse$+" "+ivm01a.item_id$+" "+description$
    prod_type$=ivm01a.product_type$

    return

total_accum: rem --- Accumulate totals

    for x=0 to 4
        item[x]=item[x]+amount[x]
        warehouse[x]=warehouse[x]+amount[x]
        report[x]=report[x]+amount[x]
    next x

    return

print_total_line: rem --- Print total line

    total$=Translate!.getTranslation("AON_TOTAL_FOR_")+cvs(total$,2)
    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns)))

    if t=0 
        OutVect!.addItem(total$)
        xwk=fnblank(columns-2)
        OutVect!.addItem(str(total[4]))
    endif  

    if t>0 
        OutVect!.addItem(total$)
        xwk=fnblank(columns-6)
        OutVect!.addItem(str(total[0]))
        OutVect!.addItem(str(total[1]))
        OutVect!.addItem(str(total[2]))
        OutVect!.addItem("")
        OutVect!.addItem(str(total[4]))
    endif

    xwk=fnblank(columns)

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
