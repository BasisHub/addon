rem --- Inventory Transaction Update
rem --- Program ivu_aa v8.0.0 05Dec2007 (ivu_aa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 10:18:06)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

	setesc std_error
	seterr std_error

rem --- Retrieve the program path

	pgmdir$=""
	pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL")
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO")
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$
	
rem --- Run Update?

	msg_id$="AON_UPDT_QUERY"
	dim msg_tokens$[1]
	msg_tokens$[1]=sysinfo.task_desc$
	gosub disp_message
	if msg_opt$<>"Y" then goto std_exit
	
rem --- Open/Lock files

	files=30,begfile=1,endfile=20
	dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
	files$[5]="ive-01",ids$[5]="IVE_TRANSHDR"
	files$[6]="ive-11",ids$[6]="IVE_TRANSDET"
	files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
	files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
	files$[10]="ivm-05",ids$[10]="IVM_ITEMVEND"
	files$[13]="ivc_trancode",ids$[13]="IVC_TRANCODE"
	files$[14]="ivm-12",ids$[14]="IVM_ITEMACT"
	files$[16]="ivs_params",ids$[16]="IVS_PARAMS"
	files$[20]="ivt-04",ids$[20]="IVT_ITEMTRAN"
	
	call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
	if status then goto std_exit
	
	ive01_dev=channels[5]
	ive11_dev=channels[6]
	ivm01_dev=channels[7]
	ivm02_dev=channels[8]
	ivm05_dev=channels[10]
	ivm10_dev=channels[13]
	ivm12_dev=channels[14]
	ivs01a_dev=channels[16]
	ivt04_dev=channels[20]

rem --- Dimension string templates

	dim ive01a$:templates$[5]
	dim ive11a$:templates$[6]
	dim ivm01a$:templates$[7]
	dim ivm02a$:templates$[8]
	dim ivm10b$:templates$[13]
	dim ivs01a$:templates$[16]

rem --- Retrieve parameter records

	ivs01a_key$=firm_id$+"IV00"
	find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

    if pos(ivs01a.lotser_flag$="LS") then ls$="Y" else ls$="N"
    if pos(ivs01a.lifofifo$="LF") then lf$="Y" else lf$="N"
	
	rem --- Is the GL module installed?
	gl$="N"
	call pgmdir$+"adc_application.aon","GL",info$[all]
	
	if info$[20]="Y" then 
		call pgmdir$+"adc_application.aon","IV",info$[all]
		
		rem --- Does IV post to GL?
		gl$=info$[9]
	endif

rem --- Additional File Opens

	if gl$="Y" then
		begfile=21,endfile=22
		files$[21]="glm-01",ids$[21]="GLM_ACCT"
		files$[22]="glt-04",ids$[22]="GLE_DAILYDETAIL"
		
		call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
		if status then goto std_exit
		
		glm01_dev=channels[21]
		glt04_dev=channels[22]
	endif

	rem --- Lot / Serial number?
	if ls$="Y" then
		begfile=23,endfile=27
		files$[23]="ivm-07",ids$[23]="IVM_LSMASTER"
		files$[24]="ivm-17",ids$[24]="IVM_LSACT"
		files$[25]="ivt-01",ids$[25]="IVT_LSTRANS"
		files$[26]="ivt-02",ids$[26]="IVX_LSCUST"
		files$[27]="ivt-03",ids$[27]="IVX_LSVEND"

		call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
		if status then goto std_exit
		
		ivm07_dev=channels[23]
		ivm17_dev=channels[24]
		ivt01_dev=channels[25]
		ivt02_dev=channels[26]
		ivt03_dev=channels[27]
	endif
	
	rem --- LIFO/FIFO?
	if lf$="Y" then
		begfile=28,endfile=28
		files$[28]="ivm-04",ids$[28]="IVM_ITEMTIER"
		call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],ids$[all],templates$[all],channels[all],batch,status
		ivm04_dev=channels[28]
	endif
		
rem --- Init Data

	precision num(ivs01a.precision$)
	dim files[44],item$[3]
	rem dim a0$(50),b0$(22),b1$(60)
	rem dim c0$(24),c1$(64),y0$(32),y1$(g[4]),x0$(32),x1$(8*g[4])
	rem dim w0$(53),w1$(22),w2$(67),w[2]
	
	files[1]=ivm01_dev
	files[2]=ivm02_dev
	files[4]=ivm04_dev
	files[5]=ivm05_dev
	files[7]=ivm07_dev
	files[12]=ivm12_dev
	files[17]=ivm17_dev
	files[41]=ivt01_dev
	files[42]=ivt02_dev
	files[43]=ivt03_dev
	files[44]=ivt04_dev
	
	more=1
	
rem --- Position header file

	call pgmdir$+"adc_progress.aon","N","","","","",0,ive01_dev,1,meter_num,ignore_status

	read (ive01_dev,key=firm_id$,dom=*next)

	while more

		ive01_key$=key(ive01_dev,end=*break)
		if pos(firm_id$=ive01_key$)<>1 then break
		read record (ive01_dev) ive01a$

rem --- Transaction Code

		rem dim y1$(g[4],"0")
		find record (ivm10_dev,key=firm_id$+"B"+ive01a.trans_code$,dom=*next) ivm10b$

rem --- Position detail file

		read (ive11_dev,key=ive01a.firm_id$+ive01a.iv_trans_no$,dom=*next)

		while more

			ive11a_key$=key(ive11_dev,end=*break)
			
			if pos(ive01a.firm_id$+ive01a.iv_trans_no$=ive11a_key$)<>1 then break
			read record (ive11_dev) ive11a$
			call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

			if pos(ivm10b.trans_type$="AIR") then 
				
rem --- Item Number

				dim item$[3],ref$[11],ref[3]; rem ,z0$(g[4])
				find record (ivm01_dev,key=firm_id$+ive11a.item_id$,dom=*endif) ivm01a$

				item$[1]=ive11a.warehouse_id$
				item$[2]=ive11a.item_id$
				item$[3]=ive11a.lotser_no$
				action$="I"+ivm10b.trans_type$
				ref$[0]=ive01a.trans_date$
				ref$[2]=ive01a.iv_trans_no$
				ref$[4]=ive01a.trans_code$
				ref[0]=ive11a.trans_qty
				ref[1]=ive11a.unit_cost
				ref$[7]=ive11a.gl_account$
				ref$[8]=ive01a.trans_cmt$

				if ls$="Y" then let ref$[10]=ive11a.ls_location$,ref$[11]=ive11a.ls_comments$
				if ivm10b.trans_type$="I" then let ref[0]=-ref[0]

rem --- Inventory updates

				call pgmdir$+"ivc_itemupdt.aon",action$,files[all],ivs01a$,item$[all],ref$[all],ref[all],table_chans$[all],ignore_status
			
			endif

rem --- Remove detail and loop back for next

			remove (ive11_dev,key=ive11a_key$,dom=*next)

		wend

rem --- Remove Header Here

		remove (ive01_dev,key=ive01_key$,dom=*next)

	wend

rem --- All done

    if gl$="Y"
       call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,ignore_status
       call pgmdir$+"glc_ctlupdate.aon",ignore_status
    endif
    call pgmdir$+"adc_batchdelete.aon",err=*next,ignore_status
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
	
return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
