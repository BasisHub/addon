rem --- Inventory Stock Movement Report
rem --- Program ivr_stkmovemt.aon v8.0.0 09Jul2007 (ivr_ca)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:47:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
    files$[4]="ivm-03",ids$[4]="IVX_ITEMPROD"
    files$[5]="ivc_prodcode",ids$[5]="IVC_PRODCODE"
    files$[6]="ivm-12",ids$[6]="IVM_ITEMACT"
    files$[7]="ivm-14",ids$[7]="IVM_ITEMSYN"
    files$[8]="ivm-15",ids$[8]="IVC_TYPECODE"
    files$[9]="ivs_params",ids$[9]="IVS_PARAMS"
    files$[10]="ivs_abcparam",ids$[10]="IVS_ABCPARAM"
    files$[11]="ivc_whsecode",ids$[11]="IVC_WHSECODE"
    
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm03_dev=channels[4]
    ivm10a_dev=channels[5]
    ivm12_dev=channels[6]
    ivm14_dev=channels[7]
    ivm15_dev=channels[8]
    ivs01a_dev=channels[9]
    ivs01c_dev=channels[10]
    ivm10c_dev=channels[11]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm03a$:templates$[4],
:       ivm10a$:templates$[5],ivm12a$:templates$[6],ivm14a$:templates$[7],
:       ivm15a$:templates$[8],gls01a$:templates$[1],ivs01a$:templates$[9],
:	ivs01c$:templates$[10],ivm10c$:templates$[11]

rem --- Assign form input values to local variables

    period$=option!.getOptionData("pick_gl_per")
    year$=option!.getOptionData("pick_year")
    subtotals$=option!.getOptionData("pick_check")
    level$=option!.getOptionData("stock_level")
    begwhse$=option!.getOptionData("warehouse_id_1")
    endwhse$=option!.getOptionData("warehouse_id_2")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")
    begitem$=option!.getOptionData("item_id_1")
    enditem$=option!.getOptionData("item_id_2")
    type$=option!.getOptionData("item_type")

rem --- Retrieve parameter records
    
    find record (gls01_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g2$=gls01a.max_acct_len$
    g5$=gls01a.acct_output$

rem --- Parameters

    dim p[7],g[1],abcp[25],factors[25],per_name$[13]

    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    find record (ivs01c_dev,key=firm_id$+"IV02",err=*next) ivs01c$

    P[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    g[0]=num(gls01a.total_pers$)
    p[6]=num(ivs01a.current_per$)
    p[7]=num(ivs01a.current_year$)
    m2=len(m2$)

    per_name$[1]=gls01a.period_name_01$
    per_name$[2]=gls01a.period_name_02$
    per_name$[3]=gls01a.period_name_03$
    per_name$[4]=gls01a.period_name_04$
    per_name$[5]=gls01a.period_name_05$
    per_name$[6]=gls01a.period_name_06$
    per_name$[7]=gls01a.period_name_07$
    per_name$[8]=gls01a.period_name_08$
    per_name$[9]=gls01a.period_name_09$
    per_name$[10]=gls01a.period_name_10$
    per_name$[11]=gls01a.period_name_11$
    per_name$[12]=gls01a.period_name_12$

    seterr initializations

    factors[0]=ivs01c.abc_factors_01
    factors[1]=ivs01c.abc_factors_02
    factors[2]=ivs01c.abc_factors_03
    factors[3]=ivs01c.abc_factors_04
    factors[4]=ivs01c.abc_factors_05
    factors[5]=ivs01c.abc_factors_06
    factors[6]=ivs01c.abc_factors_07
    factors[7]=ivs01c.abc_factors_08
    factors[8]=ivs01c.abc_factors_09
    factors[9]=ivs01c.abc_factors_10
    factors[10]=ivs01c.abc_factors_11
    factors[11]=ivs01c.abc_factors_12
    factors[12]=ivs01c.abc_factors_13
    factors[13]=ivs01c.abc_factors_14
    factors[14]=ivs01c.abc_factors_15
    factors[15]=ivs01c.abc_factors_16
    factors[16]=ivs01c.abc_factors_17
    factors[17]=ivs01c.abc_factors_18
    factors[18]=ivs01c.abc_factors_19
    factors[19]=ivs01c.abc_factors_20
    factors[20]=ivs01c.abc_factors_21
    factors[21]=ivs01c.abc_factors_22
    factors[22]=ivs01c.abc_factors_23
    factors[23]=ivs01c.abc_factors_24
    factors[24]=ivs01c.abc_factors_25
    factors[25]=ivs01c.abc_factors_26

initializations:

    seterr std_error

rem --- Initializations

    precision p[1]
    dim ivchannels[15],iparams[3],params$[3],options$[7]
    dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],x0$(32),y0$(5),y1$(20)
    params$[0]=firm_id$
    iparams[0]=p[0]
    iparams[1]=p[3]
    iparams[2]=p[4]
    iparams[3]=p[5]

    if cvs(begwhse$,2)="" begwhse$=""
    if cvs(endwhse$,2)="" endwhse$=""
    if cvs(begprod$,2)="" begprod$=""
    if cvs(endprod$,2)="" endprod$=""
    if cvs(begitem$,2)="" begitem$=""
    if cvs(enditem$,2)="" enditem$=""
    
rem --- Set the iv call channels
    ivchannels[1]=ivm01_dev
    ivchannels[2]=ivm02_dev
    ivchannels[3]=ivm03_dev
    ivchannels[10]=ivm10a_dev
    ivchannels[12]=ivm12_dev
    ivchannels[14]=ivm14_dev
    ivchannels[15]=ivm15_dev

rem --- Resize masks

rem    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15

rem --- Retrieve key template

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPRWH","PRIMARY",ivm03_key_tpl$,table_chans$[all],status$

rem --- Run overlay
    run pgmdir$+"ivr_stkmovemt_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
