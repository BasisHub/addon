rem --- Inventory Vendor Listing (Report Initialization)
rem --- Program ivr_vendlist.aon v8.0.0 16Jul2007 (ivr_ia)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:43:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyrights 1981-2011, BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="ivm-02",ids$[4]="IVM_ITEMWHSE"
    files$[5]="ivm-05",ids$[5]="IVM_ITEMVEND"
    files$[6]="ivc_whsecode",ids$[6]="IVC_WHSECODE"
    files$[7]="ivm-12",ids$[7]="IVM_ITEMACT"
    files$[8]="aps_params",ids$[8]="APS_PARAMS"
    files$[9]="gls_params",ids$[9]="GLS_PARAMS"
    files$[10]="ivs_abcparam",ids$[10]="IVS_ABCPARAM"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivs01a_dev=channels[1]
    apm01_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm05_dev=channels[5]
    ivm10c_dev=channels[6]
    ivm12_dev=channels[7]
    aps01a_dev=channels[8]
    gls01a_dev=channels[9]
    ivs01c_dev=channels[10]

rem --- Dimension string templates

    dim ivs01a$:templates$[1],apm01a$:templates$[2],ivm01a$:templates$[3],
:       ivm02a$:templates$[4],ivm05a$:templates$[5],ivm10c$:templates$[6],
:       ivm12a$:templates$[7],aps01a$:templates$[8],gls01a$:templates$[9],
:       ivs01c$:templates$[10]

rem --- Assign form input values to local variables

    beg_vend$=option!.getOptionData("vendor_id_1")
    end_vend$=option!.getOptionData("vendor_id_2")
    beg_prod$=option!.getOptionData("product_type_1")
    end_prod$=option!.getOptionData("product_type_2")
    beg_item$=option!.getOptionData("item_id_1")
    end_item$=option!.getOptionData("item_id_2")
    item_type$=option!.getOptionData("item_type")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    ivs01c_key$=firm_id$+"IV02"
    find record (ivs01c_dev,key=ivs01c_key$,err=std_missing_params) ivs01c$
    
rem --- Parameters

    dim p[6],g[1],abcf[25],info$[20]
    call pgmdir$+"adc_application.aon","AP",info$[all]
    if info$[20]<>"Y"
        call pgmdir$+"ivc_warnings.aon","A",status
        goto std_exit
    endif
	call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m9$,0,vendlen
    g[0]=num(gls01a.total_pers$);rem gls01a, 3rd element
    p[0]=ivs01a.item_id_len;rem ivs01a, 3rd element
    p[1]=num(ivs01a.precision$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)

rem --- Init Data

    precision p[1]

    seterr initializations
    for x=0 to 25 
        abcf[x]=nfield(ivs01c$,"abc_factors_"+str(x+1:"00"))
    next x

    
initializations:

    seterr std_error

    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    call pgmdir$+"adc_sizemask.aon",m2$,m2,8,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12

rem --- run overlay

    run pgmdir$+"ivr_vendlist_o1.aon"
    
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end

