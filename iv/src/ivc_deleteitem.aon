rem --- Delete Item and/or Warehouse
rem --- Program ivc_da v8.0.0 15Jun2007 (ivc_da)
rem --- Created by adx_codeport.bbx v1.1.5 (06/15/2007 04:48:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem  action$         : Action Code (in)
rem                    I=Delete Item and Warehouse(s)
rem                    W=Delete Warehouse Only
rem  whse$           : Warehouse ID, or "" if action$ = "I" (in)
rem  item$           : Item ID (in)
rem  rd_table_chan$[]: Barista table channel info, do not modify (in/out)
rem  status          : 0=No Error (out)

    seterr std_error
    setesc std_error
    enter action$, whse$, item$, rd_table_chans$[all], status
    
rem --- Get Translator Object

    use ::bbtranslator.bbj::BBTranslator
    declare BBTranslator Translate!
    Translate! = BBTranslator.getInstance( stbl("+PROPS_NAME"), stbl("+USER_LOCALE"), null(), stbl("+PROPS_PATH") )

rem --- Retrieve the program path

	pgmdir$=""
	pgmdir$=stbl("+DIR_PGM",err=*next)
	sypdir$=""
	sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Parameters

	call pgmdir$+"adc_application.aon","AP",info$[all]
	ap$=info$[20]
	call pgmdir$+"adc_application.aon","BM",info$[all]
	bm$=info$[20]
	call pgmdir$+"adc_application.aon","OP",info$[all]
	op$=info$[20]
	call pgmdir$+"adc_application.aon","PO",info$[all]
	po$=info$[20]
	call pgmdir$+"adc_application.aon","SF",info$[all]
	wo$=info$[20]

rem --- Open files

	num_files = 15
	open_beg  = 1
	open_end  = num_files
	
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]="IVS_PARAMS",   open_opts$[1]="OTA"
    if bm$="Y"
        open_tables$[2]="BMM_BILLMAST", open_opts$[2]="OTA"
        open_tables$[3]="BMM_BILLMAT",  open_opts$[3]="OTA"
    endif
    open_tables$[4]="IVM_ITEMMAST", open_opts$[4]="OTA"
    open_tables$[5]="IVM_ITEMWHSE", open_opts$[5]="OTA"
	open_tables$[6]="GLS_PARAMS",   open_opts$[6]="OTA"
    open_tables$[7]="IVM_ITEMVEND", open_opts$[7]="OTA"
    open_tables$[8]="IVM_ITEMCMTS", open_opts$[8]="OTA"
    open_tables$[9]="IVM_ITEMACT",  open_opts$[9]="OTA"
    open_tables$[10]="IVM_ITEMSYN", open_opts$[10]="OTA"
	rem open_tables$[11]="", open_opts$[11]="OTA"
    open_tables$[12]="OPE_ORDDET",  open_opts$[12]="OTA"
    open_tables$[13]="POE_REQDET",  open_opts$[13]="OTA"
    if wo$="Y"
        open_tables$[14]="SFE_WOMASTR", open_opts$[14]="OTA"
        open_tables$[15]="SFE_WOMATL",  open_opts$[15]="OTA"
    endif
	
	gosub open_tables
	
    ivs01_dev = num(open_chans$[1])
    bmm01_dev = num(open_chans$[2])
    bmm02_dev = num(open_chans$[3])
    ivm01_dev = num(open_chans$[4])
    ivm02_dev = num(open_chans$[5])
	gls01_dev = num(open_chans$[6])
    ivm05_dev = num(open_chans$[7])
    ivm09_dev = num(open_chans$[8])
    ivm12_dev = num(open_chans$[9])
    ivm14_dev = num(open_chans$[10])
    ope11_dev = num(open_chans$[12])
    poe11_dev = num(open_chans$[13])
    sfe01_dev = num(open_chans$[14])
    sfe22_dev = num(open_chans$[15])

rem --- Dimension string templates

	dim ivs01a$:open_tpls$[1]
    dim ivm02a$:open_tpls$[5]
	dim gls01a$:open_tpls$[6]
	dim ivm05a$:open_tpls$[7]
    dim ivm09a$:open_tpls$[8]
	dim ivm12a$:open_tpls$[9]
	dim ivm14a$:open_tpls$[10]

rem --- Retrieve parameter records

    find record (ivs01_dev,key=firm_id$+"IV00",err=std_missing_params) ivs01a$
	find record (gls01_dev,key=firm_id$+"GL00",err=std_missing_params) gls01a$	

rem --- Initializations
	
	no_of_periods  = num(gls01a.total_pers$)
	current_period = num(gls01a.current_per$)
	current_year   = num(gls01a.current_year$)

    m1$=str(current_period:"00")
    y1$=str(current_year:"0000")
    m2=current_period+1
    y2=current_year
    if m2>no_of_periods then m2=1,y2=y2+1
    m2$=str(m2:"00")
    y2$=str(y2:"0000")

rem --- Position warehouse xref

    status=0
    find record (ivm01_dev,key=firm_id$+item$,dom=done) 
    read (ivm02_dev,key=firm_id$+item$+whse$,knum="AO_ITEM_WH",dir=0,dom=*next)

rem --- Quantity on hand, on order or committed?

    while 1
        dim ivm02a$:fattr(ivm02a$)
        read record (ivm02_dev,end=*break) ivm02a$
        if ivm02a.firm_id$<>firm_id$ then break
        if ivm02a.item_id$<>item$ then break
		if whse$<>"" and ivm02a.warehouse_id$<>whse$ then break
		
        if ivm02a.select_phys$="Y" then status=1
        if ivm02a.qty_on_hand<>0 or ivm02a.qty_on_order<>0 or ivm02a.qty_commit<>0 then status=2
        if status<>0 then break

rem --- Open Orders?

        if op$<>"Y" then goto check_reqs
		
        read (ope11_dev,key=firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,knum="AO_WH_ITEM_ORD",dom=*next)
        ope11_key$=key(ope11_dev,end=check_reqs)
		
        if pos(firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=ope11_key$)=1 then 
			status=3
			break
		endif

check_reqs: rem --- Requisitions?

        if po$<>"Y" then goto check_wo
		
        read (poe11_dev,key=firm_id$+"S"+ivm02a.item_id$,knum="AO_ITEM_REQ_LINE",dom=*next)
        poe11_key$=key(poe11_dev,end=check_wo)
		
        if pos(firm_id$+"S"+ivm02a.item_id$=poe11_key$)=1 then 
			status=4
			break
		endif

check_wo: rem --- Work Orders?

        if wo$<>"Y" goto check_activity
		
        read (sfe01_dev,key=firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,knum="AO_WH_ITM_LOC_WO",dom=*next)
        sfe01_key$=key(sfe01_dev,end=check_activity)
		
        if pos(firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=sfe01_key$)=1 then 
            status=5
            break
        endif
		
        read(sfe22_dev,key=firm_id$+"  "+ivm02a.warehouse_id$+ivm02a.item_id$,knum="AO_LOC_WH_ITM_WO",dom=*next)
        sfe22_key$=key(sfe22_dev,end=check_activity)
		
        if pos(firm_id$+"  "+ivm02a.warehouse_id$+ivm02a.item_id$=sfe22_key$)=1 then 
            status=6
            break
        endif

check_activity: rem --- Current or next period activity?

        y$=y1$
        m$=m1$
        x=9
        gosub activity
        if status<>0 then break
		
        y$=y2$
        m$=m2$
        x=10
        gosub activity
        if status<>0 then break

rem --- Loop back for next warehouse

    wend
	
    if status<>0 then goto set_err_msg

rem --- Check Bill of Materials

    if action$="W" goto set_err_msg
    if bm$<>"Y" goto set_err_msg
    k$=firm_id$+item$
    find (bmm01_dev,key=k$,dom=check_mats)
    status=7
    goto set_err_msg

check_mats:

    read(bmm02_dev,key=firm_id$+item$,knum="AO_ITEM_BILL",dom=*next)
    bmm02_key$=key(bmm02_dev,end=set_err_msg)
    if pos(firm_id$+item$=bmm02_key$)=1 then status=8

set_err_msg: rem --- Set message when STATUS<>0

    if status=0 goto delete_item
    msg_id$="IV_NO_DELETE"
    dim msg_tokens$[1]
    if status=1 msg_tokens$[1]=Translate!.getTranslation("AON_THIS_ITEM_HAS_BEEN_SELECTED_FOR_PHYSICAL_INVENTORY.")
    if status=2 msg_tokens$[1]=Translate!.getTranslation("AON_WAREHOUSE_QUANTITIES_EXIST_FOR_THIS_INVENTORY_ITEM.")
    if status=3 msg_tokens$[1]=Translate!.getTranslation("AON_SALES_ORDERS_FOR_THIS_INVENTORY_ITEM_CURRENTLY_EXIST.")
    if status=4 msg_tokens$[1]=Translate!.getTranslation("AON_PURCHASE_REQUISITIONS_EXIST_FOR_THIS_INVENTORY_ITEM.")
    if status=5 msg_tokens$[1]=Translate!.getTranslation("AON_WORK_ORDERS_FOR_THIS_INVENTORY_ITEM_CURRENTLY_EXIST.")
    if status=6 msg_tokens$[1]=Translate!.getTranslation("AON_THIS_ITEM_IS_REQUIRED_FOR_AN_EXISTING_WORK_ORDER.")
    if status=7 msg_tokens$[1]=Translate!.getTranslation("AON_THIS_ITEM_IS_ALSO_A_BILL_OF_MATERIALS_MASTER_BILL.")
    if status=8 msg_tokens$[1]=Translate!.getTranslation("AON_THIS_ITEM_IS_ALSO_A_BILL_OF_MATERIALS_COMPONENT.")
    if status=9 msg_tokens$[1]=Translate!.getTranslation("AON_WAREHOUSE_ACTIVITY_EXISTS_FOR_THE_CURRENT_PERIOD.")
    if status=10 msg_tokens$[1]=Translate!.getTranslation("AON_WAREHOUSE_ACTIVITY_EXISTS_FOR_THE_NEXT_PERIOD.")
    gosub disp_message
    goto done

delete_item: rem --- Position warehouse xref

	read (ivm02_dev,key=firm_id$+item$+whse$,knum="AO_ITEM_WH",dom=*next)

    while 1
        read record (ivm02_dev,end=*break) ivm02a$
        if ivm02a.firm_id$<>firm_id$ then break
        if ivm02a.item_id$<>item$ then break
		if whse$<>"" and ivm02a.warehouse_id$<>whse$ then break
        remove (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next)

rem --- Remove ivm-12 Activity

        read (ivm12_dev,key=firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next)
		
        while 1
            k$=key(ivm12_dev,end=*break)
            if pos(firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=k$)<>1 then break
            remove (ivm12_dev,key=k$,dom=*next)
        wend

rem --- Loop back for next warehouse

    wend

rem --- Position vendor xref

    if action$="W" then goto done
	
	if ap$="Y" then
		read (ivm05_dev,key=firm_id$+item$,knum="AO_ITEM_VEND",dom=*next)

rem --- Read next ivm-05 vendor record

		while 1
			read record (ivm05_dev,end=*break) ivm05a$
			if ivm05a.firm_id$<>firm_id$ then break
			if ivm05a.item_id$<>item$ then break
			remove (ivm05_dev,key=firm_id$+ivm05a.vendor_id$+item$,dom=*next)
		wend
	
	endif

rem --- Position synonyms file

    read (ivm14_dev,key=firm_id$+item$,knum="AO_ITEM_SYN",dom=*next)

rem --- Read next synonym

    while 1
        read record (ivm14_dev,end=*break) ivm14a$
		if ivm14a.firm_id$<>firm_id$ then break
		if ivm14a.item_id$<>item$ then break
        remove (ivm14_dev,key=firm_id$+ivm14a.item_synonym$+item$,dom=*next)
    wend

rem --- Remove ivm-09 comments

    read (ivm09_dev,key=firm_id$+item$,dom=*next)

rem --- Read next comment

    while 1
        read record (ivm09_dev,end=*break) ivm09a$
        if ivm09a.firm_id$<>firm_id$ then break
        if ivm09a.item_id$<>item$ then break
        remove (ivm09_dev,key=firm_id$+item$+ivm09a.sequence_num$,dom=*next)
    wend

rem --- Remove ivm-01 item master

    remove (ivm01_dev,key=firm_id$+item$,dom=*next)

done: rem --- All done

    goto std_exit

activity: rem --- Current or Next Period Activity?

	start_block=1
	
	if start_block then
		ivm12_key$=firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$+y$+m$
		find record (ivm12_dev,key=ivm12_key$,dom=*endif) ivm12a$
		
		if ivm12a.beg_balance<>0 or
:			ivm12a.qty_received<>0 or
:			ivm12a.qty_built<>0 or
:			ivm12a.qty_sold<>0 or
:			ivm12a.qty_issued<>0 or
:			ivm12a.qty_adjust<>0 or
:			ivm12a.qty_xfer_in<>0 or
:			ivm12a.qty_xfer_out<>0 or
:			ivm12a.qty_returned<>0
:		then
			status=x
		endif
	endif
	
    return
	
open_tables: rem --- Open tables
	
	call sypdir$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		status=912
		goto std_exit
	endif

	return

disp_message: rem --- Display a message
	
	call sypdir$+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

	return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
