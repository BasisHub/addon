rem --- Delete Item and/or Warehouse
rem --- Program ivc_da v8.0.0 15Jun2007 (ivc_da)
rem --- Created by adx_codeport.bbx v1.1.5 (06/15/2007 04:48:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem --- action$       : Action Code (input)
rem ---                 I=Delete Item and Warehouse(s)
rem ---                 W=Delete Warehouse Only
rem --- params$[n]    : Parameter information (input)
rem ---               : [0]=Firm ID             [4]=PO Installed (Y/N)
rem ---               : [1]=Warehouse ID        [5]=WO Installed (Y/N)
rem ---               : [2]=Item Number         [6]=BM Installed (Y/N)
rem ---               : [3]=OP Installed (Y/N)  [7]=AP Installed (Y/N)
rem --- params[n]     : Parameter information (input)
rem ---               : [0]=# of Periods [1]=Current Period [2]=Current Year
rem --- status        : 0=No Error (returned)

rem --- This program may need to pass rd_table_chans$[]

    seterr std_error
    setesc std_error
    enter action$,params$[all],params[all],status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
    files$[2]="bmm-01",ids$[2]="BMM_BILLMAST"
    files$[3]="bmm-02",ids$[3]="BMM_BILLMAT"
    files$[4]="ivm-01",ids$[4]="IVM_ITEMMAST"
    files$[5]="ivm-02",ids$[5]="IVM_ITEMWHSE"
    files$[7]="ivm-05",ids$[7]="IVM_ITEMVEND"
    files$[8]="ivm-09",ids$[8]="IVM_ITEMCMTS"
    files$[9]="ivm-12",ids$[9]="IVM_ITEMACT"
    files$[10]="ivm-14",ids$[10]="IVM_ITEMSYN"
    files$[11]="ivm-24",ids$[11]="IVX_ITEMSYN"
    files$[12]="ope-11",ids$[12]="OPE_ORDDET"
    files$[13]="poe-11",ids$[13]="POE_REQDET"
    files$[14]="sfe-01",ids$[14]="SFE_WOMASTR"
    files$[15]="sfe-22",ids$[15]="SFE_WOMATL"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivs01_dev=channels[1]
    bmm01_dev=channels[2]
    bmm02_dev=channels[3]
    ivm01_dev=channels[4]
    ivm02_dev=channels[5]
    ivm05_dev=channels[7]
    ivm09_dev=channels[8]
    ivm12_dev=channels[9]
    ivm14_dev=channels[10]
    ivm24_dev=channels[11]
    ope11_dev=channels[12]
    poe11_dev=channels[13]
    sfe01_dev=channels[14]
    sfe22_dev=channels[15]

rem --- Dimension string templates

    dim bmm01a$:templates$[2],bmm02a$:templates$[3],ivm01a$:templates$[4]
    dim ivm02a$:templates$[5],ivm05a$:templates$[7]
    dim ivm09a$:templates$[8],ivm12a$:templates$[9],ivm14a$:templates$[10]
    dim ivm24a$:templates$[11],ope11a$:templates$[12],poe11a$:templates$[13]
    dim sfe01a$:templates$[14],sfe22a$:templates$[15],ivs01a$:templates$[1]

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    firm_id$=params$[0]
    whse$=params$[1]
    item$=params$[2]
    op$=params$[3]
    po$=params$[4]
    wo$=params$[5]
    bm$=params$[6]
    ap$=params$[7]

rem --- Initializations

    m1$=str(params[1]:"00")
    y1$=str(params[2]:"0000")
    m2=params[1]+1
    y2=params[2]
    if m2>params[0] m2=1,y2=y2+1
    m2$=str(m2:"00")
    y2$=str(y2:"0000")
    status=0

rem --- Position warehouse xref

    status=0
    first$=firm_id$+item$+whse$
    k$=first$
    find record (ivm01_dev,key=firm_id$+item$,dom=done) ivm01a$
    dim ivm02a$:fattr(ivm02a$)
    read record (ivm02_dev,key=firm_id$+item$,knum=2,dom=*next)

rem --- Quantity on hand, on order or committed?
    while 1
        dim ivm02a$:fattr(ivm02a$)
        read record (ivm02_dev,end=*break) ivm02a$
        if ivm02a.firm_id$<>firm_id$ break
        if ivm02a.item_id$<>item$ break
        if ivm02a.select_phys$="Y" status=1
        if ivm02a.qty_on_hand<>0 or ivm02a.qty_on_order<>0 or ivm02a.qty_commit<>0 status=2
        if status<>0 break

rem --- Open Orders?

        if op$<>"Y" goto check_reqs
        read(ope11_dev,key=firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,knum=1,dom=*next)
        ope11_key$=key(ope11_dev,end=check_reqs)
        if pos(firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=ope11_key$)=1 status=3
        if status<>0 break

check_reqs: rem --- Requisitions?

        if po$<>"Y" goto check_wo
        read(poe11_dev,key=firm_id$+"S"+ivm02a.item_id$,knum=1,dom=*next)
        poe11_key$=key(poe11_dev,end=check_wo)
        if pos(firm_id$+"S"+ivm02a.item_id$=poe11_key$)=1 status=4
        if status<>0 break

check_wo: rem --- Work Orders?

        if wo$<>"Y" goto check_activity
        read(sfe01_dev,key=firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,knum=3,dom=*next)
        sfe01_key$=key(sfe_01,end=check_activity)
        if pos(firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=sfe01_key$)=1
            status=5
            break
        endif
        read(sfe22_dev,key=firm_id$+"  "+ivm02a.warehouse_id$+ivm02a.item_id$,knum=1,dom=*next)
        sfe22_key$=key(sfe22_dev,end=check_activity)
        if pos(firm_id$+"  "+ivm02a.warehouse_id$+ivm02a.item_id$=sfe22_key$)=1
            status=6
            break
        endif

check_activity: rem --- Current or next period activity?

        y$=y1$
        m$=m1$
        x=9
        gosub activity
        if status<>0 break
        y$=y2$
        m$=m2$
        x=10
        gosub activity
        if status<>0 break

rem --- Loop back for next warehouse

    wend
    if status<>0 goto set_err_msg

rem --- Check Bill of Materials

    if action$="W" goto set_err_msg
    if bm$<>"Y" goto set_err_msg
    k$=firm_id$+item$
    find (bmm01_dev,key=k$,dom=check_mats)
    status=7
    goto set_err_msg

check_mats:

    read(bmm02_dev,key=firm_id$+ivm02a.item_id$,knum=1,dom=*next)
    bmm02_key$=key(bmm02_dev,end=set_err_msg)
    if pos(firm_id$+ivm02a.item_id$=bmm02_key$)<>1 status=8

set_err_msg: rem --- Set message when STATUS<>0

    if status=0 goto delete_item
    msg_id$="IV_NO_DELETE"
    dim msg_tokens$[1]
    if status=1 msg_tokens$[1]="This Item has been selected for Physical Inventory."
    if status=2 msg_tokens$[1]="Warehouse quantities exist for this Inventory Item."
    if status=3 msg_tokens$[1]="Sales Orders for this Inventory Item currently exist."
    if status=4 msg_tokens$[1]="Purchase Requisitions exist for this Inventory Item."
    if status=5 msg_tokens$[1]="Work Orders for this Inventory Item currently exist."
    if status=6 msg_tokens$[1]="This Item is required for an existing Work Order."
    if status=7 msg_tokens$[1]="This Item is also a Bill of Materials Master Bill."
    if status=8 msg_tokens$[1]="This Item is also a Bill of Materials Component."
    if status=9 msg_tokens$[1]="Warehouse activity exists for the current period."
    if status=10 msg_tokens$[1]="Warehouse activity exists for the next period."
    gosub disp_message
    goto done

delete_item: rem --- Position warehouse xref

    while 1
        dim ivm02a$:fattr(ivm02a$)
        read record (ivm02_dev,key=firm_id$+item$,knum=2,dom=*next)
        readrecord(ivm02_dev,end=*break) ivm02a$
        if ivm02a.firm_id$<>firm_id$ break
        if ivm02a.item_id$<>item$ break
        remove (ivm02_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$)

rem --- Remove ivm-12 Activity
        read (ivm12_dev,key=firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next)
        while 1
            k$=key(ivm12_dev,end=*break)
            if pos(firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=k$)<>1 break
            remove (ivm12_dev,key=k$,dom=*next)
        wend

rem --- Loop back for next warehouse

    wend

rem --- Position vendor xref

    if action$="W" goto done
    read(ivm05_dev,key=firm_id$+item$,knum=1,dom=*next)

rem --- Read next ivm-05 vendor record

    while 1
        k$=key(ivm05_dev,end=*break)
        if pos(firm_id$+item$=k$)<>1 break
        dim ivm05a$:fattr(ivm05a$)
        read record (ivm05_dev,key=k$) ivm05a$
        remove (ivm05_dev,key=firm_id$+ivm05a.vendor_id$+ivm05a.item_id$)
    wend

rem --- Position synonyms file

    read (ivm14_dev,key=firm_id$+item$,knum=1,dom=*next)

rem --- Read next synonym
    while 1
        k$=key(ivm14_dev,end=*break)
        if pos(firm_id$+item$=k$)<>1 break
        dim ivm14a$:fattr(ivm14a$)
        read record (ivm14_dev,key=k$) ivm14a$
        remove (ivm14_dev,key=firm_id$+ivm14a.item_synonym$+ivm14a.item_id$)
    wend

rem --- Remove ivm-09 comments

    read (ivm09_dev,key=firm_id$+item$,dom=*next)

rem --- Read next comment
    while 1
        dim ivm09a$:fattr(ivm09a$)
        readrecord(ivm09_dev,end=*break) ivm09a$
        if ivm09a.firm_id$<>firm_id$ break
        if ivm09a.item_id$<>item$ break
        remove (ivm09_dev,key=firm_id$+item$+ivm09a.sequence_num$)
    wend

rem --- Remove ivm-01 item master

    remove (ivm01_dev,key=firm_id$+item$,dom=*next)

done: rem --- All done

    goto std_exit

activity: rem --- Current or Next Period Activity?

    dim ivm12a$:fattr(ivm12a$)
    ivm12_key$=firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$+y$+m$
    find record (ivm12_dev,key=ivm12_key$,dom=*next) ivm12a$
    if ivm12a.beg_balance<>0 or
:      ivm12a.qty_received<>0 or
:      ivm12a.qty_built<>0 or
:      ivm12a.qty_sold<>0 or
:      ivm12a.qty_issued<>0 or
:      ivm12a.qty_adjust<>0 or
:      ivm12a.qty_xfer_in<>0 or
:      ivm12a.qty_xfer_out<>0 or
:      ivm12a.qty_returned<>0
        status=x
    endif
    return

rem #include std_error.src

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
	return

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
