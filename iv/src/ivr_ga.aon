rem --- Inventory Transfer Register
rem --- Program ivr_ga v8.0.0 09Jul2007 (ivr_ga)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:40:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="ARC_TERMCODE",ids$[2]=files$[2]
    files$[3]="glm-01",ids$[3]="GLM_ACCT"
    files$[4]="glt-14",ids$[4]="GLX_DAILYXRF"
    files$[5]="glw-11",ids$[5]="GLW_TRANSDET"
    files$[6]="ive-02",ids$[6]="IVE_TRANSFER"
    files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
    files$[8]="ivm-02",ids$[8]="IVM_ITEMWHSE"
    files$[9]="ivm-04",ids$[9]="IVM_ITEMTIER"
    files$[10]="IVC_PRODCODE",ids$[10]=files$[10]
    files$[11]="ivw-04",ids$[11]="IVW_LFDET"
    files$[12]="ARS_PARAMS",ids$[12]=files$[12]
    files$[13]="GLS_PARAMS",ids$[13]=files$[13]
    files$[14]="IVS_PARAMS",ids$[14]=files$[14]
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm10a_dev=channels[2]
    glm01_dev=channels[3]
    glt14_dev=channels[4]
    glw11_dev=channels[5]
    ive02_dev=channels[6]
    ivm01_dev=channels[7]
    ivm02_dev=channels[8]
    ivm04_dev=channels[9]
    ivm10a_dev=channels[10]
    ivw04_dev=channels[11]
    ars01a_dev=channels[12]
    gls01a_dev=channels[13]
    ivs01a_dev=channels[14]

rem --- Dimension string templates

    dim arm10a$:templates$[2],glm01a$:templates$[3],glt14a$:templates$[4],
:       glw11a$:templates$[5],ive02a$:templates$[6],ivm01a$:templates$[7],
:       ivm02a$:templates$[8],ivm04a$:templates$[9],ivm10a$:templates$[10],
:       ivw04a$:templates$[11],ars01a$:templates$[12],gls01a$:templates$[13],
:       ivs01a$:templates$[14]




rem --- Assign form input values to local variables

    table$=fnget_table$("")
   rem  value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
   
rem --- Parameters

    dim p[5],g[4],info$[20]
    n1$=sysinfo.firm_name$
    n2$="IV"
    n3$=sysinfo.task_desc$
    source$=pgm(-2)
    when$=sysinfo.system_date$
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g[0]=num(gls01a.total_pers$)
    g[1]=num(gls01a.current_per$)
    g[2]=fnyy_year(gls01a.current_year$)
    g[3]=num(gls01a.acct_length$)
    g[4]=num(gls01.max_acct_length$)
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.lot_no_len$)
    p[2]=num(ivs01a.precision$)
    p[3]=num(ivs01a.desc_len$)
    p[4]=num(ivs01a.desc_len$)
    p[5]=num(ivs01a.desc_len$)
    lf$="N"
    ls$="N"
    ar$="N"
    a9$="N"
    if pos(ivs01a.lifofifo$="LF")>0 lf$="Y"
    if pos(ivs01a.lotser_flag$="LS")>0 ls$="Y"
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    if ar$="Y" then
        find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
        a9$=ars01a.dist_by_item$
        places=p[2]
        more=1
    endif

rem --- Initializations

    precision num(ivs01a.precision$)
    rem dim a[2],b[12],
    dim j$(80,"-"),item$[10],headings$[1],o[4],lf[10]
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    m0=p[0]
    p8$="Lot/Serial Number"
    width=132
    page=0
    l9=55
    l=l9+1
    w=34
    units=0
    t0$=""
    t1$=""
    headings=1
    headings$[0]=n1$
    headings$[1]=n3$
    h3$=""
    t9$=""
    o[4]=width-9
    o[3]=o[4]-m1-1
    o[2]=o[3]-m2
    o[1]=o[2]-m3
    o[0]=o[1]-3
    errors=0
    glstatus=0

rem --- Additional File Opens

    gl$="N"
    status=0
    if a9$="Y" call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status<>0 goto std_exit
    if lf$="Y" files$[6]="ivm-04",files$[7]="ivw-04",options$[7]="CL"
    if gl$="Y" files$[8]="glm-01",files$[9]=glw11$,options$[9]="CL"
    if gl$="Y" if a9$="Y" files$[10]="arm-10"
    call pgmdir$+"adc_fileopen.aon",1,6,10,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm04_dev=channels[6]
    ivw04_dev=channels[7]
    glm01_dev=channels[8]
    glw11_dev=channels[9]
    arm10_dev=channels[10]
    lf[0]=ivm04_dev
    lf[1]=ivw04_dev
    lf[2]=ivm02_dev

rem --- Run Report?

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit

rem --- File Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",p[0]+3,0,1,meter_num,status

rem --- Initial Read

    read (ive02_dev,key=firm_id$,dom=*next)
rem --- Heading Read
    while more
        read record (ive02_dev,end=*break) ive02a$
        cost=ive02a.unit_cost

rem --- Breaks

        if pos(firm_id$=ive02a_key$)<>1 break
        if ive02a.warehouse_id$<>t0$ gosub Whse_Id
        if ive02a.trans_date$<>t1$ gosub Trans_Date
        call pgmdir$+"adc_progress.aon","S","","","",ive02a.warehouse_id$+" "+ive02a.item_id$,0,0,1,meter_num,status
        gosub Item

rem --- LIFO/FIFO?

        if lf$="Y" then
            item$[0]=firm_id$
            item$[1]=ive02a.warehouse_id$
            item$[2]=ive02a.item_id$
            lf_date$=ive02a.trans_date$
            action$=ivs01a.lifofifo$+"I"
            quantity=ive02a.trans_qty
            cost=ive02a.unit_cost
            ret_cost=0
            type$="R"
            call pgmdir$+"ivc_lf.bbx",action$,type$,lf_date$,lf[all],item$[all],places,quantity,cost,ret_cost,status

rem --- Cost change?

            if ive02a.ext_cost<>ive02a.trans_qty*ret_cost then
                if ret_cost<>0 ive02a.ext_cost=ive02a.trans_qty*ret_cost,ive02a.unit_cost=ret_cost,cost=ret_cost
                write record (ive02_dev,key=ive02a.firm_id$+ive02a.warehouse_id$+ive02a.trans_date$+ive02a.item_id$+ive02a.lotser_no$) ive02a$
            endif

        endif
rem --- Print

        if l+2>l9 gosub report_heading
        precision 2
        tot_cost=ive02a.ext_cost*1
        precision num(ivs01a.precision$)
        print (printer_dev)@(3),ive02a.warehouse_id$," ",ivm10c.short_name$,@(27),ive02a.item_id$," ",ive02a.lotser_no$,@(o[0]),b2$(4,2),@(o[1]),cost:m2$,@(o[2]),ive02a.trans_qty:m2$,@(o[3]),tot_cost:m1$,@(o[4]),ive02a.inv_xfer_nbr$
        print (printer_dev)@(27),ivm01a.item_desc$
        l=l+2
        t0=t0+tot_cost
        u0=u0+tot_cost
        if gl$="Y" call pgmdir$+"glc_datecheck.aon",ive02a.trans_date$,"N",period$,year$,glstatus
        if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,ive02a.trans_date$,glstatus,l,errors,status

rem --- Generate G/L Recap

        if gl$<>"Y" continue
        if a9$<>"Y" continue

rem --- From Warehouse

        precision 2
        rem dim z9$(8*g[4],"0")
        gldate$=ive02a.trans_date$
        ref1$="Xfr "+ive02a.inv_xfer_nbr$
        memo$=ive02a.item_id$+" "+ivm01a.item_desc$
        ref2$="Fr Whse "+ive02a.warehouse_id$
        ref3$="To Whse "+ive02a.warehouse_id$
        find record (ivm02a_dev,key=firm_id$+ive02a.warehouse_id$+ive02a.item_id$,dom=Whse) ivm02a$
        find record (arm10d_dev,key=firm_id$+"D"+ivm02a.dist_code$,dom=Whse) arm10d$
        account$=arm10d$(6*g[4]+1,g[4])
        amount=(ive02a.ext_cost-ive02a.trans_qty)*cost
        units=0
        gosub glrecap

Whse: rem --- To Warehouse

        rem dim z9$(8*g[4],"0")
        x$=ref2$
        ref2$=ref3$
        ref3$=x$
        find record (ivm02a_dev,key=firm_id$+ive02a.warehouse_id$+ive02a.item_id$,dom=Whse_Prsn) ivm02a$
        find record (arm10d_dev,key=firm_id$+"D"+ivm02a.dist_code$,dom=Whse_Prsn) arm10d$
        account$=arm10d$(6*g[4]+1,g[4])
        amount=ive02a.trans_qty*cost
        units=0
        gosub glrecap
Whse_Prsn:
        precision num(ivs01a.precision$)

    wend

done: rem --- Totals

    if l>l9 gosub report_heading
    t9$="E"
    update$="ivu_da.bbx"
    gosub Whse_Id
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    if gl$="Y" and a9$="Y" run pgmdir$+"glr_recap.aon"
    run update$

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    if h3$<>"" print (printer_dev)@(fncenter(h3$,width)),h3$; let l=l+1
    if t1$<>"" print (printer_dev)"Transfer Date ",fndate$(t1$); let l=l+1
    print (printer_dev)""
    print (printer_dev)@(27),"Item",@(28+p[0]),p8$
    print (printer_dev)"   To Warehouse",@(27),"No  / Description",@(o[0]),"UM",@(o[1]+m3-5),"Cost",@(o[2]+m2-4),"Qty",@(o[3]+m1-6),"Total",@(o[4]),"Reference"
    print (printer_dev)""
    l=l+4
    return

rem --- Date Heading

    if l+2>l9 gosub report_heading
    print (printer_dev)@(0),"Transfer Date: ",fndate$(t1$),'LF'
    l=l+2
    return

Whse_Id: rem --- Warehouse

    if t0$<>""then
        if t9$="" t9$="A"
        gosub Trans_Date
        if t9$="A" t9$=""
        if l+2>l9 gosub report_heading
        print (printer_dev)@(o[3]),j$(1,m1)
        print (printer_dev)@(o[3]-24-len(whse$)),"Total For Warehouse ",t0$," ",whse$,@(o[3]),t0:m1$
        let l=l9+1,t0=0
    endif

    if t9$<>"" return
    rem dim x1$(30)
    let t0$=ive02a.warehouse_id$,t1$=ive02a.trans_date$,ivm10c.warehouse_id$=ive02a.warehouse_id$
    let ivm10c.short_name$="Unknown Warehouse",u0=0
    find record (ivm10c_dev,key=firm_id$+"C"+ivm10c.warehouse_id$,dom=*next) ivm10c$
    let h3$="From Warehouse "+cvs(ive02a.warehouse_id$+" "+ivm10c.short_name$,2)
    let whse$=cvs(ivm10c.short_name$,2)
    return

Trans_Date: rem --- Date

    if t1$<>"" then
        if l+2>l9 gosub report_heading
        print (printer_dev)@(o[3]),j$(1,m1)
        print (printer_dev)@(o[3]-19),"Total For ",fndate$(t1$),@(o[3]),u0:m1$
        let l=l+2
    endif
    if t9$<>"" return
    let u0=0,t1$=ive02a.trans_date$,l=l9+1
    return

Item: rem --- Item

    rem dim b1$(60),b2$(20),b6$(g[4]),x1$(30)
    let ivm01a.item_desc$="Unknown Item",ivm10c.short_name$="Unknown Warehouse"
    find record (ivm01a_dev,key=firm_id$+ive02a.item_id$,dom=*next) ivm01a$
    find record (ivm10c_dev,key=firm_id$+"C"+ive02a.warehouse_id$,dom=*next) ivm10c$
    let ivm10c.short_name$=ivm10c.short_name$,ivm01a.item_desc$=fnitem$(ivm01a.item_desc$)
    return

glrecap: rem --- Standard G/L Recap Routine

    if gl$="Y" then
        call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    rem run pgmdir$+"ads_process_end.aon",err=*next
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
