rem --- Price Change Register
rem --- Program ivr_la v8.0.0 09Jul2007 (ivr_la)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:42:57)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Use statements

    use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL")
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables
    
    declare Option option!
    new_price_code$ = option!.getOptionData("NEW_PRICE_CODE")

rem --- get batch# (zero if not batching.CAH)

    batch_no$=stbl("+BATCH_NO",err=*next)

rem --- Open all files

    num_files = 7
    open_beg  = 1
    open_end  = num_files
    
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    
    open_tables$[1]="IVS_PARAMS",   open_opts$[1]="OTA"
    open_tables$[2]="IVE_PRICECHG", open_opts$[2]="OTA"
    open_tables$[3]="IVM_ITEMMAST", open_opts$[3]="OTA"
    open_tables$[4]="IVM_ITEMWHSE", open_opts$[4]="OTA"
    open_tables$[5]="IVC_PRODCODE", open_opts$[5]="OTA"
    open_tables$[6]="IVC_WHSECODE", open_opts$[6]="OTA"
    open_tables$[7]="ADM_MODULES",  open_opts$[7]="OTA"
    
    if num(batch_no$)=0 then let open_opts$[2]=open_opts$[2]+"L"; rem lock only if not batching    
    
    gosub open_tables

    ivs_params_dev = num( open_chans$[1] )
    pricechg_dev   = num( open_chans$[2] )
    itemmast_dev   = num( open_chans$[3] )
    itemwhse_dev   = num( open_chans$[4] )
    prodcode_dev   = num( open_chans$[5] )
    whsecode_dev   = num( open_chans$[6] )
    modules_dev    = num( open_chans$[7] )

    dim ivs_params_rec$:open_tpls$[1]
    dim pricechg_rec$:open_tpls$[2]
    dim itemmast_rec$:open_tpls$[3]
    dim itemwhse_rec$:open_tpls$[4]
    dim prodcode_rec$:open_tpls$[5]
    dim whsecode_rec$:open_tpls$[6] 
    dim modules_rec$:open_tpls$[7]
    
rem --- Parameters

    find record (ivs_params_dev, key=firm_id$+"IV00", dom=std_missing_params) ivs_params_rec$
    
    dim p[5]
    p[0]=ivs_params_rec.item_id_len
    p[1]=num(ivs_params_rec.precision$)
    p[3]=num(ivs_params_rec.desc_len_01$)
    p[4]=num(ivs_params_rec.desc_len_02$)
    p[5]=num(ivs_params_rec.desc_len_03$)

rem --- Initializations

    precision p[1]
    
    width=132
    errors=0
    m9$="-###0.00%"
    m9=len(m9$)
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","P","",m4$,0,m4
    
rem --- Print positions
    
    dim o[5]
    o[5]=width-m4-1
    o[4]=o[5]-m4-9
    o[3]=o[4]-m4-9
    o[2]=o[3]-3
    o[1]=p[0]+1
    
    dw=p[3]+p[4]+p[5]
    v=o[2]-o[1]
    
    if dw>v then split=1,dw=o[2]-3 else split = 0
    
    dim description$(dw)
    
rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!

    OutVect!=BBjAPI().makeVector()
    HdrVect!=BBjAPI().makeVector()
    BrkVect!=BBjAPI().makeVector()
    TotVect!=BBjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)   
    
rem --- Column headings

    columns=7
    dim columns$[columns,10]
    columns$[0,0]=Translate!.getTranslation("AON_ITEM"),               columns$[0,1]="C", columns$[0,2]=str(p[0])
    columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),        columns$[1,1]="C", columns$[1,2]=str(dw)
    columns$[2,0]="UM",                 columns$[2,1]="C", columns$[2,2]="2"
    columns$[3,0]=Translate!.getTranslation("AON_PRIOR^LIST_PRICE"),   columns$[3,1]="N", columns$[3,2]=str(m4), columns$[3,3]=m4$
    columns$[4,0]=Translate!.getTranslation("AON_PRICE^CODE"),         columns$[4,1]="C", columns$[4,2]="5"
    columns$[5,0]=Translate!.getTranslation("AON_CURRENT^LIST_PRICE"), columns$[5,1]="N", columns$[5,2]=str(m4), columns$[5,3]=m4$
    columns$[6,0]=Translate!.getTranslation("AON_PRICE^CODE"),         columns$[6,1]="C", columns$[6,2]="5"
    columns$[7,0]=Translate!.getTranslation("AON_NEW^LIST_PRICE"),     columns$[7,1]="N", columns$[7,2]=str(m4), columns$[7,3]=m4$

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Report headings

    headings=3
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$ 
    if num(batch_no$)<>0 then headings$[1]=headings$[1]+ Translate!.getTranslation("AON__(BATCH:_")+batch_no$+")"    
    headings$[headings]="[HEADER]"

rem --- Sort by product type using SQL  

    call pgmdir$+"adc_progress.aon","N","","","","",0,pricechg_dev,1,meter_num,ignore_status

    unlock(pricechg_dev,err=*next); rem SQL won't execute with file locked

    sql_prep$ = ""
    sql_prep$ = sql_prep$ + "SELECT ive_pricechg.price_code, ive_pricechg.warehouse_id, ivm_itemmast.product_type, ive_pricechg.item_id "
    sql_prep$ = sql_prep$ + "  FROM ive_pricechg INNER JOIN ivm_itemmast ON ive_pricechg.firm_id = ivm_itemmast.firm_id AND "
    sql_prep$ = sql_prep$ + "       ive_pricechg.item_id = ivm_itemmast.item_id "
    sql_prep$ = sql_prep$ + " WHERE ive_pricechg.firm_id = '" + firm_id$ + "' AND ive_pricechg.batch_no = '" + batch_no$ + "' "

    if new_price_code$ <> "" then 
        sql_prep$ = sql_prep$ + "AND ive_pricechg.price_code = '" + new_price_code$ +"' "
    endif

    sql_prep$ = sql_prep$ + "ORDER BY ive_pricechg.price_code, ive_pricechg.warehouse_id, ivm_itemmast.product_type$, ive_pricechg.item_id "

    sql_chan=sqlunt
    sqlopen(sql_chan)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim sql_rec$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Report inits

    prev_price_code$=""
    prev_whse$=""
    prev_type$=""
    more=1
    recs=0

rem --- Next SQL record

    while more

        sql_rec$=sqlfetch(sql_chan,err=*break)

        call pgmdir$+"adc_progress.aon","S","","","","",0,pricechg_dev,1,meter_num,ignore_status

    pricechg_rec_key$ = firm_id$ + batch_no$ + sql_rec.price_code$ + sql_rec.warehouse_id$ + sql_rec.item_id$
        read record (pricechg_dev, key=pricechg_rec_key$, knum="BATCH_KEY", dom=*continue) pricechg_rec$

rem --- Level breaks?

        if pricechg_rec.price_code$<>prev_price_code$ then 
            gosub price_code_break
            gosub whse_break
            gosub product_break
    else
            if pricechg_rec.warehouse_id$<>prev_whse$ then 
                gosub whse_break
        gosub product_break
            else
                if sql_rec.product_type$<>prev_type$ then 
                    gosub product_break
                endif
            endif
        endif

rem --- Additional reads

        item$=pricechg_rec.item_id$
        whse$=pricechg_rec.warehouse_id$
    itemmast_rec.item_desc$=Translate!.getTranslation("AON_(ITEM_NOT_FOUND)")
        
        find record (itemmast_dev, key=firm_id$+item$,       dom=*next) itemmast_rec$
        find record (itemwhse_dev, key=firm_id$+whse$+item$, dom=*next) itemwhse_rec$
        
    description$(1)=itemmast_rec.item_desc$

rem --- Print detail line
      
        if split then descr_hold$="" else descr_hold$=description$
        
    OutVect!.addItem(pricechg_rec.item_id$)
    OutVect!.addItem(descr_hold$)
    OutVect!.addItem(itemmast_rec.unit_of_sale$)
    OutVect!.addItem( str(itemwhse_rec.pri_price) )
    OutVect!.addItem(itemwhse_rec.pri_price_cd$)
    OutVect!.addItem( str(itemwhse_rec.cur_price) )
    OutVect!.addItem(itemwhse_rec.cur_price_cd$)
    OutVect!.addItem( str(pricechg_rec.unit_price) )
        
        if split then 
            OutVect!.addItem("")
            OutVect!.addItem(description$)
            ignore = fnblank(6)
    endif
        
        recs=recs+1
        if pricechg_rec.unit_price<0 then errors=errors+1
        
        prev_price_code$ = pricechg_rec.price_code$
        prev_whse$ = pricechg_rec.warehouse_id$
        prev_type$ = sql_rec.product_type$
        
rem --- Loop back for next record

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
        
rem --- Any negative prices?

    if errors then
        msg_id$ = "IV_REG_NEG_PRICES"
        call sypdir$+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
        next_overlay$=""
        goto std_exit_no_update
    endif

rem --- Run update overlay

rem --- Values for Price/Cost Update program
    channel = pricechg_dev
    o0 = 0; rem signals a price update
    first$ = firm_id$ + batch_no$ + new_price_code$
    overlay$ = pgmdir$+"ivu_pricecostchgupdt.aon"
    
rem --- Print register via DocOut
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit
    
price_code_break: rem --- Price Code Break

    BrkVect!.addItem( str(OutVect!.size()/(columns+1)) )
    HdrVect!.addItem( Translate!.getTranslation("AON_FOR_NEW_LIST_PRICE_CODE_") + sql_rec.price_code$ )
    
    return

whse_break: rem --- Warehouse Break

    whsecode_rec.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (whsecode_dev, key=firm_id$+"C"+pricechg_rec.warehouse_id$, dom=*next) whsecode_rec$
    
    ignore = fnblank_line(void)
    OutVect!.addItem( Translate!.getTranslation("AON_WAREHOUSE_")+pricechg_rec.warehouse_id$+" "+cvs(whsecode_rec.short_name$,2) )
    ignore = fnblank(7)
    
    return

product_break: rem --- Product Break

    prodcode_rec.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (prodcode_dev,key=firm_id$+"A"+sql_rec.product_type$,dom=*next) prodcode_rec$

    ignore = fnblank_line(void)
    OutVect!.addItem( Translate!.getTranslation("AON_PRODUCT_") + sql_rec.product_type$ + " " + prodcode_rec.code_desc$ )
    ignore = fnblank(7)
    
    return

open_tables: rem --- Call open table routine    

    call sypdir$+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        call sypdir$+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
        status=912
        goto std_exit_no_report
    endif

    return
    
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return void
    fnend

rem --- Create a blank line.  'void' is simply a variable; it's there to remind you that this function takes no input

    def fnblank_line(void)=fnblank(columns+1)

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return
    
rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit_no_report:

    OutVect!=null();rem nothing to print, or some other err such that no report
    
std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
