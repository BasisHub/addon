rem --- EOQ, Order Point & Safety Stock Report (Report Overlay)
rem --- Program ivr_itemeoqrpt_o2.aon v8.0.0 16Jul2007 (ivr_oc)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]
    dim headings$[7]
    when$=sysinfo.system_date$
    clock$=""
    m4$="##0.00%"
    headings=5
    width=132
    page=0
    m4=len(m4$)
    if m3>m4 m4$=fill(m3-m4)+m4$
    if m4>m3 m3$=fill(m4-m3)+m3$
    more=1

    setup$="Setup Cost "+str(setup:m3$)
    carry=carry*100
    carry$="Carrying Cost "+str(carry:m4$)
    zerocost1$=fill(m2-4)+"Zero"
    zerocost2$=fill(m2-4)+"Cost"

rem --- Initialize HEADINGS$

    if type$<>"" h8$=" For Item Type "+type$ else h8$=" For All Item Types"
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" By Item"+h8$
    headings$[2]="For All Warehouses"
    if begitem$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+begitem$
    if enditem$="" headings$[3]=headings$[3]+" -- To Item: Last" else headings$[3]=headings$[3]+" -- To Item: "+enditem$
    if begprod$="" headings$[4]="From Product: First" else headings$[4]="From Product: "+begprod$                
    if endprod$="" headings$[4]=headings$[4]+" -- To Product: Last" else headings$[4]=headings$[4]+" -- To Product: "+endprod$
    headings$[5]=setup$
    headings$[6]=carry$

rem --- Column Headings

    dim columns$[12,10]
    columns=13
    columns$[0,0]="Item^Description",       columns$[0,1]="C",   columns$[0,2]="10"
    columns$[1,0]="ABC^Code",               columns$[1,1]="C",   columns$[1,2]="5"
    columns$[2,0]="Lead^Time",              columns$[2,1]="C",   columns$[2,2]="5"
    columns$[3,0]="Avg^Period",             columns$[3,1]="N",   columns$[3,2]="10",columns$[3,3]=m2$
    columns$[4,0]="Act^Annual",             columns$[4,1]="N",   columns$[4,2]="10",columns$[4,3]=m2$
    columns$[5,0]="Wgt^Period",             columns$[5,1]="N",   columns$[5,2]="10",columns$[5,3]=m2$
    columns$[6,0]="Est^Annual",             columns$[6,1]="N",   columns$[6,2]="10",columns$[6,3]=m2$
    columns$[7,0]="Saftey Stock^Old/New",   columns$[7,1]="N",   columns$[7,2]="8",columns$[7,3]=m2$
    columns$[8,0]="",                       columns$[8,1]="C",   columns$[8,2]="3"
    columns$[9,0]="Order Point^Old/New",    columns$[9,1]="N",   columns$[9,2]="8",columns$[9,3]=m2$
    columns$[10,0]="",                      columns$[10,1]="C",  columns$[10,2]="3"
    columns$[11,0]="EOQ^Old/New",           columns$[11,1]="N",  columns$[11,2]="10"
    columns$[12,0]="",                      columns$[12,1]="C",  columns$[12,2]="3"

    if pos(level$="IB") then 

rem --- Position file

        read (ivw11_dev,key=firm_id$,dom=*next)

rem --- Main Read

        while more
            ivw11a_key$=key(ivw11_dev,end=*break)
            if pos(firm_id$=ivw11a_key$)<>1 break
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            read record (ivw11_dev) ivw11a$

rem --- Level break?

            if ivw11a.product_type$<>t1$ then gosub product_break

rem --- Print detail line for record

            unitcost=ivw11a.unit_cost
            if ivw11a.stock_level$<>"I" then continue
            if h9$<>"" then
                OutVect!.addItem(h9$)
                xwk=fnblank(columns-1)
                h9$=""
            endif

            average=ivw11a.usage_qty_01/g[0]
            weighted=ivw11a.usage_qty_02/g[0]
            oldeoq$=str(ivw11a.eoq_01:m2$)
            neweoq$=str(ivw11a.eoq_02:m2$)
            if carry=0 or unitcost=0 oldeoq$=zerocost1$,neweoq$=zerocost2$

            OutVect!.addItem(ivw11a.item_id$)
            OutVect!.addItem(ivw11a.abc_code$)
            OutVect!.addItem(str(int(ivw11a.lead_time)))
            OutVect!.addItem(str(average))
            OutVect!.addItem(str(ivw11a.usage_qty_01))
            OutVect!.addItem(str(weighted))
            OutVect!.addItem(str(ivw11a.usage_qty_02))
            OutVect!.addItem(str(ivw11a.safety_stock_01))
            OutVect!.addItem(ivw11a.saf_stk_code$)
            OutVect!.addItem(str(ivw11a.order_point_01))
            OutVect!.addItem(ivw11a.ord_pnt_code$)
            OutVect!.addItem(oldeoq$)
            OutVect!.addItem(ivw11a.eoq_code$)
            OutVect!.addItem("   "+ivw11a.item_desc$)
            xwk=fnblank(6)
            OutVect!.addItem(str(ivw11a.safety_stock_02))
            OutVect!.addItem("")
            OutVect!.addItem(str(ivw11a.order_point_02))
            OutVect!.addItem("")
            OutVect!.addItem(neweoq$)
            OutVect!.addItem("")
        wend
    endif
 
rem --- All done

    if level$="I" then
        done=1
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
rem            run pgmdir$+"ivu_oa.aon"
        goto std_exit
    endif
    
rem --- Done

    width=h0,page=h,update$="ivr_itemeoqrpt_o3.aon"
    overlay$=update$
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit

product_break: rem --- Product Break

    t1$=ivw11a.product_type$
    ivm10a.code_desc$="(Not On File)"
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    let h9$="Product "+t1$+" "+ivm10a.code_desc$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
