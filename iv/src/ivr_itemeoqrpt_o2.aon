rem --- EOQ, Order Point & Safety Stock Report (Report Overlay - Stocking Level Warehouse)
rem --- Program ivr_itemeoqrpt_o2.aon v8.0.0 16Jul2007 (ivr_oc)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]
    dim headings$[7]
    when$=sysinfo.system_date$
    clock$=""
    m4$="##0.00%"
    headings=5
    width=132
    page=0
    m4=len(m4$)
    if m3>m4 m4$=fill(m3-m4)+m4$
    if m4>m3 m3$=fill(m4-m3)+m3$
    more=1
    total_recs=0

    setup$=Translate!.getTranslation("AON_SETUP_COST_")+str(setup:m3$)
    carry=carry*100
    carry$=Translate!.getTranslation("AON_CARRYING_COST_")+str(carry:m4$)
    zerocost1$=fill(m2-4)+Translate!.getTranslation("AON_ZERO")
    zerocost2$=fill(m2-4)+Translate!.getTranslation("AON_COST")

rem --- Initialize HEADINGS$

    if type$<>"" h8$=Translate!.getTranslation("AON__FOR_ITEM_TYPE_")+type$ else h8$=Translate!.getTranslation("AON__FOR_ALL_ITEM_TYPES")
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_WAREHOUSE")+h8$
    headings$[2]="[HEADER]"
    if begitem$="" headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if begprod$="" headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    headings$[5]=setup$
    headings$[6]=carry$

rem --- Column Headings

    columns=13
    dim columns$[columns,10]

    columns$[0,0]=Translate!.getTranslation("AON_ITEM^DESCRIPTION"),       columns$[0,1]="C",   columns$[0,2]=str(p[0])
    columns$[1,0]=Translate!.getTranslation("AON_ABC^CODE"),               columns$[1,1]="C",   columns$[1,2]="5"
    columns$[2,0]=Translate!.getTranslation("AON_LEAD^TIME"),              columns$[2,1]="C",   columns$[2,2]="5"
    columns$[3,0]=Translate!.getTranslation("AON_COST"),                   columns$[3,1]="N",   columns$[3,2]=str(m3),  columns$[3,3]=m3$
    columns$[4,0]=Translate!.getTranslation("AON_AVG^PERIOD"),             columns$[4,1]="N",   columns$[4,2]=str(m2),  columns$[4,3]=m2$
    columns$[5,0]=Translate!.getTranslation("AON_ACT^ANNUAL"),             columns$[5,1]="N",   columns$[5,2]=str(m2),  columns$[5,3]=m2$
    columns$[6,0]=Translate!.getTranslation("AON_WGT^PERIOD"),             columns$[6,1]="N",   columns$[6,2]=str(m2),  columns$[6,3]=m2$
    columns$[7,0]=Translate!.getTranslation("AON_EST^ANNUAL"),             columns$[7,1]="N",   columns$[7,2]=str(m2),  columns$[7,3]=m2$
    columns$[8,0]=Translate!.getTranslation("AON_SAFTEY_STK^OLD/NEW"),     columns$[8,1]="N",   columns$[8,2]=str(m2),  columns$[8,3]=m2$
    columns$[9,0]="",                       columns$[9,1]="C",   columns$[9,2]="3"
    columns$[10,0]=Translate!.getTranslation("AON_ORDER_POINT^OLD/NEW"),   columns$[10,1]="N",  columns$[10,2]=str(m2), columns$[10,3]=m2$
    columns$[11,0]="",                      columns$[11,1]="C",  columns$[11,2]="3"
    columns$[12,0]=Translate!.getTranslation("AON_EOQ^OLD/NEW"),           columns$[12,1]="N",  columns$[12,2]="10"
    columns$[13,0]="",                      columns$[13,1]="C",  columns$[13,2]="3"


rem --- Stocking level warehouse
    t0$=""
    t1$=""
    first$=firm_id$+begwhse$
    no_records = 1
    read (ivw21_dev,key=first$,dom=*next)

    while more

        ivw21a_key$=key(ivw21_dev,end=*break)
        if pos(firm_id$=ivw21a_key$)<>1 break
        if begwhse$<>"" and ivw21a_key.warehouse_id$>endwhse$ break; rem why?  isn't this already done?
        read record (ivw21_dev) ivw21a$

    rem --- Level break?

        if ivw21a_key.warehouse_id$<>t0$ gosub warehouse_break
        if ivw21a_key.product_type$<>t1$ then gosub product_break

    rem --- Process work file record

        unitcost=ivw21a.unit_cost
        if ivw21a.stock_level$<>"W" then continue

        if h9$<>"" then
            xwk=fnblank(columns+1)
            OutVect!.addItem(h9$)
            xwk=fnblank(columns)
            xwk=fnblank(columns+1)
            h9$=""
        endif

        average=ivw21a.usage_qty_01/g[0]
        weighted=ivw21a.usage_qty_02/g[0]
        oldeoq$=str(ivw21a.eoq_01:m2$)
        neweoq$=str(ivw21a.eoq_02:m2$)

        if carry=0 or unitcost=0 then 
            oldeoq$=zerocost1$
            neweoq$=zerocost2$
        endif

        OutVect!.addItem(ivw21a.item_id$)
        OutVect!.addItem(ivw21a.abc_code$)
        OutVect!.addItem(str(int(ivw21a.lead_time)))
        OutVect!.addItem(str(ivw21a.unit_cost))
        OutVect!.addItem(str(average))
        OutVect!.addItem(str(ivw21a.usage_qty_01))
        OutVect!.addItem(str(weighted))
        OutVect!.addItem(str(ivw21a.usage_qty_02))
        OutVect!.addItem(str(ivw21a.safety_stock_01))
        OutVect!.addItem(ivw21a.saf_stk_code$)
        OutVect!.addItem(str(ivw21a.order_point_01))
        OutVect!.addItem(ivw21a.ord_pnt_code$)
        OutVect!.addItem(oldeoq$)
        OutVect!.addItem(ivw21a.eoq_code$)

        OutVect!.addItem("   "+ivw21a.item_desc$)
        xwk=fnblank(7)
        OutVect!.addItem(str(ivw21a.safety_stock_02))
        OutVect!.addItem("")
        OutVect!.addItem(str(ivw21a.order_point_02))
        OutVect!.addItem("")
        OutVect!.addItem(neweoq$)
        OutVect!.addItem("")

        no_records = 0

    wend

rem --- All done

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

    if no_records then
        OutVect!.addItem(Translate!.getTranslation("AON_THERE_IS_NOTHING_TO_PRINT_WITHIN_THESE_PARAMETERS"))
        xwk=fnblank(columns)
        goto std_exit
    endif

rem --- Chain to next overlay

    x$=stbl("!CLEAR","+EOQ_CARRY",err=*next); rem --- Clear stbl("+EOQ_CARRY") so ready to run IVU_ITEMEOQUPDAT form
    update$       = "ivu_itemeoqupdate.aon"
    overlay$      = update$
    out_action$   = "PRT-PDF"
    next_overlay$ = overlay$
    goto std_exit

warehouse_break: rem --- Warehouse Break

    gosub product_break
    t0$=ivw21a.warehouse_id$
    ivm10c.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(Translate!.getTranslation("AON_WAREHOUSE_")+t0$+" "+cvs(ivm10c.short_name$,2))
    return

product_break: rem --- Product Break

    t1$=ivw21a.product_type$
    ivm10a.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    h9$=Translate!.getTranslation("AON_PRODUCT_")+t1$+" "+ivm10a.code_desc$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
