rem --- Inventory Alternate/Superceded Items Listing
rem --- Program ivr_itemalt_o1.aon v8.0.0 16Jul2007 (ivr_2b)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 01:05:50)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Build headings

    dim headings$[6]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    if selection$="A" headings$[2]=Translate!.getTranslation("AON_ALTERNATE_ITEM_LISTING")
    if selection$="S" headings$[2]=Translate!.getTranslation("AON_SUPERCEDED_ITEM_LISTING")
    x3$=Translate!.getTranslation("AON_ALL_ITEM_TYPES")
    if begitem$="" headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if begprod$="" headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    if type$="" then headings$[2]=headings$[2]+Translate!.getTranslation("AON__FOR_")+x3$ else headings$[2]=headings$[2]+Translate!.getTranslation("AON__FOR_ITEM_TYPE_")+type$

rem --- Column heading

    if selection$="S" then column_head$=Translate!.getTranslation("AON_SUPERCEDED_BY") else column_head$=Translate!.getTranslation("AON_ALTERNATE_ITEM")
    dim columns$[5,10]
    columns=6
    columns$[0,0]=Translate!.getTranslation("AON_ITEM"),           columns$[0,1]="C",   columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),    columns$[1,1]="C",   columns$[1,2]="25"
    columns$[2,0]=Translate!.getTranslation("AON_PRD"),            columns$[2,1]="C",   columns$[2,2]="5"
    columns$[3,0]=column_head$,     columns$[3,1]="C",   columns$[3,2]="12"
    columns$[4,0]=Translate!.getTranslation("AON_DESCRIPTION"),    columns$[4,1]="C",   columns$[4,2]="25"
    columns$[5,0]=Translate!.getTranslation("AON_PRD"),            columns$[5,1]="C",   columns$[5,2]="5" 

    call pgmdir$+"adc_progress.aon","N","IVM_ITEMMAST","","","",0,ivm01_dev,1,meter_num,status
    recs=0
    total_recs=0

rem --- Position files

    ivm01a_key$=firm_id$+begitem$
    read (ivm01_dev,key=ivm01a_key$,dir=0,dom=*next) 

rem --- Next Item

    while more
        ivm01a_key$=key(ivm01_dev,end=*break)
        if pos(firm_id$=ivm01a_key$)<>1 then break
        if enditem$<>"" if ivm01a_key.item_id$>enditem$ break
        read record (ivm01_dev) ivm01a$
        
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        
        if ivm01a.alt_sup_flag$<>selection$ continue
        if cvs(ivm01a.alt_sup_item$,2)="" continue
        if begprod$<>"" if ivm01a.product_type$<begprod$ continue 
        if endprod$<>"" if ivm01a.product_type$>endprod$ continue
        if type$<>"" if ivm01a.tem_type$<>type$ continue

    rem --- Store source item information

        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        product$=ivm01a.product_type$
        alt_sup_item$=ivm01a.alt_sup_item$

    rem --- Retrieve alternate/substitute item

        find record (ivm01_dev2,key=firm_id$+alt_sup_item$,dom=*continue ) ivm01a2$

    rem --- Print detail line

        OutVect!.addItem(ivm01a_key.item_id$)
        OutVect!.addItem(description$)
        OutVect!.addItem(product$)
        OutVect!.addItem(alt_sup_item$)
        OutVect!.addItem(fnitem$(ivm01a2.item_desc$,p[3],p[4],p[5]))
        OutVect!.addItem(ivm01a2.product_type$)

        number=number+1
        recs=recs+1

    rem --- Loop back for next record

    wend

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    xwk=fnblank(columns+1)
    OutVect!.addItem(str(number)+"   "+Translate!.getTranslation("AON_ITEM(S)_LISTED"))
    xwk=fnblank(columns-2)
    xwk=fnblank(columns)
    goto std_exit


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
