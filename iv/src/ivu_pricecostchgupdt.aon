rem --- Price/Cost Change Update
rem --- Program ivu_pricecostchgupdt.aon v8.0.0 05Dec2007 (ivu_ga)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 02:53:33)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem       O0: program flag
rem            0 = Price Change, from ivr_pricechgreg.aon (ivr_la)
rem            1 = Cost Change, from ivr_costchgreg.aon (ivr_ja)
rem            2 = Price Reversal, ivr_pricechgrecreg.aon (ivr_4a)
rem  CHANNEL: driving file handle
rem            0 = IVE_PRICECHG (ive-05)
rem            1 = IVE_COSTCHG (ive-06) 
rem            2 = IVW_PRICREV (ivw-09)
rem            All other channels remain open from the register
rem   FIRST$: Position file with this
rem   *_REC$: A templated string to hold the record
rem            0 = pricechg_rec$
rem            1 = costchg_rec$
rem            2 = pricerev_rec$
rem      LS$: Y = Lots or Serial#'s, N = neither (cost only)

rem --- Development Note: this should be three separate programs

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL")
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    precision p[1]
    
    more = 1
    price_change   = 0
    cost_change    = 1
    price_reversal = 2
    
rem --- Options

    dim msg_tokens$[1]
    
    if o0 = price_change then
        msg_tokens$[1]=Translate!.getTranslation("AON_PRICE_CHANGE_UPDATE")
    else
        if o0 = cost_change then
            msg_tokens$[1]=Translate!.getTranslation("AON_COST_CHANGE_UPDATE")
        else
            if o0 = price_reversal then
                msg_tokens$[1]=Translate!.getTranslation("AON_PRICE_REVERSAL_UPDATE")
            endif
        endif
    endif

    msg_id$="AON_RUN_QUERY"
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update
    
rem --- Position file

    call pgmdir$+"adc_progress.aon","N","","","","",0,channel,1,meter_num,ignore_status
    read (channel, key=first$, dom=*next)

rem --- Main Loop Starts

    while more

        k$=key(channel, end=*break)
        if pos(first$=k$)<>1 then break
        
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status

rem --- Read record and get item and warehouse
        
        if o0 = price_change then
        
            read record (channel) pricechg_rec$
            whse$ = pricechg_rec.warehouse_id$
            item$ = pricechg_rec.item_id$
            
        else 
            if o0 = cost_change then

rem --- Cost only: are we past the effective date?
            
                if costchg_rec.effect_date$ > sysinfo.system_date$ then 
                    exitto done
                endif
                
                read record (channel) costchg_rec$
                whse$ = costchg_rec.warehouse_id$
                item$ = costchg_rec.item_id$

            else 
                if o0 = price_reversal then 
            
                    read record (channel) pricerev_rec$
                    whse$ = pricerev_rec.warehouse_id$
                    item$ = pricerev_rec.item_id$
            
                endif 
            endif 
        endif

rem --- Get item/warehouse record
        
        extract record (itemwhse_dev, key=firm_id$+whse$+item$, dom=remove_rec) itemwhse_rec$

rem --- Make changes to item/warehouse record

        if o0 = price_change then 
            
            itemwhse_rec.pri_price_cd$ = itemwhse_rec.cur_price_cd$
            itemwhse_rec.pri_price     = itemwhse_rec.cur_price
            itemwhse_rec.cur_price_cd$ = pricechg_rec.price_code$
            itemwhse_rec.cur_price     = pricechg_rec.unit_price
                
        else
            if o0 = cost_change then 
            
                itemwhse_rec.unit_cost = costchg_rec.new_cost
                itemwhse_rec.std_cost  = costchg_rec.new_cost

rem --- Cost only: update Lot/Serial costs

                if ls$="Y" then 

                    read (lsmaster_dev,key=firm_id$+whse$+item$,dom=*next)
                    
                    while more
                        lsmaster_key$ = key(lsmaster_dev, end=*break)
                        if pos(firm_id$+whse$+item$ = lsmaster_key$)<>1 break
                        
                        extract record (lsmaster_dev, key=lsmaster_key$) lsmaster_rec$
                        lsmaster_rec.unit_cost = costchg_rec.new_cost
                        lsmaster_rec.std_cost  = costchg_rec.new_cost
                        lsmaster_rec$ = field(lsmaster_rec$)
                        write record (lsmaster_dev) lsmaster_rec$
                    wend
                    
                endif
    
            else
                if o0 = price_reversal then 
            
                    x$ = itemwhse_rec.cur_price_cd$
                    x  = itemwhse_rec.cur_price
                    itemwhse_rec.cur_price_cd$ = itemwhse_rec.pri_price_cd$
                    itemwhse_rec.cur_price     = itemwhse_rec.pri_price
                    itemwhse_rec.pri_price_cd$ = x$
                    itemwhse_rec.pri_price     = x
                
                endif
            endif
        endif
        
rem --- Update item/warehouse record

        itemwhse_rec$ = field(itemwhse_rec$)
        write record (itemwhse_dev) itemwhse_rec$

remove_rec: rem --- Remove entry record 

        if o0 = price_change then
            remove (channel, key=pricechg_rec.firm_id$+pricechg_rec.price_code$+pricechg_rec.warehouse_id$+pricechg_rec.item_id$, dom=*next)
        else
            if o0 = cost_change then
                remove (channel, key=costchg_rec.firm_id$+costchg_rec.effect_date$+costchg_rec.warehouse_id$+costchg_rec.item_id$, dom=*next)
            else
                if o0 = price_reversal then
                    remove (channel, key=pricerev_rec.firm_id$+pricerev_rec.price_code$+pricerev_rec.warehouse_id$+pricerev_rec.product_type$+pricerev_rec.item_id$, dom=*next)
                endif
            endif
        endif
    
    wend

done: rem --- All done

    rem --- possible to have >1 price code/eff date in file, if so, we've only updated/removed some recs, so don't delete batch
    empty$="Y"
    read (channel,key="",dom=*next)
    k$=key(channel,end=*next);empty$="N"
    if empty$="Y" then call pgmdir$+"adc_batchdelete.aon",err=*next,status
    
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,ignore_status
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    
return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release
    
rem #endinclude std_end.src

    end
