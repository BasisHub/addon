rem --- Inventory Valuation Report (Input Overlay)
rem --- Program ivr_valuation.aon v8.0.0 09Jul2007 (ivr_na)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:53:19)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Options object for type checking

	use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
    files$[2]="ars_params",ids$[2]="ARS_PARAMS"
    files$[3]="gls_params",ids$[3]="GLS_PARAMS"
    files$[4]="ivm-01",ids$[4]="IVM_ITEMMAST"
    files$[5]="ivm-02",ids$[5]="IVM_ITEMWHSE"
    files$[6]="ivc_prodcode",ids$[6]="IVC_PRODCODE"
    files$[7]="ivc_whsecode",ids$[7]="IVC_WHSECODE"
    files$[8]="ivm-12",ids$[8]="IVM_ITEMACT"
    call pgmdir$+"adc_fileopen.aon",action,begfile,8,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    ivs01_dev=channels[1]
    ars01_dev=channels[2]
    gls_params_dev=channels[3]
    ivm01_dev=channels[4]
    ivm02_dev=channels[5]
    ivm10a_dev=channels[6]
    ivm10c_dev=channels[7]
    ivm12_dev=channels[8] 

rem --- Dimension string templates

    dim ivs01a$:templates$[1],ars01a$:templates$[2],gls_params_rec$:templates$[3],
:       ivm01a$:templates$[4],ivm02a$:templates$[5],ivm10a$:templates$[6],
:       ivm10c$:templates$[7],ivm12a$:templates$[8]

rem --- Assign form input values to local variables

	declare Option option!

    cost$=option!.getOptionData("cost_method")
    level$=option!.getOptionData("rpt_level")
    begwhse$=option!.getOptionData("warehouse_id_01")
    endwhse$=option!.getOptionData("warehouse_id_02")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")
    begitem$=option!.getOptionData("item_id_1")
    enditem$=option!.getOptionData("item_id_2")
    type$=option!.getOptionData("item_type")
    include$=option!.getOptionData("pick_check")
    pagebreak$=option!.getOptionData("pick_flag")
    whichqty$=option!.getOptionData("report_option")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls_params_dev,key=gls01a_key$,err=std_missing_params) gls_params_rec$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

    call pgmdir$+"adc_application.aon","GL",info$[all]
    gl$=info$[9]
   
rem --- Parameters

    dim p[5],g[5],headings$[7]
    ls$="N", lf$="N"
    p[0]=ivs01a.item_id_len
    p[1]=num(ivs01a.precision$)
    p[2]=ivs01a.ls_no_len
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    if ivs01a.lifofifo$<>"N" lf$="Y"
    if ivs01a.lotser_flag$<>"N" ls$="Y"
    g[4]=num(gls_params_rec.max_acct_len$)
    di$=ars01a.dist_by_item$

rem --- Initializations

    precision p[1]
    if lf$="Y" whichqty$="O"

rem --- Additional File Opens

    if ls$="Y" then
        files$[9]="ivm-07",ids$[9]="IVM_LSMASTER"
        files$[10]="ivm-17",ids$[10]="IVM_LSACT"
    endif
    if lf$="Y" then
        files$[11]="ivm-04",ids$[11]="IVM_ITEMTIER"
    endif
    if gl$="Y" then
        files$[12]="glm-01",ids$[12]="GLM_ACCT"
        files$[13]="glw-04",ids$[13]="GLW_ACCTTOTALS",options$[13]="C"
    endif
    if di$="Y" then 
        files$[14]="arc_distcode",ids$[14]="ARC_DISTCODE"
    endif
    
    call pgmdir$+"adc_fileopen.aon",action,9,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    if ls$="Y" then
        ivm07_dev=channels[9],ivm17_dev=channels[10]
        dim ivm07a$:templates$[9],ivm17a$:templates$[10]
    endif
    if lf$="Y" then
        ivm04_dev=channels[11]
        dim ivm04a$:templates$[11]
    endif
    if gl$="Y" then
        glm_acct_dev=channels[12],glw_accttotals_dev=channels[13]
        dim glm_acct_rec$:templates$[12],glw_accttotals_rec$:templates$[13]
    endif
    if di$="Y" then 
        arm10_dev=channels[14]
        dim arm10d$:templates$[14]
    endif

rem --- Headings
    
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+" For Period "+ivs01a.current_per$+" "+ivs01a.current_year$,H2=5
    h3$="All Item Types"
    if type$<>"" then h3$="Item Type "+CVS(type$,2)
    if include$="Y" then h4$="Including Zero Balances" else h4$="No Zero Balances"
    if whichqty$="B" then h5$="Using Ending Balances" else h5$="Using Quantity On Hand"
    headings$[2]=h4$+" "+h5$

rem --- Product totals

    if level$="P" then
	format=1
	headings$[3]="Product Type Totals For "+h3$
	whse1$="First",whse2$="Last",ivm10c.short_name$="(Not on File)"
	if begwhse$<>"" then
	    find (ivm10c_dev,key=firm_id$+"C"+begwhse$,DOM=*next)ivm10c$
	    whse1$=ivm10c.warehouse_id$+" "+CVS(ivm10c.short_name$,2)
	endif
	ivm10c.short_name$="(Not on File)"
	if endwhse$<>"" then
	    find (ivm10c_dev,key=firm_id$+"C"+endwhse$,DOM=*next)ivm10c$
	    whse$=ivm10c.warehouse_id$+" "+CVS(ivm10c.short_name$,2)
	endif
        whse1$="From Warehouse: "+whse1$,whse2$="  To Warehouse: "+whse2$
        headings$[4]=whse1$+whse2$
        whichqty$="O", include$="N", pagebreak$="N"
    endif

rem --- Summary by item

    if level$="S" then
	format=2,headings$[1]="Summary "+headings$[1]
    endif

rem --- Detail report

    if level$="D" then
	format=3,headings$[1]="Detail "+headings$[1]
	if ls$="Y" then format=6
	if lf$="Y" then format=5
	if ls$="Y" and lf$="Y" then format=4
    endif
    
rem --- Resize masks

    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,6,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,8,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,5,12
   
rem --- Retrieve key template

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMMAST","PRIMARY",ivm01_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMWHSE","PRIMARY",ivm02_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","ARC_DISTCODE","PRIMARY",arm10d_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","GLW_ACCTTOTALS","PRIMARY",glw04a_key_tpl$,rd_table_chans$[all],status$

    dim ivm01a_key$:ivm01_key_tpl$,
:	ivm02a_key$:ivm02_key_tpl$,
:	arm10d_key$:arm10d_key_tpl$,
:	glw04a_key$:glw04a_key_tpl$

rem --- Run Overlay

    run pgmdir$+"ivr_valuation_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    if status = 0 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
	
rem #endinclude std_end.src

    end
