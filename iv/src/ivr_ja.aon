rem --- Cost Change Register
rem --- Program ivr_ja v8.0.0 09Jul2007 (ivr_ja)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:42:29)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="ive-06",ids$[2]="IVE_COSTCHG"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="ivm-02",ids$[4]="IVM_ITEMWHSE"
    files$[5]="ivm-03",ids$[5]="IVX_ITEMPROD"
    files$[6]="ivm-07",ids$[6]="IVM_LSMASTER"
    files$[7]="IVC_PRODCODE",ids$[7]=files$[7] 
    files$[8]="ivm-14",ids$[8]="IVM_ITEMSYN"
    files$[9]="ivw-06",ids$[9]="IVX_COSTXREF"
    files$[10]="IVC_WHSECODE",ids$[10]=files$[10]
    files$[11]="IVS_PARAMS",ids$[11]=files$[11]
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ive06_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm03_dev=channels[5]
    ivm07_dev=channels[6]
    ivm10a_dev=channels[7]
    ivm14_dev=channels[8]
    ivw06_dev=channels[9]
    ivm10c_dev=channels[10]
    ivs01a_dev=channels[11]

rem --- Dimension string templates

    dim ive06a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm03a$:templates$[5],ivm07a$:templates$[6],ivm10a$:templates$[7],
:       ivm14a$:templates$[8],ivw06a$:templates$[9],ivm10c$:templates$[10],
:       ivs01a$:templates$[11] 



rem --- Assign form input values to local variables

    table$=fnget_table$("")
    rem value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
   
rem --- Parameters

    dim p[5]
    n2$="IV"
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    if ivs01a.cost_method$<>"S" goto Std_Cost
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    whse$=ivs01a.warehouse_id$
    p[3]=num(ivs01a.desc_len$)
    p[4]=num(ivs01a.desc_len$)
    p[5]=num(ivs01a.desc_len$)
    if pos(ivs01a.lotser_flag$="LS") ls$="Y" else ls$="N"

rem --- Initializations

    precision num(ivs01a.precision$)
    rem dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],w0$(27),w[4]
    rem dim b0$(24),b1$(64),b[20],x0$(32),headings$[3],o[8]
    dim headings$[3],o[8]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    when$=sysinfo.system_date$
    clock$=""
    errors=0
    width=132
    page=0
    l9=59
    l=l9+1
    headings=2
    number=0
    effective$=sysinfo.system_date$
    t0$=""
    t1$=""
    t2$=""
    m9$="-###0.00%"
    m9=len(m9$)
    dw=p[3]+p[4]+p[5]

rem --- Print positions

    call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12
    o[7]=width-m3
    o[6]=o[7]-m9
    o[5]=o[6]-m3
    o[4]=o[5]-m3
    o[3]=o[4]-m3
    o[2]=o[3]-3
    o[1]=p[0]+1
    v=o[2]-o[1]
    if dw>v split=1,dw=o[2]-3
    dim description$(dw)

rem --- Additionial Opens

    if ls$="Y" then
        files$[9]="ivm-07"
        call pgmdir$+"adc_fileopen.aon",1,9,9,files$[all],options$[all],channels[all],batch,status
        if status goto std_exit
        ivm07_dev=channels[9]
    endif
rem --- Set default effective date

    read (ive06_dev,key=firm_id$,dom=*next)
    ive06a_key$=key(ive06_dev,end=GUI_Resource)
    if pos(firm_id$=ive06a_key$)=1 effective$=ive06a_key.effect_date$

GUI_Resource: rem --- GUI Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit

Effective_Date: rem --- Effective Date

    v4$="Enter The Effective Date For Changes To Be Listed On This Register (<F1>=All)"
    v0$="D"
    v1$="CE"
    v2$=effective$
    v3$=""
    v0=3
    v1=40
    v2=3
    control_id=3000
    on v3 goto Effective_Date_Assign,Effective_Date_Flow,Effective_Date,Effective_Date,std_exit,Effective_Date_Assign,std_exit

Effective_Date_Flow:
    effective$=""
    call pgmdir$+"syc_rs.bbx","",my_context,3000,effective$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,"All",0,"",ignore_status
    goto Report_Init

Effective_Date_Assign:
    if v$ >sysinfo.system_date$ then
        dim message$[1]
        message$[0]="Cost Changes With Future Effective Dates May Not Be Implemented"
        message$[1]="Until That Date (<Enter>=Continue)"
        call pgmdir$+"adc_stdmessage.aon",2,message$[all],1,22,-1,v$,v3
        if v$<>"SPECIAL" goto Effective_Date
    endif
    effective$=v$

Report_Init:rem --- Report Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    rem call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$," Sorting","","",16+p[0],ivw06_dev,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivw06_dev,1,meter_num,status
    gosub Sort_ive06
    call pgmdir$+"adc_progress.aon","S","","Printing","","",0,0,0,0,ignore_status
    read (ivw06_dev,key="",dom=*next)

rem --- Next ivw-06 record

    while more
        ivw06a_key$=key(ivw06_dev,end=done)
        read (ivw06_dev)
        call pgmdir$+"adc_progress.aon","S","","","",fndate$(ivw06a_key.effect_date$)+" "+ivw06a_key.warehouse_Id$+" "+ivw06a_key.product_type$+" "+ivw06a_key.Item_Id$,ivw06_dev,0,1,meter_num,status
        ive06a_key$=ivw06a_key.firm_id$+ivw06a_key.effect_date$+ivw06a_key.warehouse_Id$+ivw06a_key.Item_Id$
        read record (ive06_dev,key=ive06a_key$,dom=*continue) ive06a$

rem --- Level breaks?

        if ivw06a_key.effect_date$<>t0$ gosub Date_Break
        if ivw06a_key.warehouse_Id$<>t1$ gosub Whse_Break
        if ivw06a_key.product_type$<>t2$ gosub Product_Break

rem --- Additional reads

        rem dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],b0$(24),b1$(64),b[20]
        ivm01a_key$=firm_id$+ive06a.product_type$
        ivm02a_key$=firm_id$+ive06a.warehouse_Id$
        find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
        find record (ivm02a_dev,key=ivm02a_key$,dom=*next) ivm02a$
        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])

rem --- Calculations

        change=ive06a.std_cost-b[11]
        margin=ivm02a.cur_price-ive06a.std_cost
        percent=100
        if ivm02a.unit_cost<>0 then
            percent=max(min(((ive06a.std_cost-ivm02a.unit_cost)*100)/ivm02a.unit_cost,9999.99),-9999.99)
        endif
rem --- New Product Type?

        if h0$<>"" then
            if l+4+nl>l9 gosub report_heading
            if nl>0 print (printer_dev)""
            print (printer_dev)h0$
            print (printer_dev)""
            l=l+2+nl
            nl=1
            h0$=""
        endif
rem --- Print detail line

        x$=description$
        needed=1
        if split>0 x$="",needed=2
        if l+needed>l9 gosub report_heading
        print (printer_dev)@(o[0]),ive06a.item_id$,@(o[1]),x$,@(o[2]),ivm01a.unit_of_sale$,@(o[3]),ivm02a.unit_cost:m3$,@(o[4]),ive06a.std_cost:m3$,@(o[5]),change:m3$,@(o[6]),percent:m9$,@(o[7]),margin:m3$
        if split>0 print (printer_dev)@(o[0]+2),description$
        l=l+needed
        number=number+1
        nl=1
        if ive06a.std_cost<0 errors=errors+1

rem --- Loop back for next record

    wend

done: rem --- All done

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    if !number then
        gosub report_heading
        print (printer_dev)"No Cost Change Entries Found"
        goto Overlay
    endif
rem --- Any negative costs?

    if errors<>0 then
        dim message$[2]
        message$[0]="This Register Contains Items With Negative Unit Costs."
        message$[1]="The Update Will Not Be Run. Review The Register, Correct"
        message$[2]="The Errors And Reprint (<Enter>=Continue)"
        call pgmdir$+"adc_stdmessage.aon",2,message$[all],2,22,-1,v$,v3
        if v$<>"SPECIAL" goto std_exit
    endif

Overlay: rem --- Run update overlay

    channel=ive06_dev
    o0=1
    close (printer_dev,err=*next)
    run pgmdir$+"ivu_ga.bbx"

Std_Cost: rem --- Not standard costing

    call pgmdir$+"ivc_warnings.aon","S",status
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+4
    nl=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[3]+m3-8),"Current",@(o[4]+m3-5),"New",@(o[5]+m3-7),"Cost",@(o[6]+m9-7),"Percent",@(o[7]+m3-7),"Gross"
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Description",@(o[2]),"UM",@(o[3]+m3-8),"Cost",@(o[4]+m3-5),"Cost",@(o[5]+m3-7),"Change",@(o[6]+m9-7),"Change",@(o[7]+m3-7),"Margin"
    print (printer_dev)""
    return

Sort_ive06: rem --- Sort ive-06 by product type

    rem dim y0$(30)
    first$=firm_id$+effective$
    read (ive06_dev,key=first$,dom=*next)

rem --- Read next entry record
    while more
        ive06a_key$=key(ive06_dev,end=*break)
        if pos(first$=ive06a_key$)=1 then
            if ive06a.effect_date$<= sysinfo.system_date$ then
                read (ive06_dev)
                call pgmdir$+"adc_progress.aon","S","","","",fndate$(ive06a.effect_date$)+" "+ive06a.warehouse_id$+" "+ive06a.item_id$,0,0,1,0,ignore_status
                let ivm01a_key$=ive06a.firm_id$+ive06a.item_id$
                find record (ivm01a_dev,key=ivm01a_key$,dom=*continue) ivm01a$

rem --- Write sort record

                let ivw06a_key$=ive06a.firm_id$+ive06a.effect_date$+ive06a.warehouse_id$+ivm01a.product_type$+ive06a.item_id$
                write record (ivw06_dev,key=ivw06a_key$) ivw06a$
            endif
        endif
       wend

rem --- Sort completed

    return

Date_Break: rem --- Date Break

    if t0$<>"" gosub Whse_Break
    let t0$=ive06a.effect_date$,l=l9+1,headings=3
    let headings$[1]=sysinfo.task_desc$+" For Changes Effective "+fndate$(t0$)
    return

Whse_Break: rem --- Warehouse Break

    if t1$<>"" gosub Product_Break
    rem dim x0$(32)
    let t1$=ive06a.warehouse_id$,ivm10c.whse_name$="(Not on File)",l=l9+1
    find record (ivm10c_dev,key=firm_id$+"C"+t1$,dom=*next) ivm10c$
    let headings$[2]="Warehouse "+t1$+" "+cvs(ivm10c.whse_name$,2)
    return

rem --- Product Break

Product_Break:
    rem dim x0$(32)
    let t2$=ive06a.product_type$,ivm10a.code_desc$="(Not On File)"
    find record (ivm10a_dev,key=firm_id$+"A"+t2$,dom=*next) ivm10a$
    let h0$="Product "+t2$+" "+ivm10a.code_desc$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
