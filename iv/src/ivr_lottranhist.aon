rem ivr - Inventory Lot/Serial Transaction History Listing (Report Overlay)
rem Program ivr_lottranhist.aon v8.0.0 26Oct2006 (ivr_7b)
rem Created from ivr_transhist, incorporating ivr_7a/7b. 11/2006.CAH
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 12:56:00)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Use Statements

    use ::sys/prog/bao_option.bbj::Option
    use ::ado_func.src::func

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Check application settings

    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]; rem --- AR installed?
    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]; rem --- AP installed?
    call pgmdir$+"adc_application.aon","GL",info$[all]
    gl$=info$[20]; rem --- GL installed?

rem --- Open files

    num_files = 14
    open_beg  = 1
    open_end  = num_files

    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]="APS_PARAMS",    open_opts$[1]="OTA"
    open_tables$[2]="ARS_PARAMS",    open_opts$[2]="OTA"
    open_tables$[3]="GLS_PARAMS",    open_opts$[3]="OTA"
    open_tables$[4]="IVS_PARAMS",    open_opts$[4]="OTA"
    if ar$="Y"
        open_tables$[5]="ARM_CUSTMAST",  open_opts$[5]="OTA"
    endif
    if gl$="Y"
        open_tables$[6]="GLM_ACCT",      open_opts$[6]="OTA"
    endif
    open_tables$[7]="IVM_ITEMMAST",  open_opts$[7]="OTA"
    open_tables$[8]="IVM_LSMASTER",  open_opts$[8]="OTA"
    open_tables$[9]="IVC_PRODCODE",  open_opts$[9]="OTA"
    open_tables$[10]="IVC_TRANCODE", open_opts$[10]="OTA"
    open_tables$[11]="IVC_WHSECODE", open_opts$[11]="OTA"
    open_tables$[12]="IVT_LSTRANS",  open_opts$[12]="OTA"
    open_tables$[13]="IVT_LSTRANS",  open_opts$[13]="OA@"

    gosub open_tables

    aps01a_dev = num(open_chans$[1])
    ars01a_dev = num(open_chans$[2])
    gls01a_dev = num(open_chans$[3])
    ivs01a_dev = num(open_chans$[4])
    arm01_dev  = num(open_chans$[5])
    glm01_dev  = num(open_chans$[6])
    ivm01_dev  = num(open_chans$[7])
    ivm07_dev  = num(open_chans$[8])
    ivm10a_dev = num(open_chans$[9])
    ivm10b_dev = num(open_chans$[10])
    ivm10c_dev = num(open_chans$[11])
    ivt01_dev  = num(open_chans$[12])
    ivt01_dev2 = num(open_chans$[13])

    dim aps01a$:open_tpls$[1]
    dim ars01a$:open_tpls$[2]
    dim gls01a$:open_tpls$[3]
    dim ivs01a$:open_tpls$[4]
    dim arm01a$:open_tpls$[5]
    dim ivm01a$:open_tpls$[7]
    dim ivm07a$:open_tpls$[8]
    dim ivm10c$:open_tpls$[11]
    dim ivt01a$:open_tpls$[12]
    dim ivt01b$:open_tpls$[12]

rem --- Assign form input values to local variables

    declare Option option!

    dim ttypes$[9]
    beg_date$=option!.getOptionData("pick_date_1")
    end_date$=option!.getOptionData("pick_date_2")
    beg_whse$=option!.getOptionData("warehouse_id_1")
    end_whse$=option!.getOptionData("warehouse_id_2")
    beg_prod$=option!.getOptionData("product_type_1")
    end_prod$=option!.getOptionData("product_type_2")
    beg_item$=option!.getOptionData("item_id_1")
    end_item$=option!.getOptionData("item_id_2")
    item_type$=option!.getOptionData("item_type")
    ocb$=option!.getOptionData("op_cl_both")
    totals$=option!.getOptionData("pick_check")
    ttypes$[0]=option!.getOptionData("tran_hst_all")
    ttypes$[1]=option!.getOptionData("tran_hst_po")
    ttypes$[2]=option!.getOptionData("tran_hst_op")
    ttypes$[3]=option!.getOptionData("tran_hst_it")
    ttypes$[4]=option!.getOptionData("tran_hst_ph")
    ttypes$[5]=option!.getOptionData("tran_hst_ti")
    ttypes$[6]=option!.getOptionData("tran_hst_to")
    ttypes$[7]=option!.getOptionData("tran_hst_wi")
    ttypes$[8]=option!.getOptionData("tran_hst_wo")
    ttypes$[9]=option!.getOptionData("tran_hst_bm")

	if ttypes$[0]="N" and ttypes$[1]="N" and ttypes$[2]="N" and ttypes$[3]="N" and ttypes$[4]="N" and 
:	   ttypes$[5]="N" and ttypes$[6]="N" and ttypes$[7]="N" and ttypes$[8]="N" and ttypes$[9]="N"
		msg_id$="AD_NORECS"
		gosub disp_message
		goto std_exit_no_report
	endif
	
rem --- Retrieve key template

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVT_LSTRANS","PRIMARY",ivt01_key_tpl$,rd_table_chans$[all],status$
    dim ivt01a_key$:ivt01_key_tpl$
    dim ivt01alt$:ivt01_key_tpl$

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initializations

    dim p[7]
    P[0]=ivs01a.item_id_len
    P[1]=ivs01a.vendor_prd_len
    p[2]=num(ivs01a.precision$)
    p[3]=ivs01a.ls_no_len
    p[5]=num(ivs01a.desc_len_01$)
    p[6]=num(ivs01a.desc_len_02$)
    p[7]=num(ivs01a.desc_len_03$)
	missing_master$=Translate!.getTranslation("AON_MISSING_LOT/SERIAL_MASTER_RECORD")
	
    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","P",imask$,m4$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,10,12
    call pgmdir$+"adc_sizemask.aon",m4$,m4,6,12

    if ar$="Y" then
        find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
		call stbl("+DIR_PGM")+"adc_getmask.aon","CUSTOMER_ID","","","",x9$,0,x8
    endif

rem --- Check for vendor masterfile

    if ap$<>"N" then
        open_end=1
        open_tables$[1]="APM_VENDMAST", open_opts$[1]="OTA"
        gosub open_tables
        apm01_dev = num(open_chans$[1])

        find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
		call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",x7$,0,x6
    endif

    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
	call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g5$,0,account_length

    all_ttypes$="POOPITPHTITOWIWOBM"

    if ttypes$[0]="Y" then 
        ttype$=all_ttypes$
    else
        for x=1 to 9
            if ttypes$[x] = "Y" ttype$=ttype$+all_ttypes$((x-1)*2+1,2)
        next x
    endif

    if ttype$=all_ttypes$ then all$="Y" else all$="N"
    more=1
    recs=0
    total_recs=0

    precision p[2]
    headings=7

    dim headings$[headings]
    dim item_qty[9],item_ext[9]
    dim ivchannels[6],params[6],masks$[3]

    headings$[0]=firm_name$
    headings$[1]=task_desc$
    done=0

    ivchannels[0]=ivm01_dev
    ivchannels[1]=ivm10a_dev
    ivchannels[2]=arm01_dev
    ivchannels[3]=apm01_dev
    ivchannels[4]=glm01_dev
    ivchannels[5]=ivm10b_dev
    ivchannels[6]=ivm10c_dev

    params[0]=p[0]
    params[1]=x8
    params[2]=x6
    params[3]=account_length
    params[4]=p[5]
    params[5]=p[6]
    params[6]=p[7]

    masks$[0]=firm_id$
    masks$[1]=x9$
    masks$[2]=x7$
    masks$[3]=g5$

rem --- Headings

    if ocb$="O" x0$=Translate!.getTranslation("AON_OPEN") else if ocb$="C" x0$=Translate!.getTranslation("AON_CLOSED") else x0$=Translate!.getTranslation("AON_ALL")
    if beg_date$<>"" x1$=func.formatDate(beg_date$) else x1$=Translate!.getTranslation("AON_FIRST_DATE")
    if end_date$<>"" x2$=func.formatDate(end_date$) else x2$=Translate!.getTranslation("AON_LAST_DATE")
    headings$[2]=x0$+Translate!.getTranslation("AON__LOT/SERIAL_NUMBERS_FROM_")+x1$+Translate!.getTranslation("AON__THROUGH_")+x2$

    if all$="Y" then
        headings$[3]=Translate!.getTranslation("AON_FOR_ALL_TRANSACTION_TYPES")
    else
        headings$[3]=Translate!.getTranslation("AON_FOR_TRANSACTION_TYPES_")

        for x=0 to len(ttype$)-1 step 2
            headings$[3]=headings$[3]+ttype$(x+1,2)+" "
        next x

        headings$[3]=cvs(headings$[3],2)
    endif

    if begitem$="" then headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" then headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if begprod$="" then headings$[5]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[5]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" then headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    if type$="" then headings$[6]=Translate!.getTranslation("AON_ALL_ITEM_TYPES") else headings$[6]=Translate!.getTranslation("AON_ITEM_TYPE_")+type$
    headings$[7]="[HEADER]"

rem --- column headings

    dim columns$[7,10]
    columns=8
    columns$[0,0]=Translate!.getTranslation("AON_ITEM^LOT/SERIAL_#"),      columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]=Translate!.getTranslation("AON_DATE"),                   columns$[1,1]="C", columns$[1,2]="8"
    columns$[2,0]=Translate!.getTranslation("AON_TYPE"),                   columns$[2,1]="C", columns$[2,2]="5"
    columns$[3,0]=Translate!.getTranslation("AON_REFERENCE_INFORMATION"),  columns$[3,1]="C",columns$[3,2]="35"
    columns$[4,0]=Translate!.getTranslation("AON_QUANTITY"),               columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$,columns$[4,10]="T"
    columns$[5,0]=Translate!.getTranslation("AON_UNIT_COST"),              columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m3$
    columns$[6,0]=Translate!.getTranslation("AON_EXTENSION"),              columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_BALANCE"),                columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

    call pgmdir$+"adc_progress.aon","N","IVT_LSTRANS","",Translate!.getTranslation("AON_PRINTING"),"",3+p[0],ivt01_dev,1,0,status
    if status = 999 then goto std_exit

rem --- Position files

    read (ivt01_dev,key=firm_id$+beg_whse$,dom=*next)

rem --- Get next record

    while more

        ivt01a_key$=key(ivt01_dev,end=*break)
        if firm_id$<>ivt01a_key.firm_id$ then break
        tran_date$=ivt01a_key.trans_date$
        whse$=ivt01a_key.warehouse_id$
        item$=ivt01a_key.item_id$

    rem --- Valid Warehouse/Item?

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then exitto std_exit

        if end_whse$<>"" and whse$>end_whse$ then break

        if beg_item$<>"" and item$<beg_item$ then
            read (ivt01_dev,key=firm_id$+whse$+beg_item$,dom=*continue)
        endif

        if end_item$<>"" and item$>end_item$ then
            read (ivt01_dev,key=firm_id$+whse$+$FF$,dom=*continue)
        endif

        if beg_date$<>"" and tran_date$<beg_date$ then
            read (ivt01_dev,key=firm_id$+whse$+item$+ivt01a_key.lotser_no$+beg_date$,dom=*continue)
        endif

        if end_date$<>"" and tran_date$>end_date$ then
            read (ivt01_dev,key=firm_id$+whse$+item$+ivt01a_key.lotser_no$+$FF$,dom=*continue)
        endif

        find record (ivm01_dev,key=firm_id$+item$,dom=*continue) ivm01a$
        if item_type$<>"" and ivm01a.item_type$<>item_type$ then read(ivt01_dev); continue
        if beg_prod$<>"" and ivm01a.product_type$<beg_prod$ then read(ivt01_dev); continue
        if end_prod$<>"" and ivm01a.product_type$>end_prod$ then read(ivt01_dev); continue

    rem --- Open or Closed Lots?

		bad_rec$="N"
        if ocb$<>"B" then
            dim ivm07a$:fattr(ivm07a$)
            find record (ivm07_dev,key=firm_id$+whse$+item$+ivt01a_key.lotser_no$,dom=*next) ivm07a$
            if cvs(ivm07a.firm_id$,2)=""
				bad_rec$="Y"
			else
				if ocb$="O" and ivm07a.qty_on_hand=0 then read(ivt01_dev); continue
				if ocb$="C" and ivm07a.qty_on_hand<>0 then read(ivt01_dev); continue
			endif
        endif

    rem --- Valid Product/Type/Date?

        read record (ivt01_dev,key=ivt01a_key$) ivt01a$
        if all$<>"Y" if pos(ivt01a.trans_source$=ttype$,2)=0 then continue
        if ivt01a.trans_source$="BB" then continue

    rem --- Level breaks?

        if all$="Y" and totals$="Y" and item$<>t1$ gosub get_bb
        if whse$<>t0$ then gosub wh_break
        if item$<>t1$ then gosub item_break
        if all$="Y" and totals$="N" and ivt01a_key.lotser_no$<>t2$ then gosub get_bb

        if ivt01a.lotser_no$<>t2$ then
            if totals$="N" then gosub print_totals
            ser_lot_no$=ivt01a.lotser_no$
            t2$=ivt01a.lotser_no$
        endif

        balance=balance+ivt01a.trans_qty

    rem -- Product heading

        if subhead$<>"" then 
            xwk=fnblank(columns)
            OutVect!.addItem(cvs(ivt01a.item_id$,3)+" "+cvs(ivm01a.item_desc$,3))
            xwk=fnblank(2)
            OutVect!.addItem(Translate!.getTranslation("AON_PRODUCT_TYPE:_")+ivm01a.product_type$)
            wkx=fnblank(columns-4)
            subhead$=""
        endif

    rem --- Get Reference Block

        dim desc$[2]
        call pgmdir$+"ivc_transdata.aon",ivt01a$,ivchannels[all],params[all],masks$[all],type$,desc$[all]

    rem --- Build Totals Array

        if ivt01a.trans_source$<>"BB" and ivt01a.trans_source$<>"  " 
            while more
                x=pos(type$=item_tot$,4)

                if x=0 then 
                    item_tot$=item_tot$+type$
                else
                    break
                endif
            wend

            x=(x+3)/4
            item_qty[x]=item_qty[x]+ivt01a.trans_qty
            item_ext[x]=item_ext[x]+ivt01a.trans_qty*ivt01a.unit_cost
        endif

    rem --- Print detail line

        OutVect!.addItem("   "+ser_lot_no$)
        OutVect!.addItem(func.formatDate(ivt01a.trans_date$))
        OutVect!.addItem(type$)
        OutVect!.addItem(desc$[0])
        OutVect!.addItem(str(ivt01a.trans_qty))
        OutVect!.addItem(str(ivt01a.unit_cost))
        OutVect!.addItem(str(ivt01a.trans_qty*ivt01a.unit_cost))
        if all$="Y" then OutVect!.addItem(str(balance)) else OutVect!.addItem("")

        ser_lot_no$=""
        if cvs(desc$[1],2)="" then continue
        wkx=fnblank(3)
        OutVect!.addItem(cvs(desc$[1],2))
        wkx=fnblank(columns-4)
        recs=recs+1

		if bad_rec$="Y"
			OutVect!.addItem("")
			OutVect!.addItem(missing_master$)
			wkx=fnblank(columns-2)
		endif
    rem --- Loop back for next record

    wend

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub item_break
    goto std_exit

wh_break: rem --- Warehouse Break

    gosub item_break
    t0$=whse$
    ivm10c.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x0$=ivm10c.short_name$
    x$=Translate!.getTranslation("AON_WAREHOUSE_")+t0$+" "+cvs(x0$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)

    return

item_break: rem --- Item Break

    if t1$<>"" then gosub print_totals
    if done then return
    subhead$=ivt01a.item_id$
    t1$=ivt01a.item_id$
    ser_lot_no$=ivt01a.lotser_no$
    t2$=ivt01a.lotser_no$

    return

print_totals: rem --- Print Totals

    if t1$="" then return
    if len(item_tot$)=0 then return
    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns)))

    for x=1 to len(item_tot$) step 4
        xwk=fnblank(3)
        OutVect!.addItem("   "+item_tot$(x,4)+Translate!.getTranslation("AON__TOTAL"))
        OutVect!.addItem(str(item_qty[(x+3)/4]))
        OutVect!.addItem("")
        OutVect!.addItem(str(item_ext[(x+3)/4]))
        OutVect!.addItem("")
        net_qty=net_qty+item_qty[(x+3)/4]
        net_ext=net_ext+item_ext[(x+3)/4]
    next x

    if all$<>"Y"
    	wkx=fnblank(columns)
    	goto end_totals
    endif
    xwk=fnblank(3)
    OutVect!.addItem(Translate!.getTranslation("AON____NET_CHANGE"))
    OutVect!.addItem(str(net_qty))
    OutVect!.addItem("")
    OutVect!.addItem(str(net_ext))
    OutVect!.addItem("")
    wkx=fnblank(columns)
end_totals:    
    dim item_qty[9],item_ext[9]
    item_tot$=""
    net_qty=0
    net_ext=0

    return

get_bb: rem --- Determine starting beginning balance

    if item_type$<>"" then return
    balance=0

    read (ivt01_dev2,key=firm_id$+whse$+item$+ivt01a.lotser_no$+beg_date$,dom=*next)
    let ivt01alt$=key(ivt01_dev,end=*return)
    first=1
    flag=0

rem --- Read backwards thru file until BB record is found

    while more
        if first=0 then ivt01alt$=keyp(ivt01_dev2,end=*break)
        if ivt01alt.firm_id$+ivt01alt.warehouse_id$+ivt01alt.item_id$+ivt01alt.lotser_no$ <> firm_id$+whse$+item$+ivt01a.lotser_no$ then break
        first=0
        extract record (ivt01_dev2,key=ivt01alt$) ivt01b$

        if ivt01b.trans_source$ = "BB" then 
            balance=ivt01b.trans_qty
            flag=1
            break
        endif
    wend

    if flag=0 then return

rem --- Read forward until first record for BEGDATE$

    while more
        ivt01alt$=key(ivt01_dev2,end=*break)
        if ivt01alt.firm_id$+ivt01alt.warehouse_id$+ivt01alt.item_id$+ivt01alt.lotser_no$ <> firm_id$+whse$+item$+ivt01a.lotser_no$ then break
        if ivt01alt.trans_date$>=beg_date$ then break
        read record (ivt01_dev2,key=ivt01alt$) ivt01b$
        balance=balance+ivt01b.trans_qty
    wend

    return

open_tables: rem --- Open tables

    call sypdir$+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        status=912
        goto std_exit
    endif

    return

disp_message: rem --- Display a message

    call sypdir$+"bac_message.bbj",
:       msg_id$,
:       msg_tokens$[all],
:       msg_opt$,
:       rd_table_chans$[all]

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem --- Create blank line in OutVect! (no return value wanted or needed)

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,ignore_status
    if status <> 999 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
