rem ivr - Inventory Lot/Serial Transaction History Listing (Report Overlay)
rem Program ivr_lottranhist.aon v8.0.0 26Oct2006 (ivr_7b)
rem Created from ivr_transhist, incorporating ivr_7a/7b. 11/2006.CAH
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 12:56:00)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$
    sys_date$=sysinfo.system_date$

rem --- Open files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="aps_params",ids$[1]="APS_PARAMS"
    files$[2]="ars_params",ids$[2]="ARS_PARAMS"
    files$[3]="gls_params",ids$[3]="GLS_PARAMS"
    files$[4]="ivs_params",ids$[4]="IVS_PARAMS"
    files$[5]="arm-01",ids$[5]="ARM_CUSTMAST"
    files$[6]="glm-01",ids$[6]="GLM_ACCT"
    files$[7]="ivm-01",ids$[7]="IVM_ITEMMAST"
    files$[8]="ivm-07",ids$[8]="IVM_LSMASTER"
    files$[9]="ivc_prodcode",ids$[9]="IVC_PRODCODE"
    files$[10]="ivc_trancode",ids$[10]="IVC_TRANCODE"
    files$[11]="ivc_whsecode",ids$[11]="IVC_WHSECODE"
    files$[12]="ivt-01",ids$[12]="IVT_LSTRANS"
    files$[13]="ivt-01",ids$[13]="IVT_LSTRANS"
    
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    aps01a_dev=channels[1]
    ars01a_dev=channels[2]
    gls01a_dev=channels[3]
    ivs01a_dev=channels[4]
    arm01_dev=channels[5]
    glm01_dev=channels[6]
    ivm01_dev=channels[7]
    ivm07_dev=channels[8]
    ivm10a_dev=channels[9]
    ivm10b_dev=channels[10]
    ivm10c_dev=channels[11]
    ivt01_dev=channels[12]
    ivt01_dev2=channels[13]  

rem --- Dimension string templates

    dim aps01a$:templates$[1],ars01a$:templates$[2],gls01a$:templates$[3],
:       ivs01a$:templates$[4],arm01a$:templates$[5],glm01a$:templates$[6],
:       ivm01a$:templates$[7],ivm07a$:templates$[8],ivm10a$:templates$[9],
:       ivm10b$:templates$[10],ivm10c$:templates$[11],ivt01a$:templates$[12],
:       ivt01b$:templates$[13]
   

rem --- Assign form input values to local variables

    dim ttypes$[9]
    beg_date$=option!.getOptionData("pick_date_1")
    end_date$=option!.getOptionData("pick_date_2")
    beg_whse$=option!.getOptionData("warehouse_id_1")
    end_whse$=option!.getOptionData("warehouse_id_2")
    beg_prod$=option!.getOptionData("product_type_1")
    end_prod$=option!.getOptionData("product_type_2")
    beg_item$=option!.getOptionData("item_id_1")
    end_item$=option!.getOptionData("item_id_2")
    item_type$=option!.getOptionData("item_type")
    ocb$=option!.getOptionData("op_cl_both")
    totals$=option!.getOptionData("pick_check")
    ttypes$[0]=option!.getOptionData("tran_hst_all")
    ttypes$[1]=option!.getOptionData("tran_hst_po")
    ttypes$[2]=option!.getOptionData("tran_hst_op")
    ttypes$[3]=option!.getOptionData("tran_hst_it")
    ttypes$[4]=option!.getOptionData("tran_hst_ph")
    ttypes$[5]=option!.getOptionData("tran_hst_ti")
    ttypes$[6]=option!.getOptionData("tran_hst_to")
    ttypes$[7]=option!.getOptionData("tran_hst_wi")
    ttypes$[8]=option!.getOptionData("tran_hst_wo")
    ttypes$[9]=option!.getOptionData("tran_hst_bm")

rem --- Retrieve key template

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_LSMASTER","PRIMARY",ivm07_key_tpl$,table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVT_LSTRANS","PRIMARY",ivt01_key_tpl$,table_chans$[all],status$
    dim ivm07a_key$:ivm07_key_tpl$,ivt01a_key$:ivt01_key_tpl$,ivt01alt$:ivt01_key_tpl$

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- check application settings

    call pgmdir$+"adc_application.aon","IV",info$[all]
    gl$=info$[9];rem --- post to GL?
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]; rem --- AR installed?
    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]; rem --- AP installed?

rem --- Initializations

    dim p[7]
    P[0]=num(ivs01a.item_id_len$)
    P[1]=num(ivs01a.vendor_prd_len$)
    p[2]=num(ivs01a.precision$)
    p[3]=num(ivs01a.ls_no_len$)
    p[5]=num(ivs01a.desc_len_01$)
    p[6]=num(ivs01a.desc_len_02$)
    p[7]=num(ivs01a.desc_len_03$)

    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","P",imask$,m4$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,10,12
    call pgmdir$+"adc_sizemask.aon",m4$,m4,6,12

    if ar$="Y" then
        find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
        x8=num(ars01a.customer_size$)
        x9$=ars01a.customer_output$, x9=len(x9$)
    endif

rem --- Check for vendor masterfile

    if ap$<>"N" then
        find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
        files$[14]="apm-01",ids$[14]="APM_VENDMAST"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
	if status goto std_exit
	apm01_dev=channels[14]
	dim apm01a$:templates$[14]
        x6=num(aps01a.vendor_size$)
        x7$=aps01a.vendor_output$,x7=len(x7$)
    endif

    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g2$=gls01a.max_acct_len$
    g5$=gls01a.acct_output$

    all_ttypes$="POOPITPHTITOWIWOBM"
    if ttypes$[0]="Y" then 
        ttype$=all_ttypes$
    else
        for x=1 to 9
            if ttypes$[x] = "Y" ttype$=ttype$+all_ttypes$((x-1)*2+1,2)
        next x
    endif

    h0=60
    h1=115
    h=0
    if ttype$=all_ttypes$ then all$="Y" else all$="N"
    more=1
    precision p[2]
    headings=7
    when$=sys_date$
    clock$=""
    h9$=""
    dim headings$[headings]
    dim item_qty[9],item_ext[9]
    dim ivchannels[6],params[6],masks$[3]
    headings$[0]=firm_name$
    headings$[1]=task_desc$
    width=132
    page=0
    done=0
    ivchannels[0]=ivm01_dev
    ivchannels[1]=ivm10a_dev
    ivchannels[2]=arm01_dev
    ivchannels[3]=apm01_dev
    ivchannels[4]=glm01_dev
    ivchannels[5]=ivm10b_dev
    ivchannels[6]=ivm10c_dev
    params[0]=p[0]
    params[1]=x8
    params[2]=x6
    params[3]=num(g2$)
    params[4]=p[5]
    params[5]=p[6]
    params[6]=p[7]
    masks$[0]=firm_id$
    masks$[1]=x9$
    masks$[2]=x7$
    masks$[3]=g5$


rem --- Headings

    dim h1$(width),h2$(width)
    
    if ocb$="O" x0$="Open" else if ocb$="C" x0$="Closed" else x0$="All"
    if beg_date$<>"" x1$=fndate$(beg_date$) else x1$="First Date"
    if end_date$<>"" x2$=fndate$(end_date$) else x2$="Last Date"
    headings$[2]=x0$+" Lot/Serial Numbers From "+x1$+" Through "+x2$
    if all$="Y" then
        headings$[3]="For All Transaction Types"
    else
        headings$[3]="For Transaction Types "
        for x=0 to len(ttype$)-1 step 2
            headings$[3]=headings$[3]+ttype$(x+1,2)+" "
        next x
        headings$[3]=cvs(headings$[3],2)
    endif

    if begitem$="" then headings$[4]="From Item: First" else headings$[4]="From Item: "+begitem$
    if enditem$="" then headings$[4]=headings$[4]+" -- To Item: Last" else headings$[4]=headings$[4]+" -- To Item: "+enditem$
    if begprod$="" then headings$[5]="From Product: First" else headings$[5]="From Product: "+begprod$                
    if endprod$="" then headings$[5]=headings$[5]+" -- To Product: Last" else headings$[5]=headings$[5]+" -- To Product: "+endprod$
    if type$="" then headings$[6]="All Item Types" else headings$[6]="Item Type "+type$
    headings$[7]="[HEADER]"

rem --- column headings

    dim columns$[7,10]
    columns=8
    columns$[0,0]="Item^Lot/Serial #",      columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]="Date",                   columns$[1,1]="C", columns$[1,2]="8"
    columns$[2,0]="Type",                   columns$[2,1]="C", columns$[2,2]="5"
    columns$[3,0]="Reference Information",  columns$[3,1]="C",columns$[3,2]="35"
    columns$[4,0]="Quantity",               columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$,columns$[4,10]="T"
    columns$[5,0]="Unit Cost",              columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m3$
    columns$[6,0]="Extension",              columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    columns$[7,0]="Balance",                columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$


    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",3+p[0],ivt01_dev,1,0,ignore_status

rem --- Position files

    read (ivt01_dev,key=firm_id$+beg_whse$,dom=*next)

rem --- Get next record

    while more

        ivt01a_key$=key(ivt01_dev,end=*break)
        if firm_id$<>ivt01a_key.firm_id$ then break
        tran_date$=ivt01a_key.trans_date$
        whse$=ivt01a_key.warehouse_id$
        item$=ivt01a_key.item_id$
        read (ivt01_dev)

rem --- Valid Warehouse/Item?

        if end_whse$<>"" and whse$>end_whse$ then break
        if beg_item$<>"" and item$<beg_item$ then
            read (ivt01_dev,key=firm_id$+whse$+beg_item$,dom=*continue)
        endif
        if end_item$<>"" and item$>end_item$ then
            read (ivt01_dev,key=firm_id$+whse$+$FF$,dom=*continue)
        endif
        if beg_date$<>"" and tran_date$<beg_date$ then
            read (ivt01_dev,key=firm_id$+whse$+item$+ivt01a_key.lotser_no$+beg_date$,dom=*continue)
        endif
        if end_date$<>"" and tran_date$>end_date$ then
            read (ivt01_dev,key=firm_id$+whse$+item$+ivt01a_key.lotser_no$+$FF$,dom=*continue)
        endif
        find record (ivm01_dev,key=firm_id$+item$,dom=*continue) ivm01a$
        if item_type$<>"" and ivm01a.item_type$<>item_type$ then continue
        if beg_prod$<>"" and ivm01a.product_type$<beg_prod$ then continue
        if end_prod$<>"" and ivm01a.product_type$>end_prod$ then continue

rem --- Open or Closed Lots?

        if ocb$<>"B" then
            ivm07a.qty_on_hand=0
            find record (ivm07_dev,key=firm_id$+whse$+item$+ivt01a_key.lotser_no$,dom=*next) ivm07a$
            if ocb$="O" and ivm07a.qty_on_hand=0 then continue
            if ocb$="C" and ivm07a.qty_on_hand<>0 then continue
        endif

rem --- Valid Product/Type/Date?

        read record (ivt01_dev) ivt01a$
        if all$<>"Y" if pos(ivt01a.trans_source$=ttype$,2)=0 then continue
        if ivt01a.trans_source$="BB" then continue

rem --- Level breaks?

        if all$="Y" and totals$="Y" and item$<>t1$ gosub get_bb

        call pgmdir$+"adc_progress.aon","S","","","",whse$+" "+item$,0,0,1,0,ignore_status

        if whse$<>t0$ gosub wh_break
        if item$<>t1$ gosub item_break
        if all$="Y" and totals$="N" and ivt01a_key.lotser_no$<>t2$ gosub get_bb
        if ivt01a.lotser_no$<>t2$ then
            if totals$="N" gosub print_totals
            ser_lot_no$=ivt01a.lotser_no$
            t2$=ivt01a.lotser_no$
        endif

        balance=balance+ivt01a.trans_qty
        
rem -- Product heading

        if subhead$<>"" then 
            xwk=fnblank(columns)
            OutVect!.addItem(cvs(ivt01a.item_id$,3)+" "+cvs(ivm01a.item_desc$,3))
            xwk=fnblank(2)
            OutVect!.addItem("Product type: "+ivm01a.product_type$)
            wkx=fnblank(columns-4)
            subhead$=""
        endif

rem --- Get Reference Block

        dim desc$[2]
        call pgmdir$+"ivc_transdata.aon",ivt01a$,ivchannels[all],params[all],masks$[all],type$,desc$[all]

rem --- Build Totals Array

        if ivt01a.trans_source$<>"BB" and ivt01a.trans_source$<>"  " 
            while more
                x=pos(type$=item_tot$,4)
                if x=0 item_tot$=item_tot$+type$; continue
                break
            wend
            x=(x+3)/4
            item_qty[x]=item_qty[x]+ivt01a.trans_qty
            item_ext[x]=item_ext[x]+ivt01a.trans_qty*ivt01a.unit_cost
        endif

rem --- Print detail line

        OutVect!.addItem("   "+ser_lot_no$)
        OutVect!.addItem(fndate$(ivt01a.trans_date$))
        OutVect!.addItem(type$)
        OutVect!.addItem(desc$[0])
        OutVect!.addItem(str(ivt01a.trans_qty))
        OutVect!.addItem(str(ivt01a.unit_cost))
        OutVect!.addItem(str(ivt01a.trans_qty*ivt01a.unit_cost))
        if all$="Y" then OutVect!.addItem(str(balance)) else OutVect!.addItem("")

        ser_lot_no$=""
        if cvs(desc$[1],2)="" then continue
        wkx=fnblank(3)
        OutVect!.addItem(cvs(desc$[1],2))
        wkx=fnblank(columns-4)

rem --- Loop back for next record

    wend

done: rem --- All done

    done=1
    gosub item_break
    goto std_exit


wh_break: rem --- Warehouse Break
    
    gosub item_break
    t0$=whse$
    ivm10c.short_name$="(Not on File)"
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x0$=ivm10c.short_name$
    x$="Warehouse "+t0$+" "+cvs(x0$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)
    return
    
item_break: rem --- Item Break

    if t1$<>"" then gosub print_totals
    if done then return
    subhead$=ivt01a.item_id$
    t1$=ivt01a.item_id$
    ser_lot_no$=ivt01a.lotser_no$
    t2$=ivt01a.lotser_no$
    return
    
print_totals: rem --- Print Totals
    
    if t1$="" then return
    if len(item_tot$)=0 then return
    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns)))
    for x=1 to len(item_tot$) step 4
        xwk=fnblank(3)
        OutVect!.addItem("   "+item_tot$(x,4)+" Total")
        OutVect!.addItem(str(item_qty[(x+3)/4]))
        OutVect!.addItem("")
        OutVect!.addItem(str(item_ext[(x+3)/4]))
        OutVect!.addItem("")
        net_qty=net_qty+item_qty[(x+3)/4]
        net_ext=net_ext+item_ext[(x+3)/4]
    next x
    if all$<>"Y" then wkx=fnblank(columns);return
    xwk=fnblank(3)
    OutVect!.addItem("   Net Change")
    OutVect!.addItem(str(net_qty))
    OutVect!.addItem("")
    OutVect!.addItem(str(net_ext))
    OutVect!.addItem("")
    wkx=fnblank(columns)
    dim item_qty[9],item_ext[9]
    item_tot$=""
    net_qty=0
    net_ext=0
    return
    
get_bb: rem --- Determine starting beginning balance

    if item_type$<>"" then return
    balance=0
 
    read (ivt01_dev2,key=firm_id$+whse$+item$+ivt01a.lotser_no$+beg_date$,dom=*next)
    let ivt01alt$=key(ivt01_dev,end=*return)
    first=1
    flag=0

rem --- Read backwards thru file until BB record is found

     while more
     if first=0 then ivt01alt$=keyp(ivt01_dev2,end=*break)
        if ivt01alt.firm_id$+ivt01alt.warehouse_id$+ivt01alt.item_id$+ivt01alt.lotser_no$<>firm_id$+whse$+item$+ivt01a.lotser_no$ then break
         first=0
         extract record (ivt01_dev2,key=ivt01alt$) ivt01b$
         if ivt01b.trans_source$<>"BB" then continue
         balance=ivt01b.trans_qty
         flag=1
         break
    wend
    if flag=0 then return

rem --- Read forward until first record for BEGDATE$

     while more
        let ivt01alt$=key(ivt01_dev2,end=*break)
        if ivt01alt.firm_id$+ivt01alt.warehouse_id$+ivt01alt.item_id$+ivt01alt.lotser_no$<>firm_id$+whse$+item$+ivt01a.lotser_no$ then break
        if ivt01alt.trans_date$>=beg_date$ then break
         read record (ivt01_dev2,key=ivt01alt$) ivt01b$
         let balance=balance+ivt01b.trans_qty
    wend

    return
    
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$)=cvs(q$,32)
rem --- old format w/ params: def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- Find length of field
    def fnfldlen(q$,q1$)
        dim q2$:q$
        wkq$=fattr(q2$,q1$)
        wkq=dec(wkq$(10,2))
        return wkq
    fnend

rem --- Create blank line in OutVect! (no return value wanted or needed)
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src
    
        end
