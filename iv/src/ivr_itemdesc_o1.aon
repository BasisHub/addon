rem ivr - Inventory Description Listing
rem Program ivr_itemdesc_o1.aon v8.0.0 01Apr2006 (ivr_tb)
rem Created by adx_progconv.bbx v1.0.0 (04/01/2006 08:55:19)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

        seterr std_error
        setesc std_error

rem --- Get program path

       pgmdir$=fnglobal$("+DIR_PGM","")

rem --- Document initializations
                
        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Initialize HEADINGS$

        dim headings$[headings+1]
        headings$[0]=cvs(sysinfo.firm_name$,2)
        headings$[1]=cvs(sysinfo.task_desc$,2)
        
        if begitem$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+begitem$
        if enditem$="" headings$[3]=headings$[3]+" -- To Item: Last" else headings$[3]=headings$[3]+" -- To Item: "+enditem$
        if begprod$="" headings$[4]="From Product: First" else headings$[4]="From Product: "+begprod$                
        if endprod$="" headings$[4]=headings$[4]+" -- To Product: Last" else headings$[4]=headings$[4]+" -- To Product: "+endprod$
        if type$=""    headings$[5]="All Item Types" else headings$[5]="Item Type: "+type$

rem ----Column Heading

        dim columns$[3,10]
        columns$[0,0]="Item",              columns$[0,1]="C",columns$[0,2]="15"
        columns$[1,0]=segment1$,           columns$[1,1]="C",columns$[1,2]=str(p[3])
        columns$[2,0]=segment2$,           columns$[2,1]="C",columns$[2,2]=str(p[4])
        columns$[3,0]=segment3$,           columns$[3,1]="C",columns$[2,2]=str(p[5])
        if p[4]=0 columns$[2,0]=""
        if p[5]=0 columns$[3,0]=""

rem --- Position files


        call pgmdir$+"adc_progress.aon","NC",sysinfo.task_desc$,"","Printing","",p[0],ivm01_dev,1,0,ignore_status
        read (ivm01_dev,key=firm_id$+begitem$,dir=0,dom=*next)ivm01a$

        while more
            ivm01a_key$=key(ivm01_dev,end=*break)
            if pos(firm_id$=ivm01a_key$)<>1 then break
            if enditem$<>"" and ivm01a_key.item_id$>enditem$ then break
            read record (ivm01_dev)ivm01a$

rem --- Update progress meter and perform range checks

            call pgmdir$+"adc_progress.aon","S","","","",ivm01a.item_id$(1,p[0]),0,0,1,0,ignore_status
            if begprod$<>"" if ivm01a.product_type$<begprod$ continue
            if endprod$<>"" if ivm01a.product_type$>endprod$ continue
            if type$<>"" if ivm01a.item_class$<>type$ continue

rem --- Print detail line

             OutVect!.addItem(ivm01a.item_id$(1,p[0]))
             OutVect!.addItem(ivm01a.item_desc$(1,p[3]))
             if p[4] OutVect!.addItem(ivm01a.item_desc$(p[3]+1,p[4])) else OutVect!.addItem("")
             if p[5] OutVect!.addItem(ivm01a.item_desc$(p[3]+p[4]+1,p[5])) else OutVect!.addItem("")
             number=number+1

rem --- Loop back for next record

        wend

done: rem --- All done

        xwk=fnblank(5)
        OutVect!.addItem(str(number)+" Items Listed")
        xwk=fnblank(2)
        goto std_exit

rem --- Functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=globalstr_exit)
        globalstr_exit:
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
