rem --- Item Maintenance (Copy Item)
rem --- Program ivm_copyitem.aon v8.0.0 13Jan2008 (ivm_mr)
rem --- Created by adx_codeport.bbx v1.1.5 (01/13/2008 11:39:25)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    rem precision 9

rem --- Use Statements

	use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
    files$[4]="ivm-05",ids$[4]="IVM_ITEMVEND"
    files$[5]="ivm-09",ids$[5]="IVM_ITEMCMTS"
    files$[6]="ivm-14",ids$[6]="IVM_ITEMSYN"
    files$[7]="ivm-02",ids$[7]="IVM_ITEMWHSE"
    files$[8]="ivm-05",ids$[8]="IVM_ITEMVEND"
    files$[9]="ivm-09",ids$[9]="IVM_ITEMCMTS"
    files$[10]="ivm-14",ids$[10]="IVM_ITEMSYN"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivs01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm05_dev=channels[4]
    ivm09_dev=channels[5]
    ivm14_dev=channels[6]
    ivm02_dev2=channels[7]
    ivm05_dev2=channels[8]
    ivm09_dev2=channels[9]
    ivm14_dev2=channels[10]

rem --- Dimension string templates

    dim ivs01a$:templates$[1],ivm01a$:templates$[2],ivm02a$:templates$[3],
:       ivm05a$:templates$[4],ivm09a$:templates$[5],ivm14a$:templates$[6]

rem --- Assign form input values to local variables

	declare Option option!

    olditem$=option!.getOptionData("OLD_ITEM")
    newitem$=option!.getOptionData("NEW_ITEM_ID")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Get data to copy from

    read record (ivm01_dev,key=firm_id$+olditem$,dom=std_exit) ivm01a$

rem --- Copy ivm-01

    ivm01a.maximum_qty=0
    ivm01a.order_point=0
    ivm01a.safety_stock=0
    ivm01a.eoq=0
    ivm01a.item_id$=newitem$
    ivm01a.lstrec_date$=""
    ivm01a.lstblt_date$=""
    ivm01a.lstsal_date$=""
    ivm01a.lstiss_date$=""
    ivm01a.lstadj_date$=""
    ivm01a.lstxin_date$=""
    ivm01a.lstxot_date$=""
    ivm01a.lstret_date$=""
    ivm01a.upc_code$=""
    if olditem$=ivm01a.bar_code$ then ivm01a.bar_code$=newitem$ else ivm01a.bar_code$=""
    ivm01a$=field(ivm01a$)
    write record (ivm01_dev) ivm01a$

rem --- Copy ivm-02

    read record (ivm02_dev,key=firm_id$+olditem$, knum=2, dom=*next)

    while 1
        read record (ivm02_dev, end=*break) ivm02a$
        if pos(firm_id$+olditem$=ivm02a.firm_id$+ivm02a.item_id$)<>1 then break
        ivm02a.item_id$=newitem$
        ivm02a.location$=""
        ivm02a.select_phys$="N"
        ivm02a.lstphy_date$=""
        ivm02a.lstrec_date$=""
        ivm02a.lstblt_date$=""
        ivm02a.lstsal_date$=""
        ivm02a.lstiss_date$=""
        ivm02a.lstadj_date$=""
        ivm02a.lstxin_date$=""
        ivm02a.lstxot_date$=""
        ivm02a.lstret_date$=""
        ivm02a.qty_on_hand=0
        ivm02a.qty_on_order=0
        ivm02a.qty_commit=0
        ivm02a.eoq=0
        ivm02a.physical_cnt=0
        ivm02a.last_po_cost=0
        ivm02a$=field(ivm02a$)
        write record (ivm02_dev2) ivm02a$
    wend

rem --- Copy ivm-05 (Vendors)

    read record (ivm05_dev, key=firm_id$+old_item$, knum=1, dom=*next)

    while 1
        read record (ivm05_dev,end=*break) ivm05a$
        if pos(firm_id$+olditem$=ivm05a.firm_id$+ivm05a.item_id$)<>1 then break
        ivm05a.item_id$=newitem$
        ivm05a.last_po_date$=""
        ivm05a.vendor_item$=""
        ivm05a.last_po_cost=0
        ivm05a.last_po_lead=0
        ivm05a$=field(ivm05a$)
        write record (ivm05_dev2) ivm05a$
    wend

rem --- Copy ivm-09 (Comments)

    read (ivm09_dev, key=firm_id$+olditem$, dom=*next)

    while 1
        read record (ivm09_dev, end=*break) ivm09a$
        if pos(firm_id$+olditem$=ivm09a.firm_id$+ivm09a.item_id$)<>1 then break
        ivm09a.item_id$=newitem$
        ivm09a$=field(ivm09a$)
        write record (ivm09_dev2) ivm09a$
    wend

rem --- Copy ivm-14 (Synonyms)

    read (ivm14_dev, key=firm_id$+olditem$, knum=1, dom=*next)

    while 1
        read record (ivm14_dev, end=*break) ivm14a$
        if pos(firm_id$+olditem$=ivm14a.firm_id$+ivm14a.item_id$)<>1 then break
        ivm14a.item_id$=newitem$
        ivm14a$=field(ivm14a$)
        write record (ivm14_dev2) ivm14a$
    wend

rem --- Finished

    goto std_exit

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    if status <> 999 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
	
rem #endinclude std_end.src

    end
