rem --- Inventory Transfer Register
rem --- Program ivr_transferreg.aon v8.0.0 09Jul2007 (ivr_ga)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:40:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM")

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL")
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$
	
rem --- Run Report?

    msg_id$="AON_RUN_QUERY"
    dim msg_tokens$[1]
    msg_tokens$[1]=sysinfo.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit
	
rem --- Open/Lock files

    files=30,begfile=6,endfile=14
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[6]="ive-02",        ids$[6]="IVE_TRANSFER"
    files$[7]="ivm-01",        ids$[7]="IVM_ITEMMAST"
    files$[8]="ivm-02",        ids$[8]="IVM_ITEMWHSE"
    files$[10]="ivc_whsecode", ids$[10]="IVC_WHSECODE"
    files$[12]="ars_params",   ids$[12]="ARS_PARAMS"
    files$[13]="gls_params",   ids$[13]="GLS_PARAMS"
    files$[14]="ivs_params",   ids$[14]="IVS_PARAMS"
	
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status then goto std_exit
	
    ive02_dev  = channels[6]
    ivm01_dev  = channels[7]
    ivm02_dev  = channels[8]
    ivm10c_dev = channels[10]
    ars01a_dev = channels[12]
    gls01a_dev = channels[13]
    ivs01a_dev = channels[14]

rem --- Dimension string templates

    dim ive02a$:templates$[6]
	dim ivm01a$:templates$[7]
	dim ivm02a$:templates$[8]
	dim ivm10c$:templates$[10]
	dim ars01a$:templates$[12]
	dim gls01a$:templates$[13]
	dim ivs01a$:templates$[14]

rem --- Parameters

    dim p[5],info$[20]
    n2$="IV"
    source$=pgm(-2)
    when$=sysinfo.system_date$
	
	find record (ivs01a_dev,key=firm_id$+"IV00",err=std_missing_params) ivs01a$
	
    p[0]=ivs01a.item_id_len
    p[1]=ivs01a.ls_no_len
    p[2]=num(ivs01a.precision$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
	
    lf$="N"
    ls$="N"
    if pos(ivs01a.lifofifo$="LF")    then lf$="Y"
    if pos(ivs01a.lotser_flag$="LS") then ls$="Y"
	
	ar$="N"
    dist_gl_by_item$="N"
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    if ar$="Y" then
        find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
        dist_gl_by_item$=ars01a.dist_by_item$
        places=num(ivs01a.precision$)
    endif

    gl$="N"
    status=0
    if dist_gl_by_item$="Y" then call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status then goto std_exit
	
	if gl$="Y" then 
		find record (gls01a_dev,key=firm_id$+"GL00",err=std_missing_params) gls01a$
	endif
	
rem --- Document initializations

	declare BBjVector OutVect!
	declare BBjVector HdrVect!
	declare BBjVector BrkVect!
	declare BBjVector TotVect!

	OutVect!=bbjAPI().getSysGui().makeVector()
	HdrVect!=bbjAPI().getSysGui().makeVector()
	BrkVect!=bbjAPI().getSysGui().makeVector()
	TotVect!=bbjAPI().getSysGui().makeVector()
	
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)
		
rem --- Other initializations

    precision num(ivs01a.precision$)
	
    dim o[4]
	
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
	
    if ls$ = "Y" then p8$=" and Lot/Serial Number" else p8$ = ""
	
    width=132
    units=0
    prev_whse$=""
    prev_trans_date$=""
    last_time$="N"
	
    o[4]=width-9
    o[3]=o[4]-m1-1
    o[2]=o[3]-m2
    o[1]=o[2]-m3
    o[0]=o[1]-3
	
    errors=0
    glstatus=0
	more=1

rem --- Column headings

	columns=7
	dim columns$[columns,10]
	col_2$ = "Item Number" + p8$ + "^Item Description"
	
	columns$[0,0]="To",         columns$[0,1]="C", columns$[0,2]="2"
	columns$[1,0]="Warehouse",  columns$[1,1]="C", columns$[1,2]="24"
	columns$[2,0]=col_2$,       columns$[2,1]="C", columns$[2,2]=str( p[0]+p[1]+1 )
	columns$[3,0]="UM",         columns$[3,1]="C", columns$[3,2]="2"
	columns$[4,0]="Cost",       columns$[4,1]="N", columns$[4,2]=str(m3), columns$[4,3]=m3$
	columns$[5,0]="Quantity",   columns$[5,1]="N", columns$[5,2]=str(m2), columns$[4,3]=m2$
	columns$[6,0]="Total Cost", columns$[6,1]="N", columns$[6,2]=str(m1), columns$[6,3]=m1$, columns$[5,10]="T"	
	columns$[7,0]="Reference",  columns$[7,1]="C", columns$[7,2]="9"

rem --- Report headings

    headings=3
	dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$	
	headings$[headings]="[HEADER]"

rem --- Additional File Opens
	
    if lf$="Y" then 
		files$[20]="ivm-04", ids$[20]="IVM_ITEMTIER"
		files$[21]="ivw-04", ids$[21]="IVW_LFDET", options$[21]="CL"
	endif
	
    if gl$="Y" then
		files$[22]="glm-01", ids$[22]="GLM_ACCT"
		files$[23]=glw11$,   ids$[23]="GLW_DAILYDETAIL", options$[23]="CL"
	endif
	
    if gl$="Y" and dist_gl_by_item$="Y" then 
		files$[24]="arc_distcode", ids$[24]="ARC_DISTCODE"
	endif
	
	begfile=20, endfile=24
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status	
    if status then goto std_exit
	
    ivm04_dev  = channels[20]
    ivw04_dev  = channels[21]
    glm01_dev  = channels[22]
    glw11_dev  = channels[23]
    arm10d_dev = channels[24]
	
	if gl$="Y" and dist_gl_by_item$="Y" then 
		dim arm10d$:templates$[24]
	endif
	
rem --- Lifo/fifo setup
	
	dim lf_chans[10]
	dim lf_tmpls$[10]
	dim lf_item$[10]

	lf_chans[1]=ivm02_dev
    lf_chans[2]=ivm04_dev
    lf_chans[3]=ivw04_dev
	
    lf_tmpls$[1]=templates$[8];  rem ivm-02
	lf_tmpls$[2]=templates$[20]; rem ivm-04
	lf_tmpls$[3]=templates$[21]; rem ivw-04

rem --- Progress meter

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",p[0]+3,0,1,meter_num,ignore_status

rem --- Initial Read

    read (ive02_dev,key=firm_id$,dom=*next)
	
rem --- Heading Read

    while more
        read record (ive02_dev,end=*break) ive02a$
		if firm_id$ <> ive02a.firm_id$ then break
        cost=ive02a.unit_cost

rem --- Breaks
        
        if ive02a.warehouse_id$<>prev_whse$ then gosub whse_id
        if ive02a.trans_date$<>prev_trans_date$ then gosub trans_date
        call pgmdir$+"adc_progress.aon","S","","","",ive02a.warehouse_id$+" "+ive02a.item_id$,0,0,1,meter_num,ignore_status
        gosub get_item_data

rem --- LIFO/FIFO?

        if lf$="Y" then
		
            lf_item$[1] = ive02a.warehouse_id$
            lf_item$[2] = ive02a.item_id$
            lf_date$    = ive02a.trans_date$
            action$     = ivs01a.lifofifo$ + "I"
            quantity    = ive02a.trans_qty
            cost        = ive02a.unit_cost
            ret_cost    = 0
            type$       = "R"
			
            call pgmdir$+"ivc_lifofifo.aon",action$,type$,lf_date$,lf_chans[all],lf_tmpls$[all],lf_item$[all],places,quantity,cost,ret_cost,ignore_status

rem --- Cost change?

            if ret_cost and ive02a.ext_cost <> ive02a.trans_qty * ret_cost then
				ive02a.ext_cost = ive02a.trans_qty * ret_cost
				ive02a.unit_cost = ret_cost
				cost = ret_cost
				
				ive02a$ = field(ive02a$)
                write record (ive02_dev) ive02a$
            endif

        endif
		
rem --- Detail line

        tot_cost=round(ive02a.ext_cost, 2)
        OutVect!.addItem(ive02a.warehouse_id$)
		OutVect!.addItem(ivm10c.short_name$)
		OutVect!.addItem(ive02a.item_id$+" "+ive02a.lotser_no$)
		OutVect!.addItem(um$)
		OutVect!.addItem(str(cost))
		OutVect!.addItem(str(ive02a.trans_qty))
		OutVect!.addItem(str(tot_cost))
		OutVect!.addItem(ive02a.inv_xfer_no$)
		
		ignore = fnblank(2)
        OutVect!.addItem(item_desc$)
		ignore = fnblank(5)
		
        whse_total=whse_total+tot_cost
        date_total=date_total+tot_cost
		
rem --- Warn if date is outside the GL period
		
        if gl$="Y" then
			call pgmdir$+"glc_datecheck.aon",ive02a.trans_date$,"N",period$,year$,glstatus
			
			if glstatus then
				call pgmdir$+"glc_datewarn.aon",0,ive02a.trans_date$,glstatus,lines,errors,ignore_status
				
				if stbl("+DTWARN_MSG",err=*endif)<>""
					ignore = fnblank(2)
					OutVect!.addItem(stbl("+DTWARN_MSG"))
					ignore = fnblank(5)
				endif
			endif
		endif

rem --- Generate G/L Recap

        if gl$<>"Y" or dist_gl_by_item$<>"Y" then continue

rem --- From Warehouse

        gldate$=ive02a.trans_date$
        ref1$="Xfr "+ive02a.inv_xfer_no$
        memo$=ive02a.item_id$+" "+item_desc$
        ref2$="Fr Whse "+ive02a.warehouse_id$
        ref3$="To Whse "+ive02a.warehouse_id$
		
        find record (ivm02_dev,key=firm_id$+ive02a.warehouse_id$+ive02a.item_id$,dom=to_whse) ivm02a$
        find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=to_whse) arm10d$
		
        account$=arm10d.gl_inv_acct$
        amount=(ive02a.ext_cost-ive02a.trans_qty)*cost
        units=0
		
        gosub glrecap

to_whse: rem --- To Warehouse

        x$=ref2$
        ref2$=ref3$
        ref3$=x$
		
        find record (ivm02_dev,key=firm_id$+ive02a.warehouse_id_to$+ive02a.item_id$,dom=gl_recap_done) ivm02a$
        find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=gl_recap_done) arm10d$
		
        account$=arm10d.gl_inv_acct$
        amount=ive02a.trans_qty*cost
        units=0
		
        gosub glrecap
		
gl_recap_done:

    wend

rem --- End of register

	rem --- Last break
    last_time$="Y"
    gosub whse_id
	
	rem --- Destroy progress meter
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
	
	rem --- Don't update if there are errors in the register
	update$="ivu_transferreg.aon"

	if errors
    	gosub errors_in_register
    	if override$<>"Y" then update$=""
    endif

	rem --- Determine overlay 
    if gl$="Y" and dist_gl_by_item$="Y" then 
		overlay$=pgmdir$+"glr_recap_DO.aon"
	else
		overlay$=update$
	endif

	rem --- Print register via DocOut
	out_action$="PRT-PDF"
	next_overlay$=overlay$
	goto std_exit

whse_id: rem --- Warehouse

    if prev_whse$<>"" then
        if last_time$="N" then last_time$="A"
        gosub trans_date
        if last_time$="A" then last_time$="N"
		TotVect!.addItem(str(OutVect!.size()/(columns+1)))
		ignore = fnblank(2)
        OutVect!.addItem("Total For Warehouse " + prev_whse$ + " " + whse_desc$)
		ignore = fnblank(3)
		OutVect!.addItem(str(whse_total))
		ignore = fnblank(1)
        whse_total=0
    endif

    if last_time$="N" then 
	    prev_whse$=ive02a.warehouse_id$
		prev_trans_date$=ive02a.trans_date$
	    ivm10c.short_name$="Unknown Warehouse"
		date_total=0
	    find record (ivm10c_dev,key=firm_id$+"C"+prev_whse$,dom=*next) ivm10c$
		BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
		HdrVect!.addItem( "From Warehouse " + cvs(prev_whse$ + " " + ivm10c.short_name$, 2) )
	    whse_desc$=cvs(ivm10c.short_name$,2)
	endif
	
    return

trans_date: rem --- Date

    if prev_trans_date$<>"" then
		TotVect!.addItem(str(OutVect!.size()/(columns+1)))
		ignore = fnblank(2)
        OutVect!.addItem("Total For "+fndate$(prev_trans_date$))
		ignore = fnblank(3)
		OutVect!.addItem(str(date_total))
		ignore = fnblank(1)
    endif
	
    if last_time$="N" then
		date_total=0
		prev_trans_date$=ive02a.trans_date$
		BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
		HdrVect!.addItem("Transfer Date "+fndate$(prev_trans_date$))
	endif
	
    return

get_item_data: rem --- Get item data

    item_desc$="Unknown Item"
	um$=""
	ivm01a$=""
	ivm10c.short_name$="Unknown Warehouse"
    find record (ivm01_dev,key=firm_id$+ive02a.item_id$,dom=*next) ivm01a$
    find record (ivm10c_dev,key=firm_id$+"C"+ive02a.warehouse_id$,dom=*next) ivm10c$
	
	if ivm01a$<>"" then 
		item_desc$ = fnitem$(ivm01a.item_desc$, p[3], p[4], p[5])
		um$ = ivm01a.purchase_um$
	endif
	
    return

glrecap: rem --- Standard G/L Recap Routine

    if gl$="Y" then
        call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,unused,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,ignore_status
    endif
	
    return
	
errors_in_register: rem --- Display errors in register message

    msg_id$="AON_REG_ERRS"
	override$="N"
    gosub disp_message
    if pos("PASSVALID"=msg_opt$) then override$="Y"
    return
	
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
	
rem #include disp_message.src

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    rem run pgmdir$+"ads_process_end.aon",err=*next
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
