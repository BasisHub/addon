rem --- Item Detail Listing (Report Overlay)
rem --- Program ivr_itemdetail_o1.aon v8.0.0 16Jul2007 (ivr_rb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:02:25)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

            seterr std_error
            setesc std_error

rem --- Document initializations
            OutVect!=bbjAPI().getSysGui().makeVector()
            HdrVect!=bbjAPI().getSysGui().makeVector()
            BrkVect!=bbjAPI().getSysGui().makeVector()
            rep_date$=date(0:"%Mz/%Dz/%Yd")
            rep_date_stamp$=date(0:"%Yd%Mz%Dz")
            rep_time$=date(0:"%hz:%mz %p")
            rep_time_stamp$=date(0:"%Hz%mz%sz")


rem --- Report Initializations

            precision p[1]
            dim altsup$(79-(14+p[0]+1)),x0$(32),x1$(30),headings$[2]
            width=80
            page=0
            l9=59
            l=l9+1 
            headings=2
            product$=""
            class$=""
            headings$[0]=sysinfo.firm_name$
            headings$[1]=sysinfo.task_desc$
            when$=sysinfo.system_date$
            clock$=""
            o=width-max(m2,max(m3,m4))-3
            more=1
            headings$[2]="[HEADER]"

    
            call pgmdir$+"adc_progress.aon","N","","","","",0,ivm01_dev,1,meter_num,status

rem ---  column heading
    
            dim columns$[5,3]
            columns=5
            columns$[0,0]="           ",               columns$[0,1]="C",columns$[0,2]="30"
            columns$[1,0]="           ",               columns$[1,1]="C",columns$[1,2]="32"
            columns$[2,0]="           ",               columns$[2,1]="C",columns$[2,2]="26"
            columns$[3,0]="           ",               columns$[3,1]="C",columns$[3,2]="18"
            columns$[4,0]="           ",               columns$[4,1]="C",columns$[4,2]="18"
            columns$[5,0]="           ",               columns$[5,1]="C",columns$[5,2]="15"


rem --- Position files

            ivm01a_key$=firm_id$+begitem$
            read (ivm01_dev,key=ivm01a_key$,dom=Next_ivm01)
            goto range_checks
    
Next_ivm01: rem --- Next item

            ivm01a_key$=key(ivm01_dev,end=done)
            if pos(firm_id$=ivm01a_key$)<>1 goto done
range_checks:
            if enditem$<>"" if ivm01a_key.item_id$>enditem$ goto done
            read record (ivm01_dev,key=ivm01a_key$) ivm01a$
            if begprod$<>"" if ivm01a.product_type$<begprod$ goto ivm01_loop
            if endprod$<>"" if ivm01a.product_type$>endprod$ goto ivm01_loop
            if type$<>"" if ivm01a.Item_type$<>type$ goto ivm01_loop
            item_head$=" Item Number: "+ivm01a.item_id$ 
            l=l9+1
            item_desc$=" Description: "+ivm01a.item_desc$(1,p[3])+" "+ivm01a.item_desc$(p[3]+1,p[4])+" "+ivm01a.item_desc$(p[3]+p[4]+1,p[5])

            call pgmdir$+"adc_progress.aon","S","","","",ivm01a_key.item_id$,0,0,1,0,ignore_status
            gosub sub_heading

rem --- ivm-01 Master Info

            x$="Item Information"
            product$=nf$
            class$=nf$
            type_desc$=nf$
            gosub Heading


            find record (ivm15_dev,key=firm_id$+ivm01a.Item_type$,dom=Product) ivm15a$
            type_desc$=ivm15a.code_desc$
    
Product:
            find record (ivm10a_dev,key=firm_id$+"A"+ivm01a.product_type$,dom=Class) ivm10a$
            product$=ivm10a.code_desc$
Class:
            find record (ivm13_dev,key=firm_id$+ivm01a.Item_Class$,dom=Print) ivm13a$
            class$=ivm13a.code_desc$
Print:
      
              xwk = fnline(0)
              OutVect!.addItem("Product Type:")
              OutVect!.addItem(ivm01a.product_type$)
              OutVect!.addItem("Sale UM: ")
              OutVect!.addItem(ivm01a.UNIT_OF_SALE$)
              OutVect!.addItem("Sales Analysis:")
              OutVect!.addItem(ivm01a.SA_LEVEL$)
              OutVect!.addItem("Item Class:")
              OutVect!.addItem(ivm01a.Item_Class$)
              OutVect!.addItem("Purchase UM:")
              OutVect!.addItem(ivm01a.PURCHASE_UM$)
              OutVect!.addItem("Lotted/Serialized:")
              OutVect!.addItem(ivm01a.LOTSER_ITEM$)
              OutVect!.addItem("Item Type:")
              OutVect!.addItem(ivm01a.Item_type$)
              OutVect!.addItem("Weight:")
              OutVect!.addItem(str(ivm01a.weight:m6$))
              OutVect!.addItem("Inventoried:")
              OutVect!.addItem(ivm01a.INVENTORIED$)
              OutVect!.addItem("MSR Price:")
              OutVect!.addItem(str(ivm01a.msrp:m4$))
              OutVect!.addItem("Conversion Factor:")
              OutVect!.addItem(str(ivm01a.conv_factor:m5$))
              OutVect!.addItem("Taxable:")
              OutVect!.addItem(ivm01a.taxable_flag$)
              OutVect!.addItem("UPC Code:")
              OutVect!.addItem(ivm01a.upc_code$)
              OutVect!.addItem("Bar Code:")
              OutVect!.addItem(ivm01a.bar_code$)
              xwk = fnblank(2)
              xwk = fnblank(6)
     
      

 
      
        x$="Alternate/Superceded/Not Used"
        altsup$(1)=""
        l=l+5
        gosub Heading
        if cvs(ivm01a.alt_sup_item$,2)<>"" then 
            ivm01b.item_id$=ivm01a.alt_sup_item$
            find record (ivm01_dev2,key=ivm01a.Firm_Id$+ivm01b.item_id$,dom=PrintCode) ivm01b$
            altsup$=fnitem$(ivm01b.item_desc$,p[3],p[4],p[5])
            rem read record (ivm01_dev,key=k$) ivm01a$
        endif
PrintCode:

        xwk = fnline(0)

        OutVect!.addItem("Code:")
        OutVect!.addItem(ivm01a.alt_sup_Flag$)
        OutVect!.addItem("Item:")
        OutVect!.addItem(ivm01a.alt_sup_item$(2,p[0]))
        xwk = fnblank(2)
        xwk = fnblank(6)
    

        l=l+1
        if ivm01a.stock_level$<>"W" then
            buyer$=ivm01a.buyer_code$
            vendor$=""
            abc$=ivm01a.abc_code$
            eoq$=ivm01a.eoq_code$
            ordpnt$=ivm01a.ord_pnt_code$
            safety$=ivm01a.saf_stk_code$
            leadtime=ivm01a.lead_time
            maxqty=ivm01a.maximum_qty
            ordpnt=ivm01a.order_point
            safety=ivm01a.safety_stock
            eoq=ivm01a.eoq
            if ap$="Y" vendor$=ivm01a.vendor_id$
            gosub Print_Stock_Info
        endif
rem --- Print transaction dates

        dim dates$[8]
        x$="Last Transaction Dates"
        gosub Heading
        dates$[1]="Receipt: "+fndate$(ivm01a.lstrec_date$)
        dates$[2]="Sold: "+fndate$(ivm01a.lstsal_date$)
        dates$[3]="Adjustment: "+fndate$(ivm01a.lstadj_date$)
        dates$[4]="Transfer In: "+fndate$(ivm01a.lstxin_date$)
        dates$[5]="Built: "+fndate$(ivm01a.lstblt_date$)
        dates$[6]="Issued: "+fndate$(ivm01a.lstiss_date$)
        dates$[7]="Returned: "+fndate$(ivm01a.lstret_date$)
        dates$[8]="Transfer Out: "+fndate$(ivm01a.lstxot_date$)

        xwk = fnline(0)

        for x = 1 to 8
            OutVect!.addItem(dates$[x])
        next x

        xwk = fnblank(4)
        xwk = fnblank(6)

        l=l+2

rem --- GL accounts

    if gl$<>"N" or di$<>"Y" 
	gl_inv_desc$=nf$,gl_cogs_desc$=nf$,gl_pur_desc$=nf$
	gl_ppv_desc$=nf$,gl_invadj_desc$=nf$,gl_cogsadj_desc$=nf$
        find record (glm01_dev,key=firm_id$+ivm01a.gl_inv_acct$,dom=*next) glm01a$; gl_inv_desc$=glm01a.gl_acct_desc$
        find record (glm01_dev,key=firm_id$+ivm01a.gl_cogs_acct$,dom=*next) glm01a$; gl_cogs_desc$=glm01a.gl_acct_desc$
        find record (glm01_dev,key=firm_id$+ivm01a.gl_pur_acct$,dom=*next) glm01a$; gl_pur_desc$=glm01a.gl_acct_desc$
        find record (glm01_dev,key=firm_id$+ivm01a.gl_ppv_acct$,dom=*next) glm01a$; gl_ppv_desc$=glm01a.gl_acct_desc$
        find record (glm01_dev,key=firm_id$+ivm01a.gl_inv_adj$,dom=*next) glm01a$; gl_invadj_desc$=glm01a.gl_acct_desc$
        find record (glm01_dev,key=firm_id$+ivm01a.gl_cogs_adj$,dom=*next) glm01a$; gl_cogsadj_desc$=glm01a.gl_acct_desc$
        x$="General Ledger Accounts"
        gosub Heading

        xwk = fnline(0)

        OutVect!.addItem("Inventory:")
        OutVect!.addItem(fnmask$(ivm01a.gl_inv_acct$(1,g[3]),g5$))
        OutVect!.addItem(gl_inv_desc$)
        xwk = fnblank(3)
        OutVect!.addItem("Cost Of Goods Sold:")
        OutVect!.addItem(fnmask$(ivm01a.gl_cogs_acct$(1,g[3]),g5$))
        OutVect!.addItem(gl_cogs_desc$)
        xwk = fnblank(3)
        OutVect!.addItem("Purchases:")
        OutVect!.addItem(fnmask$(ivm01a.gl_pur_acct$(1,g[3]),g5$))
        OutVect!.addItem(gl_pur_desc$)
        xwk = fnblank(3)
        OutVect!.addItem("Purchase Price Variance:")
        OutVect!.addItem(fnmask$(ivm01a.gl_ppv_acct$(1,g[3]),g5$))
        OutVect!.addItem(gl_ppv_desc$)
        xwk = fnblank(3)
        OutVect!.addItem("Inventory Adjustment:")
        OutVect!.addItem(fnmask$(ivm01a.gl_inv_adj$(1,g[3]),g5$))
        OutVect!.addItem(gl_invadj_desc$)
        xwk = fnblank(3)
        OutVect!.addItem("COGS Adjustment:")
        OutVect!.addItem(fnmask$(ivm01a.gl_cogs_adj$(1,g[3]),g5$))
        OutVect!.addItem(gl_cogsadj_desc$)
        
        xwk = fnblank(3)
        xwk = fnblank(6)


 
    endif
    l=l+6
    m=l9-l-1
    r=1
    c=-29
    dim buffer$[m+1](80)
    read (ivm24_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next)

    while more

        ivm24a_key$=key(ivm24_dev,end=*break)
        if pos(ivm01a.firm_id$+ivm01a.item_id$=ivm24a_key$)<>1 then 
            break
        endif
        read (ivm24_dev)
        c=c+30
        if c>61 r=r+1,c=1
        if r>m gosub Print_Synonyms
        buffer$[r](c)=ivm24a_key.item_synonym$
    wend

    if r>0 gosub Print_Synonyms
    if include$<>"N" then
        x$="Comments"
        gosub Heading
        first$=ivm01a.firm_id$+ivm01a.item_id$
        x$=""
        read (ivm09_dev,key=first$,dom=*next)

        xwk = fnline(0)

        while more
            ivm09a_key$=key(ivm09_dev,end=*break)
            if pos(first$=ivm09a_key$)<>1 then 
                break
            endif
            read record (ivm09_dev) ivm09a$
            if l+1>=l9 then
                rem gosub report_heading
                x$="Comments"
                gosub Heading
            endif

            
            OutVect!.addItem(ivm09a.SEQUENCE_NUM$)
            OutVect!.addItem(ivm09a.STD_COMMENTS$)
            xwk = fnblank(4)
            
            l=l+1
        wend
        xwk = fnblank(6)

    endif

rem --- Position warehouse xref file

    first$=firm_id$+"G"+ivm01a.item_id$
    l=l9+1
    read (ivm03g_dev,key=first$,dom=*next)

rem --- Next warehouse record

    while more
        ivm03g_key$=key(ivm03g_dev,end=*break)
        if pos(first$=ivm03g_key$)<>1 then
            break
        endif
        read (ivm03g_dev)
        ivm02a_key$=ivm03g_key.firm_id$+ivm03g_key.Warehouse_id$+ivm03g_key.item_id$
        ivm10c_key$=ivm03g_key.firm_id$+"C"+ivm03g_key.warehouse_id$
        ivm10c.short_name$=nf$
        lstrec_date$="",lstblt_date$="",lstsal_date$=""
        lstiss_date$="",lstadj_date$="",lstphy_date$=""
        lstxin_date$="",lstxot_date$="",lstret_date$=""
        find record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
        find record (ivm10c_dev,key=ivm10c_key$,dom=*next) ivm10c$
        x$="Warehouse "+ivm10c.Warehouse_id$+" "+cvs(ivm10c.short_name$,2)
        needed=31
        if ivm01a.stock_level$="W" needed=needed+6
        gosub sub_heading

rem --- Warehouse fields
	if cvs(ivm02a.lstrec_date$,2)<>"" lstrec_date$=fndate$(ivm02a.lstrec_date$)
	if cvs(ivm02a.lstblt_date$,2)<>"" lstblt_date$=fndate$(ivm02a.lstblt_date$)
	if cvs(ivm02a.lstsal_date$,2)<>"" lstsal_date$=fndate$(ivm02a.lstsal_date$)
	if cvs(ivm02a.lstiss_date$,2)<>"" lstiss_date$=fndate$(ivm02a.lstiss_date$)
	if cvs(ivm02a.lstadj_date$,2)<>"" lstadj_date$=fndate$(ivm02a.lstadj_date$)
	if cvs(ivm02a.lstxin_date$,2)<>"" lstxin_date$=fndate$(ivm02a.lstxin_date$)
	if cvs(ivm02a.lstxot_date$,2)<>"" lstxot_date$=fndate$(ivm02a.lstxot_date$)
	if cvs(ivm02a.lstret_date$,2)<>"" lstret_date$=fndate$(ivm02a.lstret_date$)

        dv$=""
        if cvs(ivm02a.lstphy_date$,2)<>"" physical$=fndate$(ivm02a.lstphy_date$) else physical$=""
        if di$<>"N" or ar$<>"N" then
            arm10d_key$=firm_id$+"D"+ivm02a.ar_dist_code$
            arm10d.code_desc$=nf$
            find record (arm10_dev,key=arm10d_key$,dom=*next) arm10d$
            dv$="Distribution Code: "+ivm02a.ar_dist_code$+" "+arm10d.code_desc$
        endif
        gosub Heading

       
        xwk = fnline(0)
        xwk = fnblank(1)
        OutVect!.addItem("Cycle Code:")
        OutVect!.addItem(ivm02a.cycle_cd$)
        xwk = fnblank(3)
        OutVect!.addItem("Location:")
        OutVect!.addItem(ivm02a.location$)
        OutVect!.addItem("Selected:")
        OutVect!.addItem(ivm02a.select_phys$)
        xwk = fnblank(2)
        OutVect!.addItem("Distribution Code:")
        OutVect!.addItem(ivm02a.ar_dist_code$+" "+arm10d.code_desc$)
        OutVect!.addItem("Last Physical:")
        OutVect!.addItem(physical$)
        xwk = fnblank(2)
        xwk = fnblank(6)


    
rem --- Stocking information
        if ivm01a.stock_level$="W" then
            buyer$=ivm02a.buyer_code$
            vendor$=""
            abc$=ivm02a.abc_code$
            eoq$=ivm02a.eoq_code$
            ordpnt$=ivm02a.ord_pnt_code$
            safety$=ivm02a.saf_stk_code$
            leadtime=ivm02a.lead_time
            maxqty=ivm02a.maximum_qty
            ordpnt=ivm02a.order_point
            safety=ivm02a.safety_stock
            eoq=ivm02a.eoq
            if ap$="Y" vendor$=ivm02a.vendor_id$
            gosub Print_Stock_Info
        endif
rem --- Prices/Costs
        x$="Prices"
        l=l+3
        gosub Heading

        xwk = fnline(0)

        OutVect!.addItem("Current List:")
        OutVect!.addItem(ivm02a.cycle_cd$)
        OutVect!.addItem("Prior List:")
        OutVect!.addItem(str(ivm02a.pri_price:m4$) + ivm02a.cur_price_cd$)
        xwk = fnblank(2)
        xwk = fnblank(6)
        


        x$="Costs"
        l=l+1
        gosub Heading

        xwk = fnline(0)

        OutVect!.addItem("Unit Cost:")
        OutVect!.addItem(str(ivm02a.unit_cost:m3$))
        OutVect!.addItem("Average Cost: ")
        OutVect!.addItem(str(ivm02a.avg_cost:m3$))
        xwk = fnblank(2)
        OutVect!.addItem("Landed Cost:")
        OutVect!.addItem(str(ivm02a.landed_cost:m3$))
        OutVect!.addItem("Standard Cost:")
        OutVect!.addItem(str(ivm02a.std_cost:m3$))
        xwk = fnblank(2)
        OutVect!.addItem("Last PO Cost:")
        OutVect!.addItem(str(ivm02a.Last_Po_Cost:m3$))
        OutVect!.addItem("ReplacementCost:")
        OutVect!.addItem(str(ivm02a.rep_cost:m3$))
        xwk = fnblank(2)

        xwk = fnblank(6)
        
        rem new l=l+3

rem --- Initializations for period display
        dim buffer$[4],qty[4,10]
        p=p[6]+1
        y=p[7]
        if p>g[0] p=1,y=y+1

rem --- Retrieve period records

        for x=1 to 4
            buffer$[x]=per_name$[p]+" "+str(y)
            ivm12a_key$=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$+str(y)+str(p:"00")
            p=p-1
            if p<1 p=g[0],y=y-1
            find record (ivm12_dev,key=ivm12a_key$,dom=Next_ivm12_summary) ivm12a$
            qty[x,1]=ivm12a.BEG_BALANCE 
            qty[x,2]=ivm12a.QTY_RECEIVED 
            qty[x,3]=ivm12a.QTY_BUILT
            qty[x,4]=ivm12a.QTY_SOLD
            qty[x,5]=ivm12a.QTY_ISSUED 
            qty[x,6]=ivm12a.QTY_XFER_IN
            qty[x,7]=ivm12a.QTY_XFER_OUT
            qty[x,8]=ivm12a.QTY_ADJUST 
            qty[x,9]=ivm12a.QTY_RETURNED 
            qty[x,10]=ivm12a.BEG_BALANCE+ivm12a.QTY_RECEIVED+ivm12a.QTY_BUILT-ivm12a.QTY_SOLD-ivm12a.QTY_ISSUED+ivm12a.QTY_ADJUST+ivm12a.QTY_XFER_IN-ivm12a.QTY_XFER_OUT+ivm12a.QTY_RETURNED
Next_ivm12_summary:
        next x

rem --- Print status

        x$="Item Status"
        x=ivm02a.qty_on_hand-ivm02a.qty_commit
        gosub Heading

        xwk = fnline(0)

        OutVect!.addItem("On Hand:")
        OutVect!.addItem(str(ivm02a.qty_on_hand:m2$))
        OutVect!.addItem("On Order:")
        OutVect!.addItem(str(ivm02a.qty_on_order:m2$))
        xwk = fnblank(2)
        OutVect!.addItem("Committed:")
        OutVect!.addItem(str(ivm02a.qty_commit:m2$))
        OutVect!.addItem("Last Physical Count:")
        OutVect!.addItem(str(ivm02a.physical_cnt:m2$))
        xwk = fnblank(2)
        OutVect!.addItem("Available:")
        OutVect!.addItem(str(x:m2$))
        xwk = fnblank(4)

        xwk = fnblank(6)
        

        x$=""
        l=l+3
rem        gosub Heading

        xwk = fnline(0)

        xwk = fnblank(1)
        OutVect!.addItem("Last")
rem        xwk = fnblank(5)
        for x=1 to 4
            OutVect!.addItem(buffer$[x])
        next x
        
        dim buffer$[9],ivmdate$[9]
        buffer$[0]="Beginning"
        buffer$[1]="Received",ivmdate$[1]=lstrec_date$
        buffer$[2]="Built",ivmdate$[2]=lstblt_date$
        buffer$[3]="Sold",ivmdate$[3]=lstsal_date$
        buffer$[4]="Issued",ivmdate$[4]=lstiss_date$
        buffer$[5]="Transfer In",ivmdate$[5]=lstxin_date$
        buffer$[6]="Transfer Out",ivmdate$[6]=lstxot_date$
        buffer$[7]="Adjustments",ivmdate$[7]=lstadj_date$
        buffer$[8]="Returns",ivmdate$[8]=lstret_date$
        buffer$[9]="Ending"
        l=l+11
        gosub Heading
        for x=1 to 10

            OutVect!.addItem(buffer$[x-1])
            OutVect!.addItem(ivmdate$[x-1])
            OutVect!.addItem(str(qty[1,x]:m2$))
            OutVect!.addItem(str(qty[2,x]:m2$))
            OutVect!.addItem(str(qty[3,x]:m2$))
            OutVect!.addItem(str(qty[4,x]:m2$))
        next x

        xwk = fnblank(6)

    wend

    if ap$="N" goto ivm01_loop
    first$=firm_id$+"H"+ivm01a.item_id$
    l=l9+1

    read (ivm03h_dev,key=first$,dom=*next)

rem --- Next vendor xref
  
    while more
        ivm03h_key$=key(ivm03h_dev,end=*break)
        if pos(first$=ivm03h_key$)<>1 then
            break
        endif
        read (ivm03h_dev)
        ivm05a_key$=ivm03h_key.firm_id$+ivm03h_key.vendor_id$+ivm03h_key.item_id$
        apm01a_key$=ivm03h_key.firm_id$+ivm03h_key.vendor_id$
        apm01a.vend_name$=nf$
        find record (ivm05_dev,key=ivm05a_key$,dom=*continue) ivm05a$
        find record (apm01_dev,key=apm01a_key$,dom=*next) apm01a$
        x$="Vendor "+fnmask$(apm01a.vendor_id$,vendmask$)+" "+cvs(apm01a.vendor_name$,2)
        rem if l+15>l9 gosub report_heading
        gosub Heading
        OutVect!.addItem("Primary/Secondary:")
        OutVect!.addItem(ivm05a.PRISEC_FLAG$)
        OutVect!.addItem("Vendor's Item Number:")
        OutVect!.addItem(ivm05a.vend_item$)
        OutVect!.addItem("Lead Time:")
        OutVect!.addItem(str(ivm05a.lead_time:m9$))
        
        x$="Quantity Discounts"
        gosub Heading

        OutVect!.addItem("Level 1 Quantity:")
        OutVect!.addItem(str(ivm05a.break_qty:m2$))
        OutVect!.addItem("Level 1 Cost:")
        OutVect!.addItem(str(ivm05a.unit_cost:m3$))
      
        OutVect!.addItem("Level 2 Quantity:")
        OutVect!.addItem(str(ivm05a.break_qty:m2$))
        OutVect!.addItem("Level 1 Cost:")
        OutVect!.addItem(str(ivm05a.unit_cost:m3$))

        OutVect!.addItem("Level 2 Quantity:")
        OutVect!.addItem(str(ivm05a.break_qty:m2$))
        OutVect!.addItem("Level 1 Cost:")
        OutVect!.addItem(str(ivm05a.unit_cost:m3$))


        x$="Last Purchase"
        gosub Heading
        x$=""
        l=l+9
        if cvs(ivm05a.LAST_PO_DATE$,2)<>"" x$=fndate$(ivm05a.LAST_PO_DATE$)

        OutVect!.addItem("Date:")
        OutVect!.addItem(x$)
        OutVect!.addItem("Lead Time:")
        OutVect!.addItem(str(ivm05a.Last_Po_Lead:m9$))
        OutVect!.addItem("Cost:")
        OutVect!.addItem(str(ivm05a.Last_Po_Cost:m3$))
        OutVect!.addItem("")
        OutVect!.addItem("")
       

    wend

ivm01_loop: rem --- Loop back for next record
    
    goto Next_ivm01

done: rem --- All done

    on o0 goto std_exit,Close

Close:
    close (printer_dev,err=*next)
    read record (ivm01_dev,key=item$,dom=*next) ivm01a$
    call pgmdir$+"syc_cn.bbx","",0,l0,'CE',status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    run o0$,err=std_exit

rem report_heading: rem --- Report Heading

sub_heading:
   
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(item_head$ +"  "+item_desc$)
    return

Heading: rem --- Section Heading

    dim j$(40,"-")
    if x$<>"" j$(9,len(x$)+2)=" "+x$+" "
    if l+2>l9 l = headings + 3

    OutVect!.addItem(j$)
    l=l+2
    return

Print_Synonyms: rem --- Print synonyms

    let x$="Item Synonyms"
    gosub Heading
    
    xwk = fnline(0)
  
    for x=1 to r
       
        OutVect!.addItem(buffer$[x](1,30))
        OutVect!.addItem(buffer$[x](31))
        xwk = fnblank(4)
        let l=l+1
    next x
    
    xwk = fnblank(6)


    let m=l9-2,r=1,c=1
    dim buffer$[m+1](80)
    return

Print_Stock_Info: rem --- Print stocking information

    let x$="Stocking Information"
    gosub Heading
    let ivm10f_key$=firm_id$+"F"+buyer$
    find record (ivm10f_dev,key=ivm10f_key$,dom=*next) ivm10f$
    let buyer$=ivm10f.buyer_code$+" "+ivm10f.code_desc$
    if cvs(vendor$,2)<> "" then
        let apm01a_key$=firm_id$+vendor$,c1$(1)=nf$
        find record (apm01_dev,key=apm01a_key$,dom=*next) apm01a$
        let vendor$=fnmask$(apm01a.vendor_id$,vendmask$)+" "+apm01a.vendor_name$
    endif

    
    xwk = fnline(0)

    OutVect!.addItem("Buyer Code:")
    OutVect!.addItem(buyer$)
    OutVect!.addItem("Maximum Quantity:")
    OutVect!.addItem(str(maxqty:m2$))
    xwk = fnblank(2)
    OutVect!.addItem("Stocking Vendor:")
    OutVect!.addItem(vendor$)
    OutVect!.addItem("Order Point:")
    OutVect!.addItem(str(ordpnt:m2$) + " " + ordpnt$)
    xwk = fnblank(2)
    OutVect!.addItem("Lead Time:")
    OutVect!.addItem(str(leadtime:m9$))
    OutVect!.addItem("EOQ:")
    OutVect!.addItem(str(eoq:m2$) + " " + eoq$)
    xwk = fnblank(2)
    OutVect!.addItem("ABC Code:")
    OutVect!.addItem(abc$)
    OutVect!.addItem("Safety Stock:")
    OutVect!.addItem(str(safety:m2$) + " " + safety$)
    
    xwk = fnblank(2)
    xwk = fnblank(6)

    rem let l=l+4
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

   def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnLine : Create lines in OutVect!. No return value
   
   def fnline(q0)
       OutVect!.addItem("--------------------------------")
       OutVect!.addItem("--------------------------------")
       OutVect!.addItem("--------------------------------")
       OutVect!.addItem("--------------------------------")
       OutVect!.addItem("----------------------------")
       return q1
    rem fnend


rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
