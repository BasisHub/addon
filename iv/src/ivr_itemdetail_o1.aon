rem --- Item Detail Listing (Report Overlay)
rem --- Program ivr_itemdetail_o1.aon v8.0.0 16Jul2007 (ivr_rb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:02:25)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Use Statements

    use ::ado_func.src::func

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Report Initializations

    precision p[1]
    dim headings$[2]
    width=80
    page=0 
    headings=2
    product$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    when$=sysinfo.system_date$
    clock$=""
    more=1
    recs=0
    headings$[2]="[HEADER]"

    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm01_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem ---  column heading

    dim columns$[5,3]
    columns=6
    columns$[0,0]="", columns$[0,1]="C",columns$[0,2]="25"
    columns$[1,0]="", columns$[1,1]="C",columns$[1,2]="25"
    columns$[2,0]="", columns$[2,1]="C",columns$[2,2]="25"
    columns$[3,0]="", columns$[3,1]="C",columns$[3,2]="20"
    columns$[4,0]="", columns$[4,1]="C",columns$[4,2]="20"
    columns$[5,0]="", columns$[5,1]="C",columns$[5,2]="15"

    sql_chan1=sqlunt
    sqlopen(sql_chan1,err=*next)stbl("+DBNAME")
    sql_chan2=sqlunt
    sqlopen(sql_chan2,err=*next)stbl("+DBNAME")

rem --- Position files

    ivm01a_key$=firm_id$+begitem$
    read(ivm01_dev,key=ivm01a_key$,dir=0,dom=*next)

rem --- Next item

    while more
        ivm01a_key$=key(ivm01_dev,end=*break)
        if pos(firm_id$=ivm01a_key$)<>1 then break
        if enditem$<>"" and ivm01a_key.item_id$>enditem$ then break
        read record (ivm01_dev,key=ivm01a_key$) ivm01a$
        if begprod$<>"" if ivm01a.product_type$<begprod$ then continue
        if endprod$<>"" if ivm01a.product_type$>endprod$ then continue
        if type$<>"" if ivm01a.Item_type$<>type$ then continue
        item_head$=Translate!.getTranslation("AON__ITEM_NUMBER:_")+ivm01a.item_id$ 
        l=l9+1
        item_desc$=Translate!.getTranslation("AON__DESCRIPTION:_") + func.displayDesc(ivm01a.item_desc$, p[3], p[4], p[5])

        call pgmdir$+"adc_progress.aon","S","","","",ivm01a_key.item_id$,0,0,1,0,ignore_status
        gosub sub_heading

    rem --- ivm-01 Master Info

        x$ = cvs(ivm01a.item_id$, 3) + " "  +cvs( func.displayDesc(ivm01a.item_desc$, p[3], p[4], p[5]), 3)
        gosub heading

        x$=Translate!.getTranslation("AON_ITEM_INFORMATION")
        product$=nf$
        class_desc$=nf$
        type_desc$=nf$
        gosub heading

        find record (ivm15_dev,key=firm_id$+ivm01a.item_type$,dom=find_product) ivm15a$
        type_desc$=ivm15a.code_desc$
    find_product: 
        find record (ivm10a_dev,key=firm_id$+"A"+ivm01a.product_type$,dom=find_class) ivm10a$
        product$=ivm10a.code_desc$
    find_class: 
        find record (ivm13_dev,key=firm_id$+ivm01a.item_class$,dom=print_item_details) ivm13a$
        class_desc$=ivm13a.code_desc$

    print_item_details: 

        OutVect!.addItem(Translate!.getTranslation("AON_PRODUCT_TYPE:_") + ivm01a.product_type$)
        OutVect!.addItem(type_desc$)
        OutVect!.addItem(Translate!.getTranslation("AON_SALE_UM:_") + ivm01a.unit_of_sale$)
        OutVect!.addItem("")
        OutVect!.addItem(Translate!.getTranslation("AON_SALES_ANALYSIS:_") + ivm01a.sa_level$)
        OutVect!.addItem("")

        OutVect!.addItem(Translate!.getTranslation("AON_ITEM_CLASS:_") + ivm01a.item_class$)
        OutVect!.addItem(class_desc$)
        OutVect!.addItem(Translate!.getTranslation("AON_PURCHASE_UM:_") + ivm01a.purchase_um$)
        OutVect!.addItem("")
        OutVect!.addItem(Translate!.getTranslation("AON_LOTTED/SERIALIZED:_") + ivm01a.lotser_item$)
        OutVect!.addItem("")

        OutVect!.addItem(Translate!.getTranslation("AON_ITEM_TYPE:_") + ivm01a.item_type$)
        OutVect!.addItem(product$)
        OutVect!.addItem(Translate!.getTranslation("AON_WEIGHT:_") + str(ivm01a.weight:m6$))
        OutVect!.addItem("")
        OutVect!.addItem(Translate!.getTranslation("AON_INVENTORIED:_") + ivm01a.inventoried$)
        OutVect!.addItem("")

        OutVect!.addItem(Translate!.getTranslation("AON_MSR_PRICE:_") + str(ivm01a.msrp:m4$))
        OutVect!.addItem("")
        OutVect!.addItem(Translate!.getTranslation("AON_CONVERSION_FACTOR:_") + str(ivm01a.conv_factor:m5$))
        OutVect!.addItem("")
        OutVect!.addItem(Translate!.getTranslation("AON_TAXABLE:_") + ivm01a.taxable_flag$)
        OutVect!.addItem("")

        OutVect!.addItem(Translate!.getTranslation("AON_UPC_CODE:_") + ivm01a.upc_code$)
        OutVect!.addItem("")
        OutVect!.addItem(Translate!.getTranslation("AON_BAR_CODE:_") + ivm01a.bar_code$)
        OutVect!.addItem("")
        xwk = fnblank(2)

        xwk = fnblank(columns)
        recs=recs+1

    rem --- Alternate item information

        x$=Translate!.getTranslation("AON_ALTERNATE/SUPERCEDED/NOT_USED")
        altsup$=""
        gosub heading
        if cvs(ivm01a.alt_sup_item$,2)<>"" then 
            ivm01b.item_id$=ivm01a.alt_sup_item$
            find record (ivm01_dev2,key=ivm01a.firm_id$+ivm01b.item_id$,dom=print_altsup_details) ivm01b$
            altsup$=func.displayDesc(ivm01b.item_desc$,p[3],p[4],p[5])
        endif

    print_altsup_details: 

        OutVect!.addItem(Translate!.getTranslation("AON_CODE:"))
        OutVect!.addItem(ivm01a.alt_sup_flag$)
        OutVect!.addItem(Translate!.getTranslation("AON_ITEM:"))
        OutVect!.addItem( pad(ivm01a.alt_sup_item$, p[0]) )
        xwk = fnblank(2)
        xwk = fnblank(6)

        if ivm01a.stock_level$<>"W" then
            buyer$=ivm01a.buyer_code$
            vendor$=""
            abc$=ivm01a.abc_code$
            eoq$=ivm01a.eoq_code$
            ordpnt$=ivm01a.ord_pnt_code$
            safety$=ivm01a.saf_stk_code$
            leadtime=ivm01a.lead_time
            maxqty=ivm01a.maximum_qty
            ordpnt=ivm01a.order_point
            safety=ivm01a.safety_stock
            eoq=ivm01a.eoq
            if ap$="Y" vendor$=ivm01a.vendor_id$
            gosub print_stock_info
        endif

    rem --- Print transaction dates

        dim dates$[8]
        x$=Translate!.getTranslation("AON_LAST_TRANSACTION_DATES")
        gosub heading
        dates$[1]=Translate!.getTranslation("AON_RECEIPT:_")+func.formatDate(ivm01a.lstrec_date$)
        dates$[2]=Translate!.getTranslation("AON_SOLD:_")+func.formatDate(ivm01a.lstsal_date$)
        dates$[3]=Translate!.getTranslation("AON_ADJUSTMENT:_")+func.formatDate(ivm01a.lstadj_date$)
        dates$[4]=Translate!.getTranslation("AON_TRANSFER_IN:_")+func.formatDate(ivm01a.lstxin_date$)
        dates$[5]=Translate!.getTranslation("AON_BUILT:_")+func.formatDate(ivm01a.lstblt_date$)
        dates$[6]=Translate!.getTranslation("AON_ISSUED:_")+func.formatDate(ivm01a.lstiss_date$)
        dates$[7]=Translate!.getTranslation("AON_RETURNED:_")+func.formatDate(ivm01a.lstret_date$)
        dates$[8]=Translate!.getTranslation("AON_TRANSFER_OUT:_")+func.formatDate(ivm01a.lstxot_date$)

        for y=0 to 1
            for x = 1 to 4
                OutVect!.addItem(dates$[y*4+x])
            next x
            xwk = fnblank(2)
        next y

        xwk = fnblank(6)

    rem --- GL accounts

        if gl$="Y" and di$="N" 
            gl_inv_desc$=nf$,gl_cogs_desc$=nf$,gl_pur_desc$=nf$
            gl_ppv_desc$=nf$,gl_invadj_desc$=nf$,gl_cogsadj_desc$=nf$
            find record (glm01_dev,key=firm_id$+ivm01a.gl_inv_acct$,dom=*next) glm01a$; gl_inv_desc$=glm01a.gl_acct_desc$
            find record (glm01_dev,key=firm_id$+ivm01a.gl_cogs_acct$,dom=*next) glm01a$; gl_cogs_desc$=glm01a.gl_acct_desc$
            find record (glm01_dev,key=firm_id$+ivm01a.gl_pur_acct$,dom=*next) glm01a$; gl_pur_desc$=glm01a.gl_acct_desc$
            find record (glm01_dev,key=firm_id$+ivm01a.gl_ppv_acct$,dom=*next) glm01a$; gl_ppv_desc$=glm01a.gl_acct_desc$
            find record (glm01_dev,key=firm_id$+ivm01a.gl_inv_adj$,dom=*next) glm01a$; gl_invadj_desc$=glm01a.gl_acct_desc$
            find record (glm01_dev,key=firm_id$+ivm01a.gl_cogs_adj$,dom=*next) glm01a$; gl_cogsadj_desc$=glm01a.gl_acct_desc$

            x$=Translate!.getTranslation("AON_GENERAL_LEDGER_ACCOUNTS")
            gosub heading
            OutVect!.addItem(Translate!.getTranslation("AON_INVENTORY:"))
            OutVect!.addItem(func.alphaMask(ivm01a.gl_inv_acct$(1,g[3]),g5$)+" "+gl_inv_desc$)
            OutVect!.addItem("")
            xwk = fnblank(3)
            OutVect!.addItem(Translate!.getTranslation("AON_COST_OF_GOODS_SOLD:"))
            OutVect!.addItem(func.alphaMask(ivm01a.gl_cogs_acct$(1,g[3]),g5$)+" "+gl_cogs_desc$)
            OutVect!.addItem("")
            xwk = fnblank(3)
            OutVect!.addItem(Translate!.getTranslation("AON_PURCHASES:"))
            OutVect!.addItem(func.alphaMask(ivm01a.gl_pur_acct$(1,g[3]),g5$)+" "+gl_pur_desc$)
            OutVect!.addItem("")
            xwk = fnblank(3)
            OutVect!.addItem(Translate!.getTranslation("AON_PURCHASE_PRICE_VARIANCE:"))
            OutVect!.addItem(func.alphaMask(ivm01a.gl_ppv_acct$(1,g[3]),g5$)+" "+gl_ppv_desc$)
            OutVect!.addItem("")
            xwk = fnblank(3)
            OutVect!.addItem(Translate!.getTranslation("AON_INVENTORY_ADJUSTMENT:"))
            OutVect!.addItem(func.alphaMask(ivm01a.gl_inv_adj$(1,g[3]),g5$)+" "+gl_invadj_desc$)
            OutVect!.addItem("")
            xwk = fnblank(3)
            OutVect!.addItem(Translate!.getTranslation("AON_COGS_ADJUSTMENT:"))
            OutVect!.addItem(func.alphaMask(ivm01a.gl_cogs_adj$(1,g[3]),g5$)+" "+gl_cogsadj_desc$)
            OutVect!.addItem("")

            xwk = fnblank(3)
            xwk = fnblank(6)
        endif

    rem --- Synonyms

        x$=Translate!.getTranslation("AON_ITEM_SYNONYMS")
        gosub heading
        r=0
        read (ivm24_dev,key=ivm01a.firm_id$+ivm01a.item_id$,dom=*next)
        while more
            ivm24a_key$=key(ivm24_dev,end=*break)
            if pos(ivm01a.firm_id$+ivm01a.item_id$=ivm24a_key$)<>1 then break
            read (ivm24_dev)
            OutVect!.addItem(ivm24a_key.item_synonym$)
            r=r+1
            if r=columns then r=0
        wend
        if r>0 then xwk=fnblank(columns-r)
        xwk=fnblank(columns)

    rem --- Comments

        if include$<>"N" then
            x$=Translate!.getTranslation("AON_COMMENTS")
            gosub heading
            first$=ivm01a.firm_id$+ivm01a.item_id$
            x$=""
            read (ivm09_dev,key=first$,dom=*next)

            while more
                ivm09a_key$=key(ivm09_dev,end=*break)
                if pos(first$=ivm09a_key$)<>1 then break
                read record (ivm09_dev) ivm09a$           
                OutVect!.addItem(ivm09a.SEQUENCE_NUM$)
                OutVect!.addItem(ivm09a.STD_COMMENTS$)
                xwk = fnblank(columns-2)
            wend
            xwk = fnblank(columns)

        endif

    rem --- Warehouse Information

    rem --- Position warehouse xref file

        sql_prep$="SELECT firm_id, item_id, warehouse_id FROM ivm_itemwhse WHERE firm_id='"+firm_id$+"' AND item_id='"+ivm01a.item_id$+"'"        
        sqlprep(sql_chan1)sql_prep$
        dim whse_tpl$:sqltmpl(sql_chan1)
        sqlexec(sql_chan1)

    rem --- Next warehouse record

        while more
            whse_tpl$=sqlfetch(sql_chan1,err=*break)
            whse$=whse_tpl.warehouse_id$
            item$=whse_tpl.item_id$
            ivm02a_key$=firm_id$+whse$+item$
            ivm10c_key$=firm_id$+"C"+whse$
            ivm10c.short_name$=nf$
            lstrec_date$="",lstblt_date$="",lstsal_date$=""
            lstiss_date$="",lstadj_date$="",lstphy_date$=""
            lstxin_date$="",lstxot_date$="",lstret_date$=""
            find record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
            find record (ivm10c_dev,key=ivm10c_key$,dom=*next) ivm10c$
            x$=Translate!.getTranslation("AON_WAREHOUSE_")+ivm10c.Warehouse_id$+" "+cvs(ivm10c.short_name$,2)
            gosub sub_heading

        rem --- Warehouse fields

            if cvs(ivm02a.lstrec_date$,2)<>"" lstrec_date$=func.formatDate(ivm02a.lstrec_date$)
            if cvs(ivm02a.lstblt_date$,2)<>"" lstblt_date$=func.formatDate(ivm02a.lstblt_date$)
            if cvs(ivm02a.lstsal_date$,2)<>"" lstsal_date$=func.formatDate(ivm02a.lstsal_date$)
            if cvs(ivm02a.lstiss_date$,2)<>"" lstiss_date$=func.formatDate(ivm02a.lstiss_date$)
            if cvs(ivm02a.lstadj_date$,2)<>"" lstadj_date$=func.formatDate(ivm02a.lstadj_date$)
            if cvs(ivm02a.lstxin_date$,2)<>"" lstxin_date$=func.formatDate(ivm02a.lstxin_date$)
            if cvs(ivm02a.lstxot_date$,2)<>"" lstxot_date$=func.formatDate(ivm02a.lstxot_date$)
            if cvs(ivm02a.lstret_date$,2)<>"" lstret_date$=func.formatDate(ivm02a.lstret_date$)

            dv$=""
            if cvs(ivm02a.lstphy_date$,2)<>"" physical$=func.formatDate(ivm02a.lstphy_date$) else physical$=""
            if di$<>"N" or ar$<>"N" then
                arm10d_key$=firm_id$+"D"+ivm02a.ar_dist_code$
                arm10d.code_desc$=nf$                  
                find record (arm10d_dev,key=arm10d_key$,dom=*next) arm10d$
                dv$=Translate!.getTranslation("AON_DISTRIBUTION_CODE:_")+ivm02a.ar_dist_code$+" "+arm10d.code_desc$
            endif
            gosub heading

            xwk = fnblank(1)
            OutVect!.addItem(Translate!.getTranslation("AON_CYCLE_CODE:"))
            OutVect!.addItem(ivm02a.pi_cyclecode$)
            xwk = fnblank(3)
            OutVect!.addItem(Translate!.getTranslation("AON_LOCATION:"))
            OutVect!.addItem(ivm02a.location$)
            OutVect!.addItem(Translate!.getTranslation("AON_SELECTED:"))
            OutVect!.addItem(ivm02a.select_phys$)
            xwk = fnblank(2)
            OutVect!.addItem(Translate!.getTranslation("AON_DISTRIBUTION_CODE:"))
            OutVect!.addItem(ivm02a.ar_dist_code$+" "+arm10d.code_desc$)
            OutVect!.addItem(Translate!.getTranslation("AON_LAST_PHYSICAL:"))
            OutVect!.addItem(physical$)
            xwk = fnblank(2)
            xwk = fnblank(columns)

        rem --- Stocking information

            if ivm01a.stock_level$="W" then
                buyer$=ivm02a.buyer_code$
                vendor$=""
                abc$=ivm02a.abc_code$
                eoq$=ivm02a.eoq_code$
                ordpnt$=ivm02a.ord_pnt_code$
                safety$=ivm02a.saf_stk_code$
                leadtime=ivm02a.lead_time
                maxqty=ivm02a.maximum_qty
                ordpnt=ivm02a.order_point
                safety=ivm02a.safety_stock
                eoq=ivm02a.eoq
                if ap$="Y" vendor$=ivm02a.vendor_id$
                gosub print_stock_info
            endif

        rem --- Prices/Costs

            x$=Translate!.getTranslation("AON_PRICES")
            gosub heading

            OutVect!.addItem(Translate!.getTranslation("AON_CURRENT_LIST:"))
            OutVect!.addItem(str(ivm02a.cur_price:m4$) + ivm02a.cur_price_cd$)
            OutVect!.addItem(Translate!.getTranslation("AON_PRIOR_LIST:"))
            OutVect!.addItem(str(ivm02a.pri_price:m4$) + ivm02a.pri_price_cd$)
            xwk = fnblank(columns-4)
            xwk = fnblank(columns)

            x$=Translate!.getTranslation("AON_COSTS")
            gosub heading

            OutVect!.addItem(Translate!.getTranslation("AON_UNIT_COST:"))
            OutVect!.addItem(str(ivm02a.unit_cost:m3$))
            OutVect!.addItem(Translate!.getTranslation("AON_AVERAGE_COST:_"))
            OutVect!.addItem(str(ivm02a.avg_cost:m3$))
            xwk = fnblank(2)
            OutVect!.addItem(Translate!.getTranslation("AON_LANDED_COST:"))
            OutVect!.addItem(str(ivm02a.landed_cost:m3$))
            OutVect!.addItem(Translate!.getTranslation("AON_STANDARD_COST:"))
            OutVect!.addItem(str(ivm02a.std_cost:m3$))
            xwk = fnblank(2)
            OutVect!.addItem(Translate!.getTranslation("AON_LAST_PO_COST:"))
            OutVect!.addItem(str(ivm02a.Last_Po_Cost:m3$))
            OutVect!.addItem(Translate!.getTranslation("AON_REPLACEMENTCOST:"))
            OutVect!.addItem(str(ivm02a.rep_cost:m3$))
            xwk = fnblank(2)
            xwk = fnblank(columns)

        rem --- Initializations for period display

            dim buffer$[4],qty[4,10]
            p=p[6]+1
            y=p[7]
            if p>g[0] p=1,y=y+1

        rem --- Retrieve period records

            for x=1 to 4
                buffer$[x]=per_name$[p]+" "+str(y)
                ivm12a_key$=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$+str(y)+str(p:"00")
                p=p-1
                if p<1 p=g[0],y=y-1
                find record (ivm12_dev,key=ivm12a_key$,dom=next_ivm12_summary) ivm12a$
                qty[x,1]=ivm12a.BEG_BALANCE 
                qty[x,2]=ivm12a.QTY_RECEIVED 
                qty[x,3]=ivm12a.QTY_BUILT
                qty[x,4]=ivm12a.QTY_SOLD
                qty[x,5]=ivm12a.QTY_ISSUED 
                qty[x,6]=ivm12a.QTY_XFER_IN
                qty[x,7]=ivm12a.QTY_XFER_OUT
                qty[x,8]=ivm12a.QTY_ADJUST 
                qty[x,9]=ivm12a.QTY_RETURNED 
                qty[x,10]=ivm12a.beg_balance+ivm12a.qty_received+ivm12a.qty_built-ivm12a.qty_sold-ivm12a.qty_issued+ivm12a.qty_adjust+ivm12a.qty_xfer_in-ivm12a.qty_xfer_out+ivm12a.qty_returned
            next_ivm12_summary: 
            next x

        rem --- Print status

            x$=Translate!.getTranslation("AON_ITEM_STATUS")
            x=ivm02a.qty_on_hand-ivm02a.qty_commit
            gosub heading

            OutVect!.addItem(Translate!.getTranslation("AON_ON_HAND:"))
            OutVect!.addItem(str(ivm02a.qty_on_hand:m2$))
            OutVect!.addItem(Translate!.getTranslation("AON_ON_ORDER:"))
            OutVect!.addItem(str(ivm02a.qty_on_order:m2$))
            xwk = fnblank(2)
            OutVect!.addItem(Translate!.getTranslation("AON_COMMITTED:"))
            OutVect!.addItem(str(ivm02a.qty_commit:m2$))
            OutVect!.addItem(Translate!.getTranslation("AON_LAST_PHYSICAL_COUNT:"))
            OutVect!.addItem(str(ivm02a.physical_cnt:m2$))
            xwk = fnblank(2)
            OutVect!.addItem(Translate!.getTranslation("AON_AVAILABLE:"))
            OutVect!.addItem(str(x:m2$))
            xwk = fnblank(4)
            xwk = fnblank(columns)


            x$=""
            gosub heading
            xwk = fnblank(1)
            OutVect!.addItem(Translate!.getTranslation("AON_LAST"))
            for x=1 to 4
                OutVect!.addItem(buffer$[x]+$00$+"R")
            next x

            dim buffer$[9],ivmdate$[9]
            buffer$[0]=Translate!.getTranslation("AON_BEGINNING")
            buffer$[1]=Translate!.getTranslation("AON_RECEIVED"),ivmdate$[1]=lstrec_date$
            buffer$[2]=Translate!.getTranslation("AON_BUILT"),ivmdate$[2]=lstblt_date$
            buffer$[3]=Translate!.getTranslation("AON_SOLD"),ivmdate$[3]=lstsal_date$
            buffer$[4]=Translate!.getTranslation("AON_ISSUED"),ivmdate$[4]=lstiss_date$
            buffer$[5]=Translate!.getTranslation("AON_TRANSFER_IN"),ivmdate$[5]=lstxin_date$
            buffer$[6]=Translate!.getTranslation("AON_TRANSFER_OUT"),ivmdate$[6]=lstxot_date$
            buffer$[7]=Translate!.getTranslation("AON_ADJUSTMENTS"),ivmdate$[7]=lstadj_date$
            buffer$[8]=Translate!.getTranslation("AON_RETURNS"),ivmdate$[8]=lstret_date$
            buffer$[9]=Translate!.getTranslation("AON_ENDING")

            for x=1 to 10
                OutVect!.addItem(buffer$[x-1])
                OutVect!.addItem(ivmdate$[x-1])
                OutVect!.addItem(str(qty[1,x]:m2$)+$00$+"R")
                OutVect!.addItem(str(qty[2,x]:m2$)+$00$+"R")
                OutVect!.addItem(str(qty[3,x]:m2$)+$00$+"R")
                OutVect!.addItem(str(qty[4,x]:m2$)+$00$+"R")
            next x

            xwk = fnblank(columns)
        wend

    rem --- Vendor Information

        if ap$="N" continue
        gosub sub_heading
        sql_prep$="select firm_id, item_id, vendor_id from ivm_itemvend where firm_id='"+firm_id$+"' and item_id='"+ivm01a.item_id$+"'"        
        sqlprep(sql_chan2)sql_prep$
        dim vend_tpl$:sqltmpl(sql_chan2)
        sqlexec(sql_chan2)

        while more
            vend_tpl$=sqlfetch(sql_chan2,err=*break)
            vendor$=vend_tpl.vendor_id$
            item$=vend_tpl.item_id$

        rem --- Next vendor xref

            ivm05a_key$=firm_id$+vendor$+item$
            apm01a_key$=firm_id$+vendor$
            apm01a.vendor_name$=nf$
            find record (ivm05_dev,key=ivm05a_key$,dom=*continue) ivm05a$
            find record (apm01_dev,key=apm01a_key$,dom=*next) apm01a$
            x$=Translate!.getTranslation("AON_VENDOR_")+func.alphaMask(apm01a.vendor_id$,vendmask$)+" "+cvs(apm01a.vendor_name$,2)
            gosub heading

            OutVect!.addItem(Translate!.getTranslation("AON_PRIMARY/SECONDARY:"))
            OutVect!.addItem(ivm05a.PRISEC_FLAG$)
            OutVect!.addItem(Translate!.getTranslation("AON_VENDOR'S_ITEM_NUMBER:"))
            OutVect!.addItem(ivm05a.vendor_item$)
            OutVect!.addItem(Translate!.getTranslation("AON_LEAD_TIME:"))
            OutVect!.addItem(str(ivm05a.lead_time:m9$))
            xwk=fnblank(columns)

            x$=Translate!.getTranslation("AON_QUANTITY_DISCOUNTS")
            gosub heading
            OutVect!.addItem(Translate!.getTranslation("AON_LEVEL_1_QUANTITY:"))
            OutVect!.addItem(str(ivm05a.break_qty_01:m2$))
            OutVect!.addItem(Translate!.getTranslation("AON_LEVEL_2_QUANTITY:"))
            OutVect!.addItem(str(ivm05a.break_qty_02:m2$))
            OutVect!.addItem(Translate!.getTranslation("AON_LEVEL_3_QUANTITY:"))
            OutVect!.addItem(str(ivm05a.break_qty_03:m2$))
 			
            OutVect!.addItem(Translate!.getTranslation("AON_LEVEL_1_COST:"))
            OutVect!.addItem(str(ivm05a.unit_cost_01:m3$))
            OutVect!.addItem(Translate!.getTranslation("AON_LEVEL_2_COST:"))
            OutVect!.addItem(str(ivm05a.unit_cost_02:m3$))
            OutVect!.addItem(Translate!.getTranslation("AON_LEVEL_3_COST:"))
            OutVect!.addItem(str(ivm05a.unit_cost_03:m3$))
 
            xwk=fnblank(columns)

            x$=Translate!.getTranslation("AON_LAST_PURCHASE")
            gosub heading

            x$=""
            if cvs(ivm05a.LAST_PO_DATE$,2)<>"" x$=func.formatDate(ivm05a.LAST_PO_DATE$)
            OutVect!.addItem(Translate!.getTranslation("AON_DATE:"))
            OutVect!.addItem(x$)
            OutVect!.addItem(Translate!.getTranslation("AON_LEAD_TIME:"))
            OutVect!.addItem(str(ivm05a.Last_Po_Lead:m9$))
            OutVect!.addItem(Translate!.getTranslation("AON_COST:"))
            OutVect!.addItem(str(ivm05a.Last_Po_Cost:m3$))
            xwk=fnblank(6)
            xwk=fnblank(6)

        wend

    rem --- Loop back for next record

    wend

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    out_action$="FORMAT"
    goto std_exit

sub_heading: 

    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(item_head$ +"  "+item_desc$)
    return

heading: rem --- Section heading

    j$ = fill(80,"-")
    if x$<>"" then j$(9,len(x$)+2)=" "+x$+" "
    OutVect!.addItem(j$)
    OutVect!.addItem("")

    for x=1 to 4
    rem OutVect!.addItem(fill(30,"-"))
        OutVect!.addItem("")
    next x

    return

print_stock_info: rem --- Print stocking information

    x$=Translate!.getTranslation("AON_STOCKING_INFORMATION")
    gosub heading
    let ivm10f_key$=firm_id$+"F"+buyer$
    find record (ivm10f_dev,key=ivm10f_key$,dom=*next) ivm10f$
    let buyer$=ivm10f.buyer_code$+" "+ivm10f.code_desc$
    if cvs(vendor$,2)<> "" then
        let apm01a_key$=firm_id$+vendor$,c1$(1)=nf$
        find record (apm01_dev,key=apm01a_key$,dom=*next) apm01a$
        let vendor$=func.alphaMask(apm01a.vendor_id$,vendmask$)+" "+apm01a.vendor_name$
    endif

    OutVect!.addItem(Translate!.getTranslation("AON_BUYER_CODE:_")+buyer$)
    OutVect!.addItem("")
    OutVect!.addItem(Translate!.getTranslation("AON_MAXIMUM_QUANTITY:"))
    OutVect!.addItem(str(maxqty:m2$))
    xwk = fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_STOCKING_VENDOR:_")+vendor$)
    OutVect!.addItem("")
    OutVect!.addItem(Translate!.getTranslation("AON_ORDER_POINT:"))
    OutVect!.addItem(str(ordpnt:m2$) + " " + ordpnt$)
    xwk = fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_LEAD_TIME:_")+str(leadtime:m9$))
    OutVect!.addItem("")
    OutVect!.addItem("EOQ:")
    OutVect!.addItem(str(eoq:m2$) + " " + eoq$)
    xwk = fnblank(2)
    OutVect!.addItem(Translate!.getTranslation("AON_ABC_CODE:_")+abc$)
    OutVect!.addItem("")
    OutVect!.addItem(Translate!.getTranslation("AON_SAFETY_STOCK:"))
    OutVect!.addItem(str(safety:m2$) + " " + safety$)

    xwk = fnblank(2)
    xwk = fnblank(6)
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,ignore_status
    if status <> 999 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
