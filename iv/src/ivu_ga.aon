rem --- Price/Cost Change Update
rem --- Program ivu_ga v8.0.0 05Dec2007 (ivu_ga)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 02:53:33)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


                seterr std_error
                setesc std_error

rem --- Retrieve the program path

                pgmdir$=stbl("+dir_pgm",err=*next)
                precision p[1]

rem --- Retrieve sysinfo data

                sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
                dim sysinfo$:sysinfo_template$
                sysinfo$=stbl("+sysinfo",err=*next)
                milestone=num(stbl("+milestone",err=*next),err=*next)
                firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

                files=5,begfile=1,endfile=files
                dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
                files$[1]="ive-05",ids$[1]="IVE_PRICECHG"
                files$[2]="ive-06",ids$[2]="IVE_COSTCHG"
                files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
                files$[4]="ivm-07",ids$[4]="IVM_LSMASTER"
                files$[5]="ivs_params",ids$[5]="IVS_PARAMS"
                call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
                if status goto std_exit
                ive05_dev=channels[1]
                ive06_dev=channels[2]
                ivm02_dev=channels[3]
                ivm07_dev=channels[4]
                ivs01a_dev=channels[5]
                more=1
                cntr=0
                cntr2=0
rem --- Dimension string templates

                dim ive05a$:templates$[1],ive06a$:templates$[2],ivm02a$:templates$[3],
:               ivm07a$:templates$[4],ivs01a$:templates$[5]

rem --- Assign form input values to local variables

                value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

                ivs01a_key$=firm_id$+"IV00"
                find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initializations

                row=5
                p=o0
                if o0>1 then let row=3,p=0

rem --- Background

                print @(0,row),'ce',

rem --- Options

                msg_id$="AON_RUN_QUERY"
                dim x$:stbl("+SYSINFO_TPL")
                dim msg_tokens$[1]
                x$=stbl("+SYSINFO")                                                            
                msg_tokens$[1]=x.task_desc$
                gosub disp_message
                if msg_opt$<>"Y" then goto std_exit
                call pgmdir$+"adc_progress.aon","N","","","","",0,arm01_dev,1,meter_num,status

rem --- Disallow 'M'enu option in Error Routine

                exit_ctrl=1

rem --- Position file

                read (channel,key=first$,dom=*next)

rem --- Main Loop Starts

While more

            k$=key(channel,end=done)
            if pos(first$=k$)<>1
                break
            endif
            on o0 goto Price_Change,Cost_Change,Price_Reversal

    While more

Price_Change: rem --- Price change

            read record (channel) ive05a$
            x$=ive05a.PRICE_CODE$
            break

Cost_Change: rem --- Cost change

            if ive06a.EFFECT_DATE$>sysinfo.system_date$
                cntr=1
                break
            endif
            read record (channel) ive06a$
            x$=fndate$(ive06a.EFFECT_DATE$)
            break

Price_Reversal: rem --- Price change reversal

            read (channel)
            w0$(1)=k$(1,6)+k$(10)
            x$=ive05a.PRICE_CODE$
            break
    Wend

rem --- if cntr=1, control exists main loop
    if cntr=1
        break
    endif
rem --- Get warehouse record

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        ivm02a.FIRM_ID$=firm_id$
        ivm02a.WAREHOUSE_ID$=ive05a.WAREHOUSE_ID$(5+p)
        extract record (ivm02_dev,key=ivm02a.FIRM_ID$+ivm02a.WAREHOUSE_ID$+ivm02a.ITEM_ID$,dom=Remove_Rec) ivm02a$
        on o0 goto Update_PriceList,Update_StdCost,Reverse_ListPrice

While more

Update_PriceList: rem --- Update list price

    ivm02a.PRI_PRICE_CD$=ivm02a.CUR_PRICE_CD$
    ivm02a.PRI_PRICE=ivm02a.CUR_PRICE
    ivm02a.CUR_PRICE_CD$=ive05a.PRICE_CODE$
    ivm02a.CUR_PRICE=ive05a.UNIT_PRICE


    break

Update_StdCost: rem --- Update standard cost

    ivm02a.UNIT_COST=ive05a.UNIT_PRICE
    ivm02a.STD_COST=ive05a.UNIT_PRICE


rem --- Update Lot/Serial Standard Cost

    if ls$<>"Y"
        break
    endif
    read (ivm07_dev,key=ivm02a.FIRM_ID$+ivm02a.WAREHOUSE_ID$+ivm02a.ITEM_ID$,dom=*next)
    While more
        ivm07a_key$=key(ivm07_dev,end=Update_WhseRecord)
        if pos(ivm02a.FIRM_ID$+ivm02a.WAREHOUSE_ID$+ivm02a.ITEM_ID$=ivm07a_key$)<>1
            cntr2=1
            break
        endif
        extract record (ivm07_dev,key=ivm07a_key$) ivm07a$
        ivm07a.UNIT_COST=ive05a.UNIT_PRICE
        ivm07a.STD_COST=ive05a.UNIT_PRICE
        write record (ivm07_dev,key=ivm07a_key$) ivm07a$
    Wend
    if cntr2=1
        break
    endif
Reverse_ListPrice: rem --- Reverse list price

    x$=ivm02a.CUR_PRICE_CODE$
    x=ivm02a.CUR_PRICE
    ivm02a.CUR_PRICE_CODE$=ivm02a.PRI_PRICE_CODE$
    ivm02a.CUR_PRICE=ivm02a.PRI_PRICE

rem    x=b[9],ivm02a.CUR_PRICE_CODE$=ivm02a.PRI_PRICE_CODE$,b[9]=b[10]

    ivm02a.PRI_PRICE_CODE$=x$
    ivm02a.PRI_PRICE=x
    break
Wend

Update_WhseRecord: rem --- Update warehouse record

    write record (ivm02_dev,key=ivm02a.FIRM_ID$+ivm02a.WAREHOUSE_ID$+ivm02a.ITEM_ID$) ivm02a$


Remove_Rec: rem --- Main Loop Ends

remove (channel,key=k$,dom=done)
Wend

done: rem --- All done

    call pgmdir$+"adc_batchdelete.aon",status
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
