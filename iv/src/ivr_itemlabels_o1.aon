rem --- Inventory Item Labels
rem --- Program ivr_itemlabels_o1.aon v8.0.0 16Jul2007 (ivr_1b)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:02:40)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Init Data

    x8$="First"
    if height<6 x9=height else x9=6
    another$="A"

rem --- Open printer
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

Options: rem --- Options
    more=1
    while more
        call pgmdir$+"adc_yesno.aon",0,"Do You Wish To Print "+another$+" Test Pattern",3,v$,v3
        if v3=4 goto std_exit
        switch pos(v$="YN")
        case 1;rem v$="Y"  
            dim w0$(across*width*6,"X")
            x0=1
            gosub Print
            another$="Another"
        break
        case 2; rem v$="N" no more test patterns
            more=0
        break
        case default
            continue
        break
        swend
    wend

    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm02_dev,1,meter_num,status
    more=1

rem --- Loop Starting

    sql_prep$="select ivm_itemwhse.firm_id, ivm_itemwhse.item_id,"
    sql_prep$=sql_prep$+"ivm_itemwhse.warehouse_id, ivm_itemmast.product_type,"
    sql_prep$=sql_prep$+"ivm_itemmast.item_type "
    sql_prep$=sql_prep$+"FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
    where_clause$="WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if beg_whse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+beg_whse$+"' AND "
    if end_whse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+end_whse$+"' AND "
    if beg_prod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+beg_prod$+"' AND "
    if end_prod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+end_prod$+"' AND "
    if beg_item$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+beg_item$+"' AND "
    if end_item$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+end_item$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    if where_clause$<>"" sql_prep$=sql_prep$+where_clause$

    sql_chan=1
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read
    while more

        read_tpl$=sqlfetch(sql_chan,err=*break)

        read record (ivm01_dev,key=firm_id$+read_tpl.item_id$,dom=*continue) ivm01a$
        rcnt=rcnt+1
        if item_type$<>"" then
            if ivm01a.item_type$<>item_type$ then
                continue
            endif
        endif
        read record (ivm02_dev,key=firm_id$+read_tpl.warehouse_id$+read_tpl.item_id$,dom=*continue) ivm02a$

rem --- Setup

        ivm01a.item_desc$(1)=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        gosub Assemble

    wend ;rem --- Loop Ending

done: rem --- End of label printing

    gosub Print
    goto std_exit

Assemble: rem --- Assemble

    x3=0
    while x3<=w3
        x3=x3+1
        if x3>w3 break
        if x0>=across gosub Print
        x0=x0+1
        if mod(rcnt,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","",ivm01a.item_id$,0,0,1,0,ignore_status
        w0$(width*(x0-1)+1,width)=n1$
        w0$(width*(across+x0-1)+1,width)=cvs(ivm01a.item_id$,3)+" Whse "+ivm02a.warehouse_id$
        w0$(width*(2*across+x0-1)+1,width)=ivm01a.item_desc$(1,width)
        w0$(width*(3*across+x0-1)+1,width)=ivm01a.item_desc$(width+1)
        x=pos(" "<>w0$(width*(3*across+x0-1)+1,width),-1)
        if x+8<width then
            if x=0 offset=-1 else offset=0
            w0$(width*(3*across+x0-1)+x+2+offset,8)="Prod "+ivm01a.product_type$
        endif
        w0$(width*(4*across+x0-1)+1,width)="Cycle Code "+ivm02a.cycle_cd$+"Location "+ivm02a.location$
    wend
    return

Print: rem --- Print

    if x0=0 return
    if x8$="First" for x=0 to height-1; print (printer_dev)""; next x;let x8$=""
    for x=0 to x9-1
        print (printer_dev)@(0+w9),w0$(x*across*width+1,across*width)
    next x
    if height>6 print (printer_dev)w9$(1,height-7)
    x0=0
    w0$(1)=""
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

   def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
