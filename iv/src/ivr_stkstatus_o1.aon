rem --- Inventory Stock Status Report (Report Overlay)
rem --- Program ivr_stkstatus_o1.aon v8.0.0 16Jul2007 (ivr_bb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:54:33)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initialize HEADINGS$

    headings$[1]=headings$[1]+" By Warehouse"
    headings$[6]="[HEADER]"
    if begitem$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+begitem$
    if enditem$="" headings$[3]=headings$[3]+" -- To Item: Last" else headings$[3]=headings$[3]+" -- To Item: "+enditem$
    if begprod$="" headings$[4]="From Product: First" else headings$[4]="From Product: "+begprod$                
    if endprod$="" headings$[4]=headings$[4]+" -- To Product: Last" else headings$[4]=headings$[4]+" -- To Product: "+endprod$
    if type$="" headings$[5]="All Item Types" else headings$[5]="Item Type: "+type$

    dim columns$[9,10]
    columns=10
    columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="15"
    columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="25"
    columns$[2,0]="Location",              columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]="UM",                    columns$[3,1]="C",columns$[3,2]="5"
    columns$[4,0]="On Hand",               columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$
    columns$[5,0]="Committed",             columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m2$
    columns$[6,0]="Available",             columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$
    columns$[7,0]="On Order",              columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$
    columns$[8,0]="Unit Cost",             columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m3$
    columns$[9,0]="Total Value",           columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$,columns$[9,10]="T"

rem --- Loop Starting

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ivm_itemwhse.firm_id, ivm_itemwhse.item_id, ivm_itemwhse.warehouse_id, "
    sql_prep$=sql_prep$+"       ivm_itemmast.product_type, ivm_itemmast.item_type "
    sql_prep$=sql_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"    ON ivm_itemwhse.item_id = ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id = ivm_itemmast.firm_id "

    where_clause$="WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
    if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND "
    if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    where_clause$=where_clause$+" ORDER BY ivm_itemwhse.warehouse_id,ivm_itemmast.product_type "
    sql_prep$=sql_prep$+where_clause$

    call stbl("+DIR_PGM")+"adc_progress.aon","N","IVM_ITEMWHSE","","","",0,ivm02_dev,1,meter_num,status
    total_recs=0
    
    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read

    recs=0
    while more
        read_tpl$=sqlfetch(sql_chan,err=*break) 
        product$=read_tpl.product_type$
        item$=read_tpl.item_id$
        whse$=read_tpl.warehouse_id$

    rem --- Level breaks?

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

        if whse$<>t0$ then gosub whse_break
        if product$<>t1$ then gosub product_break
        dim item$[2],whse$[2],w[20]
        ivm01a_key$=firm_id$+item$
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        if type$<>"" and ivm01a.item_type$<>type$ then continue
        action$="A"
        item$[0]=firm_id$
        item$[2]=item$
        item$[1]=whse$,action$=""
        call pgmdir$+"ivc_whseinfo.aon",action$,files[all],item$[all],whse$[all],w[all],value,status,rd_table_chans$[all]

    rem --- Print detail line

        x$=""
        location$=""
        cost$=""
        available=w[0]-w[2]
        location$=whse$[1](1,10)
        x$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        if h9$<>"" gosub prodheading

        OutVect!.addItem(item$)
        OutVect!.addItem(x$)
        OutVect!.addItem(location$)
        OutVect!.addItem(ivm01a.unit_of_sale$)
        OutVect!.addItem(str(w[0]))
        OutVect!.addItem(str(w[2]))
        OutVect!.addItem(str(available))
        OutVect!.addItem(str(w[1]))
        OutVect!.addItem(str(w[11]))
        OutVect!.addItem(str(value))
        recs=recs+1

    rem --- Accumulate totals

        product=product+value
        warehouse=warehouse+value
        report=report+value
    wend

rem ----  Loop Ending

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub whse_break
    total$="Report"
    total=report
    gosub print_total
    goto std_exit


prodheading: rem --- Product subheading

    xwk=fnblank(columns)
    OutVect!.addItem(h9$)
    OutVect!.addItem(prod_desc$)
    xwk=fnblank(columns-2)
    xwk=fnblank(columns)
    h9$=""
    return

whse_break: rem --- Warehouse Break

    if t0$<>"" then
        gosub product_break
        let total$="Warehouse "+t0$,total=warehouse
        gosub print_total
    endif

    if done return
    t0$=whse$
    ivm10c.short_name$="(Not on File)"
    warehouse=0
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)
    return 

product_break: rem --- Product break

    if t1$<>"" then
        let total$="Product "+t1$,total=product
        gosub print_total
    endif

    if done return
    t1$=product$
    prod_desc$="(Not on File)"
    product=0
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    let h9$="Product Type "+t1$
    prod_desc$=ivm10a.code_desc$
    return

print_total: rem --- Print total line

    total$="Total For "+cvs(total$,2)
    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns)))
    OutVect!.addItem("")
    OutVect!.addItem(total$)
    xwk=fnblank(columns-3)
    OutVect!.addItem(str(total))
    xwk=fnblank(columns)                 
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
