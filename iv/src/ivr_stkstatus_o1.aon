rem --- Inventory Stock Status Report (Report Overlay)
rem --- Program ivr_stkstatus_o1.aon v8.0.0 16Jul2007 (ivr_bb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:54:33)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem --- Document initializations
           OutVect!=bbjAPI().getSysGui().makeVector()
           HdrVect!=bbjAPI().getSysGui().makeVector()
           BrkVect!=bbjAPI().getSysGui().makeVector()
           rep_date$=date(0:"%Mz/%Dz/%Yd")
           rep_date_stamp$=date(0:"%Yd%Mz%Dz")
           rep_time$=date(0:"%hz:%mz %p")
           rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve key template

            if level$="I" ivm03_dev=ivm03a_dev; call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPROD","PRIMARY",ivm03_key_tpl$,table_chans$[all],status$
            if level$<>"I" ivm03_dev=ivm03c_dev; call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPRWH","PRIMARY",ivm03_key_tpl$,table_chans$[all],status$
            dim ivm03a_key$:ivm03_key_tpl$

            more=1

rem --- Print positions

            gosub Position
   
rem --- Position files

            call pgmdir$+"adc_progress.aon","N","","","","",0,ivm03_dev,1,meter_num,status

            first$=firm_id$+"A"
            ivm03a_key$=first$+begprod$
            p=0
            if level$="W" first$=firm_id$+"C",ivm03a_key$=first$+begwhse$,p=2
            read (ivm03_dev,key=ivm03a_key$,dom=*next)

rem ----  Loop Starting

    While More

            ivm03a_key$=key(ivm03_dev,end=*break)
            if pos(first$=ivm03a_key$)<>1 break
            if level$="W" whse$=ivm03a_key.warehouse_id$
            product$=ivm03a_key.product_type$
            item$=ivm03a_key.item_id$
            if level$<>"W" then

rem --- By Item: Valid Product/Item?

            if endprod$<>"" if product$>endprod$  break
            if begitem$<>"" then
                if item$<begitem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_a$+
:                   ivm03a_key.product_type$+begitem$,dir=0,dom=*Continue)
                    Continue
                endif
            endif
            if enditem$<>"" then
                if item$>enditem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_a$+
:                   ivm03a_key.product_type$+$FF$,dom=*Continue)
                    Continue
                endif
            endif
            x$=product$+" "+item$(1,p[0])
            
        else   
rem --- By Warehouse: Valid Warehouse/Product/Item?

            if endwhse$<>"" if whse$>endwhse$ break
            if begprod$<>"" then
                if product$<begprod$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+begprod$,dom=*Continue)
                    Continue
                endif
            endif
            if endprod$<>"" then
                if product$>endprod$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+$FF$,dom=*Continue)
                    Continue
                endif
            endif
            if begitem$<>"" then
                if item$<begitem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+ivm03a_key.prod_type$+begitem$,dom=*Continue)
                    Continue
                endif
            endif
            if enditem$<>"" then 
                if item$>enditem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$ +
:                   ivm03a_key.warehouse_id$+ivm03a_key.prod_type$+$FF$,dom=*Continue)
                    Continue
                endif
            endif
            x$=whse$+" "+product$+" "+item$(1,p[0])
            
        endif 

rem --- Level breaks?

            call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,meter_num,status

            if level$="W" if whse$<>t0$ gosub Whse
            if product$<>t1$ gosub Product
            read (ivm03_dev)
            dim item$[2],whse$[2],w[20]
            ivm01a_key$=firm_id$+item$
            find record (ivm01_dev,key=ivm01a_key$,dom=*Continue) ivm01a$
            if type$<>"" then
                if ivm01a.Item_type$<>type$ then
                    Continue
                endif
            endif
            action$="A"
            item$[0]=firm_id$
            item$[2]=item$
            if level$="W" item$[1]=whse$,action$=""
            call pgmdir$+"ivc_whseinfo.aon",action$,files[all],item$[all],whse$[all],w[all],value,status,rd_table_chans$[all]

rem --- Print detail line

            x$=""
            location$=""
            cost$=""
            available=w[0]-w[2]
            needed=1+split
            if h9$<>"" needed=needed+2
            if level$="W" location$=whse$[1](1,10),cost$=str(w[11]:m3$)
            if split=0 x$=fnitem$(ivm01a.Item_Desc$,p[3],p[4],p[5])
            if l+needed>l9 
            if h9$<>"" gosub ProdHeading

           if level$="W"
                    OutVect!.addItem(ivm01a_key$(3))
                    OutVect!.addItem(x$)
                    OutVect!.addItem(location$)
                    OutVect!.addItem(ivm01a.unit_of_sale$)
                    OutVect!.addItem(str(w[0]:m2$))
                    OutVect!.addItem(str(w[2]:m2$))
                    OutVect!.addItem(str(available:m2$))
                    OutVect!.addItem(str(w[1]:m2$))
                    OutVect!.addItem(cost$)
                    OutVect!.addItem(str(value:m1$))
           endif
           if level$="I"   
                    OutVect!.addItem(ivm01a_key$(3))
                    OutVect!.addItem(x$)
                    OutVect!.addItem(ivm01a.unit_of_sale$)
                    OutVect!.addItem(str(w[0]:m2$))
                    OutVect!.addItem(str(w[2]:m2$))
                    OutVect!.addItem(str(available:m2$))
                    OutVect!.addItem(str(w[1]:m2$))
                    OutVect!.addItem(str(value:m1$))
           endif 
       
                    
            l=l+1+split
            if split<>0 then
                x$=fnitem$(ivm01a.Item_Desc$,p[3],p[4],p[5])

            endif
rem --- Accumulate totals

            product=product+value
            warehouse=warehouse+value
            report=report+value
    wend

rem ----  Loop Ending

done: rem --- All done

    done=1
    if level$="W" gosub Whse
    if level$="I" gosub Product
    total$="Report"
    total=report
    gosub PrintTotalLine
    goto std_exit


ProdHeading: rem --- Product subheading

    if l+2>l9 
   
      if level$="W"
                xwk=fnblank(10)
                OutVect!.addItem(h9$)
                xwk=fnblank(9)
                xwk=fnblank(10)
            endif
      if level$="I"
                xwk=fnblank(8)
                OutVect!.addItem(h9$)
                xwk=fnblank(7)
                xwk=fnblank(8)
            endif
    l=l+2
    h9$=""
    return

InitHeading: rem --- Initialize HEADINGS$

            dim h1$(width),h2$(width),h6$(width)
            if level$="I" headings$[1]=headings$[1]+" By Item"
            if level$="W" headings$[1]=headings$[1]+" By Warehouse"

             if level$="W"  headings$[6]="[HEADER]"
             if begitem$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+begitem$
                        if enditem$="" headings$[3]=headings$[3]+" -- To Item: Last" else headings$[3]=headings$[3]+" -- To Item: "+enditem$
                        if begprod$="" headings$[4]="From Product: First" else headings$[4]="From Product: "+begprod$                
                        if endprod$="" headings$[4]=headings$[4]+" -- To Product: Last" else headings$[4]=headings$[4]+" -- To Product: "+endprod$
                        if type$="" headings$[5]="All Item Types" else headings$[5]="Item Type: "+type$


            if level$="W"
               dim columns$[9,10]
                        columns=9
                            columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="10"
                            columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="15"
                            columns$[2,0]="Location",              columns$[2,1]="C",columns$[2,2]="10"
                            columns$[3,0]="UM",                    columns$[3,1]="C",columns$[3,2]="10"
                            columns$[4,0]="On Hand",               columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$
                            columns$[5,0]="Committed",             columns$[5,1]="N",columns$[5,2]="12",columns$[5,3]=m2$
                            columns$[6,0]="Available",             columns$[6,1]="N",columns$[6,2]="12",columns$[6,3]=m2$
                            columns$[7,0]="On Order",              columns$[7,1]="N",columns$[7,2]="12",columns$[7,3]=m2$
                            columns$[8,0]="Unit Cost",             columns$[8,1]="C",columns$[8,2]="10"
                            columns$[9,0]="Total Value",           columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$
           else
                dim columns$[7,10]
                        columns=7
                            columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="10"
                            columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="15"
                            columns$[2,0]="UM",                    columns$[2,1]="C",columns$[2,2]="10"
                            columns$[3,0]="On Hand",               columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m2$
                            columns$[4,0]="Committed",             columns$[4,1]="N",columns$[4,2]="12",columns$[4,3]=m2$
                            columns$[5,0]="Available",             columns$[5,1]="N",columns$[5,2]="12",columns$[5,3]=m2$
                            columns$[6,0]="On Order",              columns$[6,1]="N",columns$[6,2]="12",columns$[6,3]=m2$
                            columns$[7,0]="Total Value",           columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$
          endif                
    

    return

Whse: rem --- Warehouse Break

                    if t0$="" then goto new_whse
                    if t0$<>"" then
                        gosub Product
                       let total$="Warehouse "+t0$,total=warehouse
                        gosub PrintTotalLine
                    endif
new_whse:
                    if done return
                    t0$=whse$
                    ivm10c.short_name$="(Not on File)"
                    l=l9+1
                    warehouse=0
                    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
                    x$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2)
                           BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
                           HdrVect!.addItem(x$)
                    return 

Product: rem --- Product break

                    if t1$="" then goto new_prodtype
                    if t1$<>"" then
                        let total$="Product "+t1$,total=product
                        gosub PrintTotalLine
                    endif
new_prodtype:
                    if done return
                    let t1$=product$,ivm10a.code_desc$="(Not on File)",product=0
                    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
                    let h9$="Product Type "+t1$+" "+ivm10a.code_desc$
                    return

PrintTotalLine: rem --- Print total line

                   if l+2>l9 

                    let l=l+2,total$="Total For "+cvs(total$,2)

                      if level$="W"
                                xwk=fnblank(8)
                                OutVect!.addItem(total$)
                                OutVect!.addItem(str(total:m1$))
                                xwk=fnblank(10)
                     endif
                     if level$="I"
                                xwk=fnblank(6)
                                OutVect!.addItem(total$)
                                OutVect!.addItem(str(total:m1$))
                                xwk=fnblank(8)
                    endif
                    return

Position: rem --- Print positions

                    o[1]=p[0]+1
                    o[9]=width-m1
                    o[8]=o[9]
                    if level$="W" o[8]=o[9]-m3
                    o[7]=o[8]-m2
                    o[6]=o[7]-m2
                    o[5]=o[6]-m2
                    o[4]=o[5]-m2
                    o[3]=o[4]-3
                    o[2]=o[3]
                    split=0
                    if level$="W" o[2]=o[3]-11
                    if p[0]+p[3]+p[4]+p[5]>o[2] split=1
                    gosub InitHeading
                    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

    end
