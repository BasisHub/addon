rem --- Process Lot/Serial Inventory Transaction Display Window
rem --- Program ivc_tb v8.0.0 05Dec2007 (ivc_tb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 10:21:14)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


        seterr std_error
        setesc std_error
        enter action$,channels[all],params[all],params$[all],selection$,fkey

rem --- Retrieve the program path

        pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+sysinfo",err=*next)
        milestone=num(stbl("+milestone",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=4,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="ivm-01",ids$[1]="IVM_ITEMMAST"
        files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
        files$[3]="ivt-01",ids$[3]="IVT_LSTRANS"
        files$[4]="ivt-02",ids$[4]="IVX_LSCUST"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        ivm01_dev=channels[1]
        ivs01a_dev=channels[2]
        ivt01_dev=channels[3]
        ivt02_dev=channels[4]

rem --- Dimension string templates

        dim ivm01a$:templates$[1],ivs01a$:templates$[2],ivt01a$:templates$[3],
:       ivt02a$:templates$[4]

rem --- Assign form input values to local variables

        value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Determine interface

        call pgmdir$+"syc_dg.bbx",sysgui_dev,event$,event_len,sysfin$,sysfin,ui$,status
        if status then goto std_exit
        if ui$="W" then let parent_context=sysfin.current_context

rem --- Parameters

        dim p[5]
        action=params[7]
        maxrow=params[8],width=params[9],height=params[10]
        call pgmdir$+"syc_sa.bbx::init",str(ui$),maxrow,pages,linfo$[all]
        customer$=params$[12]
        product$=params$[13]
        begdate$=params$[5]
        enddate$=params$[6],name$=params$[7]
        m4$=params$[9]
        m2$=params$[10],m3$=params$[11],lotser$=params$[14]
        m4=len(m4$)
        m2=len(m2$),m3=len(m3$),ivt02_dev=channels[5]
        ivt01_dev=channels[6]
        item$=params$[15],p[0]=params[0]
        p[1]=params[12]
        p[2]=params[11],p[3]=params[4],p[4]=params[5]
        p[5]=params[6]
        firm_id$=params$[0],ivm01_dev=channels[0]

rem --- Initializations

        precision params[12]
        dim x0$(61),b0$(52),b1$(96),b2$(16),b[4],o[2],values[6],masks$[6]
        dim llist$[pages,maxrow,5],more$[pages,maxrow,1],a0$(22),a1$(60)
        dim buf$(width-2),message$[0]
        l=1
        found=0,row=1,page=1,selection$="",h0=width-1,p=5+max(p[2],15)
        o[2]=h0-m4
        o[1]=o[2]-m3,o[0]=o[1]-m2,dw=((h0-m2-m3-m4)-16)+1
        listbox_id=8000
        header_id=2000,footer_id=2001; rem needs to match resource
        more=1
        cntr=1

rem --- More Inits
    for i=0 to 6
        values[i]=params[i]
        masks$[i]=params$[i]
    next i
    heading$=params$[16]
    footing$=params$[17]

rem --- Display resource
    if ui$<>"W" 
       call pgmdir$+"syc_wa.bbx",0,width,height,0,7,"",name$
       print @(0,0),'sb','br',heading$,'er','sf',
       print @(0,height-3),'sb','br',footing$,'er','sf',
    else
rem --- gui
        dim resparams$[20],resparams[20],controls[2]
        resparams[0]=parent_context
        resparams$[0]=params$[18],resparams[1]=4,resparams[2]=20000; rem child-window 20000
        call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
        my_context=resparams[0]
        controls[0]=listbox_id,controls[1]=header_id,controls[2]=footer_id
        call pgmdir$+"syc_ff.bbx","",my_context,0,2,controls[all],ignore_status
        call pgmdir$+"syc_rs.bbx","",my_context,header_id,heading$,0,"",ignore_status
        call pgmdir$+"syc_rs.bbx","",my_context,footer_id,footing$,0,"",ignore_status
        linfo$[0]=str(my_context)
        linfo$[1]=str(listbox_id)
    endif

rem --- Position file

    keyval$=firm_id$+customer$
    x0$(1)=keyval$
    if product$<>"" then let x0$(9)=product$+lotser$
    read (ivt02_dev,key=x0$,dom=*next)

    while more 

        ivt02a_key$=key(ivt02_dev,end=eof)
        read (ivt02_dev)
        if pos(keyval$=ivt01a_key$)<>1 then
            break
        endif
        if product$<>"" then if ivt02a_key.PRODUCT_TYPE$<>product$ then
            break
        endif
        if enddate$<>"" then
            if ivt02a_key.TRANS_DATE$>enddate$ then
                read (ivt02_dev,key=ivt02a.FIRM_ID$+ivt02a.CUSTOMER_NO$+ivt02a.PRODUCT_TYPE$+ivt02a.LOTSER_NO$+$ff$,dom=end_exit)
            endif
        endif
        if begdate$<>"" then
            if ivt02a_key.TRANS_DATE$<begdate$ then
                read (ivt02_dev,key=ivt02a.FIRM_ID$+ivt02a.CUSTOMER_NO$+ivt02a.PRODUCT_TYPE$+ivt02a.LOTSER_NO$+begdate$,dom=end_exit)
            endif
        endif
        if lotser$<>"" then
            if ivt02_key.LOTSER_NO$(12,p[2])<>lotser$ then
                read (ivt02_dev,key=ivt02a.FIRM_ID$+ivt02a.CUSTOMER_NO$+ivt02a.PRODUCT_TYPE$+ivt02a.LOTSER_NO$+$ff$,dom=end_exit)
            endif
        endif
        if item$<>"" then
            if ivt02_key.ITEM_ID$(37,p[0])<>item$(1,p[0]) then
                read (ivt02_dev,key=ivt02a.FIRM_ID$+ivt02a.CUSTOMER_NO$+ivt02a.PRODUCT_TYPE$+ivt02a.LOTSER_NO$+ivt02a.TRANS_DATE$+ivt02a.WAREHOUSE_ID$+ivt02a.ITEM_ID$+$ff$,dom=end_exit)
            endif
        endif

    rem --- Level break?

        if (ivt02a.PRODUCT_TYPE$+ivt02a.LOTSER_NO$)+(ivt02a.WAREHOUSE_ID$+ivt02a.ITEM_ID$)<>t0$ 
           ivm01a.FIRM_ID$=firm_id$
           ivm01a.ITEM_ID$=ivt02.LOTSER_NO$
           t0$=(ivt02a.PRODUCT_TYPE$+ivt02a.LOTSER_NO$)+(ivt02a.WAREHOUSE_ID$+ivt02a.ITEM_ID$)
           find record (ivm01_dev,key=ivm01a.FIRM_ID$+ivm01a.ITEM_ID$,dom=*next) ivm01a$
           buf$(2)=(ivt02a.PRODUCT_TYPE$)+" "+ivt02.LOTSER_NO$(1,p[2])
           buf$(p)=(ivt02a.WAREHOUSE_ID$)+" "+ivt02a.ITEM_ID$(1,p[0])+" "+fnitem$(ivm01a.FIRM_ID$+ivm01a.ITEM_ID$+ivm01a.ITEM_DESC$,p[3],p[4],p[5])
       endif 


    rem --- Read ivt-01 record

        ivt01a.FIRM_ID$=ivt02a.FIRM_ID$
        ivt01a.WAREHOUSE_ID$=ivt02a.WAREHOUSE_ID$
        ivt01a.ITEM_ID$=ivt02a.ITEM_ID$
        ivt01a.LOTSER_NO$=ivt02a.LOTSER_NO$
        ivt01a.TRANS_DATE$=ivt02a.TRANS_DATE$
        ivt01a.IV_HIST_SEQ$=ivt02a.IV_HIST_SEQ$
        find record (ivt01_dev,key=ivt01a.ITEM_ID$+ivt01a.WAREHOUSE_ID$+
:       ivt01a.ITEM_ID$+ivt01a.LOTSER_NO$+ivt01a.TRANS_DATE$+
:       ivt01a.IV_HIST_SEQ$,dom=end_exit) ivt01a$

    rem --- Format detail fields

        dim description$[2]
        call pgmdir$+"ivc_td.bbx",b1$,channels[all],values[all],masks$[all],type$,description$[all]
        needed=1
        if cvs(description$[1],2)<>"" then let needed=needed+1
        if cvs(buf$,2)<>"" then let needed=needed+1

    rem --- Display page?

        if l+needed>=maxrow 
           gosub lightbar
           if fkey=1 or fkey=4 or selection$<>""
                cntr=0
                break
           endif
    rem    if fkey=1 then goto all_done
    rem    if fkey=4 then goto all_done
    rem    if selection$<>"" then goto all_done
           l=1
           row=1
       endif 

    rem --- Store heading

        if cvs(buf$,2)<>""
           llist$[page,row,1]=buf$
           row=row+1,found=1,l=l+1,buf$(1)=""
        endif 


    rem --- Store detail line

        dim g1$(width-2)
        g1$(2)=fndate$(ivt01a.TRANS_DATE$)+" "+type$
        g1$(16,dw)=description$[0]
        g1$(o[0])=str(ivt01a.TRANS_QTY:m2$)
        g1$(o[1])=str(ivt01a.UNIT_COST:m3$)
        g1$(o[2])=str(ivt01a.UNIT_PRICE:m4$)
        llist$[page,row,1]=g1$,row=row+1,found=1,l=l+1
        if description$[1]<>"" 
           g1$(1)=""
           g1$(16,dw)=description$[1]
           llist$[page,row,1]=g1$
           row=row+1,l=l+1
       endif

    end_exit:

        rem --- Loop back for next record
    wend

rem check the value of cntr - 1 or 0

    eof: rem --- No more transactions
    if cntr=1
        if found then
            selection$="|EOF"
            gosub lightbar
        else
            message$[0]="No transactions found (<Enter>=Continue)"
            call pgmdir$+"adc_stdmessage.aon",3,message$[all],0,-1,-1,ignore$,v3
        endif
    endif

    all_done: rem --- All done

        if name$<>"" then call pgmdir$+"syc_wd.bbx",name$
        if ui$="W" then call pgmdir$+"syc_dc.bbx",my_context,parent_context,ignore_status
        if selection$="END" then let fkey=4,selection$=""
        goto std_exit
   lightbar:rem --- Window processing
        let mode=action,selection=0
        call pgmdir$+"syc_sa.bbx",mode,llist$[all],more$[all],linfo$[all],selection$,selection,page,pages,maxrow,name$,height,width,fkey
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
