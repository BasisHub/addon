rem --- EOQ, Order Point & Safety Stock Report (Update Overlay)
rem --- Program ivu_oa v8.0.0 21Dec2007 (ivu_oa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/21/2007 09:39:44)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


            seterr std_error
            setesc std_error

rem --- Retrieve the program path

            pgmdir$=stbl("+dir_pgm",err=*next)
            precision p[1]

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+sysinfo",err=*next)
            milestone=num(stbl("+milestone",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

            files=5,begfile=1,endfile=files
            dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
            files$[1]="ivm-01",ids$[1]="IVM_ITEMMAST"
            files$[2]="ivm-02",ids$[2]="IVM_ITEMWHSE"
            files$[3]="ivs_params",ids$[3]="IVS_PARAMS"
            files$[4]="ivw-11",ids$[4]="IVW_EOQPROD"
            files$[5]="ivw-21",ids$[5]="IVW_EOQWHSE"
            call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
            if status goto std_exit
            ivm01_dev=channels[1]
            ivm02_dev=channels[2]
            ivs01a_dev=channels[3]
            ivw11_dev=channels[4]
            ivw21_dev=channels[5]

rem --- Dimension string templates

            dim ivm01a$:templates$[1],ivm02a$:templates$[2],ivs01a$:templates$[3],
:           ivw11a$:templates$[4],ivw21a$:templates$[5]

rem --- Assign form input values to local variables

            value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

            ivs01a_key$=firm_id$+"IV00"
            find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initializations

            more=1
            dim update$[2],prompts$[2],o[2]
            update$[0]="Y"
            o[0]=3,prompts$[0]="Update Economic Order Quantities"
            update$[1]="Y"
            o[1]=4,prompts$[1]="Update Order Point Quantities"
            update$[2]="Y"
            o[2]=5,prompts$[2]="Update Safety Stock Quantities"
            if carry=0 then let update$[0]="N"

rem --- Display Resource

            dim resparams$[20],resparams[20]
            resaction$=""
            resparams$[0]=pgm(-2)
            call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
            if status then goto std_exit
            rem gosub flow_initializations

            rem this for...next loop is used to transfer control to label:flow_control, eliminating goto statement
            for i= 0 to 1
                exitto flow_control
            next i
            

Optns: rem --- Options
             x=i0

Optns_2:
            v2$=update$[x]
            v4$=prompts$[x]+" (Y/N)?",v$=v2$
            v0$="Y"
            v1$="C",v3$="",v0=1,v1=40,v2=o[x],control_id=3000+x
            if x<>0 or carry<>0 then
                 on v3 goto Optns_1,Optns_2,flow_control,Optns_2,std_exit,Optns_1,std_exit
            endif

Optns_1:
            update$[x]=v$
            for i= 0 to 1
                exitto flow_control
            next i
            

rem --- Disallow 'M'enu option in Error Routine --- Main Loop

while more
          exit_ctrl=1

rem --- Position file

    if level$<>"W" then
            read (ivw11_dev,key=firm_id$,dom=*next)

        rem --- Read next ivw-11 record
        while more

                ivw11a_key$=key(ivw11_dev,end=*break)
                if pos(firm_id$=ivw11a_key$)<>1 then
                    break
                endif
                call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                read record (ivw11_dev) ivw11a$

            rem --- Update item

                ivm01a.FIRM_ID$=firm_id$
                ivm01a.ITEM_ID$=ivw21a.ITEM_ID$
                find record (ivm01_dev,key=ivm01a.FIRM_ID$+ivm01a.ITEM_ID$,dom=*continue) ivm01a$
                if ivw12a.UNIT_COST<>0 then
                    if update$[0]="Y" then
                        if ivm01a.EOQ_CODE$<>"N" then
                            ivm01a.EOQ_CODE$="D"
                            ivm01a.EOQ=ivw21a.EOQ
                        endif
                    endif
                endif
            
                if update$[1]="Y" then
                    if ivm01a.ORD_PNT_CODE$<>"N" then
                        ivm01a.ORD_PNT_CODE$="D"
                        ivm01a.ORDER_POINT=ivw21a.ORDER_POINT
                    endif
                endif
                if update$[2]="Y" then
                    if ivm01a.SAF_STK_CODE$<>"N" then
                        ivm01a.SAF_STK_CODE$="D"
                        ivm01a.SAFETY_STOCK=ivw21a.SAFETY_STOCK
                    endif
                endif
                write record (ivm01_dev,key=ivm01a.FIRM_ID$+ivm01a.ITEM_ID$) ivm01a$

            rem --- Loop back for next record
        wend
    endif

rem --- Position file

        if level$="I" then goto std_exit
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        read (ivw21_dev,key=firm_id$,dom=*next)

        while more
                rem --- Read next ivw-21 record

                    ivw21a_key$=key(ivw21_dev,end=std_exit)
                    if pos(firm_id$=ivw21a_key$)<>1 then
                        goto std_exit
                    endif
                    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                    read record (ivw21_dev) ivw21a$

                rem --- Update warehouse

                 
                    ivm02a.FIRM_ID$=ivw21a.FIRM_ID$
                    ivm02a.WAREHOUSE_ID$=ivw21a.WAREHOUSE_ID$
                    ivm02a.ITEM_ID$=ivw21a.ITEM_ID$
                    find record (ivm02_dev,key=ivm02a.FIRM_ID$+ivm02a.WAREHOUSE_ID$+ivm02a.ITEM_ID$,dom=*continue) ivm02a$
                    if ivw21a.UNIT_COST<>0 then
                        if update$[0]="Y" then
                            if ivm02a.EOQ_CODE$<>"N" then
                                ivm02a.EOQ_CODE$="D"
                                ivm02a.EOQ=ivw21a.EOQ
                            endif
                        endif
                    endif

                    if update$[1]="Y" then
                        if ivm02a.ORD_PNT_CODE$<>"N" then
                            ivm02a.ORD_PNT_CODE$="D"
                            ivm02a.ORDER_POINT=ivw21a.ORDER_POINT
                        endif
                    endif
                    if update$[2]="Y" then
                        if ivm02a.SAF_STK_CODE$<>"N" then
                            ivm02a.SAF_STK_CODE$="D"
                            ivm02a.SAFETY_STOCK=ivw21a.SAFETY_STOCK
                        endif
                    endif
                    write record (ivm02_dev,key=ivm02a.FIRM_ID$+ivm02a.WAREHOUSE_ID$+ivm02a.ITEM_ID$) ivm02a$

                rem --- Loop back for next record
        wend


        flow_control:

            switch v3
                case 0
                case 1
                case 3; let i0=i0+1; break
                case 2; if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1) fi; break
                case 4; let i0=i0_done; break
                case default; exitto done_v3
            swend
            on i0 goto Optns,Optns,Optns,done,done

        done: rem --- Correct?

            if !validate then 
                    gosub display_fields
                    v0$="S"
                    v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
                    

                done_v3:
                    on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done

                done_test:
                    on pos(v$="YN") goto flow_control,validate_input,do_nonkey1

                validate_input:
                    validate=1
                    old_control_id=0

                do_nonkey1:
                    v3=0
                    i0=i0_nonkey1-1

                    goto flow_control
            else
                    let validate=0
            endif

            if update$[0]="N" and update$[1]="N" and update$[2]="N" then goto std_exit
            msg_id$="AON_UPDT_QUERY"
            dim x$:stbl("+SYSINFO_TPL")
            dim msg_tokens$[1]
            x$=stbl("+SYSINFO")                                                            
            msg_tokens$[1]=x.task_desc$
            gosub disp_message
            if msg_opt$<>"Y" then goto std_exit
            call pgmdir$+"adc_progress.aon","N","","","","",1,meter_num,status
            
wend
rem --- Main Loop Ends


display_fields:

            control_id=3000
            cid_cnt=0

while more
            if cid_cnt=0 then let disp_inp$=update$[0],disp_desc$=""
            if cid_cnt=1 then let disp_inp$=update$[1],disp_desc$=""
            if cid_cnt=2 then let disp_inp$=update$[2],disp_desc$=""
            call pgmdir$+"syc_rs.bbx","",my_context,control_id,disp_inp$,0,"",status
            call pgmdir$+"syc_rs.bbx","",my_context,control_id+10000,disp_desc$,0,"",status
            cid_cnt=cid_cnt+1; let control_id=control_id+1
            if cid_cnt>i0_done-1 then
                break
            endif
            continue
wend

    disp_inp$=""
    disp_desc$=""
    return
    def fnv(q$)=42+int(len(q$)/2)


rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
