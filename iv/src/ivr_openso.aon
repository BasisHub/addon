rem ivr - Open Sales Orders Report

rem Created from ivr_lifofifo, ivr_mm and ivr_lm 10/31/2006.CAH

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem This report has been modified for output to vector/grid (OutVect!), instead of directly to printer

    seterr std_error
    setesc std_error
	
rem --- Function object

	use ::ado_func.src::func
	use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ope-01",ids$[3]="OPE_ORDHDR"
    files$[4]="ope-11",ids$[4]="OPE_ORDDET"
    files$[5]="ivc_whsecode",ids$[5]="IVC_WHSECODE"
    files$[6]="arm-01",ids$[6]="ARM_CUSTMAST"
    call stbl("+DIR_PGM")+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivs01_dev=channels[1]
    ivm01_dev=channels[2]
    ope01_dev=channels[3]
    ope11_dev=channels[4]
    ivm10_dev=channels[5]
    arm01_dev=channels[6]

rem --- Dimension string templates

    dim ivs01a$:templates$[1],ivm01a$:templates$[2],ope01a$:templates$[3],
:       ope11a$:templates$[4],ivm10c$:templates$[5],arm01a$:templates$[6]

rem --- retrieve templates for record keys

    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDDET","ALT_KEY_01",key_tpl$,rd_table_chans$[all],rd_status$
    dim ope11k1$:key_tpl$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","OPE_ORDHDR","PRIMARY",key_tpl$,rd_table_chans$[all],rd_status$
    dim ope01k0$:key_tpl$

rem --- Assign form input values to local variables

	declare Option option!
    
    begdate$=option!.getOptionData("PICK_DATE_1")
    enddate$=option!.getOptionData("PICK_DATE_2")
    whse$=option!.getOptionData("WAREHOUSE_ID")
    begitem$=option!.getOptionData("ITEM_ID")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

    dim p[5]
    P[0]=ivs01a.item_id_len
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2

    call stbl("+DIR_PGM")+"adc_sizemask.aon",m1$,m1,12,15
    call stbl("+DIR_PGM")+"adc_sizemask.aon",m2$,m2,10,15

rem --- Initializations

    dim o[3],d[1]
    width=132,h0=width-1,l9=59,l=l9+1
    o[2]=h0-m1
    o[1]=o[2]-4
    o[0]=o[1]-m2
    d[1]=o[0]-9
    d[0]=d[1]-9
    dw=d[0]-15

    gosub init_head; rem "initialize headings

rem --- Position files

    call stbl("+DIR_PGM")+"adc_progress.aon","NC","","","","",0,ope11_dev,1,meter_num,status
	if status = 999 then goto std_exit

    read (ope11_dev,key=firm_id$+whse$+begitem$,knum=1,dom=*next)
	
    while 1
        ope11k1$=key(ope11_dev,end=*break)
        if ope11k1.firm_id$+ope11k1.warehouse_id$+ope11k1.item_id$<>firm_id$+whse$+begitem$ break
        read record (ope11_dev) ope11a$
		
        call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
		if status = 999 then exitto std_exit
		
        ope01k0$=ope11k1.firm_id$+ope11k1.ar_type$+ope11k1.customer_id$+ope11k1.order_no$
        find record (ope01_dev,key=ope01k0$,dom=*continue) ope01a$
        if begdate$<>"" and ope01a.order_date$<begdate$ then continue
        if enddate$<>"" and ope01a.order_date$>enddate$ then continue
		
        dim customer$(dw),status$(3)
        find record (arm01_dev,key=ope11a.firm_id$+ope11a.customer_id$,dom=*next) arm01a$

	rem --- Assign data

        ordnum$=ope11a.order_no$
        orddate$=func.formatDate(ope01a.order_date$)
        shipdate$=func.formatDate(ope11a.est_shp_date$)
		
        if ope11a.est_shp_date$=fill(8) and ope01a.shipmnt_date$=fill(8) then 
			shipdate$=fill(8) 	
		else 
			shipdate$=func.formatDate(ope01a.shipmnt_date$)
		endif
		
        commit$=ope11a.commit_flag$
        ext=ope11a.ext_price
        qty=ope11a.qty_ordered
        totqty=totqty+qty
        totext=totext+ext

    rem --- Determine and assign Status

        if ope01a.credit_flag$="C" if ope01a.ordinv_flag$="O" ope01a.ordinv_flag$="C"
        status$(1,1)=ope01a.ordinv_flag$
        if ope01a.invoice_type$="P" status$(1,1)="Q"
        if ope01a.print_status$="Y" status$(2,1)="P"
        if ope01a.lock_status$="Y" status$(3,1)="L"
        if pos(ope01a.lock_status$="YN")>0 status$(3,1)=ope01a.lock_status$

    rem --- Store detail line

        dim customer$(dw)
        customer$(1)=arm01a.customer_id$+" "+arm01a.customer_name$
        OutVect!.addItem(ordnum$)
        OutVect!.addItem(status$)
        OutVect!.addItem(customer$)
        OutVect!.addItem(orddate$)
        OutVect!.addItem(shipdate$)
        OutVect!.addItem(str(qty:m2$))
        OutVect!.addItem(commit$)
        OutVect!.addItem(str(ext:m1$))

        l=l+1

    wend

done: rem --- All done

    wkx=fnblank(2)
    OutVect!.addItem("Total")
    wkx=fnblank(2)
    OutVect!.addItem(str(totqty:m2$))
    wkx=fnblank(1)
    OutVect!.addItem(str(totext:m1$))
    goto std_exit


init_head: rem --- Initialize HEADINGS$

rem --- date/time 

	declare BBjVector OutVect!
	OutVect!=bbjAPI().makeVector()
	
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- miscellaneous headings

    dim h1$(width),h2$(width),headings$[3]
    ivm01a.firm_id$=firm_id$,ivm01a.item_id$=begitem$
    find record (ivm01_dev,key=ivm01a.firm_id$+pad(ivm01a.item_id$,fnfldlen(fattr(ivm01a$),"ITEM_ID")),dom=*next) ivm01a$
    find record (ivm10_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$
    x$="Warehouse: "+whse$+" "+cvs(ivm10c.short_name$,2)
    desc$=cvs(ivm01a.item_desc$,3)
    x1$="Item: "
    if begitem$<>"" x1$=x1$+begitem$ else x1$=x1$+"First"
    x1$=x1$+" "+desc$
    h1$=x1$
    h2$=x$
    headings$[0]=firm_name$
    headings$[1]=task_desc$
    headings$[2]=h1$
    headings$[3]=h2$

rem --- column headings

	dim columns$[7,10]
		columns$[0,0]="Order #",columns$[0,1]="C",columns$[0,2]="15"
		columns$[1,0]="Sts",columns$[1,1]="C",columns$[1,2]="5"
		columns$[2,0]="Customer",columns$[2,1]="C",columns$[2,2]="30"
		columns$[3,0]="Ordered",columns$[3,1]="C",columns$[3,2]="15"
		columns$[4,0]="Ship",columns$[4,1]="C",columns$[4,2]="15"
		columns$[5,0]="Quantity",columns$[5,1]="C",columns$[5,2]="15",columns$[7,3]=m2$
		columns$[6,0]="Com?",columns$[6,1]="N",columns$[6,2]="5"
		columns$[7,0]="Extension",columns$[7,1]="N",columns$[7,2]="15",columns$[7,3]=m1$

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)

rem --- Find length of field

    def fnfldlen(q$,q1$)
        dim q2$:q$
        wkq$=fattr(q2$,q1$)
        wkq=dec(wkq$(10,2))
        return wkq
    fnend

rem --- Create blank line in OutVect! (no return value wanted or needed)

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call stbl("+DIR_PGM")+"adc_progress.aon","D","","","","",0,0,0,meter_num,ignore_status
    if status <> 999 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
	
rem #endinclude std_end.src

    end
