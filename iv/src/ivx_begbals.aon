rem --- Rebuild Beginning Balances (Input Overlay)
rem --- Program ivx_ba v8.0.0 09Jul2007 (ivx_ba)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:55:43)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
    files$[5]="ivm-07",ids$[5]="IVM_LSMASTER"
    files$[7]="ivm-12",ids$[7]="IVM_ITEMACT"
    files$[10]="ivm-17",ids$[10]="IVM_LSACT"
    files$[11]="ivt-01",ids$[11]="IVT_LSTRANS"
    files$[12]="ivt-04",ids$[12]="IVT_ITEMTRAN"
    files$[13]="gls_params",ids$[13]="GLS_PARAMS"
    files$[14]="ivs_params",ids$[14]="IVS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_update
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm07_dev=channels[5]
    ivm12_dev=channels[7]
    ivm17_dev=channels[10]
    ivt01_dev=channels[11]
    ivt04_dev=channels[12]
    gls01_dev=channels[13]
    ivs01_dev=channels[14]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],
:       ivm07a$:templates$[5],ivm12a$:templates$[7],
:       ivm17a$:templates$[10],
:       ivt01a$:templates$[11],ivt04a$:templates$[12],gls01a$:templates$[13],
:       ivs01a$:templates$[14]

rem --- Assign form input values to local variables

    period_yr$=option!.getOptionData("period_year")
    begwhse$=option!.getOptionData("warehouse_id_1")
    endwhse$=option!.getOptionData("warehouse_id_2")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")
    begitem$=option!.getOptionData("item_id_1")
    enditem$=option!.getOptionData("item_id_2")
    itemtype$=option!.getOptionData("item_type")
    rebuildlot$=option!.getOptionData("rebuild_lots")
    beglot$=option!.getOptionData("lotser_no_1")
    endlot$=option!.getOptionData("lotser_no_2")
    
rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    
rem --- Parameters

    dim p[5],g[1],g3$(325)
    p[0]=ivs01a.item_id_len
    p[1]=num(ivs01a.precision$)
    p[2]=ivs01a.ls_no_len
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    g[0]=num(gls01a.total_pers$)
    if pos(ivs01a.lotser_flag$="SL")>0 ls$="Y"

rem --- Initializations

    precision num(ivs01a.precision$)
    m9$="00"
    year$=period_yr$(1,4)
    period$=period_yr$(5)
    more=1
    
rem --- Update initializations

    period=num(period$)
    year=num(year$)
    call pgmdir$+"adc_perioddates.aon",gls01_dev,period,year,when$,x$,status
    if rebuildlot$="N" ls$="N"
    call pgmdir$+"adc_progress.aon","N","IVM_ITEMWHSE","","","",7+p[0],0,1,meter_num,status
    
rem --- Setup SQL to search by item/prod/warehouse within report parameters (i.e. old ivm-03C)    

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ivm_itemwhse.warehouse_id, ivm_itemmast.product_type, ivm_itemwhse.item_id "
    sql_prep$=sql_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"    ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
    where_clause$="       WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
    if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "    
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND "
    if itemtype$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+itemtype$+"' "

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    order_clause$=" ORDER BY ivm_itemwhse.warehouse_id, ivm_itemwhse.item_id"
    sql_prep$=sql_prep$+where_clause$+order_clause$

rem --- SQL chan end prep

    sql_chan=sqlunt
    sqlopen(sql_chan)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Fetch next SQL rec

    while more
    
        read_tpl$ = sqlfetch(sql_chan, err=*break) 
        whse$ = read_tpl.warehouse_id$
        item$ = read_tpl.item_id$
        product$ = read_tpl.product_type$

rem --- Update ivt-04 beginning balance

		tot_recs=tot_recs+1
        if mod(tot_recs,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        ivm01a_key$=firm_id$+item$
        ivm02a_key$=firm_id$+whse$+item$
        ivm12a_key$=firm_id$+whse$+item$+year$+period$
        w3$=""
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        find record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
        find record (ivm12_dev,key=ivm12a_key$,dom=*continue) ivm12a$
        location$=ivm02a.location$
        qty=ivm12a.beg_balance
        cost=ivm02a.unit_cost
        gosub init_ivt04
        if ls$="N" continue
        if rebuildlot$="N" continue
        read (ivm07_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$+beglot$,dir=0,dom=*next)
        while more

            read record (ivm07_dev,end=*break)ivm07a$
            if pos(ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=ivm07a$)<>1 then break
            if cvs(beglot$,3)<>"" and cvs(ivm07a.lotser_no$,3) < cvs(beglot$,3) then continue
            if cvs(endlot$,3)<>"" and cvs(ivm07a.lotser_no$,3) > cvs(endlot$,3) then break
            let ivm17a_key$=ivm07a.firm_id$+ivm07a.warehouse_id$+ivm07a.item_id$+ivm07a.lotser_no$+year$+period$
            dim ivm17a$:fattr(ivm17a$)
            find record (ivm17_dev,key=ivm17a_key$,dom=*next) ivm17a$
            location$=ivm07a.ls_location$,qty=ivm17a.beg_balance,cost=ivm07a.unit_cost
            gosub init_ivt01
        wend

     wend
     
rem --- done

    goto std_exit

rem --- Initialize IVT-01/IVT-04 Transaction_History Records

init_ivt01:
    dim ivt01a$:fattr(ivt01a$)
    ivt01a.firm_id$=firm_id$
    ivt01a.warehouse_id$=ivm07a.warehouse_id$
    ivt01a.item_id$=ivm07a.item_id$
    ivt01a.lotser_no$=ivm07a.lotser_no$
    ivt01a.trans_date$=when$
    ivt01a.iv_hist_seq$="00000"
    ivt01_key$=ivt01a.firm_id$+ivt01a.warehouse_id$+ivt01a.item_id$+ivt01a.lotser_no$+ivt01a.trans_date$+ivt01a.iv_hist_seq$
    extract record (ivt01_dev,key=ivt01_key$,dom=*next)x$; rem Advisory Locking
    ivt01a.trans_source$="BB"
    ivt01a.unit_measure$=ivm01a_unit_of_sale$
    ivt01a.location$=location$
    ivt01a.system_date$=sysinfo.system_date$
    ivt01a.user_id$=stbl("+USER_ID",err=*next)
    ivt01a.system_time$=fntime$(q$)
    ivt01a.terminal_id$=fid(0)
    ivt01a.trans_qty=qty
    ivt01a.unit_cost=cost
    write record (ivt01_dev) ivt01a$
    
    return

init_ivt04:
    dim ivt04a$:fattr(ivt04a$)
    ivt04a.firm_id$=firm_id$
    ivt04a.warehouse_id$=ivm02a.warehouse_id$
    ivt04a.item_id$=ivm02a.item_id$
    ivt04a.trans_date$=when$
    ivt04a.iv_hist_seq$="00000"
    ivt04_key$=ivt04a.firm_id$+ivt04a.warehouse_id$+ivt04a.item_id$+ivt04a.trans_date$+ivt04a.iv_hist_seq$
    extract record (ivt04_dev,key=ivt04_key$,dom=*next)x$; rem Advisory Locking
    ivt04a.trans_source$="BB"
    ivt04a.unit_measure$=ivm01a_unit_of_sale$
    ivt04a.location$=location$
    ivt04a.system_date$=sysinfo.system_date$
    ivt04a.user_id$=stbl("+USER_ID",err=*next)
    ivt04a.system_time$=fntime$(q$)
    ivt04a.terminal_id$=fid(0)
    ivt04a.trans_qty=qty
    ivt04a.unit_cost=cost
    write record (ivt04_dev) ivt04a$
        
    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return    
    

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
