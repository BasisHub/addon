rem --- Cost Change Valuation Report
rem --- Program ivr_costchgvalue.aon v8.0.0 09Jul2007 (ivr_wa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:41:54)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    
rem --- Use for type checking

    use ::sys/prog/bao_option.bbj::Option   

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Assign form input values to local variables
    
    declare Option option!
    effect_date$ = option!.getOptionData("EFFECT_DATE") 

rem --- get batch# (zero if not batching.CAH)

    batch_no$=stbl("+BATCH_NO",err=*next)

rem --- Open all files

    num_files = 8
    open_beg  = 1
    open_end  = num_files
    
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    
    open_tables$[1]="IVS_PARAMS",   open_opts$[1]="OTA"
    open_tables$[2]="GLS_PARAMS",   open_opts$[2]="OTA"
    open_tables$[3]="IVE_COSTCHG",  open_opts$[3]="OTA"
    open_tables$[4]="ARS_PARAMS",   open_opts$[4]="OTA"  
    open_tables$[5]="IVM_ITEMMAST", open_opts$[5]="OTA"
    open_tables$[6]="IVM_ITEMWHSE", open_opts$[6]="OTA"
    open_tables$[7]="IVC_PRODCODE", open_opts$[7]="OTA"
    open_tables$[8]="IVC_WHSECODE", open_opts$[8]="OTA"
    
    if num(batch_no$)=0 then let open_opts$[3]=open_opts$[3]+"L"; rem lock only if not batching        

    gosub open_tables

    ivs_params_dev = num( open_chans$[1] )
    gls_params_dev = num( open_chans$[2] )
    costchg_dev    = num( open_chans$[3] )
    ars01a_dev     = num( open_chans$[4] )
    itemmast_dev   = num( open_chans$[5] )
    itemwhse_dev   = num( open_chans$[6] )
    prodcode_dev   = num( open_chans$[7] )
    whsecode_dev   = num( open_chans$[8] )
    
    dim ivs_params_rec$:open_tpls$[1]
    dim costchg_rec$:open_tpls$[3]
    dim ars01a$:open_tpls$[4]
    dim itemmast_rec$:open_tpls$[5]
    dim itemwhse_rec$:open_tpls$[6]
    dim prodcode_rec$:open_tpls$[7]
    dim whsecode_rec$:open_tpls$[8]
    
rem --- Parameters

    dim p[7]
    n2$="IV"
    
    find record (ivs_params_dev, key=firm_id$+n2$+"00", dom=std_missing_params) ivs_params_rec$
    
    if ivs_params_rec.cost_method$<>"S" goto std_cost
    
    p[0]=ivs_params_rec.item_id_len
    p[1]=num(ivs_params_rec.precision$)
    p[5]=num(ivs_params_rec.desc_len_01$)
    p[6]=num(ivs_params_rec.desc_len_02$)
    p[7]=num(ivs_params_rec.desc_len_03$)
    
    rem --- is GL active for this application? (IV)
    call pgmdir$+"adc_application.aon",n2$,info$[all]
    gl$=info$[9]
    dist_gl_by_item$="N"
    
    if gl$="Y" then
        call pgmdir$+"adc_application.aon","AR",info$[all]
        ar$=info$[20]
        
        if ar$="Y" then
            find record (ars01a_dev,key=firm_id$+"AR00",dom=*endif) ars01a$
            dist_gl_by_item$=ars01a.dist_by_item$
        endif
    endif

rem --- Initializations

    precision num(ivs_params_rec.precision$)
    
    dim o[8]
    dim d[1],s[1],t[1],r[1]
    
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,m3
            
    width=132
    o[1]=p[0]
    o[8]=width-m1
    o[7]=o[8]-m1
    o[6]=o[7]-m3
    o[5]=o[6]-m1
    o[4]=o[5]-m3
    o[3]=o[4]-m2
    o[2]=o[3]-3
    dw=min(o[2]-o[1]-1,p[5]+p[6]+p[7])
    
    more=1
    h2$=""
    h3$=""
    h4$=""

rem --- Additional File Opens

    if gl$ = "Y" then 

        num_files = 3
        open_beg  = 1
        
        if dist_gl_by_item$ = "Y" then 
            open_end = 3
        else
            open_end = 2
        endif
        
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

        open_tables$[1]="GLW_ACCTTOTALS", open_opts$[1]="OTA"
        open_tables$[2]="GLM_ACCT",       open_opts$[2]="OTA"
        open_tables$[3]="ARC_DISTCODE",   open_opts$[3]="OTA"
        
        gosub open_tables
        
        glw_accttotals_dev = num( open_chans$[1] )
        glm_acct_dev       = num( open_chans$[2] )

		call "adc_clearpartial.aon","N",glw_accttotals_dev,firm_id$,status

        dim glw_accttotals_rec$:open_tpls$[1]
        dim glm_acct_rec$:open_tpls$[2]
        
        if dist_gl_by_item$ = "Y" then
            distcode_dev = num( open_chans$[3] )
            dim distcode_rec$:open_tpls$[3]
        endif
    
    endif

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)   
    
rem --- Column headings

    columns=8
    dim columns$[columns,10]
    
    columns$[0,0]=Translate!.getTranslation("AON_ITEM"),            columns$[0,1]="C", columns$[0,2]=str(p[0])
    columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),     columns$[1,1]="C", columns$[1,2]=str(dw)
    columns$[2,0]="UM",              columns$[2,1]="C", columns$[2,2]="2"
    columns$[3,0]=Translate!.getTranslation("AON_ON_HAND"),         columns$[3,1]="N", columns$[3,2]=str(m2), columns$[3,3]=m2$
    columns$[4,0]=Translate!.getTranslation("AON_CURRENT^COST"),    columns$[4,1]="N", columns$[4,2]=str(m3), columns$[4,3]=m3$
    columns$[5,0]=Translate!.getTranslation("AON_CURRENT^VALUE"),   columns$[5,1]="N", columns$[5,2]=str(m1), columns$[5,3]=m1$, columns$[5,10]="T"
    columns$[6,0]=Translate!.getTranslation("AON_NEW^COST"),        columns$[6,1]="N", columns$[6,2]=str(m3), columns$[6,3]=m3$
    columns$[7,0]=Translate!.getTranslation("AON_NEW^VALUE"),       columns$[7,1]="N", columns$[7,2]=str(m1), columns$[7,3]=m1$, columns$[7,10]="T"
    columns$[8,0]=Translate!.getTranslation("AON_CHANGE^IN_VALUE"), columns$[8,1]="N", columns$[8,2]=str(m1), columns$[8,3]=m1$, columns$[8,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Report headings

    headings=3
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$ 
    if num(batch_no$)<>0 then headings$[1]=headings$[1]+ Translate!.getTranslation("AON__(BATCH:_")+batch_no$+")"        
    headings$[headings]="[HEADER]"

rem --- Sort by product type using SQL  

    call pgmdir$+"adc_progress.aon","N","","","","",0,costchg_dev,1,meter_num,ignore_status
    
    unlock(costchg_dev,err=*next); rem SQL won't execute with file locked

    sql_prep$ = ""
    sql_prep$ = sql_prep$ + "SELECT ive_costchg.effect_date, ive_costchg.warehouse_id, ivm_itemmast.product_type, ive_costchg.item_id "
    sql_prep$ = sql_prep$ + "  FROM ive_costchg INNER JOIN ivm_itemmast ON ive_costchg.firm_id = ivm_itemmast.firm_id AND "
    sql_prep$ = sql_prep$ + "       ive_costchg.item_id = ivm_itemmast.item_id "
    sql_prep$ = sql_prep$ + " WHERE ive_costchg.firm_id = '" + firm_id$ + "' AND ive_costchg.batch_no = '" + batch_no$ + "' AND "
    sql_prep$ = sql_prep$ + "       ive_costchg.effect_date <= '" + effect_date$ +"'"
    sql_prep$ = sql_prep$ + "ORDER BY ive_costchg.effect_date, ive_costchg.warehouse_id, ivm_itemmast.product_type$, ive_costchg.item_id"

    sql_chan=sqlunt
    sqlopen(sql_chan)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim sql_rec$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Inits for record loop

    call pgmdir$+"adc_progress.aon","S","",Translate!.getTranslation("AON_PRINTING"),"","",0,costchg_dev,1,0,ignore_status

    prev_date$ = ""
    prev_whse$ = ""
    prev_type$ = ""

rem --- Next SQL record

    while more

        sql_rec$=sqlfetch(sql_chan,err=*break)
        
        call pgmdir$+"adc_progress.aon","S","","","","",0,costchg_dev,1,meter_num,ignore_status
        
        costchg_key$ = firm_id$ + batch_no$ + sql_rec.effect_date$ + sql_rec.warehouse_id$ + sql_rec.item_id$
        read record (costchg_dev, key=costchg_key$, knum="BATCH_KEY", dom=*continue) costchg_rec$
        
rem --- Additional reads

        find record (itemmast_dev, key=firm_id$+costchg_rec.item_id$, dom=*continue) itemmast_rec$
        find record (itemwhse_dev, key=firm_id$+costchg_rec.warehouse_id$+costchg_rec.item_id$, dom=*continue) itemwhse_rec$

rem --- Level breaks?

        if costchg_rec.effect_date$<>prev_date$ then 
            gosub prev_date_totals
            gosub new_date
        else
            if costchg_rec.warehouse_id$<>prev_whse$ then 
                gosub prev_whse_totals
                gosub new_whse
            else
                if sql_rec.product_type$<>prev_type$ then
                    gosub prev_prod_totals
                    gosub new_prod
                endif
            endif
        endif

rem --- Format detail line fields

        dim description$(dw)
        description$ = fnitem$(itemmast_rec.item_desc$,p[5],p[6],p[7])
        onhand       = itemwhse_rec.qty_on_hand
        oldcost      = itemwhse_rec.unit_cost
        newcost      = costchg_rec.new_cost

rem --- Calculate extensions at precision 2

        oldvalue = round(onhand*oldcost, 2)
        newvalue = round(onhand*newcost, 2)
        change   = newvalue-oldvalue

rem --- Print detail line

        nl=nl+1
        
        OutVect!.addItem(itemmast_rec.item_id$)
        OutVect!.addItem(description$)
        OutVect!.addItem(itemmast_rec.unit_of_sale$)
        OutVect!.addItem( str(onhand) )
        OutVect!.addItem( str(oldcost) )
        OutVect!.addItem( str(oldvalue) )
        OutVect!.addItem( str(newcost) )
        OutVect!.addItem( str(newvalue) )
        OutVect!.addItem( str(change) )

rem --- Accumulate totals

        d[0]=d[0]+oldvalue
        d[1]=d[1]+newvalue
        s[0]=s[0]+oldvalue
        s[1]=s[1]+newvalue
        t[0]=t[0]+oldvalue
        t[1]=t[1]+newvalue
        r[0]=r[0]+oldvalue
        r[1]=r[1]+newvalue

rem --- G/L distribution

        if gl$ = "Y" then 
        
rem --- By Distribution Code
        
            if dist_gl_by_item$="Y" then
                find record (distcode_dev, key=firm_id$+"D"+itemwhse_rec.ar_dist_code$, dom=*continue) distcode_rec$
                if distcode_rec.gl_inv_acct$<>"" then account$=distcode_rec.gl_inv_acct$
                
rem --- By Item 
            
            else
                if itemmast_rec.gl_inv_acct$<>"" then account$=itemmast_rec.gl_inv_acct$
            endif

rem --- Write summary record

            amount=change
            gosub update_gl
        
        endif

rem --- Set previous values
        
        prev_date$ = costchg_rec.effect_date$
        prev_whse$ = costchg_rec.warehouse_id$
        prev_type$ = itemmast_rec.product_type$

rem --- Loop back for next record

    wend

rem --- All done

    rem --- Last break
    gosub prev_date_totals
    total$=Translate!.getTranslation("AON_REPORT")
    t0=r[0]
    t1=r[1]
    gosub print_total

    rem --- Destroy progress meter
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status

    rem --- Determine whether to run the GL overlay
    if gl$ = "Y" then
        gls01_dev=gls_params_dev
        glw04_dev=glw_accttotals_dev
        glm01_dev=glm_acct_dev
        dim glw04a$:fattr(glw_accttotals_rec$)
        dim glm01a$:fattr(glm_acct_rec$)
        overlay$ = pgmdir$ + "glr_accttotals.aon"   
    else
        overlay$ = ""
    endif
    
    rem --- Print register via DocOut
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    if overlay$="" 
        goto std_exit_no_update
    else
        goto std_exit
    endif
    
std_cost: rem --- Must be Standard Costing 

    msg_id$="IV_NO_STD_COST"
    call sypdir$+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    status=999
    goto std_exit_no_report

rem --- Date break

prev_date_totals: rem --- Previous totals

    if prev_date$<>"" then 
        gosub prev_whse_totals
        total$=h2$
        t0=d[0]
        t1=d[1]
        gosub print_total
    endif
    
    return
    
new_date: rem --- Start new date

    dim d[1]
    h2$=fndate$(costchg_rec.effect_date$)
    
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(Translate!.getTranslation("AON_EFFECTIVE_DATE:_") + h2$)
    
    gosub new_whse
    nl = 0
    
    return

rem --- Warehouse break

prev_whse_totals: rem --- Previous totals

    if prev_whse$<> "" then
        gosub prev_prod_totals
        total$=h3$
        t0=t[0]
        t1=t[1]
        gosub print_total
    endif
    
    return
    
new_whse: rem --- New warehouse

    dim t[1]
    whsecode_rec.short_name$=Translate!.getTranslation("AON_NOT_ON_FILE")
    find record (whsecode_dev, key=firm_id$+"C"+costchg_rec.warehouse_id$, dom=*next) whsecode_rec$
    h3$=Translate!.getTranslation("AON_WAREHOUSE_")+costchg_rec.warehouse_id$+" "+cvs(whsecode_rec.short_name$,2)
    
    ignore=fnblank_line(void)
    OutVect!.addItem(h3$)
    ignore=fnblank(8)
    
    gosub new_prod
    nl = 0
    
    return

rem --- Product break

prev_prod_totals: rem --- Previous totals

    if prev_type$ <> "" and nl > 1 then
        total$=h4$
        t0=s[0]
        t1=s[1]
        gosub print_total
    endif
    
    return
    
new_prod: rem --- Start a new product type

    dim s[1]
    prodcode_rec.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (prodcode_dev, key=firm_id$+"A"+itemmast_rec.product_type$, dom=*next) prodcode_rec$
    h4$=Translate!.getTranslation("AON_PRODUCT_")+itemmast_rec.product_type$+" "+cvs(prodcode_rec.code_desc$,2)
    
    ignore=fnblank_line(void)
    OutVect!.addItem(h4$)
    ignore=fnblank(8)
    ignore=fnblank_line(void)
    
    nl = 0
    
    return

print_total: rem --- Print totals

    t2=t1-t0
    total$=Translate!.getTranslation("AON_*TOTALS_FOR_")+total$
    
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    
    OutVect!.addItem("")
    OutVect!.addItem(total$)
    ignore=fnblank(3)
    OutVect!.addItem( str(t0) )
    OutVect!.addItem("")
    OutVect!.addItem( str(t1) )
    OutVect!.addItem( str(t2) )
    
    return

update_gl: rem --- Update G/L Summary

    if gl$="Y" and amount<>0 and account$<>"" then
        glw_accttotals_rec.firm_id$    = firm_id$
        glw_accttotals_rec.gl_account$ = account$
        glw_accttotals_rec.gl_post_amt = 0
        
        extract record (glw_accttotals_dev, key=firm_id$+account$, dom=*next) glw_accttotals_rec$; rem Advisory Locking
        
        glw_accttotals_rec.gl_post_amt = glw_accttotals_rec.gl_post_amt + amount
        glw_accttotals_rec$ = field(glw_accttotals_rec$)
        write record (glw_accttotals_dev) glw_accttotals_rec$
    endif
    
    return
    
open_tables: rem --- Call the open tables routine

    call sypdir$+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        call sypdir$+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
        status=912
        exitto std_exit_no_report
    endif

    return  
    
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return void
    fnend

rem --- Create a blank line.  'void' is simply a variable; it's there to remind you that this function takes no input

    def fnblank_line(void)=fnblank(columns+1)
    
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit_no_report:

    OutVect!=null();rem nothing to print, or some other err such that no report
    
std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
