rem --- Physical Inventory Register
rem --- Program ivr_physregister.aon v8.0.0 09Jul2007 (ivr_va)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:45:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2009 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)
	
rem --- Use for type checking

    use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$
	
rem --- Run Update?

    msg_id$="IV_PHYS_REG_READY"
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit
	
rem --- Assign form input values to local variables

    declare Option option!
    declare BBjObjectTable ot!

    whse$ = option!.getOptionData("WAREHOUSE_ID")	

    ot! = BBjAPI().getObjectTable()
    selected_all = num( ot!.get("IVR_PHYSREG.SELECTED_ALL") )

rem --- Close Physcode file, it's locked by the Options Entry code

    call sypdir$ + "bac_open_table.bbj",
:		"IBC_PHYSCODE",
:		"C",
:		rd_table_chans$[all],
:		open_chan,
:		table_tpl$,
:		proc_mssg$	

rem --- Open all files

    num_files = 6
    open_beg  = 1
    open_end  = num_files

    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]="IVS_PARAMS",   open_opts$[1]="OTA"
    open_tables$[2]="IVE_PHYSICAL", open_opts$[2]="OTA"
    open_tables$[3]="IVC_PHYSCODE", open_opts$[3]="OTAL"
	open_tables$[4]="IVM_ITEMWHSE", open_opts$[4]="OTA"
    open_tables$[5]="IVM_ITEMMAST", open_opts$[5]="OTA"
	open_tables$[6]="IVC_WHSECODE", open_opts$[6]="OTA"

    gosub open_tables

    ivs_params_dev = num(open_chans$[1])
    physical_dev   = num(open_chans$[2])
    physcode_dev   = num(open_chans$[3])
	itemwhse_dev   = num(open_chans$[4])
    itemmast_dev   = num(open_chans$[5])
	whsecode_dev   = num(open_chans$[6])

    dim ivs_params_rec$:open_tpls$[1]
    dim physical_rec$:open_tpls$[2]
    dim physcode_rec$:open_tpls$[3]
	dim itemwhse_rec$:open_tpls$[4]
    dim itemmast_rec$:open_tpls$[5]
	dim whsecode_rec$:open_tpls$[6]

rem --- Parameter record

    find record (ivs_params_dev, key=firm_id$+"IV00", dom=std_missing_params) ivs_params_rec$	
    if pos(ivs_params_rec.lotser_flag$ = "LS") then ls$="Y" else ls$ = "N"
	
rem --- Open Lot/serial file if necessary

    if ls$ = "Y" then 
        open_beg = 1
        open_end = 1
        open_tables$[1]="IVM_LSMASTER", open_opts$[1]="OTA"
        gosub open_tables
        lsmaster_dev = num(open_chans$[1])
        dim lsmaster_rec$:open_tpls$[1]
    endif

rem --- Parameters

    dim p[5]
    p[0]=ivs_params_rec.item_id_len
    p[1]=num(ivs_params_rec.precision$)
    p[2]=ivs_params_rec.ls_no_len
    p[3]=num(ivs_params_rec.desc_len_01$)
    p[4]=num(ivs_params_rec.desc_len_02$)
    p[5]=num(ivs_params_rec.desc_len_03$)
    dw=p[3]+p[4]+p[5]
    lf$=ivs_params_rec.lifofifo$

rem --- Initializations

    precision p[1]

    dim o[10],item[6],cycle[6],report[6],lf_chans[2],lf_tmpls$[2]
    width=132
    done=0
    if ls$="Y" then lsh$="Lot/Serial Number" else lsh$=""
    more=1
	detail_printed = 0
	item_printed = 0
	cycle_printed = 0

rem --- Resize masks

    m1$=ivs_params_rec.amount_mask$
    m2$=ivs_params_rec.unit_mask$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12

rem --- Retrieve warehouse and build HEADINGS$

    find record (whsecode_dev, key=firm_id$+"C"+whse$, dom=std_exit) whsecode_rec$
	
	headings=3
	dim headings$[headings]
    headings$[0] = sysinfo.firm_name$
    headings$[1] = sysinfo.task_desc$ + " For Warehouse " + whse$ + " " + cvs(whsecode_rec.short_name$,2)
	headings$[2] = "[HEADER]"
	
	rem if quantity$="Y" then sqh$="Quantity"; rem used?

rem --- Print positions

    o[10]=width-m1
    o[9]=o[10]-m2
    o[8]=o[9]-m1-1
    o[7]=o[8]-m2
    o[6]=o[7]-m1-1
    o[5]=o[6]-m2
    o[4]=o[5]-11
    o[3]=o[4]-3
    o[1]=3
    o[2]=o[3]-max(p[2],18)
	
rem --- Document initializations

	declare BBjVector OutVect!
	declare BBjVector HdrVect!
	declare BBjVector BrkVect!
	declare BBjVector TotVect!

	OutVect!=BBjAPI().makeVector()
	HdrVect!=BBjAPI().makeVector()
	BrkVect!=BBjAPI().makeVector()
	TotVect!=BBjAPI().makeVector()
	
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)	
	
rem --- Column headings 
	
    columns=9
    dim columns$[columns,10]

    columns$[0,0] = "Item",           columns$[0,1] = "C", columns$[0,2] = str(dw)
    columns$[1,0] = lsh$,             columns$[1,1] = "C", columns$[1,2] = str( iff(lsh$="", 0, p[2]) ); rem Lot/Serial#
    columns$[2,0] = "UM",             columns$[2,1] = "C", columns$[2,2] = "2"
	columns$[3,0] = "Location",       columns$[3,1] = "C", columns$[3,2] = "10"
    columns$[4,0] = "Physical^Qty",   columns$[4,1] = "N", columns$[4,2] = str(m2), columns$[4,3] = m2$, columns$[4,10] = "T"
	columns$[5,0] = "Physical^Value", columns$[5,1] = "N", columns$[5,2] = str(m1), columns$[5,3] = m1$, columns$[5,10] = "T"
	columns$[6,0] = "System^Qty",     columns$[6,1] = "N", columns$[6,2] = str(m2), columns$[6,3] = m2$, columns$[6,10] = "T"
	columns$[7,0] = "System^Value",   columns$[7,1] = "N", columns$[7,2] = str(m1), columns$[7,3] = m1$, columns$[7,10] = "T"
	columns$[8,0] = "Variance^Qty",   columns$[8,1] = "N", columns$[8,2] = str(m2), columns$[8,3] = m2$, columns$[8,10] = "T"
	columns$[9,0] = "Variance^Value", columns$[9,1] = "N", columns$[9,2] = str(m1), columns$[9,3] = m1$, columns$[9,10] = "T"
	
    rem                                                                 @(o[5]),ph$,                         @(o[7]),sh$,                         @(o[9]),vh$
    rem @(o[0]),"Item", @(o[2]),lsh$, @(o[3]),"UM", @(o[4]),"Location", @(o[5]+m2-9),qh$, @(o[6]+m1-12),th$, @(o[7]+m2-9),qh$, @(o[8]+m1-12),th$, @(o[9]+m2-9),qh$, @(o[10]+m1-12),th$

rem --- Position cycle file

	call pgmdir$+"adc_progress.aon","N","","","","",0,physical_dev,1,meter_num,ignore_status
	
	read (physcode_dev, key=firm_id$, dom=*next)

rem --- Get next cycle

    while more
	
		read record (physcode_dev, end=*break) physcode_rec$
		if physcode_rec.firm_id$ <> firm_id$ then break
		if physcode_rec.pending_action$ <> "3" then continue

        whse_id$    = physcode_rec.warehouse_id$
		cycle_code$ = physcode_rec.pi_cyclecode$
		
rem --- Get physical inventory record(s) (may be lot/serial)

		first$ = firm_id$ + whse_id$ + cycle_code$
		read (physical_dev, key=first$, dom=*next)
		
		while more
		
			physical_key$ = key(physical_dev, end=*break)
			if pos(first$ = physical_key$) <> 1 then break
			read record (physical_dev) physical_rec$
			
			item_id$   = physical_rec.item_id$
			location$  = physical_rec.location$
			
			call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status

rem --- Level breaks

            if physical_rec.pi_cyclecode$ <> prev_cycle$ then gosub cycle_break
            if physical_rec.item_id$      <> prev_item$  then gosub item_break

rem --- Retrieve lot/serial master

			this_item_lot_ser = (ls$ = "Y" and itemmast_rec.lotser_item$ = "Y" and itemmast_rec.inventoried$ = "Y")

            if this_item_lot_ser then
                lsmaster_key$ = firm_id$ + whse_id$ + item_id$
                lsmaster_rec.ls_location$ = physical_rec.location$
                lsmaster_rec.unit_cost = cost
				
                if cvs(physical_rec.lotser_no$,2)="" then
                    if physical_rec.freeze_qty <> 0 then physical_rec.lotser_item$ = "Y"; rem --- Count always entered for Missing (why?)
                    physical_rec.lotser_no$   = "Missing"
                    lsmaster_rec.ls_location$ = ".........."
                endif
				
                find record (lsmaster_dev, key=lsmaster_key$, dom=*endif) lsmaster_rec$
                cost=lsmaster_rec.unit_cost
            endif
			
rem --- Calculate total value and variance

            dim t[6]
            rem if physical_rec.lotser_item$ <> "Y" then physical_rec.act_phys_cnt = physical_rec.freeze_qty; rem why?
            t[0] = physical_rec.act_phys_cnt
            t[1] = t[0]*cost
            t[2] = physical_rec.freeze_qty
            t[3] = t[2]*cost
            t[4] = t[0]-t[2]
            t[5] = t[1]-t[3]
            mark$=""
			
            if ls$<>"Y" and cvs(physical_rec.lotser_no$,2)<>"None" and physical_rec.lotser_item$<>"Y" then 
				rem t[6]=1
				mark$="*"
            endif
			
rem --- Print non-lotted/serialized item

            if !this_item_lot_ser then
			
                rem if l+2>l9 gosub report_heading
				OutVect!.addItem(itemmast_rec.item_id$ + mark$)
				OutVect!.addItem("")
				OutVect!.addItem(itemmast_rec.unit_of_sale$)
				OutVect!.addItem(physical_rec.location$)
				OutVect!.addItem(str(t[0]))
				OutVect!.addItem(str(t[1]))
				OutVect!.addItem(str(t[2]))
				OutVect!.addItem(str(t[3]))
				OutVect!.addItem(str(t[4]))
				OutVect!.addItem(str(t[5]))
				
				OutVect!.addItem("   " + description$)
				ignore = fnblank(9)
				
                rem print (printer_dev)@(o[0]),itemmast_rec.item_id$,mark$,@(o[3]),itemmast_rec.unit_of_sale$,@(o[4]),physical_rec.location$,@(o[5]),t[0]:m2$,@(o[6]),t[1]:m1$,@(o[7]),t[2]:m2$,@(o[8]),t[3]:m1$,@(o[9]),t[4]:m2$,@(o[10]),t[5]:m1$
                rem print (printer_dev)@(o[1]),"   ",description$
                l=l+2
				detail_printed = detail_printed + 1
                
            else
			
 rem --- Print lotted/serialized item

				if firm_id$ + whse_id$ + cycle_code$ + location$ + item_id$ <> last$ then gosub item_head
				OutVect!.addItem("")
				OutVect!.addItem( cvs(physical_rec.lotser_no$,2) + mark$ )
				OutVect!.addItem("")
				OutVect!.addItem(lsmaster_rec.ls_location$)
				OutVect!.addItem(str(t[0]))
				OutVect!.addItem(str(t[1]))
				OutVect!.addItem(str(t[2]))
				OutVect!.addItem(str(t[3]))
				OutVect!.addItem(str(t[4]))
				OutVect!.addItem(str(t[5]))
				
				rem print (printer_dev)@(o[2]),physical_rec.lotser_no$, len(cvs(physical_rec.lotser_no$,2)) @(o[3]),mark$,@(o[4]),lsmaster_rec.ls_location$,@(o[5]),t[0]:m2$,@(o[6]),t[1]:m1$,@(o[7]),t[2]:m2$,@(o[8]),t[3]:m1$,@(o[9]),t[4]:m2$,@(o[10]),t[5]:m1$
				rem l1=l1+1
				detail_printed = detail_printed + 1
			
			endif

rem --- Loop back for next physical inventory record

            for x=0 to 6
                item[x]=item[x]+t[x]
                cycle[x]=cycle[x]+t[x]
                report[x]=report[x]+t[x]
            next x
			
        wend
		
rem --- Set pending action to update
		
		physcode_rec.pending_action$="4"
		physcode_rec$ = field(physcode_rec$)
		write record (physcode_dev) physcode_rec$
		
rem --- Loop back for next entry record

    wend

rem --- All done

rem Do last break
    done=1
    gosub cycle_break
	
	if cycle_printed > 1 then
		nl=1
		dim totals$[5]
		total$="Register "
		totals$[1]=str(report[1])
		totals$[3]=str(report[3])
		totals$[5]=str(report[5])
		warning=report[6]
		gosub print_line
	endif
	
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

rem Run update overlay after DocOut report	
    overlay$ = pgmdir$+"ivu_physupdate.aon"
    out_action$ = "PRT-PDF"
    next_overlay$ = overlay$
    goto std_exit	

item_head: rem --- Item subheading (lotted/serialized)

    rem if l+3>l9 gosub report_heading
	OutVect!.addItem(physical_rec.item_id$)
	OutVect!.addItem(itemmast_rec.unit_of_sale$)
	OutVect!.addItem(physical_rec.location$)
	OutVect!.addItem(continued$)
	ignore = fnblank(6)
	
	OutVect!.addItem("   "+description$)
	ignore = fnblank(9)
	
    rem print (printer_dev)@(o[0]),physical_rec.item_id$,@(o[3]),itemmast_rec.unit_of_sale$,@(o[4]),physical_rec.location$," ",continued$
    rem print (printer_dev)@(o[1]),"   ",description$
    l=l+2
    continued$ = "(Continued)"
    last$ = firm_id$ + whse_id$ + cycle_code$ + location$ + item_id$
	
    return

cycle_break: rem --- Cycle Break

    if prev_cycle$<>"" and item_printed > 1 then
        gosub item_break
		
		nl=1
        dim totals$[5]
        total$="Cycle Code "+prev_cycle$
        totals$[1]=str(cycle[1])
        totals$[3]=str(cycle[3])
        totals$[5]=str(cycle[5])
        warning=cycle[6]
        gosub print_line
    endif
			
	detail_printed = 0
	item_printed = 0
	
    if !done then 
		dim cycle[6]
		
		prev_cycle$ = physical_rec.pi_cyclecode$
		physcode_rec.cutoff_date$ = sysinfo.system_date$
		cycle_printed = cycle_printed + 1
		
		BrkVect!.addItem( str(OutVect!.size()/(columns+1)) )
		HdrVect!.addItem( "Cycle Code " + prev_cycle$ + " - Physical Date " + fndate$(physcode_rec.cutoff_date$) )

	endif
	
    return

item_break: rem --- Item Break

    if prev_item$ <> "" and detail_printed > 1 then 
        dim totals$[5]
        total$="Item "+prev_item$
		nl=0
		warning=0
        totals$[0]=str(item[0])
		totals$[1]=str(item[1])
        totals$[2]=str(item[2])
		totals$[3]=str(item[3])
        totals$[4]=str(item[4])
		totals$[5]=str(item[5])
        gosub print_line
    endif
	
	detail_printed = 0
	
    if !done then 
		dim description$(dw)
		dim item[6]
		itemmast_key$ = firm_id$ + item_id$
		itemmast_rec.item_desc$ = "(Not On File)"
		prev_item$ = item_id$
		itemwhse_key$ = firm_id$ + whse_id$ + item_id$
		itemwhse_rec.unit_cost = 0
		item_printed = item_printed + 1
		find record (itemmast_dev, key=itemmast_key$, dom=*next) itemmast_rec$
		find record (itemwhse_dev, key=itemwhse_key$, dom=*next) itemwhse_rec$
		description$ = fnitem$(itemmast_rec.item_desc$,p[3],p[4],p[5])
		continued$ = ""
		cost = itemwhse_rec.unit_cost

rem --- Get LIFO/FIFO Cost As Necessary

		if pos(lf$="LF") and !this_item_lot_ser then
			dim lf_item$[2]
			lf_item$[0] = firm_id$
			lf_item$[1] = physical_rec.warehouse_id$
			lf_item$[2] = physical_rec.item_id$
			lf_type$ = "R"
			lf_date$ = physical_rec.cutoff_date$
			lf_qnty  = physical_rec.act_phys_cnt - physical_rec.freeze_qty
			lf_cost  = 0
			if lf_qnty < 0 then lf_act$=lf$+"I" else lf_act$=lf$+"R"
			call pgmdir$+"ivc_lifofifo.aon",lf_act$,lf_type$,lf_date$,lf_chans[all],lf_tmpls$[all],lf_item$[all],p[1],abs(lf_qnty),cost,lf_cost,status
			if lf_qnty < 0 and lf_cost <> 0 then cost=lf_cost
		endif
	endif
	
    return

print_line: rem --- Print total line

    rem if warning then needed=3 else needed=1
    rem if nl then needed=needed+1
    rem if l+needed>l9 gosub report_heading
    if nl then ignore = fnblank_line(void)
	
	TotVect!.addItem(str(OutVect!.size()/(columns+1)))
	OutVect!.addItem("")
	OutVect!.addItem("**Totals For " + total$)
	ignore = fnblank(2)
	OutVect!.addItem(totals$[0])
	OutVect!.addItem(totals$[1])
	OutVect!.addItem(totals$[2])
	OutVect!.addItem(totals$[3])
	OutVect!.addItem(totals$[4])
	OutVect!.addItem(totals$[5])
	
	ignore = fnblank_line(void)
	
    rem print (printer_dev)@(o[1]),"Totals For ",total$,@(o[5]),totals$[0],@(o[6]),totals$[1],@(o[7]),totals$[2],@(o[8]),totals$[3],@(o[9]),totals$[4],@(o[10]),totals$[5]
    
	if warning then
        ignore = fnblank_line(void)
		OutVect!.addItem("")
		OutVect!.addItem("WARNING: " + str(warning) + " Item(s) Not Entered For" + total$)
        ignore = fnblank(8)
    endif
	
    rem l=l+needed
	nl=0
	
    return
	
open_tables: rem --- Open tables

    call sypdir$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        status=912
        goto std_exit
    endif

    return

disp_message: rem --- Display Message Dialog

    call sypdir$+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return void
    fnend

rem --- Create a blank line.  "void" is simply a variable; it's there to remind you that this function takes no input

	def fnblank_line(void)=fnblank(columns+1)

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
