rem --- ABC Analysis Report (Report Overlay)
rem --- Program ivr_itemabcrpt_o2.aon v8.0.0 16Jul2007 (ivr_pc)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:36:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

    call "adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Initializations

    precision p[1]
    dim headings$[6],o[9]
    dim count[25],value[25]
    headings$[0]=sysinfo.firm_name$
    when$=sysinfo.system_date$
    clock$=""
    m7$="####0"
    m9$="-##0.00%"
    m2$="###,###.000-"
    m1$="###,###,###.00-"
    headings=6
    width=132
    page=0
    l9=59
    l=l9+1
    done=0
    m8$="###,###,##0"
    sequence=0
    m1=len(m1$)
    m2=len(m2$)
    m7=len(m7$)
    m8=len(m8$)
    m9=len(m9$)
    class=0
    totalpct=0
    xlimit=percents[class]
    letters$="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    xp=max(9,m2)
    if value$="U" xp=18
    xp=xp+6

rem --- Print positions

    gosub Position
    
rem --- Background

    call pgmdir$+"adc_progress.aon","S","","","","",0,ivw07_dev,1,meter_num,status

rem --- Retrieve item totals

    dim ivs10i[3]
    ivs10i0$=firm_id$+"I"
    ivs10i1$=ivs01a.current_per$+ivs01a.current_year$+when$
rem    read (ivs10i_dev,key=ivs10i0$,dom=*next)ivs10i0$,ivs10i1$,ivs10i[all]
rem    ivs10i.period$=ivs10i1$(1,2),ivs10i.year$=ivs10i1$(3,4),ivs10i.run_date$=ivs10i1$(7,8)
rem    ivs10i.abc_total_value_01=ivs10i[0],ivs10i.abc_total_value_02=ivs10i[1]
rem    ivs10i.abc_total_value_03=ivs10i[2]

    ivs10i_key.firm_id$=firm_id$
    ivs10i_key.record_id_i$="I"
    ivs10i.firm_id$=firm_id$
    ivs10i.record_id_i$="I"
    ivs10i.period$=ivs01a.current_per$
    ivs10i.year$=ivs01a.current_year$
    ivs10i.run_date$=when$
    find record (ivs10i_dev,key=ivs10i_key$,dom=*next) ivs10i$
    headings$[1]=sysinfo.task_desc$+" By Item"
    x$=fndate$(ivs10i.run_date$)
    if pos(value$="UB")>0 x$="Period "+ivs10i.period$+" "+ivs10i.year$
    headings$[2]="Valued By "+x1$+" "+x2$+" As Of "
    headings$[2]=headings$[2]+x$
    headings$[4]=h1$
    headings$[5]=h2$

rem --- Position file

    if pos(level$="IB") then 
        number=0
        channel=ive07_dev
        total=0
        warehouse=0
        read (ivw07_dev,key=firm_id$,dom=*next)

rem --- Read next ivw-07 record
        while more
            ivw07a_key$=key(ivw07_dev,end=*break)
            if pos(firm_id$=ivw07a_key$)<>1 break
            call pgmdir$+"adc_progress.aon","S","","","",ivw07a.Item_Id$,0,0,1,0,ignore_status
            read record (ivw07_dev) ivw07a$

rem --- Process work file record

            gosub Work_File_ivw07

rem --- Loop back for next record
        wend

rem --- Item report completed

        totals$="Total For Report"
        totals=total
        gosub l6900
        gosub Print_Total
        if level$="I" then
            rem goto done
            done=1
            call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
            close (printer_dev,err=*next)
rem            run pgmdir$+"ivu_itemabcupd.aon"
            goto std_exit

        endif
    endif

rem --- Print positions and headings for warehouse report

    o[1]=m7+2
    o[2]=o[1]+p[0]+1
    o[3]=o[2]+p[3]+p[4]+p[5]+2
    o[4]=o[3]+xp-m2
    o[5]=o[4]+m2
    o[6]=o[5]+m3
    o[7]=o[6]+m1
    o[8]=o[7]+m9+2
    o[9]=o[8]+4
    if o[9]+1>=width then 
        o[9]=width-1
        o[8]=o[9]-4
        o[7]=o[8]-m9
        o[6]=o[7]-m1
        o[5]=o[6]-m2
        o[4]=o[5]-m3
        o[3]=o[4]-4
        o[1]=m7+2
        o[2]=o[1]+p[0]+1
    endif
    h1$(o[3]+1)="Prod"
    dw=o[3]-o[2]-1
    x=o[5]-len(x1$)
    h1$(x)=x1$
    h1$(o[5]+m3-4)="Unit"
    h1$(o[6]+m1-5)="Total"
    h1$(o[8])="Old"
    h1$(o[9])="New"
    h2$(o[0]+m7-2)="Seq"
    h2$(o[1]+1)="Item"
    h2$(o[2]+1)="Description"
    h2$(o[3]+1)="Type"
    h2$(x)=x2$
    h2$(o[5]+m3-4)="Cost"
    h2$(o[6]+m1-5)="Value"
    h2$(o[7]+2)="Percent"
    h2$(o[8])="ABC"
    h2$(o[9])="ABC"

rem --- Initializations for warehouse report

    dim count[25],value[25]
    t0$=""
    channel=ive17_dev
    headings$[1]=sysinfo.task_desc$+" By Warehouse"
    headings$[2]="Valued By "+x1$+" "+x2$
    headings$[4]=h1$
    number=0
    headings$[5]=h2$
    sequence=0
    total=0
    warehouse=0
    l1=0
    l=l9+1

rem --- Position file

    call pgmdir$+"adc_progress.aon","S","","","","",0,ivw17_dev,1,0,ignore_status
    read (ivw17_dev,key=firm_id$+begwhse$,dom=*next)

rem --- Read next ivw-17 record
    while more
        ivw17a_key$=key(ivw17_dev,end=*break)
        if pos(firm_id$=ivw17a_key$)<>1 break
        if endwhse$<>"" if ivw17a_key.warehouse_id$>endwhse$ break
        call pgmdir$+"adc_progress.aon","S","","","",ivw17a_key.warehouse_id$+" "+ivw17a_key.item_Id$,0,0,1,0,ignore_status
        read record (ivw17_dev) ivw17a$

rem --- Level break?

        if ivw17a.warehouse_id$<>t0$ gosub Whse_Break

rem --- Process work file record

        cost$=str(ivw17a.unit_cost:m3$)

        gosub Work_File_ivw17

rem --- Loop back for next record
    wend 

done: rem --- All done

    done=1
    if pos(level$="WB")>0 gosub Whse_Break
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    close (printer_dev,err=*next)
rem            run pgmdir$+"ivu_itemabcupd.aon"
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    return

Print_Total: rem --- Print totals

    headings=2
    if l+class+7>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)@(44+m8-8),"Number",@(59),"Percent",@(87),"Percent"
    print (printer_dev)@(36),"Class",@(44+m8-8),"Of Items",@(59),"Of Total",@(72),"Total Value",@(87),"Of Total"
    print (printer_dev)""
    headings=6
    l=l9+1

rem --- Print line for each class

    for x=0 to 25
        if count[x]<>0 and value[x]<>0 then
            percent=0
            amount=0
            if number<>0 percent=(count[x]*100)/number
            if warehouse<>0 amount=(value[x]*100)/warehouse
            print (printer_dev)@(36),letters$(x+1,1),@(44),count[x]:m8$,@(59),percent:m9$,@(84-m1),value[x]:m1$,@(87),amount:m9$
        endif
    next x

rem --- Grand totals

    print (printer_dev)""
    print (printer_dev)@(36),"Total",@(44),number:m8$,@(84-m1),warehouse:m1$
    return

Whse_Break: rem --- Warehouse Break

    if t0$<>"" and l1=0 then 
        let totals$="Total For "+h9$,totals=warehouse
        gosub l6900
        let totals$="Total For Report",totals=total
        if done gosub l6900
        gosub Print_Total
    endif
    if done goto whse_break_done
    dim count[25],value[25]
    let class=0,totalpct=0,xlimit=percents[class],sequence=0,number=0
    let t0$=ivw17a_key.warehouse_id$,ivm10c.short_name$="(Not on File)",l=l9+1,l1=0,warehouse=0
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    let h9$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2),headings$[1]=sysinfo.task_desc$+"For "+h9$

    dim ivs10w[3]
    ivs10w0$=firm_id$+"W"+t0$
    ivs10w1$=ivs01a.current_per$+ivs01a.current_year$+when$
rem    read (ivs10w_dev,key=ivs10w0$,dom=*next)ivs10w0$,ivs10w1$,ivs10w[all]
rem    ivs10w.period$=ivs10w1$(1,2),ivs10w.year$=ivs10w1$(3,4),ivs10w.run_date$=ivs10w1$(7,8)
rem    ivs10w.abc_total_value_01=ivs10w[0],ivs10w.abc_total_value_02=ivs10w[1]
rem    ivs10w.abc_total_value_03=ivs10w[2]

    ivs10w_key.firm_id$=firm_id$
    ivs10w_key.record_id_w$="W"
    ivs10w_key.warehouse_id$=t0$
    ivs10w.firm_id$=firm_id$
    ivs10w.record_id_w$="W"
    ivs10w.warehouse_id$=t0$
    ivs10w.period$=ivs01a.current_per$
    ivs10w.year$=ivs01a.current_year$
    ivs10w.run_date$=when$

    find record (ivs10w_dev,key=ivs10w_key$,dom=*next) ivs10w$
    let x$=fndate$(ivs10w.run_date$)
    if pos(value$="UB")>0 x$="Period "+ivs10w.period$+" "+ivs10w.year$
    let headings$[2]="Valued By "+x1$+" "+x2$+" As Of "+x$
whse_break_done:
    return

Work_File_ivw07: rem --- Process work file record

    dim description$(dw)
    ivm01a_key.firm_id$=firm_id$,ivm01a_key.item_id$=ivw07a.item_id$
    ivm01a.item_desc$="(Not On File)"+fill(60),ivm01a.product_type$=""
    find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$
    description$=cvs(ivm01a.item_desc$,2)
    if pos("Not"=description$) 
	
	ivm01a.item_desc$="(Missing ivw07)"
    endif
    oldabc$=ivw07a.abc_code_01$

rem --- Calculate percentage

    percent=0,quantity=ivw07a.annual_usage,amount=ivw07a.abc_total_value_01,x=0
    if value$="O" quantity=ivw07a.qty_on_hand,amount=ivw07a.abc_total_value_02,x=1
    if value$="B" quantity=ivw07a.end_balance,amount=ivw07a.abc_total_value_03,x=2
    if x=0 if ivs10i.abc_total_value_01<>0 percent=(amount*100)/ivs10i.abc_total_value_01
    if x=1 if ivs10i.abc_total_value_02<>0 percent=(amount*100)/ivs10i.abc_total_value_02
    if x=2 if ivs10i.abc_total_value_03<>0 percent=(amount*100)/ivs10i.abc_total_value_03

rem --- Print detail line

    if l+1>l9 gosub report_heading
    sequence=sequence+1,l=l+1,newabc$=letters$(class+1,1)
    total=total+amount,warehouse=warehouse+amount,l1=l1+1
    print (printer_dev)@(o[0]),sequence:m7$,@(o[1]),ivm01a.item_id$,@(o[2]),description$,@(o[3]),ivm01a.product_type$,@(o[4]),quantity:m2$,@(o[5]),cost$,@(o[6]),amount:m1$,@(o[7]),percent:m9$,@(o[8]),oldabc$,@(o[9]),newabc$

rem --- New class?

    totalpct=min(totalpct+percent,100),number=number+1
    value[class]=value[class]+amount,count[class]=count[class]+1
    if totalpct>xlimit class=class+1,xlimit=xlimit+percents[class]

rem --- Update IVE-07

    ive07a_key.firm_id$=ivw07a_key.firm_id$
    ive07a.firm_id$=ivw07a.firm_id$
    ive07a_key.item_id$=ivw07a.item_id$
    ive07a.item_id$=ivw07a.item_id$
    ive07a.abc_code_01$=oldabc$,ive07a.abc_code_02$=newabc$
    ive07a.annual_usage=ivw07a.annual_usage
    ive07a.qty_on_hand=ivw07a.qty_on_hand
    ive07a.end_balance=ivw07a.end_balance
    ive07a.unit_cost=ivw07a.unit_cost
    ive07a.abc_total_value_01=ivw07a.abc_total_value_01
    ive07a.abc_total_value_02=ivw07a.abc_total_value_02
    ive07a.abc_total_value_03=ivw07a.abc_total_value_03
rem    precision 0 
rem    ive07a.annual_usage=ive07a.annual_usage*1
rem    ive07a.qty_on_hand=ive07a.qty_on_hand*1
rem    ive07a.end_balance=ive07a.end_balance*1

rem    ive07a.abc_total_value_01=ive07a.abc_total_value_01*1
rem    ive07a.abc_total_value_02=ive07a.abc_total_value_02*1
rem    ive07a.abc_total_value_03=ive07a.abc_total_value_03*1
rem    precision 4 
    ive07a$=field(ive07a$)
    write record (ive07_dev,key=ive07a_key$) ive07a$
    return

Work_File_ivw17: rem --- Process work file record

    dim description$(dw)
    ivm01a_key.firm_id$=firm_id$,ivm01a_key.item_id$=ivw17a.item_id$
    ivm01a.item_desc$="(Not On File)",ivm01a.product_type$=""
ivw17_item_read:
    find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$

    description$=cvs(ivm01a.item_desc$,2)
    if pos("Not"=description$) 
	
	ivm01a.item_desc$="(Missing ivw17)"
rem	ivm01a_key.item_id$=ivw17a.item_id$(3)+"  "
rem	goto ivw17_item_read
    endif
    oldabc$=ivw17a.abc_code_01$

rem --- Calculate percentage

    percent=0,quantity=ivw17a.annual_usage,amount=ivw17a.abc_total_value_01,x=0
    if value$="O" quantity=ivw17a.qty_on_hand,amount=ivw17a.abc_total_value_02,x=1
    if value$="B" quantity=ivw17a.end_balance,amount=ivw17a.abc_total_value_03,x=2
    if x=0 if ivs10w.abc_total_value_01<>0 percent=(amount*100)/ivs10w.abc_total_value_01
    if x=1 if ivs10w.abc_total_value_02<>0 percent=(amount*100)/ivs10w.abc_total_value_02
    if x=2 if ivs10w.abc_total_value_03<>0 percent=(amount*100)/ivs10w.abc_total_value_03

rem --- Print detail line

    if l+1>l9 gosub report_heading
    sequence=sequence+1,l=l+1,newabc$=letters$(class+1,1)
    total=total+amount,warehouse=warehouse+amount,l1=l1+1
    print (printer_dev)@(o[0]),sequence:m7$,@(o[1]),ivm01a.item_id$,@(o[2]),description$,@(o[3]),ivm01a.product_type$,@(o[4]),quantity:m2$,@(o[5]),cost$,@(o[6]),amount:m1$,@(o[7]),percent:m9$,@(o[8]),oldabc$,@(o[9]),newabc$

rem --- New class?

    totalpct=min(totalpct+percent,100),number=number+1
    value[class]=value[class]+amount,count[class]=count[class]+1
    if totalpct>xlimit class=class+1,xlimit=xlimit+percents[class]

rem --- Update IVE-17

    ive17a_key.firm_id$=ivw17a_key.firm_id$
    ive17a.firm_id$=ivw17a.firm_id$
    ive17a_key.warehouse_id$=ivw17a_key.warehouse_id$
    ive17a.warehouse_id$=ivw17a.warehouse_id$
    ive17a_key.item_id$=ivw17a_key.item_id$
    ive17a.item_id$=ivw17a.item_id$
    ive17a.abc_code_01$=oldabc$,ive17a.abc_code_02$=newabc$
    ive17a.annual_usage=ivw17a.annual_usage
    ive17a.qty_on_hand=ivw17a.qty_on_hand
    ive17a.end_balance=ivw17a.end_balance
    ive17a.unit_cost=ivw17a.unit_cost
    ive17a.abc_total_value_01=ivw17a.abc_total_value_01
    ive17a.abc_total_value_02=ivw17a.abc_total_value_02
    ive17a.abc_total_value_03=ivw17a.abc_total_value_03
    ive17a$=field(ive17a$)
    write record (ive17_dev,key=ive17a_key$) ive17a$
    return

rem --- Print totals
l6900:
    if l+1>l9 gosub report_heading
    print (printer_dev)@(o[6]-len(totals$)),totals$,@(o[6]),totals:m1$
    let l=l+1
    return

Position: rem --- Print positions

    dim h1$(width),h2$(width)
    o[1]=m7+2
    o[2]=o[1]+p[0]+1
    o[3]=o[2]+p[3]+p[4]+p[5]+2
    o[4]=o[3]+xp-m2
    o[6]=o[4]+m2
    o[7]=o[6]+m1
    o[8]=o[7]+m9+2
    o[9]=o[8]+4
    if o[9]+1>= width then
        o[9]=width-1
        o[8]=o[9]-4
        o[7]=o[8]-m9
        o[6]=o[7]-m1
        o[4]=o[6]-m2
        o[3]=o[4]-4
        o[1]=m7+2
        o[2]=o[1]+p[0]+1
    endif
    h1$(o[3]+1)="Prod"
    x1$="Quantity"
    x2$="On Hand"
    dw=o[3]-o[2]-1
    if value$="U" x1$="Estimated Annual",x2$="Usage"
    if value$="B" x1$="Ending ",x2$="Balance"
    x=o[6]-len(x1$)
    o[5]=o[6]
    h1$(x)=x1$
    h1$(o[6]+m1-5)="Total"
    h1$(o[8])="Old"
    h1$(o[9])="New"
    h2$(o[0]+m7-2)="Seq"
    h2$(o[1]+1)="Item"
    h2$(o[2]+1)="Description"
    h2$(o[3]+1)="Type"
    h2$(x)=x2$
    h2$(o[6]+m1-5)="Value"
    h2$(o[7]+2)="Percent"
    h2$(o[8])="ABC"
    h2$(o[9])="ABC"
    cost$=""
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
