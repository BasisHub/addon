rem --- ABC Analysis Report (Report Overlay - For Item wise display)
rem --- Program ivr_itemabcrpt_o2.aon v8.0.0 16Jul2007 (ivr_pc)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:36:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]

    dim count[25],value[25]
    when$=sysinfo.system_date$
    clock$=""
    m7$="####0"
    m9$="-##0.00%"
    m2$="###,###.000-"
    m1$="###,###,###.00-"
    m8$="###,###,##0"
    width=132
    page=0
    done=0
    sequence=0
    iv_class=0
    totalpct=0
    total_recs=0
    xlimit=percents[iv_class]
    letters$="ABCDEFGHIJKLMNOPQRSTUVWXYZ"

rem --- Headings

    if value$="U" then column_head$=Translate!.getTranslation("AON_ESTIMATED^ANNUAL_USAGE")
    if value$="B" then column_head$=Translate!.getTranslation("AON_ENDING^BALANCE")
    if value$="Q" then column_head$=Translate!.getTranslation("AON_QUANTITY^ON_HAND")
    p=pos("^"=column_head$)

    headings=4
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__BY_ITEM")
    headings$[2]=Translate!.getTranslation("AON_VALUED_BY_")+column_head$(1,p-1)+" "+column_head$(p+1)+Translate!.getTranslation("AON__AS_OF_")

rem --- Column Headings

    columns=8
    dim columns$[columns,10]

    columns$[0,0]=Translate!.getTranslation("AON_SEQ"),                    columns$[0,1]="C",   columns$[0,2]="5"
    columns$[1,0]=Translate!.getTranslation("AON_ITEM"),                   columns$[1,1]="C",   columns$[1,2]="10"
    columns$[2,0]=Translate!.getTranslation("AON_DESCRIPTION"),            columns$[2,1]="C",   columns$[2,2]="25"
    columns$[3,0]=Translate!.getTranslation("AON_PRODUCT^TYPE"),           columns$[3,1]="C",   columns$[3,2]="8"
    columns$[4,0]=column_head$,             columns$[4,1]="N",   columns$[4,2]="12"
    columns$[5,0]=Translate!.getTranslation("AON_TOTAL^VALUE"),            columns$[5,1]="N",   columns$[5,2]="12",columns$[5,10]="T"
    columns$[6,0]=Translate!.getTranslation("AON_PERCENT"),                columns$[6,1]="N",   columns$[6,2]="10" 
    columns$[7,0]=Translate!.getTranslation("AON_OLD^ABC"),                columns$[7,1]="C",   columns$[7,2]="5"
    columns$[8,0]=Translate!.getTranslation("AON_NEW^ABC"),                columns$[8,1]="C",   columns$[8,2]="5"

rem --- Background

    call pgmdir$+"adc_progress.aon","S","IVW_ABCITEM","","","",0,ivw07_dev,1,meter_num,status

rem --- Retrieve item totals

    dim ivs10i[3]
    ivs10i_key.firm_id$=firm_id$
    ivs10i_key.record_id_i$="I"
    ivs10i.firm_id$=firm_id$
    ivs10i.record_id_i$="I"
    ivs10i.period$=ivs01a.current_per$
    ivs10i.year$=ivs01a.current_year$
    ivs10i.run_date$=when$
    find record (ivs10i_dev,key=ivs10i_key$,dom=*next) ivs10i$
    x$=fndate$(ivs10i.run_date$)
    if pos(value$="UB")>0 x$=Translate!.getTranslation("AON_PERIOD_")+ivs10i.period$+" "+ivs10i.year$
    headings$[2]=headings$[2]+x$

rem --- Position file

    if pos(level$="IB") then 
        number=0
        channel=ive07_dev
        total=0
        warehouse=0
        read (ivw07_dev,key=firm_id$,dom=*next)

    rem --- Read next ivw-07 record

        while more
            ivw07a_key$=key(ivw07_dev,end=*break)
            if pos(firm_id$=ivw07a_key$)<>1 break
            total_recs=total_recs+1
            if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
            read record (ivw07_dev) ivw07a$

        rem --- Process work file record

            gosub work_file_ivw07

        rem --- Loop back for next record

        wend

    rem --- Item report completed

        totals$=Translate!.getTranslation("AON_TOTAL_FOR_REPORT")
        totals=total
        gosub print_total
        gosub print_summary
        if level$="I" then
            done=1
            call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
        rem run pgmdir$+"ivu_itemabcupd.aon"
            goto std_exit
        endif
    endif

rem --- Done

    width=h0,page=h,update$="ivr_itemabcrpt_o3.aon"
    overlay$=update$
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit

work_file_ivw07: rem --- Process work file record

    dim description$(dw)
    ivm01a_key.firm_id$=firm_id$,ivm01a_key.item_id$=ivw07a.item_id$
    ivm01a.item_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")+fill(60),ivm01a.product_type$=""
    find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$
    description$=cvs(ivm01a.item_desc$,2)
    if pos(Translate!.getTranslation("AON_NOT")=description$) then ivm01a.item_desc$=Translate!.getTranslation("AON_(MISSING_IVW07)")
    oldabc$=ivw07a.abc_code_01$

rem --- Calculate percentage

    percent=0,quantity=ivw07a.annual_usage,amount=ivw07a.abc_total_value_01,x=0
    if value$="Q" then quantity=ivw07a.qty_on_hand,amount=ivw07a.abc_total_value_02,x=1
    if value$="B" then quantity=ivw07a.end_balance,amount=ivw07a.abc_total_value_03,x=2
    if x=0 and ivs10i.total_value_01<>0 percent=(amount*100)/ivs10i.total_value_01
    if x=1 and ivs10i.total_value_02<>0 percent=(amount*100)/ivs10i.total_value_02
    if x=2 and ivs10i.total_value_03<>0 percent=(amount*100)/ivs10i.total_value_03

rem --- Print detail line

    sequence=sequence+1,newabc$=letters$(iv_class+1,1)
    total=total+amount,warehouse=warehouse+amount,l1=l1+1
    OutVect!.addItem(str(sequence:m7$))
    OutVect!.addItem(ivm01a.item_id$)
    OutVect!.addItem(description$)
    OutVect!.addItem(ivm01a.product_type$)
    OutVect!.addItem(str(quantity:m2$))
    OutVect!.addItem(str(amount:m1$))
    OutVect!.addItem(str(percent:m9$))
    OutVect!.addItem("  "+oldabc$)
    OutVect!.addItem(newabc$)

rem --- New class?

    totalpct=min(totalpct+percent,100),number=number+1
    value[iv_class]=value[iv_class]+amount,count[iv_class]=count[iv_class]+1
    if totalpct>xlimit iv_class=iv_class+1,xlimit=xlimit+percents[iv_class]

rem --- Update ive-07

    ive07a_key.firm_id$=ivw07a_key.firm_id$
    ive07a.firm_id$=ivw07a.firm_id$
    ive07a_key.item_id$=ivw07a.item_id$
    ive07a.item_id$=ivw07a.item_id$
    ive07a.abc_code_01$=oldabc$,ive07a.abc_code_02$=newabc$
    ive07a.annual_usage=ivw07a.annual_usage
    ive07a.qty_on_hand=ivw07a.qty_on_hand
    ive07a.end_balance=ivw07a.end_balance
    ive07a.unit_cost=ivw07a.unit_cost
    ive07a.abc_total_value_01=ivw07a.abc_total_value_01
    ive07a.abc_total_value_02=ivw07a.abc_total_value_02
    ive07a.abc_total_value_03=ivw07a.abc_total_value_03
    ive07a$=field(ive07a$)
    write record (ive07_dev,key=ive07a_key$) ive07a$

    return

print_total: rem --- Print totals

    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk=fnblank(2)
    OutVect!.addItem("     "+totals$)
    xwk=fnblank(2)
    OutVect!.addItem(str(totals:m1$))
    xwk=fnblank(3)

    return

print_summary: rem --- Print summary totals

    xwk=fnblank(columns+1)
    xwk=fnblank(columns+1)
    xwk=fnblank(2)
    OutVect!.addItem(fill(20)+Translate!.getTranslation("AON_CLASS"))
    OutVect!.addItem(Translate!.getTranslation("AON_NUMBER_OF_ITEMS"))
    OutVect!.addItem(Translate!.getTranslation("AON_PERCENT_OF_TOTAL"))
    OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_VALUE"))
    OutVect!.addItem(Translate!.getTranslation("AON_PERCENT_OF_TOTAL"))
    xwk=fnblank(2)
    xwk=fnblank(columns+1)

rem --- Print line for each class

    xwk=fnblank(columns+1)

    for x=0 to 25
        if count[x]<>0 and value[x]<>0 then
            percent=0
            amount=0
            if number<>0    then percent=(count[x]*100)/number
            if warehouse<>0 then amount=(value[x]*100)/warehouse

            xwk=fnblank(2)
            OutVect!.addItem(fill(22)+letters$(x+1,1))
            OutVect!.addItem(str(count[x]:m8$))
            OutVect!.addItem(str(percent:m9$))
            OutVect!.addItem(str(value[x]:m1$))
            OutVect!.addItem(str(amount:m9$))
            xwk=fnblank(2) 
        endif
    next x

rem --- Grand totals

    xwk=fnblank(columns+1)
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk=fnblank(2)
    OutVect!.addItem(fill(18)+Translate!.getTranslation("AON_TOTAL"))
    OutVect!.addItem(str(number:m8$))
    OutVect!.addItem("")
    OutVect!.addItem(str(warehouse:m1$))
    OutVect!.addItem("")
    xwk=fnblank(2)  

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
