rem --- Inventory Valuation Report (Report Overlay)
rem --- Program ivr_valuation_o1.aon v8.0.0 16Jul2007 (ivr_nb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:37:21)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Functions object

    use ::ado_func.src::func

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector HdrVect!
    declare BBjVector BrkVect!
    declare BBjVector TotVect!

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]
    dim item[2],types$[11]
    when$=sysinfo.system_date$
    clock$=""
    width=132
    page=0
    cost_desc$=Translate!.getTranslation("AON_AVERAGE")
    if cost$="S" cost_desc$=Translate!.getTranslation("AON_STANDARD")
    if cost$="R" cost_desc$=Translate!.getTranslation("AON_REPLACMNT")
    if cost$="L" cost_desc$=Translate!.getTranslation("AON_LANDED")
    h9$=""
    selection$="END"
    t0$="", t1$="", t2$=""
    period$=ivs01a.current_year$+ivs01a.current_per$
    warehouse=0, product=0, report=0, l1=0, l2=0, l3=0
    source$="BBBOTAOPRCTIWOIAIIIRPH"
    types$[0]="????"
    types$[1]=Translate!.getTranslation("AON_CONV")
    types$[2]="BOM "
    types$[3]=Translate!.getTranslation("AON_TIER")
    types$[4]=Translate!.getTranslation("AON_SALE")
    types$[5]="P.O."
    types$[6]=Translate!.getTranslation("AON_XFER")
    types$[7]="W.O."
    types$[8]=Translate!.getTranslation("AON_ADJ_")
    types$[9]=Translate!.getTranslation("AON_ISS_")
    types$[10]=Translate!.getTranslation("AON_REC_")
    types$[11]=Translate!.getTranslation("AON_PHYS")
    more=1
    recs=0
    total_recs=0

rem --- Background

    call pgmdir$+"adc_progress.aon","N","IVM_ITEMWHSE","","","",0,ivm02_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem --- Report headings

    if begitem$="" headings$[5]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[5]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if begprod$="" headings$[6]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[6]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[6]=headings$[6]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[6]=headings$[6]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    if format<>1 then headings$[4]="[HEADER]"

rem --- Column Headings

    if level$="P" then
        dim columns$[5,10]
        columns=6
        columns$[0,0]=Translate!.getTranslation("AON_WAREHOUSE"),              columns$[0,1]="C",   columns$[0,2]="15"
        columns$[1,0]=Translate!.getTranslation("AON_PRODUCT"),                columns$[1,1]="C",   columns$[1,2]="25"
        columns$[2,0]=Translate!.getTranslation("AON_QUANTITY^ON_HAND"),       columns$[2,1]="N",   columns$[2,2]=str(m2), columns$[2,3]=m2$
        columns$[3,0]=cost_desc$+Translate!.getTranslation("AON_^UNIT_COST"),  columns$[3,1]="N",   columns$[3,2]=str(m3), columns$[3,3]=m3$
        columns$[4,0]=Translate!.getTranslation("AON_ENDING^BALANCE"),         columns$[4,1]="N",   columns$[4,2]=str(m2), columns$[4,3]=m2$
        columns$[5,0]=Translate!.getTranslation("AON_TOTAL^VALUE"),            columns$[5,1]="N",   columns$[5,2]=str(m1), columns$[5,3]=m1$, columns$[5,10]="T"
    endif

    if level$="S" then
        dim columns$[7,10]
        columns=8
        columns$[0,0]=Translate!.getTranslation("AON_ITEM"),                   columns$[0,1]="C",   columns$[0,2]="10"
        columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),            columns$[1,1]="C",   columns$[1,2]="25"
        columns$[2,0]="UM",                     columns$[2,1]="C",   columns$[2,2]="5"
        columns$[3,0]=Translate!.getTranslation("AON_LOCATION"),               columns$[3,1]="C",   columns$[3,2]="8"
        columns$[4,0]=Translate!.getTranslation("AON_QUANTITY^ON_HAND"),       columns$[4,1]="N",   columns$[4,2]=str(m2), columns$[4,3]=m2$
        columns$[5,0]=cost_desc$+Translate!.getTranslation("AON_^UNIT_COST"),  columns$[5,1]="N",   columns$[5,2]=str(m3), columns$[5,3]=m3$
        columns$[6,0]=Translate!.getTranslation("AON_ENDING^BALANCE"),         columns$[6,1]="N",   columns$[6,2]=str(m2), columns$[6,3]=m2$
        columns$[7,0]=Translate!.getTranslation("AON_TOTAL^VALUE"),            columns$[7,1]="N",   columns$[7,2]=str(m1), columns$[7,3]=m1$, columns$[7,10]="T"
    endif

    if level$="D" then
        dim columns$[9,10]
        columns=10
        line1ls$=Translate!.getTranslation("AON___LOT/SERIAL_NUMBER_OR")
        line2ls$=Translate!.getTranslation("AON_TIER__DATE___TYPE_REF_#")
        if format=5 then line1ls$=""
        if format=6 then line1ls$="",line2ls$=Translate!.getTranslation("AON_LOT/SERIAL_NUMBER")
        columns$[0,0]=Translate!.getTranslation("AON_ITEM"),                   columns$[0,1]="C",   columns$[0,2]="10"
        columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),            columns$[1,1]="C",   columns$[1,2]="25"
        columns$[2,0]="UM",                     columns$[2,1]="C",   columns$[2,2]="5"
        columns$[3,0]=Translate!.getTranslation("AON_LOCATION"),               columns$[3,1]="C",   columns$[3,2]="8"
        columns$[4,0]=cost_desc$+Translate!.getTranslation("AON_^COST"),       columns$[4,1]="N",   columns$[4,2]=str(m3), columns$[4,3]=m3$
        columns$[5,0]=line1ls$+"^"+line2ls$,    columns$[5,1]="C",   columns$[5,2]="20"
        columns$[6,0]=Translate!.getTranslation("AON_QUANTITY^ON_HAND"),       columns$[6,1]="N",   columns$[6,2]=str(m2), columns$[6,3]=m2$
        columns$[7,0]=Translate!.getTranslation("AON_UNIT_COST"),              columns$[7,1]="N",   columns$[7,2]=str(m3), columns$[7,3]=m3$
        columns$[8,0]=Translate!.getTranslation("AON_ENDING^BALANCE"),         columns$[8,1]="N",   columns$[8,2]=str(m2), columns$[8,3]=m2$
        columns$[9,0]=Translate!.getTranslation("AON_TOTAL^VALUE"),            columns$[9,1]="N",   columns$[9,2]=str(m1), columns$[9,3]=m1$, columns$[9,10]="T"
    endif

rem --- Prepare SQL

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ivm_itemwhse.item_id, ivm_itemwhse.warehouse_id, ivm_itemmast.product_type "
    sql_prep$=sql_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"    ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
    where_clause$="       WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
    if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND "
    if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    where_clause$=where_clause$+" ORDER BY ivm_itemwhse.warehouse_id,ivm_itemmast.product_type "
    if where_clause$<>"" sql_prep$=sql_prep$+where_clause$

    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read

    while more

        read_tpl$=sqlfetch(sql_chan,err=*break) 
        product$=read_tpl.product_type$
        item$=read_tpl.item_id$
        whse$=read_tpl.warehouse_id$
        
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

        if whse$<>t0$ gosub whse_break
        if product$<>t1$ gosub product_break
        if format>3 and item$<>t2$ gosub item_break

    rem --- Retrieve item, warehouse and activity

        dim item[2],w[12],ivm12a$:templates$[8]
        ivm01a_key$=firm_id$+item$
        ivm02a_key$=firm_id$+whse$+item$
        ivm12a_key$=ivm02a_key$+period$
        
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        if type$<>"" and ivm01a.item_type$<>type$ then continue
        find record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
        find record (ivm12_dev,key=ivm12a_key$,dom=*next) ivm12a$
        description$=func.displayDesc(ivm01a.item_desc$,p[3],p[4],p[5])
        um$=ivm01a.unit_of_sale$
        printed=0
        location$=ivm02a.location$
        onhand=ivm02a.qty_on_hand
        
        if cost$="A" cost=ivm02a.avg_cost
        if cost$="S" cost=ivm02a.std_cost
        if cost$="R" cost=ivm02a.rep_cost
        if cost$="L" cost=ivm02a.landed_cost
        
        quantity=onhand
        cost1=cost
        account$=ivm01a.gl_inv_acct$
        l3=l3+1

        w[0]=ivm12a.beg_balance, w[1]=ivm12a.qty_received, w[2]=ivm12a.qty_built 
        w[3]=ivm12a.qty_sold, w[4]=ivm12a.qty_issued, w[5]=ivm12a.qty_adjust 
        w[6]=ivm12a.qty_xfer_in, w[7]=ivm12a.qty_xfer_out, w[8]=ivm12a.qty_returned
        
        call pgmdir$+"ivc_periodqty.aon",selection$,ivm12a$,ignore[all],balance,status
        if status = 999 then exitto std_exit
        if whichqty$="B" quantity=balance
        if format<=3 and include$="N" and quantity=0 then continue

    rem --- Retrieve GL account if distribute by item

        if di$<>"N" then
            arm10d_key.firm_id$=firm_id$,arm10d_key.record_id_d$="D",arm10d_key.ar_dist_code$=ivm02a.ar_dist_code$
            find record (arm10_dev,key=arm10d_key.firm_id$+arm10d_key.record_id_d$+arm10d_key.ar_dist_code$,dom=*next) arm10d$
            account$=arm10d.gl_inv_acct$
        endif

    rem --- Detail report

        if format=4 or format=6 then 
            fromlf=0
            if include$="N" and quantity=0 then continue
            if ls$="Y" and ivm01a.lotser_item$="Y" and ivm01a.inventoried$="Y" then
                read (ivm07_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next)

            rem --- Read next lot/serial master

                while more
                    flag=0
                    ivm07a_key$=key(ivm07_dev,end=*break)
                    if pos(ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=ivm07a_key$)<>1 then break
                    read record (ivm07_dev,key=ivm07a_key$) ivm07a$
                    onhand=ivm07a.qty_on_hand
                    if cost$="A" cost=ivm07a.avg_cost
                    if cost$="S" cost=ivm07a.std_cost
                    if cost$="R" cost=ivm07a.rep_cost
                    if cost$="L" cost=ivm07a.landed_cost
                    quantity=onhand
                    balance=onhand
                    ls_ortier$=ivm07a.lotser_no$
                    ivm17a_key$=ivm07a.firm_id$+ivm07a.warehouse_id$+ivm07a.item_id$+ivm07a.lotser_no$+period$
                    read record (ivm17_dev,key=ivm17a_key$,dom=next_lot) ivm17a$
                    flag=1
                    
                next_lot: 
                
                    if flag=0 then 
                        while more
                            end_ivm17=1
                            ivm17a_key$=keyp(ivm17_dev,end=*break)
                            end_ivm17=0
                            if pos(ivm07a.firm_id$+ivm07a.warehouse_id$+ivm07a.item_id$+ivm07a.lotser_no$=ivm17a_key$)<>1 break
                            read record (ivm17_dev,key=ivm17a_key$,dir=0) ivm17a$; rem "Don't move file pointer
                            if ivm17a.year$+ivm17a.period$>period$ then continue
                            break
                        wend
                        if end_ivm17=1 then continue
                    endif

                    w[0]=ivm17a.beg_balance, w[1]=ivm17a.qty_received, w[2]=ivm17a.qty_built 
                    w[3]=ivm17a.qty_sold, w[4]=ivm17a.qty_issued, w[5]=ivm17a.qty_adjust 
                    w[6]=ivm17a.qty_xfer_in, w[7]=ivm17a.qty_xfer_out, w[8]=ivm17a.qty_returned
                    call pgmdir$+"ivc_periodqty.aon",selection$,ivm17a$,ignore[all],balance,status
                    if status = 999 then exitto std_exit
                    if whichqty$="B" then quantity=balance
                    if include$="N" and quantity=0 then continue
                    gosub total_value; rem "Get total value
                    gosub print_line; rem "Print line
                    gosub accum_total; rem "Accum Totals
                wend
                
                gosub print_total
                continue
            endif
        endif

        if format=4 or format=5 then 

        rem --- Process LIFO/FIFO Tiers

            if lf$="Y" then
                tier=0
                balance=0
                fromlf=1
                read (ivm04_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next)

            rem --- Read next LIFO/FIFO master

                while more
                    ivm04_key$=key(ivm04_dev,end=*break)
                    if pos(ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=ivm04_key$)<>1 then break
                    read record (ivm04_dev,key=ivm04_key$) ivm04a$
                    onhand=ivm04a.qty_on_hand
                    cost=ivm04a.unit_cost
                    quantity=onhand
                    if onhand=0 then continue
                    tier=tier+1 
                    ref$=ivm04a.trans_ref$
                    tiertype$=ivm04a.trans_source$
                    p=int(1+pos(tiertype$=source$,2)/2)
                    if p>0 then tiertype$=types$[p]
                    ls_ortier$=str(tier:"##0")+" "+func.formatDate(ivm04a.receipt_date$)+" "+tiertype$+" "+ref$
                    gosub total_value; rem "Get total value
                    gosub print_line; rem "Print line
                    gosub accum_total; rem "Accum Totals
                wend
				if include$<>"N" or quantity<>0
					if printed
						continue
					endif
				endif
				gosub total_value; rem "Get total value
				gosub print_line; rem "Print line
				gosub accum_total; rem "Accum Totals
                continue
            endif
        endif

    rem --- Go Calculate total value

        gosub total_value

        if format=1 
            gosub accum_total
            continue
        endif

        if format<=3 then

        rem --- Print line for formats 2 & 3 (summary & detail no LS or LF)

            if h9$<>"" then gosub product_head
            OutVect!.addItem(ivm01a.item_id$)
            OutVect!.addItem(description$)
            OutVect!.addItem(um$)
            OutVect!.addItem(location$)
            OutVect!.addItem(str(onhand))
            OutVect!.addItem(str(cost))
            OutVect!.addItem(str(balance))
            OutVect!.addItem(str(amount))
			recs=recs+1
            l1=l1+1
            gosub accum_total
            continue
        endif

    rem --- Print line for non(LS/LF) items w/formats 4, 5 & 6

        if h9$<>"" then gosub product_head
        if include$="N" and quantity=0 then continue
        OutVect!.addItem(ivm01a.item_id$)
        OutVect!.addItem(description$)
        OutVect!.addItem(um$)
        OutVect!.addItem(location$)
        OutVect!.addItem(str(cost1))
        OutVect!.addItem("")
        OutVect!.addItem(str(onhand))
        OutVect!.addItem(str(cost))
        OutVect!.addItem(str(balance))
        OutVect!.addItem(str(amount))
		recs=recs+1
        l1=l1+1
        l2=l2+1
        gosub accum_total

    rem --- Loop back for next record

    wend

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub whse_break
    total$=Translate!.getTranslation("AON_TOTAL_FOR_REPORT")
    total=report
    gosub print_total_line

    if gl$<>"Y" then
        goto std_exit
    endif

rem --- Run GL summary overlay

    headings=2
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    if status = 999 then goto std_exit
    update$="glr_accttotals.aon"

rem --- (Old naming conventions)

    gls01_dev = gls_params_dev
    glw04_dev = glw_accttotals_dev
    glm01_dev = glm_acct_dev
    dim glw04a$:fattr(glw_accttotals_rec$)
    dim glm01a$:fattr(glm_acct_rec$)

    overlay$=update$
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit

product_head: rem --- Product subheading

    OutVect!.addItem(h9$)
    xwk=fnblank(columns-1)
    xwk=fnblank(columns)
    h9$=""
    return

print_line: rem --- Print line for formats 4, 5 & 6 (LS &/or LF)

    if h9$<>"" then gosub product_head
    if fromlf then balance=0 
    OutVect!.addItem(h10$)
    OutVect!.addItem(description$)
    OutVect!.addItem(um$)
    OutVect!.addItem(location$)
    if cost1<>0 then OutVect!.addItem(str(cost1)) else OutVect!.addItem("")
    OutVect!.addItem(ls_ortier$)
    OutVect!.addItem(str(onhand))
    OutVect!.addItem(str(cost))
    if balance<>0 then OutVect!.addItem(str(balance)) else OutVect!.addItem("")
    OutVect!.addItem(str(amount))
    h10$=""
    description$=""
    um$=""
    location$=""
    cost1=0
    l1=l1+1
    l2=l2+1
    printed=1
    recs=recs+1
    return

whse_break: rem --- Warehouse Break

    if t0$<>"" then
        w=1
        gosub product_break
        total$=Translate!.getTranslation("AON_TOTAL_FOR_WAREHOUSE_")+h5$
        total=warehouse
        if warehouse>0 then gosub print_total_line    
    endif

    if done then return
    t0$=whse$
    ivm10c.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    l1=0
    l2=0
    w=0
    t2$=""
    warehouse=0
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    h5$=cvs(t0$+" "+ivm10c.short_name$,2)
    whse_head$=Translate!.getTranslation("AON_WAREHOUSE_")+h5$
    h6$=h5$
    if format=1 then return
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(whse_head$)

    return

product_break: rem --- Product break

    if t1$<>"" then
        if format>3 then gosub item_break
        if format=1 and l3<>0 then
            if whichqty$="B" and t[1]<>0 then t[0]=t[2]/t[1]
            if whichqty$="O" and totonhand<>0 then t[0]=t[2]/totonhand
            OutVect!.addItem(h6$)
            OutVect!.addItem(h7$)
            OutVect!.addItem(str(totonhand))
            OutVect!.addItem(str(t[0]))
            OutVect!.addItem(str(t[1]))
            OutVect!.addItem(str(t[2]))
            h6$=""
        endif
    endif

    if format>1 then
        total$=Translate!.getTranslation("AON_TOTAL_FOR_PRODUCT_TYPE_")+h7$
        total=product
        if l1>1 gosub print_total_line
    endif

    if done then return
    dim t[2]
    t1$=product$,ivm10a.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)"),t2$=""
    l1=0,l2=0,l3=0,product=0,totonhand=0
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    h7$=cvs(t1$+" "+ivm10a.code_desc$,2),h9$=Translate!.getTranslation("AON_PRODUCT_TYPE_")+h7$
    if w=1 then return

    if pagebreak$="Y" then 
        BrkVect!.addItem(str(OutVect!.size()/(columns)))
        HdrVect!.addItem(whse_head$)
    endif

    return

item_break: rem --- Item break

    if t2$<>"" then
        if l2>1 then
            total$=Translate!.getTranslation("AON_TOTAL_FOR_ITEM_")+h10$,itembreak=1
            if fromlf then fromlf=0,item[1]=0
            gosub print_total_line
        endif
        if l2=1 then
            itembreak=0
            if h9$<>"" gosub product_head
        endif
    endif

    if done then return
    dim item[2]
    t2$=item$(1,p[0]),l2=0,l3=0
    h10$=cvs(t2$,2)+" "
    return

total_value: rem --- Calculate total value

    precision 2
    if whichqty$="B" amount=balance*cost else amount=onhand*cost
    precision p[1]
rem amount$=fnmask$(str(amount),m1$)
    gosub update_GL
    return

accum_total: rem --- Accumulate Totals

    product=product+amount,warehouse=warehouse+amount,report=report+amount
    t[1]=t[1]+balance,t[2]=t[2]+amount,totonhand=totonhand+onhand
    item[0]=item[0]+onhand,item[1]=item[1]+balance,item[2]=item[2]+amount
    return

update_GL: rem --- Update G/L Summary

    if gl$="Y" and amount then
        glw_accttotals_rec.firm_id$    = firm_id$
        glw_accttotals_rec.gl_account$ = account$
        glw_accttotals_rec.gl_post_amt = 0
        glw_accttotals_rec.units       = 0
        extract record (glw_accttotals_dev, key=firm_id$+account$, dom=*next) glw_accttotals_rec$; rem Advisory Locking
        glw_accttotals_rec.gl_post_amt = glw_accttotals_rec.gl_post_amt + amount
        glw_accttotals_rec$ = field(glw_accttotals_rec$)
        write record (glw_accttotals_dev) glw_accttotals_rec$
    endif

    return

print_total_line: rem --- Print total line

    if itembreak then
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem("")
        OutVect!.addItem("     "+total$)
        xwk=fnblank(4)
        OutVect!.addItem(str(item[0]))
        OutVect!.addItem("")
        if item[1]<>0 then OutVect!.addItem(str(item[1])) else OutVect!.addItem("")
        OutVect!.addItem(str(item[2]))
        xwk=fnblank(columns)
    endif

    if !itembreak then
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem("")
        OutVect!.addItem("   "+total$)
        xwk=fnblank(columns-3)
        OutVect!.addItem(str(total))
        xwk=fnblank(columns)
    endif

    itembreak=0

    return

print_total: rem --- Did we print anything?

    if include$<>"N" and quantity<>0 then
        if printed then return
        gosub total_value; rem "Get total value
        gosub print_line; rem "Print line
        gosub accum_total; rem "Accum Totals
    endif

    return

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,ignore_status
    if status=0 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
