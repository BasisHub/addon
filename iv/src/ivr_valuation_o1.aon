rem --- Inventory Valuation Report (Report Overlay)
rem --- Program ivr_valuation_o1.aon v8.0.0 16Jul2007 (ivr_nb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:37:21)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]
    dim item[2],types$[11]
    when$=sysinfo.system_date$
    clock$=""
    width=132
    page=0
    cost_desc$="Average"
    if cost$="S" cost_desc$="Standard"
    if cost$="R" cost_desc$="Replacmnt"
    if cost$="L" cost_desc$="Landed"
    h9$=""
    selection$="END"
    t0$="", t1$="", t2$=""
    period$=ivs01a.current_year$+ivs01a.current_per$
    warehouse=0, product=0, report=0, l1=0, l2=0, l3=0
    source$="BBBOTAOPRCTIWOIAIIIRPH"
    types$[0]="????"
    types$[1]="Conv"
    types$[2]="BOM "
    types$[3]="Tier"
    types$[4]="Sale"
    types$[5]="P.O."
    types$[6]="Xfer"
    types$[7]="W.O."
    types$[8]="Adj "
    types$[9]="Iss "
    types$[10]="Rec "
    types$[11]="Phys"
    more=1

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm02_dev,1,meter_num,status

rem --- Report headings


    if begitem$="" headings$[5]="From Item: First" else headings$[5]="From Item: "+begitem$
    if enditem$="" headings$[5]=headings$[5]+" -- To Item: Last" else headings$[5]=headings$[5]+" -- To Item: "+enditem$
    if begprod$="" headings$[6]="From Product: First" else headings$[6]="From Product: "+begprod$                
    if endprod$="" headings$[6]=headings$[6]+" -- To Product: Last" else headings$[6]=headings$[6]+" -- To Product: "+endprod$
    if format<>1 then headings$[4]="[HEADER]"


rem --- Column Headings

    if level$="P" then
        dim columns$[5,10]
        columns=6
            columns$[0,0]="Warehouse",              columns$[0,1]="C",   columns$[0,2]="15"
            columns$[1,0]="Product",                columns$[1,1]="C",   columns$[1,2]="25"
            columns$[2,0]="Quantity^On Hand",       columns$[2,1]="N",   columns$[2,2]="12",columns$[2,3]=m2$
            columns$[3,0]=cost_desc$+"^Unit Cost",  columns$[3,1]="N",   columns$[3,2]="12",columns$[3,3]=m3$
            columns$[4,0]="Ending^Balance",         columns$[4,1]="N",   columns$[4,2]="12",columns$[4,3]=m2$
            columns$[5,0]="Total^Value",            columns$[5,1]="N",   columns$[5,2]="12",columns$[5,3]=m1$,columns$[5,10]="T"
    endif

    if level$="S" then
        dim columns$[7,10]
        columns=8
            columns$[0,0]="Item",                   columns$[0,1]="C",   columns$[0,2]="10"
            columns$[1,0]="Description",            columns$[1,1]="C",   columns$[1,2]="25"
            columns$[2,0]="UM",                     columns$[2,1]="C",   columns$[2,2]="5"
            columns$[3,0]="Location",               columns$[3,1]="C",   columns$[3,2]="8"
            columns$[4,0]="Quantity^On Hand",       columns$[4,1]="N",   columns$[4,2]="12",columns$[4,3]=m2$
            columns$[5,0]=cost_desc$+"^Unit Cost",  columns$[5,1]="N",   columns$[5,2]="12",columns$[5,3]=m3$
            columns$[6,0]="Ending^Balance",         columns$[6,1]="N",   columns$[6,2]="12",columns$[6,3]=m2$
            columns$[7,0]="Total^Value",            columns$[7,1]="N",   columns$[7,2]="12",columns$[7,3]=m1$,columns$[7,10]="T"
    endif

    if level$="D" then
        dim columns$[9,10]
        columns=10
        line1ls$="  Lot/Serial Number or"
        line2ls$="Tier  Date   Type Ref #"
        if format=5 then line1ls$=""
        if format=6 then line1ls$="",line2ls$="Lot/Serial Number"
            columns$[0,0]="Item",                   columns$[0,1]="C",   columns$[0,2]="10"
            columns$[1,0]="Description",            columns$[1,1]="C",   columns$[1,2]="25"
            columns$[2,0]="UM",                     columns$[2,1]="C",   columns$[2,2]="5"
            columns$[3,0]="Location",               columns$[3,1]="C",   columns$[3,2]="8"
            columns$[4,0]=cost_desc$+"^Cost",       columns$[4,1]="N",   columns$[4,2]="12",columns$[4,3]=m3$
            columns$[5,0]=line1ls$+"^"+line2ls$,    columns$[5,1]="C",   columns$[5,2]="20"
            columns$[6,0]="Quantity^On Hand",       columns$[6,1]="N",   columns$[6,2]="12",columns$[6,3]=m2$
            columns$[7,0]="Unit Cost",              columns$[7,1]="N",   columns$[7,2]="12",columns$[7,3]=m3$
            columns$[8,0]="Ending^Balance",         columns$[8,1]="N",   columns$[8,2]="12",columns$[8,3]=m2$
            columns$[9,0]="Total^Value",            columns$[9,1]="N",   columns$[9,2]="12",columns$[9,3]=m1$,columns$[9,10]="T"
    endif

    sql_prep$="select ivm_itemwhse.firm_id, ivm_itemwhse.item_id,"
    sql_prep$=sql_prep$+"ivm_itemwhse.warehouse_id, ivm_itemmast.product_type,"
    sql_prep$=sql_prep$+"ivm_itemmast.item_type "
    sql_prep$=sql_prep$+"FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
    where_clause$="WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
    if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND"
    if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    where_clause$=where_clause$+" order by ivm_itemwhse.warehouse_id,ivm_itemmast.product_type "
    if where_clause$<>"" sql_prep$=sql_prep$+where_clause$

    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read

    while more

        read_tpl$=sqlfetch(sql_chan,err=*break) 
        product$=read_tpl.product_type$
        item$=read_tpl.item_id$
        whse$=read_tpl.warehouse_id$
        x$=whse$+" "+product$+" "+item$(1,p[0])

        if whse$<>t0$ gosub whse_break
        if product$<>t1$ gosub product_break
        if format>3 and item$<>t2$ gosub item_break

rem --- Retrieve item, warehouse and activity

        dim item[2],w[12],ivm12a$:templates$[8]
        ivm01a_key$=firm_id$+item$
        ivm02a_key$=firm_id$+whse$+item$
        ivm12a_key$=ivm02a_key$+period$
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        if type$<>"" and ivm01a.item_type$<>type$ then continue
        find record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
        find record (ivm12_dev,key=ivm12a_key$,dom=*next) ivm12a$
        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        um$=ivm01a.unit_of_sale$
        printed=0
        location$=ivm02a.location$
        onhand=ivm02a.qty_on_hand
        if cost$="A" cost=ivm02a.avg_cost
        if cost$="S" cost=ivm02a.std_cost
        if cost$="R" cost=ivm02a.rep_cost
        if cost$="L" cost=ivm02a.landed_cost
        quantity=onhand
        cost1=cost
        account$=ivm01a.gl_inv_acct$
        l3=l3+1

        w[0]=ivm12a.beg_balance, w[1]=ivm12a.qty_received, w[2]=ivm12a.qty_built 
        w[3]=ivm12a.qty_sold, w[4]=ivm12a.qty_issued, w[5]=ivm12a.qty_adjust 
        w[6]=ivm12a.qty_xfer_in, w[7]=ivm12a.qty_xfer_out, w[8]=ivm12a.qty_returned
        call pgmdir$+"ivc_periodqty.aon",selection$,w[all],balance
        if whichqty$="B" quantity=balance
        if format<=3 and include$="N" and quantity=0 then continue

rem --- Retrieve GL account if distribute by item

        if di$<>"N" then
            arm10d_key.firm_id$=firm_id$,arm10d_key.record_id_d$="D",arm10d_key.ar_dist_code$=ivm02a.ar_dist_code$
            find record (arm10_dev,key=arm10d_key.firm_id$+arm10d_key.record_id_d$+arm10d_key.ar_dist_code$,dom=*next) arm10d$
            account$=arm10d.gl_inv_acct$
        endif

rem --- Detail report

        if format=4 or format=6 then 
            fromlf=0
            if include$="N" and quantity=0 then continue
            if ls$="Y" and ivm01a.lotser_item$="Y" and ivm01a.inventoried$="Y" then
                read (ivm07_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next)

rem --- Read next lot/serial master

                while more
                    flag=0
                    ivm07a_key$=key(ivm07_dev,end=*break)
                    if pos(ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=ivm07a_key$)<>1 then break
                    read record (ivm07_dev,key=ivm07a_key$) ivm07a$
                    onhand=ivm07a.qty_on_hand
                    if cost$="A" cost=ivm07a.avg_cost
                    if cost$="S" cost=ivm07a.std_cost
                    if cost$="R" cost=ivm07a.rep_cost
                    if cost$="L" cost=ivm07a.landed_cost
                    quantity=onhand
                    balance=onhand
                    ls_ortier$=ivm07a.lotser_no$
                    ivm17a_key$=ivm07a.firm_id$+ivm07a.warehouse_id$+ivm07a.item_id$+ivm07a.lotser_no$+period$
                    read record (ivm17_dev,key=ivm17a_key$,dom=next_lot) ivm17a$
                    flag=1
next_lot:
                    if flag=0 then 
                        while more
                            end_ivm17=1
                            ivm17a_key$=keyp(ivm17_dev,end=*break)
                            end_ivm17=0
                            if pos(ivm07a.firm_id$+ivm07a.warehouse_id$+ivm07a.item_id$+ivm07a.lotser_no$=ivm17a_key$)<>1 continue
                            read record (ivm17_dev,key=ivm17a_key$,dir=0) ivm17a$; rem "Don't move file pointer
                            if ivm17a.year$+ivm17a.period$>period$ then continue
                            break
                        wend
                        if end_ivm17=1 then continue
                    endif
                    w[0]=ivm17a.beg_balance, w[1]=ivm17a.qty_received, w[2]=ivm17a.qty_built 
                    w[3]=ivm17a.qty_sold, w[4]=ivm17a.qty_issued, w[5]=ivm17a.qty_adjust 
                    w[6]=ivm17a.qty_xfer_in, w[7]=ivm17a.qty_xfer_out, w[8]=ivm17a.qty_returned
                    call pgmdir$+"ivc_periodqty.aon",selection$,w[all],balance
                    if whichqty$="B" then quantity=balance
                    if include$="N" and quantity=0 then continue
                    gosub total_value; rem "Get total value
                    gosub print_line; rem "Print line
                    gosub accum_total; rem "Accum Totals
                wend
                gosub print_total
                continue
            endif
        endif

        if format=4 or format=5 then 

rem --- Process LIFO/FIFO Tiers

            if lf$="Y" then
                tier=0
                balance=0
                fromlf=1
                read (ivm04_dev,key=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*next)

rem --- Read next LIFO/FIFO master

                while more
                    ivm04_key$=key(ivm04_dev,end=*break)
                    if pos(ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$=ivm04_key$)<>1 then break
                    read record (ivm04_dev,key=ivm04_key$) ivm04a$
                    onhand=ivm04a.qty_on_hand
                    cost=ivm04a.unit_cost
                    quantity=onhand
                    if onhand=0 then continue
                    tier=tier+1 
                    ref$=ivm04a.trans_ref$
                    tiertype$=ivm04a.trans_source$
                    p=int(1+pos(tiertype$=source$,2)/2)
                    if p>0 then tiertype$=types$[p]
                    ls_ortier$=str(tier:"##0")+" "+fndate$(ivm04a.receipt_date$)+" "+tiertype$+" "+ref$
                    gosub total_value; rem "Get total value
                    gosub print_line; rem "Print line
                    gosub accum_total; rem "Accum Totals
                wend
                gosub print_total
                continue
            endif
        endif

rem --- Go Calculate total value

        gosub total_value
        if format=1 
            gosub accum_total
            continue
        endif
        if format<=3 then

rem --- Print line for formats 2 & 3 (summary & detail no LS or LF)

            if h9$<>"" then gosub product_head
            OutVect!.addItem(ivm01a.item_id$)
            OutVect!.addItem(description$)
            OutVect!.addItem(um$)
            OutVect!.addItem(location$)
            OutVect!.addItem(str(onhand))
            OutVect!.addItem(str(cost))
            OutVect!.addItem(str(balance))
            OutVect!.addItem(str(amount))
            l1=l1+1
            gosub accum_total
            continue
        endif

rem --- Print line for non(LS/LF) items w/formats 4, 5 & 6

        if h9$<>"" then gosub product_head
        if include$="N" and quantity=0 then continue
        OutVect!.addItem(ivm01a.item_id$)
        OutVect!.addItem(description$)
        OutVect!.addItem(um$)
        OutVect!.addItem(location$)
        OutVect!.addItem(str(cost1))
        OutVect!.addItem("")
        OutVect!.addItem(str(onhand))
        OutVect!.addItem(str(cost))
        OutVect!.addItem(str(balance))
        OutVect!.addItem(str(amount))
        l1=l1+1
        l2=l2+1
        gosub accum_total

rem --- Loop back for next record
    wend

done: rem --- All done

    done=1
    gosub whse_break
    total$="Total For Report"
    total=report
    gosub print_total_line
    if gl$<>"Y" then
        goto std_exit
    endif

rem --- Run GL summary overlay

    headings=2
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    width=h0,page=h,update$="glr_accttotals.aon"
    overlay$=update$
    out_action$="PRT-PDF"
    next_overlay$=overlay$
    goto std_exit
    

product_head: rem --- Product subheading

    OutVect!.addItem(h9$)
    xwk=fnblank(columns-1)
    xwk=fnblank(columns)
    h9$=""
    return

print_line: rem --- Print line for formats 4, 5 & 6 (LS &/or LF)

    if h9$<>"" then gosub product_head
    if fromlf then balance=0 
    OutVect!.addItem(h10$)
    OutVect!.addItem(description$)
    OutVect!.addItem(um$)
    OutVect!.addItem(location$)
    if cost1<>0 then OutVect!.addItem(str(cost1)) else OutVect!.addItem("")
    OutVect!.addItem(ls_ortier$)
    OutVect!.addItem(str(onhand))
    OutVect!.addItem(str(cost))
    if balance<>0 then OutVect!.addItem(str(balance)) else OutVect!.addItem("")
    OutVect!.addItem(str(amount))
    h10$=""
    description$=""
    um$=""
    location$=""
    cost1=0
    l1=l1+1
    l2=l2+1
    printed=1
    return

whse_break: rem --- Warehouse Break

    if t0$<>"" then
        w=1
        gosub product_break
        total$="Total For Warehouse "+h5$
        total=warehouse
        if warehouse>0 then gosub print_total_line    
    endif
    if done then return
    t0$=whse$
    ivm10c.short_name$="(Not on File)"
    l1=0
    l2=0
    w=0
    t2$=""
    warehouse=0
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    h5$=cvs(t0$+" "+ivm10c.short_name$,2)
    whse_head$="Warehouse "+h5$
    h6$=h5$
    if format=1 then return
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(whse_head$)
    return

product_break: rem --- Product break

    if t1$<>"" then
        if format>3 then gosub item_break
        if format=1 and l3<>0 then
            if whichqty$="B" and t[1]<>0 then t[0]=t[2]/t[1]
            if whichqty$="O" and totonhand<>0 then t[0]=t[2]/totonhand
            OutVect!.addItem(h6$)
            OutVect!.addItem(h7$)
            OutVect!.addItem(str(totonhand))
            OutVect!.addItem(str(t[0]))
            OutVect!.addItem(str(t[1]))
            OutVect!.addItem(str(t[2]))
            h6$=""
        endif
    endif
    if format>1 then
        total$="Total For Product Type "+h7$
        total=product
        if l1>1 gosub print_total_line
    endif
    if done then return
    dim t[2]
    t1$=product$,ivm10a.code_desc$="(Not on File)",t2$=""
    l1=0,l2=0,l3=0,product=0,totonhand=0
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    h7$=cvs(t1$+" "+ivm10a.code_desc$,2),h9$="Product Type "+h7$
    if w=1 then return
    if pagebreak$="Y" then 
        BrkVect!.addItem(str(OutVect!.size()/(columns)))
        HdrVect!.addItem(whse_head$)
    endif
    return

item_break: rem --- Item break

    if t2$<>"" then
        if l2>1 then
            total$="Total For Item "+h10$,itembreak=1
            if fromlf then fromlf=0,item[1]=0
            gosub print_total_line
        endif
        if l2=1 then
            itembreak=0
            if h9$<>"" gosub product_head
        endif
    endif
    if done then return
    dim item[2]
    t2$=item$(1,p[0]),l2=0,l3=0
    h10$=cvs(t2$,2)+" "
    return

total_value: rem --- Calculate total value

    precision 2
    if whichqty$="B" amount=balance*cost else amount=onhand*cost
    precision p[1]
    amount$=fnmask$(str(amount),m1$)
    gosub update_GL
    return

accum_total: rem --- Accumulate Totals

    product=product+amount,warehouse=warehouse+amount,report=report+amount
    t[1]=t[1]+balance,t[2]=t[2]+amount,totonhand=totonhand+onhand
    item[0]=item[0]+onhand,item[1]=item[1]+balance,item[2]=item[2]+amount
    return

update_GL: rem --- Update G/L Summary

    if gl$="Y" and amount<>0 then
        glw04a_key.firm_id$=firm_id$
        glw04a_key.gl_account$=account$
        glw04a.firm_id$=firm_id$
        glw04a.gl_account$=account$
	glw04a.gl_post_amt=0,glw04a.units=0
        find record (glw04_dev,key=glw04a_key$,dom=*next) glw04a$
        glw04a.gl_post_amt=glw04a.gl_post_amt+amount
	glw04a$=field(glw04a$)
        write record (glw04_dev,key=glw04a_key$) glw04a$
    endif
    return

print_total_line: rem --- Print total line

    if itembreak then
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem("")
        OutVect!.addItem("     "+total$)
        xwk=fnblank(4)
        OutVect!.addItem(str(item[0]))
        OutVect!.addItem("")
        if item[1]<>0 then OutVect!.addItem(str(item[1])) else OutVect!.addItem("")
        OutVect!.addItem(str(item[2]))
        xwk=fnblank(columns)
    endif
    if !itembreak then
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem("")
        OutVect!.addItem("   "+total$)
        xwk=fnblank(columns-3)
        OutVect!.addItem(str(total))
        xwk=fnblank(columns)
    endif
    itembreak=0
    return


print_total: rem --- Did we print anything?

    if include$<>"N" and quantity<>0 then
        if printed then return
        gosub total_value; rem "Get total value
        gosub print_line; rem "Print line
        gosub accum_total; rem "Accum Totals
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
