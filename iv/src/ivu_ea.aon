rem --- Closed Lot/Serial Number Purge
rem --- Program ivu_ea v8.0.0 09Jul2007 (ivu_ea)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:54:09)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$
    more=1

rem --- Open/Lock files

    files=4,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="ivm-07",ids$[2]="IVM_LSMASTER"
    files$[3]="ivm-08",ids$[3]="IVX_LSXREF"
    files$[4]="IVS_PARAMS",ids$[4]=files$[4]
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivm07_dev=channels[2]
    ivm08_dev=channels[3]
    ivs01a_dev=channels[4]

rem --- Dimension string templates

    dim ivm07a$:templates$[2],ivm08a$:templates$[3],ivs01a$:templates$[4]


rem --- Assign form input values to local variables

    table$=fnget_table$("")
    purge$=fnget_fld_data$(table$,"Purge")


rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
 

rem --- Parameters

   
    firm_id$=sysinfo.firm_id$
    n1$=sysinfo.firm_name$
    n2$="IV"
    n3$=sysinfo.task_desc$
     find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    if pos(ivs01a.lotser_flag$="SL")=0 then
        call pgmdir$+"ivc_warnings.aon","L",status
        goto std_exit
    endif
    dim p[7]
    p[0]=num(ivs01a.ITEM_ID_LEN$)
    p[6]=num(ivs01a.CURRENT_PER$)
    p[7]=fnyy_year(ivs01a.CURRENT_year$)-1
    p[2]=num(ivs01a.LS_NO_LEN$)

rem --- Init Data

    rem dim a[12]
    more=1
rem --- Additional Opens

    call pgmdir$+"adc_fileopen.aon",1,3,3,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm08_dev=channels[3]

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit
    

rem --- Determine Current Period Ending Date

    v=p[6] 
    call pgmdir$+"adc_perioddates.aon",sys01_dev,v,p[7],v0$,v9$,status
    i7$=v9$

Options: rem --- Options

    v0$="D"
    v1$="REC"
    v2$=p9$
    v3$=""
    v4$="Enter Purge Through Date for Activity"
    v0=8
    v1=46
    v2=3
    control_id=3000
    
    on v3 goto Options_Flow,Options_Flow,flow_control,Options_Flow,std_exit,Options_Flow,std_exit
Options_Flow:
    p9$=v$
    if validate=1 goto flow_control
    if p9$<=i7$ goto Options_Check
Options_Call:
    call pgmdir$+"adc_yesno.aon",0,"Current Period Ends: "+fndate$(i7$)+". Continue",0,v$,v3
    on v3 goto Options_Rtn,Options_Call,Options_Call,Options_Call,std_exit,Options_Rtn,std_exit
Options_Rtn:
    if v$="NO" goto Options
    if v$<>"YES" goto Options_Call
Options_Check:
    if p9$<=sysinfo.system_date$ goto Options_Flow_Check
Options_Flow_Call:
    call pgmdir$+"adc_yesno.aon",0,"Current Menu Date Is: "+fndate$(f0$(7))+". Continue",0,v$,v3
    on v3 goto Options_Condition,Options_Flow_Call,Options_Flow_Call,Options_Flow_Call,std_exit,Options_Condition,std_exit
Options_Condition:
    if v$="NO" goto Options
    if v$<>"YES" goto Options_Flow_Call
Options_Flow_Check:
    goto flow_control
flow_control:
    switch v3
    case 0
    case 1
    case 3; let i0=i0+1; break
    case 2; if i0<i0_nonkey1 i0=max(0,i0-1) else i0=max(i0_nonkey1,i0-1) fi; break
    case 4; let i0=i0_done; break
    case default; exitto done_v3
    swend
    on i0 goto Options,done,done

done: rem --- Correct?

    if validate then 
        validate=0
    else
        v0$="S"
        v1$="KC"
        v2$="NO"
        v3$=""
        v4$="ITAC=Y"
        v0=6
        v1=fnv(v4$)
        v2=22
        control_id=i0-i0_done+1
        v4$="Is The Above Information Correct (Yes/No)?"
done_v3:
        on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done
done_test:
        if v$="YES" goto validate_input else if v$="NO" goto do_nonkey1 else goto flow_control
validate_input:
        validate=1
        old_control_id=0
do_nonkey1:
        v3=0
        i0=i0_nonkey1-1
        goto flow_control
    endif
end_input: rem --- Disallow 'M'enu option in Error Routine

    exit_ctrl=1

rem --- Purge ivm-07 Here

    read (ivm07_dev,key=firm_id$,dom=*next)
    rem call pgmdir$+"adc_progress.aon","N","","","Purging:","",p[0]+p[2]+4,0,1,meter_num,status
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm07_dev,1,meter_num,status

 rem --- Main Read
    while more
        read record (ivm07_dev,end=std_exit) ivm07a$
        if ivm07a.firm_id$<>firm_id$ goto std_exit
        call pgmdir$+"adc_progress.aon","S","","","",ivm07a.warehouse_Id$+" "+ivm07a.Item_Id$+" "+ivm07a.lotser_nbr$,0,0,1,meter_num,status

rem --- Check The Dates

        if ivm07a.closed_flag$<>"C" continue
        ivm07a_a1$=ivm07a.LSTPHY_DATE+ivm07a.LSTREC_DATE+ivm07a.LSTBLT_DATE+ivm07a.LSTSAL_DATE+ivm07a.LSTISS_DATE+ivm07a.LSTADJ_DATE+ivm07a.LSTXIN_DATE+ivm07a.LSTXOT_DATE+ivm07a.LSTRET_DATE
        if pos(p9$<ivm07a_a1$,3)>0 continue

rem --- Remove Records Here

        let ivm08a_key$=firm_id$+ivm07a.lotser_nbr$+ivm07a.warehouse_Id$+ivm07a.Item_Id$
        remove (ivm08_dev,key=ivm08a_key$,dom=*next)
        remove (ivm07_dev,key=ivm07a.firm_id$+ivm07a.warehouse_Id$+ivm07a.Item_Id$+ivm07a.lotser_nbr$,dom=*next)

    wend

rem --- Lotted/Serialized Inventory not enabled

    call pgmdir$+"ivc_warnings.aon","L",status
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
