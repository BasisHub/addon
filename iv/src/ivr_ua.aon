rem --- Physical Inventory Count Sheets
rem --- Program ivr_ua v8.0.0 09Jul2007 (ivr_ua)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:44:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=9,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="ive-03",ids$[2]="IVE_PHYSICAL"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="ivm-02",ids$[4]="IVM_ITEMWHSE"
    files$[5]="ivm-07",ids$[5]="IVM_LSMASTER"
    files$[6]="IVC_PRODCODE",ids$[6]=files$[7]
    files$[7]="ivw-10",ids$[7]="IVW_PHYSICAL"
    files$[8]="IVC_PHYSCODE",ids$[8]=files$[8]
    files$[9]="IVS_PARAMS",ids$[9]=files$[9]

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ive03_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm07_dev=channels[5]
    ivm10a_dev=channels[6]
    ivw10_dev=channels[7]
    ivm10p_dev=channels[8]
    ivs01a_dev=channels[9]

rem --- Dimension string templates

    dim ive03a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm07a$:templates$[5],ivm10a$:templates$[6],ivw10a$:templates$[7],
:       ivm10p$:templates$[8],ivs01a$:templates$[9]



rem --- Assign form input values to local variables

    table$=fnget_table$("")
    whse_Id$=fnget_fld_data$(table$,"whse_id")
    cycle$=fnget_fld_data$(table$,"cycle_id")
    status$=fnget_fld_data$(table$,"status")
    cutoff$=fnget_fld_data$(table$,"cut_off")
    tdate$=fnget_fld_data$(table$,"tdate")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    rem sys01a_key$=firm_id$+"SY00"
    rem find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$

rem --- Parameters

    dim p[5]
    rem find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
    firm_id$=sysinfo.firm_id$
    n2$="IV"
    ls$="N"
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    p[2]=num(ivs01a.ls_lot_len$)
    p[3]=num(ivs01a.desc_len$)
    p[4]=num(ivs01a.desc_len$)
    p[5]=num(ivs01a.desc_len$)
    dw=p[3]+p[4]+p[5]
    if pos(ivs01a.lot_ser_flag$="SL")>0 ls$="Y"

rem --- Initializations

    precision p[1]
    rem dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],
    dim headings$[3],o[6]
    rem dim w0$(56),w1$(60),w[2],x0$(32),y0$(11),
    clock$=""
    when$=sysinfo.system_date$
    l9=55
    l=l9+1
    width=132
    headings=2
    nl=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    lsh$=""
    sqh$=""
    number=0
    if ls$="Y" lsh$="Lot/Serial Number"
    more=1
rem --- Additional file opens

    if ls$ >="Y" then
        call pgmdir$+"adc_fileopen.aon",1,7,7,files$[all],options$[all],channels[all],batch,status
        if status goto std_exit
        ivm07_dev=channels[7]
    endif
rem --- Resize masks

    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12

rem --- Display Resource

    dim resparams$[20],resparams[20]
    resaction$=""
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx",resaction$,resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    main_context=resparams[0]
    if status goto std_exit

rem --- GOSUB FLOW_INITIALIZATIONS
rem --- Process input

    action$="P"
    whse$=ivs01a.warehouse_id$
    cutoff$=""
    quantity$="N"
    call pgmdir$+"ivc_ic.bbx",action$,channels[all],whse$,cutoff$,quantity$,fkey,status,my_context,throw$
    if fkey<>0 goto std_exit
    if status<>0 goto std_exit
    if throw$="Y" goto std_exit

rem --- Retrieve warehouse and build HEADINGS$

    find record (ivm10c_dev,key=firm_id$+"C"+whse$,dom=std_exit) ivm10c$
    headings$[1]=sysinfo.task_desc$+" For Warehouse "+ivm10c.warehouse_id$+" "+cvs(ivm10c.whse_name$,2)
    if quantity$="Y" sqh$="Quantity"

rem --- Print positions

    o[1]=p[0]+1
    o[3]=o[1]+max(dw,40)+1
    o[2]=o[3]
    o[4]=o[3]+4
    o[5]=o[4]+11
    o[6]=o[5]
    split=0
    if quantity$="Y" o[6]=o[5]+m2+2
    if o[6]>=93 then
        o[6]=92
        o[5]=o[6]
        if quantity$="Y" o[5]=o[6]-m2-2
        o[4]=o[5]-11
        o[3]=o[4]-4
        dw=o[3]-o[1]-1
    endif
    dim j9$(width-o[6],"_")
    if ls$="Y" o[2]=o[3]-max(p[2],len(lsh$))-1

rem --- Position file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    rem call pgmdir$+"adc_progress.aon","N","","","Printing","",17+p[0],0,1,meter_num,status
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivw10_dev,1,meter_num,status
    read (ivw10_dev,key=firm_id$,dom=*next)

rem --- Read next entry record
    while more
        ivw10a_key$=key(ivw10_dev,end=*break)
        if pos(firm_id$=ivw10a_key$)<>1 break
        read (ivw10_dev)

rem --- Update ivm-10 cycle code record

        ivm10p_key$=firm_id$+"P"+whse$+ivw10a_key.cycle_code$
        find record (ivm10p_dev,key=ivm10p_key$,dom=position) ivm10p$
        y0$(8,1)="2"
        l=l9+1
        headings=3
        last$=""
        headings$[2]="Cycle Code "+ivw10a_key.cycle_code$+" - Cutoff Date "+fndate$(ivm10p.cutoff_date$)
        write record (ivm10_dev,key=ivm10p_key$) ivm10p$

position: rem --- Position physical inventory record

        first$=ivw10a_key.firm_id$+whse$+ivw10a_key.cycle_code$
        read (ive03_dev,key=first$,dom=*next)

l2000: rem --- Read next physical inventory record
        while more
            ive03a_key$=key(ive03_dev,end=*break)
            if pos(first$=ive03a_key$)<>1break
            read record (ive03_dev) ive03a$
            call pgmdir$+"adc_progress.aon","S","","","",ive03a.warehouse_id$+" "+ive03a.cycle_code$+" "+ive03a_key.inv_location$+" "+ive03a_key.item_id$,0,0,1,meter_num,status

rem --- Retrieve item master

            dim description$(dw)
            ivm01a_key$=firm_id$+ive03a.item_id$
            ivm01a.item_desc$="(Not On File)"
            find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
            description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
            number=number+1

rem --- Print detail line (non-lotted/serialized)

            if ls$="Y" then
                if ivm01a.LOTSER_ITEM$+ivm01a.INVENTORIED$="YY" then
                    l=l+2+nl
                    x$=""
                    qty$=""
                    if l>l9 gosub report_heading
                    if nl>0 print (printer_dev)""
                    if split=0 x$=description$ else x$=""
                    if quantity$="Y" qty$=str(ive03a.freeze_qty:m2$)
                    print (printer_dev)@(o[0]),ive03a.item_id$,@(o[1]),x$,@(o[3]),a2$(4,2),@(o[4]),ive03a.inv_location$,@(o[5]),qty$,@(o[6]),j9$
                    if split>0 x$=description$ else x$=""
                    print (printer_dev)@(o[1]),x$
                    continue
                endif
rem --- Print detail line (lotted/serialized)

            if ive03a.firm_id$+ive03a.warehouse_id+ive03a.cycle_code$+ive03a.inv_location$+ive03a.item_id$<>last$ gosub Item_SubHead
            if cvs(ive03a.lotser_no$,2)="" then 

rem --- Print detail for blank lot/serial number

                if ive03a.ACT_PHYS_CNT<>0 then
                    ive03a.lotser_no$="Blank"
                    if ivs01a.lotser_flag$<>"S" then
                        qty=ive03a.ACT_PHYS_CNT
                        gosub Print_Detail
                    else
                            for x=1 to ive03a.ACT_PHYS_CNT
                                qty=1
                                gosub Print_Detail
                            next x
                    endif
                endif
                ive03a.freeze_qty=ive03a.freeze_qty-ive03a.ACT_PHYS_CNT; rem "Exclude blanks from freeze qnty
                if ive03a.freeze_qty >0 then
rem --- Print detail for missing serial number
                    if ive03a.freeze_qty=0 then
                        ive03a.lotser_no$="None"
                        if ive03a.freeze_qty>=0 then
                            if ive03a.freeze_qty>0 ive03a.lotser_no$="Missing",location$=fill(10,".")
                            if ivs01a.lotser_flag$<>"L" then
                                for x=1 to ive03a.freeze_qty
                                    qty=1
                                    gosub Print_Detail
                                next x
                                continue
                            endif
                        endif
                    endif
                else 
                    continue
                endif
            endif
rem --- Retrieve and print lot/serial record

            rem dim d0$(44),d1$(96)
            ivm07a_key$=ive03a.firm_id$+ive03a.warehouse_id+ive03a.item_id$
            ivm07a.inv_location$=ive03a.inv_location$
            if pos(ive03a.lotser_no$="None   Missing",7) and cvs(ivm07a.inv_location$,2)="" ivm07a.inv_location$=fill(10,".")
            if cvs(ivm07a.lotser_no$,2)<>"" find record (ivm07a_dev,key=ivm07a_key$,dom=*next) ivm07a$
            location$=ivm07a.inv_location$
            qty=ive03a.freeze_qty
            gosub Print_Detail

rem --- Loop back for next physical inventory record

        wend
rem --- Loop back for next entry record

    wend

done: rem --- All done

    if number>0 goto std_exit
    gosub report_heading
    print (printer_dev)""
    print (printer_dev)"No Physical Inventory Entries Found"
    goto std_exit

rem --- File in use

    call pgmdir$+"ivc_warnings.aon","P",status
    goto std_exit

report_heading: rem --- Report Heading

    let l=headings+3,nl=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Description",@(o[2]),lsh$,@(o[3]),"UM",@(o[4]),"Location",@(o[5]+m2-9),sqh$,@(o[6]),"Physical Count"
    print (printer_dev)""
    return

Item_SubHead: rem --- Item subheading (lotted/serialized)

    if l+3+nl>l9 gosub report_heading
    if nl>0 print (printer_dev)""
    if split=0 x$=description$ else x$=""
    print (printer_dev)@(o[0]),ive03a.item_id$,@(o[1]),x$,@(o[3]),ivm01a.unit_of_sale$,@(o[4]),ive03a.inv_location$
    if split>0 x$=description$ else x$=""
    print (printer_dev)@(o[1]),x$
    let l=l+2+nl,last$=ive03a.firm_id$+ive03a.warehouse_id+ive03a.cycle_code$+ive03a.inv_location$+ive03a.item_id$
    return

Print_Detail:rem --- Print lot/serial detail

    let nl=1,qty$=""
    if l+1>l9 l=l9+1; gosub Item_SubHead
    if quantity$="Y" qty$=str(qty:m2$)
    print (printer_dev)@(o[2]),ive03a.lotser_no$,@(o[4]),location$,@(o[5]),qty$,@(o[6]),j9$
    let l=l+1
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
