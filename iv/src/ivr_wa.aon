rem --- Cost Change Valuation Report
rem --- Program ivr_wa v8.0.0 09Jul2007 (ivr_wa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:41:54)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="arc_termcode",ids$[2]="ARC_TERMCODE"
    files$[3]="glm-01",ids$[3]="GLM_ACCT"
    files$[4]="glw_costtotals",ids$[4]="GLW_COSTTOTALS"
    files$[5]="ive-06",ids$[5]="IVE_COSTCHG"
    files$[6]="ivm-01",ids$[6]="IVM_ITEMMAST"
    files$[7]="ivm-02",ids$[7]="IVM_ITEMWHSE"
    files$[8]="ivm-03",ids$[8]="IVX_ITEMPROD"
    files$[9]="ivc_prodcode",ids$[9]=files$[9]
    files$[10]="ivm-14",ids$[10]="IVM_ITEMSYN"
    files$[11]="ivw-06",ids$[11]="IVX_COSTXREF"
    files$[12]="ars_params",ids$[12]="ARS_PARAMS"
    files$[13]="gls_params",ids$[13]="GLS_PARAMS"
    files$[14]="ivc_whsecode",ids$[14]="IVC_WHSECODE"
    files$[15]="ivs_params",ids$[15]="IVS_PARAMS"




    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    arm10a_dev=channels[2]
    glm01_dev=channels[3]
    glw04_dev=channels[4]
    ive06_dev=channels[5]
    ivm01_dev=channels[6]
    ivm02_dev=channels[7]
    ivm03_dev=channels[8]
    ivm10a_dev=channels[9]
    ivm14_dev=channels[10]
    ivw06_dev=channels[11]
    ars01a_dev=channels[12]
    gls01a_dev=channels[13]
    ivm10c_dev=channels[14]
    ivs01a_dev=channels[15]
    

rem --- Dimension string templates

    dim arm10a$:templates$[2],glm01a$:templates$[3],glw04a$:templates$[4],
:       ive06a$:templates$[5],ivm01a$:templates$[6],ivm02a$:templates$[7],
:       ivm03a$:templates$[8],ivm10a$:templates$[9],ivm14a$:templates$[10],
:       ivw06a$:templates$[11],ars01a$:templates$[12],gls01a$:templates$[13],
:       ivm10c$:templates$[14],ivs01a$:templates$[15]     

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
   
rem --- Parameters

    dim p[7],g[4]
    n1$=sysinfo.firm_name$
    n2$="IV"
    n3$=sysinfo.task_desc$
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    if ivs01a.cost_method$<>"S" goto Std_Cost
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g[4]=num(gls01.max_acct_length$)
    p[0]=ivs01a.item_id_len
    p[1]=num(ivs01a.precision$)
    p[5]=num(ivs01a.desc_len$)
    p[6]=num(ivs01a.desc_len$)
    p[7]=num(ivs01a.desc_len$)
    call pgmdir$+"adc_application.aon",n2$,info$[all]
    gl$=info$[9]
    ar$="N"
    if gl$="Y" then
        call pgmdir$+"adc_application.aon","AR",info$[all]
        ar$=info$[20]
        if ar$<>"Y" then
            find record (ars01a_dev,key=firm_id$+"AR00",dom=Init) ars01a$
            ar$=ars01a.dist_by_item$
        endif
    endif

Init:rem --- Initializations

    precision num(ivs01a.precision$)
    rem dim a0$(24),a1$(64),a[20],b0$(22),b1$(60),b6$(50),b[12],o[8]
    dim o[8]
    dim d[1],s[1],t[1],r[1],headings$[3]
    headings$[0]=sysinfo.firm_name$
    headings$[2]=sysinfo.task_desc$
    headings=2
    page=0
    width=132
    when$=sysinfo.system_date$
    effective$=when$
    clock$=""
    m1$=ivs01a.amount_mask$
    m1=len(m1$)
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    call pgmdir$+"adc_sizemask.aon",m2$,m2,7,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12
    o[1]=p[0]
    o[8]=width-m1
    o[7]=o[8]-m1
    o[6]=o[7]-m3
    o[5]=o[6]-m1
    o[4]=o[5]-m3
    o[3]=o[4]-m2
    o[2]=o[3]-3
    dw=min(o[2]-o[1]-1,p[5]+p[6]+p[7])
    l9=55
    l=l9+1
    done=0
    split=0
    h3$=""
    h4$=""
    h5$=""

rem --- Additional File Opens

    if gl$="Y" then
        call pgmdir$+"adc_fileopen.aon",1,9,10,files$[all],options$[all],channels[all],batch,status
        if status goto std_exit
        glm01_dev=channels[9]
        glw04_dev=channels[10]
        if byitem$<>"Y" then
            call pgmdir$+"adc_fileopen.aon",1,11,11,files$[all],options$[all],channels[all],batch,status
            if status goto std_exit
            arm10_dev=channels[11]
        endif
    endif
rem --- Set default effective date

    ive06a_key$=key(ive06_dev,end=GUI_Resource)
    if pos(firm_id$=ive06_key$)=1 effective$=ive06a_key.effect_date$

GUI_Resource: rem --- GUI Resource

    dim resparams$[20],resparams[20]
    resparams$[0]=pgm(-2)
    call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
    if status goto std_exit

Effective_Date: rem --- Effective Date

    v4$="Enter The Effective Date For Changes To Be Listed On This Report (<F1>=All)"
    v0$="D"
    v1$="CE"
    v2$=effective$
    v3$=""
    v0=3
    v1=40
    v2=3
    control_id=3000
    on v3 goto Effective_Date_Assign,Effective_Date_Flow,Effective_Date,Effective_Date,std_exit,Effective_Date_Assign,std_exit
Effective_Date_Flow:
    effective$=""
    call pgmdir$+"syc_rs.bbx","",my_context,3000,effective$,0,"",ignore_status
    call pgmdir$+"syc_rs.bbx","",my_context,13000,"All",0,"",ignore_status
    goto Report_Init
Effective_Date_Assign:
    effective$=v$

Report_Init: rem --- Report Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    rem call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$," Sorting","","",16+p[0],ive06_dev,1,0,ignore_status
    call pgmdir$+"adc_progress.aon","N","","","","",0,ive06_dev,1,meter_num,status
    gosub sort_ive06
    call pgmdir$+"adc_progress.aon","S","","Printing","","",0,ivw06_dev,1,0,ignore_status
    read (ivw06_dev,key="",dom=*next)

rem --- Next ivw-06 record
    while more
        ivw06a_key$=key(ivw06_dev,end=*break)
        if ivw06a_key.effect_date$ >sysinfo.system_date$ break
        read (ivw06_dev)
        call pgmdir$+"adc_progress.aon","S","","","",fndate$(ivw06a_key.effect_date$)+" "+ivw06a_key.warehouse_Id$+" "+ivw06a_key.product_type$+" "+ivw06a_key.Item_Id$,0,0,1,meter_num,status
        ive06a_key$=ivw06a_key.firm_id$+ivw06a_key.effect_date$+ivw06a_key.warehouse_Id$+ivw06a_key.Item_Id$
        read record (ive06_dev,key=ive06a_key$,dom=*continue) ive06a$

rem --- Level breaks?

        if ivw06a_key.effect_date$<>t0$ gosub Date_Break
        if ivw06a_key.warehouse_Id$<>t1$ gosub Whse_Break
        if ivw06a_key.product_type$<>t2$ gosub Product_Break

rem --- Additional reads

        rem dim a0$(24),a1$(64),a[20],b0$(22),b1$(60),b6$(50),b[12]
        ivm01a_key$=firm_id$+ive06a.product_type$
        ivm02a_key$=firm_id$+ive06a.warehouse_Id$
        find record (ivm01a_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        find record (ivm02a_dev,key=ivm02a_key$,dom=*continue) ivm02a$

rem --- Format detail line fields

        dim description$(dw)
        description$=fnitem$(ivm01a.item_desc$,p[5],p[6],p[7])
        onhand=ivm02a.qty_on_hand
        oldcost=ivm02a.unit_cost
        newcost=ive06a.std_cost

rem --- Calculate extensions at precision 2

        precision 2
        oldvalue=onhand*oldcost
        newvalue=onhand*newcost
        change=newvalue-oldvalue
        precision num(ivs01a.precision$)

rem --- New product?

        if h5$<>"" then 
            if l+3+nl>l9 gosub report_heading
            if nl>0 print (printer_dev)""
            print (printer_dev)h5$
            print (printer_dev)""
            l=l+2+nl
            nl=1
            h5$=""
        endif
rem --- Print detail line

        if l>l9 gosub report_heading
        print (printer_dev)@(o[0]),ivm01a.item_id$,@(o[1]),description$,@(o[2]),ivm01a.unit_of_sale$,@(o[3]),onhand:m2$,@(o[4]),oldcost:m3$,@(o[5]),oldvalue:m1$,@(o[6]),newcost:m3$,@(o[7]),newvalue:m1$,@(o[8]),change:m1$
        l=l+1
        nl=1

rem --- Accumulate totals

        d[0]=d[0]+oldvalue
        d[1]=d[1]+newvalue
        s[0]=s[0]+oldvalue
        s[1]=s[1]+newvalue
        t[0]=t[0]+oldvalue
        t[1]=t[1]+newvalue
        r[0]=r[0]+oldvalue
        r[1]=r[1]+newvalue

rem --- G/L distribution

        if gl$<>"Y" continue
        if ar$="Y" then

rem --- By Distribution Code

            rem dim d1$(8*g[4],"0")
            arm10d_key$=firm_id$+"D"+ivm02a.ar_dist_code$
            find record (arm10d_dev,key=arm10d_key$,dom=*next) arm10d$
            account$=arm10d.gl_ar_acct$
            goto Summary_Record
        endif
rem --- By Item

        dim account$(g[4],"0")
        if cvs(ivm01a.gl_ar_acct$,2)<>"" account$=ivm01a.gl_ar_acct$

Summary_Record: rem --- Write summary record

        amount=change
        gosub Update_GL

rem --- Loop back for next record

    wend

done: rem --- All done

    if l>l9 gosub report_heading
    done=1
    gosub Date_Break
    total$="Report"
    t0=r[0]
    t1=r[1]
    gosub Print_Total
    if gl$<>"Y" goto std_exit
    run pgmdir$+"glr_xb.bbx"

Std_Cost: rem --- Not Standard Costing

    call pgmdir$+"ivc_warnings.aon","S",status
    status=999
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+3
    nl=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[4]+m3-8),"Current",@(o[5]+m1-8),"Current",@(o[6]+m3-5),"New",@(o[7]+m1-6),"New",@(o[8]+m1-9),"Change"
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Description",@(o[2]),"UM",@(o[3]+m2-8),"On Hand",@(o[4]+m3-8),"Cost",@(o[5]+m1-8),"Value",@(o[6]+m3-5),"Cost",@(o[7]+m1-6),"Value",@(o[8]+m1-9),"In Value"
    print (printer_dev)""
    return

sort_ive06: rem --- Sort ive-06 by product type

    rem dim y0$(30)
    first$=firm_id$+effective$
    read (ive06_dev,key=first$,dom=*next)

rem --- Read next entry record
    while more
        ive06a_key$=key(ive06_dev,end=sort_ive06_rtn)
        if pos(first$=ive06a_key$)<>1 goto sort_ive06_rtn
        read (ive06_dev)
        call pgmdir$+"adc_progress.aon","S","","","",fndate$(ive06a.effect_date$)+" "+ive06a.warehouse_id$+" "+ive06a.item_id$,0,0,1,0,ignore_status
        ivm01a_key$=ive06a.firm_id$+ive06a.item_id$
        find record (ivm01a_dev,key=ivm01a_key$,dom=*continue) ivm01a$

rem --- Write sort record

        ivw06a_key$=ive06a.firm_id$+ive06a.effect_date$+ive06a.warehouse_id$+ivm01a.product_type$+ive06a.item_id$
        write record (ivw06_dev,key=ivw06a_key$) ivw06a$
     wend

sort_ive06_rtn: rem --- Sort completed

    return

Date_Break: rem --- Date break

    if t0$<>"" then 
        if l+3>l9 gosub report_heading
        gosub Whse_Break
        total$=h2$
        t0=d[0]
        t1=d[1]
        gosub Print_Total
    endif
    if done<=0 then
        dim d[1]
        t0$=ive06a.effect_date$
        h2$=fndate$(ive06a.effect_date$)
        headings$[1]=sysinfo.task_desc$+" For Changes Effective "+h2$
    endif
    return

Whse_Break: rem --- Warehouse break

    if t1$<> "" then
        if l+4>l9 gosub report_heading
        gosub Product_Break
        let total$=h3$,t0=t[0],t1=t[1]
        gosub Print_Total
    endif
    if done<=0 then
        dim t[1]
        let t1$=ive06a.warehouse_id$,ivm10c.whse_name$="Not On File"
        find record (ivm10c_dev,key=firm_id$+"C"+t1$,dom=*next) ivm10c$
        let h3$="Warehouse "+t1$+" "+cvs(ivm10c.whse_name$,2),l=l9+1
        let headings$[2]=h3$,headings=3
    endif
    return

Product_Break: rem --- Product break

    if t2$<>"" then
        let total$=t5$,t0=s[0],t1=s[1]
        gosub Print_Total
    endif
    if done<=0 then
        dim s[1]
        let t2$=ivm01a.product_type$,ivm10a.code_desc$="(Not On File)"
        find record (ivm10a_dev,key=firm_id$+"A"+t2$,dom=*next) ivm10a$
        let h5$="Product "+t2$+" "+cvs(ivm10a.code_desc$,2),t5$=h5$
    endif
    return

Print_Total: rem --- Print totals

    let t2=t1-t0,l=l+1,total$="Totals For "+total$
    print (printer_dev)@(o[1]),total$,@(o[5]),t0:m1$,@(o[7]),t1:m1$,@(o[8]),t2:m1$
    return
rem --- Update G/L Summary
Update_GL:
    if gl$="Y" or amount<>0 then
        let glw04a_key$=firm_id$+account$,x0=0
        find record (glw04a_dev,key=glw04a_key$,dom=*next) glw04a$
        let x0=x0+amount
        write record (glw04_dev,key=glw04a_key$) glw04a$
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
