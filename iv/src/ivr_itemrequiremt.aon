rem --- Inventory Requirements Report (Input Overlay)
rem --- Program ivr_itemrequiremt.aon v8.0.0 09Jul2007 (ivr_ma)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:46:39)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
    
rem --- Use and declare statements

    use ::sys/prog/bao_option.bbj::Option
    
    declare Option option!

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open/Lock files

    files=14,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]

    files$[1]="ivm-01",ids$[1]="IVM_ITEMMAST"
    files$[2]="ivm-02",ids$[2]="IVM_ITEMWHSE"
    files$[3]="ivm-05",ids$[3]="IVM_ITEMVEND"
    files$[4]="ivc_prodcode",ids$[4]="IVC_PRODCODE"
    files$[5]="ivm-12",ids$[5]="IVM_ITEMACT"
    files$[6]="ivm-14",ids$[6]="IVM_ITEMSYN"
    files$[7]="ivm-15",ids$[7]="IVC_TYPECODE"
    files$[8]="aps_params",ids$[8]="APS_PARAMS"
    files$[9]="gls_calendar",ids$[9]="GLS_CALENDAR"
    files$[10]="ivc_whsecode",ids$[10]="IVC_WHSECODE"
    files$[11]="ivc_buycode",ids$[11]="IVC_BUYCODE"
    files$[12]="ivs_params",ids$[12]="IVS_PARAMS"
    files$[13]="ivs_abcparam",ids$[13]="IVS_ABCPARAM"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    ivm01a_dev=channels[1]
    ivm02a_dev=channels[2]
    ivm05a_dev=channels[3]
    ivm10a_dev=channels[4]
    ivm12a_dev=channels[5]
    ivm14a_dev=channels[6]
    ivm15a_dev=channels[7]
    aps01a_dev=channels[8]
    gls_calendar_dev=channels[9]
    ivm10c_dev=channels[10]
    ivm10f_dev=channels[11]
    ivs01a_dev=channels[12]
    ivs01c_dev=channels[13]

rem --- Dimension string templates

    dim ivm01a$:templates$[1],ivm02a$:templates$[2],ivm05a$:templates$[3],
:       ivm10a$:templates$[4],ivm12a$:templates$[5],ivm14a$:templates$[6],
:       ivm15a$:templates$[7],aps01a$:templates$[8],gls_calendar$:templates$[9],
:       ivm10c$:templates$[10],ivm10f$:templates$[11],ivs01a$:templates$[12],
:       ivs01c$:templates$[13]

    ivm01a_tpl$=templates$[1],ivm02a_tpl$=templates$[2]

rem --- Assign form input values to local variables

    sequence$=option!.getOptionData("report_sequence")
    begbuyer$=option!.getOptionData("buyer_code_1")
    endbuyer$=option!.getOptionData("buyer_code_2")
    begvendor$=option!.getOptionData("vendor_id_1")
    endvendor$=option!.getOptionData("vendor_id_2")
    begwhse$=option!.getOptionData("warehouse_id_1")
    endwhse$=option!.getOptionData("warehouse_id_2")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")
    begitem$=option!.getOptionData("item_id_1")
    enditem$=option!.getOptionData("item_id_2")
    type$=option!.getOptionData("item_type")
    rem "VENDOR INACTIVE FEATURE"
    inactive$=option!.getOptionData("AP_VEND_INACTIVE")
    rem "ITEM INACTIVE FEATURE"
    inactive_item$=Option!.getOptionData("ITEM_INACTIVE")

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    ivs01c_key$=firm_id$+"IV02"
    find record (ivs01c_dev,key=ivs01c_key$,err=std_missing_params) ivs01c$
    find record (gls_calendar_dev,key=firm_id$+ivs01a.current_year$,err=*next) gls_calendar$
    if cvs(gls_calendar.firm_id$,2)="" then
        msg_id$="AD_NO_FISCAL_CAL"
        dim msg_tokens$[1]
        msg_tokens$[1]=ivs01a.current_year$
        gosub disp_message
        goto std_exit
    endif

rem --- Parameters

    dim p[7],g[1],i[1],g3$(325),info$[20],abc[25],factors[25]
    p[0]=ivs01a.item_id_len
    p[1]=num(ivs01a.precision$)
    p[2]=ivs01a.vendor_prd_len
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    g[0]=num(gls_calendar.total_pers$)
    p[6]=num(ivs01a.current_per$)
    p[7]=num(ivs01a.current_year$)
    base$=ivs01a.current_per$+ivs01a.current_year$
    cur_period$=ivs01a.current_per$+ivs01a.current_year$

    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]
    if ap$<>"N" then
        find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$

        files$[14]="apm-01",ids$[14]="APM_VENDMAST"

        call pgmdir$+"adc_fileopen.aon",action,14,endfile,files$[all],options$[all],
:           ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        apm01a_dev=channels[14]
        dim apm01a$:templates$[14]
		call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,m0
        i[0]=m0
    endif
    if ap$="N" sequence$="B"

rem --- Initializations

    precision p[1]

    seterr initializations

    for x=0 to 25 
        factors[x]=nfield(ivs01c$,"abc_factors_"+str(x+1:"00"))
    next x

initializations: 

    seterr std_error

rem --- Resize masks

    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    if len(m2$)<15 then m2$=fill(15-len(m2$),"#")+m2$

rem --- Retrieve key template

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMWHSE","AO_ITEM_WH",ivm02a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMMAST","PRIMARY",ivm01a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMMAST","AO_BUYR_VEND_ITM",ivm01_key_tpl_09$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","APM_VENDMAST","PRIMARY",apm01_key_tpl$,rd_table_chans$[all],status$

    dim ivm01a_key_09$:ivm01_key_tpl_09$,ivm01a_key$:ivm01a_key_tpl$,apm01a_key$:apm01_key_tpl$,ivm02a_key$:ivm02a_key_tpl$

rem --- Run overlay

    run pgmdir$+"ivr_itemrequiremt_o1.aon"

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
    
rem #endinclude std_end.src

    end
