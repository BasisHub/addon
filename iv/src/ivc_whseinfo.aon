rem --- Return Warehouse Information
rem --- Program ivc_whseinfo.aon v8.0.0 26Jul2007 (ivc_wa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/26/2007 09:54:15)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- ACTION$           : Action to perform (input)
rem --- ""  = Return info for specific warehouse
rem --- "A" = Return info for all warehouses
rem --- CHANNELS[N]       : Channel Numbers (input)
rem --- [2] = ivm-02
rem --- [3] = ivm-03
rem --- ITEM$[n]          : Inventory Item Information
rem --- [0] = Firm ID
rem --- [1] = Warehouse ID (optional)
rem --- [2] = Inventory Item Number
rem --- WHSE$[n]          : Warehouse Information (returned)
rem --- [0] = Warehouse ID
rem --- [1] = ivm-02 second string
rem --- [2] = ivm-02 third string
rem --- WHSE[n]           : Warehouse Information (returned)
rem --- [0] to [20] = ivm-02 numerics
rem --- VALUE             : Total Value (returned)
rem --- TABLE_CHANS$[ ]   : Barista array of open tables/channels; do not alter (input)
rem --- WHSEINFO_TPLS$[ ] : Array of string templates (return-input)
rem --- [0] = IVM_ITEMWHSE record template
rem --- [1] = IVM_ITEMWHSE PRIMARY key template
rem --- [2] = IVM_ITEMWHSE AO_ITEM_WH key template
rem --- STATUS            : Status Code (returned)

    seterr std_error
    setesc std_error

    enter action$,channels[all],item$[all],whse$[all],whse[all],value,table_chans$[all],whseinfo_tpls$[all],status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Retrieve templates as needed

    x$=dims(whseinfo_tpls$[all],err=*next); if whseinfo_tpls$[0]<>"" then goto init_tpls
    dim whseinfo_tpls$[3]

    rem --- Retrieve record templates
    files=2,begfile=2,endfile=files
    dim ids$[files],templates$[files]
    ids$[2]="IVM_ITEMWHSE"; rem ivm-02A:
    call pgmdir$+"adc_template.aon",begfile,endfile,ids$[all],templates$[all],status
    if status goto std_exit
    whseinfo_tpls$[0]=templates$[2]

    rem --- Retrieve key templates
    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMWHSE","PRIMARY",ivm02_key_tpl$,table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMWHSE","AO_ITEM_WH",ivm02_key_tpl_02$,table_chans$[all],status$
    whseinfo_tpls$[1]=ivm02_key_tpl$
    whseinfo_tpls$[2]=ivm02_key_tpl_02$

init_tpls: rem --- Initialize templates
    dim ivm02a$:whseinfo_tpls$[0]
    dim ivm02a_key$:whseinfo_tpls$[1]
    dim k3$:whseinfo_tpls$[2]

rem --- Initializations

    dim b0$(24),b1$(64),b[20]
    ivm02_dev=channels[2]
    value=0
    firm_id$=item$[0]
    warehouse$=item$[1]
    item_no$=item$[2]
    ivm02a_key$=firm_id$+warehouse$+item_no$,status=0
    whse$[0]=warehouse$
    whse$[1]=b1$
    whse$[2]=""
    xlimit=20
    for x=0 to xlimit
        whse[x]=0
    next x
    whse_bal_fields$=fattr(ivm02a$,"")
    whse_bal_fields$=whse_bal_fields$(pos("QTY_ON_HAND"=whse_bal_fields$))

rem --- Single Warehouse

    if pos("A"=action$)=0
        gosub get_whse_info
        goto done
    else
rem --- Position warehouse file

        read (ivm02_dev,key=firm_id$+item_no$,knum="AO_ITEM_WH",dom=*next)
        more=1
       
rem --- All Warehouses
        while more
            k3$=key(ivm02_dev,knum="AO_ITEM_WH",end=*break)
            if pos(firm_id$+item_no$=k3$)<>1 break
            read (ivm02_dev)
            warehouse$=k3.warehouse_id$
            gosub get_whse_info
            if status break
        wend
    endif

done: rem --- All done

    goto std_exit

get_whse_info: rem --- Read warehouse record and accumulate totals

    b0$(1)=firm_id$+warehouse$
    b0$(5)=item_no$
    ivm02a_key$=firm_id$+item_no$+warehouse$,status=11
    more=1
    while more
        find record (ivm02_dev,key=ivm02a_key$,knum="AO_ITEM_WH",dom=*break) ivm02a$
rem use whse_bal_fields$ to parse/accum names of fields corres. to pre-template b[x] array in iolist
        for x=0 to xlimit
            if x=0 sep1=0 else sep1=pos($0A$=whse_bal_fields$,1,x)
            sep2=pos($0A$=whse_bal_fields$,1,x+1)
            accum_field$=whse_bal_fields$(sep1+1,sep2-(sep1+1))
            accum_bal=num(field(ivm02a$,accum_field$))
            whse[x]=whse[x]+accum_bal
        next x
        value=value+ivm02a.qty_on_hand*ivm02a.unit_cost
        status=0
        if xlimit=20 
            xlimit=6,whse$[0]=ivm02a.warehouse_id$
            sep1=pos($0A$=ivm02a$,1,1),sep2=pos($0A$=ivm02a$,1,2),sep3=pos($0A$=ivm02a$,1,3)
            whse$[1]=ivm02a$(sep1+1,sep2-(sep1+1));rem old b1$, i.e., ivm02 2nd string
            whse$[2]=ivm02a$(sep2+1,sep3-(sep2+1));rem old b2$, i.e., ivm02 3rd string
        endif
        break
    wend
    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
