rem --- ivr - Inventory Price List Report (Report Overlay)
rem --- Program ivr_pricelist_o1.aon v8.0.0 16Jul2007 (ivr_fb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:42:27)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


rem --- Document initializations
            OutVect!=bbjAPI().getSysGui().makeVector()
            HdrVect!=bbjAPI().getSysGui().makeVector()
            BrkVect!=bbjAPI().getSysGui().makeVector()
            rep_date$=date(0:"%Mz/%Dz/%Yd")
            rep_date_stamp$=date(0:"%Yd%Mz%Dz")
            rep_time$=date(0:"%hz:%mz %p")
            rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Print positions and headings

            gosub Position

rem --- Position files
   
            call pgmdir$+"adc_progress.aon","N","","","","",0,ivm03_dev,1,meter_num,status
            first$=firm_id$+"C",More=1
            dim ivm03a_key$:ivm03_key_tpl$
            ivm03a_key$=first$+begwhse$
            if begwhse$<>"" ivm03a_key$=ivm03a_key$+begprod$
            if begwhse$<>"" and begprod$<>""  ivm03a_key$=ivm03a_key$+begitem$
            read (ivm03_dev,key=ivm03a_key$,dir=0,dom=*next)

rem ---- Loop Starting

            While More 

                ivm03a_key$=key(ivm03_dev,end=*break)
                if pos(first$=ivm03a_key$)<>1  break
                whse$=ivm03a_key.warehouse_id$
                product$=ivm03a_key.product_type$
                item$=ivm03a_key.item_id$

rem --- Valid Warehouse/Product/Item?
                if endwhse$<>"" then
                    if whse$>endwhse$ break
                endif
                if begprod$<>"" then 
                    if product$<begprod$ then
                        read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+begprod$,dom=*Continue)
                        Continue
                    endif
                endif
                if endprod$<>"" then 
                    if product$>endprod$ then
                        read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+$FF$,dom=*Continue)
	                Continue
                    endif
                endif
                if begitem$<>"" then
                    if item$<begitem$ then
                        read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+ivm03a_key.product_type$+begitem$,dir=0,dom=*Continue)
                        Continue
                    endif
                endif
                if enditem$<>"" then
                    if item$>enditem$ then
                        read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+ivm03a_key.product_type$+$FF$,dom=*Continue)
                        Continue
                endif
            endif
    
rem --- Level breaks?

                read (ivm03_dev)
                call pgmdir$+"adc_progress.aon","S","","","",whse$+" "+product$+" "+item$(1,p[0]),0,0,1,meter_num,status
                if whse$<>t0$ gosub WhseBreak
                if product$<>t1$ gosub ProdBreak

rem --- Retrieve item
            ivm01a_key$=firm_id$+item$
            find record (ivm01_dev,key=ivm01a_key$,dom=*Continue) ivm01a$
            if type$<>""  then
                if ivm01a.ItemType$<>type$ then
                    Continue
                endif
            endif
            description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])

rem --- Retrieve warehouse

            dim item[3]
            ivm02a_key$=firm_id$+whse$+item$
            x$=""

            find record (ivm02_dev,key=ivm02a_key$,dom=*Continue) ivm02a$
            item[0]=1
            item[1]=ivm02a.pri_price
            item[2]=ivm02a.cur_price
            item[3]=ivm02a.unit_cost
            if include$<>"N" then
                margin=0
                if ivm02a.cur_price<>0 margin=100-((ivm02a.unit_cost*100)/ivm02a.cur_price)
                margin=min(999.99,max(-999.99,margin))
                x$=str(ivm02a.unit_cost:m3$)+" "+str(margin:m9$)
            endif

 rem --- Print detail line

            if h9$<>"" gosub ProdHead
            d$=description$
            l=l+1+split
  
                    if include$="Y" then 

                    OutVect!.addItem(ivm01a.item_id$)
                    OutVect!.addItem(d$)
                    OutVect!.addItem(ivm01a.unit_of_sale$)
                    OutVect!.addItem(str(item[1]:m4$))
                    OutVect!.addItem("    "+ivm02a.pri_price_cd$)
                    OutVect!.addItem(str(item[2]:m4$))
                    OutVect!.addItem("    "+ivm02a.cur_price_cd$)
                    OutVect!.addItem(str(ivm02a.unit_cost:m3$))
                    OutVect!.addItem(str(margin:m9$))

                    else

                    OutVect!.addItem(ivm01a.item_id$)
                    OutVect!.addItem(d$)
                    OutVect!.addItem(ivm01a.unit_of_sale$)
                    OutVect!.addItem(str(item[1]:m4$))
                    OutVect!.addItem("    "+ivm02a.pri_price_cd$)
                    OutVect!.addItem(str(item[2]:m4$))
                    OutVect!.addItem("    "+ivm02a.cur_price_cd$)

                    endif
   
rem --- Accumulate totals

                for x=0 to 3
                    product[x]=product[x]+item[x]
                    warehouse[x]=warehouse[x]+item[x]
                    report[x]=report[x]+item[x]
                next x
rem ---- Loop Ending
	    wend 

done: rem --- All done

                    done=1
                    gosub WhseBreak
                    total$="Report"
                    total[0]=report[0]
                    total[1]=report[1]
                    total[2]=report[2]
                    total[3]=report[3]
                    gosub TotalLine
                    goto std_exit

ProdHead: rem --- Product subheading

rem            if l+3<l9 then 
rem                l=l+1
rem            else

rem            endif

            if include$="Y"
                xwk=fnblank(9)
                OutVect!.addItem(h9$)
                xwk=fnblank(8)
                xwk=fnblank(9)
            else
                xwk=fnblank(7)
                OutVect!.addItem(h9$)
                xwk=fnblank(6)
                xwk=fnblank(7)
            endif
rem            l=l+2
            h9$=""
            return

Position: rem --- Print positions

                dim o[8]
                o[1]=p[0]+1
                o[2]=o[1]+p[3]+p[4]+p[5]+1
                o[3]=o[2]+3
                o[4]=o[3]+m4+2
                o[5]=o[4]+6
                o[6]=o[5]+m4+2
                o[7]=o[6]+2
                o[8]=o[7]
                split=0
    if include$<>"N" 
                o[7]=o[6]+5
                o[8]=o[7]+m3+1
    endif
    if o[8]+m9>=width gosub split_detail

Heading: rem --- Initialize HEADINGS$

       dim h1$(width),h2$(width),h6$(width),h7$(width),headings$[headings+1]
 
       headings$[0]=sysinfo.firm_name$
       headings$[1]=sysinfo.task_desc$
       headings$[3]=h1$
       headings$[4]=h2$
       headings$[6]="[HEADER]"
       if begitem$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+begitem$
       if enditem$="" headings$[3]=headings$[3]+" -- To Item: Last" else headings$[3]=headings$[3]+" -- To Item: "+enditem$
       if begprod$="" headings$[4]="From Product: First" else headings$[4]="From Product: "+begprod$                
       if endprod$="" headings$[4]=headings$[4]+" -- To Product: Last" else headings$[4]=headings$[4]+" -- To Product: "+endprod$
       if type$="" headings$[5]="All Item Types" else headings$[5]="Item Type: "+type$

       if include$="Y"
                dim columns$[8,10]
                columns=8
                    columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="25"
                    columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="40"
                    columns$[2,0]="UM",                    columns$[2,1]="C",columns$[2,2]="6"
                    columns$[3,0]="Prior List Price",      columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m4$
                    columns$[4,0]="/ Code",                columns$[4,1]="C",columns$[4,2]="5"
                    columns$[5,0]="Current List Price",    columns$[5,1]="N",columns$[5,2]="12",columns$[5,3]=m4$
                    columns$[6,0]="/ Code",                columns$[6,1]="C",columns$[6,2]="5"
                    columns$[7,0]="Cost",                  columns$[7,1]="N",columns$[7,2]="12",columns$[7,3]=m3$
                    columns$[8,0]="Margin",                columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m9$
       else
                dim columns$[6,10]
                columns=6
                    columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="30"
                    columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="40"
                    columns$[2,0]="UM",                    columns$[2,1]="C",columns$[2,2]="5"
                    columns$[3,0]="Prior List Price",      columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m4$
                    columns$[4,0]="/ Code",                columns$[4,1]="C",columns$[4,2]="5"
                    columns$[5,0]="Current List Price",    columns$[5,1]="N",columns$[5,2]="12",columns$[5,3]=m4$
                    columns$[6,0]="/ Code",                columns$[6,1]="C",columns$[6,2]="5"
       endif                
       return

split_detail: rem --- Must split detail line

            dim o[8]
            o[8]=width-1
            o[7]=width-1
            split=1
            if include$="Y" o[8]=width-m9,o[7]=o[8]-m3-1
            o[6]=o[7]-4
            o[5]=o[6]-m4-3
            o[4]=o[5]-4
            o[3]=o[4]-m4-3
            o[2]=o[3]-4
            return

WhseBreak: rem --- Warehouse Break

            if t0$<>"" then
                gosub ProdBreak
                total$="Warehouse "+t0$
                total[0]=warehouse[0]
                total[1]=warehouse[1]
                total[2]=warehouse[2]
                total[3]=warehouse[3]
                if warehouse[0]>0 gosub TotalLine
            endif
            dim description$(32),warehouse[3]
            t0$=whse$
            ivm10c.short_name$="(Not on File)"
            if done=0 l=l9+1
            find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
            x$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2)
    
           BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
           HdrVect!.addItem(x$)
            return

ProdBreak: rem --- Product break

            if t1$<>"" then
                let total$="Product "+t1$,total[0]=product[0]
                let total[1]=product[1],total[2]=product[2],total[3]=product[3]
                if product[0]>0 gosub TotalLine
            endif
            dim description$(32),product[3]
            let t1$=product$,description$(7,20)="(Not on File)"
            find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
            let h9$="Product Type "+t1$+" "+description$(7,20)
            return

TotalLine: rem --- Print total line

            let l=l+2,x$="",cost=0,priprice=0,curprice=0,margin=0
            let total$="Averages For "+cvs(total$,2)
            if total[0]<>0 then
                let cost=total[3]/total[0],curprice=total[2]/total[0]
                if total[2]<>0 margin=100-((total[3]*100)/total[2])
                let margin=min(999.99,max(-999.99,margin)),priprice=total[1]/total[0]
            endif
            let x$=str(cost:m3$)+" "+str(margin:m9$)
            if include$="N" x$=""
            if include$="Y"
            qwk=fnblank(9)
            OutVect!.addItem("");OutVect!.addItem(total$);OutVect!.addItem("")
            OutVect!.addItem(str(priprice:m4$));OutVect!.addItem("")
            OutVect!.addItem(str(curprice:m4$));qwk=fnblank(1)
            OutVect!.addItem(str(cost:m3$));OutVect!.addItem(str(margin:m9$))
            else
            qwk=fnblank(7)
            OutVect!.addItem("");OutVect!.addItem(total$);OutVect!.addItem("")
            OutVect!.addItem(str(priprice:m4$));OutVect!.addItem("")
            OutVect!.addItem(str(curprice:m4$));qwk=fnblank(1)
            endif
            return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
