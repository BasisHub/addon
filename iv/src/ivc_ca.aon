rem --- Price/Cost Change By Percentage Entry
rem --- Program ivc_ca v8.0.0 18Dec2007 (ivc_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/18/2007 09:44:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

            seterr std_error
            setesc std_error
            enter action$,entry$,status

rem --- Retrieve the program path

            pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+sysinfo",err=*next)
            milestone=num(stbl("+milestone",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

            files=11,begfile=1,endfile=files
            dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
            files$[1]="apm-01",ids$[1]="APM_VENDMAST"
            files$[2]="aps_params",ids$[2]="APS_PARAMS"
            files$[3]="ive-05",ids$[3]="IVE_PRICECHG"
            files$[4]="ive-06",ids$[4]="IVE_COSTCHG"
            files$[5]="ivm-01",ids$[5]="IVM_ITEMMAST"
            files$[6]="ivm-02",ids$[6]="IVM_ITEMWHSE"
            files$[7]="ivm-03",ids$[7]="IVX_ITEMPROD"
            files$[8]="ivs_prodcode",ids$[8]="IVS_PRODCODE"
            files$[9]="ivm-14",ids$[9]="IVM_ITEMSYN"
            files$[10]="ivm-15",ids$[10]="IVC_TYPECODE"
            files$[11]="ivs_params",ids$[11]="IVS_PARAMS"
            call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
            if status goto std_exit
            apm01_dev=channels[1]
            aps01a_dev=channels[2]
            ive05_dev=channels[3]
            ive06_dev=channels[4]
            ivm01_dev=channels[5]
            ivm02_dev=channels[6]
            ivm03_dev=channels[7]
            ivm10_dev=channels[8]
            ivm14_dev=channels[9]
            ivm15_dev=channels[10]
            ivs01a_dev=channels[11]

rem --- Dimension string templates

            dim apm01a$:templates$[1],aps01a$:templates$[2],ive05a$:templates$[3],
:           ive06a$:templates$[4],ivm01a$:templates$[5],ivm02a$:templates$[6],
:           ivm03a$:templates$[7],ivm10a$:templates$[8],ivm14a$:templates$[9],
:           ivm15a$:templates$[10],ivs01a$:templates$[11]

rem --- Retrieve parameter records

            aps01a_key$=firm_id$+"AP00"
            find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
            ivs01a_key$=firm_id$+"IV00"
            find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open/Lock Files

            files=9
            dim files$[files],fileoptions$[files],channels[files]
            files$[1]="sys-01"
            files$[2]="ivm-01",files$[3]="ivm-02"
            files$[4]="ivm-03"
            files$[5]="ivm-10",files$[6]="ivm-14"
            files$[7]="ivm-15"
            files$[8]=entry$,files$[9]="apm-01"
            fileoptions$[1]="P"
            call pgmdir$+"adc_fileopen.aon",1,1,8,files$[all],fileoptions$[all],channels[all],batch,status
            if status then goto std_exit
            sys01_dev=channels[1]
            ivm01_dev=channels[2],ivm02_dev=channels[3]
            ivm03_dev=channels[4]
            ivm10_dev=channels[5],ivm14_dev=channels[6]
            ivm15_dev=channels[7]
            channel=channels[8]

rem --- Parameters

            dim p[5],t$:stbl("+TASK_TMPL")
            t$=stbl("+TASK")
            firm_id$=t.f0$(16,2),n2$="IV",o0=action$="C"
            find record (ivs01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
            for i=0 to 1
            if o0=1 and i3$(8,1)<>"S" then
                exitto Not_Standard_Costing
            next i
            p[0]=num(i2$(1,2))
            p[1]=num(i2$(5,1)),p[2]=num(i2$(7,2))
            p[3]=num(i2$(9,2))
            p[4]=num(i2$(11,2)),p[5]=num(i2$(13,2))
            call pgmdir$+"adc_application.aon","AP",info$[all]
            ap$=info$[20]
            if ap$<>"N" then
                n2$="AP"; find record (aps01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) aps01a$
                vendlen=num(p2$(1,2))
            endif

rem --- Initializations
            more=1
            precision p[1]
            dim files[15],params$[3],options$[7]
            files[1]=ivm01_dev
            files[10]=ivm10_dev,files[14]=ivm14_dev
            params$[0]=firm_id$
            params$[1]=i1$,params$[2]=i2$,params$[3]=i3$
            when$=sysinfo.system_date$
            code$="",begvend$="",endvend$="",percent=0
            m9$="-##0.00%"
            m9=len(m9$),display$="New List Price Code",pc$="List Price"
            if o0 then let display$="Effective Date",pc$="Cost"
            if action$="R" then let display$="List Price Code To Be Reversed"
            files[15]=ivm15_dev

rem --- Additional File Opens

            if ap$<>"N" then
                call pgmdir$+"adc_fileopen.aon",1,9,9,files$[all],fileoptions$[all],channels[all],batch,status
                if status then goto std_exit
                apm01_dev=channels[9]
            endif

rem --- Display Resource

            dim resparams$[20],resparams[20]
            resparams$[0]=pgm(-2)
            call pgmdir$+"syc_ra.bbx","",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
            if status then goto std_exit
            print 'sb'
            display$=fill(30-len(display$)," ")+display$; call pgmdir$+"syc_rs.bbx","",my_context,13000,display$,0,"",ignore_status
            print 'sf'
            gosub display_fields
            goto start_done


rem this while loop is created to exit control to flow_control label

while more
        listprice_code: rem --- New List Price Code
        on o0 goto label1,effective_date

    label1:
        v4$="Enter The New List Price Code For This Price Change"
        v0$="S"
        v1$="CE",v2$=code$,v3$="",v0=2,v1=40,v2=4,i0=0,control_id=3000
         on v3 goto label2,listprice_code,flow_control,listprice_code,flow_control,label2,flow_control

    label2:
        code$=v$; gosub chk_pricecode; if status then goto listprice_code
        if len(code$)=1 then let code$=code$+" "
        break

    effective_date: rem --- Effective Date

        v4$="Enter The Effective Date For This Cost Change"
        v0$="D"
        v1$="CE",v2$=when$,v3$="",v0=4,v1=40,v2=4,i0=0,control_id=3000
        on v3 goto label3,effective_date,flow_control,effective_date,flow_control,label3,flow_control

    label3:
        when$=v$
        break

    begin_vendor: rem --- Beginning Vendor

        if ap$="N" then
           break
        endif
        v4$="Enter The Beginning Vendor Number (<F1>=First/<F3>=Lookup)"
        v0$="M"
        v1$="KCE",v2$=begvend$,v3$=m0$,v0=6,v1=40,v2=5,control_id=3001
        on v3 goto label5,label4,label6,label7,flow_control,label6,flow_control

      while more

        label4:
        
            for i=0 to 1
                v$=""
                exitto label5
            next i
                break

        label7:
            call pgmdir$+"syc_lv.bbx",v$

        label6:
            if v$="" then
                
                continue
            endif

        label5:
            x$="First"; gosub d_vendorname
            if status then goto begin_vendor
            begvend$=v$
            break
      wend
    
       
        break

    end_vendor: rem --- Ending Vendor

        if ap$="N" then goto flow_control
        v4$="Enter The Ending Vendor Number (<F1>=Last/<F3>=Lookup)"
        v0$="M"
        v1$="KCE",v2$=endvend$,v3$=m0$,v0=6,v1=40,v2=6,control_id=3002
       
        on v3 goto label9,label8,label12,label10,flow_control,label11,flow_control
        
      while more
        label8:
            for i=0 to 1
                v$=""
                exitto label9
            next i
            break
        label10:
            call pgmdir$+"syc_lv.bbx",v$
        label11:
            if v$="" then
                
                continue
            endif
        label9:
            x$="Last"; gosub d_vendorname
            if status then goto end_vendor
            endvend$=v$
      wend
    label12:
        break

    standard_input: rem --- Process standard input I0=4-10

        call pgmdir$+"ivc_ib.bbx","DI","D",40,7,files[all],params$[all],options$[all],my_context,i0,2,i0_done,validate,v3
        on v3 goto label13,standard_input,flow_control,standard_input,flow_control,label13,flow_control

    label13:
       
        break

    percent_change: rem --- Percent change

        if action$="R" then goto flow_control
        v4$="Enter The Percentage By Which The "+pc$+" Should Be Changed"
        v0$="N"
        v1$="C",v2$=str(percent),v3$=m9$,v0=m9,v1=40,v2=14,control_id=3010
        rem gosub std_input
        on v3 goto label14,percent_change,flow_control,percent_change,flow_control,label14,flow_control

    label14:
        if v<-999.99 or v>999.99 then goto percent_change
        percent=v; gosub chk_percentage; if status then goto percent_change
        print @(v1,v2),percent:m9$
        
        break
wend

flow_control: rem --- Flow Control

    switch v3
        case 0
        case 1
        case 3; let i0=i0+1; break
        case 2
        if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1)
        break
        case 4; exitto start_done
        case default; exitto done_v3
    swend

next_field:
    on i0 goto listprice_code,begin_vendor,end_vendor,standard_input,standard_input,standard_input,standard_input,standard_input,standard_input,standard_input,percent_change,done

start_done:
    let i0=i0_done

done: rem --- Correct?

    if !validate then 
            v0$="S"
            v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=0,v2=22,control_id=i0-i0_done+1
            

        done_v3:
            on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done

        done_test:
            on pos(v$="YN") goto flow_control,validate_input,do_nonkey1

        validate_input:
            validate=1
            old_control_id=0

        do_nonkey1:
            v3=0
            i0=i0_nonkey1
            goto next_field

        cancel:
            status=1; goto std_exit
    else
            let validate=0
    endif

rem --- Update initialization

            begwhse$=options$[1]
            endwhse$=options$[2],begprod$=options$[3]
            endprod$=options$[4]
            begitem$=options$[5],enditem$=options$[6]
            type$=options$[7]
            pm$="Updating"
            if action$="R" then let pm$="Processing"
            call pgmdir$+"adc_progress.aon","N","","","","",0,ivm03_dev,1,ignore_status
            first$=firm_id$+"C"
            k$=first$+begwhse$
            if begwhse$<>"" then let k$=k$+begprod$
            if k$<>first$ then let k$=k$+begitem$
            read (ivm03_dev,key=k$,dom=*next)


While more
        rem --- Get next sort record

            ivm03a_key$=key(ivm03_dev,end=*break)
            if pos(first$=ivm03a_key$)<>1 then
                break
            endif
            whse$=ivm03a.WAREHOUS_ID$
            product$=ivm03a.PRODUCT_TYPE$
            item$=ivm03a.ITEM_ID$

        rem --- Valid Warehouse/Product/Item?

            if endwhse$<>"" then
                if whse$>endwhse$ then
                    break
                endif
            endif
            if begprod$<>"" then
                if product$<begprod$ then
                    read (ivm03_dev,key=ivm03a.FIRM_ID$+ivm03a.RECORD_ID_C$+ivm03a.WAREHOUSE_ID$+begprod$,dom=*continue)
                    continue
                endif
            endif
            if endprod$<>"" then
                if product$>endprod$ then
                    read (ivm03_dev,key=ivm03a.FIRM_ID$+ivm03a.RECORD_ID_C$+ivm03a.WAREHOUSE_ID$+$ff$,dom=*continue)
                    continue
                endif
            endif
            if begitem$<>"" then
                if item$<begitem$ then
                    read (ivm03_dev,key=ivm03a.FIRM_ID$+ivm03a.RECORD_ID_C$+ivm03a.WAREHOUSE_ID$+ivm03a.PRODUCT_TYPE$+begitem$,dir=0,dom=*continue)
                    continue
                endif
            endif
            if enditem$<>"" then
                if item$>enditem$ then
                    read (ivm03_dev,key=ivm03a.FIRM_ID$+ivm03a.RECORD_ID_C$+ivm03a.WAREHOUSE_ID$+ivm03a.PRODUCT_TYPE$+$ff$,dom=*continue)
                    continue
                endif
            endif

            rem --- Read item and warehouse records

            call pgmdir$+"adc_progress.aon","S","","",""," ",0,0,1,meter_num,status
            ivm01a.FIRM_ID$=firm_id$
            ivm01a.ITEM_ID$=item$
            ivm02a.FIRM_ID$=firm_id$
            ivm02a.WAREHOUSE_ID$=whse$(1,2)
            ivm02a.ITEM_ID$=item$
            read (ivm03_dev)
            find record (ivm01_dev,key=ivm01a.FIRM_ID$+ivm01a.ITEM_ID$,dom=*continue) ivm01a$
            if type$<>"" then
                if ivm01a.ITEM_TYPE$<>type$ then
                    continue
                endif
            endif
            find record (ivm02_dev,key=ivm02a.FIRM_ID$+ivm02a.WAREHOUSE_ID$+ivm02a.ITEM_ID$,dom=*continue) ivm02a$
            if ivm01a.STOCK_LEVEL<>"W" then
                let vendor$=ivm01a.VENDOR_ID$
            else
                let vendor$=ivm02a.VENDOR_ID$
            endif
            if begvend$<>"" then
                if vendor$<begvend$ then
                    continue
                endif
            endif
            if endvend$<>"" then
                if vendor$>endvend$ then
                    continue
                endif
            endif
            if action$="R" then
                if cvs(ivm02a.CUR_PRICE_CD$,2)<>code$ then
                    continue
                endif
            endif

        rem --- Generate ive-05 record

            
            if action$="R" then
           
            on o0 goto ivelbl1,ivelbl2
        ivelbl1:
            if action$="R" then
               
                ivw09a.FIRM_ID$=firm_id$
                ivw09a.PRICE_CODE$=code$
                ivw09a.WAREHOUSE_ID$=ivm02a_key.WAREHOUSE_ID$
                ivw09a.PRODUCT_TYPE$=ivm01a.PRODUCT_TYPE$
                ivw09a.ITEM_ID$=ivm02a_key.ITEM_ID$
            endif
            if action$="P" then
                
                ive05a.FIRM_ID$=firm_id$
                ive05a.PRICE_CODE$=code$
                ive05a.WAREHOUSE_ID$=ivm02a_key.WAREHOUSE_ID$
                ive05a.UNIT_PRICE=fnp(ivm02a.CUR_PRICE,percent)

            endif
            write record (channel,key=ive05a.FIRM_ID$+ive05a.PRICE_CODE$+ive05a.WAREHOUSE_ID$+ive05a.ITEM_ID$) ive05a$
            continue

        ivelbl2: rem --- Generate ive-06 record

            
            ive06a.FIRM_ID$=firm_id$
            ive06a.EFFECT_DATE$=when$(1,3)
            ive06a.ITEM_ID$=when$(4,20)
            ive06a.WAREHOUSE_ID$=ivm02a.WAREHOUSE_ID$
            ive06a.STD_COST=fnp(ivm02a.UNIT_COST,percent)
            write record (channel,key=ive06a.FIRM_ID$+ive06a.EFFECT_DATE$+ive06a.WAREHOUS_ID$+ive06a.ITEM_ID$) ive06a$

rem --- Loop back for next sort record

wend

rem --- All done

            status=0
            call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
            goto std_exit


Not_Standard_Costing: rem --- Not standard costing

            call pgmdir$+"ivc_warnings.aon","S",status
            status=999
            goto std_exit

display_fields: rem --- Display Fields

            x$=code$
            if o0 then let x$=fndate$(when$)
            call pgmdir$+"syc_rs.bbx","",my_context,3000,x$,0,"",ignore_status
            call pgmdir$+"syc_df.bbx",(ap$<>"N"),3001,my_context,status; rem disable
            call pgmdir$+"syc_df.bbx",(ap$<>"N"),3002,my_context,status; rem disable
            if ap$<>"N" then
                v$=begvend$
                x$="First",control_id=3001; gosub d_vendorname
                v$=endvend$
                x$="Last",control_id=3002; gosub d_vendorname
            endif

            call pgmdir$+"ivc_ib.bbx","D","D",40,row,files[all],params$[all],options$[all],my_context,2,2,i0_done,validate,v3
            if action$<>"R" then call pgmdir$+"syc_rs.bbx","",my_context,3010,str(percent:m9$),0,"",ignore_status
            call pgmdir$+"syc_df.bbx",(action$<>"R"),3010,my_context,status; rem disable
            return

d_vendorname: rem --- Retrieve vendor name


            if v$<>"" then
                let x0$=fnmask$(v$,aps01a.vendor_output$); let apm01a.vendor_name$="(Not On File)",status=1
                apm01a.FIRM_ID$=firm_id$
                apm01a.VENDOR_ID$=v$
                find record (apm01_dev,key=apm01a.FIRM_ID$+apm01a.VENDOR_ID$,dom=lbl) apm01a$
                status=0
    lbl:
        
                x0$=fnmask$(apm01a.VENDOR_ID$(1,vendlen),aps01a.vendor_output$)
            else
                x0$=""
                c1$=x$
            endif

            call pgmdir$+"syc_rs.bbx","",my_context,control_id,x0$,0,"",ignore_status
            call pgmdir$+"syc_rs.bbx","",my_context,10000+control_id,c1$,0,"",ignore_status
            return

chk_percentage: rem --- Check Percentage

            status=0
            if !percent then
                v4$=pc$+" Change Percentage May Not Be Zero"
                i0=3,status=1
                gosub warn_msg
            endif
            return

chk_pricecode: rem --- Price Code Not Blank?

            let status=0
            if cvs(code$,2)="" then
                let v4$="List Price Code May Not Be Blank",status=1
                gosub warn_msg
            endif
            return

warn_msg: rem " --- Standard Warning"
            dim message$[1]
            let message$[0]=v4$+" (<Enter>=Continue)"
            call pgmdir$+"adc_stdmessage.aon",2,message$[all],0,22,-1,v$,v3
            return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

 call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
