rem ivr - Inventory Activity Report
rem Program ivr_itemact.aon v8.0.0 26Oct2006 (ivr_ea/eb)
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 11:47:41)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

                pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations
                OutVect!=bbjAPI().getSysGui().makeVector()
                BrkVect!=bbjAPI().getSysGui().makeVector()
                HdrVect!=bbjAPI().getSysGui().makeVector()
                rep_date$=date(0:"%Mz/%Dz/%Yd")
                rep_date_stamp$=date(0:"%Yd%Mz%Dz")
                rep_time$=date(0:"%hz:%mz %p")
                rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve sysinfo data

                sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
                dim sysinfo$:sysinfo_template$
                sysinfo$=stbl("+SYSINFO",err=*next)
                firm_id$=sysinfo.firm_id$
                firm_name$=sysinfo.firm_name$
                task_desc$=sysinfo.task_desc$
                sys_date$=sysinfo.system_date$

rem --- Open files

                files=13,begfile=1,endfile=files
                dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
                files$[1]="gls_params",ids$[1]="GLS_PARAMS"
                files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
                files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
                files$[4]="ivm-03",ids$[4]="IVX_ITEMPROD"
                files$[5]="ivc_prodcode",ids$[5]="IVC_PRODCODE"
                files$[6]="ivm-12",ids$[6]="IVM_ITEMACT"
                files$[7]="ivm-14",ids$[7]="IVM_ITEMSYN"
                files$[8]="ivm-15",ids$[8]="IVC_TYPECODE"
                files$[10]="ivm-03",ids$[10]="IVX_ITEMWHSE"
                files$[11]="ivs_params",ids$[11]="IVS_PARAMS"
                files$[12]="ivc_whsecode",ids$[12]="IVC_WHSECODE"
                files$[13]="ivm-03",ids$[13]="IVX_ITEMPRWH"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
                if status goto std_exit
                gls01_dev=channels[1]
                ivm01_dev=channels[2]
                ivm02_dev=channels[3]
                ivm03a_dev=channels[4]
                ivm10a_dev=channels[5]
                ivm12_dev=channels[6]
                ivm14_dev=channels[7]
                ivm15_dev=channels[8]
                ivm03g_dev=channels[10]
                ivs01_dev=channels[11]
                ivm10c_dev=channels[12]
                ivm03c_dev=channels[13]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm03a$:templates$[4],
:       ivm10a$:templates$[5],ivm12a$:templates$[6],ivm14a$:templates$[7],
:       ivm15a$:templates$[8],ivm03g$:templates$[10],
:       gls01a$:templates$[1],ivs01a$:templates$[11],ivm10c$:templates$[12],
:	ivm03c$:templates$[13]

      
rem --- Assign form input values to local variables

            period1$=option!.getOptionData("period_year_1")
            begyear$=period1$(3),begper$=period1$(1,2)
            period2$=option!.getOptionData("period_year_2")
            endyear$=period2$(3),endper$=period2$(1,2)
            begwhse$=option!.getOptionData("warehouse_id_1")
            endwhse$=option!.getOptionData("warehouse_id_2")
            begprod$=option!.getOptionData("product_type_1")
            endprod$=option!.getOptionData("product_type_2")
            begitem$=option!.getOptionData("item_id_1")
            enditem$=option!.getOptionData("item_id_2")
            type$=option!.getOptionData("item_type")
            level$=option!.getOptionData("rpt_level")

rem --- Retrieve parameter records

            ivs01a_key$=firm_id$+"IV00"
            find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
            gls01a_key$=firm_id$+"GL00"
            find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$

rem --- Retrieve key template

            if level$="I" ivm03_dev=ivm03a_dev; call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPROD","PRIMARY",ivm03_key_tpl$,table_chans$[all],status$
            if level$<>"I" ivm03_dev=ivm03c_dev; call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPRWH","PRIMARY",ivm03_key_tpl$,table_chans$[all],status$
            dim ivm03_key$:ivm03_key_tpl$

rem --- Open printer
            call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
            if status goto std_exit

rem --- Initializations
            dim p[5],g[1],files[3]
            files[3]=ivm03g_dev
            files[2]=ivm12_dev
            p[0]=num(ivs01a.item_id_len$)
            p[1]=num(ivs01a.precision$)
            g[0]=num(gls01a.total_pers$)
            p[3]=num(ivs01a.desc_len_01$)
            p[4]=num(ivs01a.desc_len_02$)
            p[5]=num(ivs01a.desc_len_03$)
            call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
            call pgmdir$+"adc_sizemask.aon",m2$,m2,12,15

            precision p[1]
            dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12]
            dim period$[1],headings$[6],o[8]
            headings$[0]=firm_name$
            headings$[1]=task_desc$
            when$=sys_date$
            clock$=""
            h9$=""
            width=132
            page=0
            l9=59
            l=l9+1
            dw=p[3]+p[4]+p[5]
            selection$="END"
            headings=6
            ih$="Item"
            dh$="Description"
            m9$="00"
            number=0
            period$[0]=period1$
            period$[1]=period2$
            headings$[2]="From Period "+begper$+" "+begyear$+" Through Period "+endper$+" "+endyear$

rem --- Print positions

            o[8]=width-m2
            for x=7 to 3 step -1
                o[x]=o[x+1]-m2
            next x
            o[2]=o[3]-3
            o[1]=p[0]+1
            split=0
            x=o[2]-o[1]
            if x>dw goto l700
            o[1]=o[2]-1
            dw=o[2]-3
            split=1
            ih$="Item/Description"
            dh$=""

l700: rem --- Background

         call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",7+p[0],ivm03_dev,1,0,ignore_status

rem --- Report headings

        dim h1$(width),h2$(width)
        if level$="I" headings$[1]=headings$[1]+" By Item"
        if level$="W" headings$[1]=headings$[1]+" By Warehouse"
 
            if level$="W" headings$[6]="[HEADER]"

                if begitem$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+begitem$
                if enditem$="" headings$[3]=headings$[3]+" -- To Item: Last" else headings$[3]=headings$[3]+" -- To Item: "+enditem$
                if begprod$="" headings$[4]="From Product: First" else headings$[4]="From Product: "+begprod$                
                if endprod$="" headings$[4]=headings$[4]+" -- To Product: Last" else headings$[4]=headings$[4]+" -- To Product: "+endprod$
                if type$="" headings$[5]="All Item Types" else headings$[5]="Item Type: "+type$


rem ----  column heading

        dim columns$[8,10]
               columns=8
               columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="10"
               columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="10"
               columns$[2,0]="UM",                    columns$[2,1]="C",columns$[2,2]="10"
               columns$[3,0]="Beginning Balance",     columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m2$
               columns$[4,0]="Received&Built",        columns$[4,1]="N",columns$[4,2]="8",columns$[4,3]=m2$
               columns$[5,0]="Sold&Issued",           columns$[5,1]="N",columns$[5,2]="8",columns$[5,3]=m2$
               columns$[6,0]="Adjustments&Returns",   columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$
               columns$[7,0]="Transfers In&Out",      columns$[7,1]="N",columns$[7,2]="7",columns$[7,3]=m2$
               columns$[8,0]="Ending Balance",        columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m2$

rem --- Position files

            first$=firm_id$+"A"
            k$=first$+begprod$
            p=0
            if level$="W" first$=firm_id$+"C",k$=first$+begwhse$,p=2
            read (ivm03_dev,key=k$,dom=*next)

l1000: rem --- Get next sort record

            ivm03_key$=key(ivm03_dev,end=done)
            if pos(first$=ivm03_key$)<>1 goto done
            if level$="W" whse$=ivm03_key.warehouse_id$
            product$=ivm03_key.product_type$
            item$=ivm03_key.item_id$

            if level$="W" goto l1200

rem --- By Item: Valid Product/Item?

            if endprod$<>"" if product$>endprod$ goto done
            if begitem$<>"" if item$<begitem$ goto l1400
            if enditem$<>"" if item$>enditem$ goto l1450
            x$=product$+" "+item$(1,p[0])
            goto l1500

l1200: rem --- By Warehouse: Valid Warehouse/Product/Item?

            if endwhse$<>"" if whse$>endwhse$ goto done
            if begprod$<>"" if product$<begprod$ goto l1300
            if endprod$<>"" if product$>endprod$ goto l1350
            if begitem$<>"" if item$<begitem$ goto l1400
            if enditem$<>"" if item$>enditem$ goto l1450
            x$=whse$+" "+product$+" "+item$(1,p[0])
            goto l1500

l1300: rem --- Skip to beginning product for this warehouse'

            read (ivm03_dev,key=ivm03_key$(1,5)+begprod$,dom=l3900)
            goto l3900

l1350: rem --- Skip to next warehouse

            read (ivm03_dev,key=ivm03_key$(1,5)+$FF$,dom=l3900)
            goto l3900

l1400: rem --- Skip to beginning item

            read (ivm03_dev,key=ivm03_key$(1,6+p)+begitem$,dir=0,dom=l3900)
            goto l3900

l1450: rem --- Skip to next product

            read (ivm03_dev,key=ivm03_key$(1,6+p)+$FF$,dom=l3900)
            goto l3900

l1500: rem --- Level breaks?

            call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,meter_num,status
            if level$="W" if whse$<>t0$ gosub l6000
            if product$<>t1$ gosub l6200
            read (ivm03_dev)

rem --- Retrieve item and activity

            dim item$[2],activity[12],description$(dw)
            a0$(1)=firm_id$+item$
            find record (ivm01_dev,key=a0$,dom=l3900) ivm01a$
            if type$<>"" if ivm01a.item_type$<>type$ goto l3900
            description$(1)=cvs(ivm01a.item_desc$,3)
            action$="A"
            item$[0]=firm_id$
            item$[2]=item$
            if level$="W" action$="",item$[1]=whse$

rem --- old call pgms were ivc_wb.bbx and ivc_pa.bbx

        call pgmdir$+"ivc_whseact.aon",action$,files[all],item$[all],period$[all],activity[all],status
        call pgmdir$+"ivc_periodqty.aon",selection$,activity[all],balance

rem --- Print detail line

    needed=2
    x$=""
    if h9$<>"" needed=needed+2
    if l+needed>l9 
rem gosub report_heading
    if h9$<>"" gosub l5200
    if split=0 x$=description$

                    OutVect!.addItem(ivm01a.item_id$)
                    OutVect!.addItem(x$)
                    OutVect!.addItem(ivm01a.unit_of_sale$)
                    OutVect!.addItem(str(activity[0]:m2$))
                    OutVect!.addItem(str(activity[1]:m2$))
                    OutVect!.addItem(str(activity[3]:m2$))
                    OutVect!.addItem(str(activity[5]:m2$))
                    OutVect!.addItem(str(activity[7]:m2$))
                    OutVect!.addItem(str(balance:m2$))   
    if split>0 x$=description$ else x$=""

                    xwk=fnblank(3)
                    OutVect!.addItem(x$)
                    OutVect!.addItem(str(activity[2]:m2$))
                    OutVect!.addItem(str(activity[4]:m2$))
                    OutVect!.addItem(str(activity[6]:m2$))
                    OutVect!.addItem(str(activity[8]:m2$))
                    xwk=fnblank(1)
                    
    l=l+2
    number=number+1

l3900: rem --- Loop back for next record

            goto l1000

done: rem --- All done

    if number>0 goto std_exit

        OutVect!.addItem("No Inventory Activity Found")
    goto std_exit



l5200: rem --- Product subheading

 
    OutVect!.addItem(h9$)
    xwk=fnblank(8)
    xwk=fnblank(9)
    let l=l+2,h9$=""
    return

l6000: rem --- Warehouse Break

    if t0$="" goto l6100
    gosub l6200
l6100:
    dim x0$(32)
    let t0$=whse$,x0$(6,24)="(Not on File)",l=l9+1
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x0$(6,24)=ivm10c.short_name$
    let x$="Warehouse "+t0$+" "+cvs(x0$(6,24),2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(x$)
    return
rem --- Product break
l6200:
    dim x0$(32)
    let t1$=product$,x0$(7,20)="(Not on File)"
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    x0$(7,20)=ivm10a.code_desc$
    let h9$="Product Type "+t1$+" "+cvs(x0$(7,20),2)
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$)=cvs(q$,32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
