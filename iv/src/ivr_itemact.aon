rem ivr - Inventory Activity Report
rem Program ivr_itemact.aon v8.0.0 26Oct2006 (ivr_ea/eb)
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 11:47:41)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    seterr std_error
    setesc std_error

rem --- Use function object, Option object

    use ::ado_func.src::func
    use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve the program path

    pgmdir$ = ""
    pgmdir$ = stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    declare BBjVector OutVect!
    declare BBjVector BrkVect!
    declare BBjVector HdrVect!

    OutVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
	
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$
    sys_date$=sysinfo.system_date$
    
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

    rem --- Open files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
    files$[4]="ivc_prodcode",ids$[4]="IVC_PRODCODE"
    files$[5]="ivm-12",ids$[5]="IVM_ITEMACT"
    files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
    files$[7]="ivc_whsecode",ids$[7]="IVC_WHSECODE"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status then release

    ivm01a_dev=channels[2]
    ivm02a_dev=channels[3] 
    ivm10a_dev=channels[4]
    ivm12_dev=channels[5]
    ivs01_dev=channels[6]
    ivm10c_dev=channels[7]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],
:       ivm10a$:templates$[4],ivm12a$:templates$[5],ivs01a$:templates$[6],
:       ivm10c$:templates$[7]

rem --- Assign form input values to local variables

    declare Option option!

    period1$=option!.getOptionData("period_year_1")
    begyear$=period1$(1,4),begper$=period1$(5)
    period2$=option!.getOptionData("period_year_2")
    endyear$=period2$(1,4),endper$=period2$(5)
    begwhse$=option!.getOptionData("warehouse_id_1")
    endwhse$=option!.getOptionData("warehouse_id_2")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")
    begitem$=option!.getOptionData("item_id_1")
    enditem$=option!.getOptionData("item_id_2")
    type$=option!.getOptionData("item_type")
    rem "ITEM INACTIVE FEATURE"
    inactive$=Option!.getOptionData("ITEM_INACTIVE")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Initializations

    dim p[5],files[3]
    files[3]=ivm02a_dev
    files[2]=ivm12_dev
    p[0]=ivs01a.item_id_len
    p[1]=num(ivs01a.precision$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_sizemask.aon",m2$,m2,12,15

    precision p[1]
    headings=7
    dim period$[1],headings$[headings]
    headings$[0]=firm_name$
    headings$[1]=task_desc$
    when$=sys_date$
    clock$=""
    h9$=""
    width=132
    page=0
    selection$="END"
    number=0

    period$[0]=begyear$+begper$
    period$[1]=endyear$+endper$
    headings$[2]=Translate!.getTranslation("AON_FROM_PERIOD_")+begper$+" "+begyear$+Translate!.getTranslation("AON__THROUGH_PERIOD_")+endper$+" "+endyear$
    more=1
    recs=0
    total_recs=0

rem --- Background

    call pgmdir$+"adc_progress.aon","N","IVM_ITEMMAST","",Translate!.getTranslation("AON_PRINTING"),"",7+p[0],ivm01a_dev,1,0,status
    if status = 999 then goto std_exit

rem --- Report headings

    headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_WAREHOUSE")
    headings$[7]="[HEADER]"
    if begitem$="" headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if begprod$="" headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    if type$="" headings$[5]=Translate!.getTranslation("AON_ALL_ITEM_TYPES") else headings$[5]=Translate!.getTranslation("AON_ITEM_TYPE:_")+type$
    headings$[6]=Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_ITEMS")+" = "+inactive$
rem ----  column heading

    dw = width - m2*6 - 7 - 5

    dim columns$[7,10]
    columns=8
    columns$[0,0]=Translate!.getTranslation("AON_ITEM^DESCRIPTION"),  columns$[0,1]="C",columns$[0,2]=str(dw)
    columns$[1,0]="UM",                columns$[1,1]="C",columns$[1,2]="5"
    columns$[2,0]=Translate!.getTranslation("AON_BEGINNING^BALANCE"), columns$[2,1]="N",columns$[2,2]=str(m2),columns$[2,3]=m2$
    columns$[3,0]=Translate!.getTranslation("AON_RECEIVED^&BUILT"),   columns$[3,1]="N",columns$[3,2]=str(m2),columns$[3,3]=m2$
    columns$[4,0]=Translate!.getTranslation("AON_SOLD^&ISSUED"),      columns$[4,1]="N",columns$[4,2]=str(m2),columns$[4,3]=m2$
    columns$[5,0]=Translate!.getTranslation("AON_ADJUST^&RETURN"),    columns$[5,1]="N",columns$[5,2]=str(m2),columns$[5,3]=m2$
    columns$[6,0]=Translate!.getTranslation("AON_TRANSFERS^IN&OUT"),  columns$[6,1]="N",columns$[6,2]=str(m2),columns$[6,3]=m2$
    columns$[7,0]=Translate!.getTranslation("AON_ENDING^BALANCE"),    columns$[7,1]="N",columns$[7,2]=str(m2),columns$[7,3]=m2$ 

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Loop Starting

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ivm_itemwhse.item_id, ivm_itemwhse.warehouse_id, ivm_itemmast.product_type "
    sql_prep$=sql_prep$+"  FROM ivm_itemwhse, ivm_itemmast "
    sql_prep$=sql_prep$+" WHERE ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id=ivm_itemmast.firm_id "

    where_clause$="AND ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
    if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND "
    if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    where_clause$=where_clause$+" ORDER BY ivm_itemwhse.warehouse_id,ivm_itemmast.product_type "
    sql_prep$=sql_prep$+where_clause$

    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read

    while more
        read_tpl$ = sqlfetch(sql_chan,err=*break)
        whse$     = read_tpl.warehouse_id$
        product$  = read_tpl.product_type$
        item$     = read_tpl.item_id$

rem --- Level breaks?

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then exitto std_exit

        if whse$<>t0$ gosub whse_break
        if product$<>t1$ gosub product_break

rem --- Retrieve item and activity

        dim item$[2]
        dim activity[12]
        dim description$(dw)
        find record (ivm01a_dev, key=firm_id$+item$, dom=*continue) ivm01a$
        if type$<>"" and ivm01a.item_type$<>type$ then continue
        rem -- Check for inactive item
        if inactive$="Y" and ivm01a.item_inactive$="Y" then continue
        description$(1) = func.displayDesc(ivm01a.item_desc$, p[3], p[4], p[5])
        item$[0]=firm_id$
        item$[1]=whse$
        item$[2]=item$
        action$=""

rem --- old call pgms were ivc_wb.bbx and ivc_pa.bbx

        call pgmdir$+"ivc_whseact.aon",action$,files[all],item$[all],period$[all],activity[all],status
        if status = 999 then exitto std_exit 
        call pgmdir$+"ivc_periodqty.aon",selection$,"",activity[all],balance,status
        if status = 999 then exitto std_exit

rem --- Print detail line

        if h9$<>"" gosub prod_heading
        OutVect!.addItem(ivm01a.item_id$)
        OutVect!.addItem(ivm01a.unit_of_sale$)
        OutVect!.addItem(str(activity[0]))
        OutVect!.addItem(str(activity[1]))
        OutVect!.addItem(str(activity[3]))
        OutVect!.addItem(str(activity[5]))
        OutVect!.addItem(str(activity[6]))
        OutVect!.addItem(str(balance))   

        OutVect!.addItem("   "+description$)
        xwk=fnblank(2)
        OutVect!.addItem(str(activity[2]))
        OutVect!.addItem(str(activity[4]))
        OutVect!.addItem(str(activity[8]))
        OutVect!.addItem(str(activity[7]))
        xwk=fnblank(1)

        number=number+1
        recs=recs+1

rem --- Loop back for next record

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if number = 0 then OutVect!.addItem(Translate!.getTranslation("AON_NO_INVENTORY_ACTIVITY_FOUND"))
    goto std_exit

prod_heading: rem --- Product subheading

    xwk=fnblank(columns)
    OutVect!.addItem(h9$)
    xwk=fnblank(columns-1)
    xwk=fnblank(columns)
    h9$=""
    return

whse_break: rem --- Warehouse Break

    if t0$<>"" then gosub product_break
    let t0$=whse$
    x$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x$=ivm10c.short_name$
    x$=Translate!.getTranslation("AON_WAREHOUSE_")+t0$+" "+x$
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)
    return

product_break: rem --- Product break

    t1$=product$
    prod_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    prod_desc$=ivm10a.code_desc$
    let h9$=Translate!.getTranslation("AON_PRODUCT_TYPE_")+t1$+" "+prod_desc$
    return

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_error.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,ignore_status
    if status=0 then run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
