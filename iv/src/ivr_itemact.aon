rem ivr - Inventory Activity Report
rem Program ivr_itemact.aon v8.0.0 26Oct2006 (ivr_ea/eb)
rem Created by adx_codeport.bbx v1.1.1 (10/26/2006 11:47:41)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

        seterr std_error
        setesc std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        firm_id$=sysinfo.firm_id$
        firm_name$=sysinfo.firm_name$
        task_desc$=sysinfo.task_desc$
        sys_date$=sysinfo.system_date$

rem --- Open files

        files=7,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="gls_params",ids$[1]="GLS_PARAMS"
        files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
        files$[3]="ivm-02",ids$[3]="IVM_ITEMWHSE"
        files$[4]="ivc_prodcode",ids$[4]="IVC_PRODCODE"
        files$[5]="ivm-12",ids$[5]="IVM_ITEMACT"
        files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
        files$[7]="ivc_whsecode",ids$[7]="IVC_WHSECODE"
        
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        gls01_dev=channels[1]
        ivm01a_dev=channels[2]
        ivm02a_dev=channels[3] 
        ivm10a_dev=channels[4]
        ivm12_dev=channels[5]
        ivs01_dev=channels[6]
        ivm10c_dev=channels[7]
        
rem --- Dimension string templates

        dim gls01a$:templates$[1],ivm01a$:templates$[2],ivm02a$:templates$[3],
:           ivm10a$:templates$[4],ivm12a$:templates$[5],ivs01a$:templates$[6],
:           ivm10c$:templates$[7]
      
rem --- Assign form input values to local variables

        period1$=option!.getOptionData("period_year_1")
        begyear$=period1$(3),begper$=period1$(1,2)
        period2$=option!.getOptionData("period_year_2")
        endyear$=period2$(3),endper$=period2$(1,2)
        begwhse$=option!.getOptionData("warehouse_id_1")
        endwhse$=option!.getOptionData("warehouse_id_2")
        begprod$=option!.getOptionData("product_type_1")
        endprod$=option!.getOptionData("product_type_2")
        begitem$=option!.getOptionData("item_id_1")
        enditem$=option!.getOptionData("item_id_2")
        type$=option!.getOptionData("item_type")

rem --- Retrieve parameter records

        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$

rem --- Initializations

        dim p[5],g[1],files[3]
        files[3]=ivm02a_dev
        files[2]=ivm12_dev
        p[0]=num(ivs01a.item_id_len$)
        p[1]=num(ivs01a.precision$)
        g[0]=num(gls01a.total_pers$)
        p[3]=num(ivs01a.desc_len_01$)
        p[4]=num(ivs01a.desc_len_02$)
        p[5]=num(ivs01a.desc_len_03$)
        call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
        call pgmdir$+"adc_sizemask.aon",m2$,m2,12,15

        precision p[1]
        dim period$[1],headings$[6]
        headings$[0]=firm_name$
        headings$[1]=task_desc$
        when$=sys_date$
        clock$=""
        h9$=""
        width=132
        page=0
        selection$="END"
        headings=6
        number=0

        period$[0]=begyear$+begper$
        period$[1]=endyear$+endper$
        headings$[2]="From Period "+begper$+" "+begyear$+" Through Period "+endper$+" "+endyear$
        more=1

rem --- Background

        call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",7+p[0],ivm01a_dev,1,0,ignore_status

rem --- Report headings

        headings$[1]=headings$[1]+" By Warehouse"
        headings$[6]="[HEADER]"
        if begitem$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+begitem$
        if enditem$="" headings$[3]=headings$[3]+" -- To Item: Last" else headings$[3]=headings$[3]+" -- To Item: "+enditem$
        if begprod$="" headings$[4]="From Product: First" else headings$[4]="From Product: "+begprod$                
        if endprod$="" headings$[4]=headings$[4]+" -- To Product: Last" else headings$[4]=headings$[4]+" -- To Product: "+endprod$
        if type$="" headings$[5]="All Item Types" else headings$[5]="Item Type: "+type$

rem ----  column heading

        dim columns$[7,10]
        columns=8
        columns$[0,0]="Item^Description",      columns$[0,1]="C",columns$[0,2]="25"
        columns$[1,0]="UM",                    columns$[1,1]="C",columns$[1,2]="5"
        columns$[2,0]="Beginning^Balance",     columns$[2,1]="N",columns$[2,2]="10",columns$[2,3]=m2$
        columns$[3,0]="Received^&Built",       columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m2$
        columns$[4,0]="Sold^&Issued",          columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$
        columns$[5,0]="Adjustments^&Returns",  columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m2$
        columns$[6,0]="Transfers In^&Out",     columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$
        columns$[7,0]="Ending^Balance",        columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$

rem --- Loop Starting

        sql_prep$="SELECT ivm_itemwhse.firm_id, ivm_itemwhse.item_id, ivm_itemwhse.warehouse_id, "
        sql_prep$=sql_prep$+"ivm_itemmast.product_type, ivm_itemmast.item_type "
        sql_prep$=sql_prep$+"FROM ivm_itemwhse, ivm_itemmast "
        sql_prep$=sql_prep$+"WHERE ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
        sql_prep$=sql_prep$+"ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
        where_clause$="AND ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
        if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
        if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
        if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
        if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
        if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
        if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"'"
        if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"
        where_clause$=cvs(where_clause$,2)
        if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
        where_clause$=where_clause$+" ORDER BY ivm_itemwhse.warehouse_id,ivm_itemmast.product_type "
        if where_clause$<>"" sql_prep$=sql_prep$+where_clause$

        sql_chan=sqlunt
        sqlopen(sql_chan,err=*next)stbl("+DBNAME")
        sqlprep(sql_chan)sql_prep$
        dim read_tpl$:sqltmpl(sql_chan)
        sqlexec(sql_chan)

rem --- Main Read

        while more
            read_tpl$=sqlfetch(sql_chan,err=*break)
            whse$=read_tpl.warehouse_id$
            product$=read_tpl.product_type$
            item$=read_tpl.item_id$
            x$=whse$+" "+product$+" "+item$(1,p[0])

rem --- Level breaks?

            call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,meter_num,status
            if whse$<>t0$ gosub whse_break
            if product$<>t1$ gosub product_break

rem --- Retrieve item and activity

            dim item$[2],activity[12],description$(30)
            find record (ivm01a_dev,key=firm_id$+read_tpl.item_id$,dom=*continue) ivm01a$
            if type$<>"" if ivm01a.item_type$<>type$ continue
            description$(1)=cvs(ivm01a.item_desc$,3)
            item$[0]=firm_id$
            item$[2]=item$
            action$="",item$[1]=whse$

rem --- old call pgms were ivc_wb.bbx and ivc_pa.bbx

            call pgmdir$+"ivc_whseact.aon",action$,files[all],item$[all],period$[all],activity[all],status
            call pgmdir$+"ivc_periodqty.aon",selection$,activity[all],balance

rem --- Print detail line

            if h9$<>"" gosub prod_heading
            OutVect!.addItem(ivm01a.item_id$)
            OutVect!.addItem(ivm01a.unit_of_sale$)
            OutVect!.addItem(str(activity[0]))
            OutVect!.addItem(str(activity[1]))
            OutVect!.addItem(str(activity[3]))
            OutVect!.addItem(str(activity[5]))
            OutVect!.addItem(str(activity[7]))
            OutVect!.addItem(str(balance))   

            OutVect!.addItem("   "+description$)
            xwk=fnblank(2)
            OutVect!.addItem(str(activity[2]))
            OutVect!.addItem(str(activity[4]))
            OutVect!.addItem(str(activity[6]))
            OutVect!.addItem(str(activity[8]))
            xwk=fnblank(1)
                    
            number=number+1

rem --- Loop back for next record

        wend

done: rem --- All done

        if number>0 goto std_exit
        OutVect!.addItem("No Inventory Activity Found")
        goto std_exit

prod_heading: rem --- Product subheading

        xwk=fnblank(columns)
        OutVect!.addItem(h9$)
        xwk=fnblank(columns-1)
        xwk=fnblank(columns)
        h9$=""
        return

whse_break: rem --- Warehouse Break

        if t0$<>"" then gosub product_break
        let t0$=whse$
        x$="(Not on File)"
        find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
        x$=ivm10c.short_name$
        x$="Warehouse "+t0$+" "+x$
        BrkVect!.addItem(str(OutVect!.size()/(columns)))
        HdrVect!.addItem(x$)
        return

product_break: rem --- Product break

        t1$=product$
        prod_desc$="(Not on File)"
        find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
        prod_desc$=ivm10a.code_desc$
        let h9$="Product Type "+t1$+" "+prod_desc$
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$)=cvs(q$,32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
