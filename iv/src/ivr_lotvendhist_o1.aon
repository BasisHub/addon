rem --- Lot/Serial Transaction History By Vendor Report (Report)
rem --- Program ivr_lotvendhist_o1.aon v8.0.0 16Jul2007 (ivr_8b)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:07:32)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[2]
    headings=9
    when$=sysinfo.system_date$
    clock$=""
    h9$=""
    dim headings$[headings],o[10],l[4]
    if item_type$="" x0$=Translate!.getTranslation("AON_ALL") else x0$=item_type$
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__FOR_ITEM_TYPE_")+x0$
    width=132
    page=0
    dim ivchannels[6],params[6],masks$[3]
    ivchannels[0]=ivm01_dev
    ivchannels[1]=ivm10a_dev
    ivchannels[3]=apm01_dev
    ivchannels[4]=glm01_dev
    ivchannels[5]=ivm10b_dev
    ivchannels[6]=ivm10c_dev
    params[0]=p[0]
    params[2]=vendlen
    params[3]=account_length
    params[4]=p[5]
    params[5]=p[6]
    params[6]=p[7]
    masks$[2]=x7$
    masks$[3]=g5$
    more=1
    recs=0
    total_recs=0

rem --- Headings

    x1$=Translate!.getTranslation("AON_FIRST_DATE")
    x2$=Translate!.getTranslation("AON_LAST_DATE")
    if ocb$="O" x0$=Translate!.getTranslation("AON_OPEN_") else if ocb$="C" x0$=Translate!.getTranslation("AON_CLOSED_") else x0$=""
    if beg_date$<>"" x1$=fndate$(beg_date$)
    if end_date$<>"" x2$=fndate$(end_date$)
    headings$[2]=x0$+Translate!.getTranslation("AON_FROM_")+x1$+Translate!.getTranslation("AON__THROUGH_")+x2$

    if beg_item$="" headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_")+ beg_item$
    if end_item$="" headings$[3]=headings$[3] + Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[3]=headings$[3] + Translate!.getTranslation("AON__--_TO_ITEM:_") + end_item$
    if beg_whse$="" headings$[4]=Translate!.getTranslation("AON_FROM_WAREHOUSE:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_WAREHOUSE:_") + beg_whse$
    if end_whse$="" headings$[4]=headings$[4] + Translate!.getTranslation("AON__--_TO_WAREHOUSE:_LAST") else headings$[4]= headings$[4] + Translate!.getTranslation("AON__--_TO_WAREHOUSE:") + end_whse$
    if beg_vendor$="" headings$[5]=Translate!.getTranslation("AON_FROM_VENDOR:_FIRST") else headings$[5]=Translate!.getTranslation("AON_FROM_VENDOR:_") + str(fnmask$(beg_vendor$,vendmask$))
    if end_vendor$="" headings$[5]=headings$[5] + Translate!.getTranslation("AON__--_TO_VENDOR:_LAST") else headings$[5]= headings$[5] + Translate!.getTranslation("AON__--_TO_VENDOR:") + fnmask$(end_vendor$,vendmask$)
    if beg_prod$="" headings$[6]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[6]=Translate!.getTranslation("AON_FROM_PRODUCT:_") + beg_prod$
    if end_prod$="" headings$[6]=headings$[6] + Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[6]= headings$[6] + Translate!.getTranslation("AON__--_TO_PRODUCT:") + end_prod$

rem --- Column Headings

    dim columns$[10,10]
    columns=11
    columns$[0,0]=Translate!.getTranslation("AON_VENDOR"),                     columns$[0,1]="C",columns$[0,2]="8"
    columns$[1,0]=Translate!.getTranslation("AON_PROD^TYPE"),                  columns$[1,1]="C",columns$[1,2]="5"
    columns$[2,0]=Translate!.getTranslation("AON_SERIAL"),                     columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_TRANSACTION^DATE"),           columns$[3,1]="C",columns$[3,2]="8"
    columns$[4,0]=Translate!.getTranslation("AON_TYPE"),                       columns$[4,1]="C",columns$[4,2]="5"
    columns$[5,0]=Translate!.getTranslation("AON_WHSE"),                       columns$[5,1]="C",columns$[5,2]="5"
    columns$[6,0]=Translate!.getTranslation("AON_ITEM/REFERENCE^INFORMATION"), columns$[6,1]="C",columns$[6,2]="25"
    columns$[7,0]=Translate!.getTranslation("AON_QUANTITY"),                   columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$
    columns$[8,0]=Translate!.getTranslation("AON_UNIT_COST"),                  columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m3$
    columns$[9,0]=Translate!.getTranslation("AON_EXTENSION"),                  columns$[9,1]="N",columns$[9,2]="8",columns$[9,3]=m1$
    columns$[10,0]=Translate!.getTranslation("AON_PRICE"),                     columns$[10,1]="N",columns$[10,2]="8",columns$[10,3]=m4$

rem --- Position files

    call pgmdir$+"adc_progress.aon","N","IVX_LSVEND","","","",0,ivt03_dev,1,meter_num,status
    read (ivt03_dev,key=firm_id$+beg_vendor$,dom=*next)

rem --- Get next record

    while more
        ivt03a_key$=key(ivt03_dev,end=*break)
        if pos(firm_id$=ivt03a_key$)<>1 break
        vendor$=ivt03a_key.vendor_id$
        product$=ivt03a_key.product_type$
        tran_date$=ivt03a_key.trans_date$
        whse$=ivt03a_key.warehouse_id$
        item$=ivt03a_key.item_id$
        read (ivt03_dev)

    rem --- Valid Vendor/Product/Date/Warehouse/Item?

        if end_vendor$<>"" and vendor$>end_vendor$ then break
        if beg_prod$<>"" and product$<beg_prod$ then 
            read (ivt03_dev,key=firm_id$+vendor$+beg_prod$,dom=*continue)
        endif

        if end_prod$<>"" and product$>end_prod$ then
            read (ivt03_dev,key=firm_id$+vendor$+$FF$,dom=*continue)
        endif

        if beg_date$<>"" and tran_date$<beg_date$ then
            read (ivt03_dev,key=firm_id$+vendor$+product$+ivt03a_key.lotser_no$+beg_date$,dom=*continue)
        endif

        if end_date$<>"" and tran_date$>end_date$ then
            read (ivt03_dev,key=firm_id$+vendor$+product$+ivt03a_key.lotser_no$+$FF$,dom=*continue)
        endif

        if beg_whse$<>"" and whse$<beg_whse$ then
            read (ivt03_dev,key=firm_id$+vendor$+product$+ivt03a_key.lotser_no$+tran_date$+beg_whse$,dom=*continue)
        endif

        if end_whse$<>"" and whse$>end_whse$ then
            read (ivt03_dev,key=firm_id$+vendor$+product$+ivt03a_key.lotser_no$+tran_date$+$FF$,dom=*continue)
        endif

        if beg_item$<>"" and item$<beg_item$ then
            read (ivt03_dev,key=firm_id$+vendor$+product$+ivt03a_key.lotser_no$+tran_date$+whse$+beg_item$,dom=*continue)
        endif

        if end_item$<>"" and item$>end_item$ then
            read (ivt03_dev,key=firm_id$+vendor$+product$+ivt03a_key.lotser_no$+tran_date$+whse$+$FF$,dom=*continue)
        endif

        find record (ivm01_dev,key=firm_id$+item$,dom=*continue) ivm01a$
        if item_type$<>"" and  ivm01a.item_type$<>item_type$ then continue

    rem --- Open or Closed Lots?

        if ocb$<>"B" then
            ivm07a.qty_on_hand=0
            find record (ivm07_dev,key=firm_id$+whse$+item$+ivt03a_key.lotser_no$,dom=*next) ivm07a$
            if ocb$="O" and ivm07a.qty_on_hand=0 then continue
            if ocb$="C" and ivm07a.qty_on_hand<>0 then continue
        endif

        read record (ivt01_dev,key=firm_id$+whse$+item$+ivt03a_key.lotser_no$+tran_date$+ivt03a_key.iv_hist_seq$,dom=*continue) ivt01a$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

    rem --- Level breaks?

        if vendor$<>t1$ gosub vendor_break
        if product$+ivt03a_key.lotser_no$<>t2$ first$="Y" else first$="N",t2$=product$+ivt03a_key.lotser_no$

    rem --- Get Reference Block

        dim desc$[2]
        call pgmdir$+"ivc_transdata.aon",ivt01a$,ivchannels[all],params[all],masks$[all],type$,desc$[all]

    rem --- Print detail line


        if first$="Y" then 
            OutVect!.addItem("")
            OutVect!.addItem(product$)
            OutVect!.addItem(ivt03a_key.lotser_no$)
            OutVect!.addItem(fndate$(tran_date$))
            OutVect!.addItem(type$)
            OutVect!.addItem(whse$)
            OutVect!.addItem(item$+" "+fnitem$(ivm01a.item_desc$,P[5],P[6],P[7]))
        else
            xwk=fnblank(3)
            OutVect!.addItem(fndate$(tran_date$))
            OutVect!.addItem(type$)
            xwk=fnblank(2)
        endif

        OutVect!.addItem(str(ivt01a.trans_qty))
        OutVect!.addItem(str(ivt01a.unit_cost))
        OutVect!.addItem(str(ivt01a.trans_qty*ivt01a.unit_cost))
        OutVect!.addItem(str(ivt01a.unit_price))
        xwk=fnblank(6)
        OutVect!.addItem(desc$[1])
        xwk=fnblank(columns-7)
        first$="N"
        recs=recs+1
    wend

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    goto std_exit


vendor_break: rem --- Vendor Break

    let apm01a.vendor_name$=Translate!.getTranslation("AON_INVALID_VENDOR")
    find record (apm01_dev,key=firm_id$+vendor$,dom=*next) apm01a$

    OutVect!.addItem(fnmask$(vendor$,x7$))
    OutVect!.addItem(apm01a.vendor_name$)
    xwk=fnblank(columns-2)
    xwk=fnblank(columns)
    t1$=vendor$,first$="Y"
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
