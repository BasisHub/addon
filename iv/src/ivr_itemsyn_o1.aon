rem --- Inventory Synonyms Listing (Report Overlay)
rem --- Program ivr_itemsyn_o1.aon v8.0.0 16Jul2007 (ivr_sb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 01:03:34)
rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
rem --- Document initializations
            OutVect!=bbjAPI().getSysGui().makeVector()
            HdrVect!=bbjAPI().getSysGui().makeVector()
            rep_date$=date(0:"%Mz/%Dz/%Yd")
            rep_date_stamp$=date(0:"%Yd%Mz%Dz")
            rep_time$=date(0:"%hz:%mz %p")
            rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

            pgmdir$=stbl("+DIR_PGM",err=*next)
            syspgmdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+SYSINFO",err=*next)
            milestone=num(stbl("+MILESTONE",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Initializations

            precision p[1]   
            dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],headings$[7],o[3]
            dim headings$[7],o[3]
            when$=sysinfo.system_date$
            clock$=""
            width=80
            page=0
            l9=59
            l=l9+1
            headings=7
            number=0
            last$=""
            more=1

rem --- Print positions
    
            gosub Position

rem --- Background

            call pgmdir$+"adc_progress.aon","N","","","","",0,ivm14_dev,1,meter_num,status

rem --- Report headings

            gosub Init_Heading

rem --- Position files

    if sequence$<>"I"
        key_num=0
        call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMSYN","PRIMARY",ivm14_key_tpl$,table_chans$[all],status$
        dim ivm14a_key$:ivm14_key_tpl$
        read(ivm14_dev,key=firm_id$+cvs(begsyn$,3),knum=key_num,dom=*next)
    else 
        key_num=1
        call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMSYN","ALT_KEY_01",ivm14_key_tpl$,table_chans$[all],status$        
        dim ivm14a_key$:ivm14_key_tpl$
        read(ivm14_dev,key=firm_id$+cvs(begitem$,3),knum=key_num,dom=*next)
    endif

rem --- Loop starting
rem --- Next Synonym

    While more

        if sequence$<>"I" then 
            ivm14a_key$=key(ivm14_dev,end=*break)
            if pos(firm_id$=ivm14a_key$)<>1 break
            if endsyn$<>"" if ivm14a_key.item_synonym$>endsyn$ break
            read (ivm14_dev)
            if begitem$<>"" then
                if ivm14a_key.item_id$<begitem$ then
                     read (ivm14_dev,key=ivm14a_key.firm_id$+
:                       ivm14a_key.item_synonym$+begitem$(1,len(begitem$)-1)+$FF$,dom=*continue)
                     continue
                endif
            endif
            if enditem$<>"" then
                if ivm14a_key.item_id$>enditem$ then
                    read (ivm14_dev,key=ivm14a_key.firm_id$+
:                        ivm14a_key.item_synonym$+$FF$,dom=*continue)
                    continue
                endif
            endif
            synonym$=ivm14a_key.item_synonym$
            item$=ivm14a_key.item_id$
            x$=synonym$
           
        else
        rem --- Item sequence
            ivm14a_key$=key(ivm14_dev,end=*break)
            if pos(firm_id$=ivm14a_key$)<>1 break
            if enditem$<>"" if ivm14a_key.item_id$>enditem$ break
            read (ivm14_dev)
            if begsyn$<>"" then
                if ivm14a_key.item_synonym$<begsyn$ then
                    read (ivm14_dev,key=ivm14a_key.firm_id$+
:                       ivm14a_key.item_id$+begsyn$(1,len(begsyn$)-1)+$FF$,dom=*continue)
                    continue
                endif
            endif
            if endsyn$<>"" then
                if ivm14a_key.item_synonym$>endsyn$ then
                    read (ivm14_dev,key=ivm14a_key.firm_id$+
:                       ivm14a_key.item_id$+$FF$,dom=*continue)
                    continue
                endif
            endif
            synonym$=ivm14a_key.item_synonym$
            item$=ivm14a_key.item_id$
            x$=item$
        endif

Retrieve_Item: rem --- Retrieve item

        if mod(rnum,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        ivm01a_key$=firm_id$+item$
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        rnum=rnum+1
        if begprod$<>"" then
            if ivm01a.product_type$<begprod$ then
                continue
            endif
        endif
        if endprod$<>"" then
            if ivm01a.product_type$>endprod$ then
                continue
            endif
        endif
        if type$<>"" then
            if ivm01a.item_type$<>type$ then
                continue
            endif 
        endif  

rem --- Format detail line

        
        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        if sequence$="S" then
            char$=synonym$(1,1)
            OutVect!.addItem(synonym$)
            OutVect!.addItem(item$)
            OutVect!.addItem(description$)
            OutVect!.addItem(ivm01a.product_type$)
        endif
        if sequence$="I" then
            char$=item$(1,1)
            OutVect!.addItem(item$)
            OutVect!.addItem(description$)
            OutVect!.addItem(ivm01a.product_type$)
            OutVect!.addItem(synonym$)
        endif
        if char$<>last$ and l+1<l9
             OutVect!.addItem("")
            l=l+1
            last$=char$ 
        endif

            l=l+1
            number=number+1

    wend; rem --- Loop Ending

done: rem --- All done

        OutVect!.addItem("")
        OutVect!.addItem(str(number)+" Synonyms Listed")
        goto std_exit


Init_Heading: rem --- Initialize HEADINGS$

        dim h1$(width),h2$(width),h6$(width),headings$[headings+1]
        headings$[0]=sysinfo.firm_name$
        headings$[1]=sysinfo.task_desc$
        if sequence$="S" headings$[1]=headings$[1]+" By Synonym"
        if sequence$="I" headings$[1]=headings$[1]+" By Item"

        x3$="All Item Types"

        headings$[1]=headings$[1]+" For "+x3$

        headings$[3]=h1$
        headings$[4]=h2$

       if begitem$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+begitem$
                    if enditem$="" headings$[3]=headings$[3]+" -- To Item: Last" else headings$[3]=headings$[3]+" -- To Item: "+enditem$
                    if begprod$="" headings$[4]="From Product: First" else headings$[4]="From Product: "+begprod$                
                    if endprod$="" headings$[4]=headings$[4]+" -- To Product: Last" else headings$[4]=headings$[4]+" -- To Product: "+endprod$




rem --- Column heading
        dim columns$[3,10]
                if sequence$="S" then

                        columns$[0,0]="Synonym",         columns$[0,1]="C",columns$[0,2]="15"
                        columns$[1,0]="Item",            columns$[1,1]="C",columns$[1,2]="10"
                        columns$[2,0]="Description",     columns$[2,1]="C",columns$[2,2]="35"
                        columns$[3,0]="Prd",             columns$[3,1]="C",columns$[3,2]="10"

                else

                        columns$[0,0]="Item",           columns$[0,1]="C",columns$[0,2]="10"
                        columns$[1,0]="Description",    columns$[1,1]="C",columns$[1,2]="35"
                        columns$[2,0]="Prd",            columns$[2,1]="C",columns$[2,2]="10"
                        columns$[3,0]="Synonym",        columns$[3,1]="C",columns$[3,2]="15"
                endif
        return

Position: rem --- Print positions

        m1$=ivs01a.amount_mask$
        m2$=ivs01a.unit_mask$
        m3$=ivs01a.cost_mask$
        call pgmdir$+"adc_sizemask.aon",m1$,m1,8,15
        call pgmdir$+"adc_sizemask.aon",m2$,m2,8,12
        call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12

        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
