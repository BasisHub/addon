rem --- Inventory Synonyms Listing (Report Overlay)
rem --- Program ivr_itemsyn_o1.aon v8.0.0 16Jul2007 (ivr_sb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 01:03:34)
rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    syspgmdir$=stbl("+DIR_SYP",err=*next)

rem --- Initializations

    precision p[1]   
    dim headings$[7]
    when$=sysinfo.system_date$
    clock$=""
    width=80
    page=0
    headings=7
    number=0
    last$=""
    more=1
    recs=0
    total_recs=0
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","U","",m2$,0,m2
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",m3$,0,m3

rem --- Background

    call pgmdir$+"adc_progress.aon","N","IVM_ITEMSYN","","","",0,ivm14_dev,1,meter_num,status

rem --- Report headings

    gosub init_heading

rem --- Position files

    if sequence$<>"I"
        key_num$="PRIMARY"
        call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMSYN","PRIMARY",ivm14_key_tpl$,rd_table_chans$[all],status$
        dim ivm14a_key$:ivm14_key_tpl$
        read(ivm14_dev,key=firm_id$+cvs(begsyn$,3),knum=key_num$,dom=*next)
    else 
        key_num$="AO_ITEM_SYN"
        call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMSYN","AO_ITEM_SYN",ivm14_key_tpl$,rd_table_chans$[all],status$        
        dim ivm14a_key$:ivm14_key_tpl$
        read(ivm14_dev,key=firm_id$+cvs(begitem$,3),knum=key_num$,dom=*next)
    endif

rem --- Loop starting

rem --- Next Synonym

    while more
        if sequence$<>"I" then 
            ivm14a_key$=key(ivm14_dev,end=*break)
            if pos(firm_id$=ivm14a_key$)<>1 then break
            if endsyn$<>"" and ivm14a_key.item_synonym$>endsyn$ then break
            read (ivm14_dev)
            
            if begitem$<>"" and ivm14a_key.item_id$<begitem$ then
                read (ivm14_dev,key=ivm14a_key.firm_id$+ivm14a_key.item_synonym$+begitem$(1,len(begitem$)-1)+$FF$,dom=*continue)
                continue
            endif
            
            if enditem$<>"" and ivm14a_key.item_id$>enditem$ then
                read (ivm14_dev,key=ivm14a_key.firm_id$+ivm14a_key.item_synonym$+$FF$,dom=*continue)
                continue
            endif
            
            synonym$=ivm14a_key.item_synonym$
            item$=ivm14a_key.item_id$
            x$=synonym$
        else
        
        rem --- Item sequence
        
            ivm14a_key$=key(ivm14_dev,end=*break)
            if pos(firm_id$=ivm14a_key$)<>1 then break
            if enditem$<>"" and ivm14a_key.item_id$>enditem$ then break
            read (ivm14_dev)
            
            if begsyn$<>"" and ivm14a_key.item_synonym$<begsyn$ then
                read (ivm14_dev,key=ivm14a_key.firm_id$+ivm14a_key.item_id$+begsyn$(1,len(begsyn$)-1)+$FF$,dom=*continue)
                continue
            endif
            
            if endsyn$<>"" and ivm14a_key.item_synonym$>endsyn$ then
                read (ivm14_dev,key=ivm14a_key.firm_id$+ivm14a_key.item_id$+$FF$,dom=*continue)
                continue
            endif
            
            synonym$=ivm14a_key.item_synonym$
            if cvs(synonym$,3)="" then continue
            item$=ivm14a_key.item_id$
            x$=item$
        endif

    rem --- Retrieve item

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        
        ivm01a_key$=firm_id$+item$
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        rnum=rnum+1
        if begprod$<>"" and ivm01a.product_type$<begprod$ then continue
        if endprod$<>"" and ivm01a.product_type$>endprod$ then continue
        if type$<>"" and ivm01a.item_type$<>type$ then continue
        rem -- Check for inactive item
        if inactive$="Y" and ivm01a.item_inactive$="Y" then continue

    rem --- Format detail line

        if sequence$="S" then char$=synonym$(1,1)
        if sequence$="I" then char$=item$(1,1)
        if char$<>last$ 
            xwk=fnblank(4)
            last$=char$ 
        endif
        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        if sequence$="S" then
            OutVect!.addItem(synonym$)
            OutVect!.addItem(item$)
            OutVect!.addItem(description$)
            OutVect!.addItem(ivm01a.product_type$)
        endif
        if sequence$="I" then
            OutVect!.addItem(item$)
            OutVect!.addItem(description$)
            OutVect!.addItem(ivm01a.product_type$)
            OutVect!.addItem(synonym$)
        endif
        number=number+1
        recs=recs+1

    wend; rem --- Loop Ending

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    xwk=fnblank(4)
    OutVect!.addItem("")
    OutVect!.addItem(str(number)+Translate!.getTranslation("AON__SYNONYMS_LISTED"))
    xwk=fnblank(2)
    goto std_exit
    
init_heading: rem --- Initialize HEADINGS$

    dim h1$(width),h2$(width),h6$(width),headings$[headings+1]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    if sequence$="S" headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_SYNONYM")
    if sequence$="I" headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_ITEM")
    x3$=Translate!.getTranslation("AON_ALL_ITEM_TYPES")
    headings$[1]=headings$[1]+Translate!.getTranslation("AON__FOR_")+x3$
    if begitem$="" headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if begprod$="" headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    headings$[5]=Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_ITEMS")+" = "+inactive$

rem --- Column heading

    dim columns$[3,10]
    
    if sequence$="S" then
        columns$[0,0]=Translate!.getTranslation("AON_SYNONYM"),         columns$[0,1]="C",columns$[0,2]="15"
        columns$[1,0]=Translate!.getTranslation("AON_ITEM"),            columns$[1,1]="C",columns$[1,2]="10"
        columns$[2,0]=Translate!.getTranslation("AON_DESCRIPTION"),     columns$[2,1]="C",columns$[2,2]="35"
        columns$[3,0]=Translate!.getTranslation("AON_PRD"),             columns$[3,1]="C",columns$[3,2]="10"
    else
        columns$[0,0]=Translate!.getTranslation("AON_ITEM"),           columns$[0,1]="C",columns$[0,2]="10"
        columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),    columns$[1,1]="C",columns$[1,2]="35"
        columns$[2,0]=Translate!.getTranslation("AON_PRD"),            columns$[2,1]="C",columns$[2,2]="10"
        columns$[3,0]=Translate!.getTranslation("AON_SYNONYM"),        columns$[3,1]="C",columns$[3,2]="15"
    endif

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]
    
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
