rem --- Price Change Reversal Register
rem --- Program ivr_pricechgrevreg.aon v8.0.0 09Jul2007 (ivr_4a)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:43:20)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

	pgmdir$=""
	pgmdir$=stbl("+DIR_PGM",err=*next)
	sypdir$=""
	sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL")
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Open all files

	num_files = 6
	open_beg  = 1
	open_end  = num_files
	
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	
	open_tables$[1]="IVS_PARAMS",   open_opts$[1]="OTA"
	open_tables$[2]="IVW_PRICREV",  open_opts$[2]="OTAL"
	open_tables$[3]="IVM_ITEMMAST", open_opts$[3]="OTA"
	open_tables$[4]="IVM_ITEMWHSE", open_opts$[4]="OTA"
	open_tables$[5]="IVC_PRODCODE", open_opts$[5]="OTA"
	open_tables$[6]="IVC_WHSECODE", open_opts$[6]="OTA"
	
	gosub open_tables
	
	ivs_params_dev = num( open_chans$[1] )
	pricerev_dev   = num( open_chans$[2] )
	itemmast_dev   = num( open_chans$[3] )
	itemwhse_dev   = num( open_chans$[4] )
	prodcode_dev   = num( open_chans$[5] )
	whsecode_dev   = num( open_chans$[6] )
	
	dim ivs_params_rec$:open_tpls$[1]
	dim pricerev_rec$:open_tpls$[2]
	dim itemmast_rec$:open_tpls$[3]
	dim itemwhse_rec$:open_tpls$[4]
	dim prodcode_rec$:open_tpls$[5]
	dim whsecode_rec$:open_tpls$[6]	
	
rem --- Parameters

    find record (ivs_params_dev, key=firm_id$+"IV00", dom=std_missing_params) ivs_params_rec$

    dim p[5]
    p[0]=ivs_params_rec.item_id_len
    p[1]=num(ivs_params_rec.precision$)
    p[3]=num(ivs_params_rec.desc_len_01$)
    p[4]=num(ivs_params_rec.desc_len_02$)
    p[5]=num(ivs_params_rec.desc_len_03$)

rem --- Initializations

    precision p[1]
	
    width=132
    m9$="-###0.00%"
    m9=len(m9$)
    dw=p[3]+p[4]+p[5]
	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","P","",m4$,0,m4

rem --- Print positions
    
	dim o[4]
    o[1]=p[0]+1
    o[2]=o[1]+dw+1
    o[3]=o[2]+4
    o[4]=o[3]+m4+1
    if o[4]+m4+7>= width then
        o[4]=width-m4-7
        o[3]=o[4]-m4-1
    endif
	
rem --- Document initializations

	declare BBjVector OutVect!
	declare BBjVector HdrVect!
	declare BBjVector BrkVect!
	declare BBjVector TotVect!

	OutVect!=BBjAPI().makeVector()
	HdrVect!=BBjAPI().makeVector()
	BrkVect!=BBjAPI().makeVector()
	TotVect!=BBjAPI().makeVector()
	
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)	
	
rem --- Column headings

	columns=5
	dim columns$[columns,10]
	
	columns$[0,0]=Translate!.getTranslation("AON_ITEM"),               columns$[0,1]="C", columns$[0,2]=str(p[0])
	columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),        columns$[1,1]="C", columns$[1,2]=str(dw)
	columns$[2,0]="UM",                 columns$[2,1]="C", columns$[2,2]="2"
	columns$[3,0]=Translate!.getTranslation("AON_CURRENT^LIST_PRICE"), columns$[3,1]="N", columns$[3,2]=str(m4), columns$[3,3]=m4$
	columns$[4,0]=Translate!.getTranslation("AON_NEW^LIST_PRICE"),     columns$[4,1]="N", columns$[4,2]=str(m4), columns$[4,3]=m4$
	columns$[5,0]=Translate!.getTranslation("AON_PRICE^CODE"),         columns$[5,1]="C", columns$[5,2]="5"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]
	
rem --- Report headings

    headings=3
	dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$	
	headings$[headings]="[HEADER]"

rem --- Call price/cost change entry program

    action$="R"
    entry$="IVW_PRICREV"
    call pgmdir$+"ivc_pricecostchgbypct.aon",action$,entry$,option!,no_of_records,rd_table_chans$[all],status
    if status then if status = 911 then escape else goto std_exit
	
	if no_of_records = 0 then 
		msg_id$ = "AD_NORECS"
		call sypdir$ + "bac_message.bbj", err=*endif,
:			msg_id$,
:			msg_tokens$[all],
:			msg_opt$,
:			rd_table_chans$[all]
	
		goto std_exit
	endif
	
    read (pricerev_dev,key="",dom=*next)
	
    rem ivw09a_key$=key(pricerev_dev,end=Report_Init)
    rem headings$[1]=sysinfo.task_desc$+Translate!.getTranslation("AON__FOR_LIST_PRICE_CODE_")+ivw09a_key.lst_prc_cde$

rem --- Report Initializations

    call pgmdir$+"adc_progress.aon","N","","","","",0,pricerev_dev,1,meter_num,status
    read (pricerev_dev,key="",dom=*next)

    prev_price_code$=""
    prev_whse$=""
    prev_type$=""
	more = 1
	number=0

rem --- Next price reversal record

    while more
        read record (pricerev_dev, end=*break) pricerev_rec$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status

rem --- Level breaks?

        if pricerev_rec.price_code$<>prev_price_code$ then 
			gosub price_code_break
			gosub whse_break
			gosub product_break
		else
			if pricerev_rec.warehouse_id$<>prev_whse$ then 
				gosub whse_break
				gosub product_break
			else
				if pricerev_rec.product_type$<>prev_type$ then 
					gosub product_break
				endif
			endif
		endif

rem --- Additional reads

        item$ = pricerev_rec.item_id$
        whse$ = pricerev_rec.warehouse_id$
		
        find record (itemmast_dev, key=firm_id$+item$,       dom=*next) itemmast_rec$
        find record (itemwhse_dev, key=firm_id$+whse$+item$, dom=*next) itemwhse_rec$
		
        if itemwhse_rec.cur_price_cd$<>pricerev_rec.price_code$ continue
		
        description$=fnitem$(itemmast_rec.item_desc$,p[3],p[4],p[5])

rem --- Print detail line

		OutVect!.addItem(item$)
		OutVect!.addItem(description$)
		OutVect!.addItem(itemmast_rec.unit_of_sale$)
		OutVect!.addItem( str(itemwhse_rec.cur_price) )
		OutVect!.addItem( str(itemwhse_rec.pri_price) )
		OutVect!.addItem(itemwhse_rec.pri_price_cd$)
		
        number=number+1
		
		prev_price_code$ = pricerev_rec.price_code$
		prev_whse$ = pricerev_rec.warehouse_id$
		prev_type$ = pricerev_rec.product_type$
		
rem --- Loop back for next record

    wend

rem --- All done

    if !number then
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif
	
rem --- Run update overlay

	rem --- Values for Price/Cost Update program
    channel=pricerev_dev
    o0=2; rem signals price reversal
    first$=firm_id$
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    overlay$ = pgmdir$+"ivu_pricecostchgupdt.aon"
	
	rem --- Print register via DocOut
	out_action$="PRT-PDF"
	next_overlay$=overlay$
	goto std_exit
	
price_code_break: rem --- Price Code Break

	BrkVect!.addItem( str(OutVect!.size()/(columns+1)) )
	HdrVect!.addItem( Translate!.getTranslation("AON_FOR_LIST_PRICE_CODE_") + pricerev_rec.price_code$ )
	
    return

whse_break: rem --- Warehouse Break

	whsecode_rec.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (whsecode_dev, key=firm_id$+"C"+pricerev_rec.warehouse_id$, dom=*next) whsecode_rec$
	
	ignore = fnblank_line(void)
    OutVect!.addItem( Translate!.getTranslation("AON_WAREHOUSE_")+pricerev_rec.warehouse_id$+" "+cvs(whsecode_rec.short_name$,2) )
	ignore = fnblank(5)
	
    return
	
product_break: rem --- Product Break

	prodcode_rec.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (prodcode_dev,key=firm_id$+"A"+pricerev_rec.product_type$,dom=*next) prodcode_rec$
	
	ignore = fnblank_line(void)
    OutVect!.addItem( Translate!.getTranslation("AON_PRODUCT_") + pricerev_rec.product_type$ + " " + prodcode_rec.code_desc$ )
	ignore = fnblank(5)
	
    return

open_tables: rem --- Call open table routine	

	call sypdir$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		call sypdir$+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
		status=912
		goto std_exit
	endif

	return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return void
    fnend

rem --- Create a blank line.  'void' is simply a variable; it's there to remind you that this function takes no input

	def fnblank_line(void)=fnblank(columns+1)

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return
	
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
