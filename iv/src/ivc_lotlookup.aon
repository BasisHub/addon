rem --- Lot/Serial Number Lookup
rem --- Program ivc_lotlookup v8.0.0 25Nov2008 (syc_ll)
rem --- Created by adx_codeport.bbj v1.1.5 (11/25/2008 03:08:33)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem -------------- Errors, Warnings and Conversion Information ---------------------

rem --- The following error(s) were encountered during the conversion:

rem --- Undefined function fnlatest$ (Line 0326)
rem --- Undefined function fnlatest$ (Line 0327)
rem --- v7.x administrator reference ["sym-06",ids] (Line 0102)
rem --- v7.x administrator reference ["sys-01"] (Line 0131)
rem --- v7.x administrator reference ["sym-06"] (Line 0135)
rem --- v7.x sys-01 reference [sys01_dev=ch] (Line 0141)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0165)
rem --- v7.x administrator reference ["syc_sa.bbx:] (Line 0194)
rem --- BBx reference ["syc_sa.bbx:] (Line 0194)
rem --- v7.x sys-01 reference [sys01_dev,ke] (Line 0224)
rem --- v7.x administrator reference ["syc_wa.bbx"] (Line 0234)
rem --- BBx reference ["syc_wa.bbx"] (Line 0234)
rem --- v7.x administrator reference ["syc_wa.bbx"] (Line 0242)
rem --- BBx reference ["syc_wa.bbx"] (Line 0242)
rem --- v7.x administrator reference ["syc_wa.bbx"] (Line 0244)
rem --- BBx reference ["syc_wa.bbx"] (Line 0244)
rem --- v7.x administrator reference ["syc_wb.bbx"] (Line 0248)
rem --- BBx reference ["syc_wb.bbx"] (Line 0248)
rem --- v7.x administrator reference ["syc_wb.bbx"] (Line 0250)
rem --- BBx reference ["syc_wb.bbx"] (Line 0250)
rem --- v7.x administrator reference ["syc_wa.bbx"] (Line 0252)
rem --- BBx reference ["syc_wa.bbx"] (Line 0252)
rem --- v7.x administrator reference ["syc_wd.bbx"] (Line 0263)
rem --- BBx reference ["syc_wd.bbx"] (Line 0263)
rem --- v7.x administrator reference ["syc_wd.bbx"] (Line 0273)
rem --- BBx reference ["syc_wd.bbx"] (Line 0273)
rem --- v7.x administrator reference ["syc_wa.bbx"] (Line 0274)
rem --- BBx reference ["syc_wa.bbx"] (Line 0274)
rem --- v7.x administrator reference ["syc_wb.bbx"] (Line 0285)
rem --- BBx reference ["syc_wb.bbx"] (Line 0285)
rem --- v7.x administrator reference ["syc_xb.bbx"] (Line 0383)
rem --- BBx reference ["syc_xb.bbx"] (Line 0383)
rem --- v7.x administrator reference ["syc_sa.bbx"] (Line 0400)
rem --- BBx reference ["syc_sa.bbx"] (Line 0400)
rem --- v7.x administrator reference ["syc_la.bbx"] (Line 0412)
rem --- BBx reference ["syc_la.bbx"] (Line 0412)
rem --- v7.x administrator reference ["syc_ig.bbx"] (Line 0528)
rem --- BBx reference ["syc_ig.bbx"] (Line 0528)
rem --- v7.x administrator reference ["syc_es.bbx"] (Line 0535)
rem --- BBx reference ["syc_es.bbx"] (Line 0535)

rem --- The following IOLIST's were removed from this program:

rem --- apm01a: iolist *,ref$(1)
rem --- aps01a: iolist *,*,i2$,*,*,m0$
rem --- ivm01a: iolist b0$(1),b1$(1)
rem --- ivm07a: iolist a0$(1),a1$(1),a[all]
rem --- ivm10c: iolist x0$(1)
rem --- ivs01a: iolist *,*,p2$,p3$,*,*,*,m2$,m3$
rem --- sym06a: iolist *,company$

rem --- The following channel references have been identified:

rem --- sys01t: (Generated by CodePort)

rem --------------------------------------------------------------------------------

rem --- ACTION$: Records to display - Open/Closed/>Zero/All (O,C,Z,A or null) (input)
rem --- A0$    : Firm ID/Warehouse/Item Number (input)
rem --- : ivm-07 0$ string/null/NONE (output)
rem --- A1$    : ivm-07 1$ string/null (output)
rem --- A[ALL] : ivm-07 numerics (output)

    seterr std_error
    setesc std_error
    enter action$,a0$,a1$,a[all]

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="apm-01",ids$[1]="APM_VENDMAST"
    files$[2]="aps_params",ids$[2]="APS_PARAMS"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="ivm-07",ids$[4]="IVM_LSMASTER"
    files$[5]="ivc_whsecode",ids$[5]="IVC_WHSECODE"
    files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
    files$[7]="sym-06",ids$[7]=""
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[1]
    aps01a_dev=channels[2]
    ivm01_dev=channels[3]
    ivm07_dev=channels[4]
    ivm10_dev=channels[5]
    ivs01a_dev=channels[6]
    sym06_dev=channels[7]

rem --- Dimension string templates

    dim apm01a$:templates$[1],aps01a$:templates$[2],ivm01a$:templates$[3],
:       ivm07a$:templates$[4],ivm10a$:templates$[5],ivs01a$:templates$[6],
:       sym06a$:templates$[7]

rem --- Retrieve parameter records

    aps01a_key$=firm_id$+"AP00"
    find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open/Lock Files

    files=6
    dim files$[files],options$[files],channels[files]
    files$[1]="sys-01"
    files$[2]="ivm-01"
    files$[3]="ivm-07"
    files$[4]="ivm-10"
    files$[5]="sym-06"
    files$[6]="apm-01"
    options$[1]="P"
    options$[5]="P"
    call pgmdir$+"adc_fileopen.aon",1,1,5,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    sys01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm07_dev=channels[3]
    ivm10_dev=channels[4]
    sym06_dev=channels[5]

rem --- Determine interface

    inter$=pad(stbl("+INTERFACE")
    512)
    ui$=inter$(26,1)

rem --- Parameters

    dim p[5],i[1],speed$(128),t$:stbl("+TASK_TMPL")
    t$=stbl("+TASK")
    firm_id$=t.f0$(16,2)
    speedsearch$="N"
    speed$(1)=stbl("+SPEEDSEARCH",err=l357)
    firm_id$=speed$(1,2)
    speedsearch$="Y"
l357:
    if ui$="W" goto windows
    find record (sym06_dev,key=firm_id$,dom=std_missing_params) sym06a$
    find record (sys01_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    if pos(p3$(17,1)="SL")=0 goto std_exit
    p[0]=num(p2$(1,2))
    p[1]=num(p2$(3,2))
    p[3]=num(p2$(7,2))
    p[2]=num(p2$(9,2))
    p[4]=num(p2$(11,2))
    p[5]=num(p2$(13,2))
    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]

rem --- Initializations

    precision num(p2$(5,1))
    dim b0$(22),b1$(60),x0$(32)
    x0$(1)=a0$(1,2)+"C"+a0$(3,2)+"(Unknown)"
    iwidth=79
    iheight=3
    iwin_x=1
    iwin_y=3
    ititle$=""
    width=p[3]+12
    height=12
    win_x=1
    win_y=iwin_y+iheight
    if width<36 width=36
    max_row=height-5
    swidth=79-width
    sheight=height
    call pgmdir$+"syc_sa.bbx::init",str(ui$),max_row,pages,linfo$[all]
    swin_x=win_x+width
    swin_y=win_y
    stitle$="Lot/Serial Number Detail"
    owin_x=win_x+1
    owin_y=win_y+3
    otitle$="Lot/Serial Number"
    owidth=len(otitle$)+6
    oheight=3
    start$=""
    if owidth<p[3]+4 owidth=p[3]+4

rem --- escape, if action$="" action$ = "B

    prefix$=a0$

rem --- Window arrays

    dim heading$(width-2),footing$(width-2)
    heading$(2)="Lot/Serial #"
    heading$(width-9)="Status"
    footing$(2)="F1=Restart F4=End PgUp PgDn"
    title$="Lot/Serial Number Lookup"

rem --- Additional file opens

    if ap$<>"Y" goto l700
    call pgmdir$+"adc_fileopen.aon",1,6,6,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    apm01_dev=channels[6]
    find record (sys01_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
    i[0]=num(i2$(1,2))
    i[1]=num(i2$(3,2))

l700: rem --- Read ivm-01 record

    dim g2$(iwidth-2)
    b0$(1)=prefix$(1,2)+prefix$(5)
    find record (ivm01_dev,key=b0$,dom=std_exit) ivm01a$
    find record (ivm10_dev,key=x0$(1,5),dom=*next) ivm10c$
    call pgmdir$+"syc_wa.bbx",0,iwidth,iheight,iwin_x,iwin_y,ititle$,iname$
    g2$(2)="Item "+cvs(b0$(3),2)+" "+fnitem$(b1$,p[2],p[4],p[5])
    x$="Warehouse "+x0$(4,2)+" "+cvs(x0$(6,20),2)
    g2$(iwidth-len(x$)-2)=x$
    print @(0,0),'sb','br',g2$,'er','sf',

rem --- Background

    call pgmdir$+"syc_wa.bbx",0,width,height,win_x,win_y,title$,name$
    print @(0,0),'sb','br',heading$,@(0,height-3),footing$,'er','sf',
    call pgmdir$+"syc_wa.bbx",0,swidth,sheight,swin_x,swin_y,stitle$,sname$

l800: rem --- Options

    call pgmdir$+"syc_wb.bbx",sname$,0
    print 'cs',
    call pgmdir$+"syc_wb.bbx",name$,0
    print 'cf',
    call pgmdir$+"syc_wa.bbx",0,owidth,oheight,owin_x,owin_y,otitle$,oname$
    v0$="S"
    v1$="KCE"
    v2$=""
    v4$=""
    v0=p[3]
    v1=1
    v2=0
    gosub std_input
    if v3=4 or v3=5 or v3=6 goto std_exit
    start$=v$
    call pgmdir$+"syc_wd.bbx",oname$

rem --- Detail Window

    if speedsearch$<>"Y" goto l1000

rem --- Display SpeedSearch Company

    dim x$(width+swidth)
    x$(2)="SpeedSearch Company: "+firm_id$+" "+cvs(company$,2)
    if cname$<>"" call pgmdir$+"syc_wd.bbx",cname$
    call pgmdir$+"syc_wa.bbx",0,swidth,3,swin_x,swin_y+sheight,"",cname$
    print @(0,0),'br',x$,'er',

l1000: rem --- Position file

    dim llist$[pages,max_row,5],more$[pages,max_row,sheight-2]
    page=1
    l=1
    row=1
    found=0
    selection$=""
    call pgmdir$+"syc_wb.bbx",name$,0

rem --- Position ivm-07 file

    dim a0$(44),a1$(95),a[12]
    a0$(1)=prefix$
    a0$(25)=start$
    read (ivm07_dev,key=a0$,dom=l1400)
    k$=a0$
    goto l1430

l1400: rem --- Read next record

    dim a1$(96),a[12]
    k$=key(ivm07_dev,end=l3000)
l1430:

    if pos(a0$(1,24)=k$)<>1 goto l3000
    read record (ivm07_dev,key=k$,err=l3000) ivm07a$

rem --- Display page?

    if l<max_row goto l2100
    gosub lightbar
    if fkey=1 goto l800
    if fkey=4 goto std_exit
    if selection$<>"" goto done

l2100: rem --- Check against display selection

    if action$="O" and a1$(54,1)<>" " goto l2900
    if action$="C" and a1$(54,1)<>"C" goto l2900
    if action$="Z" and (a[0]-a[1]<=0 or a1$(54,1)="C") goto l2900

rem --- Lookup window record

    dim g1$(width-2)
    g1$(2)=a0$(25)
    if a1$(54,1)=" " g1$(width-9)="Open"
    if a1$(54,1)="C" g1$(width-9)="Closed"
    if a1$(54,1)="L" g1$(width,9)="Locked"
    receipt$=fnlatest$(a1$(64,3),a1$(67,3))
    issue$=fnlatest$(a1$(70,3),a1$(73,3))
    llist$[page,row,1]=g1$
    llist$[page,row,2]=a0$

rem --- Retrieve vendor name

    vendor$=""
    if ap$="N" goto l2500
    vendor$=a1$(55,6)
    if cvs(vendor$,2)="" goto l2500
    dim ref$(30)
    ref$(1)="(Unknown Vendor)"
    find record (apm01_dev,key=firm_id$+vendor$,dom=*next) apm01a$
    vendor$=fnmask$(vendor$(1,i[0]),m0$)+" "+cvs(ref$,2)

l2500: rem --- Detail window record

    dim g2$(swidth-2)
    if ap$="Y" g2$(1)="   {Vendor}"+vendor$,more$[page,row,1]=g2$
    g2$(1)="  {Comment}"+a1$(14,40)
    more$[page,row,2]=g2$
    g2$(1)=""
    if cvs(receipt$,2)<>"" g2$(1)=" {Received}"+fndate$(receipt$)
    if cvs(issue$,2)<>"" g2$(swidth-20)="{Issued}"+fndate$(issue$)
    more$[page,row,3]=g2$
    g2$(1)="     {Cost}"+str(a[3]:m3$)
    g2$(swidth-20)="{Location}"+a1$(1,10)
    more$[page,row,5]=g2$
    g2$(1)="  {On Hand}"+str(a[0]:m2$)
    more$[page,row,7]=g2$
    g2$(1)="{Committed}"+str(a[1]:m2$)
    more$[page,row,8]=g2$
    g2$(1)="{Available}"+str(a[0]-a[1]:m2$)
    more$[page,row,9]=g2$
    speed$(1,2)=firm_id$
    speed$(57,2)="15"
    speed$(63,2)="15"
    speed$(65,1)=t.f0$(15,1)
    more$[page,row,0]=str(sheight-2)
    llist$[page,row,5]=sname$
    found=1
    row=row+1
    l=l+1

l2900: rem --- Loop back for next ivm-07 record

    goto l1400

l3000: rem --- End of file

    if found goto l3500
    tokens=1
    dim tokens$[tokens]
    tokens$[1]="Lot/Serial Number"
    v2=win_y+int(height/2)-2
    v1=-1
    call pgmdir$+"syc_xb.bbx",3,"NO_%1_FOUND",tokens$[all],tokens,v2,v1,ignore$,v3
    if v3=4 or v3=5 or v3=6 goto done
    goto l800

l3500: rem --- Display last page

    selection$=selection$+"|EOF"
    gosub lightbar
    if fkey=1 goto l800

done: rem --- All done

    goto std_exit

lightbar: rem --- Display page

    selection=0
    call pgmdir$+"syc_sa.bbx",5,llist$[all],more$[all],linfo$[all],selection$,selection,page,pages,max_row,name$,height,width,fkey
    if fkey=1 goto l6290
    l=1
    row=1
l6290:
    return

windows: rem --- Call graphical windows lookup

rem --- escape doesn't deal with action$

    selection$=""
    call pgmdir$+"syc_la.bbx","","","Lot/Serial Number Lookup","ivm-07",str(firm_id$),"",str(a0$),selection$,status
    if status=0 a0$(1)=selection$
    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- #include "./aon/lib/std_input.src

std_input: rem --- standard input routine (12-mar-2003)

    if restart and vaction$="s" vaction$="sp",restart=0
    if vaction$="g" compare_control=num(str(grid_id)+str(grid_row:"000")+str(grid_col:"000")) else compare_control=control_id
    if compare_control=old_control_id validate=0 else old_control_id=compare_control
    dim vdata$[10],vdata[10],vinfo$[20],vinfo[20]
    let vdata$[0]=v0$,vdata$[1]=v1$,vdata$[2]=v2$,vdata$[3]=v3$,vdata$[4]=v4$
    let vdata[0]=v0,vdata[1]=v1,vdata[2]=v2,vdata[3]=v3,vdata[4]=v
    let vinfo$[0]=pgm(-2),vinfo$[4]=event$,vinfo[2]=control_id,vinfo[3]=i0
    let vinfo[4]=i0_nonkey1,vinfo[5]=i0_done,vinfo[6]=my_context
    let vinfo[7]=validate,vinfo[8]=statusbar_context,vinfo[9]=parent_context
    let vinfo[10]=tab_control_id,vinfo[11]=tab_index,vinfo[12]=done_context
    let vinfo[14]=grid_col,vinfo[15]=grid_row
    let vinfo$[11]=vtoken1$,vinfo$[12]=vtoken2$,vinfo$[13]=vtoken3$
    let vinfo$[14]=vtoken4$,vinfo$[15]=vtoken5$,vinfo$[16]=vtoken6$
    let vinfo$[17]=vtoken7$,vinfo$[18]=vtoken8$,vinfo$[19]=vtoken9$

rem --- call standard input routine

    call pgmdir$+"syc_ig.bbx",vaction$,vdata$[all],vdata[all],vinfo$[all],vinfo[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],vstatus
    if vstatus=127 goto std_input_escape
    if vstatus=999 goto std_input_error
    goto std_input_exit

rem --- escape during input
std_input_escape:
    call pgmdir$+"syc_es.bbx",err=std_input_error,pgm(-2),tcb(8),e$,e2,v3
    if v3<>127 goto std_input
    print @(0,e2),'cl','cursor'("ON"),e$,'lf'

rem --- error during input
std_input_error:
    escape
    goto std_input
std_input_exit: rem --- assign local variables and return
    let v$=vinfo$[1],event$=vinfo$[4],v=vinfo[0],v3=vinfo[1]
    let next_control=vinfo[2],i0=vinfo[3],next_context=vinfo[6]
    let validate=vinfo[7],grid_col=vinfo[14],grid_row=vinfo[15]
    let wants_to_edit_cell=vinfo[16],next_tab_index=vinfo[18]
    if wants_to_edit_cell dim vnotice$:vinfo$[3]; let vnotice$=vinfo$[2]
    return

rem --- #end include
rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
