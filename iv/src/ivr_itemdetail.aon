rem Item Detail Listing
rem Copyright BASIS International Ltd.  All Rights Reserved.
rem Program ID: ivr_ItemDetail_irpt.aon  <Mar 07, 2011>

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow

    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 50; rem -50 keeps it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 50
    
rem --- Get HashMap of Values in Options Entry Form

    params! = Option!.getOptionMap()

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    user_id$=sysinfo.user_id$
    proc_date$=date(jul(num(sysinfo.system_date$(1,4)),num(sysinfo.system_date$(5,2)),num(sysinfo.system_date$(7,2))):stbl("+DATE_MASK"))
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    
rem --- Open files

    num_files=15
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ARS_PARAMS",     open_opts$[1]="OTA"
    open_tables$[2]="IVM_ITEMMAST",   open_opts$[2]="OTA[2_]"
    open_tables$[3]="IVC_PRODCODE",   open_opts$[3]="OTA[2_]"
    open_tables$[4]="IVC_CLASCODE",   open_opts$[4]="OTA[2_]"
    open_tables$[5]="IVC_TYPECODE",   open_opts$[5]="OTA[2_]"
    open_tables$[6]="IVM_ITEMWHSE",   open_opts$[6]="OTA[2_]"
    open_tables$[7]="ARC_DISTCODE",   open_opts$[7]="OTA[2_]"
    open_tables$[8]="OPC_TAXCODE",    open_opts$[8]="OTA[2_]"
    open_tables$[9]="IVC_WHSECODE",   open_opts$[9]="OTA[2_]"
    open_tables$[10]="IVC_BUYCODE",   open_opts$[10]="OTA[2_]"
    open_tables$[11]="APM_VENDMAST",  open_opts$[11]="OTA[2_]"
    open_tables$[12]="IVM_ITEMCMTS",  open_opts$[12]="OTA[2_]"
    open_tables$[13]="GLM_ACCT",      open_opts$[13]="OTA[2_]"
    open_tables$[14]="IVM_ITEMSYN",   open_opts$[14]="OTA[2_]"
    open_tables$[15]="IVM_ITEMVEND",  open_opts$[15]="OTA[2_]"

    gosub open_tables

    ars_params_dev=num(open_chans$[1])
    dim ars_params$:open_tpls$[1]

rem --- Close files after ensuring they exist

    num_files=14
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="IVM_ITEMMAST",   open_opts$[1]="CX[2_]"
    open_tables$[2]="IVC_PRODCODE",   open_opts$[2]="CX[2_]"
    open_tables$[3]="IVC_CLASCODE",   open_opts$[3]="CX[2_]"
    open_tables$[4]="IVC_TYPECODE",   open_opts$[4]="CX[2_]"
    open_tables$[5]="IVM_ITEMWHSE",   open_opts$[5]="CX[2_]"
    open_tables$[6]="ARC_DISTCODE",   open_opts$[6]="CX[2_]"
    open_tables$[7]="OPC_TAXCODE",    open_opts$[7]="CX[2_]"
    open_tables$[8]="IVC_WHSECODE",   open_opts$[8]="CX[2_]"
    open_tables$[9]="IVC_BUYCODE",    open_opts$[9]="CX[2_]"
    open_tables$[10]="APM_VENDMAST",  open_opts$[10]="CX[2_]"
    open_tables$[11]="IVM_ITEMCMTS",  open_opts$[11]="CX[2_]"
    open_tables$[12]="GLM_ACCT",      open_opts$[12]="CX[2_]"
    open_tables$[13]="IVM_ITEMSYN",   open_opts$[13]="CX[2_]"
    open_tables$[14]="IVM_ITEMVEND",  open_opts$[14]="CX[2_]"

    gosub open_tables

rem --- retrieve distribute by sales value from param file

    readrecord(ars_params_dev,key=firm_id$+"AR00",dom=*next)ars_params$
    di$=ars_params.dist_by_item$
    call stbl("+DIR_PGM")+"adc_application.aon","GL",info$[all]
    gl$=info$[20]
    
rem --- Set additional params

    params!.put("FIRM_ID",firm_id$)
	params!.put("FIRM_NAME",firm_name$)
    params!.put("REPORT_NAME",sysinfo.task_desc$)
    params!.put("BARISTA_WD",dir(""))       
    if params!.get("ITEM_ID_2")="" then params!.put("ITEM_ID_2","~~~~~~")
    if params!.get("PRODUCT_TYPE_2")="" then params!.put("PRODUCT_TYPE_2","~~~")
    if params!.get("PICK_CHECK")="Y"
        params!.put("COMMENT_YN","Y")
    else
        params!.put("COMMENT_YN","")
    endif
    if gl$="Y" and di$="Y"
        params!.put("output_gl","Y")
    else
        params!.put("output_gl","N")
    endif
   
rem --- Make Document Archive Record and Get ID

    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=rd_alias_id$
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$=rd_out_status$

call rd_dir_syp$+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       "DOC_ID-NOREPRINT"

rem --- Document Output Report Parameters

    params!.put("DOC_NO",rd_doc_id$)
    params!.put("DATE_REP",rep_date$+"  "+rep_time$)

rem --- Build Pattern and Replacement string from Vendor Mask

	call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",msk$,0,0
	pattern=pos("-"=msk$,1,0)
	replacement$=""
	if pattern=0
		pattern$="("+pad(".",len(msk$))+")"
		replacement$="$1"
	else
		pattern$="("
		for x9=1 to len(msk$)
			if msk$(x9,1)<>"-"
				pattern$=pattern$+"."
			else
				pattern$=pattern$+")("
			endif
		next x9
		pattern$=pattern$+")"
		for x9=1 to pattern+1
			replacement$=replacement$+"$"+str(x9)+"-"
		next x9
		replacement$=replacement$(1,len(replacement$)-1)
	endif

	params!.put("VEND_PATTERN",pattern$)
	params!.put("VEND_REPLACE",replacement$)

rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)
    reportTitle$=sysinfo.task_desc$+"_"+rd_doc_id$   
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "ItemDetail"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"

    declare BBJasperReport report!
    
rem --- Check for user authentication

    dbserver$="localhost"
    dbsqlport$=":2001"
    rem dbtimeout$="&socket_timeout=5000"
  
    dbserver$=stbl("+DBSERVER",err=*next)
    dbsqlport$=":"+stbl("+DBSQLPORT",err=*next)
    dbssl=num(stbl("+DBSSL",err=*next))
    rem dbtimeout$="&socket_timeout="+stbl("+DBTIMEOUT",err=*next)
    
    if dbssl
        dbssl$="&ssl=true"
    else
        dbssl$="&ssl=false"
    endif

    url_user$="&user=guest"
    if stbl("!DSUDDB",err=*endif)<>"" then
        url_user$=""
    endif

    dbname$ = stbl("+DBNAME")
    dbname_api$ = stbl("+DBNAME_API")
    if pos("jdbc:apache"=cvs(dbname$,8))=1 then
        url$ = dbname$
    else
        if pos("jdbc:"=cvs(dbname$,8))=1 then			
            url$=dbname$+url_user$+dbssl$
        else
            url$ = "jdbc:basis:"+dbserver$+dbsqlport$+"?database="+dbname_api$+url_user$+dbssl$
        endif
    endif

    report! = new BBJasperReport(filename$,url$)
    report!.putParams(params!)

    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)
    report!.setLocale(locale$)

rem --- Fill Report and Show

    declare BBJasperViewerWindow viewerWindow!

    report!.fill(1)
    viewerWindow! = new BBJasperViewerWindow(report!,0,0,screen_width,screen_height,reportTitle$,$00080093$)
    viewerWindow!.getViewerControl().setGoogleDefaultDocument(reportTitle$)
    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)
    declare BBjTopLevelWindow bbjWindow!
    bbjWindow!= viewerWindow!.getViewerWindow()
	cancelled=1
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"close_win",err=*next); cancelled=0
	if cancelled then goto close_win
        
rem --- Event Control

    process_events,err=*same

    release

close_win:rem --- Viewer Window Closed
    viewerWindow!.destroy()
    rdForm!.destroy(err=*next)
    if tcb(13) then exit
    release

connect_err:rem --- Connection Error

    declare java.lang.Exception Exception!
    Exception! = bbjapi().getLastException()
    if Exception! = null() then 
       x = msgbox(errmes(-1),16,"Connection Failed")
    else
       x = msgbox(Exception!.getLocalizedMessage(),16,"Connection Failed")
    endif

    release
    
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return