rem --- Inventory Transfer Update
rem --- Program ivu_transferreg.aon v8.0.0 05Dec2007 (ivu_da)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 12:22:18)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Run Update?

    msg_id$="AON_UPDT_QUERY"
    dim msg_tokens$[1]
    msg_tokens$[1]=sysinfo.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update
    
rem --- Open/Lock files

    files=30,begfile=5,endfile=15
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    
    files$[11]="ivm-12",     ids$[11]="IVM_ITEMACT"
    files$[15]="ivt-04",     ids$[15]="IVT_ITEMTRAN"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_update
    
    ivm12_dev  = channels[11]
    ivt04_dev  = channels[15]



rem --- Initializations

    precision num( ivs01a.precision$ )
    dim files[44],params[10],params$[10],item$[3]
    
    files$[11]="ivm-12"
    files$[12]="ivt-04"
    
    if dist_gl_by_item$<>"Y" then gl$="N"

rem --- Additional File Opens

    if gl$="Y" then 
        files$[20]="glm-01",       ids$[20]="GLM_ACCT"
        files$[21]="glt-04",       ids$[21]="GLE_DAILYDETAIL"
        files$[22]="arc_distcode", ids$[22]="ARC_DISTCODE"
    endif
    
    if ls$="Y" then 
        files$[23]="ivm-07", ids$[23]="IVM_LSMASTER"
        files$[24]="ivm-17", ids$[24]="IVM_LSACT"
        files$[25]="ivt-01", ids$[25]="IVT_LSTRANS"
    endif
    
    if lf$="Y" then
        files$[26]="ivm-04", ids$[26]="IVM_ITEMTIER"
    endif
    
    begfile=20, endfile=26
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    
    if status then goto std_exit_no_update
    
    if gl$="Y" then
        glm01_dev  = channels[20]
        glt04_dev  = channels[21]
        arm10d_dev = channels[22]
        dim arm10d$:templates$[22]
    endif

rem --- Initialize update arrays

    call pgmdir$+"ivc_itemupdt.aon::init",files[all],ivs01a$,item$[all],refs$[all],refs[all],rd_table_chans$[all],ignore_status

    more=1

    call pgmdir$+"adc_progress.aon","N","","","","",0,arm01_dev,1,meter_num,status

rem --- Position file

    read (ive02_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)

rem --- Loop starts

    while more

        ive02a_key$=key(ive02_dev,end=*break)
        if pos(firm_id$+batch_no$=ive02a_key$)<>1 then break
        read record (ive02_dev) ive02a$
        
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        
        if ive02a.trans_qty then 

rem --- Retrieve item
            
            find record (ivm01_dev,key=firm_id$+ive02a.item_id$,dom=remove_record) ivm01a$

rem --- Inventory initializations

            dim item$[3],refs$[20],refs[20]
            
            item$[2] = ive02a.item_id$
            if ls$="Y" then item$[3] = ive02a.lotser_no$
            refs$[0] = ive02a.trans_date$
            refs$[2] = ive02a.inv_xfer_no$
            account$ = ""
            refs[1] = ive02a.unit_cost

rem --- GL initializations

            if gl$="Y"
            
                when$ = ive02a.trans_date$
                memo$ = ive02a.item_id$ + " " + fnitem$(ivm01a.item_desc$, p[3], p[4], p[5])
                ref1$ = Translate!.getTranslation("AON_XFR_") + ive02a.inv_xfer_no$
                
rem --- From warehouse GL update

                find record (ivm02_dev,key=firm_id$+ive02a.warehouse_id$+ive02a.item_id$,dom=remove_record) ivm02a$
                ive02a.ext_cost = round(ive02a.trans_qty * ivm02a.unit_cost, 2)
                amount = -ive02a.ext_cost
                units  = -ive02a.trans_qty
                ref2$  = Translate!.getTranslation("AON_FR_WHSE_") + ive02a.warehouse_id$
                ref3$  = Translate!.getTranslation("AON_TO_WHSE_") + ive02a.warehouse_id_to$
                
                gosub update_gl
                
            endif
                
rem --- From warehouse inventory update

            item$[1]=ive02a.warehouse_id$
            refs$[4]=ive02a.warehouse_id_to$
            refs$[7]=account$
            action$="TO"
            refs[0]=-ive02a.trans_qty
            
            gosub update_inventory

rem --- To warehouse GL update

            if gl$="Y"
       
                find record (ivm02_dev,key=firm_id$+ive02a.warehouse_id_to$+ive02a.item_id$,dom=remove_record) ivm02a$
                amount = ive02a.ext_cost
                units  = ive02a.trans_qty
                ref3$  = Translate!.getTranslation("AON_FR_WHSE_") + ive02a.warehouse_id$
                ref2$  = Translate!.getTranslation("AON_TO_WHSE_") + ive02a.warehouse_id_to$
                
                gosub update_gl
                
            endif

rem --- To warehouse inventory update

            item$[1]=ive02a.warehouse_id_to$
            refs$[4]=ive02a.warehouse_id$
            refs$[7]=account$
            action$="TI"
            refs[0]=ive02a.trans_qty
            
            gosub update_inventory
            
        endif
        
remove_record: rem --- Remove record

        remove (ive02_dev,key=ive02a.firm_id$+ive02a.warehouse_id$+ive02a.trans_date$+
:           ive02a.warehouse_id_to$+ive02a.item_id$+ive02a.lotser_no$,dom=*next)

    wend

rem --- All done

    rem --- For reasons I don't quite understand, transfer register creates glw-11 (which is fine),
    rem --- but here in the update we aren't calling glc_update to forward glw-11 to glt-04.
    rem --- We're calling glc_glpost again to write directly to glt-04,
    rem --- so need to clearpartial on glw-11 (to make up for the fact that glc_update would've removed the glw-11 recs).

    rem --- Clear trans for this firm/process/batch from glw-11 work file (if not batching, batch_no$ is zero, and will clear all recs this firm/process)
    if gl$="Y"
        rec_pfx$=firm_id$+process_id$+batch_no$
        call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
    endif


    if gl$="Y" then call pgmdir$+"glc_ctlupdate.aon",ignore_status
    if gl$="Y" then call pgmdir$+"glc_ctldelete.aon",ignore_status    
    call pgmdir$+"adc_batchdelete.aon",ignore_status
    goto std_exit

update_gl: rem --- Update GL

    account$ = ivm01a.gl_inv_acct$
    find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=missing_dist_code) arm10d$
    account$ = arm10d.gl_inv_acct$
    
missing_dist_code:

    amount=round(amount,2)
    gosub glpost
    
return

update_inventory: rem --- Update Inventory

    call pgmdir$+"ivc_itemupdt.aon",action$,files[all],ivs01a$,item$[all],refs$[all],refs[all],rd_table_chans$[all],ignore_status
    
return

glpost: rem --- Standard G/L Posting Routine

    if gl$="Y"
        call pgmdir$+"glc_glpost.aon",glm01_dev,glt04_dev,unused,account$,when$,ref1$,ref2$,ref3$,memo$,amount,units,ignore_status
    endif   

return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    
return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"U","",rd_table_chans$[all],lock_status$
    endif
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
