rem --- Inventory Stock Movement Report
rem --- Program ivr_stkmovemt_o1 v8.0.0 16Jul2007 (ivr_cb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:54:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]
    headings=7
    when$=sysinfo.system_date$
    clock$=""
    h9$=""
    done=0
    dim headings$[headings],prod_tot[5],whse_tot[5],grand_tot[5]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    width=132
    page=0
    product=0
    warehouse=0
    report=0
    dim channs[3],period$[1]
    channs[3]=ivm02_dev
    channs[2]=ivm12_dev
    day_of_mth=num(when$(7,2))
    period$[0]=year$+period$
    period$[1]=year$+period$
    more=1
    recs=0
    total_recs=0

rem --- Initialize HEADINGS$

    dim headings$[headings+1]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_WAREHOUSE")
    headings$[1]=headings$[1]+Translate!.getTranslation("AON__FOR_PERIOD_")+period$+" "+year$+" "+per_name$[num(period$)]
    headings$[3]="[HEADER]"   
    if begitem$="" headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if begprod$="" headings$[5]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[5]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    if type$=""    headings$[6]=Translate!.getTranslation("AON_ALL_ITEM_TYPES") else headings$[6]=Translate!.getTranslation("AON_ITEM_TYPE:_")+type$
    headings$[7]=Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_ITEMS")+" = "+inactive$

rem --- Column Heading

    dim columns$[9,10]
    columns=10
    columns$[0,0]=Translate!.getTranslation("AON_ITEM^DESCRIPTION"),      columns$[0,1]="C",columns$[0,2]="20"         
    columns$[1,0]="UM",                    columns$[1,1]="C",columns$[1,2]="5"
    columns$[2,0]=Translate!.getTranslation("AON_DATE_OF^LAST_ISSUE"),    columns$[2,1]="N",columns$[2,2]="8"
    columns$[3,0]=Translate!.getTranslation("AON_AVG_PERIOD^USAGE"),      columns$[3,1]="N",columns$[3,2]=str(m2+3),columns$[3,3]=m2$
    columns$[4,0]=Translate!.getTranslation("AON_ANNUAL^USAGE"),          columns$[4,1]="N",columns$[4,2]=str(m2+3),columns$[4,3]=m2$
    columns$[5,0]=Translate!.getTranslation("AON_EST"),                   columns$[5,1]="C",columns$[5,2]="3"
    columns$[6,0]=Translate!.getTranslation("AON_PERIOD^USAGE"),          columns$[6,1]="N",columns$[6,2]=str(m2+3),columns$[6,3]=m2$
    columns$[7,0]=Translate!.getTranslation("AON_PRIOR^USAGE"),           columns$[7,1]="N",columns$[7,2]=str(m2+3),columns$[7,3]=m2$
    columns$[8,0]=Translate!.getTranslation("AON_PERIOD^RECEIPTS"),       columns$[8,1]="N",columns$[8,2]=str(m2+3),columns$[8,3]=m2$
    columns$[9,0]=Translate!.getTranslation("AON_PERIOD^ADJUST"),         columns$[9,1]="N",columns$[9,2]=str(m2+3),columns$[9,3]=m2$
    if subtotals$="Y" then
        columns$[3,10]="T"
        columns$[4,10]="T"
        columns$[6,10]="T"
        columns$[7,10]="T"
        columns$[8,10]="T"
        columns$[9,10]="T"
    endif

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Position files

    call pgmdir$+"adc_progress.aon","N","IVM_ITEMWHSE","","","",0,ivm02_dev,1,meter_num,status

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ivm_itemwhse.firm_id, ivm_itemwhse.item_id, ivm_itemwhse.warehouse_id, "
    sql_prep$=sql_prep$+"       ivm_itemmast.product_type, ivm_itemmast.item_type "
    sql_prep$=sql_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"    ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id=ivm_itemmast.firm_id "

    where_clause$="WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
    if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND "
    if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    where_clause$=where_clause$+" ORDER BY ivm_itemwhse.warehouse_id,ivm_itemmast.product_type "
    sql_prep$=sql_prep$+where_clause$

    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read

    while more
        read_tpl$=sqlfetch(sql_chan,err=*break) 
        product$=read_tpl.product_type$
        item$=read_tpl.item_id$
        whse$=read_tpl.warehouse_id$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if whse$<>t0$ gosub breakwhse
        if product$<>t1$ gosub breakprod

    rem --- Retrieve item

        dim item$[2],whse$[2],whse[20],activity[12]
        ivm01a_key$=firm_id$+item$
        ivm02a_key$=firm_id$+whse$+item$
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        if type$<>"" and ivm01a.item_type$<>type$ then continue
        rem -- Check for inactive item
        if inactive$="Y" and ivm01a.item_inactive$="Y" then continue
        item$[0]=firm_id$
        item$[2]=item$
        item$[1]=whse$,action$=""
        find record (ivm02_dev,key=ivm02a_key$,knum="PRIMARY",dom=*continue) ivm02a$
        call pgmdir$+"ivc_whseinfo.aon",action$,ivchannels[all],item$[all],whse$[all],whse[all],value,rd_table_chans$[all],whseinfo_tpls$[all],status
        call pgmdir$+"ivc_usage.aon","W",ivchannels[all],item$[all],factors[all],day_of_mth,period$+year$,ivs01a.current_per$+ivs01a.current_year$,g[0],p[1],usage,estimated,flag$,usage_tpls$[all],status
        if flag$<>"" usage=estimated
        avg_usage=usage/g[0]
        action$=""
        call pgmdir$+"ivc_whseact.aon",action$,channs[all],item$[all],period$[all],activity[all],status
        cur_usage=activity[3]+activity[4]-activity[8]
        prior_usage=usage-cur_usage
        cur_recpts=activity[1]+activity[2]
        cur_adj=activity[5]+activity[6]+activity[7]

    rem --- Print detail line

        issued$=""
        last_issue$=fnl$(ivm02a.lstsal_date$,ivm02a.lstiss_date$) 
        if num(last_issue$(1,4))>0 if last_issue$(5,2)="00" last_issue$(5,4)="0101"
        if cvs(last_issue$,2)<>"" issued$=fndate$(last_issue$)

        item_desc$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        if h9$<>"" gosub prodhead
        OutVect!.addItem(ivm01a_key.item_id$)
        OutVect!.addItem(ivm01a.unit_of_sale$)
        OutVect!.addItem(issued$)
        OutVect!.addItem(str(avg_usage))
        OutVect!.addItem(str(usage))
        OutVect!.addItem(flag$)
        OutVect!.addItem(str(cur_usage))
        OutVect!.addItem(str(prior_usage))
        OutVect!.addItem(str(cur_recpts))
        OutVect!.addItem(str(cur_adj))
        OutVect!.addItem("   "+item_desc$)
        xwk=fnblank(columns-1)
        recs=recs+1

    rem --- Accumulate totals

        prod_tot[0]=prod_tot[0]+avg_usage
        prod_tot[1]=prod_tot[1]+usage
        prod_tot[2]=prod_tot[2]+cur_usage
        prod_tot[3]=prod_tot[3]+prior_usage
        prod_tot[4]=prod_tot[4]+cur_recpts
        prod_tot[5]=prod_tot[5]+cur_adj

    wend

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub breakwhse
    if subtotals$<>"Y" then goto std_exit

    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns)))
    OutVect!.addItem(Translate!.getTranslation("AON____TOTAL_FOR_REPORT_"))
    xwk=fnblank(columns-8)
    OutVect!.addItem(str(grand_tot[0]))
    OutVect!.addItem(str(grand_tot[1]))
    OutVect!.addItem("")
    OutVect!.addItem(str(grand_tot[2]))
    OutVect!.addItem(str(grand_tot[3]))
    OutVect!.addItem(str(grand_tot[4]))
    OutVect!.addItem(str(grand_tot[5]))

    goto std_exit

prodhead: rem --- Product subheading

    xwk=fnblank(columns*2)
    OutVect!.addItem(h9$)
    xwk=fnblank(columns-1)
    xwk=fnblank(columns)
    h9$=""
    return

breakwhse: rem --- Warehouse Break

    if t0$<>"" and subtotals$="Y" then
        gosub breakprod   
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem(Translate!.getTranslation("AON____TOTAL_FOR_WAREHOUSE_")+t0$)
        xwk=fnblank(columns-8)
        OutVect!.addItem(str(whse_tot[0]))
        OutVect!.addItem(str(whse_tot[1]))
        OutVect!.addItem("")
        OutVect!.addItem(str(whse_tot[2]))
        OutVect!.addItem(str(whse_tot[3]))
        OutVect!.addItem(str(whse_tot[4]))
        OutVect!.addItem(str(whse_tot[5]))
        xwk=fnblank(columns)
    endif

    if done return
    dim whse_tot[5]
    let t0$=whse$, ivm10c.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)"),warehouse=0
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    let x$=Translate!.getTranslation("AON_WAREHOUSE_")+t0$+" "+cvs(ivm10c.short_name$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)
    return

breakprod: rem --- Product break

    if t1$<>"" and subtotals$="Y"then
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem(Translate!.getTranslation("AON____TOTAL_FOR_PRODUCT_")+t1$)
        xwk=fnblank(columns-8)
        OutVect!.addItem(str(prod_tot[0]))
        OutVect!.addItem(str(prod_tot[1]))
        OutVect!.addItem("")
        OutVect!.addItem(str(prod_tot[2]))
        OutVect!.addItem(str(prod_tot[3]))
        OutVect!.addItem(str(prod_tot[4]))
        OutVect!.addItem(str(prod_tot[5]))
        for x=0 to 5
            let grand_tot[x]=grand_tot[x]+prod_tot[x],whse_tot[x]=whse_tot[x]+prod_tot[x]
        next x
    endif

    if done return
    dim prod_tot[5]
    let t1$=product$,ivm10a.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)"),product=0
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    let h9$=Translate!.getTranslation("AON_PRODUCT_TYPE_")+t1$+" "+ivm10a.code_desc$
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- Compare two dates
    def fnl$(q1$,q2$)
        if CVS(q1$,2)="" THEN LET q1$="zzzzzzzz"
        if CVS(q2$,2)="" THEN LET q2$="zzzzzzzz"
        q$=q1$
        if q2$>q1$ then q$=q2$
        if q$="zzzzzzzz" then q$="        "
        return q$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    OutVect!=null()
    goto std_exit    

    end
