rem --- Rebuild Inventory On-Order Quantities
rem --- Program ivx_ea v8.0.0 09Jul2007 (ivx_ea)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:55:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$
    
rem --- set rd_alias_id$, if needed, for DocOut Settings
    
    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif

rem --- Get user approval to proceed

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update
    

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivm-02",ids$[1]="IVM_ITEMWHSE",options$[1]="L"
    files$[2]="poe-12",ids$[2]="POE_PODET"
    files$[3]="ivs_params",ids$[3]="IVS_PARAMS"
    files$[4]="poe-04",ids$[4]="POE_RECHDR"
    files$[5]="poe-14",ids$[5]="POE_RECDET"
    files$[6]="poe-02",ids$[6]="POE_POHDR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit_no_update
    
    ivm02_dev=channels[1]
    poe12_dev=channels[2]
    ivs01a_dev=channels[3]
    poe04_dev=channels[4]
    poe14_dev=channels[5]
    poe02_dev=channels[6]
    
rem --- Dimension string templates

    dim ivm02a$:templates$[1],poe12a$:templates$[2],ivs01a$:templates$[3]
    dim poe04a$:templates$[4],poe14a$:templates$[5],poe02a$:templates$[6]

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Parameters

    dim p[1],info$[20]
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    call pgmdir$+"adc_application.aon","PO",info$[all]
    po$=info$[20]
    call pgmdir$+"adc_application.aon","SF",info$[all]
    sf$=info$[20]
    
    if po$<>"Y" and sf$<>"Y"
        msg_id$="IV_REBUILD_OO"
        gosub disp_message
        goto std_exit_no_update
    endif

rem --- Open Shop Floor table if SF is installed

	if sf$="Y"
		files=1,begfile=1,endfile=files
		dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
		files$[1]="sfe-01",ids$[1]="SFE_WOMASTR" 
		call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:   	ids$[all],templates$[all],channels[all],batch,status
		sfe01_dev=channels[1]
		dim sfe01a$:templates$[1]
	endif

rem --- Initializations

        precision num(ivs01a.precision$)
        more=1

rem --- Position warehouse file

        x$=Translate!.getTranslation("AON_CLEARING_CURRENT_ON-ORDER_QUANTITIES")
        rem x=3+p[0]
		file_name$="IVM_ITEMWHSE"
        gosub Update_Screen
        read (ivm02_dev,key=firm_id$,dom=*next)

rem --- Clear ivm-02 On Order
        while more
            ivm02a_key$=key(ivm02_dev,end=*break)
            if pos(firm_id$=ivm02a_key$)<>1 break
			total_recs=total_recs+1
            if mod(total_recs,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","",ivm02a.warehouse_id$+" "+ivm02a.item_id$,0,0,1,meter_num,status
            extract record (ivm02_dev,key=ivm02a_key$) ivm02a$
            ivm02a.qty_on_order=0
            write record (ivm02_dev) ivm02a$
        wend
		call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
		
rem --- Purchase Orders

        if po$="Y" then
            x$=Translate!.getTranslation("AON_PURCHASE_ORDER_ON-ORDER_QUANTITIES")
            rem x=3+p[0]
			file_name$="POE_PODET"
            gosub Update_Screen
            read (poe12_dev,key=firm_id$,knum="ITEM_PO",dom=*next)
        
rem --- Read next PO record; use knum=ITEM_PO, po's by item
            while more
                read record(poe12_dev,end=*break)poe12a$
                if pos(firm_id$=poe12a$)<>1 break
                if cvs(poe12a.item_id$,3)="" then continue
				total_recs=total_recs+1
				if mod(total_recs,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","",poe12a.item_id$,0,poe12_dev,1,meter_num,status

                rem --- Skip if this is a drop ship item
                findrecord(poe02_dev,key=firm_id$+poe12a.po_no$,dom=*continue)poe02a$
                if poe02a.dropship$="Y" then continue

                rem --- Update the qty_on_order for this warehouse and item
                ivm02a_key$=firm_id$+poe12a.warehouse_id$+poe12a.item_id$
                extract record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
                ivm02a.qty_on_order=ivm02a.qty_on_order+((poe12a.qty_ordered-poe12a.qty_received)*poe12a.conv_factor)
                ivm02a$=field(ivm02a$)
                write record (ivm02_dev) ivm02a$
            wend
			call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

            rem --- Include non-drop ship items added in PO Receipt Entry that aren't in the original PO
            file_name$="POE_PODET"
            gosub Update_Screen
            read (poe14_dev,key=firm_id$,knum="ITEM_PO",dom=*next)
            while 1
                read record(poe14_dev,end=*break)poe14a$
                if pos(firm_id$=poe14a$)<>1 break
                if cvs(poe14a.item_id$,3)="" then continue
                total_recs=total_recs+1
                if mod(total_recs,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","",poe14a.item_id$,0,poe14_dev,1,meter_num,status

                rem --- Skip if this is a drop ship item
                findrecord(poe04_dev,key=firm_id$+poe14a.receiver_no$,dom=*continue)poe04a$
                if poe04a.dropship$="Y" then continue

                rem --- Skip if this item was in the original PO
                podet_exists=0
                readrecord(poe12_dev,key=firm_id$+poe14a.po_no$+poe14a.internal_seq_no$,knum="PRIMARY",dom=*next); podet_exists=1
                if podet_exists then continue

                rem --- Update the qty_on_order for this warehouse and item
                ivm02a_key$=firm_id$+poe14a.warehouse_id$+poe14a.item_id$
                extract record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
                ivm02a.qty_on_order=ivm02a.qty_on_order+((poe14a.qty_ordered-poe14a.qty_prev_rec)*poe14a.conv_factor)
                ivm02a$=field(ivm02a$)
                write record (ivm02_dev) ivm02a$
            wend
            call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        endif
        
rem --- Work Orders

        if sf$="Y" then
            x$=Translate!.getTranslation("AON_WORK_ORDER_ON-ORDER_QUANTITIES")
            rem x=7
			file_name$="SFE_WOMASTR"
            gosub Update_Screen
            read (sfe01_dev,key=firm_id$,dom=*next)

rem --- Read next work order
            while more
                sfe01a_key$=key(sfe01_dev,end=*break)
                if pos(firm_id$=sfe01a_key$)<>1 break
				total_recs=total_recs+1
                if mod(total_recs,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","",sfe01a.wo_no$,0,sfe01_dev,1,meter_num,status
                read record (sfe01_dev) sfe01a$

rem --- Is it open?

                if sfe01a.wo_category$<>"I" continue
                if pos(sfe01a.wo_status$="CPQ")>0 continue
                if sfe01a.sch_prod_qty<=sfe01a.qty_cls_todt continue

rem --- Update warehouse

                ivm02a_key$=sfe01a.firm_id$+sfe01a.warehouse_id$+sfe01a.item_id$
                extract record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
                ivm02a.qty_on_order=ivm02a.qty_on_order+(sfe01a.sch_prod_qty-sfe01a.qty_cls_todt)
                ivm02a$=field(ivm02a$)                
                write record (ivm02_dev) ivm02a$
            wend
			call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        endif
        
done: rem --- All done

        goto std_exit
    

Update_Screen: rem --- Update screen

    call pgmdir$+"adc_progress.aon","N",file_name$,"","","",0,0,1,meter_num,status
	total_recs=0
    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return        

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
