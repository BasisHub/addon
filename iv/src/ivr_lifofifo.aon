rem ivr - LIFO/FIFO Tier Report
rem Program ivr_lifofifo.aon v8.0.0 23Oct2006 (ivr_xb)
rem Created by adx_codeport.bbx v1.1.1 (10/23/2006 01:01:25)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+


    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    sys_date$=sysinfo.system_date$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$

rem --- Open/Lock files

    files=6,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    if status goto std_exit
    files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ivm-04",ids$[3]="IVM_ITEMTIER"
    files$[4]="ivc_whsecode",ids$[4]="IVC_WHSECODE"
    files$[5]="ivc_prodcode",ids$[5]="IVC_PRODCODE"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivs01_dev=channels[1]
    ivm01_dev=channels[2]
    ivm04_dev=channels[3]
    ivm10c_dev=channels[4]
    ivm10a_dev=channels[5]

rem --- Dimension string templates

    dim ivs01a$:templates$[1],ivm01a$:templates$[2],ivm04a$:templates$[3],
:       ivm10c$:templates$[4],ivm10a$:templates$[5]

rem --- Retrieve key template

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMTIER","PRIMARY",ivm04a_key_tpl$,table_chans$[all],status$

    dim ivm04a_key$:ivm04a_key_tpl$

rem --- Assign form input values to local variables
   
    begdate$=option!.getOptionData("pick_date_1")
    enddate$=option!.getOptionData("pick_date_2")
    begwhse$=option!.getOptionData("warehouse_id_1")
    endwhse$=option!.getOptionData("warehouse_id_2")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")
    begitem$=option!.getOptionData("item_id_1")
    enditem$=option!.getOptionData("item_id_2")
    type$=option!.getOptionData("item_type")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    if ivs01a.lifofifo$="N" then 
rem --- LIFO/FIFO not set in parameter record
        call pgmdir$+"ivc_warnings.aon","F",status
        goto std_exit
    endif
    dim p[5]
    P[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)
    call pgmdir$+"adc_getmask.aon","","GL","A",imask$,m1$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    if len(m2$)<15 then m2$=fill(15-len(m2$),"#")+m2$
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15
    call pgmdir$+"adc_sizemask.aon",m3$,m3,10,15

    dim headings$[5],product[1],report[1],item[1],total[1],warehouse[1],types$[10]
 
    headings$[0]=firm_name$
    headings$[1]=task_desc$
    clock$="",h9$=""
    width=132
    more=1
    source$="BBBOTAOPRCTIWOIAIIIRPH"
    types$[0]="Conv",types$[1]="BOM",types$[2]="Tier",types$[3]="Sale"
    types$[4]="P.O.",types$[5]="Xfer",types$[6]="W.O.",types$[7]="Adj"
    types$[8]="Iss",types$[9]="Rec",types$[10]="Phys"
    
rem --- Headings

    if begitem$="" headings$[2]="From Item: First" else headings$[2]="From Item: "+begitem$
    if enditem$="" headings$[2]=headings$[2]+" -- To Item: Last" else headings$[2]=headings$[2]+" -- To Item: "+enditem$
    if begprod$="" headings$[3]="From Product: First" else headings$[3]="From Product: "+begprod$                
    if endprod$="" headings$[3]=headings$[3]+" -- To Product: Last" else headings$[3]=headings$[3]+" -- To Product: "+endprod$
    if type$=""    headings$[4]="All Item Types" else headings$[4]="Item Type: "+type$
    headings$[5]="[HEADER]"

rem --- column headings
    dim columns$[9,10]
    columns=10
            columns$[0,0]="Item/Description",   columns$[0,1]="C",columns$[0,2]="25"
            columns$[1,0]="UM",                 columns$[1,1]="C",columns$[1,2]="5"
            columns$[2,0]="Tier",               columns$[2,1]="C",columns$[2,2]="5",columns$[3,3]="##0"
            columns$[3,0]="Date",               columns$[3,1]="C",columns$[3,2]="8"
            columns$[4,0]="Type",               columns$[4,1]="C",columns$[4,2]="5"
            columns$[5,0]="Reference",          columns$[5,1]="C",columns$[5,2]="12"
            columns$[6,0]="Seq",                columns$[6,1]="C",columns$[6,2]="5"
            columns$[7,0]="Quantity",           columns$[7,1]="N",columns$[7,2]="12",columns$[7,3]=m2$,columns$[7,10]="T"
            columns$[8,0]="Unit Cost",          columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m3$
            columns$[9,0]="Extension",          columns$[9,1]="N",columns$[9,2]="12",columns$[9,3]=m1$,columns$[9,10]="T"

rem --- Position files

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",7+p[0],ivm01_dev,1,0,ignore_status

rem --- Loop Starting

    sql_prep$="select ivm_itemwhse.firm_id, ivm_itemwhse.item_id,"
    sql_prep$=sql_prep$+"ivm_itemwhse.warehouse_id, ivm_itemmast.product_type,"
    sql_prep$=sql_prep$+"ivm_itemmast.item_type "
    sql_prep$=sql_prep$+"FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
    where_clause$="WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
    if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"'"
    if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    where_clause$=where_clause$+" order by ivm_itemwhse.warehouse_id,ivm_itemmast.product_type "
    if where_clause$<>"" sql_prep$=sql_prep$+where_clause$

    sql_chan=sqlunt 
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read

    while more
        read_tpl$=sqlfetch(sql_chan,err=*break)      
        whse$=read_tpl.warehouse_id$
        product$=read_tpl.product_type$
        item$=read_tpl.item_id$

        call pgmdir$+"adc_progress.aon","S","","","",whse$+" "+product$+" "+item$(1,p[0]),0,0,1,meter_num,status
        if whse$<>t0$ gosub whse_break
        if product$<>t1$ gosub product_break

rem --- Retrieve item

        find record (ivm01_dev,key=firm_id$+item$,dom=*continue) ivm01a$
        if type$<>"" and ivm01a.item_type$<>type$ continue
        description$=cvs(ivm01a.item_desc$,3)
        um$=ivm01a.unit_of_sale$

rem --- Position file for reading LIFO/FIFO records

        dim item[1]
        tier=0
        read (ivm04_dev,key=firm_id$+whse$+item$+begdate$,dom=*next)
        item_id$=cvs(item$,2)

rem --- Read next LIFO/FIFO record

        while more
            ivm04a_key$=key(ivm04_dev,end=*break)
            if pos(firm_id$+whse$+item$=ivm04a_key$)<>1 break
            read record (ivm04_dev) ivm04a$
            if enddate$<>"" and ivm04a.receipt_date$>enddate$ break
            if ivm04a.qty_on_hand=0 then break

rem --- Format print fields

            tier=tier+1
            value=ivm04a.qty_on_hand*ivm04a.unit_cost
            x=pos(ivm04a.trans_source$=source$,2)
            trans$=ivm04a.trans_source$
            if x>0 trans$=types$[(x-1)/2]
            
rem --- Print detail line

            if h9$<>"" then 
                OutVect!.addItem(h9$)
                h9$=""
                xwk=fnblank(columns-1)
                xwk=fnblank(columns)
            endif
            OutVect!.addItem(item_id$+"   "+description$)
            OutVect!.addItem(um$)
            OutVect!.addItem(str(tier:"##0"))
            OutVect!.addItem(fndate$(ivm04a.receipt_date$))
            OutVect!.addItem(trans$)
            OutVect!.addItem(ivm04a.trans_ref$)
            OutVect!.addItem(ivm04a.sequence_no$)
            OutVect!.addItem(str(ivm04a.qty_on_hand))
            OutVect!.addItem(str(ivm04a.unit_cost))
            OutVect!.addItem(str(value))
            item_id$="",um$="",description$=""

rem --- Accumulate totals

            item[0]=item[0]+ivm04a.qty_on_hand
            item[1]=item[1]+value
            report[1]=report[1]+value
            product[0]=product[0]+1
            product[1]=product[1]+value
            warehouse[0]=warehouse[0]+1
            warehouse[1]=warehouse[1]+value

rem --- Loop back for next tier record

        wend

rem --- Print item totals

        if tier=0 continue
        if tier<2
            OutVect!.addItem(description$)
            xwk=fnblank(columns-1)
        endif
        if tier=1 continue
        total$="Total For Item "+ivm01a.item_id$
        total[0]=item[0]
        total[1]=item[1]
        gosub print_total

rem --- Loop back for next record

    wend

rem --- All done

    done=1
    gosub whse_break
    total$="Total For Report"
    total[1]=report[1]
    gosub print_total
    goto std_exit

whse_break: rem --- Warehouse Break

    if t0$<>"" then
        gosub product_break
        total$="Total For Warehouse "+t0$
        total[1]=warehouse[1]
        if warehouse[0]>0 gosub print_total
    endif
    if done then return
    dim warehouse[1]
    t0$=whse$
    ivm10c.short_name$="(Not on File)"
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    let x$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)
    return

product_break: rem --- Product break

    if t1$<>"" then
        let total$="Total For Product Type "+t1$,total[1]=product[1]
        if product[0]>0 gosub print_total
    endif
    if done then return
    dim product[1]
    let t1$=product$,ivm10a.code_desc$="(Not on File)"
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    let h9$="Product Type "+t1$+" "+ivm10a.code_desc$
    return

print_total: rem --- Print total line

    total$=cvs(total$,2)
    TotVect!.addItem(str(OutVect!.size()/(columns)))
    OutVect!.addItem(fill(10)+total$)
    xwk=fnblank(columns-4)
    OutVect!.addItem(str(total[1]))
    OutVect!.addItem("")
    OutVect!.addItem(str(total[1]))
    xwk=fnblank(columns)
    total[0]=0,total[1]=0
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_data$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Find length of field
    def fnfldlen(q$,q1$)
        wkq$=fattr(q$,q1$)
        wkq=dec(wkq$(10,2))
    return wkq

rem --- Format inventory item description

    def fnitem$(q$)=cvs(q$,32)
rem --- old format using params: def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
   
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
