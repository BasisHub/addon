rem --- Physical Inventory Cancel Update (ive_qa/ivc_ic)
rem --- Program ivu_physinvselect.aon v8.0.0 28Jan2009

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
	
rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)
	
rem --- Use for type checking

    use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Run Update?

    msg_id$="IV_READY_TO_CANCEL"
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Assign form input values to local variables

    declare Option option!
    declare BBjObjectTable ot!

    whse$   = option!.getOptionData("WAREHOUSE_ID")	

    ot! = BBjAPI().getObjectTable()
    selected_all = num( ot!.get("IVE_PHYSICALCAN.SELECTED_ALL") )

rem --- Close Physcode file, it's locked by the Options Entry code

    call sypdir$ + "bac_open_table.bbj",
:		"IBC_PHYSCODE",
:		"C",
:		rd_table_chans$[all],
:		open_chan,
:		table_tpl$,
:		proc_mssg$	

rem --- Open all files

    num_files = 4
    open_beg  = 1
    open_end  = num_files

    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]="IVS_PARAMS",   open_opts$[1]="OTA"
    open_tables$[2]="IVE_PHYSICAL", open_opts$[2]="OTA"
    open_tables$[3]="IVC_PHYSCODE", open_opts$[3]="OTAL"
    open_tables$[4]="IVM_ITEMWHSE", open_opts$[4]="OTA"

    gosub open_tables

    params_dev   = num( open_chans$[1] )
    physical_dev = num( open_chans$[2] )
    physcode_dev = num( open_chans$[3] )
    itemwhse_dev = num( open_chans$[4] )

    dim params_rec$:open_tpls$[1]
    dim physical_rec$:open_tpls$[2]
    dim physcode_rec$:open_tpls$[3]
    dim itemwhse_rec$:open_tpls$[4]

rem --- Parameters

    find record (params_dev, key=firm_id$+"IV00", dom=std_missing_params) params_rec$	

rem --- Initializations

    precision num( params_rec.precision$ )
    more = 1

    call pgmdir$+"adc_progress.aon","N","","","","",0,itemwhse_dev,1,0,ignore_status

rem --- Setup SQL to read through IVM_ITEMWHSE with selected cycle codes

    sql_prep$ = ""
    sql_prep$ = sql_prep$ + "SELECT warehouse_id, pi_cyclecode, item_id "
    sql_prep$ = sql_prep$ + "  FROM ivm_itemwhse "
    where_clause$ =         " WHERE firm_id = '" + firm_id$ + "' AND warehouse_id = '" + whse$ +"' "

    read (physcode_dev, key=firm_id$+whse$, dom=*next)
    first_time = 1

rem --- Loop through IVC_PHYSCODE to build the rest of the WHERE clause
    if selected_all = 0 then

        while more

            read record (physcode_dev, end=*break) physcode_rec$
            if physcode_rec.firm_id$ <> firm_id$ or physcode_rec.warehouse_id$ <> whse$ then break

rem         Pending action of Select for Freeze
            if physcode_rec.pending_action$ = "5" then
                if first_time then
rem                 Start WHERE clause for cycles
                    where_clause$ = where_clause$ + "AND pi_cyclecode IN ('" + physcode_rec.pi_cyclecode$ + "', "
					first_time = 0
                else
rem                 Continue WHERE clause for cycles
                    where_clause$ = where_clause$ + "'" + physcode_rec.pi_cyclecode$ + "', "
                endif
            endif

        wend

rem     Finish WHERE clause if necessary
        if where_clause$(len(where_clause$)-1, 2) = ", " then
            where_clause$ = where_clause$(1, len(where_clause$)-2) + ")"
        endif

    endif

    sql_prep$ = sql_prep$ + where_clause$
    sql_prep$ = sql_prep$ + " ORDER BY warehouse_id, pi_cyclecode, item_id "

    sql_chan=sqlunt
    sqlopen(sql_chan)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim sql_rec$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Get next SQL record

	prev_cycle$ = ""

    while more

        sql_rec$=sqlfetch(sql_chan,err=*break)
        whse_id$    = sql_rec.warehouse_id$
        item_id$    = sql_rec.item_id$
		cycle_code$ = sql_rec.pi_cyclecode$

        call pgmdir$+"adc_progress.aon","S","","",""," ",0,0,1,meter_num,ignore_status

rem --- Update warehouse record

        extract record (itemwhse_dev, key=firm_id$+whse_id$+item_id$) itemwhse_rec$
        itemwhse_rec.select_phys$ = "N"
		location$ = itemwhse_rec.location$
		itemwhse_rec$ = field(itemwhse_rec$)
        write record (itemwhse_dev) itemwhse_rec$

rem --- Remove Physical records

		read (physical_dev, key=firm_id$+whse_id$+cycle_code$+location$+item_id$, dir=0, dom=*next)
		
		while more
			physical_key$ = key(physical_dev, end=*break)
			if pos(firm_id$+whse_id$+cycle_code$+location$+item_id$ = physical_key$) <> 1 then break
			remove(physical_dev, key=physical_key$)
		wend

rem --- Update Physical Code file

		if cycle_code$ <> prev_cycle$ then 

			extract record (physcode_dev, key=firm_id$+whse_id$+cycle_code$, dom=*endif) physcode_rec$; rem Advisory Locking
			physcode_rec.phys_inv_sts$   = "0"
			physcode_rec.cutoff_date$    = ""
			physcode_rec.pending_action$ = "0"
			physcode_rec$ = field(physcode_rec$)
	        write record (physcode_dev) physcode_rec$
			
		endif
		
		prev_cycle$ = cycle_code$

    wend

rem --- All done

    call pgmdir$+"adc_progress.aon","D","","",""," ",0,0,1,0,ignore_status
    goto std_exit

open_tables: rem --- Open tables

    call sypdir$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        status=912
        goto std_exit_no_update
    endif

    return

disp_message:rem --- Display Message Dialog

    call sypdir$+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
