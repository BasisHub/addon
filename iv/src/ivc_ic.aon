rem --- Physical Inventory Entry Screen Processing
rem --- Program ivc_ic v8.0.0 20Dec2007 (ivc_ic)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/20/2007 04:23:40)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


            seterr std_error
            setesc std_error
            enter action$,channels[all],whse$,cutoff$,quantity$,fkey,status,my_context,throw$

rem --- Retrieve the program path

            pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

            sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
            dim sysinfo$:sysinfo_template$
            sysinfo$=stbl("+sysinfo",err=*next)
            milestone=num(stbl("+milestone",err=*next),err=*next)
            firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

            files=6,begfile=1,endfile=files
            dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
            files$[1]="ive-03",ids$[1]="IVE_PHYSICAL"
            files$[2]="ivm-02",ids$[2]="IVM_ITEMWHSE"
            files$[3]="ivc_whsecode",ids$[3]="IVC_WHSECODE"
            files$[4]="ivc_physcode",ids$[4]="IVC_PHYSCODE"
            files$[5]="ivs_params",ids$[5]="IVS_PARAMS"
            files$[6]="ivw-10",ids$[6]="IVW_PHYSICAL"
            call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
            if status goto std_exit
            ive03_dev=channels[1]
            ivm02_dev=channels[2]
            ivm10_dev=channels[3]
            ivm10p_dev=channels[4]
            ivs01a_dev=channels[5]
            ivw10_dev=channels[6]

rem --- Dimension string templates

            dim ive03a$:templates$[1],ivm02a$:templates$[2],ivm10a$:templates$[3],
:           ivm10p$:templates$[4],ivs01a$:templates$[5],ivw10a$:templates$[6]

rem --- Retrieve parameter records

            ivs01a_key$=firm_id$+"IV00"
            find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Open/Lock Files

            sys01_dev=channels[1]
            ivm10_dev=channels[2],ivw10_dev=channels[3]
            ivm02_dev=channels[4]
            ive03_dev=channels[5]

rem --- Parameters

            dim p[5]
            find record (sys01_dev,key="T"+fid(0),dom=std_missing_params) sys01t$
            firm_id$=f0$(16,2)
            n2$="IV"
            find record (sys01_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$


            p[0]=num(ivs01a.ITEM_NBR_LEN$)
            p[1]=num(ivs01a.PRECISION$),p[2]=num(ivs01a.LS_NBR_LEN$)
            p[3]=num(ivs01a.DESC_LEN$)
            p[4]=num(ivs01a.DESC_LEN$),p[5]=num(ivs01a.DESC_LEN$)

rem --- Initializations
    more=1
    Pos_EntryFile=0
    precision p[1]
    dim a0$(4),b0$(32),c0$(11),d0$(24),d1$(64),status$[5],message$[2]
    cutoff$=sysinfo.system_date$
    whse$=ivs01a.WAREHOUSE_ID$,l0=6,l9=21,l=l0,fkey=0,status=0
    ivw10a.FIRM_ID$=firm_id$
    status$[0]="Not Selected",status$[1]="Cycle Selected"
    status$[2]="Count Sheets Printed"
    status$[3]="Register Printed"
    status$[4]="Update In Progress"
    status$[5]="Cancel In Progress"
    h$=""
    c=14,quantity$="N"
    while more
        if action$="S" then let h$="Cutoff Date:",c=71
        if action$="P" then let h$="Print System Quantities:",c=78
        rem this loop is created to transfer control to the label:flow_control
   
          break

        Whse_ID: rem --- Warehouse ID

            if ivs01a.MULTI_WHSE$="Y" then 
                v4$="Enter A Valid Warehouse ID (<F3>-Lookup)"
                v0$="S"
                v1$="CE",v2$=whse$,v3$="",v0=2,v1=14,v2=3,i0=0,control_id=3000
                on v3 goto WarehouseID,Whse_ID,Whse_ID,Ware_ID,std_exit,WarehouseID,std_exit
        Ware_ID:
                call pgmdir$+"ivc_lk.bbx",3,v1,v2,v$
        WarehouseID:
                v$=v$+"  "
                v$=v$(1,2)
            else
                v$=whse$
            endif

            find record (ivm10_dev,key=firm_id$+"C"+v$,dom=Whse_ID) ivm10c$
            call pgmdir$+"syc_rs.bbx","",my_context,3000,ivm10c.WAREHOUSE_ID$,0,"",status; call pgmdir$+"syc_rs.bbx","",my_context,13000,ivm10c.SHORT_NAME$,0,"",status
            whse$=ivm10c.WAREHOUSE_ID$
        break

        while more
       
            Cutoff_Date: rem --- Cutoff Date

                if action$<>"S" then
                    break
                endif
                v4$="Enter The Cutoff Date For This Physical Inventory Selection"
                v0$="D"
                v1$="CE",v2$=cutoff$,v3$="",v0=3,v1=c,v2=3,control_id=3001
                rem gosub std_input
                on v3 goto C_Date,Cutoff_Date,Whse_ID,Cutoff_Date,std_exit,C_Date,std_exit
            C_Date:
                if cvs(v$,2)="" then
                    continue
                endif
                call pgmdir$+"syc_rs.bbx","",my_context,3001,fndate$(v$),0,"",status
                cutoff$=v$
                break
        wend
    rem goto flow_control
        break


        while more
            print_Qty: rem --- Print Quantities?

                if action$<>"P" then
                    break
                endif
                v4$="Should System On-Hand Quantities Be Printed For Each Item (Y/N)?"
                v0$="Y"
                v1$="C",v2$=quantity$,v3$="",v0=1,v1=c,v2=3,control_id=3002
                rem gosub std_input
                on v3 goto P_Qty,print_Qty,Whse_ID,print_Qty,std_exit,P_Qty,std_exit

            P_Qty:
                if pos(v$="YN")=0 then
                    continue
                endif
                call pgmdir$+"syc_rs.bbx","",my_context,3002,v$,0,"",status
                quantity$=v$
                break
        wend
    rem goto flow_control
        break

        Disp_ExtLine: rem --- Display any existing lines

            rem goto l11000
            call pgmdir$+"syc_dg.bbx",sysgui_dev,event$,event,sysfin$,sysfin,ui$,status

rem --- Position warehouse file

    rem dim c0$(11)
        first$=firm_id$+whse$
        if action$="S" then
            call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Selecting","",p[0],0,1,meter_num,status
            read (ivm02_dev,key=first$,dom=*next)
        else
            Pos_EntryFile=1
        Endif
        while more
            if Pos_EntryFile=0
                rem --- Select all cycles

                    ivm02a_key$=key(ivm02_dev,end=*break)
                    if pos(first$=ivm02a_key$)<>1 then
                        break
                    endif
                    read record (ivm02_dev) ivm02a$
                    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

                rem --- Check status

                    if ivm02a.CYCLE_CODE$<>ivm10p.CYCLE_CODE$ then
                        rem c0$(1)=firm_id$+"P"+whse$+d1$(11,2)
                        ivm10p.FIRM_ID$=firm_id$
                        ivm10p.RECORD_ID_P$="P"
                        ivm10p.WAREHOUSE_ID$=whse$(1,2)
                        ivm10p.CYCLE_CODE$=ivm02a.CYCLE_CODE$
                        ivm10p.PHYS_INV_STS$="0"
                        find record (ivm10_dev,key=ivm10p.FIRM_ID$+ivm10p.RECORD_ID_P$+ivm10p.WAREHOUSE_ID$+ivm10p.CYCLE_CODE$,dom=Write_Record) ivm10p$
                        if pos(ivm10p.PHYS_INV_STS$="12")=0 then
                            continue
                        endif
                    endif

                Write_Record: rem --- Write ivw-10 record

                    rem a0$(1)=firm_id$+d1$(11,2)
                    ivw10a.FIRM_ID$=firm_id$
                    ivw10a.CYCLE_CODE$=ivm02a.CYCLE_CODE$
                    write record (ivw10_dev,key=ivw10a.FIRM_ID$+ivw10a.CYCLE_CODE$) ivw10a$
                    continue
            endif
           wend
        rem --- Position entry file

            call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Selecting","",2,0,1,meter_num,status
            read (ive03_dev,key=first$,dom=*next)
            while more
                rem --- Read next entry record

                    ive03a_key$=key(ive03_dev,end=*break)
                    if pos(first$=ive03a_key$)<>1 then
                        break
                    endif
                    read (ive03_dev,key=ive03a.FIRM_ID$+ive03a.WAREHOUSE_ID$+ive03a.CYCLE_CODE$+$ff$,dom=*next)
                    call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
                    find record (ivm10_dev,key=firm_id$+"P"+ive03a.WAREHOUSE_ID$+ive03a.CYCLE_CODE$,dom=*continue) ivm10p$
                    if pos(ivm10p.PHYS_INV_STS$="45")>0 then
                        continue
                    endif

                rem --- Write work record

                    rem a0$(1)=firm_id$+k$(5,2)
                    ivw10a.FIRM_ID$=firm_id$
                    ivw10a.CYCLE_CODE$=ive03a.CYCLE_CODE$
                    write record (ivw10_dev,key=ivw10a.FIRM_ID$+ivw10a.CYCLE_CODE$) ivw10a$
            wend
            

rem --- All cycles selected

            if all$="Y" then call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
            call pgmdir$+"syc_dg.bbx",sysgui_dev,event$,event,sysfin$,sysfin,ui$,status
            if ui$="W" then goto Disp_ExtLine
            all$=""; goto Disp_ExtLine
    wend

    flow_control:
        switch v3
            case 0
            case 1
            case 3; let i0=i0+1; break
            case 2; if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1) fi; break
            case 4; let i0=i0_done; break
            case default; exitto done_v3
        swend
        on i0 goto Whse_ID,Cutoff_Date,print_Qty,done,done

    done: rem --- Correct?

        if !validate then 
                gosub display_fields
                v0$="S"
                v1$="KC",v2$="Y",v3$="",v4$="ITAC=Y",v0=6,v1=fnv(v4$),v2=22,control_id=i0-i0_done+1
                rem gosub std_input

            done_v3:
                on v3 goto done_test,done,done,done,std_exit,validate_input,std_exit,done

            done_test:
                on pos(v$="YN") goto flow_control,validate_input,do_nonkey1

            validate_input:
                validate=1
                old_control_id=0

            do_nonkey1:
                v3=0
                i0=i0_nonkey1-1
                goto flow_control
        else
                validate=0
        endif

    end_input: rem --- Return to caller

        goto Disp_ExtLine

    display_fields:

        find record (ivm10_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$
        call pgmdir$+"syc_rs.bbx","",my_context,3000,whse$,0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,13000,b0$(6,24),0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,3001,fndate$(cutoff$),0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,3002,quantity$,0,"",status
        return
        call pgmdir$+"syc_rs.bbx","",my_context,3000,"",0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,3001,"",0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,3002,"",0,"",status
        call pgmdir$+"syc_rs.bbx","",my_context,13000,"",0,"",status
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    exit
rem #endinclude std_exit.src

    end
