rem --- Zero Balance Inventory Report (Report Overlay)
rem --- Program ivr_zerobal_o1.aon v8.0.0 16Jul2007 (ivr_zb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:56:46)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

            seterr std_error
            setesc std_error

rem --- Document initializations

            OutVect!=bbjAPI().getSysGui().makeVector()
            HdrVect!=bbjAPI().getSysGui().makeVector()
            BrkVect!=bbjAPI().getSysGui().makeVector()
            rep_date$=date(0:"%Mz/%Dz/%Yd")
            rep_date_stamp$=date(0:"%Yd%Mz%Dz")
            rep_time$=date(0:"%hz:%mz %p")
            rep_time_stamp$=date(0:"%Hz%mz%sz")

rem   call "adc_printer.aon",printer_dev,message,pfdesc$,selectpr$,status

           

rem --- Init Data
            p9=p[3]+p[4]+p[5]
            if p9>132-10-m2-(4+p[0])-22 p9=132-10-m2-(4+p[0])-22
            headings=4
            h=0,l9=55
            width=132
            clock$=""
            dim desc$(p9),headings$[headings]
            h4$="All Below Safety Stock Items"
            if num(p9$)<>0 h4$=h4$+" Since "+fndate$(p9$)
            prod_range$=""
            if cvs(begprod$,2)="" and cvs(endprod$,2)="" goto Heading_Def
            prod_range$="Product Type: "
            if cvs(begprod$,2)<>"" prod_range$=prod_range$+begprod$ else prod_range$=prod_range$+"First"
            prod_range$=prod_range$+" thru "
            if cvs(endprod$,2)<>"" prod_range$=prod_range$+endprod$ else prod_range$=prod_range$+"Last"
Heading_Def:
            headings$[0]=n1$
            headings$[1]=n3$
            headings$[3]=h4$
            headings$[4]=prod_range$
            headings$[2]="[HEADER]"
            more=1

rem --column heading

          dim columns$[9,10]
          columns=9
               columns$[0,0]="Whs",                     columns$[0,1]="C",columns$[0,2]="10"
               columns$[1,0]="Item Code",               columns$[1,1]="C",columns$[1,2]="5"
               columns$[2,0]="Description",             columns$[2,1]="C",columns$[2,2]="15"
               columns$[3,0]="Prod Code",               columns$[3,1]="C",columns$[3,2]="3"
               columns$[4,0]="Cycle Code",              columns$[4,1]="C",columns$[4,2]="3"
               columns$[5,0]="Location",                columns$[5,1]="C",columns$[5,2]="5"
               columns$[6,0]="Buyer Code",              columns$[6,1]="C",columns$[6,2]="5"
               columns$[7,0]="Vendor",                  columns$[7,1]="C",columns$[7,2]="15",columns$[7,3]=m0$
               columns$[8,0]="Date Flagged",            columns$[8,1]="C",columns$[8,2]="8"
               columns$[9,0]="On Hand",                 columns$[9,1]="C",columns$[9,2]="10",columns$[9,3]=m2$

rem --- Background

          call pgmdir$+"adc_progress.aon","N","","","","",0,ivm03_dev,1,meter_num,status

rem --- Init Read
          if sequence$="I" read (ivt05_dev,key=firm_id$,dom=Item_Sort)
          read (ivm03_dev,key=firm_id$+sort$,dom=*next)

Main_Read: rem --- Main Read
          ivm03_key$=key(ivm03_dev,end=Done)
          if pos(firm_id$+sort$=ivm03_key$)<>1 goto Done
          if sequence$="P" if begprod$<>"" if ivm03_key.product_type$<begprod$ read (ivm03_dev,key=ivm03_key$(1,5)+begprod$,dom=Main_Read)
          if sequence$="P" if endprod$<>"" if ivm03_key.product_type$>endprod$ read (ivm03_dev,key=ivm03_key$(1,5)+$FF$,dom=Main_Read)
          read (ivm03_dev)
          ivt05a_key$=firm_id$+ivm03_key.warehouse_id$+ivm03_key.item_id$
          goto Flow_Main_Read

Item_Sort: rem --- ivt-05 sort - whse/item
         ivt05a_key$=key(ivt05_dev,end=Done)
         if pos(firm_id$=ivt05a_key$)<>1 goto Done

Flow_Main_Read:
         read record (ivt05_dev,key=ivt05a_key$,dom=Next_Record) ivt05a$
         if num(p9$)<>0 if ivt05a.writtn_date$<p9$ goto Next_Record
         if ivt05a_key.warehouse_id$<>t0$ gosub WhseBreak
         if sequence$="P" if ivm03_key.product_type$<>t1$ gosub SubTotal

rem --- Additional Reads
        call pgmdir$+"adc_progress.aon","S","","","",ivt05a.warehouse_id$+" "+ivt05a_key.item_id$,0,0,1,0,ignore_status

        find record (ivm02_dev,key=ivt05a_key$,dom=Remove_Record) ivm02a$
rem    if ivm02a.qty_on_hand>0 then goto Remove_Record
        find record (ivm01_dev,key=firm_id$+ivt05a.item_id$,dom=Remove_Record) ivm01a$
        desc$=cvs(ivm01a.item_desc$,2)

Vendor_Info: rem --- Get vendor info

        if ap$="Y" then
        x=30
Vendor_Info_Record:
        if x+p9>132-10-m2-(4+p[0])-22-(9+len(apmsk$)) if x>20 x=x-5; goto Vendor_Info_Record else p9=p9-1; goto Vendor_Info_Record
        dim vndnam$(x);apm01a.vendor_name$="Not on file"
        find record (apm01_dev,key=firm_id$+ivm02a.vendor_id$,dom=*next) apm01a$
        vndnam$(1)=apm01a.vendor_name$
        endif
Flow_Vendor:
        if sequence$="P" 
         OutVect!.addItem(ivt05a.warehouse_id$)
         OutVect!.addItem(ivt05a.item_id$)
         OutVect!.addItem(desc$)
         OutVect!.addItem(ivm01a.product_type$)
         OutVect!.addItem(ivm02a.cycle_cd$)
         OutVect!.addItem(ivm02a.location$)
         OutVect!.addItem(ivm02a.buyer_code$)
         OutVect!.addItem(str(ivm02a.vendor_id$:m0$)+vndnam$)
         OutVect!.addItem(fndate$(ivt05a.writtn_date$))
         OutVect!.addItem(str(ivm02a.qty_on_hand:m2$))
         endif
         if sequence$="I"
         OutVect!.addItem(ivt05a.warehouse_id$)
         OutVect!.addItem(ivt05a.item_id$)
         OutVect!.addItem(desc$)
         OutVect!.addItem(ivm01a.product_type$)
         OutVect!.addItem(ivm02a.cycle_cd$)
         OutVect!.addItem(ivm02a.location$)
         OutVect!.addItem(ivm02a.buyer_code$)
         OutVect!.addItem(str(ivm02a.vendor_id$:m0$)+vndnam$)
         OutVect!.addItem(fndate$(ivt05a.writtn_date$))
         OutVect!.addItem(str(ivm02a.qty_on_hand:m2$))
         endif
         if sequence$="C"
         OutVect!.addItem(ivt05a.warehouse_id$)
         OutVect!.addItem(ivt05a.item_id$)
         OutVect!.addItem(desc$)
         OutVect!.addItem(ivm01a.product_type$)
         OutVect!.addItem(ivm02a.cycle_cd$)
         OutVect!.addItem(ivm02a.location$)
         OutVect!.addItem(ivm02a.buyer_code$)
         OutVect!.addItem(str(ivm02a.vendor_id$:m0$)+vndnam$)
         OutVect!.addItem(fndate$(ivt05a.writtn_date$))
         OutVect!.addItem(str(ivm02a.qty_on_hand:m2$))
         endif
   
         count=count+1

Next_Record:
        if sequence$="I" goto Item_Sort else goto Main_Read

Remove_Record: rem --- Remove ivt-05 record

        remove (ivt05_dev,key=ivt05a_key$,dom=*next)
        goto Next_Record

Done: rem --- End

        if h=0 
        qwk=fnblank(10)
        OutVect!.addItem(str(count)+"  "+"items(s)")
        qwk=fnblank(10)
        goto std_exit
        if sequence$<>"P" then
        OutVect!.addItem("")
        endif

SubHeading: rem --- Sub Heading

         if sequence$="P" then
         OutVect!.addItem(head$)
         qwk=fnblank(9)
         qwk=fnblank(10)
         endif
         return

WhseBreak: rem --- Warehouse Break

        t0$=ivt05a_key.warehouse_id$
        l=l9+1
        find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
        ivm10c_h3$="Warehouse Code: "+t0$+" "+ivm10c.short_name$
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        HdrVect!.addItem(ivm10c_h3$)
        return

SubTotal: rem --- Sort Sub Total

        dim head$(30)
        t1$=ivm03_key.product_type$,ivm10a.code_desc$="Not on file"
        find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
        head$=subhead$+" "+t1$+" "+ivm10a.code_desc$
        head$=cvs(head$,2)
        gosub SubHeading
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

   def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
