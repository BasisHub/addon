rem --- Price Change Reversal Register
rem --- Program ivr_4a v8.0.0 09Jul2007 (ivr_4a)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:43:20)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[2]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[3]="ivm-02",ids$[4]="IVM_ITEMWHSE"
    files$[4]="IVC_PRODCODE",ids$[5]=files$[5]
    files$[5]="ivw-09",ids$[6]="IVW_PRICREV"
    files$[6]="IVC_WHSECODE",ids$[6]=files$[6]
    files$[7]="IVS_PARAMS",ids$[7]=files$[8]

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivm01_dev=channels[2]
    ivm02_dev=channels[3]
    ivm10a_dev=channels[4]
    ivw09_dev=channels[5]
    ivm10c_dev=channels[6]
    ivs01a_dev=channels[7]

rem --- Dimension string templates

    dim ivm01a$:templates$[2],ivm02a$:templates$[3],ivm10a$:templates$[4],
:       ivw09a$:templates$[5],ivm10c$:templates$[6],ivs01a$:templates$[7]

rem --- Retrieve miscellaneous templates


rem --- Assign form input values to local variables

    table$=fnget_table$("")
    price_code$=fnget_fld_data$(table$,"price_code")
    beg_vend$=fnget_fld_data$(table$,"vend_id_1")
    end_vend$=fnget_fld_data$(table$,"vend_id_2")
    beg_whse$=fnget_fld_data$(table$,"whse_id_1")
    end_whse$=fnget_fld_data$(table$,"whse_id_2")
    beg_prod$=fnget_fld_data$(table$,"prod_id_1")
    end_prod$=fnget_fld_data$(table$,"prod_id_2")
    beg_item$=fnget_fld_data$(table$,"item_1")
    end_item$=fnget_fld_data$(table$,"item_2")
    item_type$=fnget_fld_data$(table$,"item_type")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
   

rem --- Parameters

    dim p[5]
     n2$="IV"
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.precision$)
    whse$=ivs01a.warehouse_id$
    p[3]=num(ivs01a.desc_len$)
    p[4]=num(ivs01a.desc_len$)
    p[5]=num(ivs01a.desc_len$)

rem --- Initializations

    precision num(ivs01a.precision$)
    rem dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],w0$(26),w[4]
    rem dim b0$(24),b1$(64),b[20],x0$(32),
    dim headings$[3],o[4]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    when$=sysinfo.system_date$
    clock$=""
    width=132
    page=0
    l9=59
    l=l9+1
    headings=2
    number=0
    code$=""
    t0$=""
    t1$=""
    t2$=""
    m9$="-###0.00%"
    m9=len(m9$)
    dw=p[3]+p[4]+p[5]
    action$="R"
    entry$="ivw-09"

rem --- Print positions

    call pgmdir$+"adc_sizemask.aon",m4$,m4,11,15
    o[1]=p[0]+1
    o[2]=o[1]+dw+1
    o[3]=o[2]+4
    o[4]=o[3]+m4+1
    if o[4]+m4+7>= width then
        o[4]=width-m4-7
        o[3]=o[4]-m4-1
    endif

rem --- Call price/cost change entry program

    call pgmdir$+"ivc_ca.bbx",action$,entry$,status
    if status goto std_exit
    read (ivw09_dev,key="",dom=*next)
    ivw09a_key$=key(ivw09_dev,end=Report_Init)
    headings$[1]=sysinfo.task_desc$+" For List Price Code "+ivw09a_key.lst_prc_cde$

Report_Init: rem --- Report Initializations

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,ivw09_dev,1,meter_num,status
    read (ivw09_dev,key="",dom=*next)

rem --- Next ivw-09 record
    while more
        ivw09a_key$=key(ivw09_dev,end=done)
        read (ivw09_dev)
        call pgmdir$+"adc_progress.aon","S","","","",ivw09a_key.lst_prc_cde$+" "+ivw09a_key.warehouse_id$+" "+ivw09a_key.product_type$+" "+ivw09a_key.item_id$,0,0,1,meter_num,status

rem --- Level breaks?

        if ivw09a_key.warehouse_id$<>t0$ gosub whse_break
        if ivw09a_key.product_type$<>t1$ gosub product_break

rem --- Additional reads

        rem dim a0$(22),a1$(60),a2$(64),a3$(40),a4$(21),a[12],b0$(24),b1$(64),b[20]
        ivm01a_key$=firm_id$+ivw09a_key.item_id$
        ivm02a_key$=firm_id$+ivw09a_key.warehouse_id$+ivw09a_key.item_id$
        find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
        find record (ivm02a_dev,key=ivm02a_key$,dom=*next) ivm02a$
        if ivm01a.cur_price_cd$<>ivw09a_key.lst_prc_cde$ continue
        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])

rem --- New Product Type?

        if h0$<>"" then
            if l+4+nl>l9 gosub report_heading
            if nl>0 print (printer_dev)""
            print (printer_dev)h0$
            print (printer_dev)""
            l=l+2+nl
            nl=1
            h0$=""
        endif

rem --- Print detail line

        if l+1>l9 gosub report_heading
        print (printer_dev)@(o[0]),a0$(3,p[0]),@(o[1]),fnitem$(ivm01a.item_desc$,p[3],p[4],p[5]),@(o[2]),ivm01a.unit_of_sale$,@(o[3]),ivm02a.cur_price:m4$,@(o[4]),ivm02a.pri_price:m4$," ",ivm02a.pri_price_cd$
        if split>0 print (printer_dev)@(o[0]+2),description$
        l=l+needed
        number=number+1
        nl=1

rem --- Loop back for next record

    wend

done: rem --- All done

    if !number then
        gosub report_heading
        print (printer_dev)"No Price Change Entries Found"
    endif
rem --- Run update overlay

    channel=ivw09_dev
    o0=2
    first$=firm_id$
    close (printer_dev,err=*next)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    run pgmdir$+"ivu_ga.bbx"

report_heading: rem --- Report Heading

    l=headings+4
    nl=0
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[3]+m4-11),"Current",@(o[4]+m4-11),"New",@(o[4]+m4+1),"Price"
    print (printer_dev)@(o[0]),"Item",@(o[1]),"Description",@(o[2]),"UM",@(o[3]+m4-11),"List Price",@(o[4]+m4-11),"List Price",@(o[4]+m4+1),"Code"
    print (printer_dev)""
    return

whse_break: rem --- Warehouse Break

    if t0$<>"" gosub product_break
    rem dim x0$(32)
    let t0$=ivw09a.warehouse_id$,ivm10c.whse_name$="(Not on File)",l=l9+1,headings=3
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    let headings$[2]="Warehouse "+t0$+" "+cvs(ivm10c.whse_name$,2)
    return

product_break: rem --- Product Break

    rem dim x0$(32)
    let t1$=ivw09a.product_type$,ivm10a.code_desc$="(Not On File)"
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=product_End) ivm10a$
    let h0$="Product "+t1$+" "+ivm10a.code_desc$
    return
product_End:

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    rem run pgmdir$+"ads_process_end.aon",err=*next
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
