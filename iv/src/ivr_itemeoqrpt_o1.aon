rem --- EOQ, Order Point & Safety Stock Report (Input Overlay)
rem --- Program ivr_itemeoqrpt_o1.aon v8.0.0 16Jul2007 (ivr_ob)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Setup SQL to search by item / warehouse within report parameters	

    call stbl("+DIR_PGM")+"adc_progress.aon","NC","IVM_ITEMWHSE","","","",0,ivm02_dev,1,meter_num,status

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ivm_itemwhse.warehouse_id, ivm_itemwhse.item_id "
    sql_prep$=sql_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"    ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
    where_clause$="       WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND "
    if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"' "

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    if inactive$="Y" then
       where_clause$=where_clause$+" AND ivm_itemmast.item_inactive<>'Y' "
    endif

    order_clause$=" ORDER BY ivm_itemwhse.warehouse_id, ivm_itemwhse.item_id"
    sql_prep$=sql_prep$+where_clause$+order_clause$

rem --- SQL chan end prep

    sql_chan=sqlunt
    sqlopen(sql_chan)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

    count_prep$=            "SELECT COUNT(*) AS total_recs "
    count_prep$=count_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    count_prep$=count_prep$+"    ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    count_prep$=count_prep$+"       ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
    count_prep$=count_prep$+where_clause$

    count_chan=sqlunt
    sqlopen(count_chan)stbl("+DBNAME")
    sqlprep(count_chan)count_prep$
    dim count_tpl$:sqltmpl(count_chan)
    sqlexec(count_chan)
    count_tpl$=sqlfetch(count_chan)

    if count_tpl.total_recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

rem --- Main Read

    prev_item$ = ""
    total_recs = 0
    dim prev_ivm01a$:fattr(ivm01a$)
    dim empty$:fattr(ivm01a$)

    while more
        read_tpl$ = sqlfetch(sql_chan, err=*break) 
        whse$ = read_tpl.warehouse_id$
        item$ = read_tpl.item_id$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

rem --- Retrieve item if necessary

        if item$ <> prev_item$ and prev_item$ <> empty$ then gosub item_calcs

        ivm01a_key$=firm_id$+item$
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$

        if ivm01a.eoq_code$=" "     then ivm01a.eoq_code$="D"
        if ivm01a.ord_pnt_code$=" " then ivm01a.ord_pnt_code$="D"
        if ivm01a.saf_stk_code$=" " then ivm01a.saf_stk_code$="D"

        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        weighted=0
        average=0
        amount=0
        number=0
        count=0

		prev_item$   = item$
		prev_ivm01a$ = ivm01a$

rem --- Retrieve warehouse record

		ivm02a_key$=firm_id$+whse$+item$
		find record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
		if ivm02a.eoq_code$=" "     then ivm02a.eoq_code$="D"
		if ivm02a.ord_pnt_code$=" " then ivm02a.ord_pnt_code$="D"
		if ivm02a.saf_stk_code$=" " then ivm02a.saf_stk_code$="D"

rem --- Calculate annual usage

		dim item$[2]
		item$[0]=firm_id$
		item$[1]=ivm02a.warehouse_id$
		item$[2]=ivm02a.item_id$

		action$="W"
		call pgmdir$+"ivc_usage.aon",action$,ivchannels[all],item$[all],factors[all],day_of_month,baseperiod$,curperiod$,g[0],p[1],actual,estimated,flag$,usage_tpls$[all],ignore_status

		ivw21a.lead_time       = ivm02a.lead_time
		ivw21a.usage_qty_01    = actual
		ivw21a.usage_qty_02    = estimated
		ivw21a.safety_stock_01 = ivm02a.safety_stock
		ivw21a.safety_stock_02 = ivm02a.safety_stock
		ivw21a.order_point_01  = ivm02a.order_point
		ivw21a.order_point_02  = ivm02a.order_point
		ivw21a.eoq_01          = ivm02a.eoq
		ivw21a.eoq_02          = ivm02a.eoq
		ivw21a.unit_cost       = ivm02a.unit_cost

		safety   = ivw21a.safety_stock_01
		order    = ivw21a.order_point_01
		eoq      = ivw21a.eoq_01
		codes$   = ivm02a.eoq_code$+ivm02a.ord_pnt_code$+ivm02a.saf_stk_code$
		lead     = ivw21a.lead_time
		onhand   = abs(ivm02a.qty_on_hand)
		unitcost = ivm02a.unit_cost
		amount   = amount+(onhand*unitcost)
		number   = number+onhand
		if number then weighted=amount/number
		count=count+1
		average=average+unitcost

rem --- Calculate new safety stock, order point and EOQ

		gosub new_safety_stock

rem --- Update totals for warehouse/item

		ivw21a.firm_id$        = ivm02a.firm_id$
		ivw21a.warehouse_id$   = ivm02a.warehouse_id$
		ivw21a.product_type$   = ivm01a.product_type$
		ivw21a.item_id$        = ivm02a.item_id$
		ivw21a.item_desc$      = description$
		ivw21a.abc_code$       = ivm02a.abc_code$
		ivw21a.eoq_code$       = ivm02a.eoq_code$
		ivw21a.ord_pnt_code$   = ivm02a.ord_pnt_code$
		ivw21a.saf_stk_code$   = ivm02a.saf_stk_code$
		ivw21a.stock_level$    = ivm01a.stock_level$
		ivw21a.safety_stock_02 = safety
		ivw21a.order_point_02  = order
		ivw21a.eoq_02          = eoq
		ivw21a$ = field(ivw21a$)
		write record (ivw21_dev) ivw21a$

rem --- Accumulate item totals

		ivw11a.usage_qty_01    = ivw11a.usage_qty_01    + ivw21a.usage_qty_01
		ivw11a.usage_qty_02    = ivw11a.usage_qty_02    + ivw21a.usage_qty_02
		ivw11a.safety_stock_02 = ivw11a.safety_stock_02 + ivw21a.safety_stock_02
		ivw11a.order_point_02  = ivw11a.order_point_02  + ivw21a.order_point_02
		ivw11a.eoq_02          = ivw11a.eoq_02          + ivw21a.eoq_02

rem --- Loop back for next record

	wend 

rem --- Calculate the last item	

    if prev_item$ <> "" then gosub item_calcs

rem --- Run report overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run pgmdir$+"ivr_itemeoqrpt_o2.aon"

new_safety_stock: rem --- Calculate new safety stock, order point and EOQ

    if codes$(1,1)<>"N" and carry and unitcost then 
        adu = (estimated/g[0]) / 30
        if codes$(3,1)<>"N" then safety = fnr(adu*lead*.5)
        if codes$(2,1)<>"N" then order = fnr(safety+(adu*lead))
        eoq = (2*estimated*setup) / (carry*unitcost)
        s   = sgn(eoq)
        eoq = abs(eoq)
        eoq = fnr(sqr(eoq)*s)
    endif

    return

item_calcs: rem --- Perform item calculations

    lead      = prev_ivm01a.lead_time
    estimated = ivw11a.safety_stock_02
    safety    = prev_ivm01a.safety_stock
    order     = prev_ivm01a.order_point
    eoq       = prev_ivm01a.eoq
    codes$    = prev_ivm01a.eoq_code$+prev_ivm01a.ord_pnt_code$+prev_ivm01a.saf_stk_code$
    unitcost  = weighted
    if count>0  then average=average/count
    if number=0 then unitcost=average
    gosub new_safety_stock

rem --- Generate item record

    ivw11a.firm_id$        = prev_ivm01a.firm_id$
    ivw11a.product_type$   = prev_ivm01a.product_type$
    ivw11a.item_id$        = prev_ivm01a.item_id$
    ivw11a.item_desc$      = description$
    ivw11a.abc_code$       = prev_ivm01a.abc_code$
    ivw11a.eoq_code$       = prev_ivm01a.eoq_code$
    ivw11a.ord_pnt_code$   = prev_ivm01a.ord_pnt_code$
    ivw11a.saf_stk_code$   = prev_ivm01a.saf_stk_code$
    ivw11a.stock_level$    = prev_ivm01a.stock_level$
    ivw11a.lead_time       = lead
    ivw11a.safety_stock_01 = prev_ivm01a.safety_stock
    ivw11a.safety_stock_02 = safety
    ivw11a.order_point_01  = prev_ivm01a.order_point
    ivw11a.order_point_02  = order
    ivw11a.eoq_01          = prev_ivm01a.eoq
    ivw11a.eoq_02          = eoq
    ivw11a.unit_cost       = unitcost
    ivw11a$ = field(ivw11a$)
    write record (ivw11_dev) ivw11a$

    return	

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fnr(Q)=int(Q+.5)
    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
