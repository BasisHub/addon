rem --- EOQ, Order Point & Safety Stock Report (Input Overlay)
rem --- Program ivr_itemeoqrpt_o1.aon v8.0.0 16Jul2007 (ivr_ob)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

    call "adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit

rem --- Retrieve parameter records

    first$=firm_id$+"A",more=1
    ivm03a_key$=first$+begprod$
    read (ivm03a_dev,key=ivm03a_key$,dom=*next)
    
rem --- Get next sort record
    while more

        ivm03a_key$=key(ivm03a_dev,end=*break)
        if pos(first$=ivm03a_key$)<>1 break
        product$=ivm03a_key.product_type$
        item$=ivm03a_key.item_id$

rem --- Valid Product/Item?

        if endprod$<>"" if ivm03a_key.product_type$>endprod$ break
        if begitem$<>"" then
            if ivm03a_key.item_id$<begitem$ then
                read (ivm03a_dev,key=first$+ivm03a_key.product_type$+begitem$,dir=0,dom=*continue)
                continue
            endif
        endif
        if enditem$<>"" then
            if ivm03a_key.item_id$>enditem$ then
                read (ivm03a_dev,key=first$+ivm03a_key.product_type$+$FF$,dom=*continue)
                continue
            endif
        endif
        x$=ivm03a_key.product_type$+" "+ivm03a_key.item_id$

rem --- Level breaks?

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        read (ivm03a_dev)

rem --- Retrieve item

        ivm01a_key$=firm_id$+ivm03a_key.item_id$
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        if ivm01a.eoq_code$=" " ivm01a.eoq_code$="D"
        if ivm01a.ord_pnt_code$=" " ivm01a.ord_pnt_code$="D"
        if ivm01a.saf_stk_code$=" " ivm01a.saf_stk_code$="D"

rem --- Selected Item Type?

        if type$<>"" and pos(ivm01a.item_type$=type$)<>1 continue

rem --- Position warehouse xref

        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        x$=firm_id$+"G"+ivm01a.item_id$
        weighted=0
        average=0
        amount=0
        number=0
        count=0
        read (ivm03g_dev,key=x$,dom=*next)

rem --- Read next warehouse record

        while more

            ivm03g_key$=key(ivm03g_dev,end=*break)
            if pos(x$=ivm03g_key$)<>1 break
            read (ivm03g_dev)

rem --- Retrieve warehouse record

            ivm02a_key$=firm_id$+ivm03g_key.warehouse_id$+ivm01a.item_id$
            find record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
            if ivm02a.eoq_code$=" " ivm02a.eoq_code$="D"
            if ivm02a.ord_pnt_code$=" " ivm02a.ord_pnt_code$="D"
            if ivm02a.saf_stk_code$=" " ivm02a.saf_stk_code$="D"

rem --- Calculate annual usage
	    dim item$[2]
            item$[0]=firm_id$
            item$[1]=ivm02a.warehouse_id$
            item$[2]=ivm02a.item_id$
            action$="W"
            call pgmdir$+"ivc_usage.aon",action$,ivchannels[all],item$[all],factors[all],day_of_month,baseperiod$,curperiod$,g[0],p[1],actual,estimated,flag$,status
            ivw21a.lead_time=ivm02a.lead_time
            ivw21a.usage_qty_01=actual
            ivw21a.usage_qty_02=estimated
            ivw21a.safety_stock_01=ivm02a.safety_stock
            ivw21a.safety_stock_02=ivm02a.safety_stock
            ivw21a.order_point_01=ivm02a.order_point
            ivw21a.order_point_02=ivm02a.order_point
            ivw21a.eoq_01=ivm02a.eoq
            ivw21a.eoq_02=ivm02a.eoq
            ivw21a.unit_cost=ivm02a.unit_cost
            safety=ivw21a.safety_stock_01
            order=ivw21a.order_point_01
            eoq=ivw21a.eoq_01
            codes$=ivm02a.eoq_code$+ivm02a.ord_pnt_code$+ivm02a.saf_stk_code$
            lead=ivw21a.lead_time
            onhand=abs(ivm02a.qty_on_hand)
            unitcost=ivm02a.unit_cost
            amount=amount+(onhand*unitcost)
            number=number+onhand
            if number<>0 weighted=amount/number
            count=count+1
            average=average+unitcost

rem --- Calculate new safety stock, order point and EOQ

            gosub New_Safety_Stock

rem --- Update totals for warehouse/item

            ivw21a_key$=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm01a.product_type$+ivm02a.item_id$
            ivw21a.firm_id$=ivm02a.firm_id$
	    ivw21a.warehouse_id$=ivm02a.warehouse_id$
	    ivw21a.product_type$=ivm01a.product_type$
	    ivw21a.item_id$=ivm02a.item_id$
            ivw21a.item_desc$=description$
            ivw21a.abc_code$=ivm02a.abc_code$
            ivw21a.eoq_code$=ivm02a.eoq_code$
            ivw21a.ord_pnt_code$=ivm02a.ord_pnt_code$
            ivw21a.saf_stk_code$=ivm02a.saf_stk_code$
            ivw21a.stock_level$=ivm01a.stock_level$
            ivw21a.safety_stock_02=safety
            ivw21a.order_point_02=order
            ivw21a.eoq_02=eoq
            write record (ivw21_dev,key=ivw21a_key$) ivw21a$

rem --- Accumulate item totals

            ivw11a.usage_qty_01=ivw11a.usage_qty_01+ivw21a.usage_qty_01
            ivw11a.usage_qty_02=ivw11a.usage_qty_02+ivw21a.usage_qty_02
            ivw11a.safety_stock_02=ivw11a.safety_stock_02+ivw21a.safety_stock_02
            ivw11a.order_point_02=ivw11a.order_point_02+ivw21a.order_point_02
            ivw11a.eoq_02=ivw11a.eoq_02+ivw21a.eoq_02

rem --- Loop back for next warehouse

        wend; rem --- Inner Loop Ending 
    
rem --- Done with warehouses - perform item calculations

        lead=ivm01a.lead_time
        estimated=ivw11a.safety_stock_02
        safety=ivm01a.safety_stock
        order=ivm01a.order_point
        eoq=ivm01a.eoq
        codes$=ivm01a.eoq_code$+ivm01a.ord_pnt_code$+ivm01a.saf_stk_code$
        unitcost=weighted
        if count>0 average=average/count
        if number=0 unitcost=average
        gosub New_Safety_Stock

rem --- Generate item record

        ivw11a_key$=ivm01a.firm_id$+"  "+ivm01a.product_type$+ivm01a.item_id$
        ivw11a.firm_id$=ivm01a.firm_id$
        ivw11a.product_type$=ivm01a.product_type$
        ivw11a.item_id$=ivm01a.item_id$
        ivw11a.item_desc$=description$
        ivw11a.abc_code$=ivm01a.abc_code$
        ivw11a.eoq_code$=ivm01a.eoq_code$
        ivw11a.ord_pnt_code$=ivm01a.ord_pnt_code$
        ivw11a.saf_stk_code$=ivm01a.saf_stk_code$
        ivw11a.stock_level$=ivm01a.stock_level$
        ivw11a.lead_time=lead
        ivw11a.safety_stock_01=ivm01a.safety_stock
        ivw11a.safety_stock_02=safety
        ivw11a.order_point_01=ivm01a.order_point
        ivw11a.order_point_02=order
        ivw11a.eoq_01=ivm01a.eoq
        ivw11a.eoq_02=eoq
        ivw11a.unit_cost=unitcost
        write record (ivw11_dev,key=ivw11a_key$) ivw11a$

rem --- Loop back for next item
    wend 
    
done: rem --- Run report overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run pgmdir$+"ivr_itemeoqrpt_o2.aon"

New_Safety_Stock: rem --- Calculate new safety stock, order point and EOQ

    let adu=(estimated/g[0])/30
    if codes$(3,1)<>"N" safety=fnr(adu*lead*.5)
    if codes$(2,1)<>"N" order=fnr(safety+(adu*lead))
    if codes$(1,1)="N" return
    if carry=0 return
    if unitcost=0 return
    let eoq=((2*estimated*setup)/(carry*unitcost))
    let s=sgn(eoq),eoq=abs(eoq),eoq=fnr(sqr(eoq)*s)
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fnr(Q)=INT(Q+.5)
    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))),"%Mz/%Dz/%Yd")
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
