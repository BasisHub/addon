rem --- Inventory Turns Report (Report Overlay)
rem --- Program ivr_itemturns_o1.aon v8.0.0 16Jul2007 (ivr_kb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:55:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()

    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    dim item[3],totals[1],files[3]
    dim period$[1],product[1],warehouse[1],report[1]
    files[3]=ivm02_dev
    files[2]=ivm12_dev
    when$=sysinfo.system_date$
    headings=7
    clock$=""
    h9$=""
    width=132
    page=0
    done=0
    p=num(period$)-(g[0]-1)
    x=num(year$)
    if p<1 p=g[0]+p,x=x-1
    period$[0]=str(x:"0000")+str(p:m9$)
    period$[1]=year$+period$
    more=1
    recs=0
    total_recs=0

rem --- Background

    call pgmdir$+"adc_progress.aon","N","IVM_ITEMWHSE","","","",0,ivm02_dev,1,meter_num,status

rem --- Report headings

    dim headings$[headings+1]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    headings$[1]=headings$[1]+Translate!.getTranslation("AON__BY_WAREHOUSE")
    headings$[1]=headings$[1]+Translate!.getTranslation("AON__FOR_PERIOD_")+period$+" "+year$
    x$=Translate!.getTranslation("AON_LAST_")+str(g[0])+Translate!.getTranslation("AON__PERIODS_")
    headings$[7]=x$
    
    if xlimit$<>"" then
        x$=Translate!.getTranslation("AON_LIMITED_TO_ITEMS_WITH_TURNS_")
        if xlimit$="A" x$=x$+Translate!.getTranslation("AON_GREATER")
        if xlimit$="B" x$=x$+Translate!.getTranslation("AON_LESS")
        headings$[2]=x$+Translate!.getTranslation("AON__THAN_")+ str(xlimit:"#0.00")
    endif
    
    headings$[3]="[HEADER]"
    if begitem$="" headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_ITEM:_")+begitem$
    if enditem$="" headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_ITEM:_")+enditem$
    if begprod$="" headings$[5]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[5]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+begprod$                
    if endprod$="" headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[5]=headings$[5]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+endprod$
    if type$="" headings$[6]=Translate!.getTranslation("AON_ALL_ITEM_TYPES") else headings$[6]=Translate!.getTranslation("AON_ITEM_TYPE:_")+type$

rem -- column heading

    dim columns$[8,10]
    columns=9
    columns$[0,0]=Translate!.getTranslation("AON_ITEM"),                  columns$[0,1]="C",columns$[0,2]="12"
    columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"),           columns$[1,1]="C",columns$[1,2]="25"
    columns$[2,0]="UM",                    columns$[2,1]="C",columns$[2,2]="5"
    columns$[3,0]=Translate!.getTranslation("AON_TOTAL^USAGE"),           columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m2$
    columns$[4,0]=Translate!.getTranslation("AON_UNIT^COST"),             columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m3$
    columns$[5,0]=Translate!.getTranslation("AON_TOTAL^COST"),            columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"
    columns$[6,0]=Translate!.getTranslation("AON_AVERAGE^ON_HAND"),       columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$
    columns$[7,0]=Translate!.getTranslation("AON_AVERAGE^VALUE"),         columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$,columns$[7,10]="T"
    columns$[8,0]=Translate!.getTranslation("AON_TURNS"),                 columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m8$,columns$[8,10]="T"

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ivm_itemwhse.firm_id, ivm_itemwhse.item_id, ivm_itemwhse.warehouse_id, "
    sql_prep$=sql_prep$+"       ivm_itemwhse.unit_cost, ivm_itemmast.product_type, ivm_itemmast.item_type "
    sql_prep$=sql_prep$+"  FROM ivm_itemwhse, ivm_itemmast "
    sql_prep$=sql_prep$+" WHERE ivm_itemwhse.item_id = ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id = ivm_itemmast.firm_id "

    where_clause$="AND ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
    if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND "
    if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    where_clause$=where_clause$+" ORDER BY ivm_itemwhse.warehouse_id, ivm_itemmast.product_type "
    sql_prep$=sql_prep$+where_clause$

    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sql_chan1=unt
    sqlopen(sql_chan1,err=*next)stbl("+DBNAME")

    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read

    while more
        read_tpl$=sqlfetch(sql_chan,err=*break)
        whse$=read_tpl.warehouse_id$
        cost=read_tpl.unit_cost
        product$=read_tpl.product_type$
        item$=read_tpl.item_id$

    rem --- Retrieve item

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        ivm01a_key$=firm_id$+item$
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        if type$<>"" and ivm01a.item_type$<>type$ then continue
        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])

        gosub whse_turns

    rem --- Number of turns meets selection criteria?

        if xlimit$="A" and turns < xlimit then continue
        if xlimit$="B" and turns > xlimit then continue

    rem --- Generate reciprocal amount

        if sequence$<>"D" then
            sign$="+"
            amount$=str(turns:m7$)
            if turns<0 sign$="",amount$=str(100000000000-abs(turns):m7$)
        else
            sign$=""
            amount$=""
            amount$=str(100000000000-turns:m7$)
            if turns<=0 sign$="-",amount$=str(turns:m7$)
        endif

    rem --- Write sort record

        ivw03a_key.firm_id$=firm_id$
        ivw03a_key.warehouse_id$=whse$
        ivw03a_key.product_type$ =product$
        ivw03a_key.recip_sign$=sign$
        ivw03a_key.recip_amount$=amount$
        ivw03a_key.item_id$=item$
        ivw03a.firm_id$=firm_id$
        ivw03a.warehouse_id$=whse$
        ivw03a.product_type$ =product$
        ivw03a.recip_sign$=sign$
        ivw03a.recip_amount$=amount$
        ivw03a.item_id$=ivm01a_key.item_id$
        ivw03a.item_desc$=description$
        ivw03a.unit_measure$=ivm01a.unit_of_sale$
        ivw03a.total_usage=usage
        ivw03a.unit_cost=cost
        ivw03a.total_cost=total
        ivw03a.qty_on_hand=balance
        ivw03a.total_value=average
        ivw03a.item_turns=turns
        ivw03a$ = field(ivw03a$)
        write record (ivw03_dev,key=ivw03a_key$) ivw03a$

    wend; rem --- Main Loop Ending


rem --- Report initializations

    read (ivw03_dev,key=firm_id$,dom=*next)

rem --- Read next work record

    while more
        read record (ivw03_dev,end=done) ivw03a$
        whse$=ivw03a.warehouse_id$
        product$=ivw03a.product_type$
        item$=ivw03a.item_id$
        call pgmdir$+"adc_progress.aon","S","",Translate!.getTranslation("AON_PRINTING"),"",whse$+" "+product$+" "+item$(1,p[0]),ive03_dev,0,1,0,ignore_status

    rem --- Level breaks?

        if whse$<>t0$ gosub whse_break
        if product$<>t1$ gosub product_break

    rem --- Format print fields

        description$=ivw03a.item_desc$
        um$=ivw03a.unit_measure$

    rem --- Print detail line

        if h9$<>"" gosub prod_heading
        OutVect!.addItem(item$)
        OutVect!.addItem(description$)
        OutVect!.addItem(um$)
        OutVect!.addItem(str(ivw03a.total_usage))
        OutVect!.addItem(str(ivw03a.unit_cost))
        OutVect!.addItem(str(ivw03a.total_cost))
        OutVect!.addItem(str(ivw03a.qty_on_hand))
        OutVect!.addItem(str(ivw03a.total_value))
        OutVect!.addItem(str(ivw03a.item_turns))
        recs=recs+1

    rem --- Accumulate totals

        product[0]=product[0]+ivw03a.total_cost
        product[1]=product[1]+ivw03a.total_value
        warehouse[0]=warehouse[0]+ivw03a.total_cost
        warehouse[1]=warehouse[1]+ivw03a.total_value
        report[0]=report[0]+ivw03a.total_cost        
        report[1]=report[1]+ivw03a.total_value

    wend; rem --- Main Loop Ending

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub whse_break
    totals$=Translate!.getTranslation("AON_TOTALS_FOR_REPORT")
    totals[0]=report[0]
    totals[1]=report[1]
    gosub print_total
    goto std_exit


prod_heading: rem --- Product subheading

    xwk=fnblank(columns)
    OutVect!.addItem(h9$)
    OutVect!.addItem(prod_desc$)
    xwk=fnblank(columns-2)
    xwk=fnblank(columns)
    h9$=""
    prod_desc$=""
    return

whse_break: rem --- Warehouse Break

    if t0$<>"" then 
        gosub product_break
        let totals$=Translate!.getTranslation("AON_TOTALS_FOR_WAREHOUSE_")+t0$
        let totals[0]=warehouse[0],totals[1]=warehouse[1]
        gosub print_total
    endif
    if done return
    dim warehouse[1]
    t0$=whse$,ivm10c.short_name$=Translate!.getTranslation("AON_(NOT_ON_FILE)")
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    x$=Translate!.getTranslation("AON_WAREHOUSE_")+t0$+" "+cvs(ivm10c.short_name$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(x$)
    return

product_break: rem --- Product break

    if t1$<>"" then 
        let totals$=Translate!.getTranslation("AON_TOTALS_FOR_PRODUCT_")+t1$
        let totals[0]=product[0],totals[1]=product[1]
        gosub print_total
    endif
    if done return
    dim product[1]
    t1$=product$,ivm10a.code_desc$=Translate!.getTranslation("AON_(NOT_ON_FILE)"),l1=0
    find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
    h9$=Translate!.getTranslation("AON_PRODUCT_TYPE_")+t1$
    prod_desc$=ivm10a.code_desc$
    return

whse_turns: rem --- Retrieve warehouse info and calculate turns

    dim item$[2],activity[12]
    usage=0,total=0,balance=0,average=0,turns=0
    item$[0]=firm_id$,item$[1]=whse$,item$[2]=ivm01a.item_id$
    action$="T"
    call pgmdir$+"ivc_whseact.aon",action$,files[all],item$[all],period$[all],activity[all],status
    usage=(activity[3]+activity[4])-activity[8],balance=activity[0]/g[0]
    average=balance*cost,total=usage*cost
    if average<>0 turns=total/average
    return

print_total: rem --- Print totals

    turns=0
    if totals[1]<>0 turns=totals[0]/totals[1]

    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns)))
    OutVect!.addItem("")
    OutVect!.addItem("   "+totals$)
    xwk=fnblank(columns-6)
    OutVect!.addItem(str(totals[0]))
    OutVect!.addItem("")
    OutVect!.addItem(str(totals[1]))
    OutVect!.addItem(str(turns))
    return          

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
