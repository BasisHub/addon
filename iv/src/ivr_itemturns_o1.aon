rem --- Inventory Turns Report (Report Overlay)
rem --- Program ivr_itemturns_o1.aon v8.0.0 16Jul2007 (ivr_kb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:55:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

                seterr std_error
                setesc std_error

rem --- Document initializations
              OutVect!=bbjAPI().getSysGui().makeVector()
              HdrVect!=bbjAPI().getSysGui().makeVector()
              BrkVect!=bbjAPI().getSysGui().makeVector()
              rep_date$=date(0:"%Mz/%Dz/%Yd")
              rep_date_stamp$=date(0:"%Yd%Mz%Dz")
              rep_time$=date(0:"%hz:%mz %p")
              rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Initializations

            precision p[1]
            dim item[3],totals[1],files[3]
            dim period$[1],headings$[6],o[8],product[1],warehouse[1],report[1]
            files[3]=ivm03_dev
            files[2]=ivm12_dev
            ch1$=""
            ch2$=""
            headings$[0]=sysinfo.firm_name$
            headings$[1]=sysinfo.task_desc$
            when$=sysinfo.system_date$
            clock$=""
            h9$=""
            width=132
            page=0
            l9=59
            l=l9+1
            dw=p[3]+p[4]+p[5]
            done=0
            headings=6
            ih$="Item"
            dh$="Description"
            m7$="###########.0000-"
            m9$="00"
            m8$="-##0.00"
            m9=len(m9$)
            m8=len(m8$)
            p=num(period$)-(g[0]-1)
            x=num(year$)
            if p<1 p=g[0]+p,x=x-1
            period$[0]=str(x:"0000")+str(p:m9$)
            period$[1]=year$+period$
            if level$="W" ch1$="Unit",ch2$="Cost"
            more=1


rem --- Print positions
    
           gosub Position


Background: rem --- Background
  
         call pgmdir$+"adc_progress.aon","N","","","","",0,ivm03_dev,1,meter_num,status

rem --- Report headings

        gosub Init_Heading

rem --- Position files

        first$=firm_id$+"A"
        ivm03a_key$=first$+begprod$
        p=0
        if level$="W" first$=firm_id$+"C",ivm03a_key$=first$+begwhse$,p=2
        read (ivm03_dev,key=ivm03a_key$,dom=*next)

rem --- Main Loop starting

    while more 

        ivm03a_key$=key(ivm03_dev,end=*break)
        if pos(first$=ivm03a_key$)<>1 break
        if level$="W" whse$=ivm03a_key.warehouse_id$
        product$=ivm03a_key.product_type$
        item$=ivm03a_key.item_id$
        if level$<>"W" then
rem --- By Item: Valid Product/Item?
            if endprod$<>"" if product$>endprod$ break
            if begitem$<>"" then
                if item$<begitem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_a$+
:                   ivm03a_key.product_type$+begitem$,dir=0,dom=*Continue)
                    continue
                endif 
            endif      
            if enditem$<>"" then
                if item$>enditem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_a$+
:                   ivm03a_key.product_type$+$FF$,dom=*Continue)
                    continue
                endif 
            endif 
            x$=product$+" "+item$(1,p[0])
    
        else
rem --- By Warehouse: Valid Warehouse/Product/Item?

            if endwhse$<>"" if whse$>endwhse$ break
            if begprod$<>"" then
                if product$<begprod$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+begprod$,dom=*Continue) 
                    continue
                endif
            endif    
            if endprod$<>"" then
                if product$>endprod$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+$FF$,dom=*continue)
                    continue
                endif
            endif 
            if begitem$<>"" then
                if item$<begitem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+ivm03a_key.product_type$+begitem$,dir=0,dom=*continue)
                    continue
                endif
            endif
            if enditem$<>"" then
                if item$>enditem$ then
                    read (ivm03_dev,key=ivm03a_key.firm_id$+ivm03a_key.record_id_c$+
:                   ivm03a_key.warehouse_id$+ivm03a_key.product_type$+$FF$,dom=*continue)
                    continue
                endif
            endif
            x$=whse$+" "+product$+" "+item$(1,p[0])
         endif

rem --- Retrieve item

        dim description$(dw)
        call pgmdir$+"adc_progress.aon","S","","","",x$,0,0,1,0,ignore_status
        ivm01a_key$=firm_id$+item$
        read (ivm03_dev)
        find record (ivm01_dev,key=ivm01a_key$,dom=*continue) ivm01a$
        if type$<>"" then
            if ivm01a.Item_type$<>type$ then
                continue
            endif
        endif
        description$(1)=fnitem$(ivm01a.Item_desc$,p[3],p[4],p[5])
        
        if level$<>"I" then
            gosub Whse_Turns
        else
rem --- Position xref for item level report

            dim item[3]
            x$=firm_id$+"G"+ivm01a_key.item_id$
            read (ivm03g_dev,key=x$,dom=*next)

rem --- Get next warehouse xref
rem --- InnerLoop Starting
            while more 

                ivm03g_key$=key(ivm03g_dev,end=*break)
                if pos(x$=ivm03g_key$)<>1 break
                read (ivm03g_dev)
                whse$=ivm03g.warehouse_id$
                gosub Whse_Turns

rem --- Accumulate item totals

                item[0]=item[0]+usage
                item[1]=item[1]+total
                item[2]=item[2]+balance
                item[3]=item[3]+average
    
            wend ;rem --- InnerLoop Ending
rem --- Set detail fields for item

            cost=0
            turns=0
            usage=item[0]
            total=item[1]
            balance=item[2]
            average=item[3]
            if average>0 turns=total/average
        endif
rem --- Number of turns meets selection criteria?

        if xlimit$="A" then
            if turns<xlimit then
                continue
            endif
        endif
        if xlimit$="B" then
            if turns>xlimit then
                continue
            endif
        endif
rem --- Generate reciprocal amount

        if sequence$<>"D" then
            sign$="+"
            amount$=str(turns:m7$)
            if turns<0 sign$="",amount$=str(100000000000-abs(turns):m7$)
            
        else
            sign$=""
            amount$=""
            amount$=str(100000000000-turns:m7$)
            if turns<=0 sign$="-",amount$=str(turns:m7$)
        endif

rem --- Write sort record

        ivw03a_key.firm_id$=firm_id$
        ivw03a_key.warehouse_id$=whse$
        ivw03a_key.product_type$ =product$
        ivw03a_key.recip_sign$=sign$
        ivw03a_key.recip_amount$=amount$
        ivw03a_key.item_id$=ivm01a_key.item_id$
        ivw03a.item_desc$=description$
        ivw03a.unit_measure$=ivm01a.unit_of_sale$
        ivw03a.total_usage=usage
        ivw03a.unit_cost=cost
        ivw03a.total_cost=total
        ivw03a.qty_on_hand=balance
        ivw03a.total_value=average
        ivw03a.item_turns=turns
        if level$="I" ivw03a_key.warehouse_id$=""
        write record (ivw03_dev,key=ivw03a_key$) ivw03a$

    wend; rem --- Main Loop Ending
    

rem --- Report initializations

      read (ivw03_dev,key=firm_id$,dom=*next)

rem --- Read next work record
    while more

        read record (ivw03_dev,end=done) ivw03a$
        whse$=ivw03a_key.warehouse_id$
        product$=ivw03a_key.product_type$
        item$=ivw03a_key.item_id$
        call pgmdir$+"adc_progress.aon","S","","Printing","",whse$+" "+product$+" "+item$(1,p[0]),ive03_dev,0,1,0,ignore_status

rem --- Level breaks?

        if level$="W" if whse$<>t0$ gosub WhseBreak
        if product$<>t1$ gosub Prod_Break

rem --- Format print fields

        description$=ivw03a.item_desc$
        um$=ivw03a.unit_measure$
        cost$=""
        if level$="W" cost$=str(ivw03a.unit_cost:m3$)

rem --- Print detail line

        needed=1+split
        x$=""
        if h9$<>"" needed=needed+2
        if l+needed>l9 
        if h9$<>"" gosub Prod_Heading
        if split=0 x$=description$
          if level$="W"              
                        OutVect!.addItem(item$)
                        OutVect!.addItem(x$)
                        OutVect!.addItem(um$)
                        OutVect!.addItem(str(ivw03a.total_usage:m2$))
                        OutVect!.addItem(cost$)
                        OutVect!.addItem(str(ivw03a.total_cost:m1$))
                        OutVect!.addItem(str(ivw03a.qty_on_hand:m2$))
                        OutVect!.addItem(str(ivw03a.total_value:m1$))
                        OutVect!.addItem(str(ivw03a.turns:m8$))
           endif

           if level$="I"
                        OutVect!.addItem(item$)
                        OutVect!.addItem(x$)
                        OutVect!.addItem(um$)
                        OutVect!.addItem(str(ivw03a.total_usage:m2$))
                        OutVect!.addItem(str(ivw03a.total_cost:m1$))
                        OutVect!.addItem(str(ivw03a.qty_on_hand:m2$))
                        OutVect!.addItem(str(ivw03a.total_value:m1$))
                        OutVect!.addItem(str(ivw03a.turns:m8$))
           endif
                        
        l=l+1
        l0=l0+1
        l1=l1+1
        if split<>0 then

                        OutVect!.addItem(description$)
            l=l+1
        endif

rem --- Accumulate totals

        product[0]=product[0]+ivw03a.total_cost
        product[1]=product[1]+ivw03a.total_value
        warehouse[0]=warehouse[0]+ivw03a.total_cost
        warehouse[1]=warehouse[1]+ivw03a.total_value
        report[0]=report[0]+ivw03a.total_cost        
	report[1]=report[1]+ivw03a.total_value


    wend; rem --- Main Loop Ending

done: rem --- All done

    done=1
    if level$="W" gosub WhseBreak
    if level$="I" gosub Prod_Break
    totals$="Totals For Report"
    totals[0]=report[0]
    totals[1]=report[1]
    gosub PrintTotal
    goto std_exit




Prod_Heading: rem --- Product subheading

    if l+2>l9 
        OutVect!.addItem(h9$)
        OutVect!.addItem("")
    l=l+2
    h9$=""
    return

Init_Heading: rem --- Initialize HEADINGS$

    dim h1$(width),h2$(width),h5$(width-o[3],"-"),headings$[headings+1]
    if level$="I" headings$[1]=headings$[1]+" By Item"
    if level$="W" headings$[1]=headings$[1]+" By Warehouse"
    headings$[1]=headings$[1]+" For Period "+period$+" "+year$
    headings=5
    x$="Last "+str(g[0])+" Periods "
    h5$(fncenter(x$,width-o[3]),len(x$))=x$
    headings$[7]=x$
    if xlimit$<>"" then
        x$="Limited To Items With Turns "
        headings=6
        if xlimit$="A" x$=x$+"Greater"
        if xlimit$="B" x$=x$+"Less"
        headings$[2]=x$+" Than "+ str(xlimit:"#0.00")
    endif
  
        if begitem$="" headings$[4]="From Item: First" else headings$[4]="From Item: "+begitem$
                    if enditem$="" headings$[4]=headings$[4]+" -- To Item: Last" else headings$[4]=headings$[4]+" -- To Item: "+enditem$
                    if begprod$="" headings$[5]="From Product: First" else headings$[5]="From Product: "+begprod$                
                    if endprod$="" headings$[5]=headings$[5]+" -- To Product: Last" else headings$[5]=headings$[5]+" -- To Product: "+endprod$
                    if type$="" headings$[6]="All Item Types" else headings$[6]="Item Type: "+type$


rem -- column heading

            if level$="W"

            dim columns$[8,10]
                    columns=8
                    columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="10"
                    columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="15"
                    columns$[2,0]="UM",                    columns$[2,1]="C",columns$[2,2]="6"
                    columns$[3,0]="Total Usage",           columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m2$
                    columns$[4,0]="Unit Cost",             columns$[4,1]="C",columns$[4,2]="10"
                    columns$[5,0]="Total Cost",            columns$[5,1]="N",columns$[5,2]="15",columns$[5,3]=m1$
                    columns$[6,0]="Average On Hand",       columns$[6,1]="N",columns$[6,2]="15",columns$[6,3]=m2$
                    columns$[7,0]="Average Value",         columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m1$
                    columns$[8,0]="Turns",                 columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m8$
           endif                  
           if level$="I"
           dim columns$[7,10]
                    columns=7
                    columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="10"
                    columns$[1,0]="Description",           columns$[1,1]="C",columns$[1,2]="15"
                    columns$[2,0]="UM",                    columns$[2,1]="C",columns$[2,2]="6"
                    columns$[3,0]="Total Usage",           columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m2$
                    columns$[4,0]="Total Cost",            columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$
                    columns$[5,0]="Average On Hand",       columns$[5,1]="N",columns$[5,2]="15",columns$[5,3]=m2$
                    columns$[6,0]="Average Value",         columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$
                    columns$[7,0]="Turns",                 columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m8$

          endif
          return

WhseBreak: rem --- Warehouse Break

            if t0$<>"" then 
                gosub Prod_Break
                if l0>=1 then
                    let totals$="Totals For Warehouse "+t0$
                    let totals[0]=warehouse[0],totals[1]=warehouse[1]
                    gosub PrintTotal
                endif
            endif
            if done return
            dim warehouse[1]
            let t0$=whse$,ivm10c.short_name$="(Not on File)",l=l9+1,l0=0
            find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
            let x$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2),headings$[headings-2]=h1$
            let headings$[headings-2](fncenter(x$,width),len(x$))=x$
            return

Prod_Break: rem --- Product break

            if t1$<>"" and l1>=1 then 
                let totals$="Totals For Product "+t1$
                let totals[0]=product[0],totals[1]=product[1]
                gosub PrintTotal
            endif
            if done return
            dim product[1]
            let t1$=product$,ivm10a.code_desc$="(Not on File)",l1=0
            find record (ivm10a_dev,key=firm_id$+"A"+t1$,dom=*next) ivm10a$
            let h9$="Product Type "+t1$+" "+ivm10a.code_desc$
            return

rem --- Retrieve warehouse info and calculate turns

Whse_Turns:
            dim item$[2],activity[12]
            let usage=0,cost=0,cost$="",total=0,balance=0,average=0,turns=0
            let ivm02a_key$=firm_id$+whse$+item$,item$[0]=firm_id$,item$[1]=whse$,item$[2]=ivm01a.item_id$
            find record (ivm02_dev,key=ivm02a_key$,dom=Whse_Turns_Done) ivm02a$
            let cost=ivm02a.unit_cost,cost$=str(cost:m3$),action$="T"
            call pgmdir$+"ivc_whseact.aon",action$,files[all],item$[all],period$[all],activity[all],status
            let usage=(activity[3]+activity[4])-activity[8],balance=activity[0]/g[0]
            let average=balance*cost,total=usage*cost
            if average<>0 turns=total/average
Whse_Turns_Done:
    return

PrintTotal: rem " --- Print totals"
            let turns=0
                if totals[1]<>0 turns=totals[0]/totals[1]

                if level$="W" then
                            xwk=fnblank(9)
                            OutVect!.addItem("")
                            OutVect!.addItem("")
                            OutVect!.addItem("")
                            OutVect!.addItem(totals$)
                            OutVect!.addItem("")
                            OutVect!.addItem(str(totals[0]:m1$))
                            OutVect!.addItem("")
                            OutVect!.addItem(str(totals[1]:m1$))
                            OutVect!.addItem(str(turns:m8$))
               endif
               if level$="I" then
                            xwk=fnblank(8)
                            OutVect!.addItem("")
                            OutVect!.addItem("")
                            OutVect!.addItem(totals$)
                            OutVect!.addItem("")
                            OutVect!.addItem(str(totals[0]:m1$))
                            OutVect!.addItem("")
                            OutVect!.addItem(str(totals[1]:m1$))
                            OutVect!.addItem(str(turns:m8$))
               endif
                

            let l=l+1
            return

Position: rem --- Print positions

            m1$=ivs01a.amount_mask$
            m2$=ivs01a.unit_mask$
            m3$=ivs01a.cost_mask$
            call pgmdir$+"adc_sizemask.aon",m1$,m1,8,15
            call pgmdir$+"adc_sizemask.aon",m2$,m2,8,12
            call pgmdir$+"adc_sizemask.aon",m3$,m3,8,12
            o[8]=width-m8
            o[7]=o[8]-m1
            o[6]=o[7]-m2
            o[5]=o[6]-m1
            o[4]=o[5]
            if level$="W" o[4]=o[5]-m1
            o[3]=o[4]-m2
            o[2]=o[3]-3
            o[1]=p[0]+1
            x=o[2]-o[1]
            split=0
            if x>dw goto Position_Done
            o[1]=o[2]-1
            dw=o[2]-3
            split=1
            ih$="Item/Description"
            dh$=""
Position_Done:
            return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
