rem --- Inventory Requirements Report (Report Overlay)
rem --- Program ivr_itemrequiremt_o1.aon v8.0.0 11Aug2007 (ivr_mb)
rem --- Created by adx_codeport.bbx v1.1.5 (08/11/2007 11:05:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        seterr std_error
        setesc std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Initializations

        precision p[1]

        dim headings$[8],total[6],channels[20],items$[2]
        headings$[0]=sysinfo.firm_name$
        when$=sysinfo.system_date$
        x$=fndate$(when$)
        day_of_month=num(x$(4,2))
        channels[1]=ivm01a_dev
        channels[2]=ivm02a_dev
        channels[3]=ivm02a_dev
        channels[12]=ivm12a_dev
        items$[0]=firm_id$
        clock$=""
        h9$=""
        number=0
        last$=""
        width=132
        page=0
        nf$="(Not On File)"
        headings=6
        lastdate$=""
        lastcost$=""
        flag$=""
        if sequence$="B" headings=7
        more=1
        l1=0

rem --- column heading

        dim columns$[11,10]
        columns=12
        columns$[0,0]="Item",                  columns$[0,1]="C", columns$[0,2]="25"
        columns$[1,0]="Wh Location",           columns$[1,1]="C", columns$[1,2]="10"
        columns$[2,0]="Quantity^On Hand",      columns$[2,1]="N", columns$[2,2]="10",columns$[2,3]=m2$,columns$[2,10]="T"
        columns$[3,0]="Committed^Quantity",    columns$[3,1]="N", columns$[3,2]="10",columns$[3,3]=m2$,columns$[3,10]="T"
        columns$[4,0]="Quantity^Available",    columns$[4,1]="N", columns$[4,2]="10",columns$[4,3]=m2$,columns$[4,10]="T"
        columns$[5,0]="Quantity^On Order",     columns$[5,1]="N", columns$[5,2]="10",columns$[5,3]=m2$,columns$[5,10]="T"
        columns$[6,0]="Order^Point",           columns$[6,1]="N", columns$[6,2]="10"
        columns$[7,0]="EOQ",                   columns$[7,1]="N", columns$[7,2]="10"
        columns$[8,0]="Annual^Usage",          columns$[8,1]="N", columns$[8,2]="10",columns$[8,3]=m2$,columns$[8,10]="T"
        columns$[9,0]="",                      columns$[9,1]="C", columns$[9,2]="3"
        columns$[10,0]="Last Purchase^Date",   columns$[10,1]="C",columns$[10,2]="10"
        columns$[11,0]="Cost",                 columns$[11,1]="N",columns$[11,2]="10",columns$[11,3]=m3$
   
rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,ivm01a_dev,1,meter_num,status

rem --- Report headings

        gosub init_headings
        call pgmdir$+"adc_fiscalperyr.aon",firm_id$,gls01a_dev,when$,period$,year$
        base$=period$+year$

rem --- Position files

        sql_prep$="select ivm_itemwhse.firm_id, ivm_itemwhse.item_id,"
        sql_prep$=sql_prep$+"ivm_itemwhse.warehouse_id, ivm_itemmast.product_type,"
        sql_prep$=sql_prep$+"ivm_itemmast.item_type,ivm_itemwhse.buyer_code,ivm_itemwhse.vendor_id "
        sql_prep$=sql_prep$+"FROM ivm_itemwhse INNER JOIN ivm_itemmast "
        sql_prep$=sql_prep$+"ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
        sql_prep$=sql_prep$+"ivm_itemwhse.firm_id=ivm_itemmast.firm_id "
        where_clause$="WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
        if begbuyer$<>"" where_clause$=where_clause$+"ivm_itemwhse.buyer_code >= '"+begbuyer$+"' AND "
        if endbuyer$<>"" where_clause$=where_clause$+"ivm_itemwhse.buyer_code <= '"+endbuyer$+"' AND "
        if begvendor$<>"" where_clause$=where_clause$+"ivm_itemwhse.vendor_id >= '"+begvendor$+"' AND "
        if endvendor$<>"" where_clause$=where_clause$+"ivm_itemwhse.vendor_id <= '"+endvendor$+"' AND "
        if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
        if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
        if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
        if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
        if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
        if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND"
        if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"

        where_clause$=cvs(where_clause$,2)
        if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
        if sequence$="B" then where_clause$=where_clause$+" order by ivm_itemwhse.buyer_code, ivm_itemwhse.vendor_id, ivm_itemmast.product_type,ivm_itemmast.item_id "
        if where_clause$<>"" sql_prep$=sql_prep$+where_clause$

        read (ivm05a_dev,key=firm_id$+begvendor$,dom=*next)
        
rem --- Get sort record
       
        if sequence$="B"
            sql_chan=sqlunt
            sqlopen(sql_chan,err=*next)stbl("+DBNAME")
            sqlprep(sql_chan)sql_prep$
            dim read_tpl$:sqltmpl(sql_chan)
            sqlexec(sql_chan)
            while more
                read_tpl$=sqlfetch(sql_chan,err=*break) 
                buyer$=read_tpl.buyer_code$
                vendor$=read_tpl.vendor_id$
                product$=read_tpl.product_type$
                item$=read_tpl.item_id$
                whse$=read_tpl.warehouse_id$
                if read_tpl.vendor_id$+read_tpl.product_type$<>last$ then
                    last$=read_tpl.vendor_id$+read_tpl.product_type$
                    x$=fill(m0)
                    if ap$="Y" if cvs(vendor$,2)<>"" x$=fnmask$(vendor$(1,i[0]),m0$)
                endif
                call pgmdir$+"adc_progress.aon","S","","","",buyer$+" "+x$,0,0,1,meter_num,status

rem --- Level breaks

                if buyer$<>t0$ gosub buyer_break
                if ap$="Y" and vendor$<>t1$ gosub vendor_break
                if product$<>t2$ gosub product_break
                if item$<>t3$ gosub item_break
                if type$<>"" if ivm01a.item_type$<>type$ continue

rem --- Additional reads

                ivm05a_key$=firm_id$+vendor$+item$
                lastdate$=""
                lastcost$=""
                venditem$=""
                find record (ivm05a_dev,key=ivm05a_key$,dom=*next) ivm05a$
                if cvs(ivm05a.vendor_item$,2)<>"" venditem$="Vendor Item "+ivm05a.vendor_item$
                if cvs(ivm05a.last_po_date$,2)<>"" then lastdate$=fndate$(ivm05a.last_po_date$)
                lastcost$=str(ivm05a.last_po_cost:m3$)

rem --- New product?

                if h9$<>"" then  
                    xwk=fnblank(columns)
                    OutVect!.addItem(h9$)
                    xwk=fnblank(columns-1)
                    xwk=fnblank(columns)
                    h9$=""
                endif

rem --- New item?
                if description$<>"" then
                    OutVect!.addItem(item$(1,p[0])+"  "+description$)
                    OutVect!.addItem(venditem$)
                    xwk=fnblank(columns-4)
                    OutVect!.addItem(lastdate$)
                    OutVect!.addItem(lastcost$)
                    description$=""
                endif

rem --- Stocking Level is always by warehouse

                gosub retrieve_whse
                gosub print_warehouse

rem --- Done with record
            wend
        endif

    
rem --- Get next vendor/item record

        if sequence$="V" then 
            sql_chan1=sqlunt
            sqlopen(sql_chan1,err=*next)stbl("+DBNAME")
            while more
                ivm05a_key$=key(ivm05a_dev,end=*break)
                if pos(firm_id$=ivm05a_key$)<>1 break
                if endvendor$<>"" if ivm05a.vendor_id$>endvendor$ break
                read record (ivm05a_dev) ivm05a$
                vendor$=ivm05a.vendor_id$
                item$=ivm05a.item_id$
                lastdate$=""
                lastcost$=""
                venditem$=""
                if begitem$<>"" if item$<begitem$ continue
                if enditem$<>"" if item$>enditem$ continue

                call pgmdir$+"adc_progress.aon","S","","","",fnmask$(ivm05a.vendor_id$,m0$)+" "+item$(1,p[0]),0,0,1,meter_num,status

                if cvs(ivm05a.vendor_item$,2)<>"" venditem$="Vendor Item "+ivm05a.vendor_item$
                if cvs(ivm05a.last_po_date$,2)<>"" then lastdate$=fndate$(ivm05a.last_po_date$)
                lastcost$=str(ivm05a.last_po_cost:m3$)

rem --- Additional reads

                if ap$="Y" and vendor$<>t1$ gosub vendor_break
                if item$<>t3$ gosub item_break
                if type$<>"" if ivm01a.item_type$<>type$ continue
                product$=ivm01a.product_type$
                if begprod$<>"" if product$<begprod$ continue
                if endprod$<>"" if product$>endprod$ continue
                if product$<>t2$ gosub product_break
                if ivm01a.stock_level$<>"W" then
                    if begbuyer$<>"" if ivm01a.buyer_code$<begbuyer$ continue
                    if endbuyer$<>"" if ivm01a.buyer_code$>endbuyer$ continue
                endif

rem --- For each warehouse for this item

                first$=firm_id$+item$
                
rem --- Next warehouse

                sql_prep$="select firm_id, item_id, warehouse_id, buyer_code from ivm_itemwhse where firm_id='"+firm_id$+"' and item_id='"+item$+"'"        
                sqlprep(sql_chan1)sql_prep$
                dim whse_tpl$:sqltmpl(sql_chan1)
                sqlexec(sql_chan1)
                while more
                    whse_tpl$=sqlfetch(sql_chan1,err=*break)
                    whse$=whse_tpl.warehouse_id$
                    buyer_code$=whse_tpl.buyer_code$
                    if begwhse$<>"" if whse$<begwhse$ continue
                    if endwhse$<>"" if whse$>endwhse$ break
                    gosub retrieve_whse
                    if begbuyer$<>"" if buyer_code$<begbuyer$ continue
                    if endbuyer$<>"" if buyer_code$>endbuyer$ continue

rem --- Print item heading

                    if description$<>"" then 
                        OutVect!.addItem(item$(1,p[0])+"  "+description$)
                        xwk=fnblank(columns-1)
                        OutVect!.addItem(h9$)
                        OutVect!.addItem(venditem$)
                        xwk=fnblank(columns-4)
                        OutVect!.addItem(lastdate$)
                        OutVect!.addItem(lastcost$)
                        description$=""
                    endif
rem --- Print detail line
                    gosub print_warehouse
                    
rem --- Loop back for next warehouse
                wend

rem --- Loop back for next record
            wend
        endif

done: rem --- All done

        done=1
        gosub item_break
        if number>0 goto std_exit
        OutVect!.addItem("No Items Found")
        xwk=fnblank(10)
        goto std_exit



print_warehouse: rem --- Print warehouse line

        point$=str(point:m2$),eoq$=str(eoq:m2$)

        OutVect!.addItem("")
        OutVect!.addItem("   "+whse$+"  "+location$)
        OutVect!.addItem(str(onhand))
        OutVect!.addItem(str(committed))
        OutVect!.addItem(str(available))
        OutVect!.addItem(str(ordered))
        OutVect!.addItem(point$)
        OutVect!.addItem(eoq$)
        OutVect!.addItem(str(usage))
        OutVect!.addItem(flag$)
        xwk=fnblank(2)
        l1=l1+1
        number=number+1

rem --- Accumulate totals

        total[0]=total[0]+onhand
        total[1]=total[1]+committed
        total[2]=total[2]+available
        total[3]=total[3]+ordered
        total[4]=total[4]+point
        total[5]=total[5]+eoq
        total[6]=total[6]+usage
        return

init_headings: rem --- Initialize HEADINGS$

        dim h1$(width),h2$(width),h3$(width)
        x3$="All Item Types"
        if type$<>"" x3$="Item Type "+cvs(type$,2)
        if sequence$="B" headings$[1]=sysinfo.task_desc$+" By Buyer Code For "+x3$
        if sequence$="V" headings$[1]=sysinfo.task_desc$+" By Vendor For "+x3$
        headings$[2]="[HEADER]"
        if begitem$="" headings$[4]="From Item: First" else headings$[4]="From Item: "+begitem$
        if enditem$="" headings$[4]=headings$[4]+" -- To Item: Last" else headings$[4]=headings$[4]+" -- To Item: "+enditem$
        if begwhse$="" headings$[5]="From Warehouse: First" else headings$[5]="From Warehouse: "+begwhse$
        if endwhse$="" headings$[5]=headings$[5]+" -- To Warehouse: Last" else headings$[5]=headings$[5]+" -- To Warehouse: "+endwhse$
        if begbuyer$="" headings$[6]="From Buyer: First" else headings$[6]="From Buyer: "+begbuyer$
        if endbuyer$="" headings$[6]=headings$[6]+" -- To Buyer: Last" else headings$[6]=headings$[6]+" -- To Buyer: "+endbuyer$
        if begvendor$="" headings$[7]="From Vendor: First" else headings$[7]="From Vendor: "+begvendor$
        if endvendor$="" headings$[7]=headings$[7]+" -- To Vendor: Last" else headings$[7]=headings$[7]+" -- To Vendor: "+endvendor$
        if begprod$="" headings$[8]="From Product: First" else headings$[8]="From Product: "+begprod$                
        if endprod$="" headings$[8]=headings$[8]+" -- To Product: Last" else headings$[8]=headings$[8]+" -- To Product: "+endprod$
        return

buyer_break: rem --- Buyer break

        buyer_head$=""
        t0$=buyer$
        ivm10f.code_desc$=nf$
        find record (ivm10f_dev,key=firm_id$+"F"+t0$,dom=*next) ivm10f$
        buyer_head$="Buyer: "+t0$+" "+ivm10f.code_desc$
        if ap$="Y" gosub vendor_break
        return

vendor_break: rem --- Vendor break

        if sequence$="B" gosub product_break
        if sequence$="V" gosub item_break
        vendor_head$=""
        let t1$=vendor$,apm01a_key$=firm_id$+vendor$,apm01a.vendor_name$=nf$,l=l9+1
        find record (apm01a_dev,key=apm01a_key$,dom=*next) apm01a$
        let vendor_head$="Vendor: "+fnmask$(apm01a.vendor_id$,m0$)+" "+cvs(apm01a.vendor_name$,2)
        if cvs(vendor$,2)="" vendor_head$="Vendor: None"
        BrkVect!.addItem(str(OutVect!.size()/(columns)))
        if sequence$="V" then HdrVect!.addItem(vendor_head$)
        if sequence$="B" then HdrVect!.addItem(buyer_head$+"   "+Vendor_head$)
        return

product_break: rem --- Product break

        if sequence$="B" gosub item_break
        let t2$=product$,ivm10a.code_desc$=nf$
        find record (ivm10a_dev,key=firm_id$+"A"+t2$,dom=*next) ivm10a$
        let h9$="Product Type "+t2$+" "+ivm10a.code_desc$
        return

item_break: rem --- Item break

        if t3$<>"" 
            if l1>1 then 
                point$=str(ivm01a.order_point:m2$),eoq$=str(ivm01a.eoq:m2$)
                TotVect!.addItem(str(OutVect!.size()/(columns)))
                xwk=fnblank(1)
                OutVect!.addItem("Total For Item")
                OutVect!.addItem(str(total[0]))
                OutVect!.addItem(str(total[1]))
                OutVect!.addItem(str(total[2]))
                OutVect!.addItem(str(total[3]))
                OutVect!.addItem(point$)
                OutVect!.addItem(eoq$)
                OutVect!.addItem(str(total[6]))
                xwk=fnblank(3)
                xwk=fnblank(columns)
            endif
        endif

    if done then return
    dim total[6],ivm01a$:ivm01a_tpl$
    let t3$=item$,ivm01a_key$=firm_id$+t3$,ivm01a.item_desc$=nf$,ivm01a.product_type$="",l1=0
    find record (ivm01a_dev,key=ivm01a_key$,dom=*next) ivm01a$
    description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
    product$=ivm01a.product_type$
    if sequence$="V" gosub product_break
    return

retrieve_whse: rem --- Retrieve warehouse record
    dim ivm02a$:ivm02a_tpl$
    let ivm02a_key$=firm_id$+whse$+item$,items$[1]=whse$,items$[2]=item$
    let location$="",available=0,point=0,eoq=0,onhand=0,committed=0,ordered=0
    find record (ivm02a_dev,key=ivm02a_key$,knum=0,dom=item_whse_usage) ivm02a$
    let location$=ivm02a.location$,onhand=ivm02a.qty_on_hand,committed=ivm02a.qty_commit,ordered=ivm02a.qty_on_order
    let available=onhand-committed,point=ivm02a.order_point,eoq=ivm02a.eoq
item_whse_usage:
    call pgmdir$+"ivc_usage.aon",action$,channels[all],items$[all],factors[all],day_of_month,base$,cur_period$,g[0],p[1],usage,estimated,flag$,status
    if flag$<>"" usage=estimated
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
rem --- fnBlank : Create blank cells in OutVect!. No return value
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend


rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src
    end
