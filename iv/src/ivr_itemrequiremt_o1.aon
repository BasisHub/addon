rem --- Inventory Requirements Report (Report Overlay)
rem --- Program ivr_itemrequiremt_o1.aon v8.0.0 11Aug2007 (ivr_mb)
rem --- Created by adx_codeport.bbx v1.1.5 (08/11/2007 11:05:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

            seterr std_error
            setesc std_error

rem --- Document initializations
            OutVect!=bbjAPI().getSysGui().makeVector()
            HdrVect!=bbjAPI().getSysGui().makeVector()
            BrkVect!=bbjAPI().getSysGui().makeVector()
            rep_date$=date(0:"%Mz/%Dz/%Yd")
            rep_date_stamp$=date(0:"%Yd%Mz%Dz")
            rep_time$=date(0:"%hz:%mz %p")
            rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Initializations

            precision p[1]

            dim headings$[8],o[14],total[6],channels[20],items$[2]
            headings$[0]=sysinfo.firm_name$
            when$=sysinfo.system_date$
            x$=fndate$(when$)
            day_of_month=num(x$(4,2))
            channels[1]=ivm01_dev
            channels[2]=ivm02_dev
            channels[3]=ivm03g_dev2
            channels[12]=ivm12_dev
            items$[0]=firm_id$
            clock$=""
            h9$=""
            number=0
            last$=""
            width=132
            page=0
            l9=59
            l=l9+1
            nf$="(Not On File)"
            headings=6
            lastdate$=""
            lastcost$=""
            flag$=""
            if sequence$="B" headings=7
            more=1

rem --- Print positions

            o[12]=width-m3
            o[11]=o[12]-9
            o[10]=o[11]-m2
            for x=9 to 4 step -1
                o[x]=o[x+1]-m2
            next x
            o[3]=o[4]-11
            o[2]=o[3]-3
            o[1]=o[0]+p[0]+1
            w=m0+4
            o[14]=o[11]-p[2]-12
            o[13]=o[14]-36
            dw=o[13]-o[1]-1
            if sequence$="V" w=m0+p[0]+1
            if sequence$="B" dw=o[14]-o[1]-1

rem --- column heading

    if sequence$="V" then
    dim columns$[10,10]
                columns=10
                    columns$[0,0]="Item",                  columns$[0,1]="C", columns$[0,2]="5"
                    columns$[1,0]="Wth Location",          columns$[1,1]="C", columns$[1,2]="30"
                    columns$[2,0]="Quantity On Hand",      columns$[2,1]="N", columns$[2,2]="5", columns$[2,3]=m2$
                    columns$[3,0]="Committed Quantity",    columns$[3,1]="N", columns$[3,2]="10",columns$[3,3]=m2$
                    columns$[4,0]="Quantity Available",    columns$[4,1]="N", columns$[4,2]="5" ,columns$[4,3]=m2$
                    columns$[5,0]="Quantity On Order",     columns$[5,1]="N", columns$[5,2]="10",columns$[5,3]=m2$
                    columns$[6,0]="Order Point",           columns$[6,1]="C", columns$[6,2]="10"
                    columns$[7,0]="EOQ",                   columns$[7,1]="C", columns$[7,2]="10"
                    columns$[8,0]="Annual Usage",          columns$[8,1]="N", columns$[8,2]="10",columns$[8,3]=m2$
                    columns$[9,0]="--Last Purchase-- Date",columns$[9,1]="C", columns$[9,2]="10"
                    columns$[10,0]="Cost",                 columns$[10,1]="C",columns$[10,2]="10"
   endif
   if sequence$="B"
   dim columns$[10,10]
                columns=10
                    columns$[0,0]="Item",                  columns$[0,1]="C", columns$[0,2]="5"
                    columns$[1,0]="Wth Location",          columns$[1,1]="C", columns$[1,2]="30"
                    columns$[2,0]="Quantity On Hand",      columns$[2,1]="N", columns$[2,2]="5", columns$[2,3]=m2$
                    columns$[3,0]="Committed Quantity",    columns$[3,1]="N", columns$[3,2]="10",columns$[3,3]=m2$
                    columns$[4,0]="Quantity Available",    columns$[4,1]="N", columns$[4,2]="5" ,columns$[4,3]=m2$
                    columns$[5,0]="Quantity On Order",     columns$[5,1]="N", columns$[5,2]="10",columns$[5,3]=m2$
                    columns$[6,0]="Order Point",           columns$[6,1]="C", columns$[6,2]="10"
                    columns$[7,0]="EOQ",                   columns$[7,1]="C", columns$[7,2]="10"
                    columns$[8,0]="Annual Usage",          columns$[8,1]="N", columns$[8,2]="10",columns$[8,3]=m2$
                    columns$[9,0]="--Last Purchase-- Date",columns$[9,1]="C", columns$[9,2]="10"
                    columns$[10,0]="Cost",                 columns$[10,1]="C",columns$[10,2]="10"
   endif



rem --- Background

            call pgmdir$+"adc_progress.aon","N","","","","",0,ivm03_dev,1,meter_num,status

rem --- Report headings
            gosub Init_Headings

            seterr position_files
    
            call pgmdir$+"adc_fiscalperyr.aon",firm_id$,gls01a_dev,when$,period$,year$
            base$=period$+year$

position_files: 
            seterr std_error

rem --- Position files

            first$=firm_id$+"F"
            ivm03a_key$=first$+begbuyer$
    
            read (ivm05_dev,key=firm_id$+begvendor$,dom=*next)
            read (ivm03_dev,key=ivm03a_key$,dom=*next)
 
l1000: rem --- Get next sort record
    switch pos(sequence$="BV");rem "switch/case replaces compound if/else.CAH
        case 1; rem sequence$="B" - buyer sequence
            while more
                ivm03a_key$=key(ivm03_dev,end=done)
                if pos(first$=ivm03a_key$)<>1 goto done
                read (ivm03_dev)
                buyer$=ivm03a.buyer_code$
                vendor$=ivm03a.vendor_id$
                product$=ivm03a.product_type$
                item$=ivm03a.item_id$
                whse$=ivm03a.warehouse_id$
                if ivm03a.vendor_id$+ivm03a.product_type$<>last$ then
                    last$=ivm03a.vendor_id$+ivm03a.product_type$
                    x$=fill(m0)
                    if ap$="Y" if cvs(vendor$,2)<>"" x$=fnmask$(vendor$(1,i[0]),m0$)
                endif
                call pgmdir$+"adc_progress.aon","S","","","",buyer$+" "+x$,0,0,1,meter_num,status
                
rem --- Outside range?

                if endbuyer$<>"" if buyer$>endbuyer$ break
                if begvendor$<>"" then
                    if vendor$<begvendor$ then
                        continue
                    endif
                endif
                if endvendor$<>"" then
                    if vendor$>endvendor$ then
                        continue
                    endif
                endif
                if begprod$<>"" then
                    if product$<begprod$ then
                        continue
                    endif
                endif
                if endprod$<>"" then
                    if product$>endprod$ then
                        continue
                    endif
                endif
                if begitem$<>"" then
                    if item$<begitem$ then
                        continue
                    endif
                endif
                if enditem$<>"" then
                    if item$>enditem$ then
                        continue
                    endif
                endif
                if begwhse$<>"" and whse$<>"" then
                    if whse$<begwhse$ then
                            continue
                        endif
                endif
                if endwhse$<>"" and whse$<>"" then
                    if whse$>endwhse$ then
                        continue
                    endif
                endif

rem --- Level breaks

                if buyer$<>t0$ gosub Buyer_Break
                if ap$="Y" and vendor$<>t1$ gosub Vendor_Break
                if product$<>t2$ gosub Product_Break
                if item$<>t3$ gosub Item_Break
                if type$<>"" if ivm01a.item_type$<>type$ continue

rem --- Additional reads

                ivm05a_key$=firm_id$+vendor$+item$
                lastdate$=""
                lastcost$=""
                venditem$=""
                find record (ivm05_dev,key=ivm05a_key$,dom=*next) ivm05a$
                if cvs(ivm05a.vendor_item$,2)<>"" venditem$="Vendor Item "+ivm05a.vendor_item$
                if cvs(ivm05a.last_po_date$,2)<>"" then lastdate$=fndate$(ivm05a.last_po_date$)
                lastcost$=str(ivm05a.last_po_cost:m3$)

rem --- New product?

                if h9$<>"" then
                    if l+2>l9 
                  xwk=fnblank(2)  
                  OutVect!.addItem(h9$)
                  xwk=fnblank(8)
                    l=l+2
                    h9$=""
                endif

rem --- New item?

                if description$<>"" then
	            if l+3>l9 
		endif
                if description$<>"" then
 
                    OutVect!.addItem(ivm01a.item_id$)
                    OutVect!.addItem(description$)
                    OutVect!.addItem("")
 
                    OutVect!.addItem(venditem$)
                    xwk=fnblank(5)
                    OutVect!.addItem(lastdate$)
                    OutVect!.addItem(lastcost$)
                    l=l+2
                    description$=""
                endif

rem --- Stocking Level By Item?

                if ivm01a.stock_level$="I" then
	            read (ivm03g_dev,key=firm_id$+"G"+item$,dom=*next)

Get_Whse: rem --- Get Warehouse For Stocking Level By Item

                    ivm03g_key$=key(ivm03g_dev,end=Done_Record)
                    if pos(firm_id$+"G"+item$=ivm03g_key$)=1 
                    read (ivm03g_dev)
                    whse$=ivm03g_key$.warehouse_id$
                endif

rem --- Retrieve detail line information

                gosub Retrieve_whse

rem --- Print detail line

                gosub Print_warehouse
                if ivm01a.stock_level$="I" goto Get_Whse

Done_Record: rem --- Done with record

            wend
  break

  case 2; rem sequence$="V" - vendor sequence
rem --- Get next vendor/item record

    while more
        ivm05a_key$=key(ivm05_dev,end=*break)
        if pos(firm_id$=ivm05a_key$)<>1 break
        if endvendor$<>"" if ivm05a.vendor_id$>endvendor$ break
        read record (ivm05_dev) ivm05a$
        vendor$=ivm05a.vendor_id$
        item$=ivm05a.item_id$
        lastdate$=""
        lastcost$=""
        venditem$=""
        if begitem$<>"" if item$<begitem$ continue
        if enditem$<>"" if item$>enditem$ continue

        call pgmdir$+"adc_progress.aon","S","","","",fnmask$(ivm05a.vendor_id$,m0$)+" "+item$(1,p[0]),0,0,1,meter_num,status

        if cvs(ivm05a.vendor_item$,2)<>"" venditem$="Vendor Item "+ivm05a.vendor_item$
        if cvs(ivm05a.last_po_date$,2)<>"" then lastdate$=fndate$(ivm05a.last_po_date$)
        lastcost$=str(ivm05a.last_po_cost:m3$)

rem --- Additional reads

        if ap$="Y" and vendor$<>t1$ gosub Vendor_Break
        if item$<>t3$ gosub Item_Break
        if type$<>"" if ivm01a.item_type$<>type$ continue
        product$=ivm01a.product_type$
        if begprod$<>"" if product$<begprod$ continue
        if endprod$<>"" if product$>endprod$ continue
        if product$<>t2$ gosub Product_Break
        if ivm01a.stock_level$<>"W" then
            if begbuyer$<>"" if ivm01a.buyer_code$<begbuyer$ continue
            if endbuyer$<>"" if ivm01a.buyer_code$>endbuyer$ continue
        endif

 rem --- For each warehouse for this item

        first$=firm_id$+"G"+item$
        read (ivm03g_dev,key=first$,dom=*next)

l2400: rem --- Next warehouse
        while more
            ivm03g_key$=key(ivm03g_dev,end=*break)
            if pos(first$=ivm03g_key$)<>1 break
            read (ivm03g_dev)
            whse$=ivm03g_key$.warehouse_id$
            if begwhse$<>"" if whse$<begwhse$ continue
            if endwhse$<>"" if whse$>endwhse$ break
            gosub Retrieve_whse
            if ivm01a.stock_level$<>"I" then
                if begbuyer$<>"" if ivm02a.buyer_code$<begbuyer$ continue
                if endbuyer$<>"" if ivm02a.buyer_code$>endbuyer$ continue
            endif
rem --- Print item heading
            if description$="" goto l2600
            OutVect!.addItem(item$(1,p[0]))
            OutVect!.addItem(description$)
            OutVect!.addItem(h9$)
            OutVect!.addItem(venditem$)
            xwk=fnblank(5)
            OutVect!.addItem(lastdate$)
            OutVect!.addItem(lastcost$)

            l=l+2
            description$=""
	    venditem_bu$=venditem$
	    lastdate_bu$=lastdate$
	    lastcost_bu$=lastcost$

l2600: rem --- Print detail line

            gosub Print_warehouse

l2900: rem --- Loop back for next warehouse
        wend

l3900: rem --- Loop back for next record
    wend

  break

  case default
    continue
    break
 swend  

done: rem --- All done

        done=1
        gosub Item_Break
        if number>0 goto std_exit
        OutVect!.addItem("No Items Found")
        xwk=fnblank(10)
        goto std_exit



Print_warehouse: rem --- Print warehouse line

    point$=""
    eoq$=""
    if ivm01a.stock_level$="W" point$=str(point:m2$),eoq$=str(eoq:m2$)
    if l+1>l9 
        l=l+2
    endif
        OutVect!.addItem("")
        OutVect!.addItem(whse$+location$)
        OutVect!.addItem(str(onhand:m2$))
        OutVect!.addItem(str(committed:m2$))
        OutVect!.addItem(str(available:m2$))
        OutVect!.addItem(str(ordered:m2$))
        OutVect!.addItem(point$)
        OutVect!.addItem(eoq$)
        OutVect!.addItem(str(usage:m2$)+flag$)
        xwk=fnblank(2)
    l=l+1
    l1=l1+1
    number=number+1

rem --- Accumulate totals

            total[0]=total[0]+onhand
            total[1]=total[1]+committed
            total[2]=total[2]+available
            total[3]=total[3]+ordered
            total[4]=total[4]+point
            total[5]=total[5]+eoq
            total[6]=total[6]+usage
            return

Init_Headings: rem --- Initialize HEADINGS$

            dim h1$(width),h2$(width),h3$(width)
            x3$="All Item Types"
            if type$<>"" x3$="Item Type "+cvs(type$,2)
            if sequence$="B" headings$[1]=sysinfo.task_desc$+" By Buyer Code For "+x3$
            if sequence$="V" headings$[1]=sysinfo.task_desc$+" By Vendor For "+x3$
            if sequence$="V" headings$[2]="[HEADER]"
            if begitem$="" headings$[4]="From Item: First" else headings$[4]="From Item: "+begitem$
            if enditem$="" headings$[4]=headings$[4]+" -- To Item: Last" else headings$[4]=headings$[4]+" -- To Item: "+enditem$
            if begwhse$="" headings$[5]="From Warehouse: First" else headings$[5]="From Warehouse: "+begwhse$
            if endwhse$="" headings$[5]=headings$[5]+" -- To Warehouse: Last" else headings$[5]=headings$[5]+" -- To Warehouse: "+endwhse$
            if begbuyer$="" headings$[6]="From Buyer: First" else headings$[6]="From Buyer: "+begbuyer$
            if endbuyer$="" headings$[6]=headings$[6]+" -- To Buyer: Last" else headings$[6]=headings$[6]+" -- To Buyer: "+endbuyer$
            if begvendor$="" headings$[7]="From Vendor: First" else headings$[7]="From Vendor: "+begvendor$
            if endvendor$="" headings$[7]=headings$[7]+" -- To Vendor: Last" else headings$[7]=headings$[7]+" -- To Vendor: "+endvendor$
            if begprod$="" headings$[8]="From Product: First" else headings$[8]="From Product: "+begprod$                
            if endprod$="" headings$[8]=headings$[8]+" -- To Product: Last" else headings$[8]=headings$[8]+" -- To Product: "+endprod$
            return

Buyer_Break: rem --- Buyer break

        if ap$="Y" gosub Vendor_Break
        t0$=buyer$
        ivm10f.code_desc$=nf$
        l=l9+1
        find record (ivm10f_dev,key=firm_id$+"F"+t0$,dom=*next) ivm10f$
        x$="Buyer: "+t0$+" "+ivm10f.code_desc$
        headings$[3](1,len(x$))=x$
        return

Vendor_Break: rem --- Vendor break

        if sequence$="B" gosub Product_Break
        if sequence$="V" gosub Item_Break
        let t1$=vendor$,apm01a_key$=firm_id$+vendor$,apm01a.vendor_name$=nf$,l=l9+1
        find record (apm01_dev,key=apm01a_key$,dom=*next) apm01a$
        let x$="Vendor: "+fnmask$(apm01a.vendor_id$,m0$)+" "+cvs(apm01a.vendor_name$,2)
        if cvs(vendor$,2)="" x$="Vendor: None"
        if sequence$="B" headings$[3](78)="",headings$[3](width-len(x$)+1)=x$
        if sequence$="V" 
                     BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
                     HdrVect!.addItem(x$)
        return

Product_Break: rem --- Product break

        if sequence$="B" gosub Item_Break
        let t2$=product$,ivm10a.code_desc$=nf$
        find record (ivm10a_dev,key=firm_id$+"A"+t2$,dom=*next) ivm10a$
        let h9$="Product Type "+t2$+" "+ivm10a.code_desc$
        return

Item_Break: rem --- Item break

        if t3$="" then goto Item_Break_Next

        let point$="",eoq$=""
        if l1<2 then goto Item_Break_Next
        if l+1>l9 

        
        l=l+2
    endif
    if ivm01a.stock_level$="I" point$=str(ivm01a.order_point:m2$),eoq$=str(ivm01a.eoq:m2$)
        xwk=fnblank(1)
        OutVect!.addItem("Total For Item")
        OutVect!.addItem(str(total[0]:m2$))
        OutVect!.addItem(str(total[1]:m2$))
        OutVect!.addItem(str(total[2]:m2$))
        OutVect!.addItem(str(total[3]:m2$))
        OutVect!.addItem(point$)
        OutVect!.addItem(eoq$)
        OutVect!.addItem(str(total[6]:m2$))
        xwk=fnblank(2)
        xwk=fnblank(11)
    let l=l+1

Item_Break_Next:
    if done then goto Item_Break_Done

    dim description$(dw),total[6],ivm01a$:ivm01a_tpl$
    let t3$=item$,ivm01a_key$=firm_id$+t3$,ivm01a.item_desc$=nf$,ivm01a.product_type$="",l1=0
    find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$
    let description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
    product$=ivm01a.product_type$
    if sequence$="V" gosub Product_Break
 
Item_Break_Done:
    return

Retrieve_whse: rem --- Retrieve warehouse record

    dim ivm02a$:ivm02a_tpl$
    let ivm02a_key$=firm_id$+whse$+item$,items$[1]=whse$,items$[2]=item$
    let location$="",available=0,point=0,eoq=0,onhand=0,committed=0,ordered=0
    find record (ivm02_dev,key=ivm02a_key$,dom=Item_Whse_Usage) ivm02a$
    let location$=ivm02a.location$,onhand=ivm02a.qty_on_hand,committed=ivm02a.qty_commit,ordered=ivm02a.qty_on_order
    let available=onhand-committed,point=ivm02a.order_point,eoq=ivm02a.eoq
Item_Whse_Usage:
    call pgmdir$+"ivc_usage.aon",action$,channels[all],items$[all],factors[all],day_of_month,base$,cur_period$,g[0],p[1],usage,estimated,flag$,status
    if flag$<>"" usage=estimated
    if ivm01a.stock_level$<>"W" point=0,eoq=0
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
rem --- fnBlank : Create blank cells in OutVect!. No return value
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend


rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src
    end
