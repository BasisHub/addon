rem --- Inventory Analysis Report (Report Overlay)
rem --- Program ivr_itemanalysis_o1.aon v8.0.0 18Jul2007 (ivr_hb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/18/2007 11:58:52)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]
    dim headings$[6]
    dim files[3],items$[2],periods$[1],activity[12]
    dim whse[1],report[1]
    m7$="-###0.0000%"
    m8$="############.0000"
    files[2]=ivm12_dev
    files[3]=ivm02a_dev
    headings=6
    t0$=""
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    when$=sysinfo.system_date$
    clock$=""
    h9$=""
    width=132
    page=0
    done=0
    action$="T"
    periods$[0]=begyear$+begper$; rem period1$
    periods$[1]=endyear$+endper$; rem period2$
    if base$="U" then h7$="Used", h8$="Usage"
    if base$="S" then h7$="Sold", h8$="Sales"
    headings$[2]="Based On Total "+h8$+" For Period "+begper$+" "+begyear$+" Through Period "+endper$+" "+endyear$
    more=1
    recs=0
    total_recs=0

    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,11,15
    call pgmdir$+"adc_sizemask.aon",m3$,m3,11,15

rem --- Background

    call pgmdir$+"adc_progress.aon","N","IVM_ITEMWHSE","","","",0,ivm02a_dev,1,meter_num,status

rem --- Report headings

    headings$[1]=headings$[1]+" By Warehouse"
    headings$[3]="[HEADER]"
    if begitem$="" headings$[4]="From Item: First" else headings$[4]="From Item: "+begitem$
    if enditem$="" headings$[4]=headings$[4]+" -- To Item: Last" else headings$[4]=headings$[4]+" -- To Item: "+enditem$
    if begprod$="" headings$[5]="From Product: First" else headings$[5]="From Product: "+begprod$                
    if endprod$="" headings$[5]=headings$[5]+" -- To Product: Last" else headings$[5]=headings$[5]+" -- To Product: "+endprod$
    if type$="" headings$[6]="All Item Types" else headings$[6]="Item Type: "+type$

rem --- column heading

    dim columns$[9,10]
    columns=10
    columns$[0,0]="Item/Description",       columns$[0,1]="C",   columns$[0,2]="25"
    columns$[1,0]="Prod^Type",              columns$[1,1]="C",   columns$[1,2]="5"
    columns$[2,0]="UM",                     columns$[2,1]="C",   columns$[2,2]="5"
    columns$[3,0]="Units^"+h7$,             columns$[3,1]="N",   columns$[3,2]="10",columns$[3,3]=m2$
    columns$[4,0]="Units^Cost",             columns$[4,1]="N",   columns$[4,2]="10",columns$[4,3]=m3$
    columns$[5,0]="Total^"+h8$,             columns$[5,1]="N",   columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"
    columns$[6,0]="Cumulative  ^ pct of "+h8$+"   ",  columns$[6,1]="N",   columns$[6,2]="10"
    columns$[7,0]="Quantity  ^On Hand",       columns$[7,1]="N",   columns$[7,2]="10",columns$[7,3]=m2$
    columns$[8,0]="Total^Value",            columns$[8,1]="N",   columns$[8,2]="10",columns$[8,3]=m1$,columns$[8,10]="T"
    columns$[9,0]="Cumulative  ^ pct of Value   ", columns$[9,1]="N",   columns$[9,2]="10",columns$[9,3]=m7$

rem --- Loop Starting

    sql_prep$=""
    sql_prep$=sql_prep$+"SELECT ivm_itemwhse.firm_id, ivm_itemwhse.item_id,"
    sql_prep$=sql_prep$+"       ivm_itemwhse.warehouse_id, ivm_itemmast.product_type,"
    sql_prep$=sql_prep$+"       ivm_itemmast.item_type "
    sql_prep$=sql_prep$+"  FROM ivm_itemwhse INNER JOIN ivm_itemmast "
    sql_prep$=sql_prep$+"    ON ivm_itemwhse.item_id=ivm_itemmast.item_id AND "
    sql_prep$=sql_prep$+"       ivm_itemwhse.firm_id=ivm_itemmast.firm_id "

    where_clause$="WHERE ivm_itemwhse.firm_id = '"+firm_id$+"' AND "
    if begwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id >= '"+begwhse$+"' AND "
    if endwhse$<>"" where_clause$=where_clause$+"ivm_itemwhse.warehouse_id <= '"+endwhse$+"' AND "
    if begprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type >= '"+begprod$+"' AND "
    if endprod$<>"" where_clause$=where_clause$+"ivm_itemmast.product_type <= '"+endprod$+"' AND "
    if begitem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id >= '"+begitem$+"' AND "
    if enditem$<>"" where_clause$=where_clause$+"ivm_itemwhse.item_id <= '"+enditem$+"' AND "
    if type$<>"" where_clause$=where_clause$+"ivm_itemmast.item_type = '"+type$+"'"

    where_clause$=cvs(where_clause$,2)
    if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
    where_clause$=where_clause$+" ORDER BY ivm_itemwhse.warehouse_id,ivm_itemwhse.item_id "
    sql_prep$=sql_prep$+where_clause$

    sql_chan=sqlunt
    sqlopen(sql_chan,err=*next)stbl("+DBNAME")
    sqlprep(sql_chan)sql_prep$
    dim read_tpl$:sqltmpl(sql_chan)
    sqlexec(sql_chan)

rem --- Main Read

    while more
        read_tpl$=sqlfetch(sql_chan,err=*break) 
        product$=read_tpl.product_type$
        item$=read_tpl.item_id$
        whse$=read_tpl.warehouse_id$
        x$=whse$+" "+product$+" "+item$(1,p[0])

    rem --- Accumulate totals

        find record (ivm01_dev,key=firm_id$+item$,dom=*continue) ivm01a$
        if type$<>"" and ivm01a.item_type$<>type$ then continue
        gosub accum_total_whse

    rem --- Write ivw-01 item record

        ivw01a_key.firm_id$=firm_id$
        ivw01a_key.warehouse_id$=whse$
        ivw01a_key.recip_sign$=sign$
        ivw01a_key.recip_amount$=amount$
        ivw01a_key.item_id$=item$
        ivw01a.firm_id$=firm_id$
        ivw01a.warehouse_id$=whse$
        ivw01a.recip_sign$=sign$
        ivw01a.recip_amount$=amount$
        ivw01a.item_id$=item$
        ivw01a.unit_cost=cost
        ivw01a.usage_qty=usage
        ivw01a.qty_on_hand=onhand
        ivw01a$ = field(ivw01a$)
        write record (ivw01_dev,key=ivw01a_key$) ivw01a$

    rem --- Write ivw-02 totals record

        ivw02a_key.firm_id$=firm_id$
        ivw02a_key.warehouse_id$=whse$
        ivw02a.firm_id$=firm_id$
        ivw02a.warehouse_id$=whse$
        ivw02a.total_usage=0
        ivw02a.total_value=0
        find record (ivw02_dev,key=ivw02a_key$,dom=*next) ivw02a$
        ivw02a.total_usage=ivw02a.total_usage+cost*usage
        ivw02a.total_value=ivw02a.total_value+cost*onhand
        ivw02a$ = field(ivw02a$)
        write record (ivw02_dev,key=ivw02a_key$,err=ivw02_reg_write) ivw02a$
        continue
    ivw02_reg_write: 
        write (ivw02_dev,key=ivw02a_key$) ivw02a_key$,ivw02a.total_usage,ivw02a.total_value     
    wend 

rem --- Position file

    ivw02a_key.firm_id$=firm_id$
    ivw02a_key.warehouse_id$=""
    ivw02a.firm_id$=firm_id$
    ivw02a.warehouse_id$=""
    ivw02a.total_usage=0
    ivw02a.total_value=0
    total_percent=0
    bar=0
    read (ivw01_dev,key="",dom=*next)

rem --- Read next work record

    while more ; Rem ----Loop Starting
        read record (ivw01_dev,end=done) ivw01a$
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        cost$=""
        cost=ivw01a.unit_cost
        usage=ivw01a.usage_qty
        onhand=ivw01a.qty_on_hand

    rem --- Warehouse break?

        if ivw01a.warehouse_id$<>t0$ gosub whsebreak

    rem --- Additional reads

        ivm01a_key$=firm_id$+ivw01a.item_id$
        find record (ivm01_dev,key=ivm01a_key$) ivm01a$
        description$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        product$=ivm01a.product_type$
        um$=ivm01a.unit_of_sale$

    rem --- Perform detail line calculations

        item_usage=cost*usage
        item_value=onhand*cost
        cum_usage=cum_usage+item_usage
        cum_value=cum_value+item_value
        usage_percent=0
        value_percent=0
        percent$=""
        if total_usage<>0 item_usage_percent=(item_usage*100)/total_usage
        if total_usage<>0 usage_percent=(cum_usage*100)/total_usage
        if total_value<>0 value_percent=(cum_value*100)/total_value
        if total_percent<100 percent$=str(usage_percent:m7$)

    rem --- Print detail line

        OutVect!.addItem(ivm01a.item_id$)
        OutVect!.addItem(product$)
        OutVect!.addItem(um$)
        OutVect!.addItem(str(usage))
        OutVect!.addItem(str(cost))
        OutVect!.addItem(str(item_usage))
        OutVect!.addItem(percent$)
        OutVect!.addItem(str(onhand))
        OutVect!.addItem(str(item_value))
        OutVect!.addItem(str(value_percent))
        OutVect!.addItem("  "+description$)
        xwk=fnblank(columns-1)
        total_percent=total_percent+item_usage_percent
        recs=recs+1

    rem --- Accumulate totals

        whse[0]=whse[0]+item_usage
        whse[1]=whse[1]+item_value
        report[0]=report[0]+item_usage
        report[1]=report[1]+item_value

    rem --- Reached 100% of usage yet?

        if total_percent<100 then continue
        if bar then continue
        xwk=fnblank(columns)
        OutVect!.addItem(fill(25,"-"))
        OutVect!.addItem(fill(5,"-"))
        OutVect!.addItem(fill(5,"-"))
        for i=1 to columns-3
            OutVect!.addItem(fill(10,"-"))
        next i
        xwk=fnblank(columns)
        bar=1

    wend ; Rem ----Loop Ending

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    done=1
    gosub whsebreak
    xwk=fnblank(columns)
    TotVect!.addItem(str(OutVect!.size()/(columns)))
    OutVect!.addItem("Total For Report")
    xwk=fnblank(columns-6)
    OutVect!.addItem(str(report[0]))
    xwk=fnblank(2)
    OutVect!.addItem(str(report[1]))
    OutVect!.addItem("")
    goto std_exit

whsebreak: rem --- Warehouse Break

    if t0$<>"" then
        x$="Total For "+h9$
        xwk=fnblank(columns)
        TotVect!.addItem(str(OutVect!.size()/(columns)))
        OutVect!.addItem(x$)
        xwk=fnblank(columns-6)
        OutVect!.addItem(str(whse[0]))
        xwk=fnblank(2)
        OutVect!.addItem(str(whse[1]))
        OutVect!.addItem("")
        xwk=fnblank(columns)
    endif

    if done return
    dim whse[1]
    t0$=ivw01a.warehouse_id$
    ivm10c.short_name$="(Not on File)"
    ivw02a_key.firm_id$=firm_id$
    ivw02a_key.warehouse_id$=t0$
    ivw02a.firm_id$=firm_id$
    ivw02a.warehouse_id$=t0$
    ivw02a.total_usage=0
    ivw02a.total_value=0
    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
    h9$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2)
    bar=0
    BrkVect!.addItem(str(OutVect!.size()/(columns)))
    HdrVect!.addItem(h9$)
    find record (ivw02_dev,key=ivw02a_key$,dom=*next) ivw02a$
    let total_usage=ivw02a.total_usage,total_value=ivw02a.total_value,total_percent=0
    let cum_usage=0,cum_value=0
    return

accum_total_whse: rem --- Accumulate warehouse totals

    dim activity[12]
    let ivm02a_key$=firm_id$+item$+whse$,items$[0]=firm_id$,items$[1]=whse$,items$[2]=item$
    let cost=0,usage=0,onhand=0
    find record (ivm02a_dev,key=ivm02a_key$,knum=2,dom=call_accum_total_whse) ivm02a$
    let onhand=ivm02a.qty_on_hand,cost=ivm02a.unit_cost
call_accum_total_whse: 
    call pgmdir$+"ivc_whseact.aon",action$,files[all],items$[all],periods$[all],activity[all],status
    if base$="S" usage=activity[3]-activity[8]
    if base$="U" usage=(activity[3]+activity[4])-activity[8]
    return

total_usage: rem --- Calculate total amount of usage

    amount=usage*cost,sign$=" ",amount$=str(100000000000-amount:m8$)
    if amount<=0 sign$="-",amount$=str(amount:m8$)
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:       cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
