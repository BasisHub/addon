rem ivc - Return Period Quantity Based On Activity Type
rem Program ivc_periodqty.aon v8.0.0 18Oct2006 (ivc_pa)
rem Created by adx_codeport.bbx v1.1.1 (10/18/2006 03:30:24)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 04Apr2009 |
rem  |  Copyright (c) 1981-2009 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- selection$  : Activity Type Code (input)
rem --- rec$        : IVM_ITEMACT (ivm-12) or IVM_LSACT (ivm-17) record (input)
rem --- q[all]      : Numerics from IVM_ITEMACT or IVM_LSACT (input/returned)
rem --- quantity    : Period Quantity (returned)
rem --- status      : Only set by the error routine (returned)

rem ==========================================================================
rem 	If rec$ id null, the numerics must be passed in q[all].  Otherwise it
rem 	is assumed that rec$ is used to set q[all].
rem ==========================================================================

    seterr std_error
    setesc std_error
	
    enter selection$,rec$,q[all],quantity,status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    quantity=0
	
	if rec$ <> "" then
		dim q[8]
		q[0] = rec.beg_balance
		q[1] = rec.qty_received
		q[2] = rec.qty_built
		q[3] = rec.qty_sold
		q[4] = rec.qty_issued
		q[5] = rec.qty_adjust
		q[6] = rec.qty_xfer_in
		q[7] = rec.qty_xfer_out
		q[8] = rec.qty_returned
	endif

rem --- Check arguments

    p = pos(selection$="BEG REC BLT SLD ISS ADJ XFI XFO RET END IN  OUT USE XFR OTH ", 4)
    if p = 0 then goto done
    p = int(p/4)
	ending = q[0] + q[1] + q[2] - q[3] - q[4] + q[5] + q[6] - q[7] + q[8]

rem --- Calculation required?

    if p <= 8 then 
		quantity = q[p]
	else

rem --- Perform required calculation

		switch p
			case 9
				quantity = ending
				break
			case 10
				quantity = q[1] + q[2]
				break
			case 11
				quantity = q[3] + q[4]
				break
			case 12
				quantity = ending - q[0]
				break
			case 13
				quantity = q[6] - q[7]
				break
			case 14
				quantity = q[5] + q[8]
				break
		swend
	
	endif

done: rem --- All done

    goto std_exit

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_error_exit)
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
