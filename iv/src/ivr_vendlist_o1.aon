rem --- Inventory Vendor Listing (Report Overlay)
rem --- Program ivr_vendlist_o1.aon v8.0.0 16Jul2007 (ivr_ib)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:43:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations
                OutVect!=bbjAPI().getSysGui().makeVector()
                HdrVect!=bbjAPI().getSysGui().makeVector()
                BrkVect!=bbjAPI().getSysGui().makeVector()
                rep_date$=date(0:"%Mz/%Dz/%Yd")
                rep_date_stamp$=date(0:"%Yd%Mz%Dz")
                rep_time$=date(0:"%hz:%mz %p")
                rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Init Data

                precision p[1]
                width=132
                headings=5
                dim d[12],o[13],headings$[headings+1]
                h=0
                l9=59
                l=l9+1
                when$=sysinfo.system_date$
                clock$=""
                x$=fndate$(when$)
                headings$[0]=n1$
                headings$[1]=n3$
                day_of_mth=num(x$(4,2))
                headings$[6]="[HEADER]"
                m9=len(m9$)
                if beg_item$="" headings$[3]="From Item: First" else headings$[3]="From Item: "+beg_item$
                if end_item$="" headings$[3]=headings$[3]+" -- To Item: Last" else headings$[3]=headings$[3]+" -- To Item: "+end_item$
                if beg_prod$="" headings$[4]="From Product: First" else headings$[4]="From Product: "+beg_prod$                
                if end_prod$="" headings$[4]=headings$[4]+" -- To Product: Last" else headings$[4]=headings$[4]+" -- To Product: "+end_prod$
                if item_type$="" headings$[5]="Item Type: All" else headings$[5]="Item Type: "+item_type$
                base_peryr$=ivs01a.current_per$+ivs01a.current_year$

                call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMVEND","PRIMARY",ivm05_key_tpl$,rd_table_chans$[all],status$
                dim ivm05a_key$:ivm05_key_tpl$
                More=1

rem ---  column heading

 dim columns$[12,10]
 columns=12
               columns$[0,0]="Item",                  columns$[0,1]="C",columns$[0,2]="30"
               columns$[1,0]="Prod Tp",               columns$[1,1]="C",columns$[1,2]="3"
               columns$[2,0]="UM",                    columns$[2,1]="C",columns$[2,2]="3"
               columns$[3,0]="Stk Lev",               columns$[3,1]="C",columns$[3,2]="3"
               columns$[4,0]="P/S",                   columns$[4,1]="C",columns$[4,2]="3"
               columns$[5,0]="Vendor Item",           columns$[5,1]="C",columns$[5,2]="10"
               columns$[6,0]="Lst Purch Dt/",         columns$[6,1]="C",columns$[6,2]="8"
               columns$[7,0]="Lead/",                 columns$[7,1]="C",columns$[7,2]="8"
               columns$[8,0]="Unit Cost",             columns$[8,1]="N",columns$[8,2]="8",columns$[8,3]="#00"
               columns$[9,0]="  EOQ",                 columns$[9,1]="C",columns$[9,2]="10"
               columns$[10,0]="Annual Usage",         columns$[10,1]="N",columns$[10,2]="8",columns$[10,3]=m3$
               columns$[11,0]="Quantity Break",       columns$[11,1]="N",columns$[11,2]="8",columns$[11,3]=m2$
               columns$[12,0]="Cost Break",           columns$[12,1]="N",columns$[12,2]="8",columns$[12,3]=m3$

rem --- Background

            call pgmdir$+"adc_progress.aon","N","","","","",0,ivm05_dev,1,meter_num,status

rem --- Initial Read

            read (ivm05_dev,key=firm_id$+beg_vend$,dom=*next)

rem ----  Loop Starting

    While More  
            ivm05a_key$=key(ivm05_dev,end=*break)
            if pos(firm_id$=ivm05a_key$)<>1 break
            if end_vend$<>"" if ivm05a_key.vendor_id$>end_vend$ break
            if beg_item$<>"" then if ivm05a_key.item_id$<beg_item$ then ivm05a_key$=ivm05a_key.firm_id$+ivm05a_key.vendor_id$+beg_item$
            if end_item$<>"" then if ivm05a_key.item_id$>end_item$ then ivm05a_key$=ivm05a_key.firm_id$+ivm05a_key.vendor_id$+$FF$

rem --- Position ivm-05
            read record (ivm05_dev,key=ivm05a_key$,dom=*Continue) ivm05a$
            if ivm05a.firm_id$<>firm_id$ break

rem --- Additional Reads

            find record (ivm01_dev,key=firm_id$+ivm05a_key.item_id$,dom=*Continue) ivm01a$

            find record (apm01_dev,key=firm_id$+ivm05a.vendor_id$,dom=*Continue)

            if beg_prod$<>"" then
                  if ivm01a.product_type$<beg_prod$ Continue
            endif
            if end_prod$<>"" then
                 if ivm01a.product_type$>end_prod$ Continue
            endif
            if item_type$<>"" then
                 if ivm01a.item_type$<>item_type$ Continue  
            endif
rem --- Breaks

            if ivm05a.vendor_id$<>t0$ gosub Vendor

            call pgmdir$+"adc_progress.aon","S","","","",fnmask$(ivm05a.vendor_id$(1,vendlen),m9$)+" "+ivm05a.item_id$,0,0,1,meter_num,status

rem --- Get Actual Annual Usage & EOQ

            dim channs[12],item$[2],whse$[2],whse[20]
            channs[1]=ivm01_dev
            channs[2]=ivm02_dev
            channs[3]=ivm03g_dev
            channs[12]=ivm12_dev
            item$[0]=firm_id$
            item$[1]=""
            item$[2]=ivm01a.item_id$
            call pgmdir$+"ivc_usage.aon","I",channs[all],item$[all],abcf[all],day_of_mth,base_peryr$,
:	        ivs01a.current_per$+ivs01a.current_year$,g[0],p[1],w0,estimated,flag$,status
            if flag$<>"" w0=estimated
            if status<>0 usage$=fill(m2,"*") else usage$=str(w0:m2$)
            if ivm01a.stock_level$="I" then
                eoq_code$=ivm01a.eoq_code$
                eoq_qty$=str(ivm01a.eoq:m2$) 
            else
		call pgmdir$+"ivc_whseinfo.aon","A",channs[all],item$[all],whse$[all],whse[all],value,status,rd_table_chans$[all]
		if status<>0 eoq_code$="*",eoq_qty$=fill(m2,"*") else eoq_code$=whse$[1](57,1),eoq_qty$=str(whse[6]:m2$)
	    endif
            d9$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])

                    OutVect!.addItem(ivm01a.item_id$+d9$)
                    OutVect!.addItem(ivm01a.product_type$)
                    OutVect!.addItem(ivm01a.purchase_um$)
                    OutVect!.addItem(ivm01a.stock_level$)
                    OutVect!.addItem(ivm05a.prisec_flag$)
                    OutVect!.addItem(ivm05a.vendor_item$)
                    OutVect!.addItem(fndate$(pad(ivm05a.last_po_date$,8)))
                    OutVect!.addItem(str(ivm05a.last_po_lead :"##0"))
                    OutVect!.addItem(str(ivm05a.last_po_cost:m3$))
                    OutVect!.addItem(eoq_qty$+eoq_code$)
                    OutVect!.addItem(usage$+flag$)
      
            if ivm05a.unit_cost_01<>0 then 
                    OutVect!.addItem(str(ivm05a.break_qty_01:m2$))
                    OutVect!.addItem(str(ivm05a.unit_cost_01:m3$))
            else
                    xwk=fnblank(2)
            endif
            if ivm05a.unit_cost_02<>0 then
                    xwk=fnblank(11)
                    OutVect!.addItem(str(ivm05a.break_qty_02:m2$))
                    OutVect!.addItem(str(ivm05a.unit_cost_02:m3$)) 
            else
                    xwk=fnblank(13)
            endif
            if ivm05a.unit_cost_03<>0 then 
                    xwk=fnblank(11)
                    OutVect!.addItem(str(ivm05a.break_qty_03:m2$))
                    OutVect!.addItem(str(ivm05a.unit_cost_03:m3$))
            else          
                    xwk=fnblank(13)
            endif  
            t0=t0+1         
    wend ; Rem ----  Loop ending

done: rem --- All done

            t9$="E"
            gosub Vendor
            goto std_exit

Vendor: rem --- Vendor
        if t0$<>"" then
            xwk=fnblank(13)   
            OutVect!.addItem(str(t0:"###,##0")+"  Items For"+h3$);xwk=fnblank(12)
            xwk=fnblank(13)
            l=l9+1,t1$=""
        endif
        if t9$<>"" return
        let t0$=ivm05a.vendor_id$,h3$="Vendor: "+t0$+" Not On File",t0=0
        find record (apm01_dev,key=firm_id$+ivm05a.vendor_id$,dom=VendorInit) apm01a$
        let h3$=cvs("Vendor: "+fnmask$(apm01a.vendor_id$(1,vendlen),m9$)+" "+apm01a.vendor_name$,2)
VendorInit:
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        HdrVect!.addItem(h3$)
        return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
