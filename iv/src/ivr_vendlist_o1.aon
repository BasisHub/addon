rem --- Inventory Vendor Listing (Report Overlay)
rem --- Program ivr_vendlist_o1.aon v8.0.0 16Jul2007 (ivr_ib)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 12:43:01)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Init Data

    precision p[1]
    width=132
    headings=7
    dim headings$[headings+1]
    h=0
    when$=sysinfo.system_date$
    clock$=""
    x$=fndate$(when$)
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    day_of_mth=num(x$(4,2))
    headings$[8]="[HEADER]"
                
    if beg_item$="" headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_FIRST") else headings$[3]=Translate!.getTranslation("AON_FROM_ITEM:_")+beg_item$
    if end_item$="" headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_LAST") else headings$[3]=headings$[3]+Translate!.getTranslation("AON__--_TO_ITEM:_")+end_item$
    if beg_prod$="" headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_FIRST") else headings$[4]=Translate!.getTranslation("AON_FROM_PRODUCT:_")+beg_prod$                
    if end_prod$="" headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_LAST") else headings$[4]=headings$[4]+Translate!.getTranslation("AON__--_TO_PRODUCT:_")+end_prod$
    if item_type$="" headings$[5]=Translate!.getTranslation("AON_ITEM_TYPE:_ALL") else headings$[5]=Translate!.getTranslation("AON_ITEM_TYPE:_")+item_type$
    headings$[6]=Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_VENDORS")+" = "+inactive$
    headings$[7]=Translate!.getTranslation("AON_EXCLUDE_INACTIVE")+Translate!.getTranslation("AON_ITEMS")+" = "+inactive_item$
    base_peryr$=ivs01a.current_per$+ivs01a.current_year$

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_ITEMVEND","PRIMARY",ivm05_key_tpl$,rd_table_chans$[all],status$
    dim ivm05a_key$:ivm05_key_tpl$
    more=1
    recs=0
    total_recs=0

rem ---  column heading

    dim columns$[14,10]
    columns=15
        columns$[0,0]=Translate!.getTranslation("AON_ITEM"),                  columns$[0,1]="C",columns$[0,2]="15"
        columns$[1,0]=Translate!.getTranslation("AON_PROD^TYPE"),             columns$[1,1]="C",columns$[1,2]="5"
        columns$[2,0]="UM",                    columns$[2,1]="C",columns$[2,2]="5"
        columns$[3,0]=Translate!.getTranslation("AON_STK^LEV"),               columns$[3,1]="C",columns$[3,2]="3"
        columns$[4,0]="P/S",                   columns$[4,1]="C",columns$[4,2]="5"
        columns$[5,0]=Translate!.getTranslation("AON_VENDOR_ITEM"),           columns$[5,1]="C",columns$[5,2]="10"
        columns$[6,0]=Translate!.getTranslation("AON_LAST_PURCH^DATE"),       columns$[6,1]="C",columns$[6,2]="8"
        columns$[7,0]=Translate!.getTranslation("AON_LAST_PURCH^LEAD"),       columns$[7,1]="C",columns$[7,2]="8"
        columns$[8,0]=Translate!.getTranslation("AON_LAST_PURCH^UNIT_COST"),  columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m3$
        columns$[9,0]="  EOQ",                 columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m2$
        columns$[10,0]="",                     columns$[10,1]="C",columns$[10,2]="3"
        columns$[11,0]=Translate!.getTranslation("AON_ANNUAL^USAGE"),         columns$[11,1]="N",columns$[11,2]="10",columns$[11,3]=m2$
        columns$[12,0]="",                     columns$[12,1]="C",columns$[12,2]="3"
        columns$[13,0]=Translate!.getTranslation("AON_QUANTITY^BREAK"),       columns$[13,1]="N",columns$[13,2]="10",columns$[13,3]=m2$
        columns$[14,0]=Translate!.getTranslation("AON_COST^BREAK"),           columns$[14,1]="N",columns$[14,2]="10",columns$[14,3]=m3$

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Background

    call pgmdir$+"adc_progress.aon","N","IVM_ITEMVEND","","","",0,ivm05_dev,1,meter_num,status

rem --- Initial Read

    read (ivm05_dev,key=firm_id$+beg_vend$,dom=*next)

rem ----  Loop Starting

    while more  

        ivm05a_key$=key(ivm05_dev,end=*break)
        if pos(firm_id$=ivm05a_key$)<>1 break
        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call stbl("+DIR_PGM")+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status

        if end_vend$<>"" and ivm05a_key.vendor_id$>end_vend$ then break
        if beg_item$<>"" and ivm05a_key.item_id$<beg_item$ then ivm05a_key$=ivm05a_key.firm_id$+ivm05a_key.vendor_id$+beg_item$
        if end_item$<>"" and ivm05a_key.item_id$>end_item$ then ivm05a_key$=ivm05a_key.firm_id$+ivm05a_key.vendor_id$+$FF$

rem --- Position ivm-05

        read record (ivm05_dev,key=ivm05a_key$,dom=*continue) ivm05a$
        if ivm05a.firm_id$<>firm_id$ break

rem --- Additional Reads

        find record (ivm01_dev,key=firm_id$+ivm05a_key.item_id$,dom=*continue) ivm01a$
        rem -- Check for inactive item
        if inactive_item$="Y" and ivm01a.item_inactive$="Y" then continue
        find record (apm01_dev,key=firm_id$+ivm05a.vendor_id$,dom=*continue) apm01a$
        if beg_prod$<>"" and ivm01a.product_type$<beg_prod$ then continue
        if end_prod$<>"" and ivm01a.product_type$>end_prod$ then continue
        if item_type$<>"" and ivm01a.item_type$<>item_type$ then continue  
        rem "Inactive Vendor Feature"
        if inactive$="Y" and apm01a.vend_inactive$="Y" then continue

rem --- Breaks

        if ivm05a.vendor_id$<>t0$ gosub vendor_break

rem --- Get Actual Annual Usage & EOQ

        dim channs[12],item$[2],whse$[2],whse[20]
        channs[1]=ivm01_dev
        channs[2]=ivm02_dev
        channs[3]=ivm03g_dev;rem not used
        channs[12]=ivm12_dev
        item$[0]=firm_id$
        item$[1]=""
        item$[2]=ivm01a.item_id$
        call pgmdir$+"ivc_usage.aon","I",channs[all],item$[all],abcf[all],day_of_mth,base_peryr$,
:	        ivs01a.current_per$+ivs01a.current_year$,g[0],p[1],w0,estimated,flag$,usage_tpls$[all],status

        if flag$<>"" w0=estimated
        if status<>0 usage=0 else usage=w0

        rem Stocking level is always at the warehouse now

        call pgmdir$+"ivc_whseinfo.aon","A",channs[all],item$[all],whse$[all],whse[all],value,rd_table_chans$[all],whseinfo_tpls$[all],status
        if status<>0 
            eoq_code$="*"
            eoq_qty=0
        else
            dim ivm02a$:fattr(ivm02a$)
            ivm02a$=whse$[1]
            eoq_code$=ivm02a.eoq_code$
            eoq_qty=whse[6]
        endif

        d9$=fnitem$(ivm01a.item_desc$,p[3],p[4],p[5])
        OutVect!.addItem(ivm01a.item_id$)
        OutVect!.addItem(ivm01a.product_type$)
        OutVect!.addItem(ivm01a.purchase_um$)
        OutVect!.addItem(ivm01a.stock_level$)
        OutVect!.addItem(ivm05a.prisec_flag$)
        OutVect!.addItem(ivm05a.vendor_item$)
        OutVect!.addItem(fndate$(pad(ivm05a.last_po_date$,8)))
        OutVect!.addItem(str(ivm05a.last_po_lead :"##0"))
        OutVect!.addItem(str(ivm05a.last_po_cost))
        OutVect!.addItem(str(eoq_qty))
        OutVect!.addItem(eoq_code$)
        OutVect!.addItem(str(usage))
        OutVect!.addItem(flag$)
        if ivm05a.unit_cost_01<>0 then 
            OutVect!.addItem(str(ivm05a.break_qty_01))
            OutVect!.addItem(str(ivm05a.unit_cost_01))
        else
            xwk=fnblank(2)
        endif
        OutVect!.addItem("   "+d9$)
        if ivm05a.unit_cost_02<>0 then
            xwk=fnblank(columns-3)
            OutVect!.addItem(str(ivm05a.break_qty_02))
            OutVect!.addItem(str(ivm05a.unit_cost_02)) 
        else
            xwk=fnblank(columns-1)
        endif
        if ivm05a.unit_cost_03<>0 then 
            xwk=fnblank(columns-2)
            OutVect!.addItem(str(ivm05a.break_qty_03))
            OutVect!.addItem(str(ivm05a.unit_cost_03))
        else          
            xwk=fnblank(columns)
        endif  
        t0=t0+1
        recs=recs+1
   
    wend ; rem ----  Loop ending

done: rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    t9$="E"
    gosub vendor_break
    goto std_exit


vendor_break: rem --- vendor_break
        if t0$<>"" then
            xwk=fnblank(columns)   
            OutVect!.addItem("   "+str(t0:"###,##0")+Translate!.getTranslation("AON___ITEMS_FOR_")+h3$)
            xwk=fnblank(columns-1) 
            xwk=fnblank(columns) 
            t1$=""
        endif
        if t9$<>"" return
        t0$=ivm05a.vendor_id$,h3$=Translate!.getTranslation("AON_VENDOR:_")+t0$+Translate!.getTranslation("AON__NOT_ON_FILE"),t0=0
        find record (apm01_dev,key=firm_id$+ivm05a.vendor_id$,dom=*return) apm01a$
        h3$=cvs(Translate!.getTranslation("AON_VENDOR:_")+fnmask$(apm01a.vendor_id$(1,vendlen),m9$)+" "+apm01a.vendor_name$,2)
        BrkVect!.addItem(str(OutVect!.size()/(columns)))
        HdrVect!.addItem(h3$)
        return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend
rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
