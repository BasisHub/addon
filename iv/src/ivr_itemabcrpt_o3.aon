rem --- ABC Analysis Report (Report Overlay - For wharehouse wise display)
rem --- Program ivr_itemabcrpt_o3.aon v8.0.0 16Jul2007 (ivr_pc)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:36:35)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

    next_overlay$=""; rem --- clear next_var so bas_process_end doesn't loop...i.e., don't run anything after this

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Initializations

    precision p[1]
    dim headings$[4]
    dim count[25],value[25]
    when$=sysinfo.system_date$
    clock$=""
    m7$="####0"
    m9$="-##0.00%"
    m2$="###,###.000-"
    m1$="###,###,###.00-"
    headings=6
    width=132
    page=0
    done=0
    m8$="###,###,##0"
    t0$=""
    sequence=0
    total=0
    warehouse=0
    iv_class=0
    totalpct=0
    xlimit=percents[iv_class]
    letters$="ABCDEFGHIJKLMNOPQRSTUVWXYZ"

rem --- Headings

    if value$="U" then column_head$="Estimated^Annual Usage"
    if value$="B" then column_head$="Ending^Balance"
    if value$="Q" then column_head$="Quantity^On Hand"
    p=pos("^"=column_head$)
    headings$[0]=sysinfo.firm_name$
    headings$[1]="[HEADER]"
    
rem --- Column Headings

	columns=9
    dim columns$[columns,10]
    columns$[0,0]="Seq",            columns$[0,1]="C", columns$[0,2]="5"
    columns$[1,0]="Item",           columns$[1,1]="C", columns$[1,2]="10"
    columns$[2,0]="Description",    columns$[2,1]="C", columns$[2,2]="25"
    columns$[3,0]="Prd^Type",       columns$[3,1]="C", columns$[3,2]="5"
    columns$[4,0]=column_head$,     columns$[4,1]="N", columns$[4,2]="12"
    columns$[5,0]="Unit^Cost",      columns$[5,1]="N", columns$[5,2]="12" 
    columns$[6,0]="Total^Value",    columns$[6,1]="N", columns$[6,2]="12",columns$[6,10]="T"
    columns$[7,0]="Percent",        columns$[7,1]="N", columns$[7,2]="10" 
    columns$[8,0]="Old^ABC",        columns$[8,1]="C", columns$[8,2]="5"
    columns$[9,0]="New^ABC",        columns$[9,1]="C", columns$[9,2]="5"
    
rem --- Background

    call pgmdir$+"adc_progress.aon","S","","","","",0,ivw07_dev,1,meter_num,status

rem --- Position file

    call pgmdir$+"adc_progress.aon","S","","","","",0,ivw17_dev,1,0,ignore_status
    read (ivw17_dev,key=firm_id$+begwhse$,dom=*next)

rem --- Read next ivw-17 record

    while more
        ivw17a_key$=key(ivw17_dev,end=*break)
        if pos(firm_id$=ivw17a_key$)<>1 break
        if endwhse$<>"" and ivw17a_key.warehouse_id$>endwhse$ break
        call pgmdir$+"adc_progress.aon","S","","","",ivw17a_key.warehouse_id$+" "+ivw17a_key.item_id$,0,0,1,0,ignore_status
        read record (ivw17_dev) ivw17a$

rem --- Level break?

        if ivw17a.warehouse_id$<>t0$ gosub whse_break

rem --- Process work file record

        cost=ivw17a.unit_cost
        gosub work_file_ivw17

rem --- Loop back for next record

    wend 

done: rem --- All done

    done=1
    gosub whse_break
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,ignore_status
    rem            run pgmdir$+"ivu_itemabcupd.aon"
    goto std_exit


work_file_ivw17: rem --- Process work file record

    dim description$(dw)
    ivm01a_key.firm_id$=firm_id$,ivm01a_key.item_id$=ivw17a.item_id$
    ivm01a.item_desc$="(Not On File)",ivm01a.product_type$=""
    find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$
    description$=cvs(ivm01a.item_desc$,2)
    if pos("Not"=description$) ivm01a.item_desc$="(Missing ivw17)"
    oldabc$=ivw17a.abc_code_01$

rem --- Calculate percentage

    percent=0,quantity=ivw17a.annual_usage,amount=ivw17a.abc_total_value_01,x=0
    if value$="Q" then quantity=ivw17a.qty_on_hand,amount=ivw17a.abc_total_value_02,x=1
    if value$="B" then quantity=ivw17a.end_balance,amount=ivw17a.abc_total_value_03,x=2
    if x=0 and ivs10w.abc_total_value_01 then percent=(amount*100)/ivs10w.abc_total_value_01
    if x=1 and ivs10w.abc_total_value_02 then percent=(amount*100)/ivs10w.abc_total_value_02
    if x=2 and ivs10w.abc_total_value_03 then percent=(amount*100)/ivs10w.abc_total_value_03

rem --- Print detail line

    sequence=sequence+1,l=l+1,newabc$=letters$(iv_class+1,1)
    total=total+amount,warehouse=warehouse+amount,l1=l1+1
    OutVect!.addItem(str(sequence:m7$))
    OutVect!.addItem(ivm01a.item_id$)
    OutVect!.addItem(description$)
    OutVect!.addItem(ivm01a.product_type$)
    OutVect!.addItem(str(quantity:m2$))
    OutVect!.addItem(str(cost:m3$))
    OutVect!.addItem(str(amount:m1$))
    OutVect!.addItem(str(percent:m9$))
    OutVect!.addItem("   "+oldabc$)
    OutVect!.addItem(newabc$)

rem --- New class?

    totalpct=min(totalpct+percent,100),number=number+1
    value[iv_class]=value[iv_class]+amount,count[iv_class]=count[iv_class]+1
    if totalpct>xlimit iv_class=iv_class+1,xlimit=xlimit+percents[iv_class]

rem --- Update ive-17

    ive17a_key.firm_id$=ivw17a_key.firm_id$
    ive17a.firm_id$=ivw17a.firm_id$
    ive17a_key.warehouse_id$=ivw17a_key.warehouse_id$
    ive17a.warehouse_id$=ivw17a.warehouse_id$
    ive17a_key.item_id$=ivw17a_key.item_id$
    ive17a.item_id$=ivw17a.item_id$
    ive17a.abc_code_01$=oldabc$,ive17a.abc_code_02$=newabc$
    ive17a.annual_usage=ivw17a.annual_usage
    ive17a.qty_on_hand=ivw17a.qty_on_hand
    ive17a.end_balance=ivw17a.end_balance
    ive17a.unit_cost=ivw17a.unit_cost
    ive17a.abc_total_value_01=ivw17a.abc_total_value_01
    ive17a.abc_total_value_02=ivw17a.abc_total_value_02
    ive17a.abc_total_value_03=ivw17a.abc_total_value_03
    ive17a$=field(ive17a$)
    write record (ive17_dev,key=ive17a_key$) ive17a$
    return

print_total: rem --- Print totals

    xwk=fnblank(columns+1)
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk=fnblank(2)
    OutVect!.addItem("     "+totals$)
    xwk=fnblank(3)
    OutVect!.addItem(str(totals:m1$))
    xwk=fnblank(3)
    return

print_summary: rem --- Print summary totals

    xwk=fnblank(columns+1)
    xwk=fnblank(columns+1)
    xwk=fnblank(3)
    OutVect!.addItem("Class")
    OutVect!.addItem("Number Of Items")
    OutVect!.addItem("Percent Of Total")
    OutVect!.addItem("Total Value")
    OutVect!.addItem("Percent Of Total")
    xwk=fnblank(2)
    xwk=fnblank(columns+1)

rem --- Print line for each class

    for x=0 to 25
        if count[x]<>0 and value[x]<>0 then
            percent=0
            amount=0
            if number<>0    then percent=(count[x]*100)/number
            if warehouse<>0 then amount=(value[x]*100)/warehouse
            xwk=fnblank(3)
            OutVect!.addItem(letters$(x+1,1))
            OutVect!.addItem(str(count[x]:m8$))
            OutVect!.addItem(str(percent:m9$))
            OutVect!.addItem(str(value[x]:m1$))
            OutVect!.addItem(str(amount:m9$))
            xwk=fnblank(2) 
        endif
    next x

rem --- Grand totals

    xwk=fnblank(columns+1)
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    xwk=fnblank(3)
    OutVect!.addItem("Total")
    OutVect!.addItem(str(number:m8$))
    OutVect!.addItem("")
    OutVect!.addItem(str(warehouse:m1$))
    OutVect!.addItem("")
    xwk=fnblank(2) 
	
    return

whse_break: rem --- Warehouse Break

    if t0$<>"" and l1<>0 then 
        let totals$="Total For "+h9$,totals=warehouse
        gosub print_total
        let totals$="Total For Report",totals=total
        if done gosub print_total
        gosub print_summary
    endif
	
    if done=0 then 
	    dim count[25],value[25]
	    iv_class=0,totalpct=0,xlimit=percents[iv_class],sequence=0,number=0
	    t0$=ivw17a_key.warehouse_id$,ivm10c.short_name$="(Not on File)",warehouse=0
	    find record (ivm10c_dev,key=firm_id$+"C"+t0$,dom=*next) ivm10c$
	    let h9$="Warehouse "+t0$+" "+cvs(ivm10c.short_name$,2)
	    
	    dim ivs10w[3]
	    ivs10w0$=firm_id$+"W"+t0$
	    ivs10w1$=ivs01a.current_per$+ivs01a.current_year$+when$
	    ivs10w_key.firm_id$=firm_id$
	    ivs10w_key.record_id_w$="W"
	    ivs10w_key.warehouse_id$=t0$
	    ivs10w.firm_id$=firm_id$
	    ivs10w.record_id_w$="W"
	    ivs10w.warehouse_id$=t0$
	    ivs10w.period$=ivs01a.current_per$
	    ivs10w.year$=ivs01a.current_year$
	    ivs10w.run_date$=when$
	    find record (ivs10w_dev,key=ivs10w_key$,dom=*next) ivs10w$
	    x$=fndate$(ivs10w.run_date$)
	    if pos(value$="UB")>0 x$="Period "+ivs10w.period$+" "+ivs10w.year$
	    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
	    HdrVect!.addItem(sysinfo.task_desc$+" For "+h9$+"  "+"Valued By "+column_head$(1,p-1)+" "+column_head$(p+1)+" As Of "+x$)
	endif
	
    return


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
