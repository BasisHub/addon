rem ivc - Activity Type Descriptions
rem Program ivc_activity v8.0.0 30Apr2006 (ivc_fa)
rem Created by adx_progconv.bbx v1.0.2 (04/30/2006 02:09:13)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- SELECTION$  : Activity Type Code (Input)
rem --- DESCRIPTION$: Activity Description (Returned)
rem --- TITLE$      : Activity Column Title (Returned)
rem --- STATUS      : 0=No Error (Returned)

    seterr std_error
    setesc std_error
    enter selection$,description$,title$,status
    
rem --- Get Translator Object

    use ::bbtranslator.bbj::BBTranslator
    declare BBTranslator Translate!
    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Parameters

    number=15

rem --- Initializations

    dim descriptions$[number],titles$[number]
    status=11
    description$=Translate!.getTranslation("AON_(UNKNOWN)")
    title$=description$
    types$="RECBLTSLDISSADJXFIXFORETENDBEGIN OUTUSEXFROTH"
    descriptions$[1]=Translate!.getTranslation("AON_QUANTITY_RECEIVED")
    descriptions$[2]=Translate!.getTranslation("AON_QUANTITY_BUILT")
    descriptions$[3]=Translate!.getTranslation("AON_QUANTITY_SOLD")
    descriptions$[4]=Translate!.getTranslation("AON_QUANTITY_ISSUED")
    descriptions$[5]=Translate!.getTranslation("AON_ADJUSTMENT_QUANTITY")
    descriptions$[6]=Translate!.getTranslation("AON_QUANTITY_TRANSFERRED_IN")
    descriptions$[7]=Translate!.getTranslation("AON_QUANTITY_TRANSFERRED_OUT")
    descriptions$[8]=Translate!.getTranslation("AON_QUANTITY_RETURNED")
    descriptions$[9]=Translate!.getTranslation("AON_ENDING_BALANCE")
    descriptions$[10]=Translate!.getTranslation("AON_BEGINNING_BALANCE")
    descriptions$[11]=Translate!.getTranslation("AON_QUANTITY_RECEIVED_AND_BUILT")
    descriptions$[12]=Translate!.getTranslation("AON_QUANTITY_SOLD_AND_ISSUED")
    descriptions$[13]=Translate!.getTranslation("AON_ENDING_BALANCE_-_BEGINNING")
    descriptions$[14]=Translate!.getTranslation("AON_NET_QUANTITY_TRANSFERRED")
    descriptions$[15]=Translate!.getTranslation("AON_ADJUSTMENT_QUANTITY_+_RETURNS")
    titles$[1]=Translate!.getTranslation("AON_RECEIVED")
    titles$[2]=Translate!.getTranslation("AON_BUILT")
    titles$[3]=Translate!.getTranslation("AON_SOLD")
    titles$[4]=Translate!.getTranslation("AON_ISSUED")
    titles$[5]=Translate!.getTranslation("AON_ADJUSTMENTS")
    titles$[6]=Translate!.getTranslation("AON_XFER_IN")
    titles$[7]=Translate!.getTranslation("AON_XFER_OUT")
    titles$[8]=Translate!.getTranslation("AON_RETURNED")
    titles$[9]=Translate!.getTranslation("AON_ENDING")
    titles$[10]=Translate!.getTranslation("AON_BEGINNING")
    titles$[11]=Translate!.getTranslation("AON_REC'D/BUILT")
    titles$[12]=Translate!.getTranslation("AON_SOLD/ISSUED")
    titles$[13]=Translate!.getTranslation("AON_USAGE")
    titles$[14]=Translate!.getTranslation("AON_TRANSFERS")
    titles$[15]=Translate!.getTranslation("AON_OTHER")

rem --- Return description$/title$ based on selection$

    p=pos(selection$=types$,3)
    if p=0 goto done
    p=int((p-1)/3)+1
    status=0
    description$=descriptions$[p]
    title$=titles$[p]

done: rem --- All done

    goto std_exit

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
