rem --- ABC Analysis Report (Generation Overlay)
rem --- Program ivr_itemabcrpt_o1.aon v8.0.0 16Jul2007 (ivr_pb)
rem --- Created by adx_codeport.bbx v1.1.5 (07/16/2007 03:36:26)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Remove total records for a new report

    if update$="Y" then
        ivs10i_key.firm_id$=firm_id$
        ivs10i_key.record_id_i$="I"
        remove (ivs10i_dev,key=ivs10i_key$,dom=*next)

rem --- Remove existing warehouse total records

        ivs10w_key.firm_id$=firm_id$
        ivs10w_key.record_id_w$="W"
        read (ivs10w_dev,key=ivs10w_key.firm_id$+ivs10w_key.record_id_w$,dom=*next)
        while more
            k$=key(ivs10w_dev,end=*break)
            if pos(firm_id$+"W"=k$)<>1 break
            remove (ivs10w_dev,key=k$)
        wend
    endif

init_data: rem --- Initializations

    precision p[1]
    dim item$[2]
    m7$="###########.0000-"
    selection$="END"
    action$="W"
    item$[0]=firm_id$
    items=0
    sql_chan1=sqlunt
    sqlopen(sql_chan1)stbl("+DBNAME")

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,ivm01_dev,1,meter_num,status

rem --- Rebuild ivw-07/ivw-17 for reprint

    if update$="N" then 
        source=ive07_dev
        target=ivw07_dev
        first$=firm_id$
        if pos(level$="IB")>0 gosub generate_ivw07_records
        source=ive17_dev
        target=ivw17_dev
        first$=firm_id$+begwhse$
        if pos(level$="WB")>0 gosub generate_ivw17_records
        run pgmdir$+"ivr_itemabcrpt_o2.aon"
    endif

rem --- Position files

    read (ivm01_dev,key=firm_id$,dom=*next)

rem --- Main Loop starting

    while more
        ivm01a_key$=key(ivm01_dev,end=*break)
        if pos(firm_id$=ivm01a_key$)<>1 break
        read record (ivm01_dev) ivm01a$
        call pgmdir$+"adc_progress.aon","S","","","",ivm01a.item_id$,0,0,1,0,ignore_status

rem --- Position warehouse xref

		sql_prep$=""
        sql_prep$=sql_prep$+"SELECT firm_id, item_id, warehouse_id "
		sql_prep$=sql_prep$+"  FROM ivm_itemwhse "
		sql_prep$=sql_prep$+" WHERE firm_id = '"+firm_id$+"' AND item_id = '"+ivm01a.item_id$+"'"        
        if begwhse$<>"" then sql_prep$=sql_prep$+" AND warehouse_id >= '"+begwhse$+"'"
        if endwhse$<>"" then sql_prep$=sql_prep$+" AND warehouse_id <= '"+endwhse$+"'"

        sqlprep(sql_chan1)sql_prep$
        dim whse_tpl$:sqltmpl(sql_chan1)
        sqlexec(sql_chan1)
                
rem --- Inner Loop starting

        while more
            whse_tpl$=sqlfetch(sql_chan1,err=*break)
            whse$=whse_tpl.warehouse_id$
            item$=whse_tpl.item_id$
            
rem --- Retrieve warehouse records

            ivm02a_key.firm_id$=firm_id$
            ivm02a_key.warehouse_id$=whse$
            ivm02a_key.item_id$=item$
            ivm12a_key$=ivm02a_key$+ivs01a.current_year$+ivs01a.current_per$
            find record (ivm02_dev,key=ivm02a_key$,dom=*continue) ivm02a$
            cost=ivm02a.unit_cost
            onhand=ivm02a.qty_on_hand
            usage=0
            balance=0
            find record (ivm12_dev,key=ivm12a_key$,dom=estimate_annual_usage) ivm12a$
            balance=ivm12a.beg_balance+ivm12a.qty_received+ivm12a.qty_built-ivm12a.qty_sold-ivm12a.qty_issued+ivm12a.qty_adjust+ivm12a.qty_xfer_in-ivm12a.qty_xfer_out+ivm12a.qty_returned

estimate_annual_usage: rem --- Calculate estimated annual usage

            item$[1]=ivm02a.warehouse_id$
            item$[2]=ivm02a.item_id$
            call pgmdir$+"ivc_usage.aon",action$,ivchannels[all],item$[all],factors[all],day_of_mth,baseperiod$,curperiod$,g[0],p[1],x,usage,flag$,status

rem --- Calculate total value for warehouse

            ivw17a.annual_usage=usage
            ivw17a.qty_on_hand=onhand
            ivw17a.end_balance=balance
            ivw17a.unit_cost=cost
            ivw17a.abc_total_value_01=ivw17a.annual_usage*cost
            ivw17a.abc_total_value_02=ivw17a.qty_on_hand*cost
            ivw17a.abc_total_value_03=ivw17a.end_balance*cost
            usage=ivw17a.abc_total_value_01
            onhand=ivw17a.abc_total_value_02
            balance=ivw17a.abc_total_value_03
            gosub reciprocal_amt

            ivw17a_key.firm_id$=ivm02a.firm_id$
            ivw17a.firm_id$=ivm02a.firm_id$
			ivw17a_key.item_id$=ivm02a.item_id$
            ivw17a.item_id$=ivm02a.item_id$
			ivw17a_key.warehouse_id$=ivm02a.warehouse_id$
			ivw17a.warehouse_id$=ivm02a.warehouse_id$
			ivw17a_key.recip_sign$=sign$
            ivw17a.recip_sign$=sign$
			ivw17a_key.recip_amount$=amount$
            ivw17a.recip_amount$=amount$
            ivw17a.abc_code_01$=ivm02a.abc_code$
            ive17a_key$=ivm02a_key$

rem --- Update totals for warehouse/item

            if level$<>"I" then
                ivw17a$=field(ivw17a$)
                write record (ivw17_dev,key=ivw17a_key$) ivw17a$

                ivs10w_key.firm_id$=firm_id$
                ivs10w_key.record_id_w$="W"
                ivs10w_key.warehouse_id$=ivm02a.warehouse_id$
                ivs10w.firm_id$=firm_id$
                ivs10w.record_id_w$="W"
                ivs10w.warehouse_id$=ivm02a.warehouse_id$
                ivs10w.period$=ivs01a.current_per$
                ivs10w.year$=ivs01a.current_year$
                ivs10w.run_date$=when$

                dim ivs10w[3]
                ivs10w0$=ivs10w.firm_id$+ivs10w.record_id_w$+ivs10w.warehouse_id$
                ivs10w1$=ivs10w.period$+ivs10w.year$+ivs10w.run_date$
                find record (ivs10w_dev,key=ivs10w_key$,dom=*next) ivs10w$
                ivs10w.abc_total_value_01=ivs10w.abc_total_value_01+ivw17a.abc_total_value_01
                ivs10w.abc_total_value_02=ivs10w.abc_total_value_02+ivw17a.abc_total_value_02
                ivs10w.abc_total_value_03=ivs10w.abc_total_value_03+ivw17a.abc_total_value_03
                ivs10w.total_items=ivs10w.total_items+1

                ivs10w[0]=ivs10w[0]+ivw17a.abc_total_value_01
                ivs10w[1]=ivs10w[1]+ivw17a.abc_total_value_02
                ivs10w[2]=ivs10w[2]+ivw17a.abc_total_value_03
                ivs10w[3]=ivs10w[3]+1
                ivs10w$=field(ivs10w$)
                write record (ivs10w_dev,key=ivs10w_key$) ivs10w$
                remove (ive17_dev,key=ive17a_key$,dom=*next)
            endif

rem --- Accumulate item totals

            gosub item_totals

rem --- Loop back for next warehouse

        wend; rem --- Inner Loop Ending

rem --- Done with warehouses

        if level$="W" then continue
        usage=ivw07a.abc_total_value_01
        onhand=ivw07a.abc_total_value_02
        balance=ivw07a.abc_total_value_03
        gosub reciprocal_amt

        ive07a_key.firm_id$=firm_id$
        ive07a_key.item_id$=ivm01a.item_id$
        ivw07a_key.firm_id$=firm_id$
        ivw07a_key.reserved_str$="  "
        ivw07a_key.recip_sign$=sign$
        ivw07a_key.recip_amount$=amount$
        ivw07a_key.item_id$=ivm01a.item_id$
        ivw07a.firm_id$=firm_id$
        ivw07a.reserved_str_02$="  "
        ivw07a.recip_sign$=sign$
        ivw07a.recip_amount$=amount$
        ivw07a.item_id$=ivm01a.item_id$
        ivw07a.abc_code_01$=ivm01a.abc_code$
        ivw07a.reserved_str$=" "

rem --- Update item totals

		ivw07a$=field(ivw07a$)
        write record (ivw07_dev,key=ivw07a_key$) ivw07a$

		ivs10i_key.firm_id$=firm_id$
		ivs10i_key.record_id_i$="I"
		ivs10i.firm_id$=firm_id$
		ivs10i.record_id_i$="I"
        ivs10i.period$=ivs01a.current_per$
        ivs10i.year$=ivs01a.current_year$
        ivs10i.run_date$=when$

		dim ivs10i[3]
		ivs10i0$=ivs10i.firm_id$+ivs10i.record_id_i$
		ivs10i1$=ivs10i.period$+ivs10i.year$+ivs10i.run_date$
        find record (ivs10i_dev,key=ivs10i_key$,dom=*next) ivs10i$
		
        ivs10i.total_value_01=ivs10i.total_value_01+ivw07a.abc_total_value_01
        ivs10i.total_value_02=ivs10i.total_value_02+ivw07a.abc_total_value_02
        ivs10i.total_value_03=ivs10i.total_value_03+ivw07a.abc_total_value_03
        items=items+1
        ivs10i.total_items=items

		ivs10i[0]=ivs10i[0]+ivw07a.abc_total_value_01
		ivs10i[1]=ivs10i[1]+ivw07a.abc_total_value_02
		ivs10i[2]=ivs10i[2]+ivw07a.abc_total_value_03
		ivs10i[3]=ivs10i[3]+1
        ivs10i$=field(ivs10i$)
        write record (ivs10i_dev,key=ivs10i_key$) ivs10i$
        remove (ive07_dev,key=ive07a_key$,dom=*next)

rem --- Loop back for next item

    wend; rem --- Main Loop Ending

done: rem --- Done with generation loop

    source=ive07_dev
    if pos(level$="IB")>0 gosub remove_records
    source=ive17_dev
    if pos(level$="WB")>0 gosub remove_records
    
run_report_overlay: rem --- Run report overlay

    run pgmdir$+"ivr_itemabcrpt_o2.aon"

reciprocal_amt: rem --- Generate reciprocal amount

    amount=onhand
    sign$=" "
    amount$="                 "
    if value$="U" amount=usage
    if value$="B" amount=balance
    amount$=str(10000000000-amount:m7$)
    if amount<=0 sign$="-",amount$=str(amount:m7$)
    return

item_totals: rem --- Accumulate item totals

    ivw07a.annual_usage=ivw07a.annual_usage+ivw17a.annual_usage
    ivw07a.qty_on_hand=ivw07a.qty_on_hand+ivw17a.qty_on_hand
    ivw07a.end_balance=ivw07a.end_balance+ivw17a.end_balance
    ivw07a.unit_cost=ivw07a.unit_cost+ivw17a.unit_cost
    ivw07a.abc_total_value_01=ivw07a.abc_total_value_01+ivw17a.abc_total_value_01
    ivw07a.abc_total_value_02=ivw07a.abc_total_value_02+ivw17a.abc_total_value_02
    ivw07a.abc_total_value_03=ivw07a.abc_total_value_03+ivw17a.abc_total_value_03
    if ivw07a.qty_on_hand<>0 then ivw07a.unit_cost=ivw07a.abc_total_value_01/ivw07a.qty_on_hand
    if ivw07a.end_balance<>0 and ivw07a.unit_cost=0 then ivw07a.unit_cost=ivw07a.abc_total_value_02/ivw07a.end_balance
    return

remove_records: rem --- Remove any remaining ive-07/ive-17 records

    read (source,key=firm_id$,dom=*next)
    while more
        k$=key(source,end=*break)
        if pos(firm_id$=k$)<>1 break
        remove (source,key=k$)
    wend
    return

generate_ivw07_records: rem --- Generate ivw-07 records using ive-07

    read (ive07_dev,key=first$,dom=*next)

rem --- Loop Starting

    while more
        let ive07a_key$=key(ive07_dev,end=*break)
        if pos(firm_id$=ive07a_key.firm_id$)<>1 break
        read record (ive07_dev) ive07a$

        call pgmdir$+"adc_progress.aon","S","","","",ive07a.item_id$,0,0,1,0,ignore_status

        usage=ive07a.abc_total_value_01
        onhand=ive07a.abc_total_value_02
        balance=ive07a.abc_total_value_03
        gosub reciprocal_amt

        ivw07a_key.firm_id$=ive07a.firm_id$
        ivw07a_key.reserved_str$="  "
		ivw07a_key.recip_sign$=sign$
		ivw07a_key.recip_amount$=amount$
		ivw07a_key.item_id$=ive07a.item_id$
        ivw07a.firm_id$=ive07a.firm_id$
        ivw07a.reserved_str_02$="  "
		ivw07a.recip_sign$=sign$
		ivw07a.recip_amount$=amount$
		ivw07a.item_id$=ive07a.item_id$
		ivw07a.abc_code_01$=ive07a.abc_code_01$
        ivw07a.annual_usage=ive07a.annual_usage
        ivw07a.qty_on_hand=ive07a.qty_on_hand
        ivw07a.end_balance=ive07a.end_balance
        ivw07a.unit_cost=ive07a.unit_cost
        ivw07a.abc_total_value_01=ive07a.abc_total_value_01
        ivw07a.abc_total_value_02=ive07a.abc_total_value_02
        ivw07a.abc_total_value_03=ive07a.abc_total_value_03
		ivw07a$=field(ivw07a$)
        write record (ivw07_dev,key=ivw07a_key$) ivw07a$
    wend; rem --- Loop Ending
	
    return

generate_ivw17_records: rem --- Generate IVW-17 records using IVE-17

    read (ive17_dev,key=first$,dom=*next)

rem --- Loop Starting

    while more
        let ive17a_key$=key(ive17_dev,end=*break)
        if pos(firm_id$=ive17a_key.firm_id$)<>1 then break
        if endwhse$<>"" and ive17a_key.warehouse_id$>endwhse$ then break
        read record (ive17_dev) ive17a$

        call pgmdir$+"adc_progress.aon","S","","","",ive17a.warehouse_id$+" "+ive17a.item_id$,0,0,1,0,ignore_status

        usage=ive17a.total_amount_01
        onhand=ive17a.total_amount_02
        balance=ive17a.total_amount_03
        gosub reciprocal_amt

        ivw17a_key.firm_id$=ive07a.firm_id$
		ivw17a_key.item_id$=ive17a.item_id$
		ivw17a_key.warehouse_id$=ive17a.warehouse_id$
		ivw17a_key.recip_sign$=sign$
		ivw17a_key.recip_amount$=amount$
		ivw17a.recip_sign$=sign$
		ivw17a.recip_amount$=amount$
        ivw17a.firm_id$=ive17a.firm_id$
		ivw17a.item_id$=ive17a.item_id$
		ivw17a.abc_code_01$=ive17a.abc_code_01$
		ivw17a.warehouse_id$=ive17a.warehouse_id$
        ivw17a.annual_usage=ive17a.annual_usage
        ivw17a.qty_on_hand=ive17a.qty_on_hand
        ivw17a.end_balance=ive17a.end_balance
        ivw17a.unit_cost=ive17a.unit_cost
        ivw17a.abc_total_value_01=ive17a.total_amount_01
        ivw17a.abc_total_value_02=ive17a.total_amount_02
        ivw17a.abc_total_value_03=ive17a.total_amount_03
		ivw17a$ = field(ivw17a$)
        write record (ivw17_dev,key=ivw17a_key$) ivw17a$

    wend; rem --- Loop Ending
	
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
