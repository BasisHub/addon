rem --- Physical Inventory Load Cycle Code Utility
rem --- Program ivx_loadcyclecode.aon v8.0.0 02Feb2009

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error
	
rem --- Retrieve the program path

	pgmdir$=""
	pgmdir$=stbl("+DIR_PGM",err=*next)
	sypdir$=""
	sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL")
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Inform user of what's about to happen

	msg_id$ = "AON_UPDT_CYCLE_CODE"
	gosub disp_message
	if msg_opt$<>"Y" then goto std_exit

rem --- Open all files

	num_files = 1
	open_beg  = 1
	open_end  = num_files
	
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="IVC_PHYSCODE", open_opts$[1]="OTA"
	
	gosub open_tables
	
	physcode_dev = num(open_chans$[1])
	dim physcode_rec$:open_tpls$[1]

rem --- Initializations
	
	more = 1
	call pgmdir$+"adc_progress.aon","N","","","","",0,itemwhse_dev,1,meter_num,ignore_status

rem ---  SQL to get unique warehouse and cycle code

	prep$ = ""
	prep$ = prep$ + "SELECT distinct firm_id, warehouse_id, pi_cyclecode "
	prep$ = prep$ + "  FROM ivm_itemwhse "
	prep$ = prep$ + " WHERE pi_cyclecode > '  ' "
	prep$ = prep$ + " ORDER BY firm_id, warehouse_id, pi_cyclecode "
	
	sql_dev = sqlunt
	sqlopen (sql_dev) stbl("+DBNAME")
	sqlprep (sql_dev) prep$
	dim sql_rec$:sqltmpl(sql_dev)
	sqlexec (sql_dev)

rem --- Get next sort record (firm/warehouse/cycle)
	
	while more

		sql_rec$ = sqlfetch(sql_dev, end=*break)
		call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status

rem --- Does Cycle Code exists?

		find (physcode_dev, key=sql_rec.firm_id$+sql_rec.warehouse_id$+sql_rec.pi_cyclecode$, dom=build_rec)
		continue

build_rec: rem --- If not, build and write record

		dim physcode_rec$:fattr(physcode_rec$)
		physcode_rec.firm_id$        = sql_rec.firm_id$
		physcode_rec.warehouse_id$   = sql_rec.warehouse_id$
		physcode_rec.pi_cyclecode$   = sql_rec.pi_cyclecode$
		physcode_rec.phys_inv_sts$   = "0"
		physcode_rec.pending_action$ = "0"
		write record (physcode_dev) physcode_rec$

	wend
	
	sqlclose(sql_dev)

rem --- All done

	call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,0,ignore_status
	goto std_exit

open_tables: rem --- Open tables

	call sypdir$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		status=912
		goto std_exit
	endif

	return
	
disp_message: rem --- Display Message Dialog

	call sypdir$+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

	return
	
rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	msg_id$="UPDATE_COMPLETE"
	dim msg_tokens$[1]
	msg_opt$=""
	gosub disp_message

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
	
rem #endinclude std_end.src

    end
