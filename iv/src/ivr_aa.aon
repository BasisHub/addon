rem --- Transaction Register
rem --- Program ivr_aa v8.0.0 09Jul2007 (ivr_aa)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:39:41)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$
    task_desc$=sysinfo.task_desc$
    sys_date$=sysinfo.system_date$

rem --- Open/Lock files

    files=23,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]

    files$[2]="ARC_TERMCODE",ids$[2]=files$[2]
    files$[3]="glm-01",ids$[3]="GLM_ACCT"
    files$[4]="glt-14",ids$[4]="GLX_DAILYXRF"
    files$[5]="glw-11",ids$[5]="GLW_TRANSDET"
    files$[6]="ive-01",ids$[6]="IVE_TRANSHDR"
    files$[7]="ive-11",ids$[7]="IVE_TRANSDET"
    files$[8]="ivm-01",ids$[8]="IVM_ITEMMAST"
    files$[9]="ivm-02",ids$[9]="IVM_ITEMWHSE"
    files$[10]="ivm-04",ids$[10]="IVM_ITEMTIER"
    files$[11]="ivm-07",ids$[11]="IVM_LSMASTER"
    files$[12]="ivm-08",ids$[12]="IVX_LSXREF"
    files$[13]="IVC_PRODCODE",ids$[10]=files$[13]
    files$[14]="ivm-12",ids$[14]="IVM_ITEMACT"
    files$[15]="ivm-17",ids$[15]="IVM_LSACT"
    files$[16]="ivt-01",ids$[16]="IVT_LSTRANS"
    files$[17]="ivt-02",ids$[17]="IVX_LSCUST"
    files$[18]="ivt-03",ids$[18]="IVX_LSVEND"
    files$[19]="ivt-04",ids$[19]="IVT_ITEMTRAN"
    files$[20]="ivw-04",ids$[20]="IVW_LFDET"
    files$[21]="ARS_PARAMS",ids$[21]=files$[21]
    files$[22]="GLS_PARAMS",ids$[22]=files$[22]
    files$[23]="IVS_PARAMS",ids$[22]=files$[23]

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    arm10a_dev=channels[2]

    glm01_dev=channels[3]
    glt14_dev=channels[4]
    glw11_dev=channels[5]
    ive01_dev=channels[6]
    ive11_dev=channels[7]
    ivm01_dev=channels[8]
    ivm02_dev=channels[9]
    ivm04_dev=channels[10]
    ivm07_dev=channels[11]
    ivm08_dev=channels[12]
    ivm10a_dev=channels[13]
    ivm12_dev=channels[14]
    ivm17_dev=channels[15]
    ivt01_dev=channels[16]
    ivt02_dev=channels[17]
    ivt03_dev=channels[18]
    ivt04_dev=channels[19]
    ivw04_dev=channels[20]
    ars01a_dev=channels[21]
    gls01a_dev=channels[22]
    ivs01a_dev=channels[23]


rem --- Dimension string templates

        dim arm10a$:templates$[2],glm01a$:templates$[3],glt14a$:templates$[4],
:       glw11a$:templates$[5],ive01a$:templates$[6],ive11a$:templates$[7],
:       ivm01a$:templates$[8],ivm02a$:templates$[9],ivm04a$:templates$[10],
:       ivm07a$:templates$[11],ivm08a$:templates$[12],ivm10a$:templates$[13],
:       ivm12a$:templates$[14],ivm17a$:templates$[15],ivt01a$:templates$[16],
:       ivt02a$:templates$[17],ivt03a$:templates$[18],ivt04a$:templates$[19],
:       ivw04a$:templates$[20],ars01a$:templates$[21],gls01a$:templates$[22],
:       ivs01a$:templates$[23]

rem --- Assign form input values to local variables

    table$=fnget_table$("")
   rem  value_01$=fnget_fld_data$(table$,"dataname_01")

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    rem sys01a_key$=firm_id$+"SY00"
    rem find record (ads01_dev,key=sys01a_key$,err=std_missing_params) sys01a$


rem --- Parameters

    dim p[5],g[4],t$:stbl("+TASK_TMPL")
    t$=stbl("+TASK")
    rem f0$=t.f0$
    sysinfo.firm_name$=sysinfo.firm_name$
    sysinfo.task_desc$=sysinfo.task_desc$
    firm_id$=sysinfo.firm_id$
    n2$="IV"
    ls$="N"
    lf$="N"
    source$=pgm(-2)
    when$=sysinfo.system_date$
    find record (ivs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) ivs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    g[0]=num(gls01a.total_pers$)
    g[3]=num(gls01a.acct_length$)
    g[4]=num(gls01.max_acct_length$)
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.lot_no_len$)
    p[2]=num(ivs01a.precision$)
    p[3]=num(ivs01a.desc_len$)
    p[4]=num(ivs01a.desc_len$)
    p[5]=num(ivs01a.desc_len$)
    dw=p[3]+p[4]+p[5]
    g5=len(gls01a.acct_output$)
    g[0]=g[3]
    p9$=ivs01a.lotser_flag$
    p8$="/Lot/Serial #"
    ar$="N"
    a9$="N"
    if pos(ivs01a.lotser_flag$="LS") ls$="Y" else ls$="N",p8$=""
    if pos(ivs01a.LIFOFIFO$="LF") lf$="Y"
    m1$=ivs01a.amount_mask$
    m2$=ivs01a.unit_mask$
    m3$=ivs01a.cost_mask$
    call pgmdir$+"adc_sizemask.aon",m1$,m1,11,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,9,12
    call pgmdir$+"adc_sizemask.aon",m3$,m3,5,12
    call pgmdir$+"adc_application.aon","AR",info$[all]
    ar$=info$[20]
    if ar$="N" then
        find record (ARS01_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
        a9$=ars01a.dist_by_item$
    endif
    gl$="N"
    status=0
    call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11$,gl$,status
    if status goto std_exit

rem --- Initializations

    precision num(ivs01a.precision$)
    rem dim c0$(50),a[2],headings$[2],o[8],lf[10],item$[10]
    dim headings$[2],o[8]
    width=132
    page=0
    l9=59
    l=l9+1
    w=34
    units=0
    errors=0
    glh$=""
    glh=0
    if gl$="Y" glh$="GL Account",glh=max(g5,len(glh$)+2)
   rem  headings=2
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    glstatus=0
    places=p[2]
    o[1]=o[0]+4
    o[2]=o[1]+3
    o[3]=o[2]+p[0]+1
    o[4]=o[3]+dw
    o[5]=o[4]+m2
    o[6]=o[5]+m3
    o[7]=o[6]+m1+1
    o[8]=o[7]+glh
    if o[8]+3>=width then
        o[8]=width-3
        o[7]=o[8]-glh-1
        o[6]=o[7]-m1-1
        o[5]=o[6]-m3
        o[4]=o[5]-m2
        o[1]=o[0]+5
        o[2]=o[1]+3
        o[3]=o[2]+p[0]+1
        dw=o[4]-o[3]-1
    endif
    if ls$="Y" then
        files$[9]="ivm-07"
        files$[10]="ivm-08"
        files$[11]="ivm-17"
        files$[12]="ivt-01"
        files$[13]="ivt-02"
        files$[14]="ivt-03"
    endif
    if lf$="Y" then
        files$[15]="ivm-04"
        files$[16]="ivw-04"
        options$[16]="CL"
    endif
    if gl$ ="Y" then
        files$[17]="glm-01"
        files$[18]=glw11$
        options$[18]="CL"
    endif
    if ar$="Y" and a9$="Y" files$[19]="arm-10"
    more=1

rem --- Additional File Opens

    call pgmdir$+"adc_fileopen.aon",1,9,19,files$[all],options$[all],channels[all],batch,status
    if status goto std_exit
    ivm07_dev=channels[9]
    ivm08_dev=channels[10]
    ivm17_dev=channels[11]
    ivt01_dev=channels[12]
    ivt02_dev=channels[13]
    ivt03_dev=channels[14]
    ivm04_dev=channels[15]
    ivw04_dev=channels[16]
    glm01_dev=channels[17]
    glw11_dev=channels[18]
    arm10_dev=channels[19]
    lf[0]=ivm04_dev
    lf[1]=ivw04_dev
    lf[2]=ivm02_dev

rem --- Run Report?

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit

rem --- Position file

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,ive01_dev,1,meter_num,status
    read (ive01_dev,key=firm_id$,dom=*next)

next_ive01: rem --- Read next ive-01 header
    while more
        ive01_key$=key(ive01_dev,end=*break)
        if pos(firm_id$=ive01_key$)<>1 break
        read record (ive01_dev,end=*break) ive01a$
        read (ive11_dev,key=ive01a_key.firm_id$+ive01a_key.iv_trans_no$,dom=*next)

detail_top: rem --- Read next ive-11 detail
        while more
            ive11_key$=key(ive11_dev,end=*break)
            if pos(ive11a_key.firm_id$+ive11a_key.iv_trans_no$=ive01a.firm_id$+ive01a.iv_trans_no$)=1 then
                read record (ive11_dev) ive11a$

rem --- Breaks

                if ive11a.iv_trans_no$<>t0$ gosub ref_break
                call pgmdir$+"adc_progress.aon","S","","","",ive11a.iv_trans_no$+"-"+ive11a.sequence_no$,0,0,1,0,ignore_status

rem --- Additional Reads

                rem dim b0$(22),b1$(60),z0$(g[4]),description$(dw)
                dim description$(dw)
                ivm01a_key$=firm_id$+ive11a.item_id$
                ivm01a.item_desc$="Unknown Item"
                find record (ivm01_dev,key=ivm01a_key$,dom=*next) ivm01a$
                description$=fnitem$(ivm01a.item_desc$)
                if ls$="N" or (ivm01a.lotser_item$+ivm01a.inventoried$) <>"YY" then
rem --- LIFO/FIFO?
                    if lf$="Y" or ivm10b.trans_type$<> "C"then
                        item$[0]=firm_id$
                        item$[1]=ive11a.warehouse_id$
                        item$[2]=ive11a.item_id$
                        lf_date$=ive01a.trans_date$
                        action$=ivs01a.lifofifo$+"R"
                        quantity=ive11a.trans_qty
                        cost=ive11a.unit_cost
                        ret_cost=0
                        type$="R"
                        if ivm10b.trans_type$="I" action$=ivs01a.lifofifo$+"I"
                        if ivm10b.trans_type$="A" if quantity<0 action$=ivs01a.lifofifo$+"I"
                        call pgmdir$+"ivc_lf.bbx",action$,type$,lf_date$,lf[all],item$[all],places,abs(quantity),cost,ret_cost,status
 rem --- Cost change?

                        if ive11a.unit_cost<>ret_cost then
                            if ret_cost ive11a.unit_cost=ret_cost
                            ive11a.total_cost=round(ive11a.trans_qty*ive11a.ive11a.unit_cost,2)
                            write record (ive11_dev,key=ive11a.firm_id$+ive11a.iv_trans_no$+ive11a.sequence_no$) ive11a$
                        endif
                    endif
                endif

rem --- New page?

                if l+2>=l9 then 
                    gosub report_heading
                    gosub trans_heading
                endif

rem --- Print detail line

                account$=""
                lotser$=""
                t0=t0+ive11a.total_cost
                l=l+2
                if gl$="Y" account$=fnmask$(ive11a.gl_account$,gls01a.acct_output$)
                if ls$="Y" if ivm02a.inventoried$="Y" lotser$=ive11a.lotser_no$
                print (printer_dev)@(o[0]),ive11a.sequence_no$,@(o[1]),ive11a.warehouse_id$,@(o[2]),ive11a.item_id$,@(o[3]),description$,@(o[4]),ive11a.trans_qty:m2$,@(o[5]),ive11a.unit_cost:m3$,@(o[6]),ive11a.total_cost:m1$,@(o[7]),account$,@(o[8]),ive11a.operator_id$
                print (printer_dev)@(o[3]),lotser$

rem --- G/L Distribution

                if gl$<>"Y"  continue
                if ivm10b_trans_type$="C" continue

rem --- Distribute by Item?

                if ivm10b_post_gl$="N"  continue
                if a9$="Y" then
                    rem dim d1$(40)
                    find record (ivm02a_dev,key=firm_id$+ive11a.warehouse_id$+ive11a.item_id$,dom=post_summary) ivm02a$
                    find record (arm10d_dev,key=firm_id$+"D"+ivm02a.dist_code$,dom=post_summary) arm10d$
                    arm10d_key$=arm10d.gl_inv_acct$
                endif

post_summary: rem --- Post summary record

                precision 2
                account$=arm10d.firm_id$+arm10d.RECORD_ID_D$+arm10d.dist_code$+arm10d.code_desc$+arm10d.RESERVED_STR$
                gldate$=ive01a.trans_date$
                memo$=ive11a.item_id$+" "+description$
                ref1$="Inv Trn "+ive01a.trans_code$
                ref2$=ive11a.iv_trans_no$
                ref3$=ive11a.sequence_no$
                amount=ive11a.total_cost
                if ivm10b.trans_type$="I" amount=-amount
                gosub glrecap
                account$=ive11a.ls_comments$
                amount=-amount
                gosub glrecap
                precision num(ivs01a.precision$)

rem --- Loop back for next detail

            wend

 rem --- Loop back for next header
        endif
    wend

done: rem --- Totals

    let t9$="E",update$="ivu_aa.bbx"
    gosub ref_break
    if gl$="Y" run pgmdir$+"glr_recap.aon"
    run update$,err=std_exit

report_heading: rem --- Report Heading

    let l=headings+2
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,page,width,when$,clock$,status
    if status exitto std_exit
    print (printer_dev)@(o[0]),"Seq",@(o[1]),"Wh",@(o[2]),"Item",@(o[3]),"Description",p8$,@(o[4]+m2-9),"Quantity",@(o[5]+m3-5),"Cost",@(o[6]+m1-11),"Total Cost",@(o[7]),glh$,@(o[8]),"Who"
    return

trans_heading: rem --- Trans Heading

    if l+6>l9 gosub report_heading
    print (printer_dev)""
    print (printer_dev)"Reference ",ive01a.iv_trans_no$,@(23),"Transaction Code: ",ive01a.trans_code$," ",ivm10b.code_desc$,@(73),"Transaction Date: ",fndate$(ive01a.trans_date$),@(103),"Comment: ",ive01a.trans_cmt$
    if gl$="Y" then
        call pgmdir$+"glc_datecheck.aon",ive01a.trans_date$,"N",period$,year$,glstatus
        if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,ive01a.trans_date$,glstatus,l,errors,status
    endif
    print (printer_dev)""
    let l=l+3
    return

ref_break: rem --- Reference break, previous totals

    if t0$<>"" then
        if l+1>l9 gosub report_heading
        print (printer_dev)@(o[6]-27),"Total For Reference ",t0$,@(o[6]),t0:m1$
        let l=l+1
    endif
rem --- New reference

    if t9$="" then
        rem dim x0$(32),x1$(g[4])
        let t0$=ive01a.iv_trans_no$,ivm10b.code_desc$="(Not On File)",t0=0
        find record (ivm10b_dev,key=firm_id$+"B"+ive01a.trans_code$,dom=*next) ivm10b$
        gosub trans_heading
    endif
    return
glrecap: rem --- Standard G/L Recap Routine

    if gl$="Y" then
        call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    rem run pgmdir$+"ads_process_end.aon",err=*next
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
