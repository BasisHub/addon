rem --- Inventory Activity Type Column Entry
rem --- Program ivc_ra v8.0.0 05Dec2007 (ivc_ra)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (12/05/2007 10:19:27)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        seterr std_error
        setesc std_error
        enter win_y,win_title$,columns$

rem --- Retrieve the program path

        pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+sysinfo_tpl",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+sysinfo",err=*next)
        rem milestone=num(stbl("+milestone",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=1,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="ivs_params",ids$[1]="IVS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        ivs01a_dev=channels[1]

rem --- Dimension string templates

        dim ivs01a$:templates$[1]

rem --- Assign form input values to local variables

        value_01$=Option!.getOptionData("form_value_01")

rem --- Retrieve parameter records

        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$

rem --- Determine interface

        call pgmdir$+"syc_dg.bbx",sysgui_dev,event$,event_len,sysfin$,sysfin,ui$,status
        if status then goto the_bitter_end
        if ui$="W" then let prev_context=sysfin.current_context

rem --- Initializations

        width=67
        height=12,win_x=6,name$=""
        if win_y=0 then let win_y=8
        if win_y+height>23 then let win_y=23-height
        columns$=pad(columns$,18)
        controls=17
        dim control[controls],value$[controls],value[controls],mask$[controls]
        for i=0 to 5
            control[i]=3000+i
            control[i+6]=2100+i,control[i+12]=2110+i
        next i
        more=1
        chkstat=1
        returntolabel1=1
rem --- Window heading

        dim heading$(width-2)
        heading$(2)="Column   Type   Description"
        heading$(52)="Column Title"
        call pgmdir$+"syc_rg.bbx::save",globals$,ignore_status

rem --- Background

        if ui$<>"W" then call pgmdir$+"syc_wa.bbx",0,width,height,win_x,win_y,win_title$,name$
        dim resparams$[20],resparams[20]
        resparams$[0]=pgm(-2)
        call pgmdir$+"syc_ra.bbx","O",resparams$[all],resparams[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],status
        if status then goto std_exit
rem --- Display

        gosub display_fields
        for i=0 to 1
             exitto done
        next i
    While more
        Activity_Type: rem --- Activity Type
            v0=3
            v1=10,v2=i0+2,p=i0*3+1,control_id=3000+i0
            if i0=0 v3=0; rem can't backup past the first field

            while more
                Activity_displayed:
                    v0$="S"
                    v1$="C^",v2$=columns$(p,3),v3$=""
                    v4$="Enter the activity to be displayed (<F1>=None/<F3>=Lookup)"
                    rem gosub std_input
                    on v3 goto D_ActSub,Check_stat,Control_Flow,Return_To,Control_Flow,D_ActSub,Control_Flow
                Check_stat:
                    v$=""
                    chkstat=0
                Return_To:
                    if chkstat=1
                        call pgmdir$+"ivc_lc.bbx",v$
                        if v$="" then
                            returntolabel1=0
                            break
                        endif
                    endif
                D_ActSub:
                    i=i0
                    gosub d_act
                    if not_valid then
                        continue
                    endif
                    columns$(p,3)=v$
                    break
            wend

            if returntolabel1=0
                continue
            endif
        Control_Flow:
                        break
    wend

    flow_control: rem --- Flow Control

        switch v3
            case 0
            case 1
            case 3; let i0=i0+1; break
            case 2
            if i0<i0_nonkey1 then let i0=max(0,i0-1) else let i0=max(i0_nonkey1,i0-1)
            break
            case 4; exitto start_done
            case default; exitto done_v3
        swend

    While more
        next_field:
            on i0 goto Activity_Type,Activity_Type,Activity_Type,Activity_Type,Activity_Type,Activity_Type,done

        start_done: 
            i0=i0_done

        done: rem --- Correct?
            if validate then let validate=0; goto std_exit
            v0$="S"
            v1$="KC",v2$="Y",v3$="",v0=6,v1=0,v2=22,v4$="ITAC=Y",control_id=i0-i0_done+1
           rem  gosub std_input

        done_v3:
            on v3 goto done_test,done,done,done,cancel,validate_input,cancel,done

        done_test:
            v=abs(int(num(v$,err=*next)))
            if v>i0_nonkey1 then
                let i0=v-1
                continue
            endif
            on pos(v$="YN") goto flow_control,validate_input,do_nonkey1

        validate_input:
            validate=1
            old_control_id=0

        do_nonkey1:
            i0=i0_nonkey1
            continue
    Wend

    cancel:
        goto std_exit

    display_fields: rem --- Display Fields
   
        for i=0 to 5
            v$=columns$(i*3+1,3)
            gosub d_act
        next i
        return

    d_act: rem --- Display activity type

        desc$=""
        title$="",not_valid=0
        if cvs(v$,2)<>"" then
            call pgmdir$+"ivc_activity.aon",pad(v$,3),desc$,title$,status
            if status then let desc$="",title$="",not_valid=1
        endif

    rem l5150:
        call pgmdir$+"syc_rs.bbx","",my_context,3000+i,v$,0,"",ignore_status
        call pgmdir$+"syc_rs.bbx","",my_context,2100+i,desc$,0,"",ignore_status
        call pgmdir$+"syc_rs.bbx","",my_context,2110+i,title$,0,"",ignore_status
        return
    rem --- Clear fields

        dim value$[controls],value[controls]
        call pgmdir$+"syc_rd.bbx","",my_context,0,controls,control[all],value$[all],value[all],mask$[all],status
        return

    the_bitter_end:
        exit

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
