rem --- Lot/Serial Activity Report (Input Overlay)
rem --- Program ivr_lotactivity.aon v8.0.0 09Jul2007 (ivr_6a)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:52:25)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Option object for type-checking

	use ::sys/prog/bao_option.bbj::Option

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivm-01",ids$[1]="IVM_ITEMMAST"
    files$[2]="ivm-02",ids$[2]="IVM_ITEMWHSE"
    files$[3]="ivm-07",ids$[3]="IVM_LSMASTER"
    files$[5]="ivc_whsecode",ids$[5]="IVC_WHSECODE"
    files$[6]="ivm-17",ids$[6]="IVM_LSACT"
    files$[7]="aps_params",ids$[7]="APS_PARAMS"
    files$[9]="ivs_params",ids$[9]="IVS_PARAMS"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivm01_dev=channels[1]
    ivm02_dev=channels[2]
    ivm07_dev=channels[3]
    ivm10c_dev=channels[5]
    ivm17_dev=channels[6]
    aps01a_dev=channels[7]
    ivs01a_dev=channels[9]

rem --- Dimension string templates

    dim ivm01a$:templates$[1],ivm02a$:templates$[2],ivm07a$:templates$[3],
:       ivm10c$:templates$[5],ivm17a$:templates$[6],
:       aps01a$:templates$[7],ivs01a$:templates$[9]

rem --- Assign form input values to local variables

	declare Option option!

    sequence$=option!.getOptionData("pick_listbutton")
    ocb$=option!.getOptionData("op_cl_both")
    period1$=option!.getOptionData("period_year_1")
    begyear$=period1$(1,4),begper$=period1$(5,2)
    period2$=option!.getOptionData("period_year_2")
    endyear$=period2$(1,4),endper$=period2$(5,2)
    begwhse$=option!.getOptionData("warehouse_id_1")
    endwhse$=option!.getOptionData("warehouse_id_2")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")
    begitem$=option!.getOptionData("item_id_1")
    enditem$=option!.getOptionData("item_id_2")
    type$=option!.getOptionData("item_type")
    beglot$=option!.getOptionData("lotser_no_1")
    endlot$=option!.getOptionData("lotser_no_2")
    rem "ITEM INACTIVE FEATURE"
    inactive$=Option!.getOptionData("ITEM_INACTIVE")
	
rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
 
rem --- Parameters

    if pos(ivs01a.lotser_flag$="LS")=0 then goto std_exit

    dim p[5],i[1],info$[20]
    vh$="",m0=0,m0$=""
    p[0]=ivs01a.item_id_len
    p[1]=num(ivs01a.precision$)
    p[2]=ivs01a.ls_no_len
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)

    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]
    
    if ap$<>"N" then
        find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
        files$[10]="apm-01",ids$[10]="APM_VENDMAST"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        apm01_dev=channels[10]
        dim apm01a$:templates$[10]
        vh$=Translate!.getTranslation("AON_VENDOR")
		call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",m0$,0,m0
        i[0]=m0
    endif

rem --- Initializations

    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,m1
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,m2
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,m3

rem --- Retrieve key template

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVM_LSMASTER","PRIMARY",ivm07_key_tpl$,rd_table_chans$[all],status$
    rem call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_LSXREF","PRIMARY",ivm08_key_tpl$,rd_table_chans$[all],status$
    dim ivm07a_key$:ivm07_key_tpl$
	dim ivm08a_key$:"firm_id:c(2), lotser_no:c(20), warehouse_id:c(2), item_id:c(20)"

 rem --- Run Overlay

    run pgmdir$+"ivr_lotactivity_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$
    fnend

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
