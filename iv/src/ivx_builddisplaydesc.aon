rem --- IV Build Display Description Utility
rem --- Program ivx_builddisplaydesc.aon v8.0.0 02Feb2009

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem ==========================================================================
rem 	This purpose of this utility is to build a new field, "display 
rem 	description".  This field is used in all the normal display areas
rem 	in Barista.  It already has fnitem$() applied to it, that is, the
rem 	description segments are smoothed out.  The regular description field
rem 	retains its segmented quality.  The reason for this is that Barista
rem 	does not and should not know about segmented descriptions; this is a
rem 	purely Addon function.
rem ==========================================================================

    seterr std_error
    setesc std_error

rem --- Use function object

	use ::ado_func.src::func
	
rem --- Retrieve the program path

	pgmdir$=""
	pgmdir$=stbl("+DIR_PGM",err=*next)
	sypdir$=""
	sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Inform user of what's about to happen

	msg_id$ = "AON_UPDT_DISP_DESC"
	gosub disp_message
	if msg_opt$<>"Y" then goto std_exit

rem --- Open all files

	num_files = 1
	open_beg  = 1
	open_end  = num_files
	
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="IVM_ITEMMAST", open_opts$[1]="OTA"
	
	gosub open_tables
	
	itemmast_dev = num(open_chans$[1])
	dim itemmast_rec$:open_tpls$[1]

rem --- Initializations
	
	more = 1
	call pgmdir$+"adc_progress.aon","N","","","","",0,itemwhse_dev,1,meter_num,status
	if status = 999 then goto std_exit
	read (itemmast_dev, key=firm_id$, dom=*next)

rem --- Get next record 
	
	while more
		extract record (itemmast_dev, end=*break) itemmast_rec$
		if itemmast_rec.firm_id$ <> firm_id$ then read(itemmast_dev); break
		
		call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
		if status = 999 then exitto std_exit
		
		if cvs(itemmast_rec.display_desc$,2) = "" then
			itemmast_rec.display_desc$ = func.displayDesc(itemmast_rec.item_desc$)
			itemmast_rec$ = field(itemmast_rec$)
		endif
		
		write record (itemmast_dev) itemmast_rec$
	wend

rem --- All done

	call pgmdir$+"adc_progress.aon","D","","","","",0,0,1,0,status
	if status = 999 then goto std_exit
	
	open_tables$[1]="IVM_ITEMMAST", open_opts$[1]="C"
	gosub open_tables
	
	goto std_exit

open_tables: rem --- Open tables

	call sypdir$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		status=912
		goto std_exit
	endif

	return
	
disp_message: rem --- Display Message Dialog

	call sypdir$+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

	return
	
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	msg_id$="UPDATE_COMPLETE"
	dim msg_tokens$[1]
	msg_opt$=""
	gosub disp_message

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
	
rem #endinclude std_end.src

    end
