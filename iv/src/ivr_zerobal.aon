rem --- Zero Balance Inventory Report (Input Overlay)
rem --- Program ivr_zerobal.aon v8.0.0 09Jul2007 (ivr_za)
rem --- Created by adx_codeport.bbx v1.1.5 (07/09/2007 11:48:54)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ivm-03",ids$[1]="IVX_ITEMPHYS"
    files$[2]="apm-01",ids$[2]="APM_VENDMAST"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="ivm-02",ids$[4]="IVM_ITEMWHSE"
    files$[5]="ivm-03",ids$[5]="IVX_ITEMPRWH"
    files$[6]="ivc_prodcode",ids$[6]="IVC_PRODCODE"
    files$[7]="ivs_zerobal",ids$[7]="IVS_ZEROBAL"
    files$[8]="ivt-05",ids$[8]="IVT_ZEROBAL"
    files$[9]="aps_params",ids$[9]="APS_PARAMS"
    files$[10]="ivs_params",ids$[10]="IVS_PARAMS"
    files$[11]="ivc_whsecode",ids$[11]="IVC_WHSECODE"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivm03b_dev=channels[1]
    apm01_dev=channels[2]
    ivm01_dev=channels[3]
    ivm02_dev=channels[4]
    ivm03c_dev=channels[5]
    ivm10a_dev=channels[6]
    ivs10a_dev=channels[7]
    ivt05_dev=channels[8]
    aps01a_dev=channels[9]
    ivs01a_dev=channels[10]
    ivm10c_dev=channels[11]

rem --- Dimension string templates

    dim apm01a$:templates$[2],ivm01a$:templates$[3],ivm02a$:templates$[4],
:       ivm03c$:templates$[5],ivm10a$:templates$[6],ivs10a$:templates$[7],
:       ivt05a$:templates$[8],aps01a$:templates$[9],ivs01a$:templates$[10],
:	ivm03b$:templates$[1],ivm10c$:templates$[11]

rem --- Assign form input values to local variables

    include$=option!.getOptionData("report_date")
    sequence$=option!.getOptionData("report_seq")
    begprod$=option!.getOptionData("product_type_1")
    endprod$=option!.getOptionData("product_type_2")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    ivs10a_key$=firm_id$+"A"
    find record (ivs10a_dev,key=ivs10a_key$,err=*next) ivs10a$

rem --- Parameters

    dim p[5],info$[20],i[1]
    firm_id$=sysinfo.firm_Id$
    n1$=sysinfo.firm_name$
    n3$=sysinfo.task_desc$
    when$=sysinfo.system_date$
    prev_p9$=ivs10a.run_date$
    p9$=include$
    more=1
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.current_per$)
    p[2]=num(ivs01a.current_year$)
    p[3]=num(ivs01a.desc_len_01$)
    p[4]=num(ivs01a.desc_len_02$)
    p[5]=num(ivs01a.desc_len_03$)

    call pgmdir$+"adc_application.aon","AP",info$[all]
    ap$=info$[20]
    if ap$<>"N" then
        find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
        i[0]=num(aps01a.vendor_size$)
        files=1,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="apm-01",ids$[1]="APM_VENDMAST"

        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
	if status goto std_exit
	apm01_dev=channels[1]
	dim apm01a$:templates$[1]
	m0$=aps01a.vendor_output$
        m0=i[0]
    endif

rem --- Resize masks

    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C",imask$,m3$,0,0
    call pgmdir$+"adc_sizemask.aon",m1$,m1,12,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15
    call pgmdir$+"adc_sizemask.aon",m3$,m3,10,15
   

rem --- Retrieve key template

    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPHYS","PRIMARY",ivm03b_key_tpl$,table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVX_ITEMPRWH","PRIMARY",ivm03c_key_tpl$,table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","IVT_ZEROBAL","PRIMARY",ivt05a_key_tpl$,table_chans$[all],status$

    if sequence$="C" dim ivm03_key$:ivm03b_key_tpl$;ivm03_dev=ivm03b_dev,sort$="B"
    if sequence$<>"C" dim ivm03_key$:ivm03c_key_tpl$;ivm03_dev=ivm03c_dev,sort$="C"
    dim ivt05a_key$:ivt05a_key_tpl$

    if num(p9$)<>0 if p9$=prev_p9$ goto run_overlay

    ivs10a.firm_id$=firm_id$
    ivs10a.record_id_a$="A"
    ivs10a.run_date$=p9$
    write record (ivs10a_dev)ivs10a$

    read (ivm02_dev,key=firm_id$,DOM=*next)
    while more
        read record (ivm02_dev)ivm02a$
	if ivm02a.firm_id$<>firm_id$ break
        if ivm02a.qty_on_hand-ivm02a.safety_stock>0 then remove (ivt05_dev,KEY=ivm02a.firm_id$+ivm02a.warehouse_id$+ivm02a.item_id$,dom=*continue); continue
	ivt05a.firm_id$=ivm02a.firm_id$,ivt05a_key.firm_id$=ivm02a.firm_id$
	ivt05a.warehouse_id$=ivm02a.warehouse_id$,ivt05a_key.warehouse_id$=ivm02a.warehouse_id$
	ivt05a.item_id$=ivm02a.item_id$,ivt05a_key.item_id$=ivm02a.item_id$
	ivt05a.writtn_date$=when$
	write record (ivt05_dev)ivt05a$
    wend

run_overlay: rem --- Run overlay
    run pgmdir$+"ivr_zerobal_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

   def fndate$(q$) 
        if cvs(q$,2)="" return ""
        testdate$=""
        testdate$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if testdate$<>"" 
            return date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
        endif
        return testdate$
    fnend    
rem    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
