rem --- Work Order entry - Transaction History

rem --- AddonSoftware
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Assign form input values to local variables

	from_date$=option!.getOptionData("FROM_DATE")
	thru_date$=option!.getOptionData("THRU_DATE")
	type_m$=option!.getOptionData("SF_TRANSTYPE_M")
	type_o$=option!.getOptionData("SF_TRANSTYPE_O")
	type_s$=option!.getOptionData("SF_TRANSTYPE_S")
	wo_no$=option!.getOptionData("WO_NO")
	wo_stat$=option!.getOptionData("WO_STATUS")
	closed_date$=option!.getOptionData("CLOSED_DATE")
	gl_end_date$=option!.getOptionData("GL_END_DATE")
	wo_loc$=option!.getOptionData("WO_LOCATION")

rem --- Open files

	num_files=13
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="SFT_CLSLSTRN",   open_opts$[1]="OTA"
	open_tables$[2]="SFT_OPNLSTRN",   open_opts$[2]="OTA"
	open_tables$[3]="SFE_WOMASTR",    open_opts$[3]="OTA"
	open_tables$[4]="IVM_ITEMMAST",   open_opts$[4]="OTA"
	open_tables$[5]="SFT_CLSMATTR",   open_opts$[5]="OTA"
	open_tables$[6]="SFT_OPNMATTR",   open_opts$[6]="OTA"
    open_tables$[7]="SFT_CLSOPRTR",   open_opts$[7]="OTA"
    open_tables$[8]="SFT_OPNOPRTR",   open_opts$[8]="OTA"
    open_tables$[9]="SFT_CLSSUBTR",   open_opts$[9]="OTA"
    open_tables$[10]="SFT_OPNSUBTR",  open_opts$[10]="OTA"
	if stbl("bm")<>"Y"
		open_tables$[11]="SFC_OPRTNCOD",open_opts$[11]="OTA"
	else
		open_tables$[11]="BMC_OPCODES",open_opts$[11]="OTA"
	endif
	if stbl("pr")<>"Y"
		open_tables$[12]="SFM_EMPLMAST",open_opts$[12]="OTA"
	else
		open_tables$[12]="PRM_EMPLMAST",open_opts$[12]="OTA"
	endif
	open_tables$[13]="APM_VENDMAST",  open_opts$[13]="OTA"
	
    gosub open_tables

	sfe_womastr=num(open_chans$[3])
	ivm_itemmast=num(open_chans$[4])
	opcode_dev=num(open_chans$[11])
	emplmast_dev=num(open_chans$[12])
	vendmast_dev=num(open_chans$[13])
	
	dim sfe_womastr$:open_tpls$[3]
	dim ivm_itemmast$:open_tpls$[4]
	dim opcode$:open_tpls$[11]
	dim emplmast$:open_tpls$[12]
	dim vendmast$:open_tpls$[13]
	
rem --- Initializations

    if wo_stat$="C" and closed_date$<=gl_end_date$ wo_status$="0"
    if wo_stat$<>"C" or closed_date$>gl_end_date$ wo_status$="1"
	if wo_status$="0" lotser_dev=fnget_dev("SFT_CLSLSTRN")
	if wo_status$="1" lotser_dev=fnget_dev("SFT_OPNLSTRN")
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","A","",m1$,0,0
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","U","",m2$,0,0
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","R","",m3$,0,0
	call stbl("+DIR_PGM")+"adc_getmask.aon","VENDOR_ID","","","",vend_mask$,0,vendor_size
	
rem --- Headings and print positions

	dim headings$[2]
	headings$[0]=sysinfo.firm_name$
	headings$[1]=sysinfo.task_desc$+" - "+Translate!.getTranslation("AON_WORK_ORDER")+": "+wo_no$
	headings$[2]=Translate!.getTranslation("AON_TRANSACTION HISTORY")
	
    columns = 8
    dim columns$[columns,10]
    columns$[0,0]=Translate!.getTranslation("AON_DATE"), columns$[0,1]="C", columns$[0,2]="8"
    columns$[1,0]=Translate!.getTranslation("AON_SOURCE"), columns$[1,1]="C", columns$[1,2]="6"
    columns$[2,0]=Translate!.getTranslation("AON_SOURCE_ACCT"), columns$[2,1]="C",columns$[2,2]="20"
    columns$[3,0]=Translate!.getTranslation("AON_DESCRIPTION"), columns$[3,1]="C",columns$[3,2]="35"
    columns$[4,0]=Translate!.getTranslation("AON_UNITS"), columns$[4,1]="N",columns$[4,2]="12",columns$[4,3]=m2$
    columns$[5,0]=Translate!.getTranslation("AON_RATE"), columns$[5,1]="N",columns$[5,2]="12",columns$[5,3]=m3$
	columns$[6,0]=Translate!.getTranslation("AON_COST"), columns$[6,1]="N",columns$[6,2]="12",columns$[6,3]=m1$
    columns$[7,0]=Translate!.getTranslation("AON_COMPLETE")+"^"+Translate!.getTranslation("AON_QTY"), columns$[7,1]="N", columns$[7,2]="12",columns$[7,3]=m2$
    columns$[8,0]=Translate!.getTranslation("AON_SETUP"), columns$[8,1]="N", columns$[8,2]="10",columns$[8,3]=m2$

rem --- Get Master Work Order

	while 1

		read(sfe_womastr,key=firm_id$+wo_loc$+wo_no$,dom=*break)sfe_womastr$
	
rem --- Do Materials

		if type_m$="Y"
			if wo_status$="0"
				wotran_dev=fnget_dev("SFT_CLSMATTR")
				dim wotran$:fnget_tpl$("SFT_CLSMATTR")
			else
				wotran_dev=fnget_dev("SFT_OPNMATTR")
				dim wotran$:fnget_tpl$("SFT_OPNMATTR")
			endif
			read record (wotran_dev,key=firm_id$+sfe_womastr.wo_location$+wo_no$+from_date$,dom=*next)
			while 1
				read record (wotran_dev,end=*break)wotran$
				if pos(firm_id$+sfe_womastr.wo_location$+wo_no$=wotran$)<>1 break
				if cvs(thru_date$,3)<>""
					if wotran.trans_date$>thru_date$ break
				endif
				dim ivm_itemmast$:fattr(ivm_itemmast$)
				read record (ivm_itemmast,key=firm_id$+wotran.item_id$,dom=*next) ivm_itemmast$
				outVect!.addItem(fndate$(wotran.trans_date$))
				outVect!.addItem("M")
				outVect!.addItem(wotran.item_id$)
				outVect!.addItem(ivm_itemmast.item_desc$)
				outVect!.addItem(str(wotran.units))
				outVect!.addItem(str(wotran.unit_cost))
				outVect!.addItem(str(wotran.units*wotran.unit_cost))
				mat_tot=mat_tot+(wotran.units*wotran.unit_cost)
				xvk=fnblank(2)
				lines=lines+1
				m_lines=m_lines+1
			wend
		endif
	
rem --- Do Operations

		if type_o$="Y"
				wotran_dev=fnget_dev("SFT_CLSOPRTR")
				dim wotran$:fnget_tpl$("SFT_CLSOPRTR")
			else
				wotran_dev=fnget_dev("SFT_OPNOPRTR")
				dim wotran$:fnget_tpl$("SFT_OPNOPRTR")
			endif
			read record (wotran_dev,key=firm_id$+sfe_womastr.wo_location$+wo_no$+from_date$,dom=*next)
			while 1
				if m_lines>0
					xvk=fnblank(9)
					m_lines=0
				endif
				read record (wotran_dev,end=*break)wotran$
				if pos(firm_id$+sfe_womastr.wo_location$+wo_no$=wotran$)<>1 break
				if cvs(thru_date$,3)<>""
					if wotran.trans_date$>thru_date$ break
				endif
				dim opcode$:fattr(opcode$)
				read record (opcode_dev,key=firm_id$+wotran.op_code$,dom=*next) opcode$
				dim emplmast$:fattr(emplmast$)
				read record (emplmast_dev,key=firm_id$+wotran.employee_no$,dom=*next) emplmast$
				outVect!.addItem(fndate$(wotran.trans_date$))
				outVect!.addItem("O")
				outVect!.addItem(wotran.op_code$+" "+opcode.code_desc$)
				outVect!.addItem(cvs(emplmast.empl_surname$,2)+", "+cvs(emplmast.empl_givname$,2))
				outVect!.addItem(str(wotran.units))
				outVect!.addItem(str(wotran.unit_cost))
				outVect!.addItem(str(wotran.units*wotran.unit_cost))
				outVect!.addItem(str(wotran.complete_qty))
				outVect!.addItem(str(wotran.setup_time))
				ops_tot=ops_tot+(wotran.units*wotran.unit_cost)
				lines=lines+1
				o_lines=o_lines+1
			wend
		endif
	
rem --- Do Subcontracts

		if type_s$="Y"
			if wo_status$="0"
				wotran_dev=fnget_dev("SFT_CLSSUBTR")
				dim wotran$:fnget_tpl$("SFT_CLSSUBTR")
			else
				wotran_dev=fnget_dev("SFT_OPNSUBTR")
				dim wotran$:fnget_tpl$("SFT_OPNSUBTR")
			endif
			read record (wotran_dev,key=firm_id$+sfe_womastr.wo_location$+wo_no$+from_date$,dom=*next)
			while 1
				if o_lines>0
					xvk=fnblank(9)
					o_lines=0
				endif
				read record (wotran_dev,end=*break)wotran$
				if pos(firm_id$+sfe_womastr.wo_location$+wo_no$=wotran$)<>1 break
				if cvs(thru_date$,3)<>""
					if wotran.trans_date$>thru_date$ break
				endif
				dim vendmast$:fattr(vendmast$)
				read record (vendmast_dev,key=firm_id$+wotran.vendor_id$,dom=*next) vendmast$
				outVect!.addItem(fndate$(wotran.trans_date$))
				outVect!.addItem("S")
				outVect!.addItem(fnmask$(wotran.vendor_id$(1,vendor_size),vend_mask$)+" "+vendmast.vendor_name$)
				outVect!.addItem(Translate!.getTranslation("AON_PO_NO")+": "+wotran.po_no$+" "+wotran.desc$)
				outVect!.addItem(str(wotran.units))
				outVect!.addItem(str(wotran.unit_cost))
				outVect!.addItem(str(wotran.ext_cost))
				sub_tot=sub_tot+wotran.ext_cost
				xvk=fnblank(2)
				lines=lines+1
			wend
		endif

		break
	wend

rem --- Output totals

	xvk=fnblank(9)
	if type_m$="Y"
		xvk=fnblank(3)
		outVect!.addItem("Materials Total:")
		xvk=fnblank(2)
		outVect!.addItem(str(mat_tot))
		xvk=fnblank(2)
	endif
	if type_o$="Y"
		xvk=fnblank(3)
		outVect!.addItem("Operations Total:")
		xvk=fnblank(2)
		outVect!.addItem(str(ops_tot))
		xvk=fnblank(2)
	endif
	if type_m$="Y"
		xvk=fnblank(3)
		outVect!.addItem("Subcontracts Total:")
		xvk=fnblank(2)
		outVect!.addItem(str(sub_tot))
		xvk=fnblank(2)
	endif

rem --- read transactions
done:

	if lines=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
	endif
	goto std_exit

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

    def fnget_dev(tmp0$)=num(rd_table_chans$[0,0](pos(pad(tmp0$,17)=rd_table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=rd_table_chans$[num(rd_table_chans$[0,0](pos(pad(tmp0$,17)=rd_table_chans$[0,0],20)+17,3)),0]

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	rd_called$="YES"
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src
	
    end