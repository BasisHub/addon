rem --- Close Recurring Work Orders - Parameters
rem --- Program sfu_da v8.0.0 15Jan2008 (sfu_da)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/15/2008 10:35:31)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=10,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
    files$[3]="sfe-01",ids$[3]="SFE_WOMASTR"
    files$[4]="sfe-03",ids$[4]="SFX_TYPEWO"
    files$[5]="sfe-04",ids$[5]="SFE_WOTRANS"
    files$[6]="sfm-10",ids$[6]="SFC_WOTYPECD"
    files$[7]="sfs-01a",ids$[7]="SFS_PARAMS"
    files$[8]="sft-01",ids$[8]="SFT_OPNOPRTR"
    files$[9]="sft-21",ids$[9]="SFT_OPNMATTR"
    files$[10]="sft-31",ids$[10]="SFT_OPNSUBTR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01a_dev=channels[1]
    ivs01a_dev=channels[2]
    sfe01_dev=channels[3]
    sfe03_dev=channels[4]
    sfe04_dev=channels[5]
    sfm10_dev=channels[6]
    sfs01a_dev=channels[7]
    sft01_dev=channels[8]
    sft21_dev=channels[9]
    sft31_dev=channels[10]


rem --- Dimension string templates

    dim gls01a$:templates$[1],ivs01a$:templates$[2],sfe01a$:templates$[3],
:       sfe03a$:templates$[4],sfe04a$:templates$[5],sfm10a$:templates$[6],
:       sfs01a$:templates$[7],sft01a$:templates$[8],sft21a$:templates$[9],
:       sft31a$:templates$[10]

rem --- Assign form input values to local variables

    v$=Option!.getOptionData("Period <1 Thru 3/End>")

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$


rem --- Parameters

    n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$
    find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    dim p[2],g[4]

    dim glso1$:tmpl(gls01a_dev)
    gls01_field$=fattr(glso1$,"")
    xfer$=gls01_field$(pos("total_pers"=cvs(gls01_field$,8))-1)
    xfer$=xfer$(1,pos("per_ending_01"=cvs(xfer$,8))-1)
    x=0
    while xfer$<>""
       xfield$=xfer$(1,pos($0A$=xfer$)-1)
       g[x]=num(field(gls01a$,xfield$),err=*next)
       xfer$=xfer$(pos($0A$=xfer$)+1)
       x=x+1
    wend

    g[2]=fnyy_year(gls01a.current_year$)
    p[0]=num(sfs01a.empl_no_len$)
    p[1]=num(sfs01a.current_per$),p[2]=fnyy_year(sfs01a.current_year$)

rem --- Initialize Data

    h0=60
    h1=120,h=0,h1$=n1$,h2$=n3$
    l9=50
    l=l9+1
    dim j$(80,"-")
    m0=len(sfs01a.empl_output$)
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","A","",m1$,0,m1
    g5=len(gls01a.acct_output$)
    more=1

rem --- Background

    for x=4 to 5 step 2
        call pgmdir$+"syc_wc.bbx",1,0,80,0,0,x,0
    next x
    print 'sb',@(16,3),"Period <1 Thru "+str(p[1]:"##")+"/End>: ",'sf',@(0,22),'cl',

rem --- Options
    while more
        flag=0
        seterr std_error
        v0$="S"
        v1$="E",v2$="",v3$="",v4$="",v0=3,v1=40,v2=3
        if v3=4 then goto std_exit
        i=num(v$,err=*continue)
        if i<1 or i>p[1] then continue

rem --- Determine Period Limits

        v=i
        call pgmdir$+"adc_perioddates.aon",sys01_dev,i,p[2],v0$,v9$,status
        if status then goto std_exit
        p8$=v0$
        p9$=v9$,p9=i
        h3$="Period "+str(i)+"  From "+fndate$(v0$)+" To "+fndate$(v9$)
        print @(40,3),h3$(8),

rem --- Correct?
        while more
            v4$="Close All Recurring Work Orders For This Period: "
            call pgmdir$+"adc_yesno.aon",1,v4$,0,v$,v3
            print @(0,5),'cl',
            if v3=4 then goto std_exit
            if v$="NO" then 
                flag=1
                break
            endif
            if v$<>"YES" then continue
            break
        wend
        if flag=1 continue
        break
    wend

rem --- Overlay

    t0$=""
    read (sfm10_dev,key=firm_id$+"A",dom=*next)
    while more
        read record (sfm10_dev,end=*break) sfm10a$
        if pos(firm_id$=(sfm10a.firm_id$+sfm10a.record_id_a$+sfm10a.wo_type$+sfm10a.code_desc$+
:                   sfm10a.wo_category$+sfm10a.stdact_flag$+sfm10a.reserved_str$))<>1 then break
        if sfm10a.wo_category$="R" then let t0$=t0$+sfm10a.wo_type$
    wend
    run pgmdir$+"sfu_db.bbx"

rem --- FUNCTIONS

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnv(q$)=42+int(len(q$)/2)

rem --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year

    def fnyy$(q1$)
    q3$=" 01234567890123456789"
    q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
    return q1$
    fnend

rem --- Convert 2-Char Year to 21st Century Numeric Year

    def fnyy_year(q1$)
    q=num(fnyy$(q1$))
    q9=10,q9=num(stbl("+Y2K_UPPER_LIMIT",err=*next),err=*next)
    if q<q9 then let q=q+100
    return q
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
