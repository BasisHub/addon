rem --- Labor Efficiency Analysis Report - Print
rem --- Program sfr_fb v8.0.0 04Jan2008 (sfr_fb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 10:56:32)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    dim dashes$(m9,"-"),h9$(m1*2+m2,"-"),h7$(m1*2+m2),r[7],s[7],t[7],u[7]

    if category$="IRN" then
        h3$=Translate!.getTranslation("AON_ALL_CATEGORIES")
    else
        if category$="I" then
            h3$=Translate!.getTranslation("AON_INVENTORY_CATEGORIES")
        endif
        if category$="R" then
            h3$=Translate!.getTranslation("AON_RECURRING_CATEGORIES")
        endif
        if category$="N" then
            h3$=Translate!.getTranslation("AON_NON-STOCKING_CATEGORIES")
        endif
    endif

    if datefrom$="" then 
        x9$=Translate!.getTranslation("AON_FROM_THE_FIRST_DATE") 
    else  
        x9$=Translate!.getTranslation("AON_FROM_")+fndate$(datefrom$)
    endif
    x9$=x9$+Translate!.getTranslation("AON__THROUGH_")
    if datethru$="" then 
        x9$=x9$+Translate!.getTranslation("AON_LAST_DATE") 
    else 
        x9$=x9$+fndate$(datethru$)
    endif
    if wotype$="" then wotype$="Y"
    if wostatus$="O" then 
        x8$=Translate!.getTranslation("AON_OPEN_WORK_ORDERS_ONLY") 
    else 
        if wostatus$="C" then 
            x8$=Translate!.getTranslation("AON_CLOSED_WORK_ORDERS_ONLY") 
        else 
            x8$=Translate!.getTranslation("AON_ALL_WORK_ORDERS_INCLUDED")
        endif
    endif

    headings$[2]=x8$
    headings$[3]=h3$
    headings$[4]=x9$

    if status<>0 then goto std_exit
    more=1
	recs=0

rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFW_LABOREFF","PRIMARY",sfw05a_key_tpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    dim columns$[12,10]
    columns = 12
    columns$[0,0]=Translate!.getTranslation("AON_WO_#"),                                                       columns$[0,1]="C",columns$[0,2]="25"
    columns$[1,0]=Translate!.getTranslation("AON_TYPE"),                           columns$[1,1]="C",columns$[1,2]="6"
    columns$[2,0]=Translate!.getTranslation("AON_BEGIN^DATE"),                     columns$[2,1]="C",columns$[2,2]="8"
    columns$[3,0]=Translate!.getTranslation("AON_END^DATE"),                       columns$[3,1]="C",columns$[3,2]="8"
    columns$[4,0]=Translate!.getTranslation("AON_STD^LABOR^HOURS"),                columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$,columns$[4,10]="T"
    columns$[5,0]=Translate!.getTranslation("AON_STD^DIRECT^TOTAL"),               columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"
    columns$[6,0]=Translate!.getTranslation("AON_STD^OVERHEAD^TOTAL"),             columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m1$,columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_ACTUAL^LABOR^HOURS"),             columns$[7,1]="N",columns$[7,2]="8",columns$[7,3]=m2$,columns$[7,10]="T"
    columns$[8,0]=Translate!.getTranslation("AON_ACTUAL^DIRECT^TOTAL"),            columns$[8,1]="N",columns$[8,2]="8",columns$[8,3]=m1$,columns$[8,10]="T"
    columns$[9,0]=Translate!.getTranslation("AON_ACTUAL^OVERHEAD^TOTAL"),          columns$[9,1]="N",columns$[9,2]="8",columns$[9,3]=m1$,columns$[9,10]="T"
    columns$[10,0]=Translate!.getTranslation("AON_LABOR^HOURS^VNCE"),              columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m2$,columns$[10,10]="T"
    columns$[11,0]=Translate!.getTranslation("AON_EFFICIENCY^VARIANCE^PERCENT"),   columns$[11,1]="C",columns$[11,2]="10",columns$[11,5]="R^R^R"
    columns$[12,0]=Translate!.getTranslation("AON_STAT"),							columns$[12,1]="C",columns$[12,2]="4"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfw05a_dev,1,meter_num,status

rem --- Init Read

    read (sfw05a_dev,key=firm_id$,dom=*next)

rem --- Main Read

    dim sfw05a_key$:sfw05a_key_tpl$

    while more
        sfw05a_key$=key(sfw05a_dev,end=*break)
        if pos(firm_id$=sfw05a_key$)<>1 then break
        if sfw05a_key.op_code$<>t1$ then gosub op_code_subtot
        if wotype$="Y" then 
            if sfw05a_key.wo_type$<>t2$ then gosub wo_type_code
        endif
        read record (sfw05a_dev,key=sfw05a_key$) sfw05a$

rem --- Breaks

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

        find record (sfe01_dev,key=firm_id$+"  "+sfw05a.wo_no$) sfe01a$
        if sfe01a.wo_category$="I" then
            ivm01a.item_desc$(1)=Translate!.getTranslation("AON_NOT_ON_FILE")
            find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=*break) ivm01a$
            ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        endif

rem --- print

        if sfw05a.actual_hrs<>0 then 
            variance=sfw05a.std_hrs*100/sfw05a.actual_hrs
        else 
            variance=0
        endif

        OutVect!.addItem(sfw05a.wo_no$)
        OutVect!.addItem(sfe01a.wo_type$)
        OutVect!.addItem(fndate$(sfw05a.trans_date_01$))
        OutVect!.addItem(fndate$(sfw05a.trans_date_02$))
        OutVect!.addItem(str(sfw05a.std_hrs))
        OutVect!.addItem(str(sfw05a.std_dir_tot))
        OutVect!.addItem(str(sfw05a.std_ovhd_tot))
        OutVect!.addItem(str(sfw05a.actual_hrs))
        OutVect!.addItem(str(sfw05a.act_dir_tot))
        OutVect!.addItem(str(sfw05a.act_ovhd_tot))
        OutVect!.addItem(str(sfw05a.std_hrs-sfw05a.actual_hrs))

        if sfw05a.actual_hrs<>0 then 
			OutVect!.addItem(str(variance:"#####.00%")+$00$+"R")
		else 
			OutVect!.addItem("********"+$00$+"R")
		endif

		if sfe01a.wo_status$="C" then
			OutVect!.addItem(Translate!.getTranslation("AON_*CMP*"))
        else 
			OutVect!.addItem("")
        endif

        if sfe01a.wo_category$<>"I" then 
            OutVect!.addItem(sfe01a.description_01$)  
            blank=fnblank(12)
        else
            OutVect!.addItem(ivm01a.item_desc$)  
            blank=fnblank(12)
        endif
		recs=recs+1
        l=l+2
        l0=l0+1,l1=l1+1,l2=l2+1
        x=0 
        total_field$=fattr(sfw05a$,"")
        xtotal$=total_field$(pos("std_hrs"=cvs(total_field$,8)))
        while xtotal$<>""
           total_field$=xtotal$(1,pos($0A$=xtotal$)-1)
           r[x]=r[x]+num(field(sfw05a$,total_field$))
           s[x]=s[x]+num(field(sfw05a$,total_field$))
           t[x]=t[x]+num(field(sfw05a$,total_field$))
           u[x]=u[x]+num(field(sfw05a$,total_field$))
           xtotal$=xtotal$(pos($0A$=xtotal$)+1)
           x=x+1
        wend
    wend 

rem --- End

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    t9$="E"
    gosub op_code_subtot
    if u[3]<>0 then 
        u[6]=u[0]*100/u[3] 
    else 
        u[6]=0
    endif

    blank=fnblank(13)
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(Translate!.getTranslation("AON_REPORT_TOTAL:_"))
    blank=fnblank(3)
    OutVect!.addItem(str(u[0]))
    OutVect!.addItem(str(u[1]))
    OutVect!.addItem(str(u[2]))
    OutVect!.addItem(str(u[3]))
    OutVect!.addItem(str(u[4]))
    OutVect!.addItem(str(u[5]))
    OutVect!.addItem(str(u[0]-u[3]))
    OutVect!.addItem(str(u[6]:"#######.00%")+$00$+"R")
	OutVect!.addItem("")

rem --- All Done!!

    goto std_exit

sub_head: rem --- Sub Heading

    l=l+3
    blank=fnblank(13)
    OutVect!.addItem(Translate!.getTranslation("AON_OPERATION:_")+t1$+"  "+opdesc$)
    blank=fnblank(12)
    blank=fnblank(13)
    return

label2: rem --- Sub/Sub Heading

    OutVect!.addItem(Translate!.getTranslation("AON_WO_TYPE:_") + t2$+"  "+typedesc$)
    blank=fnblank(12)
    l=l+1
    return

rem --- W/O Op Code Subtotals Here
    
    if t0$<>"" then
        if t9$="" then t9$="T"
        gosub op_code_subtot
        if t9$="T" then t9$="",t1$="",t2$=""
        if l+2>l9 then gosub sub_head
        if t[3]<>0 then t[6]=t[0]*100/t[3] else t[6]=0

        blank=fnblank(13)
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem(Translate!.getTranslation("AON_DEPARTMENT:_")+t0$)
        OutVect!.addItem(Translate!.getTranslation("AON_TOTALS:_"))
        blank=fnblank(2)
        OutVect!.addItem(str(t[0]))
        OutVect!.addItem(str(t[1]))
        OutVect!.addItem(str(t[2]))
        OutVect!.addItem(str(t[3]))
        OutVect!.addItem(str(t[4]))
        OutVect!.addItem(str(t[5]))
        OutVect!.addItem(str(t[0]-t[3]))
        OutVect!.addItem(str(t[6])+$00$+"R")
		OutVect!.addItem("")
        l=l+2
    endif

    if t9$<>"" then return
    dim t[7]
    dim dep$(1)
    dep$(1)=sfw05a_key.op_code$
    t0$=dep$
    return

op_code_subtot: rem --- Op Codes Subtotals Here

    if t1$<>"" then
        if wotype$="Y" then
            if t9$="" then t9$="S"
            gosub wo_type_code
        endif
        if t9$="S" then t9$="",t2$=""
        if l1>1 then
            if s[3]<>0 then s[6]=s[0]*100/s[3] else s[6]=0

            blank=fnblank(13)
            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            OutVect!.addItem(Translate!.getTranslation("AON_OP_CODE:_")+t1$+Translate!.getTranslation("AON__TOTALS:_"))
            blank=fnblank(3)
            OutVect!.addItem(str(s[0]))
            OutVect!.addItem(str(s[1]))
            OutVect!.addItem(str(s[2]))
            OutVect!.addItem(str(s[3]))
            OutVect!.addItem(str(s[4]))
            OutVect!.addItem(str(s[5]))
            OutVect!.addItem(str(s[0]-s[3]))
            OutVect!.addItem(str(s[6]:"#######.00%")+$00$+"R")
			OutVect!.addItem("")
            blank=fnblank(13)
            l=l+2
        endif 
        l1=0
        l2=0
    endif 
    if t9$<>"" then return
    dim s[7]
    t1$=sfw05a_key.op_code$
    if bminstalled$="Y" then 
        find record (bmm08a_dev,key=firm_id$+t1$,dom=*endif) bmm08a$
        opdesc$=bmm08a.code_desc$
    else 
        find record (sfm02a_dev,key=firm_id$+t1$,dom=*next) sfm02a$
        opdesc$=sfm02a.code_desc$
    endif

    gosub sub_head
    return

wo_type_code:  rem --- W/O Type Codes Here

    if t2$<>"" then
        if l2>1 then

            if r[3]<>0 then r[6]=r[0]*100/r[3] else r[6]=0

            blank=fnblank(13)
            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            OutVect!.addItem(Translate!.getTranslation("AON_WO_TYPE:_")+t2$+Translate!.getTranslation("AON__TOTALS:_"))
            blank=fnblank(3)
            OutVect!.addItem(str(r[0]))
            OutVect!.addItem(str(r[1]))
            OutVect!.addItem(str(r[2]))
            OutVect!.addItem(str(r[3]))
            OutVect!.addItem(str(r[4]))
            OutVect!.addItem(str(r[5]))
            OutVect!.addItem(str(r[0]-r[3]))
            OutVect!.addItem(str(r[6]:"#######.00%")+$00$+"R")
			OutVect!.addItem("")
            blank=fnblank(13)
            l=l+3
        endif 
        l2=0
    endif 

    if t9$<>"" then return
    if l2<=1 then
        dim r[7]
        t2$=sfw05a_key.wo_type$
        find record (sfm10a_dev,key=firm_id$+"A"+t2$,dom=*next) sfm10a$
        typedesc$=sfm10a.code_desc$
        gosub label2
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- fnblank: Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	out_action$="FORMAT"
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit
	
    end
