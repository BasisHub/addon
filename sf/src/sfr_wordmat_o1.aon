rem --- Work Order Committed Materials Report - Transaction Print
rem --- Program sfr_mb v8.0.0 04Jan2008 (sfr_mb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:01:13)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

	setesc std_error
	seterr std_error

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=50
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Document initializations

	OutVect!=bbjAPI().makeVector()
	HdrVect!=bbjAPI().makeVector()
	BrkVect!=bbjAPI().makeVector()
	TotVect!=bbjAPI().makeVector()

	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)

rem --- Column Headings

	dim columns$[12,10]
	columns=13
	columns$[0,0]=Translate!.getTranslation("AON_ITEM"),               columns$[0,1]="C",columns$[0,2]="15"
	columns$[1,0]=Translate!.getTranslation("AON_TYPE"),               columns$[1,1]="C",columns$[1,2]="10"
	columns$[2,0]=Translate!.getTranslation("AON_UM"),                 columns$[2,1]="C",columns$[2,2]="3"
	columns$[3,0]=Translate!.getTranslation("AON_WO^NUMBER"),          columns$[3,1]="C",columns$[3,2]="8"
	columns$[4,0]=Translate!.getTranslation("AON_WO^TYPE"),            columns$[4,1]="C",columns$[4,2]="4"
	columns$[5,0]=Translate!.getTranslation("AON_START^DATE"),         columns$[5,1]="C",columns$[5,2]="8"
	columns$[6,0]=Translate!.getTranslation("AON_COMPLETE")+"^"+Translate!.getTranslation("AON_DATE"),columns$[6,1]="C",columns$[6,2]="8"
	columns$[7,0]=Translate!.getTranslation("AON_REQ'D")+"^"+Translate!.getTranslation("AON_QTY"), columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$,columns$[7,10]="T"
	columns$[8,0]=Translate!.getTranslation("AON_ON_HAND"),            columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m2$,columns$[8,10]="T"
	columns$[9,0]=Translate!.getTranslation("AON_COMMITTED"),         columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m2$,columns$[9,10]="T"
	columns$[10,0]=Translate!.getTranslation("AON_AVAILABLE"),         columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m2$,columns$[10,10]="T"
	columns$[11,0]=Translate!.getTranslation("AON_ON_ORDER"),          columns$[11,1]="N",columns$[11,2]="10",columns$[11,3]=m2$,columns$[11,10]="T"
	columns$[12,0]=Translate!.getTranslation("AON_MFG'D_ITEM"),        columns$[12,1]="C",columns$[12,2]="10"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Init Data

	more=1

rem --- Background

	call pgmdir$+"adc_progress.aon","N","","","","",0,sfw10_dev,1,meter_num,status

rem --- Init Read

rem --- Main Read
	while more
		sql_rec$=sqlfetch(sql_chan,err=*break)

rem --- Breaks

		if sql_rec.warehouse_id$<>whse$ then gosub first_subtot
		if sql_rec.item_id$<>t1$ then gosub item_subtot
		if t1$="" then continue

rem --- Additional Reads

		find record (sfe01a_dev,key=firm_id$+"  "+sql_rec.wo_no$,dom=*continue) sfe01a$
		if datethru$<>"" then 
			if pos(" "<>sfe01a.eststt_date$)>0 and sfe01a.eststt_date$>datefrom$ then continue
		endif
		if datethru$<>"" then 
			if pos(" "<>sfe01a.estcmp_date$)>0 and sfe01a.estcmp_date$<datethru$ then continue
		endif
		req_qty=sql_rec.qty_ordered-sql_rec.tot_qty_iss

rem --- Print

		xvk=fnblank(3)
		outVect!.addItem(sql_rec.wo_no$)
		outVect!.addItem(sfe01a.wo_type$)
		outVect!.addItem(fndate$(sfe01a.eststt_date$))
		outVect!.addItem(fndate$(sfe01a.estcmp_date$))
		outVect!.addItem(str(req_qty))
		xvk=fnblank(4)
		if sfe01a.wo_category$="I" then 
			outVect!.addItem(sfe01a.item_id$)
		else
			outVect!.addItem(sfe01a.description_01$)
		endif
		record_count=record_count+1
		if mod(recs,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
		t0=t0+req_qty

	wend

rem --- End

	if record_count=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

	t9$="U"
	gosub first_subtot
	goto std_exit

itm_hd: rem --- Item Heading

	outVect!.addItem(ivm01a.item_id$)
	outVect!.addItem(ivm01a.product_type$)
	outVect!.addItem(ivm01a.unit_of_sale$)
	xvk=fnblank(10)

	outVect!.addItem("  "+ivm01a.item_desc$)
	xvk=fnblank(12)

	return

first_subtot:  rem --- First Sub Total

	if whse$<>"" 
		if t9$="" then let t9$="T"
		gosub item_subtot
		if t9$="T" then let t9$="",t1$=""
	endif 

	if t9$<>"" then return
	dim h4$(30)
	ivm10c.short_name$ =Translate!.getTranslation("AON_***_NOT_ON_FILE_***")
	whse$=sql_rec.warehouse_id$
	t1$=""
	find record (ivm10c_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$
	h6$=Translate!.getTranslation("AON_WAREHOUSE:_")+whse$+"  "+ ivm10c.short_name$
	BrkVect!.addItem(str(OutVect!.size()/columns))
	HdrVect!.addItem(h6$)
	l=l9+5
	return

item_subtot:  rem --- Item Subtotals

	if t1$<>""
rem		if l+2*sgn(l1)+2>l9 then gosub itm_hd
		TotVect!.addItem(str(OutVect!.size()/columns))
		xvk=fnblank(5)
		outVect!.addItem(Translate!.getTranslation("AON_ITEM_TOTAL:_"))
		outVect!.addItem("")
		outVect!.addItem(str(t0))
		outVect!.addItem(str(ivm02a.qty_on_hand))
		outVect!.addItem(str(ivm02a.qty_commit))
		outVect!.addItem(str(ivm02a.qty_on_hand-ivm02a.qty_commit))
		outVect!.addItem(str(ivm02a.qty_on_order))
		outVect!.addItem("")
		
		xvk=fnblank(13)
		l1=0
	endif

	if t9$<>"" then return
	t1$=sql_rec.item_id$
	t0=0
	find record (ivm01a_dev,key=firm_id$+t1$,dom=label2) ivm01a$
	ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])

label2:

	find record (ivm02a_dev,key=firm_id$+whse$+t1$,dom=no_warehouse) ivm02a$
	gosub itm_hd
	return

no_warehouse: rem --- No Warehouse

	read (sfw10a_dev,key=sfw10a_key.firm_id$+sfw10a_key.warehouse_id$+sfw10a_key.item_id$+$ff$,dom=*next)
	t1$=""
	return

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

rem #endinclude std_end.src

    end
