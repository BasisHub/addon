rem --- Work Order Committed Materials Report - Transaction Print
rem --- Program sfr_mb v8.0.0 04Jan2008 (sfr_mb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:01:13)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    more=1
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFW_RQMTXWHS","PRIMARY",sfw10a_key_pritpl$,rd_table_chans$[all],status$

rem --- Additional File Opens

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfw10_dev,1,meter_num,status

rem --- Init Read

    read (sfw10a_dev,key=firm_id$,dom=*next)

rem --- Main Read
    while more
            
        dim sfw10a_key$:sfw10a_key_pritpl$
        sfw10a_key$=key(sfw10a_dev,end=done)
        if sfw10a_key.firm_id$<>firm_id$ then break 
        read (sfw10a_dev)

rem --- Breaks

        if sfw10a_key.warehouse_id$<>whse$ then gosub first_subtot
        find record (ivm01a_dev,key=firm_id$+sfw10a_key.item_id$,dom=*continue) ivm01a2$
        if prodtype$<>"" and ivm01a2.product_type$<>prodtype$ then 
            read (sfw10a_dev,key=sfw10a_key.firm_id$+sfw10a_key.warehouse_id$+sfw10a_key.item_id$+$ff$,dom=*continue)
        endif
        if sfw10a_key.item_id$<>t1$ then gosub item_subtot
        if t1$="" then continue
        print @(40,11),sfw10a_key.warehouse_id$,"-",sfw10a_key.item_id$,

rem --- Additional Reads

        find record (sfe01a_dev,key=sfw10a_key.firm_id$+"  "+sfw10a_key.wo_no$,dom=*continue) sfe01a$
        if datethru$<>"" then 
            if pos(" "<>sfe01a.eststt_date$)>0 and sfe01a.eststt_date$>datefrom$ then continue
        endif
        if datethru$<>"" then 
            if pos(" "<>sfe01a.estcmp_date$)>0 and sfe01a.estcmp_date$<datethru$ then continue
        endif
        find record (sfe23a_dev,key=sfe01a_key.firm_id$+sfe01a_key.wo_location$+sfe01a_key.wo_number$+sfe01a_key.step_no$,dom=*next) sfe23a$
        sfe23a.unit_cost=sfe23a.qty_ordered-sfe23a.tot_qty_iss

rem --- Print

        if l+1>l9 then gosub itm_hd
        print (printer_dev)@(100-m2*5-30),sfe01a.wo_number$,"  ",sfe01a.wo_type$," ",fndate$(sfe01a.eststt_date$)," ",
:                          fndate$(sfe01a.estcmp_date$),@(100-m2*5),sfe23a.unit_cost:m2$,@(100),
        if sfe01a.wo_category$="I" then 
            print (printer_dev)@(100),sfe01a.item_id$,
        endif
        if sfe01a.wo_category$<>"I" then 
            print (printer_dev)@(100),sfe01a.description$,
        endif
        print (printer_dev)""
        l=l+1
        t0=t0+sfe23a.unit_cost
           
    wend

done: rem --- End

    t9$="U"
    gosub first_subtot
    goto std_exit

report_heading: rem --- Report Heading

    l=headings+1
    headings$[2]=h3$
    headings$[3]=h6$
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit
    print (printer_dev)"Item ",@(100-m2*5-27),"WO",@(100-m2*5-21),"WO",@(100-m2*5-17),"Start",
:                              @(100-m2*5-8),"Complete",@(100-m2*4-6),"Req'd",@(100-m2*3-4),"On-",
:                              @(100-m2*2-5),"Com-",@(100-m2-7),"Avail-",@(100-5),"On"

    print (printer_dev)"Code",@(p0+3),"Type  UM",@(100-m2*5-29),"Number",@(100-m2*5-22),"Type",
:                             @(100-m2*5-16),"Date",@(100-m2*5-6),"Date",@(100-m2*4-4),"Qty",(100-m2*3-5),"Hand",
:                             @(100-m2*2-7),"mitted",@(100-m2-5),"able",@(100-6),"Order",@(101),"Mfg'd Item",'lf'
    l=l+3
    return


itm_hd: rem --- Item Heading

    if l+3>l9 then gosub report_heading
    print (printer_dev)@(0),ivm01a1.item_id$,@(p0+3),ivm01a1.product_type$,"  ",ivm01a1.unit_of_sale$,'lf',@(3),ivm01a1.item_desc$
    l=l+2
    return


first_subtot:  rem --- First Sub Total

    if whse$<>"" 
        if t9$="" then let t9$="T"
        gosub item_subtot
        if t9$="T" then let t9$="",t1$=""
    endif 

    if t9$<>"" then return
    dim h4$(30)
    ivm10c.code_desc$ ="*** Not On File ***"
    whse$=sfw10a_key.warehouse_id$
    t1$=""
    find record (ivm10c_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$
    h6$="Warehouse: "+whse$+"  "+ ivm10c.code_desc$
    l=l9+5
    return


item_subtot:  rem --- Item Subtotals

    if t1$<>"" 
        if l+2*sgn(l1)+2>l9 then gosub itm_hd
        print (printer_dev)@(100-m2*5-15),"Item Total: ",@(100-m2*5),t0:m2$,
        print (printer_dev)@(100-m2*4),ivm02a.qty_on_hand:m2$,ivm02a.qty_commit:m2$,ivm02a.qty_on_hand-ivm02a.qty_commit:m2$,
:       ivm02a.qty_on_order:m2$,'lf'
        l=l+2
        l1=0
    endif

    if t9$<>"" then return
    t1$=sfw10a_key.item_id$
    t0=0
    find record (ivm01a_dev,key=firm_id$+t1$,dom=label2) ivm01a1$
    ivm01a1.item_desc$=fnitem$(ivm01a1.item_desc$,desc[1],desc[2],desc[3])

label2:

    find record (ivm02a_dev,key=firm_id$+whse$+t1$,dom=no_warehouse) ivm02a$
    gosub itm_hd
    return


no_warehouse: rem --- No Warehouse

    read (sfw10a_dev,key=sfw10a_key.firm_id$+sfw10a_key.warehouse_id$+sfw10a_key.item_id$+$ff$,dom=*next)
    t1$=""
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
