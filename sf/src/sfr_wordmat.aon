rem --- Work Order Committed Materials Report - Parameters
rem --- Program sfr_ma v8.0.0 04Jan2008 (sfr_ma)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:36:41)
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

	setesc std_error
	seterr std_error

rem --- Retrieve the program path

	pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

	files=8,begfile=1,endfile=files
	dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
	files$[1]="ivm-01",ids$[1]="IVM_ITEMMAST"
	files$[2]="ivm-02",ids$[2]="IVM_ITEMWHSE"
	files$[3]="ivc_whsecode",ids$[3]="IVC_WHSECODE"
	files$[4]="ivs_params",ids$[4]="IVS_PARAMS"
	files$[5]="sfe-01",ids$[5]="SFE_WOMASTR"
	files$[6]="sfe-23",ids$[6]="SFE_WOMATDTL"
	files$[7]="sfm-10",ids$[7]="SFC_WOTYPECD"
	files$[8]="sfs_params",ids$[8]="SFS_PARAMS"
	call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
	if status goto std_exit
	ivm01a_dev=channels[1]
	ivm02a_dev=channels[2]
	ivm10c_dev=channels[3]
	ivs01a_dev=channels[4]
	sfe01a_dev=channels[5]
	sfe23a_dev=channels[6]
	sfm10a_dev=channels[7]
	sfs01a_dev=channels[8]

rem --- Dimension string templates

	dim ivm01a$:templates$[1],ivm02a$:templates$[2],ivm10c$:templates$[3]
	dim ivs01a$:templates$[4],sfe01a$:templates$[5],sfe23a$:templates$[6]
	dim sfm10a$:templates$[7],sfs01a$:templates$[8]

rem --- Assign form input values to local variables

	whse$=Option!.getOptionData("warehouse_id")
	prodtype$=Option!.getOptionData("product_type")
	datefrom$=Option!.getOptionData("from_date_1")
	datethru$=Option!.getOptionData("from_date_2")

rem --- Retrieve parameter records

	ivs01a_key$=firm_id$+"IV00"
	find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
	sfs01a_key$=firm_id$+"SF00"
	find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

	find record (sfs01a_dev,key=firm_id$+"SF"+"00",dom=std_missing_params) sfs01a$
	find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
	dim desc[3]
	desc[1]=num(ivs01a.desc_len_01$)
	desc[2]=num(ivs01a.desc_len_02$)
	desc[3]=num(ivs01a.desc_len_03$)
    desclen=desc[1]+desc[2]+desc[3]

rem --- Init Data

	headings=4
	dim headings$[headings]
	headings$[0]=sysinfo.firm_name$
	headings$[1]=sysinfo.task_desc$
	headings$[3]="[HEADER]"


	call pgmdir$+"adc_getmask.aon","","SF","A","",m2$,0,m2

	more=1

rem --- Setup SQL to read through sfe-23

	sql_prep$ = ""
	sql_prep$ = sql_prep$ + "SELECT wo_no, material_seq, internal_seq_no, "
	sql_prep$ = sql_prep$ + "unit_measure, warehouse_id, item_id, require_date, "
	sql_prep$ = sql_prep$ + "qty_ordered, tot_qty_iss, unit_cost, qty_issued, issue_cost "
	sql_prep$ = sql_prep$ + "  FROM sfe_womatdtl "
	sql_prep$ = sql_prep$ + "  INNER JOIN ivm_itemmast ON sfe_womatdtl.firm_id = ivm_itemmast.firm_id "
	sql_prep$ = sql_prep$ + "                          AND sfe_womatdtl.item_id = ivm_itemmast.item_id "
	where_clause$="WHERE sfe_womatdtl.firm_id = '"+firm_id$+"' AND sfe_womatdtl.wo_location = '"+sfe01a.wo_location$+"' AND "
	if cvs(whse$,3)<>"" where_clause$=where_clause$+"sfe_womatdtl.warehouse_id = '"+whse$+"' AND "
	if cvs(prodtype$,3)<>"" where_clause$=where_clause$+"ivm_itemmast.product_type = '"+prodtype$+"' AND "
	order_clause$=" ORDER BY warehouse_id, item_id, wo_no, material_seq "
	
	where_clause$=cvs(where_clause$,2)
	if where_clause$(len(where_clause$)-2,3)="AND" where_clause$=where_clause$(1,len(where_clause$)-3)
	sql_prep$=sql_prep$+where_clause$+order_clause$
	sql_chan=sqlunt
	sqlopen(sql_chan)stbl("+DBNAME")
	sqlprep(sql_chan)sql_prep$
	dim sql_rec$:sqltmpl(sql_chan)
	sqlexec(sql_chan)

	h3$=Translate!.getTranslation("AON_WAREHOUSE:_")
	if whse$="" then
	    h3$=h3$+Translate!.getTranslation("AON_ALL")
    else
        h3$=h3$+whse$
        find record (ivm10c_dev,key=firm_id$+"C"+whse$,dom=*next) ivm10c$
        headings$[3]=h3$+"  "+ ivm10c.short_name$
    endif
	h3$=h3$+Translate!.getTranslation("AON___PRODUCTS:_")
	if prodtype$="" then h3$=h3$+Translate!.getTranslation("AON_ALL") else h3$=h3$+prodtype$
	h3$=h3$+Translate!.getTranslation("AON___BEGINNING_DATE:_")
	if datefrom$="" then h3$=h3$+Translate!.getTranslation("AON_FIRST") else h3$=h3$+fndate$(datefrom$)
	h3$=h3$+Translate!.getTranslation("AON__AND_ENDING_DATE:_")
	if datethru$="" then h3$=h3$+Translate!.getTranslation("AON_LAST") else h3$=h3$+fndate$(datethru$)
	headings$[2]=h3$

rem --- Overlay

    run pgmdir$+"sfr_wordmat_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
