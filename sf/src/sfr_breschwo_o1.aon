rem --- Batch Reschedule Work Orders - II
rem --- Program sfr_ub v8.0.0 08Jan2008 (sfr_ub)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/08/2008 10:46:52)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$


rem --- Open/Lock Files
rem --- Init Data

    more=1
    status$="00"
    headings$[2]=h4$
    headings$[3]=h3$
    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit

    dim columns$[6,10]
    columns = 7

    columns$[0,0]="Work Order",     columns$[0,1]="C",columns$[0,2]="7"
    columns$[1,0]="Pri",            columns$[1,1]="C",columns$[1,2]="6"
    columns$[2,0]="Mthd",           columns$[2,1]="C",columns$[2,2]="4"
    columns$[3,0]="Sts",            columns$[3,1]="C",columns$[3,2]="5"
    columns$[4,0]="Start",          columns$[4,1]="C",columns$[4,2]="10"
    columns$[5,0]="Cmplt",          columns$[5,1]="C",columns$[5,2]="35"
    columns$[6,0]="Cat",            columns$[6,1]="C",columns$[6,2]="15"

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe01_dev,1,meter_num,status
rem --- Init Read

    sfe01a_key$=firm_id$+"  "+r0$
    read record (sfe01_dev,key=sfe01a_key$,dom=*next) sfe01a$
    flag=0

rem --- Main Loop Starts
    while more
        if flag=1 then
            sfe01a_key$=key(sfe01_dev,end=*break)
            if pos(firm_id$=sfe01a_key$)<>1 then break
            if r1$<>"" then 
                if sfe01a.wo_no$>r1$ then break
            endif
            read record (sfe01_dev,key=sfe01a_key$) sfe01a$
        endif
label_one: 
        flag=1
        if sfe01a.wo_status$="C" then continue
        if sfe01a.priority$>r2$ then continue
        if pos(sfe01a.wo_status$=wostatus$)=0 then continue

rem --- Reschedule
        done_flag=0
        while more
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            if pos(sfe01a.sched_flag$="BF")<>0 then
                    if sfe01a.sched_flag$="F" then
                        sdate$=sfe01a.eststt_date$ 
                    else
                        sdate$=sfe01a.estcmp_date$ 
                    endif
                    edate$=""
                    status$="00"
                    call pgmdir$+"sfc_schdayfore.aon",sfe01a.wo_no$,sdate$,edate$,sfe01a.sched_flag$,codfile_dev,status$,opcode$
                    on num(status$(2,1)) goto suc_schedule,unsch_calender,invalid_date,file_missing,invalid_method,unsch_date,undeter_error

suc_schedule: rem --- Successful Schedule 

                    if sfe01a.sched_flag$="B" then  
                        sfe01a.eststt_date$=edate$ 
                        sfe01a.estcmp_date$=sdate$ 
                    else
                        sfe01a.eststt_date$=sdate$
                        sfe01a.estcmp_date$=edate$
                    endif

                    OutVect!.addItem(sfe01a.wo_no$)
                    OutVect!.addItem(sfe01a.priority$)
                    OutVect!.addItem(sfe01a.sched_flag$)
                    OutVect!.addItem(sfe01a.wo_status$)
                    OutVect!.addItem(fndate$(sfe01a.eststt_date$))
                    OutVect!.addItem(fndate$(sfe01a.estcmp_date$))
                    OutVect!.addItem(sfe01a.wo_category$)

                    l=l+1
                    write record (sfe01_dev,key=sfe01a_key$) sfe01a$ 
                    break

unsch_calender: rem --- Unscheduled Date in Calendar

                    OutVect!.addItem(sfe01a.wo_no$)
                    OutVect!.addItem(sfe01a.priority$)
                    OutVect!.addItem(sfe01a.sched_flag$)
                    OutVect!.addItem(sfe01a.wo_status$)
                    OutVect!.addItem("***")
                    OutVect!.addItem("Unscheduled Date Found In Operations Calendar")
                    xwk = fnblank(1)

                    l=l+1
                    break

invalid_date: rem --- Invalid 'From' Date

                    if sfe01a.sched_flag$="B" then
                        mess$="Completion"
                    else
                        mess$="Start"
                    endif
                    OutVect!.addItem(sfe01a.wo_no$)
                    OutVect!.addItem(sfe01a.priority$)
                    OutVect!.addItem(sfe01a.sched_flag$)
                    OutVect!.addItem(sfe01a.wo_status$)
                    OutVect!.addItem("***")
                    OutVect!.addItem("Invalid Estimated "+mess$+" Date")
                    xwk = fnblank(1)

                    l=l+1
                    break

file_missing: rem --- File Missing

                    OutVect!.addItem("A necessary Shop Floor Control file is missing. Make sure the")
                    OutVect!.addItem("Calendar File and Work Orders exist, then rerun this task.")

                    done_flag=1
                    break
            endif
invalid_method: rem --- Invalid Scheduling Method


                if sfe01a.sched_flag$="M" then
                    OutVect!.addItem(sfe01a.wo_no$)
                    OutVect!.addItem(sfe01a.priority$)
                    OutVect!.addItem(sfe01a.sched_flag$)
                    OutVect!.addItem(sfe01a.wo_status$)
                    OutVect!.addItem("Manual Method. No Rescheduling Performed")
                else
                    OutVect!.addItem(sfe01a.wo_no$)
                    OutVect!.addItem("***")
                    OutVect!.addItem(sfe01a.priority$)
                    OutVect!.addItem(sfe01a.sched_flag$)
                    OutVect!.addItem(sfe01a.wo_status$)
                    OutVect!.addItem("Invalid Scheduling Method")
                endif

                l=l+1
                break

unsch_date: rem --- Unscheduled Date in Purchase Calendar

                OutVect!.addItem(sfe01a.wo_no$)
                OutVect!.addItem("***")
                OutVect!.addItem(sfe01a.priority$)
                OutVect!.addItem(sfe01a.sched_flag$)
                OutVect!.addItem(sfe01a.wo_status$)
                OutVect!.addItem("Unscheduled Date Found In Purchase Order Calendar")

                l=l+1
                break

undeter_error: rem --- Undetermined error

                OutVect!.addItem(sfe01a.wo_no$)
                OutVect!.addItem("***")
                OutVect!.addItem(sfe01a.priority$)
                OutVect!.addItem(sfe01a.sched_flag$)
                OutVect!.addItem(sfe01a.wo_status$)
                OutVect!.addItem("An Undetermined Error Has Occurred")

                l=l+1
        wend

        if done_flag=1 then break
rem --- Check for Subcontract date change

        if status$(1,1)="0" then continue
        OutVect!.addItem("A Date Required Changed For A Subcontract For This Work Order")
        l=l+1

rem --- Main Loop Ends
    wend

done: rem --- End

    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$


rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
