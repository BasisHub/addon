rem --- Serial/Lot # Auto Close
rem --- Program sfc_ca v8.0.0 01Feb2008 (sfc_ca)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/01/2008 12:45:56)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_exit
    enter serial$,sfe06_dev,sys01_dev,wonum$,status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="IVS_PARAMS",ids$[1]="IVS_PARAMS"
    files$[2]="sfe-06",ids$[2]="SFE_WOLOTSER"
    files$[3]="sfs-01a",ids$[3]="SFS_PARAMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ivs01a_dev=channels[1]
    sfe06a_dev=channels[2]
    sfs01a_dev=channels[3]

rem --- Dimension string templates

    dim ivs01a$:templates$[1],sfe06a$:templates$[2],sfs01a$:templates$[3]

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

    dim p[5]
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    p[0]=num(ivs01a.item_id_len$)
    p[1]=num(ivs01a.vendor_prd_len$),p[3]=num(ivs01a.ls_no_len$)

rem --- Initializations

    dim j1$(80)
    status=0
    m2$="#,##0"

rem --- Background

    call pgmdir$+"syc_wa.bbx",0,54,5,15,8,"Auto Close Serial Numbers",mname$
    print 'sb',@(2,0),"First Serial Number To Close:",'sf',

sl_no: rem --- Serial Number

    while more
        v0$="S"
        v1$="CERK",v2$=serial$,v3$="",v0=p[3],v1=32,v2=0,i0=0
        v4$="Enter the first Serial Number to close, <F3>=Lookup"
rem        gosub std_input
        if v3=3 then gosub lookup_sfe06
        if v3<>4
            if v$="" then continue
            serial$=v$
            print @(v1,v2),serial$,
            goto flow_control

        flow_control: rem --- Flow Control

            if v3=4 then let status=1; goto std_exit
            if v3=2
                if i0>0 then let i0=i0-1
            else
                i0=i0+1
            endif
            on i0 goto sl_no,label1
        label1:
            i0=0
        endif

    done: rem --- Options

        flg=0
        while more
            v4$="Is The Above Information Correct:"
            call pgmdir$+"adc_yesno.aon",1,v4$,2,v$,v3
            if v3=4 then let status=1; goto std_exit

            action=pos(v$="YN")
            switch action
                case 1
                    goto std_exit
                case 2
                    flg=1
                    break
                case default
                    break
            swend
            if flg then break
        wend
    wend

rem --- Generate

    goto std_exit

lookup_sfe06: rem --- Lookup sfe-06

    dim desc$[2],field[2],position[2],length[2]
    desc$[0]="Seq"
    field[0]=1,position[0]=12,length[0]=3
    desc$[1]="Serial #"
    field[1]=2,position[1]=37,length[1]=p[3],record$="  "+wonum$
    desc$[2]="Completed"
    field[2]=2,position[2]=1,length[2]=1
    call pgmdir$+"syc_lk.bbx",sfe06_dev,record$,2,"Serial Number Lookup",desc$[all],field[all],position[all],length[all],10,5,v$
    find record (sfe06_dev,key=firm_id$+"  "+wonum$+v$,dom=*next) sfe06a$; v$=sfe06a.lotser_no$; return
    v$=""
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
