rem --- Work Order Adjustment Register
rem --- Program converted from wor_la, 20Jul2012
rem --- Created by Codeport Utility (07/20/2012 10:43:34)

rem --- AddonSoftware
rem --- Copyright (c) 1981-2011 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

	OutVect!=bbjAPI().makeVector()
	HdrVect!=bbjAPI().makeVector()
	BrkVect!=bbjAPI().makeVector()
	TotVect!=bbjAPI().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- see if batching

	call stbl("+DIR_PGM")+"adc_getbatch.aon","",pgm(-2),rd_table_chans$[all]
    batch_no$=stbl("+BATCH_NO")
    process_id$=stbl("+PROCESS_ID")

rem --- Open/Lock files

    num_files=14
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="APM_VENDMAST",open_opts$[1]="OTA"
    open_tables$[2]="GLS_PARAMS",open_opts$[2]="OTA"
    open_tables$[3]="GLT_BANKCHECKS",open_opts$[3]="OTA"
    open_tables$[4]="IVM_ITEMMAST",open_opts$[4]="OTA"
    open_tables$[5]="IVS_PARAMS",open_opts$[5]="OTA"
    open_tables$[6]="SFE_WOMASTR",open_opts$[6]="OTA"
    open_tables$[7]="SFE_WOOPRADJ",open_opts$[7]="OTAL"
    open_tables$[8]="SFE_WOSUBADJ",open_opts$[8]="OTAL"
    open_tables$[9]="SFC_WOTYPECD",open_opts$[9]="OTA"
    open_tables$[10]="SFS_PARAMS",open_opts$[10]="OTA"
    open_tables$[11]="SFT_OPNOPRTR",open_opts$[11]="OTA"
    open_tables$[12]="SFT_OPNSUBTR",open_opts$[12]="OTA"
    open_tables$[13]="SFW_COSTADJT",open_opts$[13]="OTAI"
    open_tables$[14]="SFW_ADJXTYPE",open_opts$[14]="OTAI"

	gosub open_tables

    apm01_dev=num(open_chans$[1])
    gls01_dev=num(open_chans$[2])
    glt05_dev=num(open_chans$[3])
    ivm01_dev=num(open_chans$[4])
    ivs01_dev=num(open_chans$[5])
    woe01_dev=num(open_chans$[6])
    woe12_dev=num(open_chans$[7])
    woe42_dev=num(open_chans$[8])
    wom10_dev=num(open_chans$[9])
    sfs01_dev=num(open_chans$[10])
    wot01_dev=num(open_chans$[11])
    wot31_dev=num(open_chans$[12])
	wow08_dev=num(open_chans$[13])
	wow06_dev=num(open_chans$[14])

rem --- Dimension string templates

    dim apm01a$:open_tpls$[1]
	dim gls01a$:open_tpls$[2]
	dim glt05a$:open_tpls$[3]
	dim ivm01a$:open_tpls$[4]
	dim ivs01a$:open_tpls$[5]
	dim woe01a$:open_tpls$[6]
	dim woe12a$:open_tpls$[7]
	dim woe42a$:open_tpls$[8]
	dim wom10a$:open_tpls$[9]
	dim sfs01a$:open_tpls$[10]
	dim wot01a$:open_tpls$[11]
	dim wot31a$:open_tpls$[12]
	dim wow08a$:open_tpls$[13]
	dim wow06a$:open_tpls$[14]

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","R","",m3$,0,m3
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","U","",m2$,0,m2
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","A","",m1$,0,m1

    bm$=sfs01a.bm_interface$
    ar$=sfs01a.ar_interface$
    ap$=sfs01a.po_interface$
    pr$=sfs01a.pr_interface$
    i2=ivs01a.ls_no_len
    if ar$="Y"
		call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",cust_mask$,0,c0
	endif

    if ap$="Y"
		call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",vend_mask$,0,vend_mask
	endif

	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","I","",c5$,0,c5
    if pr$="Y"
		call stbl("+DIR_PGM")+"adc_getmask.aon","","PR","I","",c5$,0,c5
	endif

rem --- Is General Ledger installed and being used?
 
	application$="SF"
	gl$="N"
	status=0
	source$=pgm(-2)
	call pgmdir$+"glc_ctlcreate.aon",err=*next,
:				source$,application$,glw11$,gl$,status
	if status 
		goto std_exit_no_update
	endif

rem --- Initializations

    dim j$(80,"-"),w[3],t[3],headings$[2],desc[3]
    h=0
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
	if num(batch_no$)<>0 headings$[1]=headings$[1]+" (Batch: "+batch_no$+")"
    l9=59
    l=l9+1
    p8$=""
	width=80
    when$=sysinfo.system_date$
    headings=1
    errors=0
    termf0$=f0$
    if p9$="L" p8$=Translate!.getTranslation("AON_LOT_NUMBER:_")
    if p9$="S" p8$=Translate!.getTranslation("AON_SERIAL_NUMBER:_")
    m0=len(m0$)
    m1=len(m1$)
    m2=len(m2$)
    m3=len(m3$)
    o9=0
    lm$=Translate!.getTranslation("AON_LABOR_COST_ADJUSTMENT")
    sm$=Translate!.getTranslation("AON_SUBCONTRACT_COST_ADJUSTMENT")
    cm$=Translate!.getTranslation("AON_CLOSED_COST_ADJUSTMENT")
	desc[1]=num(ivs01a.desc_len_01$)
	desc[2]=num(ivs01a.desc_len_02$)
	desc[3]=num(ivs01a.desc_len_03$)

rem --- Additional File Opens

	num_files=5
	num_files=5
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	if bm$="Y"
		open_tables$[1]="BMC_OPCODES",open_opts$[1]="OTA"
	else
		open_tables$[1]="SFC_OPRRNCOD",open_opts$[1]="OTA"
	endif
	if pr$="Y"
		open_tables$[2]="PRM_EMPLMAST",open_opts$[2]="OTA"
	else
		open_tables$[2]="SFM_EMPLMAST",open_opts$[2]="OTA"
	endif
	if ap$="Y" open_tables$[3]="APM_VENDMAST",open_opts$[3]="OTA"
	if gl$="Y"
		open_tables$[4]="GLM_ACCT",open_opts$[4]="OTA"
		open_tables$[5]="GLW_DAILYDETAIL",open_opts$[5]="OTA"
	endif

	gosub open_tables
	if status goto std_exit_no_update

	opcode_dev=num(open_chans$[1])
	empcode_dev=num(open_chans$[2])
	apm01_dev=num(open_chans$[3])
	if gl$="Y"
		glm01_dev=num(open_chans$[4])
		glw11_dev=num(open_chans$[5])
		dim glm01a$:open_tpls$[4]
		dim glw11a$:open_tpls$[5]
	endif

rem --- Set templates

	dim opcode$:open_tpls$[1]
	dim empcode$:open_tpls$[2]
	if apm01_dev<>0 dim apm01a$:open_tpls$[3]
	
rem --- Clear trans for this firm/process/batch from glw-11 work file (if not batching, batch_no$ is zero, and will clear all recs this firm/process)
 
	if gl$="Y"
		rec_pfx$=firm_id$+process_id$+batch_no$
		call stbl("+DIR_PGM")+"adc_clearpartial.aon","N",glw11_dev,rec_pfx$,status
	endif

rem --- Run Report?

	msg_id$="AON_RUN_QUERY"
	dim x$:stbl("+SYSINFO_TPL")
	dim msg_tokens$[1]
	x$=stbl("+SYSINFO")                                                            
	msg_tokens$[1]=x.task_desc$
	gosub disp_message

	if msg_opt$<>"Y" then goto std_exit_no_report

	call pgmdir$+"adc_progress.aon","N","","","","",0,wow06_dev,1,meter_num,status

rem ---  column heading

	dim columns$[14,10]
	columns=14
	columns$[0,0]=Translate!.getTranslation("AON_WO"),              columns$[0,1]="C",columns$[0,2]="8"
	columns$[1,0]=Translate!.getTranslation("AON_TYPE"),            columns$[1,1]="C",columns$[1,2]="6"
	columns$[2,0]=Translate!.getTranslation("AON_CATEGORY"),        columns$[2,1]="C",columns$[2,2]="8"
	columns$[3,0]=Translate!.getTranslation("AON_DATE"),            columns$[3,1]="C",columns$[3,2]="8"
	columns$[4,0]=Translate!.getTranslation("AON_SOURCE"),          columns$[4,1]="C",columns$[4,2]="8"
	columns$[5,0]=Translate!.getTranslation("AON_SEQ"),             columns$[5,1]="C",columns$[5,2]="8"
	columns$[6,0]=Translate!.getTranslation(""),                    columns$[6,1]="C",columns$[6,2]="8"
	columns$[7,0]=Translate!.getTranslation("AON_QTY")+"^"+Translate!.getTranslation("AON_COMPLETE"),        columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$
	columns$[8,0]=Translate!.getTranslation("AON_DIRECT")+"^"+Translate!.getTranslation("AON_LABOR"),        columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m3$
	columns$[9,0]=Translate!.getTranslation("AON_OVHD")+"^"+Translate!.getTranslation("AON_LABOR"),        columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m3$
	columns$[10,0]=Translate!.getTranslation("AON_UNIT^COST"),        columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m1$
	columns$[11,0]=Translate!.getTranslation("AON_SETUP^HRS"),        columns$[11,1]="N",columns$[11,2]="10",columns$[11,3]=m2$
	columns$[12,0]=Translate!.getTranslation("AON_UNITS"),        columns$[12,1]="N",columns$[12,2]="10",columns$[12,3]=m2$
	columns$[13,0]=Translate!.getTranslation("AON_EXTENSION"),        columns$[13,1]="N",columns$[13,2]="10",columns$[13,3]=m1$,columns$[13,10]="T"
	columns$[14,0]=Translate!.getTranslation("AON_NEW_WO^ADJ_DATE"),        columns$[14,1]="C",columns$[14,2]="10";rem jpb - need translation

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Create Report Sort File

    dim wow08a$:fattr(wow08a$)
    woadj_dev=woe12_dev
	dim woadj$:fattr(woe12a$)

	while 1
		read (woadj_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)
		while 1
			k$=key(woadj_dev,end=*break)
			if pos(firm_id$+batch_no$=k$)<>1 break
			read record(woadj_dev,key=k$) woadj$
			wow08a.firm_id$=firm_id$
			wow08a.wo_location$=woadj.wo_location$
			wow08a.wo_no$=woadj.wo_no$
			wow08a.trans_date$=woadj.trans_date$
			if woadj_dev=woe12_dev
				wow08a.record_id$="O"
			else
				wow08a.record_id$="S"
			endif
			wow08a.trans_seq$=woadj.trans_seq$
			wow08a.batch_no$=batch_no$
			wow08a$=field(wow08a$)
			write record (wow08_dev) wow08a$
			recs=recs+1
			call pgmdir$+"adc_progress.aon","S","","","",wow08a$,0,0,1,0,ignore_status
		wend
		if woadj_dev=woe42_dev
			woadj_dev=0
			break
		endif
		woadj_dev=woe42_dev
		dim woadj$:fattr(woe42a$)
	wend

	call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
	
    call pgmdir$+"adc_progress.aon","N","","","","",0,wow08_dev,1,meter_num,status

rem --- Init Read

	call stbl("+DIR_SYP")+"bac_key_template.bbj","SFW_COSTADJT","BATCH_KEY",wow08_key$,rd_table_chans$[all],rd_status$
	dim wow08_key$:wow08_key$
    read (wow08_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)

rem --- Main Read

	while 1
		wow08_key$=key(wow08_dev,end=*break)
		if pos(firm_id$+batch_no$=wow08_key$)<>1 break
		read record (wow08_dev,key=wow08_key$) wow08a$
		if wow08a.record_id$="O" read record (woe12_dev,key=firm_id$+wow08_key.wo_location$+wow08_key.wo_no$+wow08_key.trans_date$+wow08_key.trans_seq$,knum="PRIMARY") woe12a$
		if wow08a.record_id$="S" read record (woe42_dev,key=firm_id$+wow08_key.wo_location$+wow08_key.wo_no$+wow08_key.trans_date$+wow08_key.trans_seq$,knum="PRIMARY") woe42a$
		call pgmdir$+"adc_progress.aon","S","","","",k$,0,0,1,0,ignore_status

rem --- W/O Header

		dim woe01a$:fattr(woe01a$)
		dim woe01b$:fattr(woe01a$)
		while 1
			inventory$="N"
			find record (woe01_dev,key=firm_id$+wow08_key.wo_location$+wow08_key.wo_no$,dom=*break) woe01a$
			if woe01a.wo_category$="I" inventory$="Y"
			break
		wend

		if inventory$="Y"
			while 1
				dim ivm01a$:fattr(ivm01a$)
				find record (ivm01_dev,key=firm_id$+woe01a.item_id$,dom=*break) ivm01a$
				break
			wend
		endif
		woe01b$=woe01a$

rem --- Get Additional Data

		if wow08a.record_id$="O" 
			read record (wot01_dev,key=firm_id$+wow08a.wo_location$+wow08a.wo_no$+wow08a.trans_date$+wow08a.trans_seq$,dom=*continue) wot01a$
			find record (woe01_dev,key=firm_id$+"  "+woe12a.new_wo_no$,dom=l1380) woe01b$
			if cvs(woe12a.new_trn_date$,3)=""
				woe12a.new_trn_date$=woe12a.trans_date$
			endif
		endif
		if wow08a.record_id$="S"
			read record (wot31_dev,key=firm_id$+wow08a.wo_location$+wow08a.wo_no$+wow08a.trans_date$+wow08a.trans_seq$,dom=*continue) wot31a$
			find record (woe01_dev,key=firm_id$+"  "+woe42a.new_wo_no$,dom=l1380) woe01b$
			if cvs(woe42a.new_trn_date$,3)=""
				woe42a.new_trn_date$=woe42a.trans_date$
			endif
		endif
l1380:
		on pos(wow08a.record_id$="OS")-1 goto operations,subcontracts

operations: rem --- Get Employee/Op Code

		if num(woe12a.new_wo_no$)=0
			woe12a.new_wo_no$=woe12a.wo_no$
		endif
		dim empcode$:fattr(empcode$)
		dim opcode$:fattr(opcode$)
		find record (empcode_dev,key=firm_id$+wot01a.employee_no$,dom=*next) empcode$
		emp_name$=cvs(empcode.empl_surname$,2)+", "+cvs(empcode.empl_givname$,2)
		find record (opcode_dev,key=firm_id$+wot01a.op_code$,dom=*next) opcode$
l1460: rem is this a bug? Check out the dom that gets to this label - same as v6 but maybe not right.
		goto print_it

subcontracts: rem --- Get Vendor Name

		if num(woe42a.new_wo_no$)=0
			woe42a.new_wo_no$=woe42a.wo_no$
		endif
		dim apm01a$:fattr(apm01a$)
		apm01a.vendor_name$=Translate!.getTranslation("AON_***_MISSING_VENDOR_***")
		find record (apm01_dev,key=firm_id$+wot31a.vendor_id$,dom=*next) apm01a$

print_it: rem --- Print It Here

		outVect!.addItem(wow08a.wo_no$)
		outVect!.addItem(woe01a.wo_type$)
		outVect!.addItem(woe01a.wo_category$)
		outVect!.addItem(fndate$(wow08a.trans_date$))
		outVect!.addItem(wow08a.record_id$)
		outVect!.addItem(wow08a.trans_seq$)
		outVect!.addItem(Translate!.getTranslation("AON_ORIG:"))
		if wow08a.record_id$="O"
			outVect!.addItem(str(wot01a.complete_qty))
			outVect!.addItem(str(wot01a.direct_rate))
			outVect!.addItem(str(wot01a.unit_cost-wot01a.direct_rate))
			outVect!.addItem("")
			outVect!.addItem(str(wot01a.setup_time))
			outVect!.addItem(str(wot01a.units))
			outVect!.addItem(str(wot01a.ext_cost))
			if woe12a.wo_no$<>woe12a.new_wo_no$
				outVect!.addItem(woe12a.new_wo_no$)
			else
				outVect!.addItem("")
			endif
		else
			xvk=fnblank(3)
			outVect!.addItem(str(wot31a.unit_cost))
			outVect!.addItem("")
			outVect!.addItem(str(wot31a.units))
			outVect!.addItem(str(wot31a.ext_cost))
			if woe42a.wo_no$<>woe42a.new_wo_no$
				outVect!.addItem(woe42a.new_wo_no$)
			else
				outVect!.addItem("")
			endif
		endif

rem --- Adj Here

		outVect!.addItem("")
		outVect!.addItem(ivm01a.item_desc$)
		xvk=fnblank(4)
		outVect!.addItem(Translate!.getTranslation("AON_ADJ:"))
		if wow08a.record_id$="O"
			outVect!.addItem(str(woe12a.new_qty_comp))
			outVect!.addItem(str(woe12a.new_dir_rate))
			outVect!.addItem(str(woe12a.new_ovr_rate))
			outVect!.addItem("")
			outVect!.addItem(str(woe12a.new_set_hrs))
			outVect!.addItem(str(woe12a.new_units))
			outVect!.addItem(str((woe12a.new_units+woe12a.new_set_hrs)*(woe12a.new_dir_rate+woe12a.new_ovr_rate)))
			if woe12a.trans_date$<>woe12a.new_trn_date$
				outVect!.addItem(fndate$(woe12a.new_trn_date$))
			else
				outVect!.addItem("")
			endif
		else
			xvk=fnblank(3)
			outVect!.addItem(str(woe42a.new_unit_cst))
			outVect!.addItem("")
			outVect!.addItem(str(woe42a.new_units))
			outVect!.addItem(str(woe42a.new_unit_cst*woe42a.new_units))
			if woe42a.trans_date$<>woe42a.new_trn_date$
				outVect!.addItem(fndate$(woe42a.new_trn_date$))
			else
				outVect!.addItem("")
			endif
		endif

rem --- Net

		outVect!.addItem("")
		if wow08a.record_id$="O"
			outVect!.addItem(wot01a.employee_no$+" "+opcode.op_code$+" "+opcode.code_desc$)
			outVect!.addItem("")
			outVect!.addItem("")
		else
			outVect!.addItem(apm01a.vendor_id$+" "+wot31a.po_no$+" "+wot31a.pur_ord_seq_ref$)
			outVect!.addItem("")
			outVect!.addItem("")
		endif
		xvk=fnblank(2)
		outVect!.addItem(Translate!.getTranslation("AON_NET:"))
		if wow08a.record_id$="O"
			outVect!.addItem(str(woe12a.new_qty_comp-wot01a.complete_qty))
			outVect!.addItem(str(woe12a.new_dir_rate-wot01a.direct_rate))
			outVect!.addItem(str(woe12a.new_ovr_rate-(wot01a.unit_cost-wot01a.direct_rate)))
			outVect!.addItem("")
			outVect!.addItem(str(woe12a.new_set_hrs-wot01a.setup_time))
			outVect!.addItem(str(woe12a.new_units-wot01a.units))
			outVect!.addItem(str(((woe12a.new_units+woe12a.new_set_hrs)*(woe12a.new_dir_rate+woe12a.new_ovr_rate)-wot01a.ext_cost)))
			t0=t0+((woe12a.new_units+woe12a.new_set_hrs)*(woe12a.new_dir_rate+woe12a.new_ovr_rate)-wot01a.ext_cost)
			if (woe12a.new_units+woe12a.new_set_hrs)*(woe12a.new_dir_rate+woe12a.new_ovr_rate)<>wot01a.ext_cost
				outVect!.addItem("***")
			else
				outVect!.addItem("")
			endif
		else
			xvk=fnblank(3)
			outVect!.addItem(str(woe42a.new_unit_cst-wot31a.unit_cost))
			outVect!.addItem("")
			outVect!.addItem(str(woe42a.new_units-wot31a.units))
			outVect!.addItem(str((woe42a.new_unit_cst*woe42a.new_units)-wot31a.ext_cost))
			t0=t0+(woe42a.new_unit_cst*woe42a.new_units)-wot31a.ext_cost
			if (woe42a.new_unit_cst*woe42a.new_units)<>wot31a.ext_cost
				outVect!.addItem("***")
			else
				outVect!.addItem("")
			endif
		endif
		
rem --- Name

		outVect!.addItem("")
		if wow08a.record_id$="O"
			outVect!.addItem(emp_name$)
		else
			outVect!.addItem(apm01a.vendor_name$)
		endif
		xvf=fnblank(13)
		
		xvf=fnblank(15)
		
rem --- Check G/L Posting Dates
		if gl$="Y"
			glstatus=0
			if wow08a.record_id$="O"
				trans_date$=woe12a.trans_date$
				new_trans_date$=woe12a.new_trn_date$
			else
				trans_date$=woe42a.trans_date$
				new_trans_date$=woe42a.new_trn_date$
			endif
			call pgmdir$+"glc_datecheck.aon",trans_date$,"N",period$,year$,glstatus
			if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,trans_date$,glstatus,l,errors,status
               if stbl("+DTWARN_MSG",err=*endif)<>""
                   OutVect!.addItem(stbl("+DTWARN_MSG"))
                   xwk=fnblank(columns)
               endif
			if cvs(new_trans_date$,2)<>""
				call pgmdir$+"glc_datecheck.aon",new_trans_date$,"N",period$,year$,glstatus
				if glstatus call pgmdir$+"glc_datewarn.aon",printer_dev,new_trans_date$,glstatus,l,errors,status
                   if stbl("+DTWARN_MSG",err=*endif)<>""
                       OutVect!.addItem(stbl("+DTWARN_MSG"))
                       xwk=fnblank(columns)
                   endif
			endif
		endif

rem --- Post Original Dates

		dim wow06a$:fattr(wow06a$)
		wow06a.firm_id$=firm_id$
		wow06a.trans_date$=wow08_key.trans_date$
		wow06a.wo_type$=woe01a.wo_type$
		find record (wow06_dev,key=firm_id$+wow06a.trans_date$+wow06a.wo_type$,dom=*next) wow06a$
		if wow08a.record_id$="O"
			wow06a.act_dir_amt=wow06a.act_dir_amt-wot01a.direct_rate*(wot01a.units+wot01a.setup_time)
			wow06a.act_ovhd_amt=wow06a.act_ovhd_amt-(wot01a.ext_cost-wot01a.direct_rate*(wot01a.units+wot01a.setup_time))
			wow06a.net_adjust=wow06a.net_adjust-wot01a.ext_cost
		endif
		if wow08a.record_id$="S"
			wow06a.unit_cost=wow06a.unit_cost-wot31a.unit_cost*wot31a.units
			wow06a.net_adjust=wow06a.net_adjust-wot31a.ext_cost
		endif
		if woe01a.wo_type$<>woe01b.wo_type$ or trans_date$=new_trans_date$
			wow06a.batch_no$=batch_no$
			wow06a$=field(wow06a$)
			write record (wow06_dev) wow06a$

rem --- Adjusted Dates

			dim wow06a$:fattr(wow06a$)
			find record (wow06_dev,key=firm_id$+new_trans_date$+woe01b.wo_type$,dom=*next) wow06a$
		endif

		if wow08a.record_id$="O"
			wow06a.act_dir_amt=wow06a.act_dir_amt+woe12a.new_dir_rate*(woe12a.new_units+woe12a.new_set_hrs)
			wow06a.act_ovhd_amt=wow06a.act_ovhd_amt+woe12a.new_ovr_rate*(woe12a.new_units+woe12a.new_set_hrs)
			wow06a.net_adjust=wow06a.net_adjust+(woe12a.new_dir_rate+woe12a.new_ovr_rate)*(woe12a.new_units+woe12a.new_set_hrs)
		endif
		if wow08a.record_id$="S"
			wow06a.unit_cost=wow06a.unit_cost+woe42a.new_unit_cst*woe42a.new_units
			wow06a.net_adjust=wow06a.net_adjust+woe42a.new_unit_cst*woe42a.new_units
		endif
		wow06a.batch_no$=batch_no$
		wow06a$=field(wow06a$)
		write record (wow06_dev) wow06a$

rem --- Generate G/L Summary

		if gl$<>"Y" continue
		dim wom10a$:fattr(wom10a$)
		dim wom10a2$:fattr(wom10a$)
		find record (wom10_dev,key=firm_id$+"A"+woe01a.wo_type$) wom10a$
		wom10a2$=wom10a$
		find record (wom10_dev,key=firm_id$+"A"+woe01b.wo_type$,dom=l1460) wom10a2$

delta_wip: rem --- WIP delta cost

		account$=wom10a2.gl_wip_acct$
		gldate$=new_trans_date$
		if wow08a.record_id$="O"
			amount=round((woe12a.new_units+woe12a.new_set_hrs)*woe12a.new_dir_rate,2)+round((woe12a.new_units+woe12a.new_set_hrs)*woe12a.new_ovr_rate,2)-wot01a.ext_cost
		else
			amount=round(woe42a.new_units*woe42a.new_unit_cst,2)-wot31a.ext_cost
		endif
		ref1$=Translate!.getTranslation("AON_WO_")+woe01b.wo_no$
		ref2$=Translate!.getTranslation("AON_SEQ_")+wow08a.trans_seq$
		ref3$=fndate$(trans_date$)
		memo$=cm$
		gosub glrecap
		on pos(wow08a.record_id$="OS")-1 goto delta_labor,delta_subs

delta_labor: rem --- Labor delta cost

		account$=wom10a2.gl_dir_lab$
		amount=((-woe12a.new_units)-woe12a.new_set_hrs)*woe12a.new_dir_rate+(wot01a.units+wot01a.setup_time)*wot01a.direct_rate
		memo$=lm$
		gosub glrecap
		account$=wom10a2.gl_ovh_lab$
		amount=((-woe12a.new_units)-woe12a.new_set_hrs)*woe12a.new_ovr_rate+(wot01a.units+wot01a.setup_time)*wot01a.ovhd_rate
		gosub glrecap
		continue

delta_subs: rem --- Subcontracts delta cost

		account$=wom10a2.gl_pur_acct$
		amount=(-woe42a.new_units)*woe42a.new_unit_cst+wot31a.ext_cost
		memo$=sm$
		gosub glrecap

rem --- Loop back for next record

	wend

rem --- End

	if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
	endif

	totVect!.addItem(str(outVect!.size()/(columns+1)))
	xvk=fnblank(6)
	outVect!.addItem("Report Total")
	xvk=fnblank(6)
	outVect!.addItem(str(t0))
	outVect!.addItem("")
	
	next_overlay$="sfr_costadjust_o1.aon"
	goto std_exit
	
rem --- Special G/L Recap Routine
glrecap:                                                  
    if gl$="Y"
		precision 2                                                  
		let amount=amount*1
		call pgmdir$+"glc_glpost.aon",glm01_dev,glw11_dev,glt14_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
		precision 4                                                  
	return                                                  

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            outVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit_no_report:

    OutVect!=null();rem nothing to print, or some other err such that no report
    
std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif

std_exit: rem --- Standard program end (01Mar2006)

	call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
