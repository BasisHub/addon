rem --- Work Order Variance Report - Transaction Processing
rem --- Program sfr_hb v8.0.0 04Jan2008 (sfr_hb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 10:57:47)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- retrieve masks 
        call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","A","",m1$,0,m1
        call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","U","",m2$,0,m2
        call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","R","",m3$,0,m3
        m4$="#,###,##0.00"

rem --- Check & Adjust Masks

        call pgmdir$+"adc_sizemask.aon",sfs01a.amount_mask$,m1,7,9
        call pgmdir$+"adc_sizemask.aon",sfs01a.unit_mask$,m2,5,7
        m9=m1*11+m2*2+8

rem --- Init Data

        dim j$(m9,"-"),h9$(m1*5+m2,"-"),h7$(m1*5+m2),t[10],u[10],a[10],o[13]
        o[0]=131-(m1*11+m2*2+8)
        o[1]=o[0]+m2,o[2]=o[1]+m1,o[3]=o[2]+m1,o[4]=o[3]+m1,o[5]=o[4]+m1,o[6]=o[5]+m1,o[7]=o[6]+m2,o[8]=o[7]+m1,o[9]=o[8]+m1
        o[10]=o[9]+m1,o[11]=o[10]+m1,o[12]=o[11]+m1,o[13]=o[12]+m1
        h9$(1,1)="+"
        h9$(len(h9$),1)="+",h8$=h9$
        h8$(int(len(h8$)/2)-6,12)=" Standards "
        h9$(int(len(h9$)/2)-4,8)=" Actual "
        h6$=h7$
        h7$(3)="Operations",h7$(m2+m1*3-7)="Mat'ls",h7$(m2+m1*4-6)="Sub's",h7$(len(h7$)-5)="W.O."
        h6$(3)="Hours"
        h6$(m2+m1-7)="Direct",h6$(m2+m1*2-7)="Ovrhd",h6$(m2+m1*3-6)="Total",h6$(m2+m1*4-6)="Total",h6$(len(h6$)-6)="Total"
        headings$[2]=h3$
        headings$[3]=h4$
        headings$[4]=h$
        m9$="####.00-"
        more=1
        flag=0


rem --- Column Headings 
 
        dim columns$[15,10]
        columns = 15
            columns$[0,0]="WO#",                                    columns$[0,1]="C",columns$[0,2]="7"
            columns$[1,0]="Type",                                   columns$[1,1]="C",columns$[1,2]="11"
            columns$[2,0]="+-------------^Operations Hours",        columns$[2,1]="N",columns$[2,2]="8",columns$[2,3]=m4$,  columns$[2,10]="T"
            columns$[3,0]="----------------^Direct",                columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m1$, columns$[3,10]="T"
            columns$[4,0]="---Standard--^Ovrhd",                    columns$[4,1]="N",columns$[4,2]="9",columns$[4,3]=m1$,  columns$[4,10]="T"
            columns$[5,0]="----------------^Mat'ls Total",          columns$[5,1]="N",columns$[5,2]="9",columns$[5,3]=m1$,  columns$[5,10]="T"
            columns$[6,0]="----------------^Sub's Total",           columns$[6,1]="N",columns$[6,2]="9",columns$[6,3]=m1$,  columns$[6,10]="T"
            columns$[7,0]="-------------+^W.O Total",               columns$[7,1]="N",columns$[7,2]="8",columns$[7,3]=m1$,  columns$[7,10]="T"
            columns$[8,0]="+-------------^Operations Hours",        columns$[8,1]="N",columns$[8,2]="8",columns$[8,3]=m2$,  columns$[8,10]="T"
            columns$[9,0]="------------^Direct",                    columns$[9,1]="N",columns$[9,2]="7",columns$[9,3]=m1$,  columns$[9,10]="T"
            columns$[10,0]="---Actual--^Ovrhd",                     columns$[10,1]="N",columns$[10,2]="7",columns$[10,3]=m1$,  columns$[10,10]="T"
            columns$[11,0]="----------------^Mat'ls Total",         columns$[11,1]="N",columns$[11,2]="9",columns$[11,3]=m1$,  columns$[11,10]="T"
            columns$[12,0]="----------------^Sub's Total",          columns$[12,1]="N",columns$[12,2]="9",columns$[12,3]=m1$,  columns$[12,10]="T"
            columns$[13,0]="-------------+^W.O Total",              columns$[13,1]="N",columns$[13,2]="8",columns$[13,3]=m1$,  columns$[13,10]="T"
            columns$[14,0]="^Variance",                             columns$[14,1]="N",columns$[14,2]="8",columns$[14,3]=m1$,  columns$[14,10]="T"
            columns$[15,0]="%",                                     columns$[15,1]="N",columns$[15,2]="6",columns$[15,3]=m9$,  columns$[15,10]="T"

rem --- Background

            call pgmdir$+"adc_progress.aon","N","","","","",0,sfe01a_dev,1,meter_num,status
           
rem --- Init Read

            read (sfe01a_dev,key=begin_key$,knum=keynum,dom=main)
            flag=1

main: rem --- Main Read

    while more

        if (!flag)
            key_tpl$=key(sfe01a_dev,knum=keynum,end=done)
            if pos(firm_id$=key_tpl$)<>1 then break

            if ending$<>"" 
                if sequence$="W" and key_tpl.firm_id$+key_tpl.wo_location$+key_tpl.wo_no$>firm_id$+key_tpl.wo_location$+ending$ then break
                if sequence$="B" and key_tpl.firm_id$+key_tpl.warehouse_id$+key_tpl.item_id$>firm_id$+whse$+ending$ then break
                if sequence$="C" and key_tpl.firm_id$+key_tpl.customer_id$>firm_id$+ending$ then break
                if sequence$="T" and key_tpl.firm_id$+key_tpl.wo_type$>firm_id$+ending$ then break   
            else
                if sequence$="B" and whse$<>"" and key_tpl.warehouse_id$>whse$ then break
            endif
            if sequence$<>"W" then
rem --- Breaks
                if sequence$="B" then
                    data1$=key_tpl.warehouse_id$+key_tpl.item_id$
                else
                    if sequence$="T" then
                        data1$=key_tpl.wo_type$
                    else
                        data1$=key_tpl.customer_id$
                    endif
                endif
                if data1$<>t0$ then gosub first_sub_tot
                read (sfe01a_dev,knum=keynum)
            endif
        endif

rem --- reset flag so that next time while..wend loop executes from beginning

reset_flg:

        flag=0
        read record (sfe01a_dev,key=key_tpl$,knum=keynum,dom=*continue) sfe01a$
        if pos(sfe01a.wo_status$="PQ")>0 then continue
        if sfe01a.wo_category$="I"
            find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=label2) ivm01a$
            sfe01a.description_01$=ivm01a.item_desc$(1,min(desc[1],30))
        endif 

label2:

        if wostatus$="C" and sfe01a.wo_status$<>"C" then continue
        if wostatus$="O" and sfe01a.wo_status$="C" and closedate$="" then continue
        if wostatus$="O" and sfe01a.wo_status$="C" and sfe01a.closed_date$<=closedate$ then continue
        if wostatus$="C" and sfe01a.closed_date$>closedate$ then continue
        if sfe01a.wo_status$="C" then sfe01a.dealer_num_02=0
        if closedate$<>"" then 
            if sfe01a.closed_date$>closedate$ then sfe01a.dealer_num_02=0
        endif

rem --- Calculate Standards

        sfreq_dev=sfe02a_dev
        dim sfreq_key$:sfe02a_key_tpl$
        dim sfreqa$:templates$[8]
        record_id$="A"
        while more
            read (sfreq_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            while more
                sfreq_key$=key(sfreq_dev,end=*break)
                if sfreq_key.firm_id$+sfreq_key.wo_location$+sfreq_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
                read record (sfreq_dev) sfreqa$
                action=pos(record_id$="ABC")
                switch action
                    case 1
                        sfe01a.cls_cst_todt=sfe01a.cls_cst_todt+sfreqa.total_time
                        sfe01a.cls_inp_qty=sfe01a.cls_inp_qty+sfreqa.total_time*sfreqa.direct_rate
                        rate=rate+sfreqa.tot_std_cost-sfreqa.total_time*sfreqa.direct_rate
                        break
                    case 2
                        sfe01a.closed_cost=sfe01a.closed_cost+sfreqa.total_cost
                        break
                    case 3
                        sfe01a.est_yield=sfe01a.est_yield+sfreqa.total_cost
                        break
                    case default
                        break
                swend
            wend

            if sfreq_dev=sfe02a_dev
               sfreq_dev=sfe22a_dev 
               dim sfreq_key$:sfe22a_key_tpl$
               dim sfreqa$:templates$[9]
               record_id$="B"
            else
                if sfreq_dev=sfe22a_dev 
                   sfreq_dev=sfe32a_dev
                   dim sfreq_key$:sfe32a_key_tpl$
                   dim sfreqa$:templates$[10]
                   record_id$="C"
                else
                   break
                endif
            endif
        wend

rem --- Calculate Actuals

        if sfe01a.wo_status$<>"C" or sfe01a.closed_date$>g9$ then
            tran01_dev=sft01a_dev
            tran02_dev=sft21a_dev
            tran03_dev=sft31a_dev
            dim tran01a_key$:sft01a_key_tpl$
            dim tran02a_key$:sft21a_key_tpl$
            dim tran03a_key$:sft31a_key_tpl$
        else
            tran01_dev=sft03a_dev
            tran02_dev=sft23a_dev
            tran03_dev=sft33a_dev
            dim tran01a_key$:sft03a_key_tpl$
            dim tran02a_key$:sft23a_key_tpl$
            dim tran03a_key$:sft33a_key_tpl$
        endif

        sftran_dev=tran01_dev
        record_id1$="O"
        
        while more

            if sftran_dev=sft01a_dev then 
                dim sftran$:templates$[13] 
                dim sftran_key$:templates$[13] 
            else 
                if sftran_dev=sft03a_dev then 
                    dim sftran$:templates$[14] 
                    dim sftran_key$:templates$[14] 
                else     
                    if sftran_dev=sft21a_dev then 
                        dim sftran$:templates$[15] 
                        dim sftran_key$:templates$[15] 
                    else     
                        if sftran_dev=sft23a_dev then 
                            dim sftran$:templates$[16] 
                            dim sftran_key$:templates$[16] 
                        else    
                            if sftran_dev=sft31a_dev then 
                                dim sftran$:templates$[17] 
                                dim sftran_key$:templates$[17] 
                            else 
                                if sftran_dec=sft33a_dev then 
                                    dim sftran$:templates$[18] 
                                    dim sftran_key$:templates$[18] 
                                endif
                            endif
                        endif
                    endif
                endif
            endif
        
            read (sftran_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
            print @(column+17,11),key_tpl.wo_no$,

            while more

                sftran_key$=key(sftran_dev,end=*break)
                if sftran_key.firm_id$+sftran_key.wo_location$+sftran_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
                if period$<>"" then 
                    if sftran_key.trans_date$>period$ then break
                endif
                read record (sftran_dev) sftran$

                switch pos(record_id1$="OMS")
                    case 1
                        sfe01a.reserved_num=sfe01a.reserved_num+sftran.units
                        x=(sftran.units+sftran.setup_time)*sftran.direct_rate
                        sfe01a.reserved_num_02=sfe01a.reserved_num_02+x
                        extra_cost=extra_cost+sftran.ext_cost-x
                        break
                    case 2
                        sfe01a.dealer_num_01=sfe01a.dealer_num_01+sftran.ext_cost
                        break
                    case 3
                        sfe01a.dealer_num_02=sfe01a.dealer_num_02+sftran.ext_cost
                        break
                    case default
                swend
                continue

            wend

            if sftran_dev=tran01_dev
                sftran_dev=tran02_dev
                record_id1$="M"
            else
                if sftran_dev=tran02_dev
                    sftran_dev=tran03_dev
                    record_id1$="S"
                else
                    break
                endif
            endif

        wend

rem --- Calc Totals, Variance, Etc.

        a0=sfe01a.cls_inp_qty+sfe01a.closed_cost+ sfe01a.est_yield+rate
        a1=sfe01a.reserved_num_02+sfe01a.dealer_num_01+sfe01a.dealer_num_02+extra_cost
        a2=a0-a1
        if a0<>0 then 
            a3=(a0-a1)*100/a0 
        else 
            a3=0
        endif
        if sfe01a.wo_category$="I" then 
            x$=sfe01a.item_id$
            x$=x$(1,pos("   "=x$+"   ")-1)
            sfe01a.description_01$=x$+" "+sfe01a.description_01$
        endif

rem --- Print

        if r1$="Y" and a3<r0 then continue
        if r1$="N" and abs(a3)<r0 then continue

        if l+3>l9 then gosub sub_head
        blank=fnblank(16)
        OutVect!.addItem(sfe01a.wo_no$)
        OutVect!.addItem(sfe01a.wo_type$+" "+sfe01a.description_01$)
                
        if abs(a3)>999.9 then 
            a3$=" ****** " 
        else 
            a3$=str(a3:"####.00-")
        endif

        blank=fnblank(14)
        blank=fnblank(2)
        OutVect!.addItem(str(sfe01a.cls_cst_todt))
        OutVect!.addItem(str(sfe01a.cls_inp_qty))
        OutVect!.addItem(str(rate))
        OutVect!.addItem(str(sfe01a.closed_cost))
        OutVect!.addItem(str(sfe01a.est_yield))
        OutVect!.addItem(str(a0))
        OutVect!.addItem(str(sfe01a.reserved_num))
        OutVect!.addItem(str(sfe01a.reserved_num_02))
        OutVect!.addItem(str(extra_cost))
        OutVect!.addItem(str(sfe01a.dealer_num_01))
        OutVect!.addItem(str(sfe01a.dealer_num_02))
        OutVect!.addItem(str(a1))
        OutVect!.addItem(str(a2))
        OutVect!.addItem(str(a3$))
       
        if sfe01a.dealer_num_03<>0 then 
            blank=fnblank(12)
            OutVect!.addItem("Closed: ")
            OutVect!.addItem(str(-sfe01a.dealer_num_03))
            blank=fnblank(2)
            blank=fnblank(12)
            OutVect!.addItem("Net Open: ")
            OutVect!.addItem(str(a1-sfe01a.dealer_num_03))
            blank=fnblank(2)
            
        endif
        
        l0=l0+1
        dim b[10] 
        sfw02a.firm_id$=sfe01a.firm_id$
        sfw02a.wo_location$=sfe01a.wo_location$
        sfw02a.wo_type$=sfe01a.wo_type$
        sfw02a.wo_category$=sfe01a.wo_category$
        find record (sfw02a_dev,key=sfw02a.firm_id$+sfw02a.wo_location$+sfw02a.wo_type$,dom=*next) sfw02a$

        sfe01_field$=fattr(sfe01a$,"")
        sfe01_field$=sfe01_field$(pos("cls_cst_todt"=cvs(sfe01_field$,8)))
        for x=0 to 8
            xfield$=sfe01_field$(1,pos($0A$=sfe01_field$)-1)
            t[x]=t[x]+num(FIELD(sfe01a$,xfield$,err=*break))
            u[x]=u[x]+num(FIELD(sfe01a$,xfield$,err=*break))
            b[x]=b[x]+num(FIELD(sfe01a$,xfield$,err=*break))
            sfe01_field$=sfe01_field$(pos($0A$=sfe01_field$)+1)
        next x

        t[x]=t[x]+rate
        u[x]=u[x]+rate
        b[x]=b[x]+rate
        t[x]=t[x]+extra_cost
        u[x]=u[x]+extra_cost
        b[x]=b[x]+extra_cost
        write record (sfw02a_dev,key=sfw02a.firm_id$+sfw02a.wo_location$+sfw02a.wo_type$) sfw02a$

   wend

done: rem --- End

        t9$="U"
        if sequence$<>"W" then gosub first_sub_tot
        u0=u[1]+u[2]+u[3]+u[9]
        u1=u[5]+u[6]+u[7]+u[10],u2=u0-u1
        if u0<>0 then u3=(u0-u1)*100/u0 else u3=0
        if u[8]<>0 
            if u0 then u6=(u0-(u1-u[8]))*100/u0 else u6=0
        endif
        blank=fnblank(16)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        blank=fnblank(1)
        OutVect!.addItem("Report Total:")
        OutVect!.addItem(str(u[0]))
        OutVect!.addItem(str(u[1]))
        OutVect!.addItem(str(u[9]))
        OutVect!.addItem(str(u[2]))
        OutVect!.addItem(str(u[3]))
        OutVect!.addItem(str(u0))
        OutVect!.addItem(str(u[4]))
        OutVect!.addItem(str(u[5]))
        OutVect!.addItem(str(u[10]))
        OutVect!.addItem(str(u[6]))
        OutVect!.addItem(str(u[7]))
        OutVect!.addItem(str(u1))
        OutVect!.addItem(str(u2))
        OutVect!.addItem(str(u3))
    

    if u[8]<>0 then 
        blank=fnblank(12)
        OutVect!.addItem("Closed: ")
        OutVect!.addItem(str(-u[8]))
        blank=fnblank(2)
        blank=fnblank(12)
        OutVect!.addItem("Net Open: ")
        OutVect!.addItem(str(u1-u[8]))
        blank=fnblank(2)
       
    endif
    
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))

rem --- Subtotals By Type

        dim c[2,10],t[10],u[10]
        OutVect!.addItem("Totals By Type: ")
        blank=fnblank(15)
        blank=fnblank(16)
    
    call pgmdir$+"adc_progress.aon","N","","","","Totals By Type:",0,sfw02a_dev,1,meter_num,status
    read (sfw02a_dev,key=firm_id$,dom=*next)
    while more
        k5$=key(sfw02a_dev,end=*break)
        if pos(firm_id$=k5$)<>1 then break
        read record (sfw02a_dev) sfw02a$
        sfm10a.code_desc$="*** Not On File ***"
        find record (sfm10a_dev,key=firm_id$+"A"+sfw02a.wo_type$,dom=*next) sfm10a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        OutVect!.addItem(sfw02a.wo_category$)
        OutVect!.addItem(sfm10a.code_desc$)
        OutVect!.addItem(str(fnmask$(sfm10a.gl_wip_acct$,g5$)))
        OutVect!.addItem(str(fnmask$(sfm10a.gl_close_to$,g5$)))
        blank=fnblank(12)
        b0=sfw02a.std_ops_tot+sfw02a.std_mat_tot+sfw02a.std_sub_tot+b[9]
        b1=sfw02a.act_ops_tot+sfw02a.act_mat_tot+sfw02a.act_sub_tot+b[10],b2=b0-b1
        if b0<>0 then b3=(b0-b1)*100/b0 else b3=0


        blank=fnblank(2)
        OutVect!.addItem(str(sfw02a.std_hrs$))
        OutVect!.addItem(str(sfw02a.std_ops_tot))
        OutVect!.addItem(str(b[9]))
        OutVect!.addItem(str(sfw02a.std_mat_tot))
        OutVect!.addItem(str(sfw02a.std_sub_tot))
        OutVect!.addItem(str(b0))
        OutVect!.addItem(str(sfw02a.actual_hrs))
        OutVect!.addItem(str(sfw02a.act_ops_tot))
        OutVect!.addItem(str(b[10]))
        OutVect!.addItem(str(sfw02a.act_mat_tot))
        OutVect!.addItem(str(act_sub_tot))
        OutVect!.addItem(str(b1))
        OutVect!.addItem(str(b2))
        OutVect!.addItem(str(b3))

        if b[8]<>0 then 
            blank=fnblank(12)
            OutVect!.addItem("Closed: ")
            OutVect!.addItem(str(-b[8]))
            blank=fnblank(2)
            blank=fnblank(12)
            OutVect!.addItem("Net Open: ")
            OutVect!.addItem(str(b1-b[8]))
            blank=fnblank(2)
           
        endif
        
        y=pos(sfm10a.wo_category$="INR")-1
        if y<0 then y=1
        for x=0 to 10
            c[y,x]=c[y,x]+b[x]
            t[x]=t[x]+b[x]
        next x
               
   wend 

rem --- Report Totals

        t0=t[1]+t[2]+t[3]+t[9]
        t1=t[5]+t[6]+t[7]+t[10],t2=t0-t1
        if t0<>0 then t3=(t0-t1)*100/t0 else t3=0
        blank=fnblank(16)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        blank=fnblank(1)
        OutVect!.addItem("Report Total:")
        OutVect!.addItem(str(t[0]))
        OutVect!.addItem(str(t[1]))
        OutVect!.addItem(str(t[9]))
        OutVect!.addItem(str(t[2]))
        OutVect!.addItem(str(t[3]))
        OutVect!.addItem(str(t0))
        OutVect!.addItem(str(t[4]))
        OutVect!.addItem(str(t[5]))
        OutVect!.addItem(str(t[10]))
        OutVect!.addItem(str(t[6]))
        OutVect!.addItem(str(t[7]))
        OutVect!.addItem(str(t1))
        OutVect!.addItem(str(t2))
        OutVect!.addItem(str(t3))
        if t[8]<>0 then 
            blank=fnblank(12)
            OutVect!.addItem("Closed: ")
            OutVect!.addItem(str(-t[8]))
            blank=fnblank(2)
            blank=fnblank(12)
            OutVect!.addItem("Net Open: ")
            OutVect!.addItem(str(t1-t[8]))
            blank=fnblank(2)

        endif 
    

    
rem --- Now Subtotal By Category

        blank=fnblank(16)
        blank=fnblank(16)
        blank=fnblank(16)
        OutVect!.addItem("Totals By Category:")
        blank=fnblank(15)
        blank=fnblank(16)
        for y=0 to 2
            if y=0 then 
                 OutVect!.addItem("Inventory: ")
            else 
                 if y=1 then 
                     OutVect!.addItem("Specials:")
                 else 
                     if y=2 then 
                         OutVect!.addItem("Recurring:")
                     endif
                 endif
            endif
            blank=fnblank(15)

            c0=c[y,1]+c[y,2]+c[y,3]+c[y,9]
            c1=c[y,5]+c[y,6]+c[y,7]+c[y,10],c2=c0-c1
            if c0<>0 then c3=(c0-c1)*100/c0 else c3=0
            blank=fnblank(2)
            OutVect!.addItem(str(c[y,0]))
            OutVect!.addItem(str(c[y,1]))
            OutVect!.addItem(str(c[y,9]))
            OutVect!.addItem(str(c[y,2]))
            OutVect!.addItem(str(c[y,3]))
            OutVect!.addItem(str(c0))
            OutVect!.addItem(str(c[y,4]))
            OutVect!.addItem(str(c[y,5]))
            OutVect!.addItem(str(c[y,10]))
            OutVect!.addItem(str(c[y,6]))
            OutVect!.addItem(str(c[y,7]))
            OutVect!.addItem(str(c1))
            OutVect!.addItem(str(c2))
            OutVect!.addItem(str(c3))

            if c[y,8]<>0 then 
                blank=fnblank(12)
                OutVect!.addItem("Closed: ")
                OutVect!.addItem(str(-c[y,8]))
                blank=fnblank(2)
                blank=fnblank(12)
                OutVect!.addItem("Net Open: ")
                OutVect!.addItem(str(c1-c[y,8]))
                blank=fnblank(2)

            endif
            for x=0 to 10
                u[x]=u[x]+c[y,x]
            next x
        next y

rem --- Report Totals

        u0=u[1]+u[2]+u[3]+u[9]
        u1=u[5]+u[6]+u[7]+u[10],u2=u0-u1
        if u0<>0 then u3=(u0-u1)*100/u0 else u3=0
        blank=fnblank(16)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        blank=fnblank(1)
        OutVect!.addItem("Report Total:")
        OutVect!.addItem(str(u[0]))
        OutVect!.addItem(str(u[1]))
        OutVect!.addItem(str(u[9]))
        OutVect!.addItem(str(u[2]))
        OutVect!.addItem(str(u[3]))
        OutVect!.addItem(str(u0))
        OutVect!.addItem(str(u[4]))
        OutVect!.addItem(str(u[5]))
        OutVect!.addItem(str(u[10]))
        OutVect!.addItem(str(u[6]))
        OutVect!.addItem(str(u[7]))
        OutVect!.addItem(str(u1))
        OutVect!.addItem(str(u2))
        OutVect!.addItem(str(u3))
        if u[8]<>0 then 
            blank=fnblank(12)
            OutVect!.addItem("Closed: ")
            OutVect!.addItem(str(-u[8]))
            blank=fnblank(2)
            blank=fnblank(12)
            OutVect!.addItem("Net Open: ")
            OutVect!.addItem(str(u1-u[8]))
            blank=fnblank(2)

        endif
        goto std_exit


sub_head:  rem --- Sub Heading

        switch pos(sequence$="TC")
            case 1
                blank=fnblank(16)
                OutVect!.addItem(t0$)
                OutVect!.addItem(h5$)
                blank=fnblank(14)
                blank=fnblank(16)

                break
            case 2
                blank=fnblank(16)
                OutVect!.addItem(str(fnmask$(t0$(1,c0),c1$)))
                OutVect!.addItem(h5$)
                blank=fnblank(14)
                blank=fnblank(16)

                break
            case default
                break
        swend
        return

first_sub_tot:   rem --- First Sub Total

        if t0$<>"" and l0>1 then
            if l+2>l9 then gosub sub_head
            t0=t[1]+t[2]+t[3]+t[9]
            t1=t[5]+t[6]+t[7]+t[10],t2=t0-t1
            if t0<>0 then t3=(t0-t1)*100/t0 else t3=0
            blank=fnblank(16)
            TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
            if sequence$="T" then 
                OutVect!.addItem("Type")
                OutVect!.addItem(t0$+"Totals")
            else 
                if sequence$="C" then
                    OutVect!.addItem("Customer")
                    OutVect!.addItem(str(fnmask$(t0$(1,c0),c1$))+"Totals")
                else
                    OutVect!.addItem("Item Code"+t0$(3))
                    OutVect!.addItem("Totals")
                endif
            endif
            OutVect!.addItem(str(t[0]:m2$))
            OutVect!.addItem(str(t[1]:m1$))
            OutVect!.addItem(str(t[9]:m1$))
            OutVect!.addItem(str(t[2]:m1$))
            OutVect!.addItem(str(t[3]:m1$))
            OutVect!.addItem(str(t0:m1$))
            OutVect!.addItem(str(t[4]:m2$))
            OutVect!.addItem(str(t[5]:m1$))
            OutVect!.addItem(str(t[10]:m1$))
            OutVect!.addItem(str(t[6]:m1$))
            OutVect!.addItem(str(t[7]:m1$))
            OutVect!.addItem(str(t1:m1$))
            OutVect!.addItem(str(t2:m1$))
            OutVect!.addItem(str(t3:"####.00-"))
            blank=fnblank(16)

        endif 
        if t9$<>"" then return

label3:

        dim t[10]
        t0$=data1$
        l0=0
        switch pos(sequence$="TC") 
            case 1 
                t0$=key_tpl.wo_type$
                dim h5$(30)
                h5$(1)="*** Not On File ***"
                find record (sfm10a_dev,key=firm_id$+"A"+t0$,dom=*break) sfm10a$
                h5$=sfm10a$.code_desc$
                gosub sub_head
                break
            case 2; rem --- Customer 
                t0$=key_tpl.customer_id$ 
                dim h5$(30)
                h5$(1)="*** Not On File ***"
                find record (arm01a_dev,key=firm_id$+t0$,dom=*break) arm01a$
                gosub sub_head
                break
        swend 
        return
    
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
