rem --- Work Order Pick List Print - Create Work File
rem --- Program sfr_ba v8.0.0 04Jan2008 (sfr_ba)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:02:10)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Set document Directory

    docdir$=stbl("+DOC_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Set Barista Soft Lock on the work file (can't do traditional lock because file is used in SPROC process)

    call stbl("+DIR_SYP")+"bac_lock_record.bbj","SFW_PICKLCTN","","L","M",0,rd_table_chans$[all],lock_status$
    if lock_status$<>"" then goto std_exit

rem --- Open/Lock files

    files=18,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
    files$[2]="ars_params",ids$[2]="ARS_PARAMS"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="ivm-02",ids$[4]="IVM_ITEMWHSE"
    files$[5]="ivc_whsecode",ids$[5]="IVC_WHSECODE"
    files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
    files$[7]="sfe-01",ids$[7]="SFE_WOMASTR"
    files$[8]="sfe_wocommit",ids$[8]="SFE_WOCOMMIT"
    files$[9]="sfe-13",ids$[9]="SFE_WOMATHDR"
    files$[10]="sfe-15",ids$[10]="SFE_WOMATISH"
    files$[11]="sfe-22",ids$[11]="SFE_WOMATL"
    files$[12]="sfe-23",ids$[12]="SFE_WOMATDTL"
    files$[13]="sfe-25",ids$[13]="SFE_WOMATISD"
    files$[14]="sfm-10",ids$[14]="SFC_WOTYPECD"
    files$[15]="sfs_params",ids$[15]="SFS_PARAMS"
	files$[16]="sfw-13",ids$[16]="SFW_PICKLCTN"
	files$[17]="sfe_wotrans",ids$[17]="SFE_WOTRANS"
	files$[18]="sfe-02",ids$[18]="SFE_WOOPRTN"
	options$[16]="C"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    arm01a_dev=channels[1]
    ars01a_dev=channels[2]
    ivm01a_dev=channels[3]
    ivm02a_dev=channels[4]
    ivm10c_dev=channels[5]
    ivs01a_dev=channels[6]
    sfe01a_dev=channels[7]
    sfe04c_dev=channels[8]
    sfe13a_dev=channels[9]
    sfe15a_dev=channels[10]
    sfe22b_dev=channels[11]
    sfe23a_dev=channels[12]
    sfe25a_dev=channels[13]
    sfm10a_dev=channels[14]
    sfs01a_dev=channels[15]
	sfw13a_dev=channels[16]
	sfe04d_dev=channels[17]
	sfe02_dev=channels[18]

rem --- Dimension string templates

    dim arm01a$:templates$[1],ars01a$:templates$[2],ivm01a$:templates$[3],ivm01a1$:templates$[3],ivm01a2$:templates$[3]
	dim ivm02a$:templates$[4],ivm10c$:templates$[5],ivs01a$:templates$[6]
	dim sfe01a$:templates$[7],sfe04c$:templates$[8],sfe13a$:templates$[9]
	dim	sfe15a$:templates$[10],sfe22b$:templates$[11],sfe23a$:templates$[12]
	dim sfe25a$:templates$[13],sfm10a$:templates$[14],sfs01a$:templates$[15]
	dim sfw13a$:templates$[16],sfe02a$:templates$[18]

rem --- Retrieve parameter records

    ars01a_key$=firm_id$+"AR00"
    find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Get correct Op Code Maintenance file open

	bm$=sfs01a.bm_interface$
	if bm$="Y"
		call stbl("+DIR_PGM")+"adc_application.aon","BM",info$[all]
		bm$=info$[20]
	endif

rem --- Parameters

    ivs01_precision$=ivs01a.precision$

rem --- Initialize Data

	call pgmdir$+"adc_getmask.aon","","SF","U","",m2$,0,m2
	call pgmdir$+"adc_getmask.aon","","AR","I","",cust_mask$,0,custmask
 
    more=1

rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATDTL","PRIMARY",sfe23a_key_tpl$,rd_table_chans$[all],status$

rem --- Run Overlay

    gosub create_work_file
    run pgmdir$+"sfr_picklist_o1.aon"

create_work_file: rem --- Create Work File

    dim sfe23a_key$:sfe23a_key_tpl$

	read (sfe04c_dev,key=firm_id$,dom=*next)

    while more

        read record(sfe04c_dev,end=*break) sfe04c$

        if pos(firm_id$=sfe04c$)<>1 break
            read (sfe13a_dev,key=sfe04c.firm_id$+sfe04c.wo_location$+sfe04c.wo_no$,dom=*continue)
            read (sfe23a_dev,key=sfe04c.firm_id$+sfe04c.wo_location$+sfe04c.wo_no$+"000",dom=*next)

            while more

                sfe23a_key$=key(sfe23a_dev,end=*break)
                if sfe23a_key.firm_id$+sfe23a_key.wo_location$+sfe23a_key.wo_no$<>sfe04c.firm_id$+sfe04c.wo_location$+sfe04c.wo_no$ then break
                read record (sfe23a_dev,key=sfe23a_key$) sfe23a$
                find record (sfe22b_dev,key=sfe23a.firm_id$+sfe23a.wo_location$+sfe23a.wo_no$+sfe23a.material_seq$,dom=*next) sfe22b$
                find record (ivm02a_dev,key=firm_id$+sfe23a.warehouse_id$+sfe23a.item_id$,dom=*next) ivm02a$
				sfw13a.firm_id$=firm_id$
				sfw13a.wo_location$=sfe23a.wo_location$
				sfw13a.wo_no$=sfe23a.wo_no$
				sfw13a.oper_seq_ref$=sfe22b.oper_seq_ref$
				sfw13a.location$=ivm02a.location$
				sfw13a.material_seq$=sfe23a.material_seq$
                write record (sfw13a_dev) sfw13a$

            wend

            continue

        endif

    wend

    return

open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
