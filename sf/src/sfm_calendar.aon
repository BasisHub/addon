rem Shop FLoor Calendar Maintenance
rem Proprietary Software. AddonSoftware
rem Program ID: sfm_calendar.aon  <Oct 4, 2011>
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

use java.util.Calendar
use java.util.GregorianCalendar
use java.util.Locale

rem --- Functions

    def fnstr_pos(tmp0$,tmp1$,tmp0)=int((pos(tmp0$=tmp1$,tmp0)+tmp0-1)/tmp0)
    def fnstrip$(tmp0$,tmp1$)=tmp0$(1,pos(fill(50,tmp1$)=tmp0$+fill(50,tmp1$))-1)
    def fngett_attr$(att0$)=output_attr_tbl$[fnstr_pos(att0$,attr_def_tbl$,5)]
    def fngetv_attr$(att0$,att1$)=output_attr_col$[fnstr_pos(att0$,output_attr_col$[0,1],40),fnstr_pos(att1$,attr_def_col$[0,0],5)]
    def fngetc_attr$(att0,att0$)=output_attr_col$[att0,fnstr_pos(att0$,attr_def_col$,5)]

rem --- Directory STBLs

    gui_dev$=stbl("+GUI_DEVICE")
    dir_syp$=stbl("+DIR_SYP")
    dir_img$=stbl("+DIR_IMG")
    dir_sys$=stbl("+DIR_SYS")
    file_usr$=stbl("+FILE_USR")
	file_usr$=stbl("+DIR_USR",err=*next)+"aon_"+cvs(stbl("+USER_ID",err=*next),138)+".usr"
    file_set$=stbl("+FILE_SET")

rem --- Misc Setup
rem --- get locale, and corresponding first day of week (not always Sunday)
rem --- also get !DATE, which contains date format, short/long month desc, and short/long day desc.
    Locale$=stbl("!LOCALE")
    Locale! = fnLocale!(Locale$)
    Calendar! = new GregorianCalendar(Locale!)
    firstDayOfWeek=Calendar!.getFirstDayOfWeek()

    dim date_text$:"default:c(32*=0),sm[12]:c(3*=0),m[12]:c(32*=0),sd[7]:c(3*=0),d[7]:c(32*=0)"
    date_text$=stbl("!DATE")
    day_str$="312831303130313130313031"

    no_columns=7

    dim columns$[1:no_columns]
        for curr_elem=firstDayOfWeek to 7
            columns$[curr_elem-firstDayOfWeek+1]=date_text.d$[curr_elem]
        next curr_elem
        if firstDayOfWeek > 1
            for curr_elem=1 to firstDayOfWeek-1
                columns$[7-firstDayOfWeek+2]=date_text.d$[curr_elem]
            next curr_elem
        endif

    num_rows=12

    dim months$[1:12]
        for curr_elem=1 to 12
            months$[curr_elem]=date_text.sm$[curr_elem]
        next curr_elem

    dim weeks$[1:num_rows]
        for curr_elem=1 to num_rows
            weeks$[curr_elem]=str(curr_elem)
        next curr_elem

    curr_mo=num(date(0:"%Mz"))
    default_mo=curr_mo

    curr_yr=num(date(0:"%Yd"))
    default_yr=curr_yr

    temp_chan=unt
    open(temp_chan)pgm(-2)
    temp_file$=fid(temp_chan)(9)
    close(temp_chan)
    TempFile!=temp_file$
    temp_file$=TempFile!.replace("\","/")
    file_base$=temp_file$(1,pos("/"=temp_file$,-1,2))

rem --- call bas_process_beg to put lic_feature info into sysinfo
    user_id$=stbl("+USER_ID")
    call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,table_chans$[all]

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    user_id$=sysinfo.user_id$
    firm_id$=sysinfo.firm_id$
    lic_feature$=sysinfo.lic_feature$

file_opens:rem --- Open File(s)

    num_files=4
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]=stbl("+GUI_DEVICE"),open_opts$[1]="O"
    open_tables$[2]="SFM_OPCALNDR",open_opts$[2]="OTA"
    open_tables$[3]="ADM_MODULES",open_opts$[3]="OTA"
	open_tables$[4]="SFS_PARAMS",open_opts$[4]="OTA"

    gosub open_tables

    gui_dev=num(open_chans$[1])
    sfm_calendar_dev=num(open_chans$[2]);dim sfm_calendar$:open_tpls$[2]
    adm_modules=num(open_chans$[3]);dim adm_modules$:open_tpls$[3]

rem --- Open correct Op Code table

	sfs_params=num(open_chans$[4])
	dim sfs_params$:open_tpls$[4]
	read record (sfs_params,key=firm_id$+"SF00",dom=std_missing_params) sfs_params$
	num_files=1
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	if sfs_params.bm_interface$<>"Y"
		open_tables$[1]="SFC_OPRTNCOD"
	else
		open_tables$[1]="BMC_OPCODES"
	endif
	open_opts$[1]="OTA"
	
	gosub open_tables

	opcode_dev=num(open_chans$[1])
	dim opcode$:open_tpls$[1]
	
rem --- Get SysGUI Object

    SysGUI!=bbjAPI().getSysGui()
    HdrColor!=SysGUI!.makeColor(255,252,215)
    DayColor!=SysGUI!.makeColor(240,240,240)
    
    DayVect!=SysGUI!.makeVector()
    
    dim gui_event$:tmpl(gui_dev)
    dim notify_base$:noticetpl(0,0)

rem --- Get Attributes

    call dir_syp$+"bam_attr_init.bbj",attr_def_tbl$[all],attr_def_col$[all]
        attr_def_col$=attr_def_col$[0,0]
        attr_def_tbl$=attr_def_tbl$[0,0]

rem --- Build listbox of Op Codes

	OpCodeVect!=SysGUI!.makeVector()
	read (opcode_dev,key=firm_id$,dom=*next)
	while 1
		read record (opcode_dev,end=*break) opcode$
		if pos(firm_id$=opcode$)<>1 break
		OpCodeVect!.addItem(opcode.op_code$+" - "+opcode.code_desc$)
		if FirstOpCode$="" FirstOpCode$=opcode.op_code$
	wend

rem --- If current month doesn't exist, create an empty current month

    while 1
        try_mo=curr_mo
        try_yr=curr_yr  
		op_code$=FirstOpCode$
        read record(sfm_calendar_dev,key=firm_id$+FirstOpCode$+str(try_yr:"0000")+str(try_mo:"00"),dom=*next)sfm_calendar$;break
        gosub create_new_month
        break
    wend
	curr_yr=num(sfm_calendar.year$)
	curr_mo=num(sfm_calendar.month$)
	today$=date(0)
	curr_day=num(today$(4,2))
	
rem --- get application record in order to get form icon

    readrecord(adm_modules,key=pad(lic_feature$,11),dom=*next)adm_modules$
    prog_path$=adm_modules.dd_attr_icon$
    gosub resolve_path
    form_icon$=prog_path$
    
rem --- get mask for hrs_per_day

    call pgmdir$+"adc_getmask.aon","","SF","H","",hr_mask$,0,hr_mask    

rem --- Main Process

	dim ctl_misc$[20]
	form_id$=file_base$+"arc/sfm_calendar.arc"
	call dir_syp$+"bam_controls.bbj",gui_dev,SysGUI!,form_id$,win_coord[all],Window!,"DISPLAY",open_chan$[all],ctl_misc$[all]
	
rem	gosub find_gaps1
    gosub find_gaps
    gosub get_calendar_boundaries
    gosub disp_win
    gosub get_user_settings
    gosub def_grids
    gosub display_date
    gosub display_calendar
    gosub display_data
    gosub resize_win
	
rem --- Focus on today's date

	today$=date(0)
	today$=today$(4,2)
	today=(pos(today$+"^"=stringDays$,3)-1)/3
	row=int(today/7)
	col=today-(row*7)
	row=row+1
	gridCal!.setSelectedCell(row,col)
	
    Window!.setVisible(1)

event_ctl:rem --- Event Control

    Window!.setCallback(Window!.ON_CLOSE,"exit_prog")
    Window!.setCallback(Window!.ON_RESIZE,"resize_win")

    BtnPrevYr!.setCallback(BtnPrevYr!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    BtnPrevMo!.setCallback(BtnPrevMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    BtnNextMo!.setCallback(BtnNextMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    BtnNextYr!.setCallback(BtnNextYr!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    BtnCurrMo!.setCallback(BtnCurrMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
    LstGaps!.setCallback(LstGaps!.ON_LIST_SELECT,"find_gap")
	OpCodes!.setCallback(OpCodes!.ON_LIST_SELECT,"change_op_code")
	gridCal!.setCallback(gridCal!.ON_GRID_EDIT_STOP,"adjust_status")
    gridCal!.setCallback(gridCal!.ON_GRID_DRAG_DROP,"adjust_status")
	gridcal!.setCallback(gridCal!.ON_GRID_KEYPRESS,"start_stop_edit")
    SysGUI!.flushEvents()

    process_events,err=*same


start_stop_edit:

	dim gui_event$:tmpl(gui_dev)
	dim notify_base$:noticetpl(0,0)
	gui_event!=SysGUI!.getLastEvent()
	c=gui_event!.getKeyCode()
	row=gui_event!.getRow()
	col=gui_event!.getColumn()

	switch c    
		case 10; rem --- Pressed <Enter>
        case 332; rem --- Pressed <F2>
			gridCal!.startEdit(row, col)            
			break
		case 27; rem --- Pressed <ESC>       
			gridCal!.endEdit() 
			break
		case default       
            break
	swend
	
	return
	
change_op_code: rem Change Op Code and retrieve record
rem maybe okay
	op_code$=OpCodes!.getItemAt(num(OpCodes!.getSelectedIndex()))
	op_code$=op_code$(1,pos(" - "=op_code$)-1)
	try_yr=curr_yr
	try_mo=curr_mo
rem	gosub find_gaps1
    gosub find_gaps

    LstGaps!=Window!.getControl(111)
	LstGaps!.removeAllItems()
    if GapVect!.size()
        LstGaps!.insertItems(0,GapVect!)
    else
        LstGaps!.addItem(Translate!.getTranslation("AON_NONE"))
    endif
    LstGaps!.selectIndex(0)    
    
	gosub validate_date
	gosub display_date
	gosub display_calendar
	gosub display_data
	
	return
	
adjust_date:rem --- Adjust Date

   gui_event$=SysGUI!.getLastEventString()
   date_btn=gui_event.id

    switch date_btn
        case 101;rem --- Prev Year
            try_yr=curr_yr-1
            try_mo=curr_mo
			curr_day=1
        break
        case 102;rem --- Prev Month
            try_mo=curr_mo-1
            try_yr=curr_yr
            if try_mo<1
                try_yr=curr_yr-1
                try_mo=12
            endif
			curr_day=1
        break
        case 103;rem --- Next Month
            try_mo=curr_mo+1
            try_yr=curr_yr
            if try_mo>12
                try_yr=curr_yr+1
                try_mo=1
            endif
			curr_day=1
        break
        case 104;rem --- Next Year
            try_yr=curr_yr+1
            try_mo=curr_mo
			curr_day=1
        break
        case 105;rem --- Current Month
            try_mo=default_mo
            try_yr=default_yr
			curr_day=1
        break
        case default
        break
    swend

    gosub validate_date 
    gosub display_date
    gosub display_calendar
    gosub display_data

    return

display_date:rem --- Display Current Date

    CurrDate!.setText(months$[curr_mo]+" "+str(curr_yr))
    start_day=num(date(jul(curr_yr,curr_mo,1):"%W"))
    rem --- above returns day of week relative to Sunday
    rem --- adjust for firstDayOfWeek as indicated by locale
    start_day=start_day-(firstDayOfWeek-1)
    if start_day<=0 start_day=start_day+7

    no_days=num(day_str$(curr_mo*2-1,2))
    if mod(curr_yr,4)=0 and curr_mo=2 then 
        no_days=iff(Calendar!.isLeapYear(curr_yr),29,28)
    endif

    FirstDate!.setText(first_date$)
    LastDate!.setText(last_date$)

    return

display_calendar:rem --- Calculate And Display Calendar

    DayVect!.clear()
    stringDays$="";rem contains string version of dayvect for parsing
    day_count=0

    for curr_day=1 to 42
        day_text$=""
        if curr_day>=start_day and day_count<no_days
            day_count=day_count+1
            day_text$=str(day_count)
        endif

        DayVect!.addItem(day_text$)
        stringDays$=stringDays$+str(num(day_text$):"00")+"^"
		
		if mod(curr_day,7)=0 
			xvk=fnblank(7)
			stringDays$=stringDays$+"00^00^00^00^00^00^00^"
		endif
		
    next curr_day

    GridCal!.setCellText(0,0,DayVect!)

    for x=0 to 11
        for y=0 to 6
			if mod(x,2)=0
				GridCal!.setCellBackColor(x,y,HdrColor!)
				if GridCal!.getCellText(x,y)<>""
					GridCal!.setCellStyle(x+1,y,GRID_STYLE_INPUTE)
					rem GridCal!.setCellMask(x+1,y,hr_mask$)
					GridCal!.setCellBackColor(x+1,y,DayColor!)
				else
					GridCal!.setCellBackColor(x+1,y,HdrColor!)
                    GridCal!.setCellEditable(x,y,0)
                    GridCal!.setCellEditable(x+1,y,0)
				endif
            endif
        next y
    next x
    return

display_data:rem --- Display Data For Selected Op Code

    day_count=0
    dim sfm_calendar$:fattr(sfm_calendar$)

    read record(sfm_calendar_dev,key=firm_id$+op_code$+str(curr_yr:"0000")+str(curr_mo:"00"),dom=*next)sfm_calendar$

    for curr_day=1 to sfm_calendar.days_in_mth
        day_hrs=nfield(sfm_calendar$,"HRS_PER_DAY_"+str(curr_day:"00"))
		if day_hrs=-1
			useText$=""
		else
			useText$=str(day_hrs:hr_mask$)+Translate!.getTranslation("AON__HRS")
		endif
        gosub set_Color_and_Text
    next curr_day

    return

set_Color_and_Text:

    wpos=(pos(str(curr_day:"00")+"^"=stringDays$,3)-1)/3
    if wpos>=0
        grid_row=int(wpos/7)
        grid_col=mod(wpos,7)
		GridCal!.setCellText(grid_row+1,grid_col,useText$)
    endif
    return

adjust_status:

    Event!=SysGUI!.getLastEvent()	
    gui_event$=SysGUI!.getLastEventString()
	row=Event!.getRow()
	col=Event!.getColumn()
    curr_day=num(gridCal!.getCellText(row-1,col))
    gotNum=0
    if curr_day<>0 
        useText$=gridCal!.getCellText(row,col)
        tlen=len(useText$)      
        while 1
            useText=num(useText$(1,tlen),err=*next);gotNum=1
            if gotNum
                useText$=str(useText:hr_mask$,err=err43)+Translate!.getTranslation("AON__HRS")
                break
            else
err43:            
                tlen=tlen-1
                if tlen<=1
                    useText=0
                    useText$="0.0 hrs"
                    break
                endif
            endif
        wend
        gosub update_sfm_calendar
        gridCal!.setCellText(row,col,useText$)
    endif
  
    return  

update_sfm_calendar:

    dim sfm_calendar$:fattr(sfm_calendar$)

    extractrecord(sfm_calendar_dev,key=firm_id$+op_code$+str(curr_yr:"0000")+str(curr_mo:"00"))sfm_calendar$
    field sfm_calendar$,"HRS_PER_DAY_"+str(curr_day:"00")=useText
    sfm_calendar$=field(sfm_calendar$)
    write record(sfm_calendar_dev)sfm_calendar$
    return

find_gap:
  
    gap_date$=LstGaps!.getItemAt(num(LstGaps!.getSelectedIndex()))
    curr_yr=num(gap_date$(7,4))
    curr_mo=num(gap_date$(1,2))
    gosub display_date
    gosub display_calendar
    gosub display_data

    return

get_calendar_boundaries:
   
    dim sfm_calendar$:fattr(sfm_calendar$)

    read(sfm_calendar_dev,key=firm_id$+op_code$,dom=*next)

    k$=key(sfm_calendar_dev,err=*next)
	readrecord(sfm_calendar_dev,key=k$)sfm_calendar$
    if pos(firm_id$+op_code$=sfm_calendar$)<>1
        first_date$=Translate!.getTranslation("AON_NONE")
    else
        first_date$=sfm_calendar.month$+"/"+sfm_calendar.year$
    endif
    dim sfm_calendar$:fattr(sfm_calendar$)

    read(sfm_calendar_dev,key=firm_id$+op_code$+$ff$,dom=*next)
    k$=keyp(sfm_calendar_dev,err=*next)
	readrecord(sfm_calendar_dev,key=k$)sfm_calendar$
    if pos(firm_id$+op_code$=sfm_calendar$)<>1
        last_date$=Translate!.getTranslation("AON_NONE")
    else
        last_date$=sfm_calendar.month$+"/"+sfm_calendar.year$
    endif

    return

find_gaps:rem --- find gaps (unsched days) between begin/end dates
rem --- this logic is complicated... in v6/7 all day statuses were in a single string
rem --- w/ v8, all are separate templated fields.  So we look at each day, mark start of
rem --- gap when we find a space (also set stop=start at that point), then set end of gap 
rem --- each space day thereafter until we hit non-space again.  When we find new start of
rem --- gap, previous start/stop pair are added to gapVect!.  It should process entire
rem --- month gaps correctly as well.
rem --- start_of_gap=1 means we're at the start of a new gap, 0 means we've captured
rem --- the start of gap date, and need set stop dates until we hit a non-space day.

    first_rec=1
    start_of_gap=1
    GapVect!=SysGUI!.makeVector()  
    gap_start$=""
    gap_stop$=""
    last_key$=""
    dim sfm_calendar$:fattr(sfm_calendar$)

    read(sfm_calendar_dev,key=firm_id$+op_code$,dom=*next)

    while 1

        readrecord(sfm_calendar_dev,end=*break)sfm_calendar$
        if pos(firm_id$+op_code$=sfm_calendar$)<>1 break
        if last_key$="" then last_key$=sfm_calendar.year$+sfm_calendar.month$

        for curr_day=1 to sfm_calendar.days_in_mth
            day_hrs=nfield(sfm_calendar$,"HRS_PER_DAY_"+str(curr_day:"00"))
            if day_hrs=-1
                if start_of_gap=1
                    if num(sfm_calendar.year$+sfm_calendar.month$)-num(last_key$)>1
                        rem - if at start of new gap, but this yr/mo not contig w/ previous, adjust begin dt for the gap
                        rem - then put prev start/stop into gapVect!, and begin tracking gap
                        wk_date$=last_key$+day_str$(num(last_key$(5,2))*2-1,2)
                        call stbl("+DIR_PGM")+"adc_daydates.aon",wk_date$,nxt_date$,1
                        gosub load_GapVect
                        gap_start$=nxt_date$
                        gap_stop$=gap_start$
                        last_key$=sfm_calendar.year$+sfm_calendar.month$
                        start_of_gap=0
                    else
                        rem - if at start of new gap and this rec is contiguous w/ previous,
                        rem - put prev start/stop into gapVect! and begin tracking gap
                        gosub load_GapVect
                        gap_start$=sfm_calendar.year$+sfm_calendar.month$+str(curr_day:"00")
                        gap_stop$=gap_start$
                        start_of_gap=0
                    endif
                else
                    rem - start_of_gap<>1, meaning we're in the middle of tracking a gap
                    rem - just update the gap_stop$
                    gap_stop$=sfm_calendar.year$+sfm_calendar.month$+str(curr_day:"00")
                endif
            else
                rem --- init gapvect! once we find first non-space day in calendar
                if first_rec=1
                    gapVect!.clear()
                    start_of_gap=1
                    first_rec=0
                else
                    rem --- if first day of new month is non-space, and gap isn't closed, get end date for gap
                    if curr_day=1 and start_of_gap=0
                        wk_date$=sfm_calendar.year$+sfm_calendar.month$+str(curr_day:"00")
                        call stbl("+DIR_PGM")+"adc_daydates.aon",wk_date$,prev_date$,-1
                        last_key$=prev_date$(1,6)
                        gap_stop$=prev_date$
                        start_of_gap=1
                    endif
                    rem --- just a regular non-space day
                    start_of_gap=1
                endif
            endif
        next curr_day

        last_key$=sfm_calendar.year$+sfm_calendar.month$

    wend
    gosub load_GapVect

    return

load_GapVect:
    if cvs(gap_start$,3)<>"" and cvs(gap_stop$,3)<>""
        GapVect!.addItem(fndate$(gap_start$)+" - "+fndate$(gap_stop$))
    endif
    gap_start$=""
    gap_stop$=""

    return
    
load_GapVect2:rem --- this doesn't give me multiple gaps, so using same load_gapVect routine (above) as PO Calendar
              rem --- could be it was trying to solve some other problem that I'm not aware of (1/31/12 CAH)
	gap_size=GapVect!.size()
	if gap_size>0
		prev_date$=GapVect!.getItem(gap_size-1)
	endif
	if gap_size=0 or (gap_size>1 and prev_date$(20,4)+prev_date$(14,2)+prev_date$(17,2) <= gap_start$)
		if cvs(gap_start$,3)<>"" and cvs(gap_stop$,3)<>""
			GapVect!.addItem(fndate$(gap_start$)+" - "+fndate$(gap_stop$))
		endif
	endif
    gap_start$=""
    gap_stop$=""

    return    

find_gaps1: rem --- Display Unscheduled Gaps in Calendar
	read record(sfm_calendar_dev,key=firm_id$+op_code$,dom=*next)
	gap$=""
	GapVect!=SysGUI!.makeVector()
	call dir_syp$+"bac_key_template.bbj","SFM_OPCALNDR","PRIMARY",sfm_key$,table_chans$[all],status$

	dim sfm_key$:sfm_key$
rem --- Process First Month
	sfm_key$=key(sfm_calendar_dev,end=line_5500)
	if pos(firm_id$+op_code$=sfm_key$)<>1 goto line_5500
	read record (sfm_calendar_dev,key=sfm_key$)sfm_calendar$
	last_month$=sfm_calendar.year$+sfm_calendar.month$+str(sfm_calendar.days_in_mth:"00")
	for x0=1 to sfm_calendar.days_in_mth
		day_hrs=nfield(sfm_calendar$,"HRS_PER_DAY_"+str(curr_day:"00"))
		if day_hrs>=0 exitto line_5150
	next x0
	
line_5150:
	for x1=x0 to sfm_calendar.days_in_mth
			if nfield(sfm_calendar$,"HRS_PER_DAY_"+str(x1:"00"))<0 exitto line_5170
	next x1
	goto line_5200
	
line_5170:
	gap$=gap$+k$(6,6)+str(x1:"00")
	for x2=x1 to sfm_calendar.days_in_mth
		if nfield(sfm_calendar$,"HRS_PER_DAY_"+str(x2:"00"))>=0 exitto line_5195
	next x2
	goto line_5200
	
line_5195:
	gap$=gap$+sfm_calendar.year$_sfm_calendar.month$+str(x2-1:"00")
	x0=x2
	goto line_5150
	
line_5200: rem --- Process remaining months

	dim sfm_key$:fattr(sfm_key$)
	sfm_key$=key(sfm_calendar_dev,end=line_5400)
	if pos(firm_id$+op_code$=sfm_key$)<>1 goto line_5400
	x$=""
	call "adc_daydates.aon",last_month$,x$,1
	if x$(1,6)=sfm_key.year$+sfm_key.month$ goto line_5250
	if mod(len(gap$),16)=0 gap$=gap$+x$
	
line_5250:
	read record (sfm_calendar_dev,key=sfm_key$)sfm_calendar$
	last_month$=sfm_calendar.year$+sfm_calendar.month$+str(sfm_calendar.days_in_mth:"00")
	if mod(len(gap$),16)=0 and sfm_calendar.hrs_per_day_01=-1
		gap$=gap$+sfm_calendar.year$+sfm_calendar.month$+"01"
	else
		goto line_5275
	endif
	for x=1 to sfm_calendar.days_in_mth
		if nfield(sfm_calendar$,"HRS_PER_DAY_"+str(x:"00"))>=0 exitto line_5270
	next x

line_5270:
	gap$=gap$+sfm_calendar.year$+sfm_calendar.month$+str(x-1:"00")
	x0=x
	goto line_5310
 
line_5275:
	if mod(len(gap$),16)<>0 and sfm_calendar.hrs_per_day_01>=0 
		x$=""
		call "adc_daydates.aon",sfm_calendar.year$+sfm_calendar.month$+"01",x$,-1
		gap$=gap$+x$
		x0=1
		goto line_5310
	endif
	if mod(len(gap$),16)<>0 and sfm_calendar.hrs_per_day_01=-1 
		gap$=gap$+sfm_calendar.year$+sfm_calendar.month$
	else
		goto line_5300
	endif
	for x=1 to sfm_calendar.days_in_mth
		if nfield(sfm_calendar$,"HRS_PER_DAY_"+str(x:"00"))>=0 exitto line_5295
	next x
line_5295:
	gap$=gap$+str(x-1:"00")
	x0=x
	goto line_5310

line_5300:
	x0=1
	
line_5310:
	for x1=x0 to sfm_calendar.days_in_mth
		if nfield(sfm_calendar$,"HRS_PER_DAY_"+str(x1:"00"))=-1 exitto line_5330
	next x1
	goto line_5200
	
line_5330:
	gap$=gap$+sfm_calendar.year$+sfm_calendar.month$+str(x1:"00")
	for x2=x1 to sfm_calendar.days_in_mth
		if nfield(sfm_calendar$,"HRS_PER_DAY_"+str(x2:"00"))>=0 exitto line_5355
	next x2
	goto line_5200
	
line_5355:
	gap$=gap$+sfm_calendar.year$+sfm_calendar.month$+str(x2-1:"00")
	x0=x2
	goto line_5310

line_5400: rem --- Now Prepare To Display Gaps"
	if mod(len(gap$),16)<>0 
		gap$=gap$(1,len(gap$)-8)
	endif
	if len(gap$)=0 goto line_5690

line_5500: rem --- Display Gaps
	if len(gap$)=0 goto line_5690
	GapVect!.addItem(fndate$(gap$(1,8))+" - "+fndate$(gap$(9,8)))
	gap$=gap$(17)
	goto line_5500

line_5690:

    LstGaps!=Window!.getControl(111)
	LstGaps!.removeAllItems()
    if GapVect!.size()
        LstGaps!.insertItems(0,GapVect!)
    else
        LstGaps!.addItem(Translate!.getTranslation("AON_NONE"))
    endif
	LstGaps!.deselect()
    LstGaps!.selectIndex(0)
	return

validate_date:
rem --- see if curr_mo/curr_yr is in calendar; option to create if not

    dim sfm_calendar$:fattr(sfm_calendar$)

    read record(sfm_calendar_dev,key=firm_id$+op_code$+str(try_yr:"0000")+str(try_mo:"00"),dom=*next)sfm_calendar$
    if cvs(sfm_calendar.year$,3)=""
rem        msg_id$="PO_NO_CAL"
rem        msg_opt$=""
rem        gosub disp_message
rem        if msg_opt$="Y"
            curr_yr=try_yr
            curr_mo=try_mo
            gosub create_new_month
        endif
rem    else
        curr_yr=try_yr
        curr_mo=try_mo
rem    endif

    return

create_new_month:rem --- add new, blank record for specified Op Code/yr/mo to calendar

    dim sfm_calendar$:fattr(sfm_calendar$)
    sfm_calendar.firm_id$=firm_id$
	sfm_calendar.op_code$=op_code$
    sfm_calendar.year$=str(curr_yr:"0000")
    sfm_calendar.month$=str(curr_mo:"00")
    
    sfm_calendar.days_in_mth=num(day_str$(curr_mo*2-1,2))
    if mod(curr_yr,4)=0 and curr_mo=2 then sfm_calendar.days_in_mth=29
	for x=1 to 31
		field sfm_calendar$,"HRS_PER_DAY_"+str(x:"00")=-1
	next x
    writerecord(sfm_calendar_dev)sfm_calendar$

    return

get_user_settings:rem --- Get User/Windows Settings

    win_save_id$=pad("WIN_[PURCH_CAL]",20)
    call dir_syp$+"bac_winsize.bbj",cvs(win_save_id$,4),"W","",Window!,"READ",win_coord[all]

    return

save_user_settings:rem --- Save Windows Coordinates

    if Window!<>null() then
        call dir_syp$+"bac_winsize.bbj",cvs(win_save_id$,4),"W","",Window!,"SAVE",win_coord[all]
    endif

    return

open_tables:rem -----<Open Tables

    call dir_syp$+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],table_chans$[all],open_batch,open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto exit_prog
    endif

    return

disp_message:rem --- Display Message Dialog

    call dir_syp$+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

disp_win:rem --- Display Window

    childGrid!=Window!.getControl(100)

    BtnPrevYr!=Window!.getControl(101)
    BtnPrevMo!=Window!.getControl(102)
    BtnNextMo!=Window!.getControl(103)
    BtnNextYr!=Window!.getControl(104)
    BtnCurrMo!=Window!.getControl(105)
    CurrDate!=Window!.getControl(106)

    FirstDate!=Window!.getControl(109)
    LastDate!=Window!.getControl(110)

    LstGaps!=Window!.getControl(111)
	LstGaps!.removeAllItems()
    if GapVect!.size()
        LstGaps!.insertItems(0,GapVect!)
    else
        LstGaps!.addItem(Translate!.getTranslation("AON_NONE"))
    endif
    LstGaps!.selectIndex(0)

	OpCodes!=Window!.getControl(113)
	if OpCodeVect!.size()
		OpCodes!.insertItems(0,OpCodeVect!)
	else
		OpCodes!.addItem(Translate!.getTranslation("AON_NONE"))
	endif
	OpCodes!.selectIndex(0)

    GridCal!=childGrid!.getControl(100)
    GridFont!=GridCal!.getFont()
    HdrFont!=SysGUI!.makeFont(GridFont!.getName(),GridFont!.getSize(),1)

    WinColor!=Window!.getBackColor()
    win_title$=Window!.getTitle()
    Window!.setIcon(form_icon$,err=*next)

    win_disp$="YES"

    return

resize_win:rem --- Resize Window Contents

        childGrid!.setSize(Window!.getWidth()-(childGrid!.getX()*2),Window!.getHeight()-childGrid!.getY()-20)
        GridCal!.setSize(childGrid!.getWidth()-(GridCal!.getX()*2),childGrid!.getHeight()-10)
		for rows=0 to 11
			if mod(rows,2)=0
				GridCal!.setRowHeight(rows,(GridCal!.getHeight()-GridCal!.getColumnHeaderHeight())/num_rows-18)
				rem GridCal!.setRowEditable(rows, 0)
			else
				GridCal!.setRowHeight(rows,(GridCal!.getHeight()-GridCal!.getColumnHeaderHeight())/num_rows+16)
				rem GridCal!.setRowEditable(rows, 1)
				for col=0 to 6
					GridCal!.setCellAlignment(rows, col, SysGUI!.GRID_ALIGN_RIGHT)
				next col
			endif
		next rows
    return

def_grids:rem --- Define Grid

    def_output_cols=no_columns
    dim attr_col$[def_output_cols,len(attr_def_col$[0,0])/5]

    col_size=int(childGrid!.getWidth()/7)

    for curr_column=1 to def_output_cols

        attr_col$[curr_column,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="COL_"+str(curr_column+1:"0")
        attr_col$[curr_column,fnstr_pos("LABS",attr_def_col$[0,0],5)]=columns$[curr_column]
        attr_col$[curr_column,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="C"
        attr_col$[curr_column,fnstr_pos("CTLW",attr_def_col$[0,0],5)]=str(col_size)
        attr_col$[0,1]=attr_col$[0,1]+pad("SUMMARY."+attr_col$[curr_column,fnstr_pos("DVAR",attr_def_col$[0,0],5)],40)        

    next curr_column

    call dir_syp$+"bam_grid_init.bbj",gui_dev,GridCal!,"NOSCROLL-COLH-LINES-VTOP-CELL-EDIT",num_rows,attr_def_col$[all],attr_col$[0,1],attr_col$[all]
    GridCal!.setFitToGrid(GridCal!.AUTO_RESIZE_LAST_COLUMN)
    GridCal!.setRowHeight(int((childGrid!.getHeight()-GridCal!.getColumnHeaderHeight())/num_rows))

    GridCal!.setSelectionMode(GridCal!.GRID_SELECT_CELL)
    GridCal!.setEditable(1)
    GridCal!.setMultipleSelection(GridCal!.FALSE)
    GridCal!.setHighlightMethod(GridCal!.GRID_HIGHLIGHT_OUTLINE)
    GridCal!.setDragAccept(1)

    return

resolve_path:rem --- Resolve Program Path

    while pos("["=prog_path$)<>0
        stbl_from=pos("["=prog_path$)+1
        stbl_thru=pos("]"=prog_path$)
        proc_mssg$=stbl_err$
        temp_stbl$=stbl(prog_path$(stbl_from,stbl_thru-stbl_from),err=*next)
        proc_mssg$=""
        if stbl_thru=len(prog_path$)
            prog_path$=prog_path$(1,stbl_from-2)+temp_stbl$
        else
            prog_path$=prog_path$(1,stbl_from-2)+temp_stbl$+prog_path$(stbl_thru+1)
        endif
    wend

    return

def fnLocale!(Locale$)
  Locale$ = cvs(Locale$,3)
   switch pos("_"=Locale$,1,0)
     case 0
       return new Locale(Locale$)
     case 1; rem ' language_country
       p = pos("_"=Locale$)
       language$ = cvs(Locale$(1,p-1),8)
       country$ = cvs(Locale$(p+1),4)
       return new Locale(language$,country$)
     case 2; rem ' language_country_modifier
       p1 = pos("_"=Locale$)
       p2 = pos("_"=Locale$(p1+1))
       language$ = cvs(Locale$(1,p1-1),8)
       country$ = cvs(Locale$(p1+1,p2-1),4)
       modifier$ = Locale$(p1+p2)
       return new Locale(language$,country$,modifier$)
     case default; rem ' invalid format
       return new Locale(Locale$)
   swend
 fnend

rem --- Date/time handling functions
rem --- format added to this version

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next):"%Mz/%Dz/%Yd",err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnBlank : Create blank cells in DayVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            DayVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$
    if pos("EXIT"=err_act$) goto std_error_exit
    if pos("ESCAPE"=err_act$) seterr 0;setesc 0
    if pos("RETRY"=err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

exit_prog:rem --- Exit Program

    gosub save_user_settings

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

    end