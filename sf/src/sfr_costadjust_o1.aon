rem --- Work Order Adjustment Register - Summary by Type
rem --- Program converted from wor_la, 20Jul2012
rem --- Created by Codeport Utility (07/20/2012 10:43:34)

rem --- AddonSoftware
rem --- Copyright (c) 1981-2011 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

	OutVect!=bbjAPI().makeVector()
	HdrVect!=bbjAPI().makeVector()
	BrkVect!=bbjAPI().makeVector()
	TotVect!=bbjAPI().makeVector()
	rep_date$=date(0:"%Mz/%Dz/%Yd")
	rep_date_stamp$=date(0:"%Yd%Mz%Dz")
	rep_time$=date(0:"%hz:%mz %p")
	rep_time_stamp$=date(0:"%Hz%mz%sz")
	rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)
	next_overlay$=""

	call pgmdir$+"adc_progress.aon","N","","","","",0,wow06_dev,1,meter_num,status

rem ---  column heading

	dim columns$[5,10]
	columns=5
	columns$[0,0]=Translate!.getTranslation(""),     columns$[0,1]="C",columns$[0,2]="8"
	columns$[1,0]=Translate!.getTranslation(""),     columns$[1,1]="C",columns$[1,2]="30"
	columns$[2,0]=Translate!.getTranslation("AON_DIRECT")+"^"+Translate!.getTranslation("AON_LABOR"),        columns$[2,1]="N",columns$[2,2]="10",columns$[2,3]=m1$,columns$[2,10]="T"
	columns$[3,0]=Translate!.getTranslation("AON_OVHD")+"^"+Translate!.getTranslation("AON_LABOR"),          columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m1$,columns$[3,10]="T"
	columns$[4,0]=Translate!.getTranslation("AON_SUBCONTRACT")+"^"+Translate!.getTranslation("AON_AMOUNT"),  columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m1$,columns$[4,10]="T"
	columns$[5,0]=Translate!.getTranslation("AON_TOTAL"),                                                    columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m1$,columns$[5,10]="T"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Trip Read"
	read record (wow06_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)
	dim t[3],u[3]
	while 1
		read record (wow06_dev,end=*break) wow06a$
		if pos(firm_id$=wow06a$)<>1 break
		if wow06a.batch_no$<>batch_no$ break
		if wow06a.trans_date$<>t0$ gosub date_tot
		dim wom10a$:fattr(wom10a$)
		find record (wom10_dev,key=firm_id$+"A"+wow06a.wo_type$,dom=*next) wom10a$
		outVect!.addItem(wow06a.wo_type$)
		outVect!.addItem(wom10a.code_desc$)
		outVect!.addItem(str(wow06a.act_dir_amt))
		outVect!.addItem(str(wow06a.act_ovhd_amt))
		outVect!.addItem(str(wow06a.unit_cost))
		outVect!.addItem(str(wow06a.net_adjust))

		t[0]=t[0]+wow06a.act_dir_amt
		t[1]=t[1]+wow06a.act_ovhd_amt
		t[2]=t[2]+wow06a.unit_cost
		t[3]=t[3]+wow06a.net_adjust
		u[0]=u[0]+wow06a.act_dir_amt
		u[1]=u[1]+wow06a.act_ovhd_amt
		u[2]=u[2]+wow06a.unit_cost
		u[3]=u[3]+wow06a.net_adjust

	wend

rem --- End

    t9$="E"
    gosub date_tot

	totVect!.addItem(str(outVect!.size()/(columns+1)))
	outVect!.addItem("")
	outVect!.addItem(fndate$(t0$)+Translate!.getTranslation("AON__TOTAL:_"))
	outVect!.addItem(str(u[0]))
	outVect!.addItem(str(u[1]))
	outVect!.addItem(str(u[2]))
	outVect!.addItem(str(u[3]))

	update$="sfu_costadjust.aon"
	overlay$=update$
	if gl$="Y" overlay$=pgmdir$+"glr_recap.aon"
	next_overlay$=overlay$
	goto std_exit

rem --- Date Sub Total

date_tot:
    if t0$="" goto date_head
	totVect!.addItem(str(outVect!.size()/(columns+1)))
	outVect!.addItem("")
	outVect!.addItem(fndate$(t0$)+Translate!.getTranslation("AON__TOTAL:_"))
	outVect!.addItem(str(t[0]))
	outVect!.addItem(str(t[1]))
	outVect!.addItem(str(t[2]))
	outVect!.addItem(str(t[3]))

	xvk=fnblank(6)
	
date_head:
    if t9$<>"" return
    dim t[3]                                                  
    let t0$=wow06a.trans_date$
	outVect!.addItem(Translate!.getTranslation("AON_TRANSACTION_DATE:_")+fndate$(t0$))
	xvk=fnblank(5)

	xvk=fnblank(6)
	
    return                                                  

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            outVect!.addItem("")
        next q1
        return q1
    fnend

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src
rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit_no_report:

    OutVect!=null();rem nothing to print, or some other err such that no report
    
std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
	
std_exit: rem --- Standard program end (01Mar2006)

	call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
