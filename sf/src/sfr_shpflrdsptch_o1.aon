rem --- Shop Floor Dispatch Report
rem --- Program sfr_pb v8.0.0 25Jan2008 (sfr_pb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/25/2008 05:27:28)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    headings=5
    dim headings$[headings]
    headings$[0]=n1$
    headings$[1]=n4$
    headings$[2]=h0$
    headings$[3]=h1$
    headings$[4]=h2$
    more=1
	op_len$=fattr(sfe02a$)
	op_len$=op_len$(pos("INTERNAL_SEQ_NO:C("=op_len$)+18)
	op_len$=op_len$(1,pos("),"=op_len$)-1)
	op_len=num(op_len$)

    call pgmdir$+"adc_getmask.aon","","IV","U","",m2$,0,0
    call pgmdir$+"adc_getmask.aon","","IV","C","",m3$,0,0


rem --- Retrieve key templates
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSCHDL","PRIMARY",sfm05a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01a_key_pritpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","AO_LOC_CD_DT_WO",sfe02a_key_alt1tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02a_key_pritpl$,rd_table_chans$[all],status$

rem --- Headings and print positions

    dim columns$[13,10]
    columns = 13
    columns$[0,0]=Translate!.getTranslation("AON_DATE^REQ'D"),         columns$[0,1]="C",columns$[0,2]="8"
    columns$[1,0]=Translate!.getTranslation("AON_PRI^CODE"),           columns$[1,1]="C",columns$[1,2]="4"
    columns$[2,0]=Translate!.getTranslation("AON_WO^ST"),              columns$[2,1]="C",columns$[2,2]="4"
    columns$[3,0]=Translate!.getTranslation("AON_WO^TP"),              columns$[3,1]="C",columns$[3,2]="4"
    columns$[4,0]=Translate!.getTranslation("AON_W.O.^NUMBER"),         columns$[4,1]="C",columns$[4,2]="6"
    columns$[5,0]=Translate!.getTranslation("AON_DESCRIPTION"),        columns$[5,1]="C",columns$[5,2]="25"
    columns$[6,0]=Translate!.getTranslation("AON_AT^OPN"),             columns$[6,1]="C",columns$[6,2]="4"
    columns$[7,0]=Translate!.getTranslation("AON_FRM^OPN"),            columns$[7,1]="C",columns$[7,2]="4"
    columns$[8,0]=Translate!.getTranslation("AON_SCHED^COMPLETE"),     columns$[8,1]="C",columns$[8,2]="8"
    columns$[9,0]=Translate!.getTranslation("AON_CUSTOMER"),           columns$[9,1]="C",columns$[9,2]="15"
    columns$[10,0]=Translate!.getTranslation("AON_SETUP^TIME"),        columns$[10,1]="N",columns$[10,2]="10",columns$[10,3]=m3$,columns$[10,10]="T"
    columns$[11,0]=Translate!.getTranslation("AON_RUN^TIME"),          columns$[11,1]="N",columns$[11,2]="10",columns$[11,3]=m3$,columns$[11,10]="T"
    columns$[12,0]=Translate!.getTranslation("AON_MOVE^TIME"),         columns$[12,1]="N",columns$[12,2]="10",columns$[12,3]=m3$
    columns$[13,0]=Translate!.getTranslation("AON_CRITICAL^RATIO"),    columns$[13,1]="N",columns$[13,2]="10",columns$[13,3]=m2$

rem --- Calculate Actual Transactions

    gosub calc_time
rem jpb    call pgmdir$+"adc_progress.aon","N","","","","",0,sfm05a_dev,1,0,ignore_status

rem --- Position sfm-05 detail file

    dim sched[days]
    totset=0
    totrun=0,wtotset=0,wtotrun=0
    prefix$=firm_id$+op_code$
    read (sfm05a_dev,key=prefix$,dom=*next)

rem --- Read next sfm-05 detail record

    dim sfm05a_key$:sfm05a_key_pritpl$
    while more
        sfm05a_key$=key(sfm05a_dev,end=done)
        if pos(prefix$=sfm05a_key$)<>1 then goto done
        read record (sfm05a_dev) sfm05a$
        thisseq$=sfm05a_key.oper_seq_ref$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status

rem --- Work order still open?

		dim sfe01a$:fattr(sfe01a$)

        move=0
        find record (sfe01a_dev,key=firm_id$+sfe01a.wo_location$+sfm05a.wo_no$,dom=*continue) sfe01a$
        if pos(sfe01a.wo_status$=wo_status$)=0 then continue
        dim desc$(20)

        desc$(1)=sfe01a.description_01$
        if sfe01a.wo_category$="I" then 
            desc$(1)=sfe01a.item_id$+" "+desc$
        endif
        move=move+sfm05a.move_time
		dim arm01a$:fattr(arm01a$)
        if ar$="Y" then 
            find record (arm01a_dev,key=firm_id$+sfe01a.customer_id$,dom=*next) arm01a$
        endif

rem --- Shall we print it?

        gosub init_wo
        gosub calc_rem_units

        if begdate$<>"" and begdate$>sfm05a_key.sched_date$ then continue
        if lastdate$<>"" and lastdate$<sfm05a_key.sched_date$ then continue
        if sfe01a.priority$>pr_code$ then continue
        if runt=0 and settime=0 and move=0 then continue
        if t1$<>sfm05a_key.sched_date$ then gosub week_end_subtot
        if t0$<>sfm05a_key.op_code$ then gosub totals
        gosub det_disp
        totset=totset+settime
        totrun=totrun+runt
        wtotset=wtotset+settime
        wtotrun=wtotrun+runt

rem --- Loop back for next record
        
    wend


calc_time: rem --- Calculate Actual Run & Setup Time From Transactions
    wostr$=""
    key1$=firm_id$+sfe02a.wo_location$+op_code$
    read (sfe02a_dev,key=key1$,knum="AO_LOC_CD_DT_WO",dom=*next)

    dim sfe02a_key$:sfe02a_key_alt1tpl$
    while more
        sfe02a_key$=key(sfe02a_dev,knum="AO_LOC_CD_DT_WO",end=*break)
        if cvs(sfe02a_key.op_code$,3)<>cvs(op_code$,3) then break
        read (sfe02a_dev,key=sfe02a_key$,knum="AO_LOC_CD_DT_WO")
        read (sft01a_dev,key=firm_id$+sfe02a_key.wo_location$+sfe02a_key.wo_no$,dom=*next)
        dim sft01a_key$:sft01a_key_pritpl$

        while more
            sft01a_key$=key(sft01a_dev,end=*break)

            if sft01a_key.wo_no$<>sfe02a_key.wo_no$ then break
            read record (sft01a_dev) sft01a$
            if cvs(sft01a.op_code$,3)<>cvs(op_code$,3) then continue
            units=units+sft01a.units
            settime=settime+sft01a.setup_time
        wend
rem --- Done With This Work Order
        if units=0 and settime=0 then continue
        if pos(sfe02a_key.wo_no$=wostr$,7+2*umask)=0 then 
            wostr$=wostr$+sfe02a_key.wo_no$+str(units:umask$)+str(settime:umask$)
        endif
        units=0
        settime=0
    wend

return

done: rem --- End Of File

    t9$="E"
    if len(sfm05a_key$)<>0 then
        gosub totals
    endif
    goto std_exit


det_disp: rem --- Detail display
    if l0=0 then gosub sub_head
    gosub calc_ratio
    OutVect!.addItem(str(fndate$(sfm05a_key.sched_date$)))
    OutVect!.addItem(sfe01a.priority$)
    OutVect!.addItem(sfe01a.wo_status$)
    OutVect!.addItem(sfe01a.wo_type$)
    OutVect!.addItem(sfe01a.wo_no$)
    OutVect!.addItem(desc$)
    OutVect!.addItem(at$)
    OutVect!.addItem(from$)
    OutVect!.addItem(str(fndate$(sfe01a.estcmp_date$)))
    OutVect!.addItem(arm01a.customer_name$)
    OutVect!.addItem(str(settime))
    OutVect!.addItem(str(runt))
    OutVect!.addItem(str(move))
    OutVect!.addItem(str(critr))
    
    l=l+1
    l0=l0+1
    l1=l1+1
    return

sub_head: rem --- Sub Heading
    blank=fnblank(14)
    if bm$="Y" then
        find record (bmm08a_dev,key=firm_id$+sfm05a_key.op_code$,dom=*next) bmm08a$
        OutVect!.addItem(Translate!.getTranslation("AON_OPERATION_CODE:_")+sfm05a_key.op_code$+" "+bmm08a.code_desc$)
        blank=fnblank(13)
    else
        find record (sfm02a_dev,key=firm_id$+sfm05a_key.op_code$,dom=*next) sfm02a$
        OutVect!.addItem(Translate!.getTranslation("AON_OPERATION_CODE:_")+sfm05a_key.op_code$+" "+sfm02a.code_desc$)
        blank=fnblank(13)
    endif
    blank=fnblank(14)
    l=l+2
    return

week_end_subtot: rem --- Week Ending Subtotals
    if t1$<>"" and l1<>0 then
        dummy$=""
        sdate$=""

        call pgmdir$+"adc_dayweek.aon",t1$,dummy$,dow
        if dow<>0 then
            call pgmdir$+"adc_daydates.aon",t1$,sdate$,7-dow
            if t9$="E" or (t9$<>"E" and (sfm05a_key.sched_date$>sdate$ or t0$<>sfm05a_key.op_code$))

                TotVect!.addItem(str(OutVect!.size()/(columns+1)))
                blank=fnblank(5)
                OutVect!.addItem(Translate!.getTranslation("AON_TOTALS_FOR_WEEK_ENDING_")+str(fndate$(sdate$)))
                blank=fnblank(4)
                OutVect!.addItem(str(wtotset))
                OutVect!.addItem(str(wtotrun))
                blank=fnblank(2)
				blank=fnblank(14)
                l=l+3
                wtotset=0
                wtotrun=0
            endif
        endif
    endif
    t1$=sfm05a_key.sched_date$
    l1=0
    return

totals: rem --- Totals

    gosub week_end_subtot
    if t0$<>"" and l0<>0 then
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        blank=fnblank(5)
        OutVect!.addItem(Translate!.getTranslation("AON_TOTAL_FOR_OP_CODE_")+t0$)
        blank=fnblank(4)
        OutVect!.addItem(str(totset))
        OutVect!.addItem(str(totrun))
        blank=fnblank(2)
		BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    endif
    totset=0
    totrun=0
    l0=0
    t0$=sfm05a_key.op_code$
    return

init_wo: rem --- Initialize WO

    dim runtim[opnmax],setup[opnmax],actrun[opnmax],actset[opnmax],ops$[opnmax,1]
    opind$=""
    x0=0,now=0,at$="",from$="",settime=0,runt=0,not_found$=""
    read (sfe02a_dev,key=firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,knum="PRIMARY",dom=*next)

    while more
		dim sfe02a$:fattr(sfe02a$)
        read record (sfe02a_dev,end=*break) sfe02a$
		if pos(firm_id$+sfe01a.wo_location$+sfe01a.wo_no$=sfe02a$)<>1 break
        if sfe02a.line_type$="S" then
            opind$=opind$+sfe02a.internal_seq_no$
            ops$[x0,0]=sfe02a.op_code$
            ops$[x0,1]=sfe02a.require_date$
            runtim[x0]=sfm05a.runtime_hrs
            setup[x0]=sfm05a.setup_time
            x0=x0+1
        endif
    wend

rem --- Calculate Actual

    read (sft01a_dev,key=firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
    while more
        read record (sft01a_dev,end=*break) sft01a$
		if pos(firm_id$+sfe01a.wo_location$+sfe01a.wo_no$=sft01a$)<>1 break
        seq$=sft01a.oper_seq_ref$
        cod$=sft01a.op_code$
        while more
            indx=pos(seq$=opind$,op_len)
            if indx<>0 then break
            opind$=opind$+seq$
            ops$[x0,0]=cod$,x0=x0+1
        wend
        indx=int(indx/op_len)
        actset[indx]=actset[indx]+sft01a.setup_time,actrun[indx]=actrun[indx]+sft01a.units
        if now<indx then now=indx
    wend

rem ---- This operation?

rem --- Next line has been remarked out so that this report matches the Dispatch Inquiry form.
rem --- The next line assumed that if more time has been entered against a particular Op Code than it required,
rem --- then it MUST be at the next Op Code. However, because of various factors that could cause an overrun
rem --- at a particular Operation Center, it has been decided that this logic should match the Dipatch Inquiry.
rem --- If your customer needs the original version 6 logic to take place, unremark the next line.
rem    if actset[now]+actrun[now]>setup[now]+runtim[now] then now=now+1
    at$=ops$[now,0]

    thisindx=pos(thisseq$=opind$,op_len)
    if thisindx<>0 then
        thisindx=int(thisindx/op_len)
        xfrom=thisindx-1
        if xfrom<0 then xfrom=0
        from$=ops$[xfrom,0]
        runt=runtim[thisindx]
        settime=setup[thisindx]
    endif
    return

calc_ratio: rem --- Calculate Critical Ratio

    reqsav$=""
    remsav=0
    x=now*op_len+1
    ind=int(x/op_len)
    reqd$=sfm05a_key.sched_date$
    if reqsav$=reqd$ then
        remain=remsav
    else
        reqsav$=reqd$
        call pgmdir$+"sfc_ophours.aon",schedate$,reqd$,remain,sfm05a_key.op_code$,flag$
        if flag$="Y" then
            remain=0
            call pgmdir$+"adc_daydates.aon",schedate$,reqd$,remain
            remain=remain*8
            not_found$="Y"
        endif
        remsav=remain
    endif
    if runt+settime<>0 then
        critr=remain/(runt+settime)
        if critr>999.9 then critr=999.9
        if critr<-999.9 then critr=-999.9
    endif
    return

calc_rem_units: rem --- Calculate Remaining Units

    unitrun=0
    unitset=0
    wopos=pos(sfe01a.wo_no$=wostr$,7+2*umask)
    if wopos<>0 then
        unitrun=num(wostr$(wopos+7,umask))
        unitset=num(wostr$(wopos+7+umask,umask))
        runt=runt-unitrun
        settime=settime-unitset
        if runt>=0 then
            wostr$(wopos+7,umask)=str(0:umask$)
        else
            unitrun=-runt
            wostr$(wopos+7,umask)=str(unitrun:umask$)
            runt=0
        endif
        if settime>=0 then
            wostr$(wopos+7+umask,umask)=str(0:umask$)
        else
            unitset=-unitset,wostr$(wopos+7+umask,umask)=str(unitset:umask$)
            settime=0
        endif
    endif

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend
rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem #include fndate.src

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
      
rem #endinclude fndate.src

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
