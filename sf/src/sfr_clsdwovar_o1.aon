rem --- Closed WO Variance Report - Detail Print
rem --- Program sfr_wovariance_o1 v8.0.0 04Jan2008 (sfr_ob)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:02:17)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error
rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Check & Adjust Masks

        more=1
        while more
            m9=m1*11+m2*2+8
            if m9<=120 break
            if pos(","=m1$)<>0 then
                m1$=m1$(1,pos(","=m1$)-1)+m1$(pos(","=m1$)+1)
                m1=len(m1$)
                continue
            endif
            if pos(","=m2$)<>0 then
                m2$=m2$(1,pos(","=m2$)-1)+m2$(pos(","=m2$)+1)
                m2=len(m2$)
                continue
            endif
            if m9>132 
                if m1>9 then m1$(2,1)=",";continue
                if m2>8 then m2$(2,1)=",";continue
            endif
            break
        wend

rem --- Init Data

        dim j$(m9,"-"),h9$(m1*5+m2,"-"),h7$(m1*5+m2),t[10],u[10],a[10],b[10]
        h9$(1,1)="+"
        h9$(len(h9$),1)="+",h8$=h9$
        h8$(int(len(h8$)/2)-6,12)=Translate!.getTranslation("AON__STANDARDS_")
        h9$(int(len(h9$)/2)-4,8)=Translate!.getTranslation("AON__ACTUAL_")
        h6$=h7$
        h7$(3)=Translate!.getTranslation("AON_OPERATIONS"),h7$(m2+m1*3-7)=Translate!.getTranslation("AON_MAT'LS"),h7$(m2+m1*4-6)=Translate!.getTranslation("AON_SUB'S"),h7$(len(h7$)-5)=Translate!.getTranslation("AON_W.O.")
        h6$(3)=Translate!.getTranslation("AON_HOURS")
        h6$(m2+m1-7)=Translate!.getTranslation("AON_DIRECT"),h6$(m2+m1*2-7)=Translate!.getTranslation("AON_OVRHD"),h6$(m2+m1*3-6)=Translate!.getTranslation("AON_TOTAL"),h6$(m2+m1*4-6)=Translate!.getTranslation("AON_TOTAL"),h6$(len(h6$)-6)=Translate!.getTranslation("AON_TOTAL")

rem --- Additional File Opens

    if period$>=sfs01a.current_per$
        tran01_dev=sft01a_dev;tran02_dev=sft21a_dev;tran03_dev=sft31a_dev
        tran01a_key$=sft01a_key_tpl$
        tran02a_key$=sft21a_key_tpl$
        tran03a_key$=sft31a_key_tpl$
        tran01a$=templates$[14]
        tran02a$=templates$[16]
        tran03a$=templates$[18]
    else
        tran01_dev=sft03a_dev;tran02_dev=sft23a_dev;tran03_dev=sft33a_dev
        tran01a_key$=sft03a_key_tpl$
        tran02a_key$=sft23a_key_tpl$
        tran03a_key$=sft33a_key_tpl$
        tran01a$=templates$[15]
        tran02a$=templates$[17]
        tran03a$=templates$[19]
    endif

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,sfe01a_dev,1,meter_num,status
    
rem --- Init Read

        extractrecord(sfe01a_dev,key=begin_key$,knum=keynum$,dom=*next)

rem --- Main Read
    while more
        dim a[10]
        key_tpl$=key(sfe01a_dev,knum=keynum$,end=*break)
        if pos(firm_id$=key_tpl$)<>1 break

        if ending$<>"" 
            if sequence$="W" and key_tpl.firm_id$+key_tpl.wo_location$+key_tpl.wo_no$>firm_id$+key_tpl.wo_location$+ending$ break
            if sequence$="B" and key_tpl.firm_id$+key_tpl.warehouse_id$+key_tpl.item_id$>firm_id$+ending$ break
            if sequence$="C" and key_tpl.firm_id$+key_tpl.customer_id$>firm_id$+ending$ break
            if sequence$="T" and key_tpl.firm_id$+key_tpl.wo_type$>firm_id$+ending$ break   
        else
            if sequence$="B" and whse$<>"" then if key_tpl.warehouse_id$>whse$ break
        endif

        if sequence$<>"W" then 
            if sequence$="T" data1$=key_tpl.wo_type$
            if sequence$="C" data1$=key_tpl.customer_id$
            if sequence$="B" data1$=key_tpl.item_id$
            if data1$<>t0$ then gosub sub_total
        endif

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        readrecord (sfe01a_dev,key=key_tpl$,knum=keynum$,dom=*continue) sfe01a$
        if sfe01a.wo_status$<>"C" then continue
        if sfe01a.closed_date$<begdate$ then continue
        if sfe01a.closed_date$>enddate$ then continue
        if sfe01a.wo_category$="I" 
            find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=calc_std) ivm01a$
            sfe01a.description_01$=ivm01a.item_desc$(1,min(desc[1],30))
        endif

calc_std: rem --- Calculate Standards

        sfreq_dev=sfe02a_dev
        dim sfreq_key$:sfe02a_key_tpl$
        dim sfreqa$:templates$[9]
  
        while more       
            read (sfreq_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
            rem print @(50,11),'cl',Translate!.getTranslation("AON_STANDARDS"),; rem'd 3/2012 CAH; will Translate!.getTranslation("AON_STANDARDS") need to be in OutVect! somewhere? 
            while more
                sfreq_key$=key(sfreq_dev,end=*break)
                if sfreq_key.firm_id$+sfreq_key.wo_location$+sfreq_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
                read record (sfreq_dev,key=sfreq_key$) sfreqa$
                switch sfreq_dev
                    case sfe02a_dev              
                        a[0]=a[0]+sfreqa.total_time
                        a[1]=a[1]+sfreqa.total_time*sfreqa.direct_rate
                        a[9]=a[9]+sfreqa.tot_std_cost-sfreqa.total_time*sfreqa.direct_rate
                    break
                    case sfe22a_dev
                        a[2]=a[2]+sfreqa.total_cost
                    break
                    case sfe32a_dev
                        a[3]=a[3]+sfreqa.total_cost 
                    break
                swend
            wend
            if sfreq_dev=sfe02a_dev then
                sfreq_dev=sfe22a_dev 
                dim sfreq_key$:sfe22a_key_tpl$
                dim sfreqa$:templates$[10]
                continue
            endif
            if sfreq_dev=sfe22a_dev then
                sfreq_dev=sfe32a_dev
                dim sfreq_key$:sfe32a_key_tpl$
                dim sfreqa$:templates$[11]
                continue
            endif      
            break
        wend

rem --- Calculate Actuals

        sftran_dev=tran01_dev
        dim sftran_key$:tran01a_key$
        dim sftran$:tran01a$

        while more
            read (sftran_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
            rem print @(50,11),'cl',Translate!.getTranslation("AON_ACTUALS"),; rem'd 3/2012 CAH; will Translate!.getTranslation("AON_ACTUALS") need to be in OutVect! somewhere?
            while more
                sftran_key$=key(sftran_dev,end=*break)
                if sftran_key.firm_id$+sftran_key.wo_location$+sftran_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
                if period$<>"" then if sftran_key.trans_date$>enddate$ then break
                read record (sftran_dev,key=sftran_key$) sftran$
                switch sftran_dev
                    case tran01_dev
                        a[4]=a[4]+sftran.units+sftran.setup_time
                        a[5]=a[5]+sftran.units*sftran.direct_rate
                        a[10]=a[10]+sftran.ext_cost-sftran.units*sftran.direct_rate
                    break
                    case tran02_dev
                        a[6]=a[6]+sftran.ext_cost
                    break
                    case tran03_dev
                        a[7]=a[7]+sftran.ext_cost
                    break
                swend
            wend

            if sftran_dev=tran01_dev then 
                sftran_dev=tran02_dev
                dim sftran_key$:tran02a_key$
                dim sftran$:tran02a$
                continue
            endif
            if sftran_dev=tran02_dev then
                sftran_dev=tran03_dev
                dim sftran_key$:tran03a_key$
                dim sftran$:tran03a$
                continue
            endif
            break
        wend 

rem --- Calculate Totals, Variance, etc.

        a0=a[1]+a[2]+a[3]+a[9]
        a1=a[5]+a[6]+a[7]+a[10],a2=a0-a1
        if a0<>0 then a3=(a0-a1)*100/a0 else a3=0
        if sfe01a.wo_category$="I" then 
            x$=sfe01a.item_id$
            x$=x$(1,pos("   "=x$+"   ")-1)
            sfe01a.description_01$=x$+" "+sfe01a.description_01$
        endif

rem --- Print
        if l>l9 then gosub sub_head
        str1$=sfe01a.wo_no$+"  "+sfe01a.wo_type$+"  "+sfe01a.description_01$
        OutVect!.addItem(str1$)
        blank=fnblank(14)
        blank=fnblank(1)
        OutVect!.addItem(str(fnnummask$(a[0],m2$)))
        OutVect!.addItem(str(fnnummask$(a[1],m1$)))
        OutVect!.addItem(str(fnnummask$(a[9],m1$)))
        OutVect!.addItem(str(fnnummask$(a[2],m1$)))
        OutVect!.addItem(str(fnnummask$(a[3],m1$)))
        OutVect!.addItem(str(fnnummask$(a0,m1$)))
        OutVect!.addItem(str(fnnummask$(a[4],m2$)))
        OutVect!.addItem(str(fnnummask$(a[5],m1$)))
        OutVect!.addItem(str(fnnummask$(a[10],m1$)))
        OutVect!.addItem(str(fnnummask$(a[6],m1$)))
        OutVect!.addItem(str(fnnummask$(a[7],m1$)))
        OutVect!.addItem(str(fnnummask$(a1,m1$)))
        OutVect!.addItem(str(fnnummask$(a2,m1$)))
        OutVect!.addItem(str(fnnummask$(a3,"####.00-")))
        
       
        l=l+2
        l0=l0+1
        sfw02a.firm_id$=sfe01a.firm_id$
        sfw02a.wo_location$=sfe01a.wo_location$
        sfw02a.wo_type$=sfe01a.wo_type$
        sfw02a.wo_category$=sfe01a.wo_category$
        find record (sfw02a_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_type$,dom=*next) sfw02a$
        for x=0 to 10
            t[x]=t[x]+a[x]
            u[x]=u[x]+a[x];b[x]=b[x]+a[x]
        next x
        sfw02a.std_hrs=a[0]
        sfw02a.std_ops_tot=a[1]
        sfw02a.std_mat_tot=a[2]
        sfw02a.std_sub_tot=a[3]
        sfw02a.actual_hrs=a[4]
        sfw02a.act_ops_tot=a[5]
        sfw02a.act_mat_tot=a[6]
        sfw02a.act_sub_tot=a[7]  
        sfw02a$=field(sfw02a$)
        write record (sfw02a_dev,key=sfw02a.firm_id$+sfw02a.wo_location$+sfw02a.wo_type$) sfw02a$             
    wend 

done: rem --- End

        t9$="U"
        if sequence$<>"W" then gosub sub_total
        u0=u[1]+u[2]+u[3]+u[9]
        u1=u[5]+u[6]+u[7]+u[10],u2=u0-u1
        if u0<>0 then u3=(u0-u1)*100/u0 else u3=0
        if u[8]<>0 
            u5=u0-(u1-u[8])
            if u0<>0 then u6=(u0-(u1-u[8]))*100/u0 else u6=0
        endif
        blank=fnblank(15)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        OutVect!.addItem(Translate!.getTranslation("AON_REPORT_TOTAL:"))    
        OutVect!.addItem(str(fnnummask$(u[0],m2$)))
        OutVect!.addItem(str(fnnummask$(u[1],m1$)))
        OutVect!.addItem(str(fnnummask$(u[9],m1$)))
        OutVect!.addItem(str(fnnummask$(u[2],m1$)))
        OutVect!.addItem(str(fnnummask$(u[3],m1$)))
        OutVect!.addItem(str(fnnummask$(u0,m1$)))
        OutVect!.addItem(str(fnnummask$(u[4],m2$)))
        OutVect!.addItem(str(fnnummask$(u[5],m1$)))
        OutVect!.addItem(str(fnnummask$(u[10],m1$)))
        OutVect!.addItem(str(fnnummask$(u[6],m1$)))
        OutVect!.addItem(str(fnnummask$(u[7],m1$)))
        OutVect!.addItem(str(fnnummask$(u1,m1$)))
        OutVect!.addItem(str(fnnummask$(u2,m1$)))
        OutVect!.addItem(str(fnnummask$(u3,"####.00-")))

        if u[8]<>0 then 
            blank=fnblank(11)
            OutVect!.addItem(Translate!.getTranslation("AON_CLOSED:_"))
            OutVect!.addItem(str(-u[8]:m1$))
            blank=fnblank(2)
            blank=fnblank(11)
            OutVect!.addItem(Translate!.getTranslation("AON_NET_OPEN:_"))
            OutVect!.addItem(str(u1-u[8]:m1$))
            blank=fnblank(2)
        endif

rem --- Subtotals By Type

        dim c[2,10],t[10],u[10]
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem(Translate!.getTranslation("AON_TOTALS_BY_TYPE:_"))
        blank=fnblank(14)
        blank=fnblank(15)

        read (sfw02a_dev,key=firm_id$,dom=*next)
        while more    
            k5$=key(sfw02a_dev,end=*break)
            if pos(firm_id$=k5$)<>1 then break
            read record (sfw02a_dev) sfw02a$
            dim x0$(30),x1$(g0,"0")
            x0$(6)=Translate!.getTranslation("AON_***_NOT_ON_FILE_***")
            find record (sfm10a_dev,key=firm_id$+"A"+sfw02a.wo_type$,dom=*next) sfm10a$
            x0$(1)=sfm10a.code_desc$
            str1$=sfw02a.wo_type$+"  "+x0$+"  "+str(fnmask$(sfm10a.gl_wip_acct$,g5$))+"  "+str(fnmask$(sfm10a.gl_close_to$,g5$))
            OutVect!.addItem(str1$)
            blank=fnblank(14)
            b0=sfw02a.std_ops_tot+sfw02a.std_mat_tot+sfw02a.std_sub_tot+b[9]
            b1=sfw02a.act_ops_tot+sfw02a.act_mat_tot+sfw02a.act_sub_tot+b[10],b2=b0-b1
            if b0<>0 then 
                b3=(b0-b1)*100/b0 
            else 
                b3=0
            endif
            blank=fnblank(1)
            OutVect!.addItem(str(fnnummask$(sfw02a.std_hrs,m2$)))
            OutVect!.addItem(str(fnnummask$(sfw02a.std_ops_tot,m1$)))
            OutVect!.addItem(str(fnnummask$(b[9],m1$)))
            OutVect!.addItem(str(fnnummask$(sfw02a.std_mat_tot,m1$)))
            OutVect!.addItem(str(fnnummask$(sfw02a.std_sub_tot,m1$)))
            OutVect!.addItem(str(fnnummask$(b0,m1$)))
            OutVect!.addItem(str(fnnummask$(sfw02a.actual_hrs,m2$)))
            OutVect!.addItem(str(fnnummask$(sfw02a.act_ops_tot,m1$)))
            OutVect!.addItem(str(fnnummask$(b[10],m1$)))
            OutVect!.addItem(str(fnnummask$(sfw02a.act_mat_tot,m1$)))
            OutVect!.addItem(str(fnnummask$(sfw02a.act_sub_tot,m1$)))
            OutVect!.addItem(str(fnnummask$(b1,m1$)))
            OutVect!.addItem(str(fnnummask$(b2,m1$)))
            OutVect!.addItem(str(fnnummask$(b3,"####.00-")))


            if b[8]<>0 then 
                blank=fnblank(11)
                OutVect!.addItem(Translate!.getTranslation("AON_CLOSED:_"))
                OutVect!.addItem(str(-b[8]:m1$))
                blank=fnblank(2)
                blank=fnblank(11)
                OutVect!.addItem(Translate!.getTranslation("AON_NET_OPEN:_"))
                OutVect!.addItem(str(b1-b[8]:m1$))
                blank=fnblank(2)
            endif
            l=l+2
            y=pos(sfm10a.wo_category$="INR")-1
            for x=0 to 10
                c[y,x]=c[y,x]+b[x]
                t[x]=t[x]+b[x]
            next x
       wend 

rem --- Report Totals

        t0=t[1]+t[2]+t[3]+t[9]
        t1=t[5]+t[6]+t[7]+t[10],t2=t0-t1
        if t0<>0 then 
            t3=(t0-t1)*100/t0 
        else 
            t3=0
        endif
        blank=fnblank(15)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        OutVect!.addItem(Translate!.getTranslation("AON_REPORT_TOTALS:"))
        OutVect!.addItem(str(fnnummask$(t[0],m2$)))
        OutVect!.addItem(str(fnnummask$(t[1],m1$)))
        OutVect!.addItem(str(fnnummask$(t[9],m1$)))
        OutVect!.addItem(str(fnnummask$(t[2],m1$)))
        OutVect!.addItem(str(fnnummask$(t[3],m1$)))
        OutVect!.addItem(str(fnnummask$(t0,m1$)))
        OutVect!.addItem(str(fnnummask$(t[4],m2$)))
        OutVect!.addItem(str(fnnummask$(t[5],m1$)))
        OutVect!.addItem(str(fnnummask$(t[10],m1$)))
        OutVect!.addItem(str(fnnummask$(t[6],m1$)))
        OutVect!.addItem(str(fnnummask$(t[7],m1$)))
        OutVect!.addItem(str(fnnummask$(t1,m1$)))
        OutVect!.addItem(str(fnnummask$(t2,m1$)))
        OutVect!.addItem(str(fnnummask$(t3,"####.00-")))

        if t[8]<>0 then 
            blank=fnblank(11)
            OutVect!.addItem(Translate!.getTranslation("AON_CLOSED:_"))
            OutVect!.addItem(str(-t[8]:m1$))
            blank=fnblank(2)
            blank=fnblank(11)
            OutVect!.addItem(Translate!.getTranslation("AON_NET_OPEN:_"))
            OutVect!.addItem(str(t1-t[8]:m1$))
            blank=fnblank(2)
        endif
        l=l+3

rem --- Now Subtotal By Category

        blank=fnblank(15)
        blank=fnblank(15)
        blank=fnblank(15)
        OutVect!.addItem(Translate!.getTranslation("AON_TOTALS_BY_CATEGORY:_"))
        blank=fnblank(14)
        blank=fnblank(15)

        for y=0 to 2
            if y=0 then 
                OutVect!.addItem(Translate!.getTranslation("AON_INVENTORY:_"))
                blank=fnblank(14)
            else 
                if y=1 then 
                    OutVect!.addItem(Translate!.getTranslation("AON_SPECIALS:"))
                    blank=fnblank(14)
                else 
                    if y=2 then 
                        OutVect!.addItem(Translate!.getTranslation("AON_RECURRING:"))
                        blank=fnblank(14)
                    endif
                endif
            endif
            c0=c[y,1]+c[y,2]+c[y,3]+c[y,9]
            c1=c[y,5]+c[y,6]+c[y,7]+c[y,10],c2=c0-c1
            if c0<>0 then 
                c3=(c0-c1)*100/c0 
            else 
                c3=0
            endif
            blank=fnblank(1)
            OutVect!.addItem(str(fnnummask$(c[y,0],m2$)))
            OutVect!.addItem(str(fnnummask$(c[y,1],m1$)))
            OutVect!.addItem(str(fnnummask$(c[y,9],m1$)))
            OutVect!.addItem(str(fnnummask$(c[y,2],m1$)))
            OutVect!.addItem(str(fnnummask$(c[y,3],m1$)))
            OutVect!.addItem(str(fnnummask$(c0,m1$)))
            OutVect!.addItem(str(fnnummask$(c[y,4],m2$)))
            OutVect!.addItem(str(fnnummask$(c[y,5],m1$)))
            OutVect!.addItem(str(fnnummask$(c[y,10],m1$)))
            OutVect!.addItem(str(fnnummask$(c[y,6],m1$)))
            OutVect!.addItem(str(fnnummask$(c[y,7],m1$)))
            OutVect!.addItem(str(fnnummask$(c1,m1$)))
            OutVect!.addItem(str(fnnummask$(c2,m1$)))
            OutVect!.addItem(str(fnnummask$(c3,"####.00-")))

            if c[y,8]<>0 then 
                blank=fnblank(11)
                OutVect!.addItem(Translate!.getTranslation("AON_CLOSED:_"))
                OutVect!.addItem(str(-c[y,8]:m1$))
                blank=fnblank(2)
                blank=fnblank(11)
                OutVect!.addItem(Translate!.getTranslation("AON_NET_OPEN:_"))
                OutVect!.addItem(str(c1-c[y,8]:m1$))
                blank=fnblank(2)
            endif
            for x=0 to 10
                u[x]=u[x]+c[y,x]
            next x
        next y

rem --- Report Totals

        u0=u[1]+u[2]+u[3]+u[9]
        u1=u[5]+u[6]+u[7]+u[10],u2=u0-u1
        if u0<>0 then u3=(u0-u1)*100/u0 else u3=0
        blank=fnblank(15)
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem(Translate!.getTranslation("AON_REPORT_TOTAL:"))
        OutVect!.addItem(str(fnnummask$(u[0],m2$)))
        OutVect!.addItem(str(fnnummask$(u[1],m1$)))
        OutVect!.addItem(str(fnnummask$(u[9],m1$)))
        OutVect!.addItem(str(fnnummask$(u[2],m1$)))
        OutVect!.addItem(str(fnnummask$(u[3],m1$)))
        OutVect!.addItem(str(fnnummask$(u0,m1$)))
        OutVect!.addItem(str(fnnummask$(u[4],m2$)))
        OutVect!.addItem(str(fnnummask$(u[5],m1$)))
        OutVect!.addItem(str(fnnummask$(u[10],m1$)))
        OutVect!.addItem(str(fnnummask$(u[6],m1$)))
        OutVect!.addItem(str(fnnummask$(u[7],m1$)))
        OutVect!.addItem(str(fnnummask$(u1,m1$)))
        OutVect!.addItem(str(fnnummask$(u2,m1$)))
        OutVect!.addItem(str(fnnummask$(u3,"####.00-")))

        if u[8]<>0 then 
            blank=fnblank(11)
            OutVect!.addItem(Translate!.getTranslation("AON_CLOSED:_"))
            OutVect!.addItem(str(-u[8]:m1$))
            blank=fnblank(2)
            blank=fnblank(11)
            OutVect!.addItem(Translate!.getTranslation("AON_NET_OPEN:_"))
            OutVect!.addItem(str(u1-u[8]:m1$))
            blank=fnblank(2)
        endif
        goto std_exit


sub_head: rem --- Sub Heading
        switch pos(sequence$="CT")
            case 1
                if t0$="" then 
                    blank=fnblank(15)
                    OutVect!.addItem(h5$)
                    blank=fnblank(14)
                    blank=fnblank(15)
                else
                    OutVect!.addItem(str(fnmask$(t0$(1,c0),c1$))+" "+h5$)
                endif
                l=l+1
                break
            case 2
                blank=fnblank(15)
                OutVect!.addItem(t0$+" "+h5$)
                blank=fnblank(14)
                blank=fnblank(15)
                l=l+3
                break
            case default
                break
        swend
return

sub_total: rem --- First Sub Total 

        if t0$<>"" and l0>1 then 
                if l+2>l9 then gosub sub_head
                t0=t[1]+t[2]+t[3]+t[9]
                t1=t[5]+t[6]+t[7]+t[10],t2=t0-t1
                if t0<>0 then t3=(t0-t1)*100/t0 else t3=0
                blank=fnblank(15)
                TotVect!.addItem(str(OutVect!.size()/(columns+1)))
                if sequence$="T" then 
                    OutVect!.addItem(Translate!.getTranslation("AON_TYPE_")+t0$+Translate!.getTranslation("AON__TOTALS:_"))
                else
                    if sequence$="C" then 
                        OutVect!.addItem(Translate!.getTranslation("AON_CUSTOMER_")+str(fnmask$(t0$(1,c0),c1$))+Translate!.getTranslation("AON__TOTALS:_"))
                    else
                        if sequence$="B" then 
                            OutVect!.addItem(Translate!.getTranslation("AON_BILL_NUMBER_")+cvs(t0$,2)+Translate!.getTranslation("AON__TOTALS:_"))
                        endif
                    endif
                endif
                OutVect!.addItem(str(fnnummask$(t[0],m2$)))
                OutVect!.addItem(str(fnnummask$(t[1],m1$)))
                OutVect!.addItem(str(fnnummask$(t[9],m1$)))
                OutVect!.addItem(str(fnnummask$(t[2],m1$)))
                OutVect!.addItem(str(fnnummask$(t[3],m1$)))
                OutVect!.addItem(str(fnnummask$(t0,m1$)))
                OutVect!.addItem(str(fnnummask$(t[4],m2$)))
                OutVect!.addItem(str(fnnummask$(t[5],m1$)))
                OutVect!.addItem(str(fnnummask$(t[10],m1$)))
                OutVect!.addItem(str(fnnummask$(t[6],m1$)))
                OutVect!.addItem(str(fnnummask$(t[7],m1$)))
                OutVect!.addItem(str(fnnummask$(t1,m1$)))
                OutVect!.addItem(str(fnnummask$(t2,m1$)))
                OutVect!.addItem(str(fnnummask$(t3,"####.00-")))
                blank=fnblank(15)
                l=l+3
        endif
        if t9$<>"" then return

        dim t[10]
        t0$=data1$
        l0=0
        if sequence$="T" then
            dim h5$(20)
            h5$(1)=Translate!.getTranslation("AON_***_NOT_ON_FILE_***")
            find record (sfm10a_dev,key=firm_id$+"A"+t0$,dom=*return) sfm10a$
            h5$=sfm10a.code_desc$
            gosub sub_head
        endif
        if sequence$="C" then
            dim h5$(30)
            h5$(1)=Translate!.getTranslation("AON_***_NOT_ON_FILE_***")
            find record (arm01a_dev,key=firm_id$+t0$,dom=*return) arm01a$
            h5$=arm01a.customer_name$
            gosub sub_head
        endif
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnnummask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem " --- Numeric Mask with Overflow"

    def fnnummask$(q,q1$)
        let q2$=str(q:q1$)
        if len(q2$)>len(q1$) then let q2$=fill(len(q1$),"*")
        return q2$
    fnend
rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
