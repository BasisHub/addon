rem --- Bottleneck Analysis Report
rem --- Program sfr_tb v8.0.0 07Jan2008 (sfr_tb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/07/2008 10:05:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$


rem --- Init Data

    headings=4
    dim t[2],x0$(30),headings$[headings],w$[9]
    if opfrom$="" then h4$="The First Op Code thru " else h4$="From Op Code "+opfrom$+" thru "
    if opthru$="" then h4$=h4$+"The Last Op Code " else   h4$=h4$+"Op Code "+opthru$+" "
    if datefrom$="" then h4$=h4$+"From The First Date thru " else h4$=h4$+"From "+fndate$(datefrom$)+" thru "
    if datethru$="" then h4$=h4$+"The Last Date" else h4$=h4$+fndate$(datethru$)
    h5$="Based On Utilization Percent Of "+str(utilperc:"##0.0")
    headings$[0]=h1$
    headings$[1]=h2$
    headings$[2]=h4$
    headings$[3]=h5$
    headings$[4]="[HEADER]"
    h0=132,h=0,when$=sysinfo.system_date$,clock$=""
    more=1

rem --- Headings and print positions

 
    dim columns$[16,10]
    columns = 16
    columns$[0,0]="Pri^Code",                   columns$[0,1]="C",columns$[0,2]="10"
    columns$[1,0]="W.O.^Number",                columns$[1,1]="C",columns$[1,2]="6"
    columns$[2,0]="Seq",                        columns$[2,1]="C",columns$[2,2]="4"
    columns$[3,0]="Cat",                        columns$[3,1]="C",columns$[3,2]="4"
    columns$[4,0]="Description^Customer",       columns$[4,1]="C",columns$[4,2]="15"
    columns$[5,0]="Est^Start",                  columns$[5,1]="C",columns$[5,2]="6"
    columns$[6,0]="Act^Start",                  columns$[6,1]="C",columns$[6,2]="6"
    columns$[7,0]="Est^Complete",               columns$[7,1]="C",columns$[7,2]="8"
    columns$[8,0]="Schd^Mthd",                  columns$[8,1]="C",columns$[8,2]="4"
    columns$[9,0]="Now At^From",                columns$[9,1]="C",columns$[9,2]="6"
    columns$[10,0]="Move^Queue",                columns$[10,1]="N",columns$[10,2]="6",columns$[10,3]=m3$
    columns$[11,0]="Setup^Time",                columns$[11,1]="N",columns$[11,2]="6",columns$[11,3]=m1$,columns$[11,10]="T"
    columns$[12,0]="Run^Time",                  columns$[12,1]="N",columns$[12,2]="6",columns$[12,3]=m1$,columns$[12,10]="T"
    columns$[13,0]="Total^Time",                columns$[13,1]="N",columns$[13,2]="6",columns$[13,3]=m1$,columns$[13,10]="T"
    columns$[14,0]="Avail^Time",                columns$[14,1]="N",columns$[14,2]="6",columns$[14,3]=m1$,columns$[14,10]="T"
    columns$[15,0]="Diff",                      columns$[15,1]="N",columns$[15,2]="6",columns$[15,3]=m1$,columns$[15,10]="T"
    columns$[16,0]="Pct",                       columns$[16,1]="N",columns$[16,2]="6",columns$[16,3]=m2$,columns$[16,10]="T"

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfm05_dev,1,meter_num,ignore_status
    print 'sb',@(column+13,11),"Printing:",'sf',
    column1=column+23

rem --- Init Read

    read (sfm05_dev,key=firm_id$+opfrom$,dom=*next)

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSCHDL","PRIMARY",sfm05_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01_key_tpl$,rd_table_chans$[all],status$

rem --- Main Read
    done_flag=0
    dim sfm05a_key$:sfm05_key_tpl$
    while more
        sfm05a_key$=key(sfm05_dev,end=done)
        if pos(firm_id$=sfm05a_key$)<>1 then
            done_flag=1
            break
        endif
        if opthru$<>"" and sfm05a_key.op_code$>opthru$ then 
            done_flag = 1
            break
        endif
        if datefrom$<>"" and sfm05a_key.sched_date$<datefrom$ then 
            read (sfm05_dev,key=sfm05a_key.firm_id$+sfm05a_key.op_code$+datefrom$,dom=*continue)
        endif    
        if datethru$<>"" and sfm05a_key.sched_date$>datethru$ then
            read (sfm05_dev,key=sfm05a_key.firm_id$+sfm05a_key.op_code$+sfm05a_key.sched_date$+$ff$,dom=*continue)
        endif
        read record (sfm05_dev,key=sfm05a_key$) sfm05a$

rem --- Breaks

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        if opcode$="" then 
            opcode$=sfm05a.op_code$
            transdate$=sfm05a.sched_date$
        endif
        if opcode$<>sfm05a.op_code$ then 
            done_flag=0
            gosub print_data 
            l=l9+1
        endif
        if transdate$<>sfm05a.sched_date$ then 
            done_flag=0
            gosub print_data
        endif

rem --- Additional Reads
        find record (sfe01_dev,key=firm_id$+"  "+sfm05a.wo_no$,dom=*continue) sfe01a$
        if pos(sfe01a.wo_status$="QC")>0 then 
            read (sfm05_dev,key=sfm05a.firm_id$+sfm05a.op_code$+sfm05a.sched_date$+sfm05a.wo_no$+sfm05a.op_seq$,dom=*continue)
        endif


rem --- Include?

        gosub find_current_location
        if opind$="" then continue
        if sfm05a.op_seq$<now_seq$ then continue

rem --- Add It Here

        if num(sfe01a.priority$)=0 then sfe01a.priority$="9"
        w$[num(sfe01a.priority$)]=w$[num(sfe01a.priority$)]+(sfm05a.op_code$+sfm05a.sched_date$+sfm05a.wo_no$+sfm05a.op_seq$)
        t0=t0+sfm05a.setup_time+sfm05a.runtime_hrs
    wend

    if done_flag=0 then
print_data: rem --- Print Data
        while more
            if t0=0 then break
            year$=transdate$(1,4)
            month$=transdate$(5,2)
            find record (sfm04_dev,key=firm_id$+opcode$+year$+month$,dom=*next) sfm04a$
            s_day=num(transdate$(7,2))
            if num(FIELD(sfm04a$,"hrs_per_day_"+str(s_day:"00")))<0 then 
                s_hrs=0 
            else 
                s_hrs=num(FIELD(sfm04a$,"hrs_per_day_"+str(s_day:"00")))
            endif
            if s_hrs>0 and 100*t0/s_hrs<utilperc then break
            if l+5>l9 then l=l9+1
            gosub sub_heading
            dim sfm05a1$:templates$[8]
            for x=1 to 9
                if len(w$[x])=0 then continue
                print @(column1,11),w$[x](1,3)," ",fndate$(w$[x](4,3)),
                for y=1 to len(w$[x]) step 21
                    read record (sfm05_dev,key=firm_id$+w$[x](y,21)) sfm05a1$
                    read record (sfe01_dev,key=firm_id$+"  "+sfm05a1.wo_no$,dom=*break) sfe01a$
                    if sfs01a.ar_interface$="Y" then 
                        read record (arm01_dev,key=firm_id$+sfe01a.customer_id$,dom=*next) arm01a$
                    endif    
                    if l+2>l9 then gosub sub_heading
                    OutVect!.addItem(sfe01a.priority$)
                    OutVect!.addItem(sfm05a1.wo_no$)
                    OutVect!.addItem(sfm05a1.op_seq$)
                    OutVect!.addItem(sfe01a.wo_category$)
                   
                    if sfe01a.wo_category$="I" then 
                        OutVect!.addItem(sfe01a.item_id$)
                    else 
                        dim desc$(20)
                        desc$(1)=sfe01a.description$
                        OutVect!.addItem(desc$)
                    endif

                    OutVect!.addItem(str(fndate$(sfe01a.eststt_date$)))
                    OutVect!.addItem(str(fndate$(sfe01a.act_st_date$)))
                    OutVect!.addItem(str(fndate$(sfe01a.estcmp_date$)))
                    OutVect!.addItem(sfe01a.sched_flag$)
                    OutVect!.addItem(now_op$)
                    OutVect!.addItem(str(sfm05a1.move_time))
                    OutVect!.addItem(str(sfm05a1.setup_time))
                    OutVect!.addItem(str(sfm05a1.runtime_hrs))
                    OutVect!.addItem(str(sfm05a1.setup_time+sfm05a1.runtime_hrs))
                    blank=fnblank(3)

                    blank=fnblank(4)
                    OutVect!.addItem(cvs(arm01a.customer_name$,3))
                    blank=fnblank(4)
                    OutVect!.addItem(from_op$)
                    OutVect!.addItem(str(sfm05a1.queue_time))
                    blank=fnblank(6)

                    l=l+2
                    t[1]=t[1]+sfm05a1.setup_time
                    t[2]=t[2]+sfm05a1.runtime_hrs
                next y
            next x

rem --- End of Day

            if l+3>l9 then gosub sub_heading
            blank=fnblank(17)
            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            OutVect!.addItem("Total For Date:")
            OutVect!.addItem(str(fndate$(transdate$)))
            blank=fnblank(9)
            OutVect!.addItem(str(t[1]))
            OutVect!.addItem(str(t[2]))
            OutVect!.addItem(str(t[1]+t[2]))
            OutVect!.addItem(str(s_hrs))
            OutVect!.addItem(str(s_hrs-(t[1]+t[2])))

            if s_hrs=0 then 
                OutVect!.addItem("*****")
            else 
                OutVect!.addItem(str(100*(t[1]+t[2])/s_hrs))
            endif
            blank=fnblank(17)
            blank=fnblank(17)
            l=l+3
            break
        wend

rem --- Reset for next day

        dim w$[9],t[2]
        opcode$=sfm05a.op_code$
        transdate$=sfm05a.sched_date$,t0=0
    return
    endif

done: rem --- End Of File Here

    a0$=sfm05a.firm_id$+sfm05a.op_code$+sfm05a.sched_date$+sfm05a.wo_no$+sfm05a.op_seq$
    if len(a0$)=0 then 
        gosub main_header
        goto std_exit
    endif
    done_flag=0
    gosub print_data
    goto std_exit


main_header: rem --- Main Header

    l=headings+1
    if sfs01a.bm_interface$="Y" then find record (bmm08_dev,key=firm_id$+opcode$,dom=*next) bmm08a$
    if sfs01a.bm_interface$<>"Y" then find record (sfm02_dev,key=firm_id$+opcode$,dom=*next) sfm02a$
    subheading$=opcode$+" "+cvs(bmm08a.code_desc$,2)
    BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
    HdrVect!.addItem(subheading$)
    l=l+3
    return



sub_heading: rem --- Sub Heading
    if l+3>l9 then gosub main_header
    OutVect!.addItem("Date: "+str(fndate$(transdate$)))
    blank=fnblank(16)
    l=l+3
    return

find_current_location: rem --- Find Current Location of W.O.

    opind$=""
    x=0,from_op$="",now_op$=""
    dim ops$[no_ops,1],ops[no_ops,3]
    read (sfe02_dev,key=sfm05a.firm_id$+"  "+sfm05a.wo_no$+"A",dom=*next)

rem --- Read Loop for Standards
    dim sfe02a_key$:sfe02_key_tpl$
    while more
        sfe02a_key$=key(sfe02_dev,end=*break)
        if pos(sfm05a.firm_id$+"  "+sfm05a.wo_no$=sfe02a_key$)<>1 then break
        read record (sfe02_dev,key=sfe02a_key$) sfe02a$
        if sfe02a.total_time=0 continue; rem "Must have hours to work!
        opind$=opind$+sfe02a.op_seq$
        ops$[x,0]=sfe02a.op_code$,ops$[x,1]=sfe02a.require_date$,ops[x,0]=sfe02a.total_time,ops[x,2]=sfe02a.setup_time
        x=x+1
    wend
    read (sft01_dev,key=sfm05a.firm_id$+"  "+sfm05a.wo_no$,dom=*next)

rem --- Read Loop for Actuals
    dim sft01a_key$:sft01_key_tpl$
    while more
        sft01a_key$=key(sft01_dev,end=*break)
        if pos((sfm05a.firm_id$+"  "+sfm05a.wo_no$)=sft01a_key$)<>1 then break
        read record (sft01_dev,key=sft01a_key$) sft01a$
        x=pos(sft01a.op_seq$=opind$,3)
        if x=0 then break
        x=int(x/3)
        ops[x,1]=ops[x,1]+sft01a.units+sft01a.unit_cost
        ops[x,3]=ops[x,3]+sft01a.complete_qty
    wend

rem --- Setup Current Op Code

    now=0
    for x=0 to len(opind$)/3-1
        if ops[x,1]>0 then now=x
        if ops[x,3]>=sfe01a.sch_prod_qty then now=x+1
    next x
    if ops[now,1]>=ops[now,0] then now=now+1
    if now>len(opind$)/3-1 then return
    now_seq$=opind$(now*3+1,3)

rem --- Now setup NOW_OP$ and FROM_OP$

    now_op$=ops$[now,0]
    if now>0 then  
        from_op$=ops$[now-1,0] 
    else 
        from_op$=ops$[now,0]
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- fnblank: Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")
    def fna$(q$,q2$)=str(mod((asc(q$)-32)*pos(" "<>q2$(2,1)),100):"00")

rem " --- Convert 2-Char Year to 21st Century 2-Char Year" 
    def fnyy_yy21$(q1$)
        q9=10,q9=num(stbl("+y2k_upper_limit",err=*next),err=*next)
        if num(q1$(1,2),err=8133)<q9 then q1$(1,1)=chr(int(num(q1$(1,2))/10)+65)
        return q1$
    fnend
rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
