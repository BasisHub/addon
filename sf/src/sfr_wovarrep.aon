rem --- Work Order Variance Report - Parameter Entry
rem --- Program sfr_ha v8.0.0 04Jan2008 (sfr_ha)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:33:11)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

		num_files=21
		dim open_tables$[1:num_files], open_opts$[1:num_files], open_chans$[1:num_files], open_tpls$[1:num_files]
        
		open_tables$[1] ="ARM_CUSTMAST",open_opts$[1] = "OTA"; rem "arm-01"
		open_tables$[2] ="ARS_PARAMS",  open_opts$[2] = "OTA"; rem "ars_params"
		open_tables$[3] ="GLS_CALENDAR",  open_opts$[3] = "OTA"
		open_tables$[4] ="IVM_ITEMMAST",open_opts$[4] = "OTA"; rem "ivm-01"
		open_tables$[5] ="IVC_PRODCODE",open_opts$[5] = "OTA"; rem "ivc_prodcode"
		open_tables$[6] ="IVS_PARAMS",  open_opts$[6] = "OTA"; rem "ivs_params"
		open_tables$[7] ="SFE_WOMASTR", open_opts$[7] = "OTA"; rem "sfe-01"
		open_tables$[8] ="SFC_WOTYPECD",open_opts$[8] = "OTA"; rem "sfm-10"
		open_tables$[9] ="SFS_PARAMS",  open_opts$[9] = "OTA"; rem "sfs_params"
		open_tables$[10]="SFT_OPNOPRTR",open_opts$[10] = "OTA"; rem "sft-01"
		open_tables$[11]="SFT_CLSOPRTR",open_opts$[11] = "OTA"; rem "sft-03"
		open_tables$[12]="SFT_OPNMATTR",open_opts$[12] = "OTA"; rem "sft-21"
		open_tables$[13]="SFT_CLSMATTR",open_opts$[13] = "OTA"; rem "sft-23"
		open_tables$[14]="SFT_OPNSUBTR",open_opts$[14] = "OTA"; rem "sft-31"
		open_tables$[15]="SFT_CLSSUBTR",open_opts$[15] = "OTA"; rem "sft-33"
rem  		open_tables$[16]="IVC_WHSECODE",open_opts$[16] = "OTA"; rem "ivm-10c"
		open_tables$[17]="SFE_WOOPRTN", open_opts$[17] = "OTA"; rem "sfe-02"
		open_tables$[18]="SFE_WOMATL",  open_opts$[18] = "OTA"; rem "sfe-22"
		open_tables$[19]="SFE_WOSUBCNT",open_opts$[19] = "OTA"; rem "sfe-32"
		open_tables$[20]="SFW_VRNCXTYP",open_opts$[20] = "OTA"; rem "sfw-02"				
		open_tables$[21]="GLM_ACCT",open_opts$[21] = "OTA"				
						
		gosub open_tables
		
        arm01a_dev = num(open_chans$[1])
        ars01a_dev = num(open_chans$[2])
        gls_calendar_dev = num(open_chans$[3])
        ivm01a_dev = num(open_chans$[4])
        ivm10a_dev = num(open_chans$[5])
        ivs01a_dev = num(open_chans$[6])
        sfe01a_dev = num(open_chans$[7])
        sfm10a_dev = num(open_chans$[8])
        sfs01a_dev = num(open_chans$[9])
        sft01a_dev = num(open_chans$[10])
        sft03a_dev = num(open_chans$[11])
        sft21a_dev = num(open_chans$[12])
        sft23a_dev = num(open_chans$[13])
        sft31a_dev = num(open_chans$[14])
        sft33a_dev = num(open_chans$[15])
rem 		ivm10c_dev = num(open_chans$[16])
		sfe02a_dev = num(open_chans$[17])
		sfe22a_dev = num(open_chans$[18])
		sfe32a_dev = num(open_chans$[19])
		sfw02a_dev = num(open_chans$[20])
		glm01a_dev = num(open_chans$[21])

rem --- Clear the work file

        call pgmdir$+"adc_clearfile.aon",num(open_chans$[20])
		
rem --- Dimension string templates

		dim arm01a$:open_tpls$[1]
		dim ars01a$:open_tpls$[2]
		dim gls_calendar$:open_tpls$[3]
		dim ivm01a$:open_tpls$[4]
		dim ivm10a$:open_tpls$[5]
		dim ivs01a$:open_tpls$[6]
		dim sfe01a$:open_tpls$[7]
		dim sfm10a$:open_tpls$[8]
		dim sfs01a$:open_tpls$[9]
		sft01_tpls$=open_tpls$[10]; dim sft01a$:sft01_tpls$; rem Save template for next o'lay
		sft03_tpls$=open_tpls$[11]; dim sft03a$:sft03_tpls$; rem Save template for next o'lay
		sft21_tpls$=open_tpls$[12]; dim sft21a$:sft21_tpls$; rem Save template for next o'lay
		sft23_tpls$=open_tpls$[13]; dim sft23a$:sft23_tpls$; rem Save template for next o'lay
		sft31_tpls$=open_tpls$[14]; dim sft31a$:sft31_tpls$; rem Save template for next o'lay
		sft33_tpls$=open_tpls$[15]; dim sft33a$:sft33_tpls$; rem Save template for next o'lay
rem 		dim ivm10c$:open_tpls$[16]
		sfe02_tpls$=open_tpls$[17]; dim sfe02a$:sfe02_tpls$; rem Save template for next o'lay
		sfe22_tpls$=open_tpls$[18]; dim sfe22a$:sfe22_tpls$; rem Save template for next o'lay
		sfe32_tpls$=open_tpls$[19]; dim sfe32a$:sfe32_tpls$; rem Save template for next o'lay
		sfw02_tpls$=open_tpls$[20]; dim sfw02a$:sfw02_tpls$; rem Save template for next o'lay
		dim glm01a$:open_tpls$[21]

rem --- Assign form input values to local variables

        sequence$=Option!.getOptionData("report_seq")
        whse$=Option!.getOptionData("warehouse_id")
        wofrom$=Option!.getOptionData("wo_no_1")
        wothru$=Option!.getOptionData("wo_no_2")
        wotfrom$=Option!.getOptionData("wo_type_1")
        wotthru$=Option!.getOptionData("wo_type_2")
        billfrom$=Option!.getOptionData("bill_no_1")
        billthru$=Option!.getOptionData("bill_no_2")
        custfrom$=Option!.getOptionData("customer_ID_1")
        custthru$=Option!.getOptionData("customer_ID_2")
        as_of_date$=Option!.getOptionData("as_of_date")
		wo_open$=Option!.getOptionData("open")
        wo_closed$=Option!.getOptionData("closed")
        wostatus$=""
        if wo_open$="Y" then wostatus$=wostatus$+"O"
        if wo_closed$="Y" then wostatus$=wostatus$+"C"
        min_variance=num(Option!.getOptionData("min_variance"))
        includecost$=Option!.getOptionData("inc_cost_ovrun")

rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        sfs01a_key$=firm_id$+"SF00"
        find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$
        find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
        bm$=sfs01a.bm_interface$
        find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
        find record (gls_calendar_dev,key=firm_id$+sfs01a.current_year$,dom=std_missing_params) gls_calendar$
        op$=sfs01a.ar_interface$
        if op$<>"N"
            find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
            call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",cust_mask$,0,custmask_len
            c0=custmask_len
        endif

        call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",g0$,0,acct_length
        g0=acct_length
        g1=max(10,g0)
        i9=ivs01a.item_id_len
		
rem --- Init Data

        h0=132
        headings=5,h=0,when$=sysinfo.system_date$,clock$=""
        dim headings$[headings]
        headings$[0]=n1$
        headings$[1]=n3$
        l9=59
        l=l9+1,r1$="N"
        dim j$(80,"-"),j1$(40," ")
        dim desc[3]
        m0=len(m0$)
        m1=len(m1$)
        m2=len(m2$)
        p0=num(sfs01a.current_per$)
        p1=num(sfs01a.current_year$)
        p0=p0-1
        if p0=0 then p0=num(gls_calendar.total_pers$),p1=p1-1; rem "Find LAST PERIOD end date
        call pgmdir$+"adc_perioddates.aon",p0,p1,v0$,g9$,table_chans$[all],status
        if status then goto std_exit
        sfs01a.current_per$=""
        sfs01a.current_year$=""
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$)

rem --- Retrieve key templates

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","PRIMARY",sfe01a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","AO_TYP_LOC_WO",sfe01a_key_alt1$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","AO_CST_ORD_LINE",sfe01a_key_alt2$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","AO_WH_ITM_LOC_WO",sfe01a_key_alt3$,rd_table_chans$[all],status$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",sfe22a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32a_key_tpl$,rd_table_chans$[all],status$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft21a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft31a_key_tpl$,rd_table_chans$[all],status$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSOPRTR","PRIMARY",sft03a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft23a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft33a_key_tpl$,rd_table_chans$[all],status$

done: rem --- Overlay

                run pgmdir$+"sfr_wovarrep_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

	return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
