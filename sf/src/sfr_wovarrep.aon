rem --- Work Order Variance Report - Parameter Entry
rem --- Program sfr_ha v8.0.0 04Jan2008 (sfr_ha)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:33:11)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=19,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="arm-01",ids$[1]="ARM_CUSTMAST"
        files$[2]="ARS_PARAMS",ids$[2]="ARS_PARAMS"
        files$[3]="GLS_PARAMS",ids$[3]="GLS_PARAMS"
        files$[4]="ivm-01",ids$[4]="IVM_ITEMMAST"
        files$[5]="IVC_WHSECODE",ids$[5]="IVC_WHSECODE"
        files$[6]="IVS_PARAMS",ids$[6]="IVS_PARAMS"
        files$[7]="sfe-01",ids$[7]="SFE_WOMASTR"
        files$[8]="sfe-02",ids$[8]="SFE_WOOPRTN"
        files$[9]="sfe-22",ids$[9]="SFE_WOMATL"
        files$[10]="sfe-32",ids$[10]="SFE_WOSUBCNT"
        files$[11]="sfm-10",ids$[11]="SFC_WOTYPECD"
        files$[12]="sfs_params",ids$[12]="SFS_PARAMS"
        files$[13]="sft-01",ids$[13]="SFT_OPNOPRTR"
        files$[14]="sft-03",ids$[14]="SFT_CLSOPRTR"
        files$[15]="sft-21",ids$[15]="SFT_OPNMATTR"
        files$[16]="sft-23",ids$[16]="SFT_CLSMATTR"
        files$[17]="sft-31",ids$[17]="SFT_OPNSUBTR"
        files$[18]="sft-33",ids$[18]="SFT_CLSSUBTR"
        files$[19]="sfw-02",ids$[19]="SFW_VRNCXTYP"

        options$[19]="C"

        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        arm01a_dev=channels[1]
        ars01a_dev=channels[2]
        gls01a_dev=channels[3]
        ivm01a_dev=channels[4]
        ivm10a_dev=channels[5]
        ivs01a_dev=channels[6]
        sfe01a_dev=channels[7]
        sfe02a_dev=channels[8]
        sfe22a_dev=channels[9]
        sfe32a_dev=channels[10]
        sfm10a_dev=channels[11]
        sfs01a_dev=channels[12]
        sft01a_dev=channels[13]
        sft03a_dev=channels[14]
        sft21a_dev=channels[15]
        sft23a_dev=channels[16]
        sft31a_dev=channels[17]
        sft33a_dev=channels[18]
        sfw02a_dev=channels[19]

rem --- Dimension string templates

    dim arm01a$:templates$[1],ars01a$:templates$[2],gls01a$:templates$[3],
:       ivm01a$:templates$[4],ivm10a$:templates$[5],ivs01a$:templates$[6],
:       sfe01a$:templates$[7],sfe02a$:templates$[8],sfe22a$:templates$[9],
:       sfe32a$:templates$[10],sfm10a$:templates$[11],sfs01a$:templates$[12],
:       sft01a$:templates$[13],sft03a$:templates$[14],sft21a$:templates$[15],
:       sft23a$:templates$[16],sft31a$:templates$[17],sft33a$:templates$[18],
:       sfw02a$:templates$[19]

rem --- Assign form input values to local variables

        sequence$=Option!.getOptionData("Report_Seq")
        whse$=Option!.getOptionData("warehouse_id")
        wofrom$=Option!.getOptionData("wo_no_1")
        wothru$=Option!.getOptionData("wo_no_2")
        wotfrom$=Option!.getOptionData("wo_type_1")
        wotthru$=Option!.getOptionData("wo_type_2")
        billfrom$=Option!.getOptionData("Bill_No_1")
        billthru$=Option!.getOptionData("Bill_No_2")
        custfrom$=Option!.getOptionData("Customer_ID_1")
        custthru$=Option!.getOptionData("Customer_ID_2")
        wo_open$=Option!.getOptionData("open")
        wo_closed$=Option!.getOptionData("closed")
        wostatus$=""
        if wo_open$="Y" then wostatus$=wostatus$+"O"
        if wo_closed$="Y" then wostatus$=wostatus$+"C"
        variance$=Option!.getOptionData("Min_Variance")
        includecost$=Option!.getOptionData("Inc_Cost_Ovrun")

rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        sfs01a_key$=firm_id$+"SF00"
        find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

        n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$
        find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
        bm$=sfs01a.bm_interface$
        find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
        find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
        op$=sfs01a.ar_interface$
        if op$<>"N"
            find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
            c0=num(ars01a.customer_size$)
            c1=len(ars01a.customer_input$)
        endif

        g0=num(gls01a.acct_length$)
        g1=num(gls01a.max_acct_len$)
        i9=ivs01a.item_id_len
rem --- Init Data

        h0=132
        headings=5,h=0,when$=sysinfo.system_date$,clock$=""
        dim headings$[headings]
        headings$[0]=n1$
        headings$[1]=n3$
        l9=59
        l=l9+1,r1$="N"
        dim j$(80,"-"),j1$(40," ")
        dim desc[3]
        m0=len(m0$)
        m1=len(m1$)
        m2=len(m2$)
        p0=num(sfs01a.current_per$)
        p1=num(sfs01a.current_year$)
        p0=p0-1
        if p0=0 then p0=num(gls01a.total_pers$),p1=p1-1; rem "Find LAST PERIOD end date
        call pgmdir$+"adc_perioddates.aon",gls01a_dev,p0,p1,v0$,g9$,status
        sfs01a.current_per$=""
        sfs01a.current_year$=""
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$)

rem --- Retrieve key templates

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","PRIMARY",sfe01a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","ALT_KEY_01",sfe01a_key_alt1$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","ALT_KEY_02",sfe01a_key_alt2$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","ALT_KEY_03",sfe01a_key_alt3$,rd_table_chans$[all],status$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",sfe22a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32a_key_tpl$,rd_table_chans$[all],status$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft21a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft31a_key_tpl$,rd_table_chans$[all],status$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSOPRTR","PRIMARY",sft03a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft23a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft33a_key_tpl$,rd_table_chans$[all],status$

rem --- Options

        action=pos(sequence$="WBCT")-1
        switch action
            case 0
                h3$="Work Order Sequence"
                beging$=wofrom$
                ending$=wothru$
                dim key_tpl$:sfe01a_key_tpl$
                begin_key$=firm_id$+sfe01a.wo_location$+beginning$
                keynum=0
                break
            case 1
                h3$="Bill Number Sequence"
                beging$=billfrom$
                ending$=billthru$
                dim key_tpl$:sfe01a_key_alt3$
                begin_key$=firm_id$+whse$+beging$
                keynum=3
                break
            case 2
                h3$="Customer Sequence"
                beging$=custfrom$
                ending$=custthru$
                dim key_tpl$:sfe01a_key_alt2$
                begin_key$=firm_id$+beging$
                keynum=2
                break
            case 3
                h3$="Work Order Type Sequence"
                beging$=wotfrom$
                ending$=wotthru$
                dim key_tpl$:sfe01a_key_alt1$
                begin_key$=firm_id$+beging$
                keynum=1
                break
            case default
                break
        swend


done: rem --- Overlay

                run pgmdir$+"sfr_wovarrep_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
