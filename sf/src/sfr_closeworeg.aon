rem --- Closed Work Order Summary Register
rem --- Program sfr_ka v8.0.0 04Jan2008 (sfr_ka)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:36:00)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=20,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="ars_params",ids$[1]="ARS_PARAMS"
        files$[2]="gls_params",ids$[2]="GLS_PARAMS"
        files$[3]="glt-04",ids$[3]="GLE_DAILYDETAIL"
        files$[4]="ivm-01",ids$[4]="IVM_ITEMMAST"
        files$[5]="ivm-02",ids$[5]="IVM_ITEMWHSE"
        files$[6]="ivs_params",ids$[6]="IVS_PARAMS"
        files$[7]="sfe-01",ids$[7]="SFE_WOMASTR"
        files$[8]="sfe-02",ids$[8]="SFE_WOOPRTN"
        files$[9]="sfe_clsdtrans",ids$[9]="SFE_CLSDTRANS"
        files$[10]="sfe-22",ids$[10]="SFE_WOMATL"
        files$[11]="sfe-32",ids$[11]="SFE_WOSUBCNT"
        files$[12]="sfm-10",ids$[12]="SFC_WOTYPECD"
        files$[13]="sfs_params",ids$[13]="SFS_PARAMS"
        files$[14]="sft-01",ids$[14]="SFT_OPNOPRTR"
        files$[15]="sft-21",ids$[15]="SFT_OPNMATTR"
        files$[16]="sft-31",ids$[16]="SFT_OPNSUBTR"
        files$[17]="sfw-07",ids$[17]="SFW_CLSWOXTY",options$[17]="C"
        call pgmdir$+"adc_fileopen.aon",action,begfile,17,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit

        ars01a_dev=channels[1]
        gls01a_dev=channels[2]
        glt04a_dev=channels[3]
        ivm01a_dev=channels[4]
        ivm02a_dev=channels[5]
        ivs01a_dev=channels[6]
        sfe01a_dev=channels[7]
        sfe02a_dev=channels[8]
        sfe04b_dev=channels[9]
        sfe22a_dev=channels[10]
        sfe32a_dev=channels[11]
        sfm10a_dev=channels[12]
        sfs01a_dev=channels[13]
        sft01a_dev=channels[14]
        sft21a_dev=channels[15]
        sft31a_dev=channels[16]
        sfw07a_dev=channels[17]

rem --- Dimension string templates

    dim ars01a$:templates$[1],gls01a$:templates$[2],glt04a$:templates$[3],
:       ivm01a$:templates$[4],ivm02a$:templates$[5],ivs01a$:templates$[6],
:       sfe01a$:templates$[7],sfe02a$:templates$[8],sfe04b$:templates$[9],
:       sfe22a$:templates$[10],sfe32a$:templates$[11],sfm10a$:templates$[12],
:       sfs01a$:templates$[13],sft01a$:templates$[14],sft21a$:templates$[15],
:       sft31a$:templates$[16]

rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        sfs01a_key$=firm_id$+"SF00"
        find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

        dim p[2],g[4],desc[3]
        n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$,source$=pgm(-2)
        find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
        find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
        find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$

        g[0]=num(gls01a.total_pers$)
        g[1]=num(gls01a.current_per$)
        g[2]=num(gls01a.current_year$)
        g[3]=num(gls01a.acct_length$)

        g[2]=num(gls01a.current_year$)
        p[0]=num(sfs01a.empl_no_len$)
        p[1]=num(sfs01a.current_per$),p[2]=num(sfs01a.current_year$)
        p1=num(ivs01a.precision$)
        r9$="N",ivs01_precision=p1
        if sfs01a.ar_interface$="Y"
            call pgmdir$+"adc_application.aon","AR",info$[all]
            if info$[20]="Y"
                find record (ars01a_dev,key=firm_id$+"AR00",dom=label1) ars01a$
                r9$=ars01a.dist_by_item$
            endif
        endif

label1:

        gl$="N"
        status=0
        call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,n2$,glw11a$,gl$,status
        if status then goto std_exit
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$)

rem --- Initialize Data

        dim headings$[2],j$(80,"-"),j0$(10,"0"),u[7]
        m1$=sfs01a.amount_mask$
        m2$=sfs01a.unit_mask$
        rem m3$=sfs01a.rate_mask$,m3=len(m3$); rate mask is empty in sfs-01
        m3$=m2$
        fm1$=m1$
        fm2$=m2$,fm3$=m3$; rem "Save full masks"
        headings$[0]=n1$
        headings$[1]=n3$
        h0=132
        headings=2,h=0,when$=sysinfo.system_date$,clock$="",l9=59,l=l9+1
        m0=len(m0$)
        rem m1=len(m1$),m2=len(m2$),m3=len(m3$),g5=len(g5$)+2
        m1=8,m2=7,m3=6
        if g5<10 then let g5=10
        more=1
        if h0-fnw(m1,m2,m3)>16
            while more
                xm1=m1-1
                xm2=m2-1,xm3=m3-1
                call pgmdir$+"adc_sizemask.aon",m1$,m1,8,xm1
                if h0-fnw(m1,m2,m3)>16 then break
                call pgmdir$+"adc_sizemask.aon",m2$,m2,7,xm2
                if h0-fnw(m1,m2,m3)>16 then break
                call pgmdir$+"adc_sizemask.aon",m3$,m3,6,xm3
                if h0-fnw(m1,m2,m3)>16 then break
            wend
        endif

rem --- Retrieve key templates

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_CLSDTRANS","PRIMARY",sfe04b_key_tpl$,rd_table_chans$[all],status$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",sfe22a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32a_key_tpl$,rd_table_chans$[all],status$

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft21a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft31a_key_tpl$,rd_table_chans$[all],status$

rem --- Additional headings

        fm1=len(fm1$)-m1
        fm2=len(fm2$)-m2,fm3=len(fm3$)-m3
        dim m9$(m1*4,"-"),m8$(g5*3,"-"),j9$(m1*8,"-")
        m9$(1,1)="+"
        m9$(len(m9$))="+",m8$(1,1)="+",m8$(len(m8$))="+"
        m9$(int(len(m9$)/2)-5,10)=" Variance "
        m9=fnw(m1,m2,m3)
        m8$(int(len(m8$)/2)-5,10)=" Variance "

rem --- Column Headings
        dim columns$[18,10]
        columns = 18
            columns$[0,0]="WO No.",         columns$[0,1]="C",columns$[0,2]="10"
            columns$[1,0]="Type",           columns$[1,1]="C",columns$[1,2]="4"
            columns$[2,0]="Ct",             columns$[2,1]="C",columns$[2,2]="3"
            columns$[3,0]="Close^Dt",       columns$[3,1]="C",columns$[3,2]="8"
            columns$[4,0]="Product",        columns$[4,1]="C",columns$[4,2]="20"
            columns$[5,0]="Qty",            columns$[5,1]="N",columns$[5,2]="5",columns$[5,3]=m2$
            columns$[6,0]="Prior^Close",    columns$[6,1]="N",columns$[6,2]="5",columns$[6,3]=m2$
            columns$[7,0]="This^Close",     columns$[7,1]="N",columns$[7,2]="5",columns$[7,3]=m2$
            columns$[8,0]="Still^Open",     columns$[8,1]="N",columns$[8,2]="5",columns$[8,3]=m2$
            columns$[9,0]="Cmp?",           columns$[9,1]="C",columns$[9,2]="5"
            columns$[10,0]="Unit^Cost",     columns$[10,1]="N",columns$[10,2]="5",columns$[10,3]=m2$
            columns$[11,0]="Total^Actual Cost",columns$[11,1]="N",columns$[11,2]="5",columns$[11,3]=m1$,columns$[11,10]="T"
            columns$[12,0]="Prior^Close",   columns$[12,1]="N",columns$[12,2]="5",columns$[12,3]=m1$,columns$[12,10]="T"
            columns$[13,0]="Current^WIP",   columns$[13,1]="N",columns$[13,2]="7",columns$[13,3]=m1$,columns$[13,10]="T"
            columns$[14,0]="Closed^Value",  columns$[14,1]="N",columns$[14,2]="7",columns$[14,3]=m1$,columns$[14,10]="T"
            columns$[15,0]="+------^Direct",        columns$[15,1]="N",columns$[15,2]="5",columns$[15,3]=m1$,columns$[15,10]="T"
            columns$[16,0]="--Variance---^Overhead",      columns$[16,1]="N",columns$[16,2]="9",columns$[16,3]=m1$,columns$[16,10]="T"
            columns$[17,0]="----------^Matl's",        columns$[17,1]="N",columns$[17,2]="7",columns$[17,3]=m1$,columns$[17,10]="T"
            columns$[18,0]="-------+^Subs",          columns$[18,1]="N",columns$[18,2]="5",columns$[18,3]=m1$,columns$[18,10]="T"


rem --- Additional File Opens
        if r9$="Y" then
            files$[18]="arc_distcode",ids$[18]="ARC_DISTCODE"
        endif
        if gl$="Y" then 
            files$[19]="glm-01",ids$[19]="GLM_ACCT"
            files$[20]=glw11a$,ids$[20]="GLW_DAILYDETAIL",options$[20]="CL"
        endif
        call pgmdir$+"adc_fileopen.aon",action,18,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        arm10d_dev=channels[18],glm01_dev=channels[19],glw11_dev=channels[20]
        dim arm10d$:templates$[18],glm01a$:templates$[19],glw11a$:templates$[20]

rem --- Options

        msg_id$="AON_RUN_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message
        if msg_opt$<>"Y" then goto std_exit

rem --- Final Initializations

        call pgmdir$+"adc_progress.aon","N","","","","",0,sfe04b_dev,1,meter_num,ignore_status
    
rem --- Init Read

        precision ivs01_precision

rem --- Main Read

    dim sfe04b_key$:sfe04b_key_tpl$
    while more

        sfe04b_key$=key(sfe04b_dev,end=done)
        if sfe04b_key.firm_id$<>firm_id$ then break
        read (sfe04b_dev,key=sfe04b_key$)

rem --- Breaks

        read record (sfe01a_dev,key=sfe04b_key.firm_id$+sfe04b_key.wo_location$+sfe04b_key.wo_no$,dom=*continue) sfe01a$
        if sfe01a.wo_category$="R" then continue
        if sfe01a.wo_category$="I"
            find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=label2) ivm01a$
            sfe01a.description_01$=ivm01a.item_desc$(1,min(desc[1],30))
        endif

label2:
     
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,ignore_status
        dim b[4],c[4],t[7]

rem --- Additional Reads
    
        dim sfw07a$:templates$[17]
        sfw07a.firm_id$=firm_id$
        sfw07a.wo_type$=sfe01a.wo_type$
        dim y1$(100,"0")
        find record (sfw07a_dev,key=sfw07a.firm_id$+sfw07a.wo_type$,dom=*next) sfw07a$
        find record (sfm10a_dev,key=firm_id$+"A"+sfw07a.wo_type$,dom=label3) sfm10a$
        y1$=sfm10a.gl_wip_acct$+sfm10a.gl_close_to$+sfm10a.gl_dir_lab$+sfm10a.gl_ovh_lab$+sfm10a.gl_pur_acct$
        y1$=y1$+sfm10a.gl_lab_var$+sfm10a.gl_ovh_var$+sfm10a.gl_mat_var$+sfm10a.gl_sub_var$
        
label3:

        while more

            if sfe01a.wo_category$<>"I" then break
            if r9$<>"Y"
                find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=*break) ivm01a$
                sfm10a.gl_close_to$=ivm01a.gl_inv_acct$
                break
            else
                find record (ivm02a_dev,key=firm_id$+sfe01a.warehouse_id$+sfe01a.item_id$,dom=*break) ivm02a$
                find record (arm10d_dev,key=firm_id$+"D"+ivm02a.ar_dist_code$,dom=*break) arm10d$
                sfm10a.gl_close_to$=arm10d.gl_inv_acct$
            endif
            break
        wend

    rem --- Calculate Standards

        sfreq_dev=sfe02a_dev
        dim sfreq_key$:sfe02a_key_tpl$
        dim sfreq$:templates$[8]
        record_id$="record_id_a"
        while more
            read (sfreq_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
            while more
                sfreq_key$=key(sfreq_dev,end=*break)
                if sfreq_key.firm_id$+sfreq_key.wo_location$+sfreq_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
                read record (sfreq_dev,key=sfreq_key$) sfreq$
                x=pos(field(sfreq$,record_id$)="BC")+1
                if x<=1
                    b[1]=b[1]+sfreq.total_time*sfreq.direct_rate
                    b[4]=b[4]+sfreq.tot_std_cost-sfreq.total_time*sfreq.direct_rate; rem "Split Direct & OH
                else
                    let b[x]=b[x]+sfreq.tot_std_cost
                endif
                b[0]=b[0]+sfreq.tot_std_cost
            wend

            if sfreq_dev=sfe02_dev
                sfreq_dev=sfe22a_dev
                dim sfreq_key$:sfe22a_key_tpl$
                dim sfreq$:templates$[10]
                record_id$="record_id_b"
                continue
            endif
            if sfreq_dev=sfe22a_dev
                sfreq_dev=sfe32a_dev
                dim sfreq_key$:sfe32a_key_tpl$
                dim sfreq$:templates$[11]
                record_id$="record_id_c"
                continue
            endif
            break
        wend

rem --- Calculate Actuals

        sftran_dev=sft01a_dev
        dim sftran_key$:sft01a_key_tpl$
        dim sftran$:templates$[14]
        record_id$="record_id_o"
        while more
            read (sftran_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
            while more
                sftran_key$=key(sftran_dev,end=*break)
                if sftran_key.firm_id$+sftran_key.wo_location$+sftran_key.wo_no$<>sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$ then break
                read record (sftran_dev,key=sftran_key$) sftran$
                x=pos(field(sftran$,record_id$)="MS")+1
                if x<=1
                    c[1]=c[1]+sftran.units*sftran.direct_rate
                    c[4]=c[4]+sftran.ext_cost-sftran.units*sftran.direct_rate; rem "Split Direct & OH
                else
                     let c[x]=c[x]+sftran.ext_cost
                endif
                c[0]=c[0]+sftran.ext_cost
            wend

            if sftran_dev=sft01a_dev
                sftran_dev=sft21a_dev
                dim sftran_key$:sft21a_key_tpl$
                dim sftran$:templates$[15]
                record_id$="record_id_m"
                continue
            endif

            if sftran_dev=sft21a_dev
                sftran_dev=sft31a_dev
                dim sftran_key$:sft31a_key_tpl$
                dim sftran$:templates$[16]
                record_id$="record_id_s"
                continue
            endif  
            break
        wend

rem --- Calculate Close Value, Variances, etc.

        precision 2
        t[0]=c[0]*1
        t[1]=sfe01a.cls_cst_todt*1,t[2]=t[0]-t[1],t[3]=sfe01a.cls_inp_qty*sfe01a.closed_cost
        if sfe01a.complete_flg$="Y" then let t0=0 else let t0=sfe01a.sch_prod_qty-(sfe01a.qty_cls_todt+sfe01a.cls_inp_qty)
        if sfe01a.complete_flg$<>"N"
            if sfm10a.stdact_flag$<>"A"
                if !(sfe01a.wo_category$<>"I" and (sfe01a.sch_prod_qty=sfe01a.qty_cls_todt+sfe01a.cls_inp_qty or b[0]=0 or sfe01a.recalc_flag$="N"))
                    precision ivs01_precision

rem --- Pro-Rate Standards If Needed

                    if sfe01a.wo_category$<>"I" then if sfe01a.sch_prod_qty<>0 then let y0=b[0]*(sfe01a.qty_cls_todt+sfe01a.cls_inp_qty)/
:                   sfe01a.sch_prod_qty else let y0=0 else let y0=sfe01a.cls_inp_qty*sfe01a.closed_cost+sfe01a.cls_cst_todt
                    if y0<>b[0]
                        if b[0]<>0
                            b[1]=b[1]*y0/b[0]
                            b[2]=b[2]*y0/b[0]
                            b[3]=b[3]*y0/b[0]
                        else
                            let b[1]=0,b[2]=0,b[3]=0
                        endif
                        b[4]=y0-(b[1]+b[2]+b[3])
                    endif
                else
                     let y0=sfe01a.cls_inp_qty*sfe01a.closed_cost+sfe01a.cls_cst_todt
                endif

rem --- Now Calculate Variances
                precision 2
                t[4]=round(b[1])-round(c[1])
                t[5]=round(b[2])-round(c[2]),t[6]=round(b[3])-round(c[3])
                t[0]=t[0]*1
                t[1]=t[1]*1,t[2]=t[0]-t[1],t[3]=sfe01a.cls_inp_qty*sfe01a.closed_cost
                t[7]=round(y0)-t[0]-(t[4]+t[5]+t[6]); rem "All left overs in OH Vnce
            else
                 let t[3]=t[2]
            endif
        endif

        dim x1$(30)
        if sfe01a.wo_category$="I" then 
            let x1$(1)=sfe01a.item_id$,x1$(1)=x1$(1,pos("   "=x1$+"   ")-1)+" "+sfe01a.description_01$ 
        else 
            let x1$=sfe01a.description_01$
        endif
        precision ivs01_precision

rem --- Print

        OutVect!.addItem(sfe01a.wo_no$)
        OutVect!.addItem(sfe01a.wo_type$)
        OutVect!.addItem(sfe01a.wo_category$)
        OutVect!.addItem(fndate$(sfe01a.cls_inp_date$))
        OutVect!.addItem(x1$)
        OutVect!.addItem(str(sfe01a.sch_prod_qty))
        OutVect!.addItem(str(sfe01a.qty_cls_todt$))
        OutVect!.addItem(str(sfe01a.cls_inp_qty))
        OutVect!.addItem(str(t0))
        OutVect!.addItem(str(sfe01a.complete_flg$))
        OutVect!.addItem(str(sfe01a.closed_cost))
        OutVect!.addItem(str(t[0]))
        OutVect!.addItem(str(t[1]))
        OutVect!.addItem(str(t[2]))
        OutVect!.addItem(str(t[3]))
        OutVect!.addItem(str(t[4]))
        OutVect!.addItem(str(t[7]))
        OutVect!.addItem(str(t[5]))
        OutVect!.addItem(str(t[6]))       

        for x=0 to 7
            u[x]=u[x]+t[x]
        next x

rem --- Sort By Type

        sfw07a.firm_id$=firm_id$
        sfw07a.wo_type$=sfe01a.wo_type$
        find record (sfw07a_dev,key=sfw07a.firm_id$+sfw07a.wo_type$,dom=*next) sfw07a$
        sfw07a.tot_act_cost=sfw07a.tot_act_cost+t[0]
        sfw07a.pri_cls_amt=sfw07a.pri_cls_amt+t[1]
        sfw07a.tot_wip_amt=sfw07a.tot_wip_amt+t[2]
        sfw07a.tot_clsd_amt=sfw07a.tot_clsd_amt+t[3]
        sfw07a.tot_dir_var=sfw07a.tot_dir_var+t[4]
        sfw07a.tot_mat_var=sfw07a.tot_mat_var+t[5]
        sfw07a.tot_sub_var=sfw07a.tot_sub_var+t[6]
        sfw07a.tot_ovhd_var=sfw07a.tot_ovhd_var+t[7]
        sfw07a$=field(sfw07a$)
        write record (sfw07a_dev,key=sfw07a.firm_id$+sfw07a.wo_type$) sfw07a$

rem --- Sort By G/L

        if sfe01a.complete_flg$<>"Y" then let t[2]=t[3]
        for x=2 to 7
            if t[x]=0 then continue
            if x<4 then let y=(x-2)*10+1 else if x=4 then let y=51 else if x=7 then let y=61 else let y=x*10+21
            if x<>3 then let t[x]=-t[x]
            account$=y1$(y,10)
            gldate$=sfe01a.cls_inp_date$,amount=t[x],units=0
            memo$=sfe01a.description_01$
            ref1$="WO "+sfe01a.wo_no$,ref2$="Whse "+sfe01a.warehouse_id$
            ref3$="Type "+sfe01a.wo_type$
            gosub glrecap
        next x

    wend

done: rem --- End

         xwk=fnblank(19)
         TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
         xwk=fnblank(4)
         OutVect!.addItem("Report Totals: ")
         xwk=fnblank(6)
         OutVect!.addItem(str(u[0]))
         xwk=fnblank(1)
         OutVect!.addItem(str(u[2]))
         xwk=fnblank(1)
         OutVect!.addItem(str(u[4]))
         xwk=fnblank(1)
         OutVect!.addItem(str(u[5]))
         xwk=fnblank(1)
         xwk=fnblank(12)
         OutVect!.addItem(str(u[1]))
         xwk=fnblank(1)
         OutVect!.addItem(str(u[3]))
         xwk=fnblank(1)
         OutVect!.addItem(str(u[7]))
         xwk=fnblank(1)
         OutVect!.addItem(str(u[6]))

rem --- Now Print By Type

        dim u[7]
        read (sfw07a_dev,key=firm_id$,dom=*next)
rem        xwk=fnblank(19)
        xwk=fnblank(4)
        OutVect!.addItem("Summary By Work Order Type")
        xwk=fnblank(14)

        while more
            k$=key(sfw07a_dev,end=*break)
            if pos(firm_id$=k$)<>1 then break
            read record (sfw07a_dev,key=k$) sfw07a$
            dim x0$(30),x1$(50,"0"); let x0$(6)="*** Not On File ***"
            find record (sfm10a_dev,key=firm_id$+"A"+sfw07a.wo_type$,dom=*next) sfm10a$
            xwk=fnblank(4)
            OutVect!.addItem(sfw07a.wo_type$+" "+sfw07a.firm_id$+sfm10a.code_desc$)
            xwk=fnblank(8)
            OutVect!.addItem(str(sfw07a.tot_wip_amt))
            OutVect!.addItem(str(sfw07a.tot_clsd_amt))
            OutVect!.addItem(str(sfw07a.tot_dir_var))
            OutVect!.addItem(str(sfw07a.tot_ovhd_var))
            OutVect!.addItem(str(sfw07a.tot_mat_var))
            OutVect!.addItem(str(sfw07a.tot_sub_var))

            u[2]=u[2]+sfw07a.tot_wip_amt
            u[3]=u[3]+sfw07a.tot_clsd_amt
            u[4]=u[4]+sfw07a.tot_dir_var
            u[5]=u[5]+sfw07a.tot_mat_var
            u[6]=u[6]+sfw07a.tot_sub_var
            u[7]=u[7]+sfw07a.tot_ovhd_var

        wend

rem --- Report Totals Again

        xwk=fnblank(19)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk=fnblank(4)
        OutVect!.addItem("Report Totals: ")
        xwk=fnblank(8)
        OutVect!.addItem(str(u[2]))
        xwk=fnblank(1)
        OutVect!.addItem(str(u[4]))
        xwk=fnblank(1)
        OutVect!.addItem(str(u[5]))
        xwk=fnblank(1)
        xwk=fnblank(14)
        OutVect!.addItem(str(u[3]))
        xwk=fnblank(1)
        OutVect!.addItem(str(u[7]))
        xwk=fnblank(1)
        OutVect!.addItem(str(u[6]))

rem --- Run next overlay

        update$="sfu_closeworeg.aon"
        width=h0,page=h
        overlay$=update$
        if gl$="Y" then overlay$=pgmdir$+"glr_recap_DO.aon"
        out_action$="PRT-PDF"
        next_overlay$=overlay$
        goto std_exit

glrecap: rem --- Standard G/L Recap Routine

    if gl$="Y"
        call pgmdir$+"glc_glpost.aon",glm01a_dev,glw11a_dev,glt14a_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
    endif
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnw(q1,q2,q3)=q1*8+q2*4+q3+5

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
