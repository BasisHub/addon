rem --- Work Order Work In Process Conversion Register - Print
rem --- Program sfx_bb v8.0.0 17Jan2008 (sfx_bb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/17/2008 02:06:53)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=5,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="ivm-01",ids$[1]="IVM_ITEMMAST"
        files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
        files$[3]="sfe-01",ids$[3]="SFE_WOMASTR"
        files$[4]="sfe-05",ids$[4]="SFE_WOCONVRN"
        files$[5]="sfs_params",ids$[5]="SFS_PARAMS"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        ivm01_dev=channels[1]
        ivs01a_dev=channels[2]
        sfe01_dev=channels[3]
        sfe05_dev=channels[4]
        sfs01a_dev=channels[5]

rem --- Dimension string templates

        dim ivm01a$:templates$[1],ivs01a$:templates$[2],sfe01a$:templates$[3],
:       sfe05a$:templates$[4],sfs01a$:templates$[5]

rem --- Retrieve parameter records

        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        sfs01a_key$=firm_id$+"SF00"
        find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Init Data

        dim t[5]
        more=1

rem ---  column heading

        dim columns$[7,10]
            columns=7
            columns$[0,0]="WO #",                  columns$[0,1]="C",columns$[0,2]="10"
            columns$[1,0]="Item",                  columns$[1,1]="C",columns$[1,2]="10"
            columns$[2,0]="Description",           columns$[2,1]="C",columns$[2,2]="25"
            columns$[3,0]="Hours",                 columns$[3,1]="N",columns$[3,2]="10",columns$[3,3]=m1$,columns$[3,10]="T"
            columns$[4,0]="Labor",                 columns$[4,1]="N",columns$[4,2]="10",columns$[4,3]=m2$,columns$[4,10]="T"
            columns$[5,0]="Mat'ls",                columns$[5,1]="N",columns$[5,2]="10",columns$[5,3]=m2$,columns$[5,10]="T"
            columns$[6,0]="Sub's",                 columns$[6,1]="N",columns$[6,2]="10",columns$[6,3]=m2$,columns$[6,10]="T"
            columns$[7,0]="Total",                 columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$,columns$[7,10]="T"

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",8,sfe05_dev,1,meter_num,ignore_status
    
rem --- Init Read

        read (sfe05_dev,key=firm_id$,dom=*next)

rem --- Main Read

    while more
        k$=key(sfe05_dev,end=*break)
        if pos(firm_id$=k$)<>1 then break

rem --- Breaks

        read record (sfe05_dev,key=k$) sfe05a$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        read record (sfe01_dev,key=sfe05a.firm_id$+sfe05a.wo_location$+sfe05a.wo_no$,dom=*continue) sfe01a$
        if sfe01a.wo_category$="I" then 
            find record (ivm01_dev,key=firm_id$+sfe01a.item_id$,dom=print_data) ivm01a$
            dim item_desc$(30)
            item_desc$(1)=ivm01a.item_desc$
            sfe01a.description_01$=item_desc$
        endif

rem --- Print

print_data:

        OutVect!.addItem(sfe05a.wo_no$)
        OutVect!.addItem(sfe01a.item_id$)
        OutVect!.addItem(sfe01a.description_01$)
        OutVect!.addItem(str(sfe05a.hrs:m1$))
        OutVect!.addItem(str(sfe05a.act_ops_tot:m2$))
        OutVect!.addItem(str(sfe05a.act_mat_tot:m2$))
        OutVect!.addItem(str(sfe05a.act_sub_tot:m2$))
        OutVect!.addItem(str(sfe05a.act_ops_tot+sfe05a.act_mat_tot+sfe05a.act_sub_tot:m2$)) 
        sfe05_field$=fattr(sfe05a$,"")
        sfe05_field$=sfe05_field$(pos("hrs"=cvs(sfe05_field$,8)))
        for x=0 to 5
            xfield$=sfe05_field$(1,pos($0A$=sfe05_field$)-1)
            t[x]=t[x]+num(FIELD(sfe05a$,xfield$))
            sfe05_field$=sfe05_field$(pos($0A$=sfe05_field$)+1)
        next x
        l=l+1
    wend

done: rem --- End
     
        xwk=fnblank(8)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk=fnblank(2)
        OutVect!.addItem("Report Totals:")
        OutVect!.addItem(str(t[0]:m2$))
        OutVect!.addItem(str(t[3]:m1$))
        OutVect!.addItem(str(t[4]:m1$))
        OutVect!.addItem(str(t[5]:m1$))
        OutVect!.addItem(str(t[3]+t[4]+t[5]:m1$))

        out_action$="PRT-PDF"
        next_overlay$=pgmdir$+"sfx_woregupdt.aon"
        goto std_exit


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

     call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
   run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
