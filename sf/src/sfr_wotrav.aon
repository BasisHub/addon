rem --- Work Order Traveler Print - Setup
rem --- Program sfr_wotrav.aon v8.0.0 04Jan2008 (sfr_aa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:01:31)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- This lead-in is one of the four that use the Jasper SFHardCopy.prc
rem --- The four reports are Traveler, Closed WO Detail Rpt,
rem --- WO Detail Rpt (menu item), WO Hard Copy (an option within WO Entry)
rem --- The four are similar in that they have to pass the same params to 
rem --- the SPROC, but the options on each report differ

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl
    use ::java.util.HashMap::HashMap

    use ::sys/prog/bao_utilities.bbj::BarUtils
	
	params! = new java.util.HashMap()
		
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 50; rem -50 keeps it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 50
 
    setesc std_error
    seterr std_error

rem --- Use statements and Declares

    use ::ado_func.src::func
    use ::ado_pdf.src::PDFHelper
    use ::sys/prog/bao_option.bbj::Option

    declare Option option!

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Set document Directory

    docdir$=""
    docdir$=stbl("+DOC_DIR_PDF",err=*next)
    mkdir docdir$,err=*next

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
    user_id$=sysinfo.user_id$
    proc_date$=date(jul(num(sysinfo.system_date$(1,4)),num(sysinfo.system_date$(5,2)),num(sysinfo.system_date$(7,2))):stbl("+DATE_MASK"))
    firm_id$=sysinfo.firm_id$
    firm_name$=sysinfo.firm_name$

rem --- Open/Lock files

    num_files=8
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="SFS_PARAMS",   open_opts$[1]="OTA"
    open_tables$[2]="APS_PARAMS",   open_opts$[2]="OTA"
    open_tables$[3]="ARS_PARAMS",   open_opts$[3]="OTA"
    open_tables$[4]="GLS_CALENDAR",   open_opts$[4]="OTA"
    open_tables$[5]="IVS_PARAMS",   open_opts$[5]="OTA"
rem    open_tables$[6]="PRS_PARAMS",   open_opts$[6]="OTA"
	
    open_tables$[7]="SFE_WOMASTR", open_opts$[7]="OTA[2_]"; rem sfe-01
	open_tables$[8]="SFE_OPENEDWO",open_opts$[8]="OTA"; rem sfe-04a
	
    gosub open_tables

	rem --- Assignments so parameters can be tested in lead-in program
	
    sfs_params_dev=num(open_chans$[1])
    aps_params_dev=num(open_chans$[2])
    ars_params_dev=num(open_chans$[3])
    gls_calendar_dev=num(open_chans$[4])	
    ivs_params_dev=num(open_chans$[5])
rem    prs_params_dev=num(open_chans$[6])

    sfe04a_dev=num(open_chans$[8])
	
    dim sfs_params$:open_tpls$[1]
    dim aps_params$:open_tpls$[2]
    dim ars_params$:open_tpls$[3]
    dim gls_calendar$:open_tpls$[4]
    dim ivs_params$:open_tpls$[5]
rem    dim prs_params$:open_tpls$[6]
	
	dim sfe01a$:open_tpls$[7]	
    dim sfe04a$:open_tpls$[8]
	
rem --- Close extra channel of sfe-01 after getting sfe01 template

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    
	open_tables$[1]="SFE_WOMASTR",  open_opts$[1]="CX[2_]"; rem sfe-01
	
    gosub open_tables	

rem --- Assign non-jasper O/E form values to local variables

    restart$=option!.getOptionData("restart"); rem From O/E
    wo_no$=option!.getOptionData("wo_no"); rem From O/E
	
rem --- Assign needed jasper params 

	report_type$="T"; rem M = WO Detail Rpt from *M*enu
					  rem T = *T*raveler
					  rem E = Detail Rpt from WO *E*ntry
					  rem C = *C*losed WO Detail Rpt
	wo_location$=sfe01a.wo_location$; rem Setting the len per how it's templated, so not hardcoded
	
	report_seq$="W"
 	wo_no_1$=wo_no$; rem If Restart? then start w/keyed-in WO
 	wo_no_2$=""
 	wo_type_1$=""
 	wo_type_2$=""
 	warehouse_id$=""
 	bill_no_1$=""
 	bill_no_2$=""
 	customer_id_1$=""
 	customer_id_2$=""	

 	wo_open$="Y"
 	wo_closed$="Y"
 	wo_planned$="Y"
 	wo_quoted$="Y"
 	wostatus$="OCPQ"; rem Status doesn't matter. All recs in SFE_OPENEDWO print

 	include_image$="Y"
    include_image$=option!.getOptionData("include_image"); rem From O/E
	include_standards$="Y"
	include_costsummary$="N"
	include_comments$="Y"
	include_transactions$="N"
	trans_datefrom$=""
	trans_datethru$=""

    transtype$=""
	
rem --- Add to params!		

	params!.put("REPORT_TYPE",report_type$); REM "Specifies leadin pgm
	
	params!.put("REPORT_SEQ",report_seq$)
	params!.put("WO_NO_1",wo_no_1$)
	params!.put("WO_NO_2",wo_no_2$)
	params!.put("WO_TYPE_1",wo_type_1$)
	params!.put("WO_TYPE_2",wo_type_2$)
	params!.put("CUSTOMER_ID_1",customer_id_1$)
	params!.put("CUSTOMER_ID_2",customer_id_2$)	
	params!.put("WAREHOUSE_ID",warehouse_id$)
	params!.put("BILL_NO_1",bill_no_1$)
	params!.put("BILL_NO_2",bill_no_2$)	
	
	params!.put("WOSTATUS",wostatus$)
	params!.put("WO_LOCATION",wo_location$)

    params!.put("INCLUDE_IMAGE",include_image$)
	params!.put("INCLUDE_STANDARDS",include_standards$)
	params!.put("INCLUDE_COSTSUMMARY",include_costsummary$)
	params!.put("INCLUDE_COMMENTS",include_comments$)
	params!.put("INCLUDE_TRANSACTIONS",include_transactions$)
	params!.put("TRANS_DATEFROM",trans_datefrom$)
	params!.put("TRANS_DATETHRU",trans_datethru$)
    params!.put("TRANSTYPE",transtype$)

    params!.put("STATUS_OPEN",Translate!.getTranslation("AON_OPEN2"))
    params!.put("STATUS_PLANNED",Translate!.getTranslation("AON_PLANNED2"))
    params!.put("STATUS_CLOSED",Translate!.getTranslation("AON_CLOSED2"))
    params!.put("STATUS_QUOTED",Translate!.getTranslation("AON_QUOTED2"))
    params!.put("STATUS_REQ",Translate!.getTranslation("AON_REQ"))
    params!.put("STATUS_PO",Translate!.getTranslation("AON_PO"))
    params!.put("STATUS_RCPT",Translate!.getTranslation("AON_RCPT"))
    params!.put("STATUS_NONE",Translate!.getTranslation("AON_NONE"))

rem --- Parameters (confirm params aren't missing, so no error in subsequent pgms)

    bm$=""
    op$=""
    po$=""
    pr$=""
    find record (sfs_params_dev,key=firm_id$+"SF00",dom=std_missing_params) sfs_params$
    bm$=sfs_params$.bm_interface$
    op$=sfs_params$.ar_interface$
    po$=sfs_params$.po_interface$
    pr$=sfs_params$.pr_interface$

    find record (gls_calendar_dev,key=firm_id$+sfs_params.current_year$,dom=std_missing_params) gls_calendar$
	
    if op$="Y" then
        find record (ars_params_dev,key=firm_id$+"AR00",dom=std_missing_params) ars_params$
    endif
    if po$="Y" then
        find record (aps_params_dev,key=firm_id$+"AP00",dom=std_missing_params) aps_params$
    endif
    if pr$="Y" then
        num_files=1
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="PRS_PARAMS",   open_opts$[1]="OTA"
        gosub open_tables
        prs_params_dev=num(open_chans$[1])
        dim prs_params$:open_tpls$[1]
        find record (prs_params_dev,key=firm_id$+"PR00",dom=std_missing_params) prs_params$
    endif

    find record (ivs_params_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs_params$

rem --- Add masks to params!

	call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","C","",msk$,0,0
	masks$="iv_cost_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",msk$,0,0
	masks$=masks$+"cust_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AP","I","",msk$,0,0
	masks$=masks$+"vendor_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","AD","U","",msk$,0,0
	masks$=masks$+"ad_units_mask^"+msk$+"|"
    call stbl("+DIR_PGM")+"adc_getmask.aon","","IV","I","",ivIMask$,0,0
    masks$=masks$+"iv_item_mask^"+ivIMask$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","H","",msk$,0,0
	masks$=masks$+"sf_hours_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","R","",msk$,0,0
	masks$=masks$+"sf_rate_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","%","",msk$,0,0
	masks$=masks$+"sf_pct_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","A","",msk$,0,0
	masks$=masks$+"sf_amt_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","U","",msk$,0,0
	masks$=masks$+"sf_units_mask^"+msk$+"|"
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","C","",msk$,0,0
	masks$=masks$+"sf_cost_mask^"+msk$+"|"	
	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","M","",msk$,0,0
	masks$=masks$+"sf_matlfact_mask^"+msk$+"|"	
	
	if pr$="Y" 
		call stbl("+DIR_PGM")+"adc_getmask.aon","","PR","I","",msk$,0,0
		masks$=masks$+"employee_mask^"+msk$+"|"	
	else
		call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","I","",msk$,0,0
		masks$=masks$+"employee_mask^"+msk$+"|"		
	endif
	
	params!.put("MASKS",masks$)
		
rem --- Init Data

Rem --- Find end date of SF's PREVIOUS period

    sf_prevper_enddate$=""
	
	sf_prevper=num(sfs_params.current_per$)-1
    sf_prevper_yr=num(sfs_params.current_year$)
	if sf_prevper=0 then
		sf_prevper=num(gls_calendar.total_pers$)
		sf_prevper_yr=sf_prevper_yr-1
	endif
		
    call pgmdir$+"adc_perioddates.aon",sf_prevper,sf_prevper_yr,begdate$,sf_prevper_enddate$,table_chans$[all],status
    if status then goto std_exit
    sfs_params.current_per$=""
    sfs_params.current_year$=""
	
	params!.put("SF_PREVPER_ENDDATE",sf_prevper_enddate$)

rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_OPENEDWO","PRIMARY",sfe04a_key_tpl$,rd_table_chans$[all],status$

rem --- Check For Any Travelers to Print

    dim sfe04a_key$:sfe04a_key_tpl$
    read (sfe04a_dev,key=firm_id$,dom=*next)
    sfe04a_key$=key(sfe04a_dev,end=no_travelers)
    if sfe04a_key.firm_id$+sfe04a_key.wo_location$<>firm_id$+wo_location$ then 
no_travelers:
        msg_id$="SF_NO_TRAVELERS"
        gosub disp_message
        goto std_exit
    endif

rem --- Set additional params

	params!.put("REPORT_NAME",sysinfo.task_desc$) 
    params!.put("FIRM_ID",firm_id$)
	params!.put("FIRM_NAME",firm_name$)
    params!.put("BARISTA_WD",dir(""))  
	
rem --- Make Document Archive Record and Get ID

    rep_date$=date(0:stbl("+DATE_MASK"))
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")

    rd_source_alias$=rd_alias_id$
    rd_source_type$="O"
    rd_doc_source$="E"
    rd_doc_ext$="JAS"
    rd_archive_action$="DOC_ID-NOREPRINT"
    gosub document_whse
    rd_archive_action$=""

rem --- Document Output Report Parameters

    params!.put("DOC_NO",rd_doc_id$)
    params!.put("DATE_REP",rep_date$+"  "+rep_time$)
    
rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)
    reportTitle$=sysinfo.task_desc$+"_"+rd_doc_id$
    repTitle!=sysinfo.task_desc$+"_"+rd_doc_id$
    repTitle$=repTitle!.replace(" ","_")
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "SFHardCopy"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"

    declare BBJasperReport report!
    
rem --- Check for user authentication

    report! = BarUtils.getBBJasperReport(filename$)
    report!.putParams(params!)

    locale$ = stbl("!LOCALE")
    locale$ = stbl("+USER_LOCALE",err=*next)
    report!.setLocale(locale$)

rem --- Fill Report and Show

    rc=report!.fill(1)
    if rc<>BBJasperReport.getSUCCESS() then goto close_win
    
    rem --- get a pdf path from +DOC_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path
    
    declare BBJasperViewerWindow viewerWindow!
    viewerWindow! = new BBJasperViewerWindow(report!,0,0,screen_width,screen_height,repTitle$,$00080093$)

    viewerControl! = viewerWindow!.getViewerControl()
    viewerControl!.setGoogleDefaultDocument(repTitle$)
    viewerControl!.setDefaultSaveFolder(rd_doc_path$)
    viewerControl!.setDefaultSaveFile(repTitle$)
    viewerControl!.setFitWidth()

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    saveMenuButton! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    saveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnSaveMenuButton")

    savMenuItem! = viewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_ITEM_NAME())
    savMenuItem!.setCallback(BBjMenuItem.ON_POPUP_ITEM_SELECT,"OnSaveMenuButton")

    emailToolButton! = viewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    emailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnEmailToolButton")

    viewerWindow!.setReleaseOnClose(0)
    viewerWindow!.show(0)

    declare BBjTopLevelWindow bbjWindow!
    bbjWindow!= viewerWindow!.getViewerWindow()
    cancelled=1
    bbjWindow!.setCallback(bbjWindow!.ON_CLOSE,"exit_viewer",err=*next); cancelled=0
    if cancelled then goto exit_viewer

rem --- Event Control

    process_events,err=*same

    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_doc_path$=dsk("")+dir("")
        rd_doc_path$=BBjAPI().getFileSystem().resolvePath(stbl("+DOC_DIR_PDF",err=*next),err=*next)+"/"
        mkdir rd_doc_path$,err=*next
    endif

    return

OnSaveMenuButton:
rem --- save save and display confirmation dialog

    show_save_dlg$="YES"
 
exportToPDF:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_name$=repTitle$+".pdf"
        rd_doc_ext$="PDF"
        report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif

    if show_save_dlg$="YES"
        msg_id$="DOC_OUTPUT_COMP"
        gosub disp_message
        show_save_dlg$=""
    endif
    return    

OnEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved

    rem --- force exportToPDF in case not already saved
    gosub exportToPDF

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return
	
exit_viewer:

	rem --- Conditionally clear travelers for firm + wo_location
        msg_id$="SF_UPDT_TRAVELERS"
		msg_opt$=""
        gosub disp_message
		
		if msg_opt$="Y"
			call "adc_clearpartial.aon","N",sfe04a_dev,firm_id$+wo_location$,status
		endif	
		
close_win:rem --- Viewer Window Closed

    viewerWindow!.destroy(err=*next)
    rdForm!.destroy(err=*next)
    if tcb(13) then exit
    release

connect_err:rem --- Connection Error

    declare java.lang.Exception Exception!
    Exception! = bbjapi().getLastException()
    if Exception! = null() then 
       x = msgbox(errmes(-1),16,Translate!.getTranslation("AON_CONNECTION_FAILED"))
    else
       x = msgbox(Exception!.getLocalizedMessage(),16,Translate!.getTranslation("AON_CONNECTION_FAILED"))
    endif

    release
    
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return
	
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
