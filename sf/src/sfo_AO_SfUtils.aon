rem ==========================================================================
rem --- sfo_AO_SfUtils.aon 
rem --- AO_SfUtils class (SfUtils superclass)
rem --- SF helper superclass for collection of utilities.
rem --- 
rem --- AddonSoftware Version 11.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
rem ==========================================================================

class public AO_SfUtils

	rem /**
	rem  * Calculates Actual Subcontract Quantity Required (was fnsub)
	rem  *
	rem  * @param BBjNumber Quantity Required
	rem  * @param BBjNumber Alternate Factor
	rem  * @param BBjNumber Divisor
	rem  * @return BBjNumber BBjNumber
	rem  */
	method public static BBjNumber netSubQuantityRequired(BBjNumber qntyRequired,
:                                                         BBjNumber altFactor,
:                                                         BBjNumber divisor)
        seterr method_error
		if divisor = 0
			methodret 0
		else
			methodret qntyRequired * altFactor / divisor
		endif
        
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend

	rem  /**
	rem  * Calculates Operation Units (was fnopnoset)
	rem  * @param BBjNumber Hours per Piece (from Op Code Maintenance)
	rem  * @param BBjNumber Pieces per Hour (from Op Code Maintenance
	rem  * @param BBjNumber Estimated Yield (From WO Header)
	rem  * @return BBjNumber
	rem  */
	method public static BBjNumber opUnits(BBjNumber hrsPerPiece,
:										   BBjNumber pcsPerHour,
:										   BBjNumber yieldPct)
        seterr method_error
		if yieldPct = 0 or pcsPerHour = 0
			methodret 0
		else
			methodret 100 * (hrsPerPiece / pcsPerHour) / yieldPct
		endif
        
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend

	rem /**
	rem  * Calculates Operation Dollars (was fnopnosetdol)
	rem  * @param BBjNumber Hours per Piece (from Op Code Maintenance)
	rem  * @param BBjNumber Direct Rate (from Operation Requirement record)
	rem  * @param BBjNumber Overhead Rate (from Operation Requirement record)
	rem  * @param BBjNumber Pieces per Hour (from Op Code Maintenance)
	rem  * @param BBjNumber Estimated Yield (From WO Header)
	rem  * @return BBjNumber
	rem  */
	method public static BBjNumber opUnitsDollars(BBjNumber hrsPerPiece,
:												  BBjNumber dirRate,
:												  BBjNumber overheadRate,
:												  BBjNumber pcsPerHour,
:												  BBjNumber yieldPct)
        seterr method_error
		if pcsPerHour = 0 or yieldPct = 0
			methodret 0
		else
			methodret 100 * (hrsPerPiece * (dirRate + overheadRate) / pcsPerHour) / yieldPct
		endif
        
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend

	rem /**
	rem  * Calculates Operation Total Time Required (was fnop)
	rem  * @param BBjNumber Units (from WO Op Requirements)
	rem  * @param BBjNumber Scheduled Production Quantity (from WO Header)
	rem  * @param BBjNumber Hours per Piece (from Op Code Maintenance)
	rem  * @param BBjNumber Pieces per Hour (from Op Code Maintenance
	rem  * @param BBjNumber Estimated Yield (From WO Header)
	rem  * @param BBjNumber Setup Time (from Op Code Maintenance)
	rem  * @return BBjNumber
	rem  */
	method public static BBjNumber opTime(BBjNumber units,
:										  BBjNumber qntyRequired,
:										  BBjNumber hrsPerPiece,
:										  BBjNumber pcsPerHour,
:										  BBjNumber yieldPct,
:										  BBjNumber setupTime)
        seterr method_error
		if pcsPerHour = 0 or yieldPct = 0
			methodret 0
		else
			methodret units * qntyRequired * 100 * (hrsPerPiece / pcsPerHour) / yieldPct + setupTime
		endif
        
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend
	
	rem /**
	rem  * Calculate Total Standard Cost (was fnopdol)
	rem  * @param BBjNumber Scheduled Production Quantity (from WO Header)
	rem  * @param BBjNumber Hours per Piece (from Op Code Requirements)
	rem  * @param BBjNumber Direct Rate (from Op Code Requirements)
	rem  * @param BBjNumber Overhead Rate (from Op Code Requirements)
	rem  * @param BBjNumber Pieces per Hour (from Op Code Requirements)
	rem  * @param BBjNumber Estimated Yield (From WO Header)
	rem  * @param BBjNumber Setup Time (from Op Code Requirements)
	rem /**
	method public static BBjNumber opTotStdCost(BBjNumber qntyRequired,
:												BBjNumber hrsPerPiece,
:												BBjNumber dirRate,
:												BBjNumber overheadRate,
:												BBjNumber pcsPerHour,
:												BBjNumber yieldPct,
:												BBjNumber setupTime)
        seterr method_error
		if pcsPerHour = 0 or yieldPct = 0
			methodret 0
		else
			methodret 100 * (qntyRequired * hrsPerPiece * (dirRate + overheadRate) / pcsPerHour) / yieldPct + setupTime * (dirRate + overheadRate)
		endif
        
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend
	
	rem  * Calculate Material Units From BOM (was fnqty)
	rem  * @param Quantity Required (from BOM Materials)
	rem  * @param Alternamte Factor (from BOM Materials)
	rem  * @param Divisor (from BOM Materials)
	rem  * @param Estimated Yield (from WO Header)
	rem  * @param Scrap Factor Percent (from BOM Materials)
	rem  * @return BBjNumber
	rem  */
	method public static BBjNumber matQty(BBjNumber matQntyRequired,
:										  BBjNumber altFactor,
:										  BBjNumber divisor,
:										  BBjNumber yieldPct,
:										  BBjNumber scrapFactor)
        seterr method_error
		if divisor = 0 or yieldPct = 0 or scrapFactor = 100
			methodret 0
		else
			methodret matQntyRequired * 10000 * altFactor / (divisor * yieldPct * (100 - scrapFactor))
		endif
        
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend
	
	rem /**
	rem  * Calculates Material Units from Work Order (was fnqtynew)
	rem  * @param Quantity Required (from WO Materials)
	rem  * @param Alternate Factor (from WO Materials)
	rem  * @param Divisor (from WO Materials)
	rem  * @param Scrap Factor Percent (from WO Materials)
	rem  * @param Estimated Yield Percent (from WO Header)
	rem  * @return BBjNumber
	rem  */
	method public static BBjNumber matQtyWorkOrd(BBjNumber matQntyRequired,
:												 BBjNumber altFactor,
:												 BBjNumber divisor,
:												 BBjNumber scrapFactor,
:												 BBjNumber yieldPct)
        seterr method_error
		if divisor = 0 or scrapFactor = 100 or yieldPct = 0
			methodret 0
		else
			methodret 100 * matQntyRequired * altFactor / (divisor * (100-scrapFactor)) / (yieldPct * .01)
		endif
        
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend
classend
