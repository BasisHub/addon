rem --- Recurring WO Close - Process WO Transactions
rem --- Program sfu_db v8.0.0 04Jan2008 (sfu_db)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 10:43:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock Files
rem --- Init Data

    more=1
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFX_TYPEWO","PRIMARY",sfe03_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft21_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft31_key_tpl$,rd_table_chans$[all],status$
    

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe03_dev,1,meter_num,status

rem --- Disallow 'M'enu option in Error Routine

    exit_ctrl=1

rem --- Process Here

    read (sfe03_dev,key=firm_id$+"A",dom=*next)

rem --- Next Ine Here
    while more
        flag=0
        dim sfe03_key$:sfe03_key_tpl$
        sfe03_key$=key(sfe03_dev,end=done)
        if sfe03_key.firm_id$<>firm_id$+"A" then break
        if pos(sfe03_key.wo_type$=t0$,2)=0 then read (sfe03_dev,key=(sfe03_key.firm_id$+sfe03_key.record_id_a$+sfe03_key.wo_type$)+$ff$,dom=*continue)
        read (sfe03_dev)
        extract record (sfe01_dev,key=sfe03_key.firm_id$+sfe03_key.wo_location$,dom=*continue) sfe01a$
        t0=0
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        wotran_dev=sft01_dev
        dim sftran$:tmpl(sft01_dev)
        dim wotran_key$:sft01_key_tpl$
        while more
            read (wotran_dev,key=(sfe01a_key.firm_id$+sfe01a_key.wo_location$+sfe01a_key.wo_no$),dom=*next)
            while more
                wotran_key$=key(wotran_dev,end=*break)
                if (wotran_key.firm_id$<>sfe01a_key.firm_id$) and 
:                  (wotran_key.wo_location$<>sfe01a_key.wo_location$) and
:                  (wotran_key.wo_no$<>sfe01a_key.wo_no$) then
                   break
                endif
                if wotran_key.trans_date$>p9$ then 
                    flag = 1
                    break
                endif
                read record (wotran_dev,key=wotran_key$) sftran$
                t0=t0+sftran$.ext_cost
            wend
            if flag = 1 then break
            if wotran_dev=sft01_dev then 
                let wotran_dev=sft21_dev
                dim sftran$:tmpl(sft21_dev)
                dim wotran_key$:sft21_key_tpl$
                continue
            endif
            if wotran_dev=sft21_dev then 
                let wotran_dev=sft31_dev 
                dim sftran$:tmpl(sft31_dev)
                dim wotran_key$:sft31_key_tpl$
                continue
            break
        wend 
        if t0=0 then continue
        sfe01a.cls_inp_qty=sfe01a.sch_prod_qty
        sfe01a.closed_cost=t0,sfe01a.cls_inp_date$=p9$,sfe01a.complete_flag$="N"
        write record (sfe01_dev,key=(sfe01a_key.firm_id$+sfe01a_key.wo_location$+sfe01a_key.wo_no$)) sfe01a$
        sfe04b.firm_id$=firm_id$
        sfe04b.wo_location$="  "
        sfe04b.record_id_b$="B"
        sfe04b.wo_no$=sfe01a.wo_no$
        write record (sfe04_dev,key=(sfe04b.firm_id$+sfe04b.wo_location$+sfe04b.record_id_b$+sfe04b.wo_no$)) sfe04b$
    wend 

done: rem --- Completed


    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src


std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
