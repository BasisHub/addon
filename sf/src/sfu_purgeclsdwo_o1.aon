rem --- Closed Work Order Purge - Purge Data Files
rem --- Program sfu_purgeclsdwo_o1 v8.0.0 09Jan2008 (sfu_fb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/09/2008 11:03:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","PRIMARY",sfe01_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOLOTSER","PRIMARY",sfe06_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOCOMNT","PRIMARY",sfe07_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",sfe22_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSOPRTR","PRIMARY",sft03_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSLSTRN","PRIMARY",sft12_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSMATTR","PRIMARY",sft23_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSSUBTR","PRIMARY",sft33_key_tpl$,rd_table_chans$[all],status$

    dim sfe01a_key$:sfe01_key_tpl$   
    dim sfe02a_key$:sfe02_key_tpl$   
    dim sfe06a_key$:sfe06_key_tpl$   
    dim sfe07a_key$:sfe07_key_tpl$   
    dim sfe22a_key$:sfe22_key_tpl$   
    dim sfe32a_key$:sfe32_key_tpl$   
    dim sft03a_key$:sft03_key_tpl$   
    dim sft12a_key$:sft12_key_tpl$   
    dim sft23a_key$:sft23_key_tpl$   
    dim sft33a_key$:sft33_key_tpl$   

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe01_dev,1,meter_num,status

rem --- Disallow 'M'enu option in Error Routine

    exit_ctrl=1
    more=1
	
rem --- Process Here

    read (sfe01_dev,key=firm_id$,dom=*next)

rem --- Main Loop Starts
    while more
        sfe01a_key$=key(sfe01_dev,end=*break)
        if pos(firm_id$=sfe01a_key$)<>1 then break
		
        read record (sfe01_dev,key=sfe01a_key$) sfe01a$
        if sfe01a.wo_status$<>"C" then continue
        if sfe01a.closed_date$>purge_date$ then continue

        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

	rem --- Comments Here sfe-07
        read (sfe07_dev,key=sfe01a_key$,dom=*next)
        while more
            sfe07a_key$=key(sfe07_dev,end=*break)
            if pos(sfe01a_key$=sfe07a_key$)<>1 then break
			remove (sfe07_dev,key=sfe07a_key$,dom=*continue)
        wend

	rem --- Lot/Serial Numbers Here sfe-06
        if pos(ivs01a.lotser_flag$="LS")<>0 then
            read (sfe06_dev,key=sfe01a_key$,dom=*next)
            while more
                sfe06a_key$=key(sfe06_dev,end=*break)
				if pos(sfe01a_key$=sfe06a_key$)<>1 then break
				remove (sfe06_dev,key=sfe06a_key$,dom=*continue)
            wend

        endif

	rem --- Operations Requirements Here sfe02
        read (sfe02_dev,key=sfe01a_key$,dom=*next)
        while more
            sfe02a_key$=key(sfe02_dev,end=*break)
            if pos(sfe01a_key$=sfe02a_key$)<>1 then break	
            remove (sfe02_dev,key=sfe02a_key$,dom=*continue)
        wend

	rem --- Material Requirements Here sfe22
        read (sfe22_dev,key=sfe01a_key$,dom=*next)
        while more
            sfe22a_key$=key(sfe22_dev,end=*break)
            if pos(sfe01a_key$=sfe22a_key$)<>1 then break
            remove (sfe22_dev,key=sfe22a_key$,dom=*continue)
        wend

	rem --- Subcontract Requirements Here sfe32
        read (sfe32_dev,key=sfe01a_key$,dom=*next)
        while more
            sfe32a_key$=key(sfe32_dev,end=*break)
            if pos(sfe01a_key$=sfe32a_key$)<>1 then break
            remove (sfe32_dev,key=sfe32a_key$,dom=*continue)
        wend

	rem --- Closed WO Operations TRANSACTIONS sft03 Here
		read (sft03_dev,key=sfe01a_key$,dom=*next)
		while more
            sft03a_key$=key(sft03_dev,end=*break)
            if pos(sfe01a_key$=sft03a_key$)<>1 then break
            if sft03a_key.trans_date$>purge_date$ then break
            remove (sft03_dev,key=sft03a_key$,dom=*continue)
		wend

	rem --- Closed WO Material TRANSACTIONS sft23 (and L/S sft12) Here

		read (sft23_dev,key=sfe01a_key$,dom=*next)
		while more
            sft23a_key$=key(sft23_dev,end=*break)
            if pos(sfe01a_key$=sft23a_key$)<>1 then break
            if sft23a_key.trans_date$>purge_date$ then break

            if pos(ivs01a.lotser_flag$="LS")<>0 then
                read (sft12_dev,key=sft23a_key$,dom=*next)
                while more
					sft12a_key$=key(sft12_dev,end=*break)
                    if pos(sft23a_key$=sft12a_key$)<>1 then break
					remove (sft12_dev,key=sft12a_key$,dom=*continue)
                wend
            endif
            remove (sft23_dev,key=sft23a_key$,dom=*continue)
		wend
				
	rem --- Closed WO Subcontract TRANSACTIONS sft-33 Here
		read (sft33_dev,key=sfe01a_key$,dom=*next)
		while more
            sft33a_key$=key(sft33_dev,end=*break)
            if pos(sfe01a_key$=sft33a_key$)<>1 then break
            if sft33a_key.trans_date$>purge_date$ then break
            remove (sft33_dev,key=sft33a_key$,dom=*continue)
		wend

rem ---Main Loop Ends
    wend

rem --- End

done:
        goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem ----#endinclude std_functions.src

rem ----#include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem ----#endinclude std_error.src
rem ----#include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)
        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem ----#endinclude std_missing_params.src

rem ----#include std_end.src
std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem ----#endinclude std_end.src

        end
