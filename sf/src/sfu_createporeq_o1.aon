rem --- Generate Requisitions (Update Overlay)
rem --- Program sfu_ib v8.0.0 17Jan2008 (sfu_ib)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/17/2008 09:43:06)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    more=1

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",sfe22_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32_key_tpl$,rd_table_chans$[all],status$
       
rem --- Additional File Opens

    sfreq_dev=sfe22a_dev
    dim sfreqa$:sfe22_tpls$
    dim sfreq_key$:sfe22_key_tpl$
	
	tmp_field$=fattr(sfreqa$,"pur_ord_seq_ref")
    pur_ord_seq_ref_len=dec(tmp_field$(10,2))

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfreq_dev,1,meter_num,ignore_status 

rem --- Disallow 'M'enu option in error routine

    exit_ctrl=1

rem --- Init Read
    while more

        read (sfreq_dev,key=firm_id$+"  "+wofrom$,dom=*next)

rem --- Main Read

        while more 
            sfreq_key$=key(sfreq_dev,end=*break)
            if pos(firm_id$=sfreq_key$)<>1 then break
            if len(wothru$)>0 then 
                if sfreq_key.wo_location$+sfreq_key.wo_no$ > "  "+wothru$
:                  then break                  
            endif
			
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
            t1$=""
			
            extract record (sfreq_dev,key=sfreq_key$) sfreqa$; rem --- Advisory locking

			sfe01_readk$=sfreq_key.firm_id$+sfreq_key.wo_location$+sfreq_key.wo_no$
            sfe01a_found=0
			find record (sfe01a_dev,key=sfe01_readk$,dom=*next) sfe01a$; sfe01a_found=1
            if !sfe01a_found or pos(sfe01a.wo_status$=wostatus$)=0 or sfe01a.wo_category$="R" then
                read (sfreq_dev)
                continue
            endif
					
			if sfreq_dev<>sfe22a_dev then 
				rem --- process sfe-32/SFE_WOSUBCNT, subcontracts
                if sfreqa.line_type$<>"I" then 
					if cur_wo_no$<>sfreqa.wo_no$ and sfreqa.line_type$<>"S" then read(sfreq_dev); continue

rem --- Breaks
					if len(cvs(message$,2))>0 and (sfreqa.line_type$<>"M" or cur_wo_no$<>sfreqa.wo_no$) 
						gosub write_message_record
					endif
					if cur_wo_no$<>sfreqa.wo_no$ then 
						cur_wo_no$=sfreqa.wo_no$				
						process$="N"
					endif

rem --- Process Subcontracts

					if sfreqa.line_type$="M" and process$="N" then read(sfreq_dev); continue; rem skip messages assoc'd with skipped non-message lines
					if sfreqa.line_type$="S" then t1$=sfreqa.vendor_id$
					if sfreqa.line_type$="S" and num(sfreqa.po_no$)>0 then 
						process$="N"; rem skip if already assoc'd w/a PO
                        read(sfreq_dev)
						continue
					endif
					if sfreqa.po_status$="C" then 
						process$="N"; rem skip if closed
                        read(sfreq_dev)
						continue
					endif
				
					process$="Y"
					last_type$=sfreqa.line_type$
					if sfreqa.line_type$="M" then 
						message$=message$+cvs(sfreqa.memo_1024$,2)+" "
                        read(sfreq_dev)
						continue
					endif

rem --- Process Non-Stock Items

					dim info$[15],info[2]
					info$[0]=firm_id$
					info$[1]=sfreqa.vendor_id$
					info$[2]="N"
					info$[3]=sfe01a.warehouse_id$
					info$[4]=sysinfo.system_date$
					info$[5]=sfreqa.require_date$ 
					info$[6]=sfreqa.unit_measure$
					info$[7]="W"
					info$[9]=sfreqa.wo_no$+sfreqa.internal_seq_no$
					info$[10]=sfe01a.customer_id$
					info$[14]=sfreqa.description$
					info[1]=sfreqa.rate
					info[2]=sfreqa.total_units
                
					gosub create_requisition; rem Subcontracts
					                
					sfreqa.po_no$=detail_key$(3,7)
					sfreqa.pur_ord_seq_ref$=detail_key$(10,pur_ord_seq_ref_len)
					sfreqa.po_status$="R"; rem R=requisition
				
	                write record (sfreq_dev,key=sfreq_key$) sfreqa$; rem Subcontracts
				else
					read(sfreq_dev); rem Release Advisory Locking
				endif
            else
				rem --- Process Special Order Material Requirements (sfe-22/SFE_WOMATL, materials)
		
				dim info$[15],info[2]
			
				if sfreqa.total_units=0 or cvs(sfreqa.po_no$+sfreqa.pur_ord_seq_ref$,2)<>"" then
                    rem "Skip if already assoc'd w/a PO
                    read(sfreq_dev)
                    continue
                endif
                ivm02a_found=0
				find record (ivm02a_dev,key=firm_id$+sfreqa.warehouse_id$+sfreqa.item_id$,dom=*next) ivm02a$; ivm02a_found=1
				if !ivm02a_found or ivm02a.special_ord$<>"Y" then
                    read(sfreq_dev)
                    continue
                endif
				vendor$=ivm02a.vendor_id$
				cost=ivm02a.unit_cost

                ivm01a_found=0
				find record (ivm01a_dev,key=firm_id$+sfreqa.item_id$,dom=*next) ivm01a$; ivm01a_found=1
				if ivm01a.stock_level$="I" then let vendor$=ivm01a.vendor_id$
				if !ivm01a_found or vendor$="      " then
                    read(sfreq_dev)
                    continue
                endif
				info$[0]=firm_id$
				info$[1]=vendor$
				info$[2]="S"
				info$[3]=sfreqa.warehouse_id$
				info$[4]=sysinfo.system_date$
				info$[5]=sfreqa.require_date$
				info$[6]=sfreqa.unit_measure$
				info$[7]="W"
				info$[9]=sfreqa.wo_no$+sfreqa.internal_seq_no$
				info$[13]=sfreqa.item_id$
				info[0]=ivm01a.conv_factor
				info[2]=sfreqa.total_units

rem --- Use Vendor's Item Discount Pricing When Available

				find record (ivm05a_dev,key=info$[0]+info$[1]+info$[13],dom=create_req_and_log) ivm05a$
            
				if ivm05a.unit_cost_01>0 and info[2]>ivm05a.break_qty_01 then let cost=ivm05a.unit_cost_01
				if ivm05a.unit_cost_02>0 and info[2]>ivm05a.break_qty_02 then let cost=ivm05a.unit_cost_02
				if ivm05a.unit_cost_03>0 and info[2]>ivm05a.break_qty_03 then let cost=ivm05a.unit_cost_03

create_req_and_log: rem --- Create PO Requisition And Log It In Work Order Detail Record

				info[1]=cost
			
				gosub create_requisition; rem for Materials
			
				sfreqa.po_no$=detail_key$(3,7)
				sfreqa.pur_ord_seq_ref$ =detail_key$(10,pur_ord_seq_ref_len)
				sfreqa.po_status$="R"; rem R=requisition
				sfreq_key$=key(sfreq_dev,end=*break)
				
				write record (sfreq_dev,key=sfreq_key$) sfreqa$; rem Materials
			endif
rem --- Loop Back For Next Work Order Detail Record

        wend

done: rem --- End

        if len(cvs(message$,2))>0 then gosub write_message_record
		
        if sfreq_dev=sfe22a_dev then 
            sfreq_dev=sfe32a_dev
            dim sfreqa$:sfe32_tpls$
            dim sfreq_key$:sfe32_key_tpl$
            continue
        endif    
        break
    
	wend
	

    msg_id$="PO_REQ_RECS_CREATED"
    dim msg_tokens$[1]
    msg_tokens$[1]=str(requisition_lines_created)
    gosub disp_message

	goto std_exit

create_requisition: rem --- Create Requisition Record
                    rem --- (poc_updprereq.aon was poc_ba pre-Barista)

    call pgmdir$+"poc_updpurreq.aon",info$[all],info[all],detail_key$,rd_table_chans$[all],status
	requisition_lines_created=requisition_lines_created+1
	
    return

write_message_record: rem --- Write The Message Record

    dim info$[15],info[2]
    info$[0]=firm_id$
    info$[1]=t1$
	info$[2]="M"
	info$[3]=sfe01a.warehouse_id$
    info$[4]=sysinfo.system_date$
    info$[5]=sfreqa.require_date$
	info$[7]="W"
    info$[9]=cur_wo_no$+sfreqa.internal_seq_no$
    info$[14]=cvs(message$,2)
    
	gosub create_requisition; rem Messages
    message$=""
    return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

	return
	
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

     call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
     run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
