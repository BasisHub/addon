rem --- Material Usage By Work Order Query filter program
rem --- Program ID: sff_matusagebywo.aon
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem --- Run by Barista as part of the SF_MATUSAGEBYWO query.
rem --- For each row in the result set, this program runs to get item description from ivm_itemmast for
rem --- inventory items or from sfe_womastr for non-stock items.

    setesc std_error
    seterr std_error

    enter inq_mode$,rec_tpl$,calc_tpl$,table_chans$[all],status$

rem inq_mode$      - not used until recently - current use not yet documented
rem rec_tpl$       - Current row database columns
rem calc_tpl$      - Current row calculated columns
rem table_chans$[] - Barista opened channels array
rem status$        - Returned status: "SKIP" = Skip current record

rem --- Initialize data
    status$=""

rem --- Open tables

    if pos(pad("@"+"IVS_PARAMS",17)=table_chans$[0,0],20)=0 or pos(pad("@"+"SFT_OPNMATTR",17)=table_chans$[0,0],20)=0 then
        rem --- SF installed? Already require IV.
        call dir_pgm$+"adc_application.aon","SF",info$[all]
        sf$=info$[20]
        if sf$<>"Y" then
            status$="SKIP"
            goto exit_prog
        endif

        num_files=2
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="IVS_PARAMS",open_opts$[1]="OTA@"
        open_tables$[2]="SFT_OPNMATTR",open_opts$[2]="OTA@"
                
        gosub open_tables        
    endif

    ivs_params_dev=fnget_dev("@"+"IVS_PARAMS")
    sft_opnmattr_dev=fnget_dev("@"+"SFT_OPNMATTR")
    dim ivs_params$:fnget_tpl$("@"+"IVS_PARAMS")
    dim sft_opnmattr$:fnget_tpl$("@"+"SFT_OPNMATTR")

rem --- Get Status for this Work Order
    switch (BBjAPI().TRUE)
        case rec_tpl.wo_status$="O"
            rec_tpl.status$="Open"
            break
        case rec_tpl.wo_status$="P"
            rec_tpl.status$="Plan"
            break
        case rec_tpl.wo_status$="Q"
            rec_tpl.status$="Quote"
            break
        case default
            rec_tpl.status$=""
            break
    swend

rem --- Get Description of Item being built
    if rec_tpl.wo_category$="I"
        dim p[5]
        findrecord(ivs_params_dev,key=rec_tpl.firm_id$+"IV00",dom=*next)ivs_params$
        if cvs(ivs_params.firm_id$,2)<>"" then
            p[0]=ivs_params.item_id_len
            p[1]=num(ivs_params.precision$)
            p[3]=num(ivs_params.desc_len_01$)
            p[4]=num(ivs_params.desc_len_02$)
            p[5]=num(ivs_params.desc_len_03$)
        
            rec_tpl.item_desc$=fnitem$(rec_tpl.item_desc$,p[3],p[4],p[5])
        endif
    else
        rec_tpl.wo_item$=""
        rec_tpl.item_desc$=cvs(rec_tpl.description_01$,2)+" "+cvs(rec_tpl.description_02$,2)
    endif

rem --- Get accumulate Quantity Issued
    issued=0
    read(sft_opnmattr_dev,key=rec_tpl.firm_id$+rec_tpl.wo_location$+rec_tpl.wo_no$,dom=*next)
    while 1
        readrecord(sft_opnmattr_dev,end=*break)sft_opnmattr$
        if sft_opnmattr.firm_id$+sft_opnmattr.wo_location$+sft_opnmattr.wo_no$<>rec_tpl.firm_id$+rec_tpl.wo_location$+rec_tpl.wo_no$ then break
        if sft_opnmattr.item_id$=rec_tpl.item_id$ then issued=issued+sft_opnmattr.units
    wend
    rec_tpl.issued_units=issued 

rem --- Done
    goto exit_prog

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem --- Functions

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)
        q$=pad(q$,q1+q2+q3)
        return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
    fnend

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
    
exit_prog:rem --- Exit Program

    exit
