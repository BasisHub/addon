rem --- Closed Work Order Purge - Date Entry
rem --- Program sfu_fa v8.0.0 15Jan2008 (sfu_fa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/15/2008 02:48:13)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=15,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
    files$[3]="sfe-01",ids$[3]="SFE_WOMASTR"
    files$[4]="sfe-02",ids$[4]="SFE_WOOPRTN"
    files$[5]="sfe-03",ids$[5]="SFX_TYPEWO"
    files$[6]="sfe-06",ids$[6]="SFE_WOLOTSER"
    files$[7]="sfe-07",ids$[7]="SFE_WOCOMNT"
    files$[8]="sfe-22",ids$[8]="SFE_WOMATL"
    files$[9]="sfe-32",ids$[9]="SFE_WOSUBCNT"
    files$[10]="sfm-10",ids$[10]="SFC_WOTYPECD"
    files$[11]="sfs-01a",ids$[11]="SFS_PARAMS"
    files$[12]="sft-03",ids$[12]="SFT_CLSOPRTR"
    files$[13]="sft-12",ids$[13]="SFT_CLSLSTRN"
    files$[14]="sft-23",ids$[14]="SFT_CLSMATTR"
    files$[15]="sft-33",ids$[15]="SFT_CLSSUBTR"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    gls01a_dev=channels[1]
    ivs01a_dev=channels[2]
    sfe01_dev=channels[3]
    sfe02_dev=channels[4]
    sfe03_dev=channels[5]
    sfe06_dev=channels[6]
    sfe07_dev=channels[7]
    sfe22_dev=channels[8]
    sfe32_dev=channels[9]
    sfm10_dev=channels[10]
    sfs01a_dev=channels[11]
    sft03_dev=channels[12]
    sft12_dev=channels[13]
    sft23_dev=channels[14]
    sft33_dev=channels[15]

rem --- Dimension string templates

    dim gls01a$:templates$[1],ivs01a$:templates$[2],sfe01a$:templates$[3],
:       sfe02a$:templates$[4],sfe03a$:templates$[5],sfe06a$:templates$[6],
:       sfe07a$:templates$[7],sfe22a$:templates$[8],sfe32a$:templates$[9],
:       sfm10a$:templates$[10],sfs01a$:templates$[11],sft03a$:templates$[12],
:       sft12a$:templates$[13],sft23a$:templates$[14],sft33a$:templates$[15]

rem --- Assign form input values to local variables

    v$=Option!.getOptionData("Purge Closed Work Orders As Of")

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

    n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$
    find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    dim p[2],g[4]
    g[0]=num(gls01a.total_pers$,err=*next) 
    g[1]=num(gls01a.current_pers$,err=*next)
    g[2]=num(gls01a.current_year$,err=*next)
    g[3]=num(gls01a.acct_length$,err=*next) 
    g[4]=num(gls01a.max_acct_len$,err=*next)

    g[2]=fnyy_year(gls01a.current_year$)
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
    p[0]=ivs01a.item_id_len
    p[1]=num(sfs01a.current_per$),p[2]=fnyy_year(sfs01a.current_year$)

rem --- Init Data

    h0=60
    h1=120,h=0,h1$=n1$,h2$=n3$
    l9=50
    l=l9+1
    dim j$(80,"-"),j1$(80),j0$(30,"0")
    m0=len(sfs01a.empl_output$)
    m1=len(sfs01a.amount_mask$),g5=len(gls01a.acct_output$)
    more=1

rem --- Additional File Opens

    if pos(ivs01a.lotser_flag$="LS")<>0 then 
        files$[13]="sft-12"
        files$[14]="sfe-06"
        call pgmdir$+"adc_fileopen.aon",1,13,14,files$[all],options$[all],channels[all],batch,status
        if status then goto std_exit
        sft12_dev=channels[13]
        sfe06_dev=channels[14]
    endif

rem --- Background

    for x=4 to 6 step 2
        call pgmdir$+"syc_wc.bbx",1,0,80,0,0,x,0
    next x
    print 'sb',@(8,3),"Purge Closed Work Orders As Of: ",'sf',@(0,22),'cl'

rem --- Options
    while more
options_label:    
        seterr std_error
        v0$="D"
        v1$="REC",v2$=p9$,v3$="",v4$="Enter Closed Date To Purge Work Orders",v0=3,v1=40,v2=3
        if v3=4 then goto std_exit
        p9$=v$

rem --- Verify Period To Be Current - 1

        v=p[1]
        call pgmdir$+"adc_perioddates.aon",sys01_dev,v,p[2],v0$,v9$,status
        if status then goto std_exit
        if p9$<=v0$ then goto flow_control
        gosub cant_purge
        continue

flow_control: rem --- Flow Control

        if v3<>4 then 
            if v3=2 then 
                if i0>0 then let i0=i0-1
            else
                i0=i0+1
            endif
            on i0 goto options_label,done
        endif
done: rem --- Overlay

        v0$="Y"
        v1$="CE",v2$="",v3$="",v4$="Is The Above Information Correct? (Y/N): ",v0=1,v1=63,v2=22
        if v3=4 then goto std_exit
        if v$<>"N" then break
    wend

    if v$<>"Y" then goto done
    run pgmdir$+"sfu_fb.bbx"

cant_purge: rem --- Can Not Purge For This Period
    print 'rb',@(10,21),"Closed Work Orders May Not Be Purged For The Current Period",@(10,22),"And The Prior Period, Press <Enter> To Re-Enter Purge Date: "
    v0$="S"
    v1$="C",v2$="",v3$="",v4$="",v0=1,v1=67,v2=22
    print @(0,21),'cl',@(0,22),'cl'
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
