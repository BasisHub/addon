rem --- Work Orders By Date Report - Parameters
rem --- Program sfr_na v8.0.0 04Jan2008 (sfr_na)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:37:03)
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=6,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="ars_params",ids$[1]="ARS_PARAMS"
        files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
        files$[3]="ivs_params",ids$[3]="IVS_PARAMS"
        files$[4]="sfe-01",ids$[4]="SFE_WOMASTR"
        files$[5]="sfs_params",ids$[5]="SFS_PARAMS"
        files$[6]="sfw-04",ids$[6]="SFW_WOXDATE"
        options$[6]="C"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        ars01a_dev=channels[1]
        ivm01a_dev=channels[2]
        ivs01a_dev=channels[3]
        sfe01_dev=channels[4]
        sfs01a_dev=channels[5]
        sfw04a_dev=channels[6]

rem --- Dimension string templates

    dim ars01a$:templates$[1],ivm01a$:templates$[2],ivs01a$:templates$[3],
:       sfe01a$:templates$[4],sfs01a$:templates$[5],sfw04a$:templates$[6]

rem --- Assign form input values to local variables

        dateseq$=Option!.getOptionData("date_seq")
        datefrom$=Option!.getOptionData("dates_1")
        datethru$=Option!.getOptionData("dates_2")
        wofrom$=Option!.getOptionData("work_order_1")
        wothru$=Option!.getOptionData("work_order_2")
        wo_open$=Option!.getOptionData("open")
        wo_closed$=Option!.getOptionData("closed")
        wo_planned$=Option!.getOptionData("planned")
        wo_quoted$=Option!.getOptionData("quoted")
        wostatus$=""
        if wo_open$="Y" wostatus$=wostatus$+"O"
        if wo_closed$="Y" wostatus$=wostatus$+"C"
        if wo_planned$="Y" wostatus$=wostatus$+"P"
        if wo_quoted$="Y" wostatus$=wostatus$+"Q"

rem --- Retrieve parameter records

        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        sfs01a_key$=firm_id$+"SF00"
        find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

		n1$=sysinfo.firm_name$
        n2$="SF"
		n3$=sysinfo.task_desc$
        find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
        op$=sfs01a.ar_interface$
        find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$
        if op$="Y"
            find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
            call stbl("+DIR_PGM")+"adc_getmask.aon","","AR","I","",cust_mask$,0,custmask_len
            c0=custmask_len
            c1=len(cust_mask$)
        endif

        dim desc[3]
        i9=ivs01a.item_id_len
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$)
        desclen=desc[1]+desc[2]+desc[3]
        if desclen>30 then let desclen=30

rem --- Init Data

        h0=60
        h=0,h1$=n1$,h2$=n3$
        l9=59
        l=l9+1
        dim sort$(14)
        more=1

rem --- Retrieve key templates

rem        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","PRIMARY",sfe01a_key_pritpl$,rd_table_chans$[all],status$

done: rem --- Overlay

	if dateseq$="O" then 
		k_name$="AO_OPEN_DATE"
	else 
		if dateseq$="S" then 
			k_name$="AO_ESTSTART_DATE"
		else 
			if dateseq$="C" then 
				k_name$="AO_ESTCMPLT_DATE"
			else 
				if dateseq$="A" then 
					k_name$="AO_ACTSTART_DATE"
				else 
					if dateseq$="L" then 
						k_name$="AO_LSTACTIVE_DAT"
					else 
						if dateseq$="X" then k_name$="AO_CLOSED_DATE"
					endif
				endif
			endif
		endif
	endif

	if dateseq$="O" then 
		h9$=Translate!.getTranslation("Date_Opened") 
	else 
		if dateseq$="S" then 
			h9$=Translate!.getTranslation("Estimated_Start_Date") 
		else 
			if dateseq$="C" then 
				h9$=Translate!.getTranslation("Estimated_Complete_Date") 
			else 
				if dateseq$="A" then 
					h9$=Translate!.getTranslation("Actual_Start_Date") 
				else 
					if dateseq$="L" then 
						h9$=Translate!.getTranslation("Last_Activity_Date") 
					else 
						if dateseq$="X" then let h9$=Translate!.getTranslation("Closed_Date")
					endif
				endif
			endif
		endif
	endif
	h9$=h9$+Translate!.getTranslation("_Sequence_Selected")
	h8$=Translate!.getTranslation("From:_")
	if datefrom$="" then let h8$=h8$+Translate!.getTranslation("The_First_Date") else let h8$=h8$+fndate$(datefrom$)
	h8$=h8$+Translate!.getTranslation("_Through:_")
	if datethru$="" then let h8$=h8$+Translate!.getTranslation("The_Last_Date") else let h8$=h8$+fndate$(datethru$)
	if wofrom$="" then let h7$=Translate!.getTranslation("From_W.O.#:_First") else let h7$=Translate!.getTranslation("From_W.O.#:_")+wofrom$
	if wothru$="" then let h7$=h7$+Translate!.getTranslation("_To_W.O.#:_Last") else let h7$=h7$+Translate!.getTranslation("_To_W.O.#:_")+wothru$

    run pgmdir$+"sfr_worddate_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
