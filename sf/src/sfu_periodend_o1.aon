rem --- WO Period End Update - Transaction Processing
rem --- Program sfu_eb v8.0.0 08Jan2008 (sfu_eb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/08/2008 03:33:02)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

	setesc std_error
	seterr std_error

rem --- Init Data
	more=1

	call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","PRIMARY",sfe01_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft21_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft31_key_tpl$,rd_table_chans$[all],status$
	call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNLSTRN","PRIMARY",sft11_key_tpl$,rd_table_chans$[all],status$
  
rem --- Background

	call pgmdir$+"adc_progress.aon","N","","","","",0,sfe01_dev,1,meter_num,ignore_status

rem --- Process Here

	read (sfe01a_dev,key=firm_id$,dom=*next)

	dim sfe01a_key$:sfe01_key_tpl$
	while more
		sfe01a_key$=key(sfe01a_dev,end=*break)
		if pos(firm_id$=sfe01a_key$)<>1 then break
		read record (sfe01a_dev,key=sfe01a_key$) sfe01a$
		recs=recs+1
		if mod(recs,milestone)=0 call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
		if pos(sfe01a.wo_type$=wo_types$,len(sfm10a.wo_type$))<=0 then
			if sfe01a.wo_status$<>"C" then continue
			if sfe01a.closed_date$>enddate$ then continue
		endif

rem --- sft-01/21/31 to sft-03/23/33 here

		wotran_dev=sft01a_dev
		dim wotran_key$:sft01_key_tpl$
		dim sftran$:fattr(sft01a$)
		wohist_dev=sft03a_dev
		dim sfhist$:fattr(sft03a$)

		if pos(sfe01a.wo_type$=wo_types$,len(sfm10a.wo_type$))>0
			closed_date$=sfe01a.closed_date$
		else
			closed_date$=enddate$
		endif

		while more
			read (wotran_dev,key=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$,dom=*next)
			while more
				wotran_key$=key(wotran_dev,end=*break)
				if (wotran_key.firm_id$+wotran_key.wo_location$+wotran_key.wo_no$)<>
:                       (sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$)
					break
				endif
				if wotran_key.trans_date$>closed_date$
					break
				endif
                read record (wotran_dev,key=wotran_key$) sftran$
				dim sfhist$:fattr(sfhist$)
				call pgm_dir$+"adc_copyfile.aon",sftran$,sfhist$,status
                write record (wohist_dev) sfhist$
                remove (wotran_dev,key=wotran_key$)

                if pos(ivs01a.lotser_flag$="LS")=0 then continue

rem ------------wot-11 To wot-12 Here

                read (sft11_dev,key=w0$,dom=*next)
                dim sfe11a_key$:sft11_key_tpl$
                while more
                    sft11a_key$=key(sft11_dev,end=*break)
                    if pos(w0$=sft11a_key$)<>1 then
                        break
                    endif
                    read record (sft11_dev,key=sft11a_key$) sft11a$
					dim sft12a$:fattr(sft12a$)
					call pgm_dir$+"adc_copyfile.aon",sft11a$,sf12a$,status
                    write record (sft12_dev,key=sft11a_key$) sft12a$
                    remove (sft11_dev,key=sft11a_key$)
                wend
            wend

            if wotran_dev=sft01a_dev
                wotran_dev=sft21a_dev
                dim wotran_key$:sft21_key_tpl$
                dim sftran$:fattr(sft21a$)
                wohist_dev=sft23a_dev
                dim sfhist$:fattr(sft23a$)
                continue
            endif
            if wotran_dev=sft21a_dev then
                wotran_dev=sft31a_dev
                dim wotran_key$:sft31_key_tpl$
                dim sftran$:fattr(sft31a$)
                wohist_dev=sft33a_dev
                dim sfhist$:fattr(sft33a$)
                continue
            endif
            break
        wend

    wend

rem --- Increment Period

    if current_period>=num(sfs01a.current_per$)
		extract record (sfs01a_dev,key=firm_id$+"SF00",dom=std_missing_params) sfs01a$
		cur_per=num(sfs01a.current_per$)
		cur_yr=num(sfs01a.current_year$)
		cur_per=cur_per+1
		if cur_per>num(gls01a.total_pers$)
			cur_per=1
			cur_yr=cur_yr+1
        endif
        
        sfs01a.current_per$=str(cur_per:"00")
        sfs01a.current_year$=str(cur_yr:"0000")
        write record (sfs01a_dev) sfs01a$
    endif

    goto std_exit

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update:

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
