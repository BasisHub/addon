rem --- Closed Work Order Purge - Purge Data Files
rem --- Program sfu_fb v8.0.0 09Jan2008 (sfu_fb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/09/2008 11:03:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$


rem --- Init Data

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOLOTSER","PRIMARY",sfe06_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOCMNT","PRIMARY",sfe07_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMATL","PRIMARY",sfe22_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBCNT","PRIMARY",sfe32_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSOPRTR","PRIMARY",sft03_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_CLSMATTR","PRIMARY",sft23_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_CLSSUBTR","PRIMARY",sft33_key_tpl$,rd_table_chans$[all],status$

rem --- Background

       call pgmdir$+"adc_progress.aon","N","","","","",0,sfe01_dev,1,meter_num,status
rem --- Disallow 'M'enu option in Error Routine

        exit_ctrl=1
        more=1
rem --- Process Here

        read (sfe01_dev,key=firm_id$,dom=*next)



rem --- Main Loop Starts
        while more
            k$=key(sfe01_dev,end=*break)
            if pos(firm_id$=k$)<>1 then break
            read record (sfe01_dev,key=k$) sfe01a$
            if sfe01a.WO_STATUS$<>"C" then continue
            if sfe01a.CLOSED_DATE$>p9$ then continue

            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

rem --- Sort Files Here

            k9$=firm_id$+"A"+sfe01a.WO_TYPE$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$
            remove (sfe03_dev,key=k9$,dom=*next)

            if sfe01a.WO_CATEGORY$="I" then
                k9$=firm_id$+"C"+sfe01a.WAREHOUSE_ID$+sfe01a.ITEM_ID$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$
                remove (sfe03_dev,key=k9$,dom=*next)
            endif

            if num(sfe01a.CUSTOMER_ID$)<>0 then
                k9$=firm_id$+"B"+sfe01a.CUSTOMER_ID$+sfe01a.ORDER_NO$+sfe01a.LINE_NO$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$
                remove (sfe03_dev,key=k9$,dom=*next)
            endif

rem --- Comments Here woe-07

            read (sfe07_dev,key=sfe01a.FIRM_ID$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$,dom=*next)

            dim sfe07a_key$:sfe07_key_tpl$   
            while more
                sfe07a_key$=key(sfe07_dev,end=*break)
                if sfe07a_key.FIRM_ID$+sfe07a_key.WO_LOCATION$+sfe07a_key.WO_NO$<>sfe01a.FIRM_ID$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$ then break
                remove (sfe07_dev,key=sfe07a_key$,dom=*continue)
            wend

rem --- Lot/Serial Numbers Here woe-06

            if pos(ivs01a.lotser_flag$="LS")<>0 then
                    read (sfe06_dev,key=sfe01a.FIRM_ID$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$,dom=*next)
                dim sfe06a_key$:sfe06_key_tpl$    
                while more
                    sfe06a_key$=key(sfe06_dev,end=*break)
                    if sfe06a_key.FIRM_ID$+sfe06a_key.WO_LOCATION$+sfe06a_key.WO_NO$<>sfe01a.FIRM_ID$+sfe01.WO_LOCATION$+sfe01a.WO_NO$ then break
                    remove (sfe06_dev,key=sfe06a_key$,dom=*continue)
                wend

            endif

rem --- WOE-02/22/32 And woe-03 Here

            sfreq_dev=sfe02_dev
            dim sfreq_key$:sfe02_key_tpl$   
            while more
                read (sfreq_dev,key=sfe01a.FIRM_ID$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$,dom=*next)
                while more
                    sfreq_key$=key(sfreq_dev,end=*break)
                    if sfreq_key.FIRM_ID$+sfreq_key.WO_LOCATION$+sfreq_key.WO_NO$<>sfe01a.FIRM_ID$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$ then break
                    read record (sfreq_dev,key=sfreq_key$) sfreqa$
                    rem on pos(w0$(12,1)="ABC")-1 goto l2100,l2200,l2300
                    switch pos(sfe02a.RECORD_ID_A$="ABC")-1
rem --- Operation Here
                        case 1; k9$=firm_id$+"D"+sfe02a.wo_location$+sfe02a.op_code$+sfe02a.require_date$+sfe02a.wo_no$+sfe02a.op_seq$
                                remove (sfe03_dev,key=k9$,dom=*break)
                                break
rem --- Materials Here
                        case 2; k9$=firm_id$+"E"+sfe02a.wo_location$+sfe01a.warehouse_id$+sfe02a.reserved_str$(1,20)+sfe02a.wo_no$+sfe02a.op_seq$
                                remove (sfe03_dev,key=k9$,dom=*break)
                                break
 rem --- Subcontracts Here
                        case 3; k9$=firm_id$+"F"+sfe02a.wo_location$+sfe02a.code_desc$(1,6)+sfe02a.wo_no$+sfe02a.op_seq$
                                remove (sfe03_dev,key=k9$,dom=*break)
                                break
                    swend

rem ----------- WOE-02/22/32 Here
                    remove (sfreq_dev,key=sfreq_key$,dom=*continue)
                wend

                if sfreq_dev=sfe02_dev then
                    sfreq_dev=sfe22_dev
                    dim sfreq_key$:sfe22_key_tpl$   
                else
                    if sfreq_dev=sfe22_dev then
                        sfreq_dev=sfe32_dev
                        dim sfreq_key$:sfe32_key_tpl$   
                    endif
                endif
            wend



rem --- WOT-03/23/33 And wot-12 Here

            wohist_dev=sft03_dev
            if pos(sfe01a.WO_TYPE$=t0$,2)>0 then
                d9$=sfe01a.CLOSED_DATE$
            else
                d9$=p9$
            endif


            dim wohist_key$:sft03_key_tpl$   
            while more
              read (wohist_dev,key=sfe01a.FIRM_ID$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$,dom=*next)
              while more
                    wohist_key$=key(wohist_dev,end=*break)
                    if wohist_key.FIRM_ID$+wohist_key.WO_LOCATION$+wohist_key.WO_NO$<>sfe01a.FIRM_ID$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$ then break
                    if wohist_key.TRANS_DATE$>d9$ then break

                    if pos(ivs01a.lotser_flag$="LS")<>0 then
                        read (sft12_dev,key=wohist_key$,dom=*next)

                        while more
                            k8$=key(sft12_dev,end=*break)
                            if pos(wohist_key$=k8$)<>1 then break
                            remove (sft12_dev,key=k8$,dom=*continue)
                        wend

                    endif

                    remove (wohist_dev,key=wohist_key$,dom=*continue)
                wend


                if wohist_dev=sft03_dev then
                    wohist_dev=sft23_dev
                    dim wohist_key$:sft23_key_tpl$   
                else
                    if wohist_dev=sft23_dev then
                        wohist_dev=sft33_dev
                        dim wohist_key$:sft33_key_tpl$   
                    endif
                endif
                remove (sfe01_dev,key=sfe01a.FIRM_ID$+sfe01a.WO_LOCATION$+sfe01a.WO_NO$,dom=*next)
            wend

rem ---Main Loop Ends
        wend

rem --- End

done:
        goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem ----#endinclude std_functions.src

rem ----#include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem ----#endinclude std_error.src
rem ----#include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)
        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem ----#endinclude std_missing_params.src

rem ----#include std_end.src
std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release
rem ----#endinclude std_end.src

        end
