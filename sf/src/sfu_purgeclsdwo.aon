rem --- Closed Work Order Purge - Date Entry
rem --- Program sfu_purgeclsdwo.aon v8.0.0 15Jan2008 (sfu_fa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/15/2008 02:48:13)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM", err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL", err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO", err=*next)
    milestone=num(stbl("+MILESTONE", err=*next), err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    num_files=15
	dim open_tables$[1:num_files], open_opts$[1:num_files], open_chans$[1:num_files], open_tpls$[1:num_files]

	open_tables$[2]="IVS_PARAMS",     open_opts$[2] = "OTA"
    open_tables$[3]="SFS_PARAMS",     open_opts$[3] = "OTA"
	open_tables$[4]="SFE_WOMASTR",    open_opts$[4] = "OTA"
	open_tables$[5]="SFE_WOOPRTN",    open_opts$[5] = "OTA"
	rem open_tables$[7]="",    open_opts$[7] = ""
	open_tables$[8]="SFE_WOMATL",     open_opts$[8] = "OTA"
    open_tables$[9]="SFE_WOSUBCNT",   open_opts$[9] = "OTA"
    open_tables$[10]="SFT_CLSOPRTR",  open_opts$[10] = "OTA"
    open_tables$[12]="SFT_CLSMATTR",  open_opts$[12] = "OTA"
    open_tables$[13]="SFT_CLSSUBTR",  open_opts$[13] = "OTA"
	
	gosub open_tables
		
    ivs01a_dev = num(open_chans$[2])
    sfs01a_dev = num(open_chans$[3])    
	sfe01_dev  = num(open_chans$[4])
    sfe02_dev  = num(open_chans$[5])
    sfe22_dev  = num(open_chans$[8])
    sfe32_dev  = num(open_chans$[9])
    sft03_dev  = num(open_chans$[10])
    sft23_dev  = num(open_chans$[12])
    sft33_dev  = num(open_chans$[13])

rem --- Dimension string templates

	dim ivs01a$:open_tpls$[2]  
	dim sfs01a$:open_tpls$[3]
    dim sfe01a$:open_tpls$[4]  
	dim sfe02a$:open_tpls$[5]  
	dim sfe22a$:open_tpls$[8]  
	dim sfe32a$:open_tpls$[9]  
    dim sft03a$:open_tpls$[10] 
	dim sft23a$:open_tpls$[12]  
    dim sft33a$:open_tpls$[13]

rem --- Assign form input values to local variables

    purge_date$=Option!.getOptionData("PURGE_DATE")

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev, key=ivs01a_key$, err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev, key=sfs01a_key$, err=std_missing_params) sfs01a$

rem --- Parameters

rem --- Init Data

rem --- Additional File Opens

    if pos(ivs01a.lotser_flag$="LS") then 
		num_files=2
		dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
		
		open_tables$[1]="SFE_WOLOTSER",open_opts$[1]="OTA"
		open_tables$[2]="SFT_CLSLSTRN",open_opts$[2]="OTA"
		gosub open_tables
		sfe06_dev=num(open_chans$[1])
		sft12_dev=num(open_chans$[2])
		
        dim sfe06a$:open_tpls$[1]
		dim sft12a$:open_tpls$[2]

    endif  

rem --- Options


rem ---Run Overlay

    run pgmdir$+"sfu_purgeclsdwo_o1.aon"

rem --------------

open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
       msg_id$="ENTRY_OPEN_ERROR"
       dim msg_tokens$[1]
       msg_tokens$[1]=open_status$
       gosub disp_message
       rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
       release
    endif

    return
    
disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return
	
rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
