rem --- Work Order Time Sheet Register (Summary)
rem --- Program sfr_timesheet_o1 v8.0.0 04Jan2008 (wor_cb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 10:55:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Init Data
            
    width=132
    headings$[2]=Translate!.getTranslation("AON_WORK_ORDER_SUMMARY_REPORT")
    call pgmdir$+"adc_sizemask.aon",m1$,m1,m1+2,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,m2+2,15
    dim u[5]
    t0$="",t1$="",t9$=""
    step_heading=0
    precision ivs01_precision

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()

    rem --Column headings
    columns = 10
    dim columns$[columns,10]
    columns$[0,0]="",                                                  columns$[0,1]="C", columns$[0,2]="2"
    columns$[1,0]=Translate!.getTranslation("AON_OPRTN^STEP"),         columns$[1,1]="C", columns$[1,2]="4"
    columns$[2,0]=Translate!.getTranslation("AON_OPRTN^CODE"),         columns$[2,1]="C", columns$[2,2]=str(max(len(sfw11a.op_code$),4))
    columns$[3,0]=Translate!.getTranslation("AON_OPRTN_DESC"),         columns$[3,1]="C", columns$[3,2]=str(max(len(wooprtn.code_desc$),20))
    columns$[4,0]=Translate!.getTranslation("AON_DATE"),               columns$[4,1]="C", columns$[4,2]="8"
    columns$[5,0]=Translate!.getTranslation("AON_COMPLETED^QUANTITY"), columns$[5,1]="N", columns$[5,2]=str(max(m2,15)), columns$[5,3]=m2$, columns$[5,10]="T"
    columns$[6,0]=Translate!.getTranslation("AON_SETUP^HRS"),          columns$[6,1]="N", columns$[6,2]=str(max(m2,15)), columns$[6,3]=m2$, columns$[6,10]="T"
    columns$[7,0]=Translate!.getTranslation("AON_RUN^HRS"),            columns$[7,1]="N", columns$[7,2]=str(max(m2,15)), columns$[7,3]=m2$, columns$[7,10]="T"
    columns$[8,0]=Translate!.getTranslation("AON_DIRECT")+"^"+Translate!.getTranslation("AON_TOTAL")
                                                                       columns$[8,1]="N", columns$[8,2]=str(max(m1,15)), columns$[8,3]=m1$, columns$[8,10]="T"
    columns$[9,0]=Translate!.getTranslation("AON_OVHD")+"^"+Translate!.getTranslation("AON_TOTAL")
                                                                       columns$[9,1]="N", columns$[9,2]=str(max(m1,15)), columns$[9,3]=m1$, columns$[9,10]="T"
    columns$[10,0]=Translate!.getTranslation("AON_EXPENSE")+"^"+Translate!.getTranslation("AON_TOTAL")
                                                                       columns$[10,1]="N",columns$[10,2]=str(max(m1,15)),columns$[10,3]=m1$,columns$[10,10]="T"

rem --- Start progress meter and position header file

    recs=0
    call pgmdir$+"adc_progress.aon","N","","","","",0,sfw11a_dev,1,meter_num,status
    read (sfw11a_dev,key=firm_id$,dom=*next)

rem --- Main Read (header file)

    while 1
        read record (sfw11a_dev,end=*break) sfw11a$
        if sfw11a.firm_id$<>firm_id$ then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        recs=recs+1

        rem --- Breaks
        if sfw11a.wo_no$<>t0$ then gosub work_order_tot
        if sfw11a.op_seq$<>t1$ then gosub step_sub_tot

        rem --- Print step line
        if step_heading then
            rem --- Step Heading
            xwk = fnblank(columns+1); rem --- blank line
            xwk = fnblank(1)
            OutVect!.addItem(t1$)
            OutVect!.addItem(sfw11a.op_code$)
            OutVect!.addItem(sfw11a.code_desc$)
            step_heading=0
        else
            xwk = fnblank(columns-6)
        endif
        OutVect!.addItem(fndate$(sfw11a.trans_date$))
        OutVect!.addItem(str(sfw11a.complete_qty:m2$))
        OutVect!.addItem(str(sfw11a.setup_time:m2$))
        OutVect!.addItem(str(sfw11a.hrs:m2$))
        OutVect!.addItem(str(sfw11a.act_dir_amt:m1$))
        OutVect!.addItem(str(sfw11a.act_ovhd_amt:m1$))
        OutVect!.addItem(str(sfw11a.labor_cost:m1$))

        l1=l1+1
        l2=l2+1

        for x=0 to 5
            if x=0 then
                t[0]=t[0]+sfw11a.hrs
                s[0]=s[0]+sfw11a.hrs
                u[0]=u[0]+sfw11a.hrs
            endif
            if x=1 then
                t[1]=t[1]+sfw11a.act_dir_amt
                s[1]=s[1]+sfw11a.act_dir_amt
                u[1]=u[1]+sfw11a.act_dir_amt
            endif
            if x=2 then
                t[2]=t[2]+sfw11a.act_ovhd_amt
                s[2]=s[2]+sfw11a.act_ovhd_amt
                u[2]=u[2]+sfw11a.act_ovhd_amt
            endif
            if x=3 then
                t[3]=t[3]+sfw11a.labor_cost
                s[3]=s[3]+sfw11a.labor_cost
                u[3]=u[3]+sfw11a.labor_cost
            endif
            if x=4 then
                t[4]=t[4]+sfw11a.setup_time
                s[4]=s[4]+sfw11a.setup_time
                u[4]=u[4]+sfw11a.setup_time
            endif
            if x=5 then
                t[5]=t[5]+sfw11a.complete_qty
                s[5]=s[5]+sfw11a.complete_qty
                u[5]=u[5]+sfw11a.complete_qty
            endif
        next x

    wend

rem --- End

    t9$="U"
    gosub work_order_tot
    TotVect!.addItem(str(OutVect!.size()/(columns+1)))
    OutVect!.addItem(Translate!.getTranslation("AON_GRAND")+" "+Translate!.getTranslation("AON_TOTAL")+":")
    xwk = fnblank(columns-5)
    OutVect!.addItem(str(u[4]:m2$))
    OutVect!.addItem(str(u[0]:m2$))
    OutVect!.addItem(str(u[1]:m1$))
    OutVect!.addItem(str(u[2]:m1$))
    OutVect!.addItem(str(u[3]:m1$))

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

rem --- Destroy the progress meter and run the next overlay

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

    update$=pgmdir$+"sfu_timesheet.aon"
    overlay$=update$
    if gl$="Y" then overlay$=pgmdir$+"glr_recap.aon"
    next_overlay$=overlay$
    if update$=""
        goto std_exit_no_update
    else
        goto std_exit
    endif

rem --- Standard AddonSoftware functions (01Mar2006)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

sub_heading: rem --- Sub Heading

    OutVect!.addItem(Translate!.getTranslation("AON_WORK_ORDER:_")+t0$+"  "+d1$)
    xwk = fnblank(columns)

    return

work_order_tot: rem --- Work Order Total

    if t0$<>"" 
        if t9$="" then let t9$="T"
        gosub step_sub_tot
        if t9$="T" then let t9$="",t1$=""
        if l1>1 
            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            xwk = fnblank(1)
            OutVect!.addItem(Translate!.getTranslation("AON_WORK_ORDER_")+t0$+Translate!.getTranslation("AON__TOTALS:"))
            xwk = fnblank(columns-7)
            OutVect!.addItem(str(t[5]:m2$))
            OutVect!.addItem(str(t[4]:m2$))
            OutVect!.addItem(str(t[0]:m2$))
            OutVect!.addItem(str(t[1]:m1$))
            OutVect!.addItem(str(t[2]:m1$))
            OutVect!.addItem(str(t[3]:m1$))
            xwk = fnblank(columns+1); rem --- blank line
        endif
    endif

    t0$=sfw11a.wo_no$
    if t9$<>"" then return
    dim t[5]
    l1=0

    wo_no$=t0$
    gosub get_wo

    gosub sub_heading

step_sub_tot:rem --- Step Sub Total

    if t1$<>"" 
        if l2>1 
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        xwk = fnblank(2)
        OutVect!.addItem(Translate!.getTranslation("AON_STEP_")+t1$+Translate!.getTranslation("AON__TOTAL:_"))
        xwk = fnblank(columns-8)
        OutVect!.addItem(str(s[5]:m2$))
        OutVect!.addItem(str(s[4]:m2$))
        OutVect!.addItem(str(s[0]:m2$))
        OutVect!.addItem(str(s[1]:m1$))
        OutVect!.addItem(str(s[2]:m1$))
        OutVect!.addItem(str(s[3]:m1$))
        endif
    endif

    if t9$<>"" then return
    dim s[5]
    t1$=sfw11a.op_seq$
    l2=0
    step_heading=1
    return

get_wo: rem --- Get Work Order

    dim d1$(30)
    d1$(1)=Translate!.getTranslation("AON_***_NOT_ON_FILE_***")
    dim sfe01a$:fattr(sfe01a$)
    find record (sfe01a_dev,key=firm_id$+"  "+wo_no$,dom=*next) sfe01a$
    if sfe01a.wo_category$="I"
        dim ivm01a$:fattr(ivm01a$)
        find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=*next) ivm01a$
        if cvs(ivm01a.item_desc$,2)<>"" then
            sfe01a.description_01$(1)=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        endif
    endif
    if cvs(sfe01a.description_01$,2)<>"" then d1$(1)=sfe01a.description_01$
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit_no_report:

    OutVect!=null();rem nothing to print, or some other err such that no report
    
std_exit_no_update:

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
