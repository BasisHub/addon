rem --- Work Order Time Sheet Register (Summary)
rem --- Program sfr_cb v8.0.0 04Jan2008 (sfr_cb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 10:55:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Init Data

    dim u[5],j1$(40," ")
    l9=59
    l=l9+1,t1$="",t0$="",t9$=""
    headings=3
    headings$[2]="Work Order Summary Report"
    if pos("("=m1$)=1 then let m1$=m1$(2)
    if pos(")"=m1$)>0 then let m1$=m1$(1,pos(")"=m1$)-1)
    if pos("("=m2$)=1 then let m2$=m2$(2)
    if pos(")"=m2$)>0 then let m2$=m2$(1,pos(")"=m2$)-1)
    m2$="##"+m2$
    m1$="##"+m1$
    m0=len(m0$)
    m1=len(m1$),m2=len(m2$)
    call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
    call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15
    dim j2$(m1*3+m2*2,"="),j$(m1*3+m2*3,"-")
    precision ivs01_precision
    more=1

rem --- Background

    print @(0,3),'ce',
    call pgmdir$+"adc_progress.aon","N","","","","",0,sfw11a_dev,1,meter_num,status

rem --- Init Read

    read (sfw11a_dev,key=firm_id$,dom=*next)

rem --- Main Read

    while more

        read record (sfw11a_dev,end=done) timesheet$
        if timesht.firm_id$<>firm_id$ then break

    rem --- Breaks

        if timesht.wo_no$<>t0$ then gosub work_order_tot
        if timesht.trans_date$<>t1$ then gosub step_sub_tot
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
             

    rem --- Print

        if l>l9 then gosub sub_heading
        print (printer_dev)@(32),fndate$(timesht.sequance_no$+timesht.op_seq$),@(41),timesht.complete_qty:m2$,
:       timesht.setup_time:m2$,timesht.hrs:m2$,timesht.direct_rate:m1$,timesht.ovhd_rate:m1$,timesht.extended_amt:m1$
        l1=l1+1
        l2=l2+1
        for x=0 to 5
            t[x]=t[x]+w[x]
            s[x]=s[x]+w[x],u[x]=u[x]+w[x]
        next x

    wend

done: rem --- End

    t9$="U"
    gosub work_order_tot
    if l=3>l9 then gosub report_heading
    print (printer_dev)@(41+m2),j$(1,m2*2+m1*3),'lf',@(0),"Grand Total: ",@(41+m2),u[4]:m2$,u[0]:m2$,u[1]:m1$,u[2]:m1$,u[3]:m1$
    print (printer_dev)@(41+m2),j2$

rem --- Run next overlay

    update$="sfu_timesheet.aon"
    width=h0,page=h
    if gl$="Y" then run pgmdir$+"glr_recap.aon"
    run update$

report_heading: rem --- Report Heading

    l=headings+3
    call pgmdir$+"adc_rpthead.aon",printer_dev,headings$[all],headings,h,h0,when$,clock$,status
    if status then exitto std_exit

    print (printer_dev)@(41+m2-4),"Qty",@(41+m2*2-6),"Setup",@(41+m2*3+m1-7),"Direct",@(41+m2*3+m1*2-6),"Ov'hd",
:   @(41+m2*3+m1*3-7),"Expense"
    print (printer_dev)@(2),"Step Op Code",@(34),"Date",@(41+m2-9),"Complete",@(41+m2*2-6),"Hours",@(41+m2*3-6),
:   "Hours",@(41+m2*3+m1-6),"Labor",@(41+m2*3+m1*2-6),"Labor",@(41+m2*3+m1*3-6),"Total"
    return

sub_heading:   rem --- Sub Heading

    if l+2>l9 then gosub report_heading
    print (printer_dev)'lf',@(0),"Work Order: ",t0$,"  ",d1$
    l=l+2
    return

step_heading: rem --- Step Heading

    if l+2>l9 then gosub report_heading
    print (printer_dev)'lf',@(3),t1$,"  ",x0$,"  ",x1$,
    l=l+2
    return

work_order_tot: rem --- Work Order Total

    if t0$<>"" 

        if t9$="" then let t9$="T"
        gosub step_sub_tot
        if t9$="T" then let t9$="",t1$=""
        if l1>1 

            if l+2>l9 then gosub step_heading
            print (printer_dev)@(41),j$(1,m2*3+m1*3),'lf',@(3),"Work Order ",t0$," Totals:",@(41),t[5]:m2$,t[4]:m2$,t[0]:m2$,
:           t[1]:m1$,t[2]:m1$,t[3]:m1$
            l=l+2

        endif
    endif

    t0$=timesht.wo_no$
    if t9$<>"" then return
    dim t[5]
    l1=0

    find record (sfe01_dev,key=firm_id$+"  "+t0$,dom=*next) sfe01a$
    d1$=sfe01a.description$
    if sfe01a.wo_category$="I" 

        find record (ivm01_dev,key=firm_id$+sfe01a.item_id$,dom=label1) ivm01a$
        sfe01a.description_01$=ivm01a.description$(1,min(desc[1],30))

    endif

label1:        

    gosub sub_heading

step_sub_tot:rem --- Step Sub Total

    if t1$<>"" 

        if l>l9 then gosub step_heading
        if l2>1 

            print (printer_dev)@(41),j$(1,m2*3+m1*3),'lf',@(12),"Step ",t1$," Total: ",@(41),s[5]:m2$,s[4]:m2$,s[0]:m2$,s[1]:m1$,
:           s[2]:m1$,s[3]:m1$
            l=l+2

        endif
    endif

    if t9$<>"" then return
    dim s[5]
    t1$=timesht.trans_date$
    l2=0,x0$="   ",x1$="*** Not On File ***"
    find record (sfe02_dev,key=firm_id$+"  "+t0$+"A"+t1$,dom=end1) sfe02a$
    x0$=sfe02a.op_code$
    x1$=sfe02a.code_desc$(1,18)

end1:

    gosub step_heading
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
