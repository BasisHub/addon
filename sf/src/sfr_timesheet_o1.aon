rem --- Work Order Time Sheet Register (Summary)
rem --- Program sfr_cb v8.0.0 04Jan2008 (sfr_cb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 10:55:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Init Data
            
        dim u[5],j1$(40," ")
        l9=59
        l=l9+1,t1$="",t0$="",t9$=""
        headings=3
        headings$[2]="Work Order Summary Report"
        if pos("("=m1$)=1 then let m1$=m1$(2)
        if pos(")"=m1$)>0 then let m1$=m1$(1,pos(")"=m1$)-1)
        if pos("("=m2$)=1 then let m2$=m2$(2)
        if pos(")"=m2$)>0 then let m2$=m2$(1,pos(")"=m2$)-1)
        m2$="##"+m2$
        m1$="##"+m1$
        m0=len(m0$)
        m1=len(m1$),m2=len(m2$)
        call pgmdir$+"adc_sizemask.aon",m1$,m1,10,15
        call pgmdir$+"adc_sizemask.aon",m2$,m2,10,15
        dim j2$(m1*3+m2*2,"="),j$(m1*3+m2*3,"-")
        precision ivs01_precision
        more=1

rem --Column headings
        dim columns$[7,10]
        columns = 7
        columns$[0,0]="Step Op Code",       columns$[0,1]="C",columns$[0,2]="20"
        columns$[1,0]="Date",               columns$[1,1]="C",columns$[1,2]="8"
        columns$[2,0]="Qty^Complete",       columns$[2,1]="N",columns$[2,2]="8",columns$[2,10]="T"
        columns$[3,0]="Setup^Hours",        columns$[3,1]="N",columns$[3,2]="8",columns$[3,10]="T"
        columns$[4,0]="Hours",              columns$[4,1]="N",columns$[4,2]="8",columns$[4,10]="T"
        columns$[5,0]="Direct^Labor",       columns$[5,1]="N",columns$[5,2]="8",columns$[5,10]="T"
        columns$[6,0]="Ov'hd^Labor",        columns$[6,1]="N",columns$[6,2]="8",columns$[6,10]="T"
        columns$[7,0]="Expense^Total",      columns$[7,1]="N",columns$[7,2]="8",columns$[7,10]="T"


rem --- Background

        print @(0,3),'ce',
        call pgmdir$+"adc_progress.aon","N","","","","",0,sfw11a_dev,1,meter_num,status

rem --- Init Read
        

    read (sfw11a_dev,key=firm_id$,dom=*next)

rem --- Main Read
    dim timesht$:templates$[15]
    while more
        
        read record (sfw11a_dev,end=*break) timesht$
        
        if timesht.firm_id$<>firm_id$ then break
        
    rem --- Breaks

        if timesht.wo_no$<>t0$ then gosub work_order_tot
        if timesht.trans_date$<>t1$ then gosub step_sub_tot
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
             

    rem --- Print

        if l>l9 then gosub sub_heading
        xwk = fnblank(1)
        OutVect!.addItem(fndate$(timesht.trans_date$))
        OutVect!.addItem(str(timesht.complete_qty:m2$))
        OutVect!.addItem(str(timesht.setup_time:m2$))
        OutVect!.addItem(str(timesht.hrs:m2$))
        OutVect!.addItem(str(timesht.act_dir_amt:m1$))
        OutVect!.addItem(str(timesht.act_ovhd_amt:m1$))
        OutVect!.addItem(str(timesht.labor_cost:m1$))

        dim t[5]
        l1=l1+1
        l2=l2+1

            for x=0 to 5
                if x=0 then
                    t[0]=t[0]+timesht.hrs
                    s[0]=s[0]+timesht.hrs
                    u[0]=u[0]+timesht.hrs
                endif
                if x=1 then
                    t[1]=t[1]+timesht.act_dir_amt
                    s[1]=s[1]+timesht.act_dir_amt
                    u[1]=u[1]+timesht.act_dir_amt
                endif
                if x=2 then
                    t[2]=t[2]+timesht.act_ovhd_amt
                    s[2]=s[2]+timesht.act_ovhd_amt
                    u[2]=u[2]+timesht.act_ovhd_amt
                endif
                if x=3 then
                    t[3]=t[3]+timesht.labor_cost
                    s[3]=s[3]+timesht.labor_cost
                    u[3]=u[3]+timesht.labor_cost
                endif
                if x=4 then
                    t[4]=t[4]+timesht.setup_time
                    s[4]=s[4]+timesht.setup_time
                    u[4]=u[4]+timesht.setup_time
                endif
                if x=5 then
                    t[5]=t[5]+timesht.complete_qty
                    s[5]=s[5]+timesht.complete_qty
                    u[5]=u[5]+timesht.complete_qty
                endif
            next x

    wend

rem --- End

            t9$="U"
            gosub work_order_tot
            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            OutVect!.addItem("Grand Total: ")
            xwk = fnblank(2)
            OutVect!.addItem(str(u[4]:m2$))
            OutVect!.addItem(str(u[0]:m2$))
            OutVect!.addItem(str(u[1]:m1$))
            OutVect!.addItem(str(u[2]:m1$))
            OutVect!.addItem(str(u[3]:m1$))
            xwk = fnblank(8)

rem --- Run next overlay


            update$=pgmdir$+"sfu_timesheet.aon"
            width=h0,page=h
            overlay$=update$
            if gl$="Y" overlay$=pgmdir$+"glr_recap.aon"
            out_action$="PRT-PDF"
            next_overlay$=overlay$
            goto std_exit
            run update$


sub_heading:   rem --- Sub Heading

            OutVect!.addItem("Work Order: "+t0$+"  "+d1$)
            xwk = fnblank(7)
            l=l+2
            return

step_heading: rem --- Step Heading

            OutVect!.addItem(t1$+"  "+x0$+"  "+x1$)
            xwk = fnblank(7)
            l=l+2
            return

work_order_tot: rem --- Work Order Total

    if t0$<>"" 

        if t9$="" then let t9$="T"
        gosub step_sub_tot
        if t9$="T" then let t9$="",t1$=""
        if l1>1 
            TotVect!.addItem(str(OutVect!.size()/(columns+1)))
            OutVect!.addItem("Work Order "+t0$+" Totals:")
            xwk = fnblank(1)
            OutVect!.addItem(str(t[5]:m2$))
            OutVect!.addItem(str(t[4]:m2$))
            OutVect!.addItem(str(t[0]:m2$))
            OutVect!.addItem(str(t[1]:m1$))
            OutVect!.addItem(str(t[2]:m1$))
            OutVect!.addItem(str(t[3]:m1$))

            if l+2>l9 then gosub step_heading
            l=l+2

        endif
    endif

        t0$=timesht.wo_no$
        if t9$<>"" then return
        dim t[5]
        l1=0

        find record (sfe01a_dev,key=firm_id$+"  "+t0$,dom=*next) sfe01a$
        d1$=sfe01a.description_01$
        if sfe01a.wo_category$="I" 

            find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=label1) ivm01a$
            sfe01a.description_01$=ivm01a.description$(1,min(desc[1],30))

        endif

label1:        

        gosub sub_heading

step_sub_tot:rem --- Step Sub Total

    if t1$<>"" 

        if l>l9 then gosub step_heading
        if l2>1 
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        OutVect!.addItem("Step "+t1$+" Total: ")
        xwk = fnblank(3)
        OutVect!.addItem(str(s[5]:m2$))
        OutVect!.addItem(str(s[4]:m2$))
        OutVect!.addItem(str(s[0]:m2$))
        OutVect!.addItem(str(s[1]:m1$))

            l=l+2

        endif
    endif

        if t9$<>"" then return
        dim s[5]
        t1$=timesht.trans_date$
        l2=0,x0$="   "

        find record (sfe02a_dev,knum=1,key=firm_id$+"     "+t1$+t0$,dom=end1) sfe02a$
        x0$=sfe02a.op_code$
        x1$=sfe02a.code_desc$

end1:

    gosub step_heading
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

rem    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
