rem --- WO Period End Update - Parameters
rem --- Program sfu_ea v8.0.0 23Jan2008 (sfu_ea)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/23/2008 04:07:24)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Use statements

    use ::ado_func.src::func

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
	milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=13,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="gls_calendar",ids$[1]="GLS_CALENDAR"
    files$[2]="ivs_params",ids$[2]="IVS_PARAMS"
    files$[3]="sfe-01",ids$[3]="SFE_WOMASTR"
    files$[4]="sfm-10",ids$[4]="SFC_WOTYPECD"
    files$[5]="sfs_params",ids$[5]="SFS_PARAMS"
    files$[6]="sft-01",ids$[6]="SFT_OPNOPRTR"
    files$[7]="sft-03",ids$[7]="SFT_CLSOPRTR"
    files$[8]="sft-11",ids$[8]="SFT_OPNLSTRN"
    files$[9]="sft-12",ids$[9]="SFT_CLSLSTRN"
    files$[10]="sft-21",ids$[10]="SFT_OPNMATTR"
    files$[11]="sft-23",ids$[11]="SFT_CLSMATTR"
    files$[12]="sft-31",ids$[12]="SFT_OPNSUBTR"
    files$[13]="sft-33",ids$[13]="SFT_CLSSUBTR"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status

    if status goto std_exit_no_update
    gls_calendar_dev=channels[1]
    ivs01a_dev=channels[2]
    sfe01a_dev=channels[3]
    sfm10a_dev=channels[4]
    sfs01a_dev=channels[5]
    sft01a_dev=channels[6]
    sft03a_dev=channels[7]
    sft11a_dev=channels[8]
    sft12a_dev=channels[9]
    sft21a_dev=channels[10]
    sft23a_dev=channels[11]
    sft31a_dev=channels[12]
    sft33a_dev=channels[13]

rem --- Dimension string templates

    dim gls_calendar$:templates$[1],ivs01a$:templates$[2],sfe01a$:templates$[3],
:       sfm10a$:templates$[4],sfs01a$:templates$[5],sft01a$:templates$[6],
:       sft03a$:templates$[7],sft11a$:templates$[8],sft12a$:templates$[9],
:       sft21a$:templates$[10],sft23a$:templates$[11],sft31a$:templates$[12],
:       sft33a$:templates$[13]

rem --- Retrieve parameter records

    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$
    find record (gls_calendar_dev,key=firm_id$+sfs01a.current_year$,err=*next) gls_calendar$
    if cvs(gls_calendar.firm_id$,2)="" then
        msg_id$="AD_NO_FISCAL_CAL"
        dim msg_tokens$[1]
        msg_tokens$[1]=sfs01a.current_year$
        gosub disp_message
        goto std_exit_no_update
    endif

    dim g[4]

rem --- Init Data

	call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","A","",m1$,0,m1
    more=1

rem --- Open Serial Files

    if pos(ivs01a.lotser_flag$="LS")<>0
		files=2,begfile=1,endfile=files
		dim files$[files],options$[files],ids$[files],templates$[files],channels[files]	
        files$[1]="sft-11"
        files$[2]="sft-12"
		call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       	                            ids$[all],templates$[all],channels[all],batch,status

        if status then goto std_exit_no_update
        sft11_dev=channels[1]
        sft12_dev=channels[2]
    endif

rem --- Determine Period Limits

	current_period=num(sfs01a.current_per$)
	current_year=num(sfs01a.current_year$)
	call pgmdir$+"adc_perioddates.aon",current_period,current_year,begdate$,enddate$,table_chans$[all],status
	if status then goto std_exit_no_update

rem --- Get user approval to proceed

    msg_id$="CLOSE_PERIOD"
    dim msg_tokens$[2]
    msg_tokens$[0]=str(current_period)
    msg_tokens$[1]=func.formatDate(begdate$)
    msg_tokens$[2]=func.formatDate(enddate$)
    gosub disp_message
    if msg_opt$="N" goto std_exit_no_update

rem --- Overlay

    wo_types$=""
    read (sfm10a_dev,key=firm_id$+"A",dom=*next)
    while more
        read record (sfm10a_dev,end=*break) sfm10a$
        if pos(firm_id$=sfm10a.firm_id$)<>1 then break
        if sfm10a.wo_category$="R" then let wo_types$=wo_types$+sfm10a.wo_type$
    wend
    run pgmdir$+"sfu_periodend_o1.aon"

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
