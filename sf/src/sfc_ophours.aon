rem --- Operations Hours Between Days(Public/Called)
rem --- Program sfc_ba v8.0.0 01Feb2008 (sfc_ba)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/01/2008 12:45:34)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error
    enter v0$,v1$,v0,op$,flag$

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
	dir_syp$=stbl("+DIR_SYP")

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open File(s)

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="SFM_OPCALNDR",open_opts$[1]="OTA"

    gosub open_tables
	
	sfm04_dev=num(open_chans$[1])
	dim sfm04a$:open_tpls$[1]

rem --- Init Data

    flag$=""
    v0=0
	more=1

rem --- Check Validity Of From Date

    v$=v0$
    x$=""
	x0=0

    call pgmdir$+"adc_daydates.aon",v$,x$,x0
	if v$="N" goto done_exit

    rem --- Check Validity Of Through Date

	v$=v1$
	x$=""
	x0=0
	call pgmdir$+"adc_daydates.aon",v$,x$,x0
	if v$="N" goto done_exit

rem --- Check Forward Or Backward Calc

	v$=v0$
	w$=v1$
	if v0$>v1$
		gosub calc_back
	else
		gosub calc_fwd
	endif

done: rem --- Done - Successful

	goto std_exit

done_exit: rem --- Done - Unsuccessful

    flag$="Y"
    goto std_exit

calc_back: rem --- Calculate Backwards

    f_yr=num(v$(1,4))
    f_mth=num(v$(5,2))
    f_day=num(v$(7,2))

    flg=0
    dim hrsperday[31]

    while more
		dim sfm04a$:fattr(sfm04a$)
		flag=1
        find record (sfm04_dev,key=firm_id$+op$+str(f_yr:"0000")+str(f_mth:"00"),dom=*break) sfm04a$
		flag=0
		n=0
        for x=f_day to 1 step -1
            n=n+1
            hrsperday[n]=num(field(sfm04a$,"hrs_per_day_"+str(x:"00")))
            if hrsperday[n]<0
				flag=1
				break
			endif
            if w$(1,6)=sfm04a.year$+sfm04a.month$ and num(w$(7,2))>x
                break
            endif
            v0=v0-hrsperday[n]
        next x
		if flag=1 break
        x$=""
        call pgmdir$+"adc_daydates.aon",str(f_yr:"0000")+str(f_mth:"00")+"01",x$,-1
        f_yr=num(x$(1,4))
        f_mth=num(x$(5,2))
        f_day=num(x$(7,2))
        if w$(1,6)>x$(1,6) then break
    wend

	if flag=1 goto oper_dt_nt_sched
    return

oper_dt_nt_sched: rem --- Operation Date Not Scheduled

    flag$="Y"
    return

calc_fwd: rem --- Calculate Forwards

    f_yr=num(v$(1,4))
    f_mth=num(v$(5,2))
    f_day=num(v$(7,2))

    flg=0
	dim hrsperday[31]
	
    while more
		dim sfm04a$:fattr(sfm04a$)
		flag=1
        find record (sfm04_dev,key=firm_id$+op$+str(f_yr)+str(f_mth:"00"),dom=*break) sfm04a$
		flag=0
        if sfm04a.days_in_mth=0 
			flag=1
			break
		endif
        n=0
        for x=f_day to sfm04a.days_in_mth
            n=n+1
            hrsperday[n]=num(field(sfm04a$,"hrs_per_day_"+str(x:"00")))
            if hrsperday[n]<0
				flag=1
				break
			endif
            if w$(1,6)<sfm04a.year$+sfm04a.month$
                flg=1
                break
            endif
            if w$(1,6)=sfm04a.year$+sfm04a.month$ and num(w$(7,2))<x
                flg=1
                break
            endif
            v0=v0+hrsperday[n]
        next x
        if flg=1 then break
        f_mth=f_mth+1
        f_day=1
        if f_mth>12 then let f_yr=f_yr+1,f_mth=1
    wend

	if flag=1 goto dt_nt_sched
	
	return

dt_nt_sched: rem --- Date Not Scheduled

    flag$="Y"
    return

open_tables:rem -----<Open Tables

    call dir_syp$+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],table_chans$[all],open_batch,open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto std_exit
    endif

    return

disp_message:rem --- Display Message Dialog

    call dir_syp$+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_PGM",err=std_missing_params_exit)+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

rem --- Close File(s)

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="SFM_OPCALNDR",open_opts$[1]="C"

    gosub open_tables
	
    exit
rem #endinclude std_exit.src

    end
