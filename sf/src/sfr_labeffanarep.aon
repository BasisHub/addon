rem --- Labor Efficiency Analysis Report
rem --- Program sfr_fa v8.0.0 04Jan2008 (sfr_fa)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:28:51)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=12,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="bmm-08",ids$[1]="BMC_OPCODES"
    files$[2]="gls_params",ids$[2]="GLS_PARAMS"
    files$[3]="ivm-01",ids$[3]="IVM_ITEMMAST"
    files$[4]="ivs_params",ids$[4]="IVS_PARAMS"
    files$[5]="sfe-01",ids$[5]="SFE_WOMASTR"
    files$[6]="sfe-02",ids$[6]="SFE_WOOPRTN"
    files$[7]="sfm-02",ids$[7]="SFC_OPRTNCOD"
    files$[8]="sfm-10",ids$[8]="SFC_WOTYPECD"
    files$[9]="sfs_params",ids$[9]="SFS_PARAMS"
    files$[10]="sft-01",ids$[10]="SFT_OPNOPRTR"
    files$[11]="sft-03",ids$[11]="SFT_CLSOPRTR"
    files$[12]="sfw-05",ids$[12]="SFW_LABOREFF"

    options$[12]="C"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    bmm08a_dev=channels[1]
    gls01a_dev=channels[2]
    ivm01a_dev=channels[3]
    ivs01a_dev=channels[4]
    sfe01_dev=channels[5]
    sfe02_dev=channels[6]
    sfm02a_dev=channels[7]
    sfm10a_dev=channels[8]
    sfs01a_dev=channels[9]
    sft01_dev=channels[10]
    sft03a_dev=channels[11]
    sfw05a_dev=channels[12]

rem --- Dimension string templates

    dim bmm08a$:templates$[1],gls01a$:templates$[2],ivm01a$:templates$[3],
:       ivs01a$:templates$[4],sfe01a$:templates$[5],sfe02a$:templates$[6],
:       sfm02a$:templates$[7],sfm10a$:templates$[8],sfs01a$:templates$[9],
:       sft01a$:templates$[10],sft03a$:templates$[11],sfw05a$:templates$[12]

rem --- Assign form input values to local variables

    datefrom$=Option!.getOptionData("dates_1")
    datethru$=Option!.getOptionData("dates_2")
    wotype$=Option!.getOptionData("Sort_Wo_Type")
    wo_inventory$=Option!.getOptionData("inventoried")
    wo_recurring$=Option!.getOptionData("recurring")
    wo_nonstock$=Option!.getOptionData("nonstock")
    category$=""
    if wo_inventory$="Y" category$=category$+"I"
    if wo_recurring$="Y" category$=category$+"R"
    if wo_nonstock$="Y" category$=category$+"N"
    wostatus$=Option!.getOptionData("open_closed_both")
    if wostatus$="B" then wostatus$="OC"

rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

    n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$
    find record (sfs01a_dev,key=firm_id$+n2$+"00",dom=std_missing_params) sfs01a$
    find record (gls01a_dev,key=firm_id$+"GL00",dom=std_missing_params) gls01a$
    find record (ivs01a_dev,key=firm_id$+"IV00",dom=std_missing_params) ivs01a$

rem --- Init Data

    h0=132
    h=0,headings=3,when$=sysinfo.system_date$,clock$=""
    dim headings$[headings](h0)
    headings$[0]=n1$
    headings$[1]=n3$,l9=59,l=l9+1
    dim desc[3]
    desc[1]=num(ivs01a.desc_len_01$)
    desc[2]=num(ivs01a.desc_len_02$)
    desc[3]=num(ivs01a.desc_len_03$)
    bminstalled$=sfs01a.bm_interface$


rem --- retrieve masks 
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","A","",m1$,0,m1
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","U","",m2$,0,m2


    call pgmdir$+"adc_sizemask.aon",sfs01a.amount_mask$,m1,8,12
    call pgmdir$+"adc_sizemask.aon",unit_mask$,m2,5,11
    m9=10
    more=1


 
rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSOPRTR","PRIMARY",sft03_key_tpl$,rd_table_chans$[all],status$

rem --- Find last (prior) Period End Date

    curper=num(sfs01a.current_per$)
    priorper=curper-1
    curyear=num(sfs01a.current_year$)
    if priorper=0 then 
        priorper=num(gls01a.total_pers$)
        prioryear=curyear-1
    endif
    call pgmdir$+"adc_perioddates.aon",gls01a_dev,priorper,prioryear,v0$,priorperenddt$,status

rem --- Sort It Here

    call pgmdir$+"adc_printer.aon",printer_dev,1,"","",status
    if status then goto std_exit
    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe01_dev,1,meter_num,status
    dim a[11]
    read (sfe01_dev,key=firm_id$,dom=*next)

rem --- W/O Header Here
    while more
        k$=key(sfe01_dev,end=*break)
        if pos(firm_id$=k$)<>1 then break
        read record (sfe01_dev,key=k$) sfe01a$
        if pos(sfe01a.wo_status$="QP")>0 then continue
        if datefrom$<>"" and sfe01a.wo_status$="C" and sfe01a.closed_date$<datefrom$ then continue
        if datethru$<>"" and sfe01a.opened_date$>datethru$ then continue
        if wostatus$="C" and sfe01a.wo_status$<>"C" then continue
        if wostatus$="O" and sfe01a.wo_status$="C" then 
            if datethru$="" then 
                continue 
            else 
                if sfe01a.closed_date$<datethru$ then continue
            endif
        endif
        if catagory$<>"" then 
            if pos(sfe01a.wo_category$=catagory$)=0 then continue
        endif

rem --- Include It This Time
        if sfe01a.wo_status$="C" and sfe01a.closed_date$<=priorperenddt$ then 
            trans_dev=sft03a_dev 
            dim trans_key$:sft03_key_tpl$
        else 
            trans_dev=sft01_dev
            dim trans_key$:sft01_key_tpl$
        endif
        sfw05a.firm_id$=firm_id$
        sfw05a.wo_no$=cvs(sfe01a.wo_no$,3)
        if wotype$="Y" then 
            sfw05a.wo_type$=cvs(sfe01a.wo_type$,3)
        endif
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        
rem --- Standards Here
        read (sfe02_dev,key=sfe01a.firm_id$+"  "+sfe01a.wo_no$+"A",dom=*next)
        while more
            k2$=key(sfe02_dev,end=*break)
            if pos(sfe01a.firm_id$+"  "+sfe01a.wo_no$=k2$)<>1 then break
            read record (sfe02_dev,key=k2$) sfe02a$
            if sfe02a.line_type$<>"S" then continue
            sfw05a.op_code$=cvs(sfe02a.op_code$,3)
            find record (sfw05a_dev,key=sfw05a.firm_id$+sfw05a.op_code$+sfw05a.wo_type$+sfw05a.wo_no$,dom=*next) sfw05a$
            sfw05a.std_hrs=sfw05a.std_hrs+sfe02a.total_time
            sfw05a.std_dir_tot=sfw05a.std_dir_tot+sfe02a.total_time*sfe02a.direct_rate
            sfw05a.std_ovhd_tot=sfw05a.std_ovhd_tot+sfe02a.tot_std_cost-sfe02a.total_time*sfe02a.direct_rate
            sfw05a$=field(sfw05a$)
            write record (sfw05a_dev,key=sfw05a.firm_id$+sfw05a.op_code$+sfw05a.wo_type$+sfw05a.wo_no$) sfw05a$
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        wend

rem --- Actuals Here

        read (trans_dev,key=sfe01a.firm_id$+"  "+sfe01a.wo_no$+datefrom$,dom=*next)
       
        while more
            trans_key$=key(trans_dev,end=*break)
            if pos(sfe01a.firm_id$+"  "+sfe01a.wo_no$=trans_key$)<>1 then break
            if datethru$<>"" then 
                if trans_key.trans_date$>datethru$ then break
            endif
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
            read record (trans_dev,key=trans_key$) wot0103a$
            sfw05a.op_code$=sfe02a.require_date$
            find record (sfw05a_dev,key=sfw05a.firm_id$+sfw05a.op_code$+sfw05a.wo_type$+sfw05a.wo_no$,dom=*next) sfw05a$
            if pos(" "<>sfw05a.trans_date_01$)=0 then 
                sfw05a.trans_date_01$=trans_key.trans_date$
            endif
            if trans_key.trans_date$>sfw05a.trans_date_02$ then 
                sfw05a.trans_date_02$=trans_key.trans_date$
            endif
            sfw05a.actual_hrs=sfw05a.actual_hrs+sfe02a.runtime_hrs
            sfw05a.act_dir_tot=sfw05a.act_dir_tot+sfe02a.runtime_hrs*sfe02a.tot_std_cost
            sfw05a.act_ovhd_tot=sfw05a.act_ovhd_tot+sfe02a.total_time-sfe02a.runtime_hrs*sfe02a.tot_std_cost
            write record (sfw05a_dev,key=sfw05a.firm_id$+sfw05a.op_code$+sfw05a.wo_type$+sfw05a.wo_no$) sfw05a$
        wend

rem --- Done..

    wend

rem --- All Done

    run pgmdir$+"sfr_labeffanarep_o1.aon"
    


rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
