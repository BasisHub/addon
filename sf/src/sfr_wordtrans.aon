rem --- Work Order Transaction History Report - Parameter Entry
rem --- Program sfr_wordtrans.aon v8.0.0 04Jan2008 (sfr_ja)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:35:34)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=23,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]

    files$[1]="gls_params",ids$[1]="GLS_PARAMS"
    files$[2]="ivm-01",ids$[2]="IVM_ITEMMAST"
    files$[3]="ivc_whsecode",ids$[3]="IVC_WHSECODE"
    files$[4]="ivs_params",ids$[4]="IVS_PARAMS"
    files$[5]="sfe-01",ids$[5]="SFE_WOMASTR"
    files$[6]="sfm-07",ids$[6]="SFX_WOTRANXR"
    files$[7]="sfm-10",ids$[7]="SFC_WOTYPECD"
    files$[8]="sfs_params",ids$[8]="SFS_PARAMS"
    files$[9]="sft-01",ids$[9]="SFT_OPNOPRTR"
    files$[10]="sft-03",ids$[10]="SFT_CLSOPRTR"
    files$[11]="sft-21",ids$[11]="SFT_OPNMATTR"
    files$[12]="sft-23",ids$[12]="SFT_CLSMATTR"
    files$[13]="sft-31",ids$[13]="SFT_OPNSUBTR"
    files$[14]="sft-33",ids$[14]="SFT_CLSSUBTR"

    call pgmdir$+"adc_fileopen.aon",action,begfile,14,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status

    if status goto std_exit
    
    gls01a_dev=channels[1]
    ivm01a_dev=channels[2]
    ivm10a_dev=channels[3]
    ivs01a_dev=channels[4]
    sfe01a_dev=channels[5]
    sfm07a_dev=channels[6]
    sfm10a_dev=channels[7]
    sfs01a_dev=channels[8]
    sft01a_dev=channels[9]
    sft03a_dev=channels[10]
    sft21a_dev=channels[11]
    sft23a_dev=channels[12]
    sft31a_dev=channels[13]
    sft33a_dev=channels[14]
    

rem --- Dimension string templates

    dim gls01a$:templates$[1],ivm01a$:templates$[2],ivm10a$:templates$[3],
:       ivs01a$:templates$[4],sfe01a$:templates$[5],sfm07a$:templates$[6],
:       sfm10a$:templates$[7],sfs01a$:templates$[8],sft01a$:templates$[9],
:       sft03a$:templates$[10],sft21a$:templates$[11],sft23a$:templates$[12],   
:       sft31a$:templates$[13],sft33a$:templates$[14]
 

rem --- Assign form input values to local variables

    sequence$=Option!.getOptionData("report_seq")
    whse$=Option!.getOptionData("warehouse_id")
    wofrom$=Option!.getOptionData("wo_no_1")
    wothru$=Option!.getOptionData("wo_no_2") 
    billfrom$=Option!.getOptionData("bill_no_1")
    billthru$=Option!.getOptionData("bill_no_2")
    custfrom$=Option!.getOptionData("customer_id_1")
    custthru$=Option!.getOptionData("customer_id_2")
    wotfrom$=Option!.getOptionData("wo_type_1")
    wotthru$=Option!.getOptionData("wo_type_2")
    category$=Option!.getOptionData("report_seq1")
    datefrom$=Option!.getOptionData("trans_date_start")
    datethru$=Option!.getOptionData("trans_date_end")
    mat$=Option!.getOptionData("materials")
    opr$=Option!.getOptionData("operations")
    sub$=Option!.getOptionData("subcontractors")
    transtype$=""
    if mat$="Y" transtype$=transtype$+"M"
    if sub$="Y" transtype$=transtype$+"S"
    if opr$="Y" transtype$=transtype$+"O"
    
rem --- Retrieve parameter records

    gls01a_key$=firm_id$+"GL00"
    find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    ivs01a_key$=firm_id$+"IV00"
    find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

    bm$=sfs01a.bm_interface$
    op$=sfs01a.ar_interface$
    po$=sfs01a.po_interface$
    pr$=sfs01a.pr_interface$

rem --- Additional File Opens

    if op$="Y" then
        files$[15]="arm-01",ids$[15]="ARM_CUSTMAST"
        files$[16]="ars_params",ids$[16]="ARS_PARAMS"
    endif
    if po$="Y" then 
        files$[17]="apm-01",ids$[17]="APM_VENDMAST"
        files$[18]="aps_params",ids$[18]="APS_PARAMS"
    endif
    if bm$="Y" files$[19]="bmm-08",ids$[19]="BMC_OPCODES"
    if bm$="N" files$[19]="sfm-02",ids$[19]="SFC_OPRTNCOD"
    if pr$="Y" then
        files$[20]="prs_params",ids$[20]="PRS_PARAMS"
        files$[21]="prm-01",ids$[21]="PRM_EMPLMAST"
    endif
    if pr$="N" files$[21]="sfm-01",ids$[21]="SFM_EMPLMAST"
    if pos(ivs01a.lotser_flag$="LS") then
        files$[22]="sft-11",ids$[22]="SFT_OPNLSTRN"
        files$[23]="sft-12",ids$[23]="SFT_CLSLSTRN"
    endif
     call pgmdir$+"adc_fileopen.aon",action,15,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status

    if status goto std_exit
    
    arm01a_dev=channels[15]
    ars01a_dev=channels[16]
    apm01a_dev=channels[17]
    aps01a_dev=channels[18]
    opcode_dev=channels[19]
    prs01a_dev=channels[20]
    empcode_dev=channels[21]
    sft11a_dev=channels[22]
    sft12a_dev=channels[23]
    

rem --- Dimension string templates

    dim arm01a$:templates$[15],ars01a$:templates$[16],apm01a$:templates$[17],
:       aps01a$:templates$[18],opcode$:templates$[19],prs01a$:templates$[20],
:       empcode$:templates$[21],sft11a$:templates$[22],sft12a$:templates$[23]
 
    if op$<>"N" then 
        find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
        c0=num(ars01a.firm_id$)
        c1=len(ars01a.customer_output$)
    endif

    if po$<>"N" then 
        find record (aps01a_dev,key=firm_id$+"AP00") aps01a$
        c3$=aps01a.vendor_output$
    endif

    if pr$<>"N" then 
        find record (prs01a_dev,key=firm_id$+"PR00") prs01a$
        c4=num(prs01a.empl_no_len$)
    else
        c4=num(sfs01a.empl_no_len$),c5$=m0$
    endif

    i9=num(ivs01a.item_id_len$)
    ivs01_precision=num(ivs01a.precision$),i2=num(ivs01a.ls_no_len$)

rem --- Init Data

    h0=132
    headings=4,h=0,when$=sysinfo.system_date$,clock$=""
    dim headings$[headings]
    headings$[0]=sysinfo.firm_name$
    headings$[1]=sysinfo.task_desc$
    l9=59
    l=l9+1
    dim desc[3]
    m1$=sfs01a.amount_mask$
    m2$=sfs01a.unit_mask$
    m0=len(sfs01a.empl_output$)
    m1=len(m1$)
    m2=len(m2$)
    m3$=m2$;m3=len(m3$)
    rem m3=len(sfs01a.rate_mask$); rate mask is blank in the data file sfs-01
    p0=num(sfs01a.current_per$)
    p1=num(sfs01a.current_year$)
    p0=p0-1
    if p0=0 p0=num(gls01a.total_pers$),p1=p1-1; rem "Find LAST PERIOD end date
    call pgmdir$+"adc_perioddates.aon",gls01a_dev,p0,p1,v0$,g9$,status
    if status then goto std_exit
    sfs01a.current_per$=""
    sfs01a.current_year$=""
    desc[1]=num(ivs01a.desc_len_01$)
    desc[2]=num(ivs01a.desc_len_02$)
    desc[3]=num(ivs01a.desc_len_03$)
    if transtype$="" then transtype$="MSO"

rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","PRIMARY",sfe01a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","ALT_KEY_01",sfe03a_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","ALT_KEY_02",sfe03b_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","ALT_KEY_03",sfe03c_key_tpl$,rd_table_chans$[all],status$
    
rem --- Options

    rem --- Assign Title, Record, and keys
    if sequence$="W" 
        h3$="Work Order Sequence"
        beging$=wofrom$
        ending$=wothru$
        dim key_tpl$:sfe01a_key_tpl$
        begin_key$=firm_id$+sfe01a.wo_location$+beging$
        keynum=0
    endif
    if sequence$="B"
        h3$="Bill Number Sequence"
        beging$=billfrom$
        ending$=billthru$
        dim key_tpl$:sfe03c_key_tpl$
        begin_key$=firm_id$+whse$+beging$
        keynum=3
    endif
    if sequence$="C"
        h3$="Customer Sequence"
        beging$=custfrom$
        ending$=custthru$
        dim key_tpl$:sfe03b_key_tpl$
        begin_key$=firm_id$+beging$
        keynum=2
    endif
    if sequence$="T"
        h3$="Work Order Type Sequence"
        beging$=wotfrom$
        ending$=wotthru$
        dim key_tpl$:sfe03a_key_tpl$
        begin_key$=firm_id$+beging$
        keynum=1
    endif
    h9$=h3$(1,pos("Seq"=h3$)-2)
    if category$="O" then h4$="Open Work Orders"
    if category$="C" then h4$="Closed Work Orders"
    if category$="B" then h4$="All Work Orders"
    if sequence$="B" beging$=whse$+beging$; if ending$<>"" ending$=whse$+ending$
    h4$=h4$+" Beginning With "
    if beging$<>"" h4$=h4$+beging$ else h4$=h4$+"The First"
    h4$=h4$(1,pos("   "=h4$+"   ")-1)
    h4$=h4$+" And Ending With "
    if ending$<>"" h4$=h4$+ending$ else h4$=h4$+"The Last"
    h4$=h4$(1,pos("   "=h4$+"   ")-1)
    h7$="With A Transaction Type Of "+transtype$

done: rem --- Overlay

    run pgmdir$+"sfr_wordtrans_o1.aon"

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
