rem --- Work Order entry - Status Summary
rem --- Program converted from woe_ag, 30Dec2011
rem --- Created by Codeport Utility (12/30/2011 10:19:33)

rem --- AddonSoftware
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- set rd_alias_id$, if needed, for DocOut Settings

    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif
	rd_alias_id$=cvs(rd_alias_id$,4)

rem --- Document initializations
    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
	
rem --- Initializations

	wo_no$=callpoint!.getDevObject("wo_no")
	wo_stat$=callpoint!.getDevObject("wo_status")
	closed_date$=callpoint!.getDevObject("closed_date")
	gl_end_date$=callpoint!.getDevObject("sf_prevper_enddate")
	
	sfe02_dev=fnget_dev("SFE_WOOPRTN")
	dim sfe02a$:fnget_tpl$("SFE_WOOPRTN")
	
    tran_pass$="0"
    if wo_stat$="C" and closed_date$<=gl_end_date$ wo_status$="0"
    if wo_stat$<>"C" or closed_date$>gl_end_date$ wo_status$="1"

    i9=999

    call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","%","",m1$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","U","",m2$,0,0
    call stbl("+DIR_PGM")+"adc_getmask.aon","","SF","C","",m3$,0,0

rem --- Calc

    curr_oplines$=""
	fattr_sfe02a$=fattr(sfe02a$)
	op_len$=fattr_sfe02a$(pos("OP_SEQ:C("=fattr_sfe02a$)+9)
	op_len$=op_len$(1,pos("),"=op_len$)-1)
	op_len=num(op_len$)

	isn_len$=fattr_sfe02a$(pos("INTERNAL_SEQ_NO:C("=fattr_sfe02a$)+18)
	isn_len$=isn_len$(1,pos("),"=isn_len$)-1)
	isn_len=num(isn_len$)
	
    t0=0
    t1=0
    t2=0
    t3=0
    t4=0
    t5=0
    t6=0
    t7=0
    s0=0
    s1=0
    s2=0
    s3=0
    z0=0
    z1=0
    x1$=""
    x2$=""
    warn$=""
    x3$=""
    dim x0[i9],x1[i9],x2[i9],x3[i9],x4[i9],x5[i9],x6[i9],x7[i9],z0[i9],z1[i9],z2[i9]

rem --- Headings and print positions

	dim headings$[2]
	headings$[0]=sysinfo.firm_name$
	headings$[1]=sysinfo.task_desc$+" - "+Translate!.getTranslation("AON_WORK_ORDER")+": "+wo_no$
	headings$[2]=Translate!.getTranslation("AON_JOB_STATUS")
	
    columns = 8
    if col_format$="Y" columns=16
    dim columns$[columns,10]
    columns$[0,0]=Translate!.getTranslation("AON_OP_CODE"), columns$[0,1]="C", columns$[0,2]="8"
    columns$[1,0]=Translate!.getTranslation("AON_DESCRIPTION"), columns$[1,1]="C", columns$[1,2]="20"
    columns$[2,0]=Translate!.getTranslation("AON_DATE_REQ"), columns$[2,1]="C",columns$[2,2]="8"
    columns$[3,0]=Translate!.getTranslation("AON_STANDARD")+"^"+Translate!.getTranslation("AON_SETUP"), columns$[3,1]="N",columns$[3,2]="12",columns$[3,3]=m3$
    columns$[4,0]=Translate!.getTranslation("AON_STANDARD")+"^"+Translate!.getTranslation("AON_RUN"), columns$[4,1]="N",columns$[4,2]="12",columns$[4,3]=m3$
    columns$[5,0]=Translate!.getTranslation("AON_ACTUAL")+"^"+Translate!.getTranslation("AON_SETUP"), columns$[5,1]="N",columns$[5,2]="12",columns$[5,3]=m3$
    columns$[6,0]=Translate!.getTranslation("AON_ACTUAL")+"^"+Translate!.getTranslation("AON_RUN"), columns$[6,1]="N", columns$[6,2]="12",columns$[6,3]=m3$
    columns$[7,0]=Translate!.getTranslation("AON_PCT")+"^"+Translate!.getTranslation("AON_VARIANCE"), columns$[7,1]="N", columns$[7,2]="10",columns$[7,3]=m1$
    columns$[8,0]=Translate!.getTranslation("AON_COMPLETE")+"^"+Translate!.getTranslation("AON_QTY"), columns$[8,1]="N", columns$[8,2]=str(len(m3$)), columns$[8,3]=m2$

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Calc Standards - Operations

    read (sfe02_dev,key=firm_id$+sfe02a.wo_location$+wo_no$,dom=*next)

	while 1
		read record (sfe02_dev,end=*break) sfe02a$
		if pos(firm_id$+sfe02a.wo_location$+wo_no$=sfe02a$)<>1 break
		if sfe02a.line_type$<>"S" continue

		y=pos(sfe02a.internal_seq_no$=curr_oplines$,isn_len)

		if y=0
			curr_oplines$=curr_oplines$+sfe02a.internal_seq_no$
			x1$=x1$+sfe02a.code_desc$
			x2$=x2$+sfe02a.op_code$
			x3$=x3$+sfe02a.require_date$
			y=pos(sfe02a.internal_seq_no$=curr_oplines$,isn_len)
		endif
		x=int(y/isn_len)

		x0[x]=x0[x]+sfe02a.tot_std_cost
		x1[x]=x1[x]+sfe02a.total_time-sfe02a.setup_time
		x4[x]=x4[x]+sfe02a.total_time*sfe02a.direct_rate
		x5[x]=x5[x]+sfe02a.tot_std_cost-sfe02a.total_time*sfe02a.direct_rate
		z0[x]=z0[x]+sfe02a.setup_time
    wend

rem --- Get Actuals

	gosub calc_actuals

rem --- Now Display Units

    if curr_oplines$="" goto done
    l=l0+1

	outVect!.addItem(Translate!.getTranslation("AON_OPERATION_UNITS:"))
	xvk=fnblank(8)
	
    l=l+1
    for y=1 to len(curr_oplines$)/isn_len
		outVect!.addItem(x2$(op_len*y-(op_len-1),op_len))
		outVect!.addItem(x1$(20*y-19,20))
		outVect!.addItem(fndate$(x3$(x*8+1,8)))
		
		x=int(((isn_len*y)-(isn_len-1))/isn_len)
		outVect!.addItem(str(z0[x]))
		outVect!.addItem(str(x1[x]))
		outVect!.addItem(str(z1[x]))
		outVect!.addItem(str(x3[x]))
        if z0[x]+x1[x]<>0
			y0=(z0[x]+x1[x]-(z1[x]+x3[x]))*100/(z0[x]+x1[x])
		else
			y0=0
		endif
		outVect!.addItem(str(y0))
		outVect!.addItem(str(z2[x]))
		
rem		print @(2,l),x2$(op_len*y-(op_len-1),op_len)," ",x1$(20*y-19,20),
rem        x=int((op_len*y-(op_len-1))/op_len)
rem     print @(80-m6*5-m9-11),fndate$(x3$(x*8+1,8)),@(80-m6*5-m9),z0[x]:m6$,x1[x]:m6$,z1[x]:m6$,x3[x]:m6$,
rem        print @(80-m6-m9),y0:m9$,z2[x]:m6$,
        l=l+1
        t0=t0+x0[x]
        t1=t1+x2[x]
        t2=t2+x1[x]
        t3=t3+x3[x]
        s0=s0+x4[x]
        s1=s1+x5[x]
        s2=s2+x6[x]
        s3=s3+x7[x]
        z0=z0+z0[x]
        z1=z1+z1[x]
    next y

rem --- Labor Unit Totals Here - Setup & Run

rem    if l+2>l9 gosub l5000
rem    l=l+1
	xvk=fnblank(9)
	
	outVect!.addItem(Translate!.getTranslation("AON_TOTAL_UNITS:"))
	xvk=fnblank(2)
	outVect!.addItem(str(z0))
	outVect!.addItem(str(t2))
	outVect!.addItem(str(z1))
	outVect!.addItem(str(t3))
	
    if z0+t2<>0
		outVect!.addItem(str((z0+t2-(z1+t3))*100/(z0+t2)))
	else
		outVect!.addItem("0")
	endif
	outVect!.addItem("")

done:

	goto std_exit

calc_actuals:

    tran_pass$="0"
l5630:
	while tran_pass$<"3"
		gosub select_transaction_file
		read (wotran_dev,key=firm_id$+sfe02a.wo_location$+wo_no$,dom=*next)

		while 1
			read record (wotran_dev,end=*break) wotran$
			if pos(firm_id$+sfe02a.wo_location$+wo_no$=wotran$)<>1 break
			if pos(firm_id$+sfe02a.wo_location$+wo_no$=wotran$)<>1 break

			if wotran_dev=fnget_dev("SFT_OPNOPRTR") or wotran_dev=fnget_dev("SFT_CLSOPRTR")
				y=pos(wotran.oper_seq_ref$=curr_oplines$,isn_len)
				y=int(y/isn_len)
				x2[y]=x2[y]+wotran.ext_cost
				x3[y]=x3[y]+wotran.units
				x6[y]=x6[y]+wotran.units*wotran.direct_rate
				x7[y]=x7[y]+wotran.ext_cost-wotran.units*wotran.direct_rate
				z1[y]=z1[y]+wotran.setup_time
				z2[y]=z2[y]+wotran.complete_qty
			endif

			if wotran_dev=fnget_dev("SFT_OPNMATTR") or wotran_dev=fnget_dev("SFT_CLSMATTR")
				t5=t5+wotran.ext_cost
			endif

			if wotran_dev=fnget_dev("SFT_OPNSUBTR") or wotran_dev=fnget_dev("SFT_CLSSUBTR")
				t7=t7+wotran.ext_cost
			endif
		wend
	wend

    return

select_transaction_file: rem --- Select Transaction File

    on pos(wo_status$="01") goto done,closed_wo,open_wo
	
closed_wo:

	if tran_pass$="0"
		wotran_dev=fnget_dev("SFT_CLSOPRTR")
		dim wotran$:fnget_tpl$("SFT_CLSOPRTR")
		tran_pass$="1"
	else
		if tran_pass$="1"
			wotran_dev=fnget_dev("SFT_CLSMATTR")
			dim wotran$:fnget_tpl$("SFT_CLSMATTR")
			tran_pass$="2"
		else
			if tran_pass$="2"
				wotran_dev=fnget_dev("SFT_CLSSUBTR")
				dim wotran$:fnget_tpl$("SFT_CLSSUBTR")
				tran_pass$="3"
			endif
		endif
	endif

    return
	
open_wo:

	if tran_pass$="0"
		wotran_dev=fnget_dev("SFT_OPNOPRTR")
		dim wotran$:fnget_tpl$("SFT_OPNOPRTR")
		tran_pass$="1"
	else
		if tran_pass$="1"
			wotran_dev=fnget_dev("SFT_OPNMATTR")
			dim wotran$:fnget_tpl$("SFT_OPNMATTR")
			tran_pass$="2"
		else
			if tran_pass$="2"
				wotran_dev=fnget_dev("SFT_OPNSUBTR")
				dim wotran$:fnget_tpl$("SFT_OPNSUBTR")
				tran_pass$="3"
			endif
		endif
	endif
	
    return                                                  

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

    def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
    def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

	rd_called$="YES"
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
