rem --- Work Orders By Date Report - Detail Print
rem --- Program sfr_nb v8.0.0 10Jan2008 (sfr_nb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/10/2008 04:08:08)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Init Data

        more=1
        headings=6
        dim headings$[headings]
        h=0
        h0=132,when$=sysinfo.system_date$,clock$=""
        headings$[0]=h1$
        headings$[1]=h2$,headings$[2]=h9$+" For "+h4$+" Work Orders",headings$[3]=h8$,headings$[4]=h7$
        r0=121-c1-i9-67-2
        if r0>30 then let r0=30

rem --- Retrieve key templates

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFW_WOXDATE","PRIMARY",sfw04a_key_pritpl$,rd_table_chans$[all],status$

rem --- Additional File Opens
        v=5

rem --- Headings and print positions

 
        dim columns$[12,10]
        columns = 12
            columns$[0,0]="WO^Number",          columns$[0,1]="C",columns$[0,2]="8"
            columns$[1,0]="Date^Opened",        columns$[1,1]="C",columns$[1,2]="8"
            columns$[2,0]="WO^Type",            columns$[2,1]="C",columns$[2,2]="5"
            columns$[3,0]="Ct",                 columns$[3,1]="C",columns$[3,2]="3"
            columns$[4,0]="St",                 columns$[4,1]="C",columns$[4,2]="3"
            columns$[5,0]="Est^Start",          columns$[5,1]="C",columns$[5,2]="7"
            columns$[6,0]="Est^Complete",       columns$[6,1]="C",columns$[6,2]="8"
            columns$[7,0]="Actual^Start",       columns$[7,1]="C",columns$[7,2]="8"
            columns$[8,0]="Last^Activity",      columns$[8,1]="C",columns$[8,2]="8"
            columns$[9,0]="Description",        columns$[9,1]="C",columns$[9,2]="23"
            columns$[10,0]="Item",              columns$[10,1]="C",columns$[10,2]="5"
            columns$[11,0]="Customer^CoNumber", columns$[11,1]="C",columns$[11,2]="9"
            columns$[12,0]="Order^Number",      columns$[12,1]="C",columns$[12,2]="8"

rem --- Background

        call pgmdir$+"adc_progress.aon","N","","","","",0,sfw04a_dev,1,meter_num,ignore_status

rem --- Init Read

        read (sfw04a_dev,key=firm_id$,dom=*next)

rem --- Main Read

        dim sfw04a_key$:sfw04a_key_pritpl$
        blank=fnblank(13)

    while more
        sfw04a_key$=key(sfw04a_dev,end=*break)
        if pos(firm_id$=sfw04a_key$)<>1 then break

rem --- Breaks

        read (sfw04a_dev,key=sfw04a_key$)
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status
        read record (sfe01_dev,key=sfw04a_key.firm_id$+sfw04a_key.wo_location$+sfw04a_key.wo_no$,dom=*continue) sfe01a$
        if sfe01a.wo_category$="I" then
            ivm01a.item_desc$="Invalid Item"
            find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=*next) ivm01a$
            ivm01a.item_desc$=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
        endif

rem --- Print

        OutVect!.addItem(sfe01a.wo_no$)
        OutVect!.addItem(sfe01a.opened_date$)
        OutVect!.addItem(sfe01a.wo_type$)
        OutVect!.addItem(sfe01a.wo_category$)
        OutVect!.addItem(sfe01a.wo_status$)

        if sfe01a.wo_status$="C" then
            OutVect!.addItem("*Closed*")
        else
            OutVect!.addItem(sfe01a.eststt_date$)
        endif

        if sfe01a.wo_status$="C" then
            OutVect!.addItem(sfe01a.closed_date$)
        else
            OutVect!.addItem(sfe01a.estcmp_date$)
        endif

        OutVect!.addItem(sfe01a.act_st_date$)
        OutVect!.addItem(sfe01a.lstact_date$)

        if sfe01a.wo_category$="I"
            dim desc$(30)
            desc$(1)=ivm01a.item_desc$
            OutVect!.addItem(desc$)
            OutVect!.addItem(sfe01a.item_id$)
        endif
        
        desc$(1)=sfe01a.description_01$
        if pos(sfe01a.wo_category$="NR")>0 then 
            OutVect!.addItem(desc$)
        endif
        if sfe01a.wo_category$="N" then 
            OutVect!.addItem("Special")
        endif
        if sfs01a.ar_interface$="Y" then
            if op$="Y" and pos(" "<>sfe01a.customer_id$)>0 then
                OutVect!.addItem(str(fnmask$(sfe01a.customer_id$,c1$)))
            else
                OutVect!.addItem("")
            endif
            if pos(" "<>sfe01a.order_no$)>0 then 
                OutVect!.addItem(str(sfe01a.order_no$))
            else
                OutVect!.addItem("")
            endif
        else
            blank=fnblank(2)
        endif

        l=l+1
        l0=l0+1
    wend

done: rem --- End
        
        blank=fnblank(13)
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        blank=fnblank(9)
        OutVect!.addItem("Total Records: "+str(l0))
        blank=fnblank(12)
        blank=fnblank(13)
        goto std_exit

rem --- #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
        def fnblank(q0)
            for q1=1 to q0
                OutVect!.addItem("")
            next q1
            return q1
        fnend
        def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
        def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
        def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
        def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

        def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

        def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

        def fnyy$(q$)=q$(3,2)
        def fnclock$(q$)=date(0:"%hz:%mz %p")
        def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

        def fnmask$(q1$,q2$)
            if q2$="" q2$=fill(len(q1$),"0")
            return str(-num(q1$,err=*next):q2$,err=*next)
            q=1
            q0=0
            while len(q2$(q))
                  if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
                  q=q+1
            wend
            if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
            return str(q1$:q2$)
        fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

        def fnbasename$(q$,q0$)
            q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
            if q then q$=q$(q+1)
            if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
        return q$

rem --- fnglobal: Return numeric value of passed stbl variable

        def fnglobal(q$,q1)
            q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
            return q1
        fnend

rem --- fnglobal$: Return string value of passed STBL variable

        def fnglobal$(q$,q1$)
            q1$=stbl(q$,err=*next)
            return q1$
        fnend

rem --- #endinclude std_functions.src

rem --- #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
        if pos("EXIT"=rd_err_act$) goto std_error_exit
        if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
        if pos("RETRY"=rd_err_act$) retry

std_error_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_error_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_error_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

        rd_err_text$=""
        if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
        pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
        call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
        master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
        sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
        if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release:
        status=999
        if pgm(-1)<>pgm(-2) exit
        release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
        release

rem --- #endinclude std_end.src

        end
