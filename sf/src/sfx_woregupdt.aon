rem --- Transaction Update
rem --- Program sfx_da v8.0.0 12Feb2008 (sfx_da)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (02/12/2008 05:52:59)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

        next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
        OutVect!=null()

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=12,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="ars_params",ids$[1]="ARS_PARAMS"
        files$[2]="gls_params",ids$[2]="GLS_PARAMS"
        files$[3]="ivs_params",ids$[3]="IVS_PARAMS"
        files$[4]="sfe-02",ids$[4]="SFE_WOOPRTN"
        files$[5]="sfe-05",ids$[5]="SFE_WOCONVRN"
REM remove references to this file         files$[6]="sfm-07",ids$[6]="SFX_WOTRANXR"; rem --- SFX_WOTRANXR (sfm-07) has been replaced by a database view vw_sfx_wotranxr
        files$[7]="sfm-10",ids$[7]="SFC_WOTYPECD"
        files$[8]="sfs_params",ids$[8]="SFS_PARAMS"
        files$[9]="sft-01",ids$[9]="SFT_OPNOPRTR"
        files$[10]="sft-21",ids$[10]="SFT_OPNMATTR"
        files$[11]="sft-31",ids$[11]="SFT_OPNSUBTR"

        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        ars01a_dev=channels[1]
        gls01a_dev=channels[2]
        ivs01a_dev=channels[3]
        sfe02a_dev=channels[4]
        sfe05a_dev=channels[5]
REM remove references to this file         sfm07a_dev=channels[6]; rem --- SFX_WOTRANXR (sfm-07) has been replaced by a database view vw_sfx_wotranxr
        sfm10a_dev=channels[7]
        sfs01a_dev=channels[8]
        sft01a_dev=channels[9]
        sft21a_dev=channels[10]
        sft31a_dev=channels[11]

rem --- Dimension string templates

    dim ars01a$:templates$[1],gls01a$:templates$[2],ivs01a$:templates$[3],
:       sfe02a$:templates$[4],sfe05a$:templates$[5],sfm07a$:templates$[6],
:       sfm10a$:templates$[7],sfs01a$:templates$[8],sft01a$:templates$[9],
:       sft21a$:templates$[10],sft31a$:templates$[11]


rem --- Retrieve parameter records

        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        sfs01a_key$=firm_id$+"SF00"
        find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

        r9$="N"
        if sfs01a.ar_interface$<>"N" then 
            find record (ars01a_dev,key=firm_id$+"AR"+"00",dom=init_data) ars01a$
            r9$=ars01a.dist_by_item$
        endif

init_data: rem --- Init Data

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRTN","PRIMARY",sfe02a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft21_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft31_key_tpl$,rd_table_chans$[all],status$

        dim sfe02a_key$:sfe02a_key_tpl$
        precision ivs01_precision
        p9$=sysinfo.system_date$
        more=1

rem --- Options
    flag=0
    while more

        msg_id$="AON_UPDT_QUERY"
        dim x$:stbl("+SYSINFO_TPL")
        dim msg_tokens$[1]
        x$=stbl("+SYSINFO")                                                            
        msg_tokens$[1]=x.task_desc$
        gosub disp_message
        if msg_opt$="N" then break
        if msg_opt$<>"Y" then continue  
       
        call pgmdir$+"adc_progress.aon","N","","","","",0,sfe05a_dev,1,meter_num,ignore_status

rem --- Assign form input values to local variables
    
        rem p9$=Option!.getOptionData("date_opened")

rem --- Do It Here

        read (sfe05a_dev,key=firm_id$,dom=*next)
        while more
            k$=key(sfe05a_dev,end=done)
            if pos(firm_id$=k$)<>1 then flag=1; break
            read record (sfe05a_dev) sfe05a$
            call pgmdir$+"adc_progress.aon","S","","","",k$(5),0,0,1,0,ignore_status
rem --- Operations
            if sfe05a.act_ops_tot<>0 then 
                read (sfe02a_dev,key=sfe05a.firm_id$+sfe05a.wo_location$+sfe05a.wo_no$+"A",dom=*next)
                sfe02a_key$=key(sfe02a_dev,end=oper_1)
                if sfe02a_key.firm_id$+sfe02a_key.wo_location$+sfe02a_key.wo_no$=sfe05a.firm_id$+sfe05a.wo_location$+sfe05a.wo_no$ then 
                    read record (sfe02a_dev,key=sfe02a_key$) sfe02a$
                endif
oper_1:
                record_id$="O"
                dim sftran_key$:sft01_key_tpl$
                sft01a.firm_id$=sfe05a.firm_id$;sftran_key.firm_id$=sfe05a.firm_id$
                sft01a.wo_location$=sfe05a.wo_location$;sftran_key.wo_location$=sfe05a.wo_location$
                sft01a.wo_no$=sfe05a.wo_no$;sftran_key.wo_no$=sfe05a.wo_no$
                sft01a.trans_date$=p9$;sftran_key.trans_date$=p9$
                sft01a.record_id_o$="O";sftran_key.record_id_o$="O"
                sft01a.trans_seq$="001";sftran_key.trans_seq$="001"
                sft01a.op_seq$=sfe02a.op_seq$
                sft01a.op_code$=sfe02a.op_code$
                sft01a.reserved_str$="CONVERSION"
                sft01a.units=sfe05a.hrs
                sft01a.unit_cost=sfe05a.direct_rate+sfe05a.direct_rate*sfe05a.ovhd_rate
                sft01a.ext_cost=sfe05a.act_ops_tot
                sft01a.direct_rate=sfe05a.direct_rate
                sft01a.ovhd_rate=sfe05a.direct_rate*sfe05a.ovhd_rate
                gosub post_to_wot_01
            endif
rem --- Materials
            if sfe05a.act_mat_tot<>0 then 
                record_id$="M"
                dim sftran_key$:sft21_key_tpl$
                sft21a.firm_id$=sfe05a.firm_id$;sftran_key.firm_id$=sfe05a.firm_id$
                sft21a.wo_location$=sfe05a.wo_location$;sftran_key.wo_location$=sfe05a.wo_location$
                sft21a.wo_no$=sfe05a.wo_no$;sftran_key.wo_no$=sfe05a.wo_no$
                sft21a.trans_date$=p9$;sftran_key.trans_date$=p9$
rem                sft21a.record_id_m$="M";sftran_key.record_id_m$="M"
                sft21a.trans_seq$="001";sftran_key.trans_seq$="001"
escape; rem ... this needs to be a reference to an internal sequence number
                sft21a.material_seq_ref$="001"
                sft21a.unit_measure$="CV"
                sft21a.warehouse_id$=ivs01a.warehouse_id$
                sft21a.item_id$="CNVERSION"
                sft21a.units=1
                sft21a.unit_cost=sfe05a.act_mat_tot
                sft21a.ext_cost=sfe05a.act_mat_tot
                gosub post_to_wot_01
            endif
rem --- Subcontracts
            if sfe05a.act_sub_tot<>0 then 
                record_id$="S"
                dim sftran_key$:sft31_key_tpl$
                sft31a.firm_id$=sfe05a.firm_id$;sftran_key.firm_id$=sfe05a.firm_id$
                sft31a.wo_location$=sfe05a.wo_location$;sftran_key.wo_location$=sfe05a.wo_location$
                sft31a.wo_no$=sfe05a.wo_no$;sftran_key.wo_no$=sfe05a.wo_no$
                sft31a.trans_date$=p9$;sftran_key.trans_date$=p9$
                sft31a.record_id_s$="S";sftran_key.record_id_s$="S"
                sft31a.trans_seq$="001";sftran_key.trans_seq$="001"
                sft31a.subcont_seq$="001"
                sft31a.vendor_id$="000000"
                sft31a.reserved_str$="CNVERSION"
                sft31a.units=1
                sft31a.unit_cost=sfe05a.act_mat_tot
                sft31a.ext_cost=sfe05a.act_mat_tot
                gosub post_to_wot_01
            endif
            remove (sfe05a_dev,key=k$)
        wend
        if flag=1 then break
    wend

done: rem --- All Done

        call pgmdir$+"adc_batchdelete.aon",status
        goto std_exit

rem --- Post To wot-01
post_to_wot_01:

        if record_id$="O" then let wotran_dev=sft01a_dev;dim sftran$:templates$[9];sftran$=sft01a$
        if record_id$="M" then let wotran_dev=sft21a_dev;dim sftran$:templates$[10];sftran$=sft21a$
        if record_id$="S" then let wotran_dev=sft31a_dev;dim sftran$:templates$[11];sftran$=sft31a$

        while more
            find (wotran_dev,key=sftran_key$,dom=*break)
            sftran_key.trans_seq$=str(num(sftran.trans_seq$)+1:"000")
        wend
        sftran$=field(sftran$)
        write record (wotran_dev,key=sftran_key$) sftran$
        sfm07a$=field(sftran_key$)
        write record (sfm07a_dev,key=sftran_key$) sfm07a$
    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
