rem --- Work Order Header Report - II
rem --- Program sfr_woheader_o1.aon v8.0.0 04Jan2008 (sfr_gb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 01:40:18)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

        seterr std_error
        setesc std_error

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Retrieve key templates

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","PRIMARY",sfe01a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","AO_TYP_LOC_WO",sfe03a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","AO_CST_ORD_LINE",sfe03b_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","AO_WH_ITM_LOC_WO",sfe03c_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_CLSOPRTR","PRIMARY",sft03a_key_tpl$,rd_table_chans$[all],status$

        dim opentran_key$:sft01a_key_tpl$
        dim closedtran_key$:sft03a_key_tpl$

rem --- Assign Title, Record, and keys
        if sequence$="W" 
            h3$=Translate!.getTranslation("AON_WORK_ORDER_SEQUENCE")
            beging$=wofrom$
            ending$=wothru$
            dim key_tpl$:sfe01a_key_tpl$
            begin_key$=firm_id$+sfe01a.wo_location$+beging$
            keynum$="PRIMARY"
        endif
        if sequence$="B"
            h3$=Translate!.getTranslation("AON_BILL_NUMBER_SEQUENCE_FOR_WAREHOUSE_")+whse$
            beging$=billfrom$
            ending$=billthru$
            dim key_tpl$:sfe03c_key_tpl$
            begin_key$=firm_id$+whse$+beging$
            keynum$="AO_WH_ITM_LOC_WO"
        endif
        if sequence$="C"
            h3$=Translate!.getTranslation("AON_CUSTOMER_SEQUENCE")
            beging$=custfrom$
            ending$=custthru$
            dim key_tpl$:sfe03b_key_tpl$
            begin_key$=firm_id$+beging$
            keynum$="AO_CST_ORD_LINE"
        endif
        if sequence$="T"
            h3$=Translate!.getTranslation("AON_WORK_ORDER_TYPE_SEQUENCE")
            beging$=wotfrom$
            ending$=wotthru$
            dim key_tpl$:sfe03a_key_tpl$
            begin_key$=firm_id$+beging$
            keynum$="AO_TYP_LOC_WO"
        endif
        h9$=h3$(1,pos(Translate!.getTranslation("AON_SEQ")=h3$)-2)

        h4$=""
        if pos("O"=option$)>0 then let h4$=h4$+Translate!.getTranslation("AON_OPEN/")
        if pos("C"=option$)>0 then let h4$=h4$+Translate!.getTranslation("AON_CLOSED/")
        if pos("P"=option$)>0 then let h4$=h4$+Translate!.getTranslation("AON_PLANNED/")
        if pos("Q"=option$)>0 then let h4$=h4$+Translate!.getTranslation("AON_QUOTED/")
        h4$=h4$(1,len(h4$)-1)
        if beging$<> "" h4$=h4$+Translate!.getTranslation("AON__BEGINNING_WITH_")+cvs(beging$,2) else h4$=h4$+Translate!.getTranslation("AON__BEGINNING_WITH_FIRST")
        if ending$<> "" h4$=h4$+Translate!.getTranslation("AON__AND_ENDING_WITH_")+ending$ else h4$=h4$+Translate!.getTranslation("AON__AND_ENDING_WITH_LAST_")

        if closedate$<>"" then let h6$=Translate!.getTranslation("AON_WORK_IN_PROCESS_AS_OF_")+fndate$(closedate$) else let h6$=""

rem --- Init Data

        dim u[1],t[1],w[11]
        more=1
        r0=121-c1-item_len-(46+m2+m1)-2
        if r0>30 then let r0=30
        headings$[2]=h3$
        headings$[3]=h4$
        headings$[4]=h6$
    
rem --- Column Headings
    dim columns$[12,10]
        columns = 12

        columns$[0,0]=Translate!.getTranslation("AON_WO^NUMBER"),        columns$[0,1]="C",columns$[0,2]="20"
        columns$[1,0]=Translate!.getTranslation("AON_DATE^OPENED"),      columns$[1,1]="C",columns$[1,2]="8"
        columns$[2,0]=Translate!.getTranslation("AON_WO^TYPE"),          columns$[2,1]="C",columns$[2,2]="8"
        columns$[3,0]=Translate!.getTranslation("AON_CT"),               columns$[3,1]="C",columns$[3,2]="3"
        columns$[4,0]=Translate!.getTranslation("AON_ST"),               columns$[4,1]="C",columns$[4,2]="3"
        columns$[5,0]=Translate!.getTranslation("AON_START^DATE"),       columns$[5,1]="C",columns$[5,2]="8"
        columns$[6,0]=Translate!.getTranslation("AON_COMP^DATE"),        columns$[6,1]="C",columns$[6,2]="8"
        columns$[7,0]=Translate!.getTranslation("AON_PROD^QTY"),         columns$[7,1]="N",columns$[7,2]="10",columns$[7,3]=m2$,columns$[7,10]="T"
        columns$[8,0]=Translate!.getTranslation("AON_CLOSE^VALUE"),      columns$[8,1]="N",columns$[8,2]="10",columns$[8,3]=m1$,columns$[8,10]="T"
        columns$[9,0]=Translate!.getTranslation("AON_DESCRIPTION"),      columns$[9,1]="C",columns$[9,2]="25"
        columns$[10,0]=Translate!.getTranslation("AON_BILL_NO"),         columns$[10,1]="C",columns$[10,2]="8"
        columns$[11,0]=Translate!.getTranslation("AON_CUSTOMER^NUMBER"), columns$[11,1]="C",columns$[11,2]="8"
        columns$[12,0]=Translate!.getTranslation("AON_ORDER^NUMBER"),    columns$[12,1]="C",columns$[12,2]="8"

        call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]
    
rem --- Init Read

        extractrecord(sfe01a_dev,key=begin_key$,knum=keynum$,dom=*next)

rem --- Main Read
    while more

        key_tpl$=key(sfe01a_dev,knum=keynum$,end=*break)
        if pos(firm_id$=key_tpl$)<>1 break

        if ending$<>"" 
            if sequence$="W" and key_tpl.firm_id$+key_tpl.wo_location$+key_tpl.wo_no$>firm_id$+key_tpl.wo_location$+ending$ break
            if sequence$="B" and key_tpl.firm_id$+key_tpl.warehouse_id$+key_tpl.item_id$>firm_id$+whse$+ending$ break
            if sequence$="C" and key_tpl.firm_id$+key_tpl.customer_id$>firm_id$+ending$ break
            if sequence$="T" and key_tpl.firm_id$+key_tpl.wo_type$>firm_id$+ending$ break   
        else
            if sequence$="B" and whse$<>"" then if key_tpl.warehouse_id$>whse$ break
        endif

		rem --- If by Cust make sure WO is linked to a customer
			if sequence$="C" and (cvs(key_tpl.customer_id$,2))="" then
				read (sfe01a_dev)
				continue
			endif

		rem --- If by Bill make sure WO is for a bill
			if sequence$="B" and (cvs(key_tpl.item_id$,2))="" then
				read (sfe01a_dev)
				continue
			endif
        
		if sequence$<>"W" then 
            if sequence$="T" data1$=key_tpl.wo_type$
            if sequence$="C" data1$=key_tpl.customer_id$
            if sequence$="B" data1$=key_tpl.item_id$
            if data1$<>t0$ then gosub sub_total
            read (sfe01a_dev,knum=keynum$)
        endif

        check_status:
			accum_cost=0
            read record (sfe01a_dev,key=key_tpl$,knum=keynum$,dom=*continue) sfe01a$
			
            if closedate$<>"" and sfe01a.opened_date$>closedate$ then continue
            if pos("P"=option$)<=0 or sfe01a.wo_status$<>"P"
                if pos("Q"=option$)<=0 or sfe01a.wo_status$<>"Q"
                    if pos("O"=option$)<=0 or sfe01a.wo_status$<>"O"
                        if pos("P"=option$)=0 and sfe01a.wo_status$="P" then continue
                        if pos("Q"=option$)=0 and sfe01a.wo_status$="Q" then continue
                        if pos("O"=option$)=0 and sfe01a.wo_status$="O" then continue
                        if pos("C"=option$)>0 and sfe01a.wo_status$<>"C" then continue
                        if pos("C"=option$)=0 and sfe01a.wo_status$="C" and closedate$="" then continue
                        if pos("O"=option$)>0 and pos("C"=option$)=0 and sfe01a.wo_status$="C" and sfe01a.closed_date$<=closedate$ then continue
                        if pos("P"=option$)>0 and pos("C"=option$)=0 and sfe01a.wo_status$="C" and sfe01a.closed_date$<=closedate$ then continue
                        if pos("Q"=option$)>0 and pos("C"=option$)=0 and sfe01a.wo_status$="C" and sfe01a.closed_date$<=closedate$ then continue
                        if pos("C"=option$)>0 and len(closedate$)>0 and sfe01a.closed_date$>closedate$ then continue
                    endif
                endif
            endif

            if sfe01a.wo_category$="I" 
                dim d1$(60)
                d1$(1)=Translate!.getTranslation("AON_**INVALID_ITEM**")
                find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=*next) ivm01a$
                d1$(1)=fnitem$(ivm01a.item_desc$,desc[1],desc[2],desc[3])
            endif

            rem --- Calculate Actuals

                if sfe01a.wo_status$="C" and sfe01a.closed_date$<=g9$ then 
					gosub closed 
				else 
					gosub not_closed
				endif
               
            rem --- Print Closed Values
                if pos("C"=option$)<=0 and sfe01a.wo_status$<>"C" 
                    rem --- Reduce By Closed Amount
                    if closedate$="" then let accum_cost=accum_cost-sfe01a.cls_cst_todt
                    if sfe01a.closed_date$<=closedate$ then let accum_cost=accum_cost-sfe01a.cls_cst_todt
                endif

    rem --- Print
		if printed_subhead$ <>"Y"
			gosub sub_heading
			printed_subhead$="Y"
		endif
		OutVect!.addItem(sfe01a.wo_no$)
        if pos(sfe01a.wo_status$="CPQ")=0
            OutVect!.addItem(fndate$(sfe01a.opened_date$))
        else
            if sfe01a.wo_status$="C" then let stat$=Translate!.getTranslation("AON_*CLOSED*") 
            if sfe01a.wo_status$="P" then let stat$=Translate!.getTranslation("AON_*PLANND*") 
            if sfe01a.wo_status$="Q" then let stat$=Translate!.getTranslation("AON_*QUOTED*")  
            if sfe01a.wo_status$="C" then OutVect!.addItem(stat$) else OutVect!.addItem(fndate$(sfe01a.opened_date$))
        endif
        OutVect!.addItem(sfe01a.wo_type$)
        OutVect!.addItem(sfe01a.wo_category$)
        OutVect!.addItem(sfe01a.wo_status$)
        OutVect!.addItem(fndate$(sfe01a.eststt_date$))
        if pos(sfe01a.wo_status$="C")=0 then 
            OutVect!.addItem(fndate$(sfe01a.estcmp_date$)) 
        else 
            OutVect!.addItem(fndate$(sfe01a.closed_date$))
        endif
        OutVect!.addItem(str(sfe01a.sch_prod_qty))
        OutVect!.addItem(str(accum_cost))
        if sfe01a.wo_category$="I" then 
            OutVect!.addItem(d1$(1,desclen))
            OutVect!.addItem(sfe01a.item_id$)
        endif
        if pos(sfe01a.wo_category$="R")>0 then 
            OutVect!.addItem(sfe01a.description_01$)
            OutVect!.addItem("")
        endif
        if sfe01a.wo_category$="N" then 
            OutVect!.addItem(sfe01a.description_01$)
            OutVect!.addItem(Translate!.getTranslation("AON_SPECIAL"))
        endif
        if sfs01a.ar_interface$="Y" then 
            if pos(" "<>sfe01a.customer_id$)>0 then OutVect!.addItem(fnmask$(sfe01a.customer_id$,ars01a.customer_output$)) else OutVect!.addItem("")
            if pos(" "<>sfe01a.order_no$)>0 then OutVect!.addItem(sfe01a.order_no$) else OutVect!.addItem("")
        else
            xwk=fnblank(2)
        endif
        
        t[0]=t[0]+sfe01a.sch_prod_qty
        t[1]=t[1]+accum_cost,u[0]=u[0]+sfe01a.sch_prod_qty,u[1]=u[1]+accum_cost,l=l+1,l0=l0+1

    wend

done: rem --- End

        t9$="U"
        if sequence$<>"W" then gosub sub_total
        xwk=fnblank(13)
        TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
        xwk=fnblank(6)
        OutVect!.addItem(Translate!.getTranslation("AON_GRAND_TOTAL:_"))
        xwk=fnblank(1)
        OutVect!.addItem(str(u[1]))
        xwk=fnblank(4)
        goto std_exit

sub_heading: rem --- Sub Heading

        if sequence$="T" 
            OutVect!.addItem(t0$+"   "+h5$)
            xwk=fnblank(25)
        endif
        if sequence$="C"
            OutVect!.addItem(fnmask$(arm01a.customer_id$,custmask$)+"   "+h5$)
            xwk=fnblank(25)
        endif
    return


sub_total: rem --- First Sub Total
	printed_subhead$="N"
    if t0$<>"" 
        if l0>1 
            if sequence$="B" then 
                xwk=fnblank(8)
            else
                xwk=fnblank(8)
            endif
            
            xwk=fnblank(5)
            TotVect!.addItem(str(OutVect!.size()/(columns+1))) 
            OutVect!.addItem(h9$)
            OutVect!.addItem(t0$)
			xwk=fnblank(4)
            OutVect!.addItem(Translate!.getTranslation("AON_TOTAL:_"))
            if sequence$="B" then 
                OutVect!.addItem(str(t[0]))
            else
                xwk=fnblank(1)
            endif
            OutVect!.addItem(str(t[1]))
            xwk=fnblank(17)
        else
            xwk=fnblank(13)
        endif
    endif
    if t9$<>"" then return
    dim t[1]
    t0$=data1$
    l0=0

    p=pos(sequence$="TC") 
    if p=0 return 
	if p=1
        dim h5$(39); let h5$(1)=Translate!.getTranslation("AON_***_NOT_ON_FILE_***")
        find record (sfm10a_dev,key=firm_id$+"A"+t0$,dom=*next) sfm10a$
        h5$=sfm10a.code_desc$
rem        gosub sub_heading
	endif 
	if p=2
        dim h5$(30); let h5$(1)=Translate!.getTranslation("AON_***_NOT_ON_FILE_***")
        find record (arm01a_dev,key=firm_id$+t0$,dom=*next) arm01a$
        h5$=arm01a.customer_name$
rem        gosub sub_heading
	endif
    return

closed: rem --- Process Closed Work Order Transactions

    wotran_dev=sft03a_dev 
	dim closedtran$:sft03_tpls$
	
    while more
        k1$=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$
        read (wotran_dev,key=k1$,dom=*next)
        while more
            closedtran_key$=key(wotran_dev,end=*break)
            k5$=closedtran_key.firm_id$+closedtran_key.wo_location$+closedtran_key.wo_no$
            if k5$<>k1$ then break
            if closedate$<>"" then if closedtran_key.trans_date$>closedate$ then break
            read record (wotran_dev,key=closedtran_key$) closedtran$
            accum_cost=accum_cost+closedtran.ext_cost
        wend
        if wotran_dev=sft03a_dev then 
			let wotran_dev=sft23a_dev
			dim closedtran$:sft23_tpls$
			continue
		endif
        if wotran_dev=sft23a_dev then 
			let wotran_dev=sft33a_dev
			dim closedtran$:sft33_tpls$
			continue
		endif
        break
    wend
  return

not_closed: rem --- Process Work Order Transactions

    wotran_dev=sft01a_dev
	dim opentran$:sft01_tpls$
	
    while more
        k1$=sfe01a.firm_id$+sfe01a.wo_location$+sfe01a.wo_no$
        read (wotran_dev,key=k1$,dom=*next)
        while more
            opentran_key$=key(wotran_dev,end=*break)
            k5$=opentran_key.firm_id$+opentran_key.wo_location$+opentran_key.wo_no$
            if k5$<>k1$ then break
            if closedate$<>"" then if opentran_key.trans_date$>closedate$ then break
            read record (wotran_dev,key=opentran_key$) opentran$
            accum_cost=accum_cost+opentran.ext_cost
        wend
        if wotran_dev=sft01a_dev then 
			let wotran_dev=sft21a_dev
			dim opentran$:sft21_tpls$
			continue
		endif
        if wotran_dev=sft21a_dev then 
			let wotran_dev=sft31a_dev
			dim opentran$:sft31_tpls$
			continue
		endif
        break
    wend
 return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)
    def fnh$(q$)=q$(1,2)+chr(32*pos("C"=x9$))+q$(3)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
