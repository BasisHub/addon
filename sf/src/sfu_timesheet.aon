rem --- Work Order Time Sheet Update
rem --- Program sfu_timesheet v8.0.0 14Jan2008 (wou_ba)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/14/2008 10:42:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

    next_overlay$="";rem --- clear next_var and outvect! so adc_process_end doesn't loop...i.e., don't run anything after this
    OutVect!=null()

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
    firm_id$=sysinfo.firm_id$

rem --- Get user approval to update

    msg_id$="AON_UPDT_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit_no_update

rem --- Initializations

    if pr$="Y" then 
        rem --- Get PR parameters
        find record (prs01b_dev,key=firm_id$+"PR01",dom=payroll_defined) prs01b$

        rem --- Generate payroll entries?
        msg_id$="SF_GEN_PR_ENTRIES"
        dim msg_tokens$[1]
        msg_tokens$[1]=fndate$(prs01b.pay_end_date$)
        gosub disp_message

        if msg_opt$="Y" then
            p8$="YES"
            msg_id$="SF_GEN_PR_YES"
        else
            p8$="NO"
            msg_id$="SF_GEN_PR_NO"
        endif
        gosub disp_message
        if msg_opt$="C" then goto std_exit_no_update
    endif

    precision ivs01_precision

rem --- Start progress meter and position header file

    call pgmdir$+"adc_progress.aon","NC","","","","",0,timesheet_dev,1,meter_num,status
    read (timesheet_dev,key=firm_id$+batch_no$,knum="BATCH_KEY",dom=*next)

rem --- Main Read (header file)

    while 1
        header_primary_key$=key(timesheet_dev,knum="PRIMARY",end=*break)
        header_batch_key$=key(timesheet_dev,knum="BATCH_KEY",end=*break)
        if pos(firm_id$+batch_no$=header_batch_key$)<>1 then break
        read record (timesheet_dev) timesht$
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
        
        rem --- Process detail records
        read (timesheetdet_dev,key=header_batch_key$,knum="BATCH_KEY",dom=*next)
        while 1
            detail_primary_key$=key(timesheetdet_dev,knum="PRIMARY",end=*break)
            detail_batch_key$=key(timesheetdet_dev,knum="BATCH_KEY",end=*break)
            if pos(header_batch_key$=detail_batch_key$)<>1 then break
            read record (timesheetdet_dev) timeshtdet$
        
            rem --- Post To Payroll
            if p8$="YES" then 
                precision prs01_precision
                find record (empcode_dev,key=firm_id$+timeshtdet.employee_no$,dom=*endif) ecode$
                
goto skip1; rem --- Now using timeshtdet.direct_rate for pay rate, so can skip this.
                dim prm10a$:fattr(prm10a$)
                find record (prm10_dev,key=firm_id$+"A"+timeshtdet.pay_code$,dom=*next) prm10a$
                if prm10a.prem_factor=0 then let prm10a.prem_factor=1
                if sfs01a.pay_actstd$="A" then 
                    prm10a.pay_units=timeshtdet.direct_rate
                else
                    prm10a.pay_units=prm10a.calc_rtamt*prm10a.prem_factor; rem "Pay code rate
                    dim prm02a$:fattr(prm02a$)
                    find record (prm02_dev,key=ecode.firm_id$+ecode.employee_no$+timeshtdet.title_code$,dom=*endif) prm02a$
                    if ecode.hrlysalary$="S" and prm02a.std_hrs<>0 then let prm02a.std_rate=prm02a.std_rate/prm02a.std_hrs
                    if prm10a.calc_rtamt<>0 prm02a.std_rate=prm10a.calc_rtamt; rem " Override by pay code
                    if prm10a.prem_factor<>0 prm02a.std_rate=prm02a.std_rate*prm10a.prem_factor; rem "Premium rate
                    if prm02a.std_rate<>0 prm10a.pay_units=prm02a.std_rate; rem "Employee rate
                endif
skip1: rem --- Now using timeshtdet.direct_rate for pay rate, so can skip this.

                rem --- Build PRE_DAYTIME (pre-02)
                dim pre02a$:fattr(pre02a$)
                pre02a.firm_id$=firm_id$
                pre02a.employee_no$=timeshtdet.employee_no$
                pre02a.pay_code$=timeshtdet.pay_code$
                pre02a.title_code$=timeshtdet.title_code$
                pre02a.dept_code$=ecode.dept_code$; rem --- why isn't dept_code set in Time Sheet Entry?
                pre02a.trans_date$=timeshtdet.trans_date$
                pre02a.pr_job_no$=timeshtdet.wo_no$
                rem pre02a.rate=prm10a.pay_units; rem --- Now using timeshtdet.direct_rate
                pre02a.rate=timeshtdet.direct_rate
                pre02a.units=timeshtdet.hrs+timeshtdet.setup_time
                pre02a.extended_amt=round(pre02a.rate*pre02a.units,2)
            
                rem --- Get next available pr_time_seq for this employee
                next_seq_no=1
                pr_time_seq_mask$=fill(len(pre02a.pr_time_seq$),"0")
                pre02_trip$=pre02a.firm_id$+pre02a.employee_no$
                read (pre02_dev,key=pre02_trip$+$ff$,dom=*next)
                previous_key$=""
                previous_key$=keyp(pre02_dev,end=*next)
                if pos(pre02_trip$=previous_key$)=1 then
                    next_seq_no=num(previous_key$(1+len(pre02_trip$)),err=*next)+1
                endif
                max_entries=999
                if next_seq_no>max_entries then 
                    msg_id$="SF_MAX_EMPL_ENTRY"
                    dim msg_tokens$[2]
                    msg_tokens$[1]=str(max_entries)
                    msg_tokens$[2]=fnmask$(employee_no$(1,p[0]),m0$)
                    gosub disp_message
                else
                    pre02a.pr_time_seq$=str(next_seq_no:pr_time_seq_mask$)

                    rem --- Write PRE_DAYTIME (pre-02) record
                    write record (pre02_dev) pre02a$
                endif
            endif
        
            rem --- Work Order Transaction
            precision ivs01_precision
            dim sft01a$:fattr(sft01a$)
            sft01a.firm_id$=firm_id$
            sft01a.wo_location$="  "
            sft01a.wo_no$=timeshtdet.wo_no$
            sft01a.trans_date$=timeshtdet.trans_date$
            sft01a.oper_seq_ref$=timeshtdet.oper_seq_ref$
            sft01a.op_code$=timeshtdet.op_code$
            sft01a.employee_no$=timeshtdet.employee_no$
            sft01a.units=timeshtdet.hrs 
            sft01a.unit_cost=timeshtdet.direct_rate+timeshtdet.ovhd_rate
            sft01a.ext_cost=round(timeshtdet.extended_amt,2)
            sft01a.direct_rate=timeshtdet.direct_rate
            sft01a.ovhd_rate=timeshtdet.ovhd_rate
            sft01a.complete_qty=timeshtdet.complete_qty
            sft01a.setup_time=timeshtdet.setup_time

            rem --- Get next available trans_seq for this WO operation transaction
            next_seq_no=1
            trans_seq_mask$=fill(len(sft01a.trans_seq$),"0")
            sft01_trip$=sft01a.firm_id$+sft01a.wo_location$+sft01a.wo_no$+sft01a.trans_date$
            read (sft01a_dev,key=sft01_trip$+$ff$,dom=*next)
            previous_key$=""
            previous_key$=keyp(sft01a_dev,end=*next)
            if pos(sft01_trip$=previous_key$)=1 then
                next_seq_no=num(previous_key$(1+len(sft01_trip$)),err=*next)+1
            endif
            sft01a.trans_seq$=str(next_seq_no:trans_seq_mask$)

            rem --- Write SFT_OPNOPRTR (sft-01) record
            write record (sft01a_dev) sft01a$

            rem --- Transaction Cross Reference
            rem --- SFX_WOTRANXR (sfm-07) has been replaced by a database view vw_sfx_wotranxr

            rem --- Update WO master SFE_WOMASTR (sfe-01)
            extract record (sfe01a_dev,key=firm_id$+"  "+timeshtdet.wo_no$) sfe01a$
            if pos(" "<>sfe01a.act_st_date$)=0 then let sfe01a.act_st_date$=timeshtdet.trans_date$
            if sfe01a.lstact_date$<timeshtdet.trans_date$ then let sfe01a.lstact_date$=timeshtdet.trans_date$
            write record (sfe01a_dev) sfe01a$

            rem --- Remove timesheet detail record (uses PRIMARY key), and reset file pointer for BATCH_KEY
            remove (timesheetdet_dev,key=detail_primary_key$)
            read (timesheetdet_dev,key=detail_batch_key$,knum="BATCH_KEY",dom=*next)

        rem --- Loop back for next detail record
        wend

        rem --- Remove timesheet header record (uses PRIMARY key), and reset file pointer for BATCH_KEY
        remove (timesheet_dev,key=header_primary_key$)
        read (timesheet_dev,key=header_batch_key$,knum="BATCH_KEY",dom=*next)

    rem --- Loop back for next header record
    wend

done: rem --- Finished

    if gl$="Y"
        call pgmdir$+"glc_update.aon",glm01_dev,glt04_dev,glw11_dev,status
        call pgmdir$+"glc_ctlupdate.aon",status
        call pgmdir$+"glc_ctldelete.aon",status
    endif
    call pgmdir$+"adc_batchdelete.aon",err=*next,status
    goto std_exit

payroll_defined: rem --- Payroll Period Must Be Defined

    msg_id$="SF_PR_PERIOD_REQ"
    gosub disp_message
    goto std_exit_no_update

rem --- Standard AddonSoftware functions (01Mar2006)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update: 

    if num(batch_no$)<>0
        unlock_key$=firm_id$+stbl("+PROCESS_ID")+stbl("+BATCH_NO")
        lock_status$=""
        call stbl("+DIR_SYP")+"bac_lock_record.bbj","ADM_PROCBATCHES",unlock_key$,"X","",rd_table_chan,rd_table_chans$[all],lock_status$
    endif
    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
