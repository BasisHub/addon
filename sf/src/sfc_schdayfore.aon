rem --- Schedule: Days Forecast Ahead/Behind (Public/Called)
rem --- Program converted from woc_aa, 05Mar2012
rem --- Created by Codeport Utility (03/05/2012 10:07:11)

rem --- AddonSoftware
rem --- Copyright (c) 1981-2011 AddonSoftware
rem --- All Rights Reserved

rem --- WO_NUM$   : Work Order Number                           (Entered)
rem --- V0$       : From Date 'YYMMDD' or Packed 'YMD'          (Entered)
rem --- V1$       : Calculated Date                             (Returned)
rem --- METHOD$   : Scheduling Method, F=Foreward, B=Backward   (Entered)
rem --- OPCODE_DEV: Channel WOM-02 or BMM-08 is open on         (Entered)
rem --- STATUS$   : ?0 = Successful Calculation                 (Returned)
rem --- : ?1 = Operations Calendar Found Unscheduled Date
rem --- : ?2 = Invalid From Date
rem --- : ?3 = File Missing
rem --- : ?4 = Invalid Scheduling Method
rem --- : ?5 = Purchase Calendar Found Unsceduled Date
rem --- : ?6 = Undetermined error
rem --- : 1? = Date Required changed for a Subcontract with
rem --- :      a non-received associated Purch. Ord/Req.

    seterr std_error
    setesc std_error
    enter wo_num$,v0$,v1$,method$,opcode_dev,status$,opcode$

rem --- Retrieve the program path

    pgmdir$=stbl("+dir_pgm",err=*next)
    status$="03"

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    num_files=9
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="IVS_PARAMS",open_opts$[1]="OTA"
    open_tables$[3]="POM_CALENDAR",open_opts$[3]="OTA"
    open_tables$[4]="SFE_WOOPRTN",open_opts$[4]="OTA"
    open_tables$[5]="SFE_WOMASTR",open_opts$[5]="OTA"
    open_tables$[6]="SFE_WOSUBCNT",open_opts$[6]="OTA"
    open_tables$[7]="SFM_OPCALNDR",open_opts$[7]="OTA"
    open_tables$[8]="SFE_WOSCHDL",open_opts$[8]="OTA"
    open_tables$[9]="SFS_PARAMS",open_opts$[9]="OTA"
    
	gosub open_tables
	
    if status goto std_exit
    ivs01a_dev=num(open_chans$[1])
    pom01_dev=num(open_chans$[3])
    sfe02_dev=num(open_chans$[4])
    sfe03_dev=num(open_chans$[5])
    sfe32_dev=num(open_chans$[6])
    sfm04_dev=num(open_chans$[7])
    sfm05_dev=num(open_chans$[8])
    sfs01a_dev=num(open_chans$[9])
	
rem --- Dimension string templates

    dim ivs01a$:open_tpls$[1],pom01a$:open_tpls$[3]
	dim sfe02a$:open_tpls$[4],sfe03d$:open_tpls$[5],sfe32a$:open_tpls$[6]
	dim	sfm04a$:open_tpls$[7],sfm05a$:open_tpls$[8]
	dim	sfs01a$:open_tpls$[9]

	dim opcode$:opcode$

rem --- Retrieve parameter records

    sfs01a_key$=firm_id$+"SF00"
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$
    find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Initializations

    v1$=v0$
    from_date$=v0$
    status$(2,1)="0"
    direction$=method$
    v$=v0$
    pass=1
    orig_date$=v0$
    if method$="B" end_date$=orig_date$
	v1$=v$
	
	tmp_field$=fattr(sfe32a$,"OPER_SEQ_REF")
	oper_seq_ref_len=dec(tmp_field$(10,2))
	tmp_field$=fattr(sfe32a$,"SUBCONT_SEQ")
	subcont_seq_len=dec(tmp_field$(10,2))

l800: rem --- Check Validity of Data

    x$=""
    x0=0
    call pgmdir$+"adc_daydates.aon",v$,x$,x0
    if v$="N" status$(2,1)="2"; goto l4100
    if pos(direction$="BF")=0 status$(2,1)="4"; goto l4100

rem --- Clear Schedule Detail Files

	while 1
		read (sfm05_dev,key=firm_id$+wo_num$,knum="AON_WONUM",dom=*next)
		read record (sfm05_dev,end=*break) sfm05a$
		if pos(firm_id$+wo_num$=sfm05a.firm_id$+sfm05a.wo_no$)<>1 then break
		remove (sfm05_dev,key=sfm05a.firm_id$+sfm05a.op_code$+sfm05a.sched_date$+sfm05a.wo_no$+sfm05a.oper_seq_ref$)
	wend

l1000: rem --- Capture Subcontract Lead Time information

    if sfs01a.po_interface$<>"Y" goto l1800
    read (sfe32_dev,key=firm_id$+sfe32a.wo_location$+wo_num$,dom=*next)

l1030: rem --- Read Loop

    k$=key(sfe32_dev,end=l1200)
    if pos(firm_id$+sfe32a.wo_location$+wo_num$=k$)<>1 goto l1200
    read record (sfe32_dev) sfe32a$
    if sfe32a.line_type$<>"S" goto l1030
    subs$=subs$+sfe32a.oper_seq_ref$+sfe32a.subcont_seq$+str(sfe32a.lead_time:"000")+"        "
    goto l1030

l1200: rem --- Set Required Date in Subcontracts for Forward method

    if direction$<>"F" goto l1800

    f_yr=num(v$(1,4))
    f_mth=num(v$(5,2))
    f_day=num(v$(7,2))
    occ=1
l1230:
    leadpos=pos(fill(oper_seq_ref_len)=subs$,oper_seq_ref_len+subcont_seq_len+11,occ)
    if leadpos=0 goto l1800
    lead=num(subs$(leadpos+oper_seq_ref_len+subcont_seq_len,3))
l1260:
    find record (pom01_dev,key=firm_id$+str(f_yr:"0000")+str(f_mth:"00"),dom=l1550) pom01a$
    for x=f_day to pom01a.days_in_mth
        if lead<=0 and field(pom01a$,"day_status_"+str(x:"00"))="W" exitto l1500
        if field(pom01a$,"day_status_"+str(x:"00"))="W" lead=lead-1
        f_day=f_day+1
    next x
    if lead<=0 and field(pom01a$,"day_status_"+str(pom01a.days_in_mth:"00"))="W" and f_day<=pom01a.days_in_mth goto l1500
    f_mth=f_mth+1
    f_day=1
	if f_mth>12
		f_mth=1
		f_yr=f_yr+1
	endif
    goto l1260

l1500: rem --- Save date for Subcontracts without op seq and try again

    subs$(leadpos+oper_seq_ref_len+subcont_seq_len+3,8)=str(f_yr:"0000")+str(f_mth:"00")+str(f_day:"00")
    v1$=str(f_yr:"0000")+str(f_mth:"00")+str(f_day:"00")
    v$=v1$
    occ=occ+1
    goto l1230
l1550:
    status$(2,1)="5"
    goto l4100

l1800: rem --- Get Operation record from woe-02

    first_time$="Y"
    if direction$="F" read (sfe02_dev,key=firm_id$+sfe02a.wo_location$+wo_num$,dom=*next)
    if direction$<>"F" read (sfe02_dev,key=firm_id$+sfe02a.wo_location$+wo_num$+$ff$,dom=*next)

l1840: rem --- Read Loop

    if direction$="F"
		k$=key(sfe02_dev,end=l2300)
	else
		k$=keyp(sfe02_dev,end=l2300)
	endif
    if pos(firm_id$+sfe02a.wo_location$+wo_num$=k$)<>1 goto l2300
    gosub l4500
    if sfe02a.line_type$="M" goto l2070
    op_code$=sfe02a.op_code$
    find record (opcode_dev,key=firm_id$+op_code$,dom=*next) opcode$
    v=sfe02a.total_time+sfe02a.move_time+opcode.queue_time

rem --- Calculate Date

    odate$=sfe02a.require_date$
    if direction$="F"
		v=opcode.queue_time
		ele=0
		if v>0
			gosub l6000
		endif
	endif
    if direction$="F"
		v=sfe02a.setup_time
		ele=1
		if v>0
			gosub l6020
		endif
	endif
    if direction$="F"
		v=sfe02a.total_time-sfe02a.setup_time
		ele=2
		if v>0
			gosub l6020
		endif
	endif
    if direction$="F"
		v=sfe02a.move_time
		ele=3
		if v>0
			gosub l6015
		endif
	endif
    if direction$="B" gosub l5000
    v1$=str(f_yr:"0000")+str(f_mth:"00")+str(f_day:"00")
    v$=v1$
    if status$(2,1)<>"0" goto l4100

l2070:
    write record (sfe02_dev) sfe02a$
    if direction$="B" gosub l4500
    goto l1840

l2300: rem --- Set Required Date in Subcontracts for Backward method

    if direction$<>"B" goto l3000
    f_yr=num(v$(1,4))
    f_mth=num(v$(5,2))
    f_day=num(v$(7,2))
    occ=1
l2330:
    leadpos=pos(fill(oper_seq_ref_len)=subs$,-(oper_seq_ref_len+subcont_seq_len+11),occ)
    if leadpos=0 goto l3000
    lead=num(subs$(leadpos+oper_seq_ref_len+subcont_seq_len,3))
l2360:
    find record (pom01_dev,key=firm_id$+str(f_yr:"0000")+str(f_mth:"00"),dom=l2750) pom01a$
    if f_day<1 goto l2450
    if f_day>pom01a.days_in_mth
		f_day=pom01a.days_in_mth
	endif
    for x=f_day to 1 step -1
        if lead<=0 and field(pom01a$,"day_status_"+str(x:"00"))="W" exitto l2700
        if field(pom01a$,"day_status_"+str(x:"00"))="W" lead=lead-1
        f_day=f_day-1
    next x
    if lead<=0 and f_day>0 goto l2700
l2450:
    f_mth=f_mth-1
    f_day=31
    if f_mth<1 f_mth=12,f_yr=f_yr-1
    goto l2360

l2700: rem --- Save date for Subcontracts without op seq and try again

    subs$(leadpos+oper_seq_ref_len+subcont_seq_len+3,8)=str(f_yr:"0000")+str(f_mth:"00")+str(f_day:"00")
    v1$=str(f_yr:"0000")+str(f_mth:"00")+str(f_day:"00")
    v$=v1$
    occ=occ+1
    goto l2330
l2750:
    status$(2,1)="5"
    goto l4100

l3000: rem --- Rewrite Subcontract records with operation sequences

    if sfs01a.po_interface$<>"Y" goto done
    if len(subs$)=0 or direction$="B" goto done
    for x=1 to len(subs$) step oper_seq_ref_len+subcont_seq_len+11
        extract record (sfe32_dev,key=firm_id$+sfe32a.wo_location$+wo_num$+subs$(x+oper_seq_ref_len,3),dom=l3080) sfe32a$
        if num(sfe32a.require_date$)<>0 and subs$(x+oper_seq_ref_len+subcont_seq_len+3,8)<>sfe32a.require_date$ and pos(sfe32a.po_status$="RP")>0 status$(1,1)="1"
        sfe32a.require_date$=subs$(x+oper_seq_ref_len+subcont_seq_len+3,8)
        write record (sfe32_dev) sfe32a$
    l3080:
    next x

done:rem " --- Done - Successful"

    if len(v1$)=0 v1$=v0$
    if direction$="B"
		direction$="F"
		ret_date$=v1$
		v$=v1$
		used_hrs=0
		subs$=""
		goto l800
	endif
    if method$="F" goto l4070
    if orig_date$>=v$ goto l4065
    v0$=""
    call pgmdir$+"adc_daydates.aon",end_date$,v0$,-1
    direction$="B"
    v1$=v0$
    v$=v0$
    end_date$=v0$
    pass=pass+1
    if pass>99 status$(2,1)="6"; goto std_exit
    goto l800
l4065:
    v1$=ret_date$
l4070:
    v0$=from_date$
    goto std_exit

l4100: rem --- Done - Unsuccessful

    goto std_exit

l4500: rem --- Read backwards allowing for different language platforms

    extract record (sfe02_dev,key=k$) sfe02a$
    return

rem --- Calculate Past Date
l5000:
    f_yr=num(v$(1,4))
    f_mth=num(v$(5,2))
    f_day=num(v$(7,2))
    occ=1
    if sfs01a.po_interface$<>"Y" goto l5300
l5030:
    leadpos=pos(sfe02a.op_seq$=subs$,-(oper_seq_ref_len+subcont_seq_len+11),occ)
    if leadpos=0 goto l5300
    subs$(leadpos+oper_seq_ref_len+subcont_seq_len+3,8)=str(f_yr:"0000")+str(f_mth:"00")+str(f_day:"00")
    lead=num(subs$(leadpos+oper_seq_ref_len+subcont_seq_len,3))
l5060:
    find record (pom01_dev,key=firm_id$+str(f_yr:"0000")+str(f_mth:"00"),dom=l5950) pom01a$
    if f_day>pom01a.days_in_mth f_day=pom01a.days_in_mth
    for x=f_day to 1 step -1
        if lead<=0 and field(pom01a$,"day_status_"+str(x:"00"))="W" exitto l5200
        if field(pom01a$,"day_status_"+str(x:"00"))="W" lead=lead-1
        f_day=f_day-1
    next x
    f_mth=f_mth-1
    f_day=31
    if f_mth<1 f_mth=12,f_yr=f_yr-1
    goto l5060

l5200: rem --- Save Date for Subcontracts and try again

    occ=occ+1
    goto l5030

l5300: rem --- Do Operations

    if sfe02a.line_type$="M" goto l5490
l5310:
    find record (sfm04_dev,key=firm_id$+op_code$+str(f_yr:"0000")+str(f_mth:"00"),dom=l5900) sfm04a$
    for x=f_day to 1 step -1
        if nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))<0 exitto l5900
        if nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))>0 and used_hrs>nfield(sfm04a$,"hrs_per_day_"+str(x:"00")) goto l5350
        if nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))>0
			if used_hrs+v>=nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))
				v=v-(nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))-used_hrs)
				used_hrs=used_hrs+(nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))-used_hrs)
			else
				used_hrs=used_hrs+v
				v=0
			endif
		endif
    l5350:
        if v<=0
			if nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))>0
				f_day=x
				exitto l5480
			endif
		endif
        used_hrs=0
    next x
    x$=""
    call pgmdir$+"adc_daydates.aon",str(f_yr:"0000")+str(f_mth:"00")+"01",x$,-1
    f_yr=num(x$(1,4))
    f_mth=num(x$(5,2))
    f_day=num(x$(7,2))
    goto l5310
l5480:
    sfe02a.require_date$=v$
l5490:
    return

l5900: rem --- Operation Date Not Scheduled

    status$(2,1)="1"
    return

l5950: rem --- Purchase Date Not Scheduled

    status$(2,1)="5"
    return

l6000: rem --- Calculate Future Date

    f_yr=num(v$(1,4))
    f_mth=num(v$(5,2))
    f_day=num(v$(7,2))
    occ=1
l6015:
    if sfe02a.line_type$="M" goto l6200
l6020:
    find record (sfm04_dev,key=firm_id$+op_code$+str(f_yr:"0000")+str(f_mth:"00"),dom=l6500) sfm04a$
    if sfm04a.days_in_mth=0 goto l6500
    for x=f_day to sfm04a.days_in_mth
        if nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))<0 exitto l6500
        if nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))>0 and used_hrs>nfield(sfm04a$,"hrs_per_day_"+str(x:"00")) goto l6065
        if nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))>0 gosub l6600
        if nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))>0
			if used_hrs+v>=nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))
				v=v-(nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))-used_hrs)
				used_hrs=used_hrs+(nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))-used_hrs)
			else
				used_hrs=used_hrs+v
				v=0
			endif
		endif
    l6065:
        sfe02a.require_date$=v$
        if v<=0
			f_day=x
			sfe02a.require_date$=str(f_yr:"0000")+str(f_mth:"00")+str(f_day:"00")
			exitto l6200
		endif
        used_hrs=0
        first_time$="N"
    next x
    f_mth=f_mth+1
    f_day=1
    if f_mth>12 f_yr=f_yr+1,f_mth=1
    goto l6020

l6200: rem --- Do Subcontracts

    if sfs01a.po_interface$<>"Y" or ele<>3 goto l6490
l6220:
    leadpos=pos(sfe02a.op_seq$=subs$,oper_seq_ref_len+subcont_seq_len+11,occ)
    if leadpos=0 goto l6490
    lead=num(subs$(leadpos+oper_seq_ref_len+subcont_seq_len,3))
l6250:
    find record (pom01_dev,key=firm_id$+str(f_yr:"0000")+str(f_mth:"00"),dom=l6550) pom01a$
    for x=f_day to pom01a.days_in_mth
        if lead<=0 and field(pom01a$,"day_status_"+str(x:"00"))="W" exitto l6400
        if field(pom01a$,"day_status_"+str(x:"00"))="W" lead=lead-1
        f_day=f_day+1
    next x
    if lead<=0 and field(pom01a$,"day_status_"+str(x:"00"))="W" and f_day<=pom01a.days_in_mth goto l6400
    f_mth=f_mth+1
	f_day=1
    if f_mth>12
		f_mth=1
		f_yr=f_yr+1
	endif
    goto l6250                                                  

l6400: rem --- Save Date for Subcontracts and try again

    subs$(leadpos+oper_seq_ref_len+subcont_seq_len+3,8)=str(f_yr:"0000")+str(f_mth:"00")+str(f_day:"00")
    occ=occ+1                                                  
    goto l6220                                                  
l6490: return                                                  

rem --- Date Not Scheduled
l6500:
    status$(2,1)="1"
    return                                                  
l6550: rem " --- Purchase Date Not Scheduled"
    status$(2,1)="5"
    return                                                  
l6600: rem " --- Write Schedule Detail Files

	dim sfm05a$:fattr(sfm05a$)
	sfm05a.firm_id$=firm_id$
	sfm05a.op_code$=op_code$
	sfm05a.sched_date$=str(f_yr:"0000")+str(f_mth:"00")+str(x:"00")
	sfm05a.wo_no$=wo_num$
	sfm05a.oper_seq_ref$=sfe02a.internal_seq_no$
    if used_hrs+v>nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))
		z=nfield(sfm04a$,"hrs_per_day_"+str(x:"00"))-used_hrs
	else
		z=v
	endif
    extract record (sfm05_dev,key=firm_id$+sfm05a.op_code$+sfm05a.sched_date$+sfm05a.wo_no$+sfm05a.oper_seq_ref$,knum="PRIMARY",dom=*next) sfm05a$
	if ele=0 sfm05a.queue_time=sfm05a.queue_time+z
	if ele=1 sfm05a.setup_time=sfm05a.setup_time+z
	if ele=2 sfm05a.runtime_hrs=sfm05a.runtime_hrs+z
	if ele=3 sfm05a.move_time=sfm05a.move_time+z
    write record (sfm05_dev) sfm05a$
    return                                                  

open_tables: rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
