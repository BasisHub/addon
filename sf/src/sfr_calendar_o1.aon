rem --- Calendar Print - Detail Print
rem --- Program sfr_calendar_o1.aon v8.0.0 08Jan2008 (sfr_qb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/08/2008 10:45:30)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

    seterr std_error
    setesc std_exit

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Initializations

    dim columns$[0,10]
    columns=0
    dim l[12],headings$[6]
    more=1
    headings$[1]=sysinfo.firm_name$
    headings$[2]=sysinfo.task_desc$
    months$="January  February March    April    May      June     July     August   SeptemberOctober  November December "
    days$="Sunday   Monday   Tuesday  WednesdayThursday Friday   Saturday "
    l[1]=31
    l[2]=28,l[3]=31,l[4]=30,l[5]=31,l[6]=30
    l[7]=31
    l[8]=31,l[9]=30,l[10]=31,l[11]=30,l[12]=31
    call pgmdir$+"adc_progress.aon","N","","","","",0,sfm04_dev,1,meter_num,ignore_status
  
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFM_OPCALNDR","PRIMARY",sfm04_key_tpl$,rd_table_chans$[all],status$
   
rem --- Load options

    sfm04a.firm_id$=firm_id$
    sfm04a.op_code$=opcode$
   
rem --- Initialize Op Code for All Op Code selection

    dim sfm04_key$:sfm04_key_tpl$
    if opcode$="" then 
        read (sfm04_dev,key=(sfm04a.firm_id$+sfm04a.op_code$),dom=*next)
        sfm04_key$=key(sfm04_dev,end=done)
        if pos(firm_id$=sfm04_key$)<>1 then goto std_exit
        sfm04a.op_code$=sfm04_key.op_code$
    endif     

rem --- Get first month

    while more
        if num(month1$)>0 then 
            sfm04a.year$=year1$
            sfm04a.month$=str(month1$:"00")
        else    
            read (sfm04_dev,key=sfm04a.firm_id$+sfm04a.op_code$,dom=*next)
            sfm04_key$=key(sfm04_dev,end=done)
            if pos(firm_id$+opcode$=sfm04_key$)<>1 then goto std_exit
            sfm04a.firm_id$=sfm04_key.firm_id$
            sfm04a.op_code$=sfm04_key.op_code$
            sfm04a.year$=sfm04_key.year$
            sfm04a.month$=sfm04_key.month$
        endif
   

rem --- Month/Year?
        while more
            for i=1 to 31
                 FIELD sfm04a$,"hrs_per_day_"+str(i:"00") = -1
            next i
            read record (sfm04_dev,key=(sfm04a.firm_id$+sfm04a.op_code$+sfm04a.year$+sfm04a.month$),dom=*next) sfm04a$
            year$=sfm04a.year$
            month$=sfm04a.month$

rem --- Set calendar title

            BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
            find record (codfile_dev,key=firm_id$+sfm04a.op_code$,dom=*next) opdesc$
            dim pbuf$(80)
            pbuf$(int((80-len(cvs(months$((num(month$)-1)*9+1,9),2)+" "+str(year$)))/2))=cvs(months$((num(month$)-1)*9+1,9),2)+" "+str(year$)
            OutVect!.addItem(pbuf$)
            dim pbuf$(80)
            pbuf$(int((80-len(cvs(sfm04a.op_code$+opdesc.code_desc$,2)))/2))=cvs(sfm04a.op_code$+opdesc.code_desc$,2)
            OutVect!.addItem(pbuf$)
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,ignore_status

rem --- Print Days of the Week

            OutVect!.addItem("+"+fill(76,"-")+"+")
            column=1
            dim pbuf$(80)
            for x=1 to 7
                pbuf$(column)="|"+days$((x-1)*9+1,9)
                column=column+11
            next x
            pbuf$(column)="|"
            OutVect!.addItem(pbuf$)
            OutVect!.addItem("+"+fill(76,"-")+"+")

rem --- Determine starting day of the week

            dim days[42]
            first$=year$+month$+"01"
            x$="",first=0,d=0,date=0
            call pgmdir$+"adc_dayweek.aon",first_date$,x$,first
            first=first+1
            l[2]=28
            yy=num(year$)
            mm=num(month$)
            if first>7 then let first=1
            if mod(yy,4)=0 then let l[2]=29
            for x=first to 42
                date=date+1
                if date<=l[mm] then let d=d+1,days[x]=d
            next x

rem --- Display dates on calendar

            date=1
            dim pbuf$(80)
            for y=0 to 5
                column=1
                for x=1 to 7
                    pbuf$(column)="|"
                    if days[y*7+x]>0 then pbuf$(column+1)=str(days[y*7+x])
                    column=column+11
                next x
                pbuf$(column)="|"
                OutVect!.addItem(pbuf$)
                column=1
                dim pbuf$(80)
                for x=1 to 7
                    pbuf$(column)="|"
                    if days[y*7+x]<>0 then 
                        n=NFIELD(sfm04a$,"hrs_per_day_"+str(date:"00"))
                        x$=" "+str(n:m1$)+" Hr"
                        if num(FIELD(sfm04a$,"hrs_per_day_"+str(date:"00")))=-1 then let x$=" Unsched"
                        pbuf$(column+1)=x$
                        date=date+1
                    endif
                    column=column+11
                next x
                pbuf$(column)="|"
                OutVect!.addItem(pbuf$)
                if y<5 then OutVect!.addItem("|"+fill(76,"-")+"|")
            next y
            OutVect!.addItem("+"+fill(76,"-")+"|")
            
rem --- Get Next Month

            mon=num(sfm04a.month$)
            yr=num(sfm04a.year$)
            mon=mon+1
            if mon>12 then 
                mon=1
                yr=yr+1
            endif
            sfm04a.year$=str(yr)
            sfm04a.month$=str(mon:"00")
            if num(month2$)>0 then 
                if sfm04a.year$+sfm04a.month$>year2$+str(month2$:"00") then
                    if opcode$<>"" then 
                        goto std_exit 
                    else 
                        read (sfm04_dev,key=(sfm04a.firm_id$+sfm04a.op_code$)+$ff$,dom=get_nextopcode)
                    endif
                endif
            endif

            if num(month2$)=0 and opcode$<>"" and (sfm04a.year$+sfm04a.month$)>last_date$ then goto std_exit
            if num(month2$)=0 and opcode$="" then 

rem --- Get next record when printing all codes with last date
                sfm04_key$=key(sfm04_dev,end=done)
                if pos(firm_id$=sfm04_key$)<>1 then goto std_exit
                if sfm04_key.op_code$=sfm04a.op_code$ then continue
                if num(month1$)>0 then 
                    sfm04a.year$=year1$
                    sfm04a.month$=str(month1$:"00")
                endif
                continue
            endif
        wend

get_nextopcode: rem --- Get next Op Code when printing all Codes with specific end date

        sfm04_key$=key(sfm04_dev,end=done)
        if pos(firm_id$=sfm04_key$)<>1 then goto std_exit
        continue
    wend

done: rem --- End

    goto std_exit

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
