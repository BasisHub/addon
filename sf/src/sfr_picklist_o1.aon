rem --- Work Order Pick Slip - Printing
rem --- Program sfr_bb v8.0.0 04Jan2008 (sfr_bb)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 02:45:55)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    use ::bbtranslator.bbj::BBTranslator
    declare BBTranslator Translate!
    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif

    seterr std_error
    setesc std_error

    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

    use ::sys/prog/bao_option.bbj::Option
    use ::sys/prog/bao_utilities.bbj::BarUtils

    declare BBJasperReport BBjReport!
    
    params! = new java.util.HashMap()
        
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 200; rem keep it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 100

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Set document Directory

    docdir$=stbl("+DOC_DIR_PDF",err=*next)
    mkdir docdir$,err=*next

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=5
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)

rem --- Set Report Name & directory

    reportDir$ = stbl("+DIR_REPORTS",err=*next)   
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "SFPickList"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"
    masterBaseName$ = "SFPickListMaster"
    master_filename$ = reportDir$ + masterBaseName$+".jasper"    

    declare BBJasperReport report!

rem --- Init Data

    more=1
    master_document=1
    redim sfw13a$; rem --- SPROC will need record/template; not opening there since it's already open/locked, so pass in templated string
    
rem --- Assign form input values to local variables

    sort_seq$=option!.getOptionData("REPORT_SEQ")
    alias$=option!.getAlias()
    
	if sort_seq$="L"
		key_num$="PRIMARY"
        rep_seq$="AON_LOCATION"
	else
		key_num$="MATERIAL_SEQ"
        rep_seq$="AON_MATERIAL"
	endif

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,sfe04c_dev,1,meter_num,ignore_status

rem --- Init Read

    read (sfe04c_dev,key=firm_id$,dom=*next)

rem --- Main Read

    while more

        old_op_step$=""
        read record (sfe04c_dev,end=*break) sfe04c$
        if pos(firm_id$=sfe04c$)<>1 then break

    rem --- Get Work Order

        read record (sfe13a_dev,key=sfe04c.firm_id$+sfe04c.wo_location$+sfe04c.wo_no$,dom=*continue) sfe13a$
        read record (sfe01a_dev,key=sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$,dom=*continue) sfe01a$
        found=0
        find (sfe04d_dev,key=sfe13a.firm_id$+sfe13a.wo_location$+sfe13a.wo_no$,dom=*next); found=1
        if found then continue;rem don't create Pick List if trans exist
        
        recs=recs+1
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status

    rem --- Make Document Archive Record and Get Document ID
    
        rep_date$=date(0:stbl("+DATE_MASK"))
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")

        new_doc_id$=""
        new_doc_name$=""
        doc_name$="SFPickList_"+sfe13a.wo_no$+"_"+alias$
        doc_keywords$="SFPickList: "+sfe13a.wo_no$

        rd_source_alias$=alias$
        rd_source_type$="O"
        rd_doc_source$="E"
        rd_doc_ext$="PDF"
        rd_source_id$=""
        rd_source_ref$=""
        rd_doc_keywords$=doc_keywords$
    
    rem --- Get Next Document Number and update Document Audit for individual pdf
    
        call stbl("+DIR_SYP")+"bas_sequences.bbj","DOC_NO",new_doc_id$,rd_table_chans$[all] 
        new_doc_name$=new_doc_id$+"_"+doc_name$+".pdf"        
        
        call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,rep_date_stamp$,rep_time_stamp$,rd_doc_source$,rd_doc_ext$,docdir$,
:           rd_source_type$,rd_source_alias$,rd_source_id$,rd_source_ref$,rd_table_chans$[all],"",new_doc_name$,doc_name$,doc_keywords$

    rem --- Get Next Document Number and update Document Audit with JAS entry for master doc, if first time thru
    
        if master_document
            rd_doc_ext$="JAS"
            rd_archive_action$="DOC_ID-NOREPRINT"
            rd_doc_id$=""
            rd_source_id$=""
            rd_source_ref$=""
            rd_doc_keywords$=""
            gosub document_whse
            rd_archive_action$=""
            master_doc_id$=rd_doc_id$
            master_doc_name$=master_doc_id$+"_"+masterBaseName$+".pdf"
        endif

    rem --- Document Output Report Parameters

        params!.put("DOC_NO",new_doc_id$)
        params!.put("DATE_REP",rep_date$+"  "+rep_time$)

    rem --- Other params

        params!.put("BARISTA_WD",dir(""))
        params!.put("FIRM_ID",firm_id$)
        params!.put("WO_LOCATION",sfe13a.wo_location$)
        params!.put("WO_NO",sfe13a.wo_no$)
        params!.put("QTY_MASK",m2$)
        params!.put("CUST_MASK",cust_mask$)
        params!.put("BOM_INTERFACE",bm$)
        params!.put("KEY_NUM",key_num$)
        params!.put("REP_SEQ",rep_seq$)
        params!.put("IV_PRECISION",ivs01_precision$)
        params!.put("IV_LOTSER",ivs01a.lotser_flag$)
        params!.put("BANDED_ROWS","Y")
        params!.put("INFO_31",hta(info(3,1)))

    rem --- invoke jasper

        locale$ = stbl("!LOCALE")
        locale$ = stbl("+USER_LOCALE",err=*next)

        if master_document
            master_report! = BarUtils.getBBJasperReport(master_filename$)
            master_report!.putParams(params!)
            master_report!.setLocale(locale$)
            master_report!.fill()
            master_document=0
        endif

        report! = BarUtils.getBBJasperReport(filename$)
        report!.putParams(params!)
        report!.setLocale(locale$)
        report!.fill()
        report!.exportToPDF(BBjAPI().FALSE, docdir$+new_doc_name$)
        master_report!.appendReport(report!)
        report!.destroy()

    wend

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

rem --- bring up Jasper viewer (Master only - contains all SF Pick Lists this run)

    declare BBJasperViewerWindow masterViewerWindow!
    declare BBjTopLevelWindow bbjWindowMaster!
    
rem --- get a pdf path from +DOC_DIR_PDF
rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path

rem --- master jasper
    repTitle$=masterBaseName$
    rd_doc_name$=master_doc_name$

    rd_doc_id$=master_doc_id$

    gosub exportMasterToPDF; rem --- always save to doc archive

    masterViewerWindow! = new BBJasperViewerWindow(master_report!,5,5,screen_width,screen_height,repTitle$,$00000093$)
    masterViewerControl! = masterViewerWindow!.getViewerControl()
    masterViewerControl!.setGoogleDefaultDocument(repTitle$)
    masterViewerControl!.setDefaultSaveFolder(rd_doc_path$)
    masterViewerControl!.setDefaultSaveFile(repTitle$)
    masterViewerControl!.setFitWidth()

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    masterSaveMenuButton! = masterViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    masterSaveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnMasterSaveMenuButton")

    masterSavMenuItem! = masterViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_ITEM_NAME())
    masterSavMenuItem!.setCallback(BBjMenuItem.ON_POPUP_ITEM_SELECT,"OnMasterSaveMenuButton")

    masterEmailToolButton! = masterViewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    masterEmailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnMasterEmailToolButton")

    masterViewerWindow!.setReleaseOnClose(0)
    masterViewerWindow!.show(0)

    bbjWindowMaster!= masterViewerWindow!.getViewerWindow()
    bbjWindowMaster!.setCallback(bbjWindowMaster!.ON_CLOSE,"close_win")


rem --- Event Control

    process_events,err=*same

    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)

    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       rd_table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_doc_path$=dsk("")+dir("")
        rd_doc_path$=BBjAPI().getFileSystem().resolvePath(stbl("+DOC_DIR_PDF",err=*next),err=*next)+"/"
        mkdir rd_doc_path$,err=*next
    endif

    return

OnMasterSaveMenuButton:
rem --- save save and display confirmation dialog

    show_save_dlg$="YES"
 
exportMasterToPDF:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_ext$="PDF"
        rep_title$=repTitle$
        rd_source_id$="V"
        rd_source_ref$=""
        rd_doc_keywords$=""
        master_report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)
        gosub document_whse
    endif

    if show_save_dlg$="YES"
        msg_id$="DOC_OUTPUT_COMP"
        gosub disp_message
        show_save_dlg$=""
    endif
    return    

OnMasterEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub exportMasterToPDF

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,rd_table_chans$[all]
    endif

    return

close_win:rem --- Viewer Window Closed

    msg_id$="AON_UPDT_SF_PICK"
    dim msg_tokens$[1]
    msg_tokens$[1]=sysinfo.task_desc$
    gosub disp_message
	if msg_opt$<>"Y" then goto std_exit

    read (sfe04c_dev,key=firm_id$,dom=*next)

    while more

		extract record (sfe04c_dev,end=*break) sfe04c$; rem --- Advisory locking
        if pos(firm_id$=sfe04c$)=0 break
        sfe13a_found=0
        read record (sfe13a_dev,key=sfe04c.firm_id$+sfe04c.wo_location$+sfe04c.wo_no$,dom=*next) sfe13a$; sfe13a_found=1
        if !sfe13a_found then
            read (sfe04c_dev)
            continue
        endif
		sfe15a.firm_id$=firm_id$
		sfe15a.wo_location$=sfe13a.wo_location$
		sfe15a.wo_no$=sfe13a.wo_no$
		sfe15a.wo_type$=sfe13a.wo_type$
		sfe15a.wo_category$=sfe13a.wo_category$
		sfe15a.unit_measure$=sfe13a.unit_measure$
		sfe15a.warehouse_id$=sfe13a.warehouse_id$
		sfe15a.item_id$=sfe13a.item_id$
        write record (sfe15a_dev) sfe15a$

    rem --- Remove Committed and Create Issue

        read (sfw13a_dev,key=sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$,knum="PRIMARY",dom=*next)

        while more

			read record (sfw13a_dev,end=*break) sfw13a$
            if sfw13a.firm_id$+sfw13a.wo_location$+sfw13a.wo_no$<>sfe15a.firm_id$+sfe15a.wo_location$+sfe15a.wo_no$ then break
            sfe23a_key$=sfw13a.firm_id$+sfw13a.wo_location$+sfw13a.wo_no$+sfw13a.material_seq$
            read record (sfe23a_dev,key=sfe23a_key$,knum="AO_DISP_SEQ",dom=*continue) sfe23a$

        rem --- Renumber Issue Sequence to Match Pick List

            sfe25a.firm_id$=sfe23a.firm_id$
            sfe25a.wo_location$=sfe23a.wo_location$
            sfe25a.wo_no$=sfe23a.wo_no$
            sfe25a.material_seq$=sfe23a.material_seq$
            sfe25a.internal_seq_no$=sfe23a.internal_seq_no$
			sfe25a.unit_measure$=sfe23a.unit_measure$
			sfe25a.womatdtl_seq_ref$=sfe23a.internal_seq_no$
			sfe25a.warehouse_id$=sfe23a.warehouse_id$
			sfe25a.item_id$=sfe23a.item_id$
			sfe25a.require_date$=sfe23a.require_date$
			sfe25a.qty_ordered=sfe23a.qty_ordered
			sfe25a.tot_qty_iss=sfe23a.tot_qty_iss
			sfe25a.unit_cost=sfe23a.unit_cost
			sfe25a.qty_issued=sfe23a.qty_issued
			sfe25a.issue_cost=sfe23a.issue_cost
			sfe25a$=field(sfe25a$)
            write record (sfe25a_dev) sfe25a$

        wend

        remove (sfe04c_dev,key=firm_id$+sfe04c.wo_location$+sfe04c.wo_no$)

    wend

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message
	
    masterViewerWindow!.destroy(err=*next)
	goto std_exit


disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    return

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    call stbl("+DIR_SYP")+"bac_lock_record.bbj","SFW_PICKLCTN","","U","M",0,rd_table_chans$[all],lock_status$
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    call stbl("+DIR_SYP")+"bac_lock_record.bbj","SFW_PICKLCTN","","U","M",0,rd_table_chans$[all],lock_status$
    release

rem #endinclude std_end.src

    end
