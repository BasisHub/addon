rem --- Work Order Adjustment Register
rem --- Program sfr_la v8.0.0 04Jan2008 (sfr_la)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/04/2008 11:36:22)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved

        setesc std_error
        seterr std_error

rem --- Document initializations

        OutVect!=bbjAPI().getSysGui().makeVector()
        HdrVect!=bbjAPI().getSysGui().makeVector()
        BrkVect!=bbjAPI().getSysGui().makeVector()
        TotVect!=bbjAPI().getSysGui().makeVector()
        rep_date$=date(0:"%Mz/%Dz/%Yd")
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")
        rep_prog$=pgm(-2)

rem --- Retrieve the program path

        pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)
        milestone=num(stbl("+MILESTONE",err=*next),err=*next)
        firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

        files=21,begfile=1,endfile=files
        dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
        files$[1]="apm-01",ids$[1]="APM_VENDMAST"
        files$[2]="aps_params",ids$[2]="APS_PARAMS"
        files$[3]="ars_params",ids$[3]="ARS_PARAMS"
        files$[4]="gls_params",ids$[4]="GLS_PARAMS"
        files$[5]="glt-04",ids$[5]="GLE_DAILYDETAIL"
        files$[6]="ivm-01",ids$[6]="IVM_ITEMMAST"
        files$[7]="ivs_params",ids$[7]="IVS_PARAMS"
        files$[8]="prs_params",ids$[8]="PRS_PARAMS"
        files$[9]="sfe-01",ids$[9]="SFE_WOMASTR"
        files$[10]="sfe-12",ids$[10]="SFE_WOOPRADJ"
        files$[11]="sfe-42",ids$[11]="SFE_WOSUBADJ"
        files$[12]="sfm-10",ids$[12]="SFC_WOTYPECD"
        files$[13]="sfs_params",ids$[13]="SFS_PARAMS"
        files$[14]="sft-01",ids$[14]="SFT_OPNOPRTR"
        files$[15]="sft-31",ids$[15]="SFT_OPNSUBTR"
        files$[16]="sfw-06",ids$[16]="SFW_ADJXTYPE"
        files$[17]="sfw-08",ids$[17]="SFW_COSTADJT"
        call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status goto std_exit
        apm01a_dev=channels[1]
        aps01a_dev=channels[2]
        ars01a_dev=channels[3]
        gls01a_dev=channels[4]
        glt14a_dev=channels[5]
        ivm01a_dev=channels[6]
        ivs01a_dev=channels[7]
        prs01a_dev=channels[8]
        sfe01a_dev=channels[9]
        sfe12a_dev=channels[10]
        sfe42a_dev=channels[11]
        sfm10a_dev=channels[12]
        sfs01a_dev=channels[13]
        sft01a_dev=channels[14]
        sft31a_dev=channels[15]
        sfw06a_dev=channels[16]
        sfw08a_dev=channels[17]

rem --- Dimension string templates

    dim apm01a$:templates$[1],aps01a$:templates$[2],ars01a$:templates$[3],
:       gls01a$:templates$[4],glt14a$:templates$[5],ivm01a$:templates$[6],
:       ivs01a$:templates$[7],prs01a$:templates$[8],
:       sfe01a$:templates$[9],sfe12a$:templates$[10],sfe42a$:templates$[11],
:       sfm10a$:templates$[12],
:       sfs01a$:templates$[13],sft01a$:templates$[14],sft31a$:templates$[15],
:       sfw06a$:templates$[16],sfw08a$:templates$[17]



rem --- Retrieve parameter records

        aps01a_key$=firm_id$+"AP00"
        find record (aps01a_dev,key=aps01a_key$,err=std_missing_params) aps01a$
        ars01a_key$=firm_id$+"AR00"
        find record (ars01a_dev,key=ars01a_key$,err=std_missing_params) ars01a$
        gls01a_key$=firm_id$+"GL00"
        find record (gls01a_dev,key=gls01a_key$,err=std_missing_params) gls01a$
        ivs01a_key$=firm_id$+"IV00"
        find record (ivs01a_dev,key=ivs01a_key$,err=std_missing_params) ivs01a$
        prs01a_key$=firm_id$+"PR00"
        find record (prs01a_dev,key=prs01a_key$,err=std_missing_params) prs01a$
        sfs01a_key$=firm_id$+"SF00"
        find record (sfs01a_dev,key=sfs01a_key$,err=std_missing_params) sfs01a$

rem --- Parameters

        bm$=sfs01a.bm_interface$
        op$=sfs01a.ar_interface$,ap$=sfs01a.po_interface$,pr$=sfs01a.pr_interface$
        i9=ivs01a.item_id_len
        i1=num(ivs01a.precision$)
        i2=ivs01a.ls_no_len
        if op$<>"N"
            find record (ars01a_dev,key=firm_id$+"AR00",dom=std_missing_params) ars01a$
            c0=num(ars01a.customer_size$)
            c1=len(ars01a.customer_output$)
        endif

        if ap$<>"N"
            find record (aps01a_dev,key=firm_id$+"AP00",dom=std_missing_params) aps01a$
            c2=num(aps01a.vendor_size$)
            c3=len(aps01a.vendor_output$)
        endif

        if pr$<>"N"
            find record (prs01a_dev,key=firm_id$+"PR00",dom=std_missing_params) prs01a$
            c4=num(prs01a.empl_no_len$)
            c5=len(prs01a.empl_output$)
        else
             c4=num(sfs01a.empl_no_len$),prs01a.empl_output$=m0$
        endif

        gl$="N"
        status=0,source$=pgm(-2)
        call pgmdir$+"glc_ctlcreate.aon",err=*next,source$,"SF",glw11a$,gl$,status
        if status then goto std_exit

rem --- Headings and print positions

 
    dim columns$[12,10]
        columns = 12
        columns$[0,0]="WO #",                                columns$[0,1]="C",columns$[0,2]="6"
    if sfs01a.po_interface$="Y" then
        
        columns$[1,0]="Type Cat^Vendor/PO #/ ",              columns$[1,1]="C",columns$[1,2]="10"
    else
        columns$[1,0]="Type Cat",                            columns$[1,1]="C",columns$[1,2]="10"
    endif

        columns$[2,0]="Transaction Date^Employee/Op Code",   columns$[2,1]="C",columns$[2,2]="16"
        columns$[3,0]="Src Seq",                             columns$[3,1]="C",columns$[3,2]="20",columns$[3,3]=m1$
        columns$[4,0]="Qty^Cmplt ",                          columns$[4,1]="C",columns$[4,2]="8"
        columns$[5,0]="Direct^Labour",                       columns$[5,1]="C",columns$[5,2]="8"
        columns$[6,0]="Overhead^Labour",                     columns$[6,1]="N",columns$[6,2]="6",columns$[6,3]=m2$
        columns$[7,0]="Unit^Cost",                           columns$[7,1]="N",columns$[7,2]="6",columns$[7,3]=m3$
        columns$[8,0]="Setup^Units",                         columns$[8,1]="N",columns$[8,2]="6",columns$[8,3]=m3$
        columns$[9,0]="Units",                               columns$[9,1]="N",columns$[9,2]="10",columns$[9,3]=m1$
        columns$[10,0]="Extension",                          columns$[10,1]="C",columns$[10,2]="12",columns$[10,3]=m1$
        columns$[11,0]="New^Adj",                            columns$[11,1]="C",columns$[11,2]="6"
        columns$[12,0]="W0#^Date",                           columns$[12,1]="C",columns$[12,2]="6"

rem --- Init Data

        dim j$(80,"-"),t[3],headings$[1],desc[3]
        h0=132
        h=0,headings$[0]=n1$,headings$[1]=n3$,l9=59,l=l9+1
        clock$=""
        sfs01a.rate_mask$="",when$=sysinfo.system_date$,headings=1,errors=0,termf0$=f0$
        if p9$="L" then  sfs01a.rate_mask$="Lot Number: "
        if p9$="S" then  sfs01a.rate_mask$="Serial Number: "
        m0=len(sfs01a.empl_output$)
        m1=len(sfs01a.amount_mask$),m2=len(sfs01a.unit_mask$),m3=len(sfs01a.rate_mask$),o9=0
        lm$="Labor Cost Adjustment"
        sm$="Subcontract Cost Adjustment"
        cm$="Closed Cost Adjustment"
        desc[1]=num(ivs01a.desc_len_01$)
        desc[2]=num(ivs01a.desc_len_02$)
        desc[3]=num(ivs01a.desc_len_03$)
        precision 4
        dim j2$(m1,"-")
        more=1

rem --- retrieve masks 

        call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","A","",m1$,0,m1
        call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","U","",m2$,0,m2

rem --- Retrieve key templates

        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOOPRADJ","PRIMARY",sfe12a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOSUBADJ","PRIMARY",sfe42a_key_tpl$,rd_table_chans$[all],status$
        call stbl("+DIR_SYP")+"bac_key_template.bbj","SFW_COSTADJT","PRIMARY",sfw08a_key_tpl$,rd_table_chans$[all],status$


rem --- Additional File Opens

        if gl$="Y" then 
            files$[18]="glm-01",ids$[18]="GLM_ACCT"
            files$[19]=glw11a$,ids$[19]="GLW_DAILYDETAIL",options$[19]="CL"
        endif
        if bm$="Y" then 
            files$[20]="bmm-08",ids$[20]="BMC_OPCODES"
        else
            files$[20]="sfm-02",ids$[20]="SFC_OPRTNCOD"
        endif
        if pr$="Y" then 
            files$[21]="prm-01",ids$[21]="PRM_EMPLMAST"
        else
            files$[21]="sfm-01",ids$[21]="SFM_EMPLMAST"
        endif

    
     call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status then goto std_exit
        glm01_dev=channels[18]
        glw11_dev=channels[19]
        opcode_dev=channels[20]
        empcode_dev=channels[21]


rem --- Options

        title=0
        prompt$="Do You Want To Print The Cost Adjustment Register?",prompt=2
        call pgmdir$+"adc_yesno.aon",title,prompt$,prompt,v$,v3
        if v$<>"Y" then goto std_exit

rem --- Clear Work File/Open Printer/Create Report Sort File

        call pgmdir$+"adc_progress.aon","N","","","","",0,sfe12a_dev,1,meter_num,ignore_status

        sfadj_dev=sfe12a_dev
        dim sfadj_key$:sfe12a_key_tpl$

        while more
            read (sfadj_dev,key=firm_id$,dom=*next)
            while more
                sfadj_key$=key(sfadj_dev,end=*break)
                if pos(sfadj_key.firm_id$=firm_id$)=0 then break
                read (sfadj_dev,key=sfadj_key$)
                write record (sfw08a_dev,key=sfadj_key$) sfw08a$
                call pgmdir$+"adc_progress.aon","S","","","",sfw08a.firm_id$+sfw08a.wo_location$+sfw08a.wo_no$+sfw08a.record_id$,0,0,1,0,ignore_status
            wend
            if sfadj_dev=sfe42a_dev then break
            sfadj_dev=sfe42a_dev
            dim sfadj_key$:sfe42a_key_tpl$
        wend

        call pgmdir$+"adc_progress.aon","N","","","","",0,sfw08a_dev,1,meter_num,ignore_status

rem --- Init Read

        read (sfw08a_dev,key=firm_id$,dom=*next)

rem --- Main Read

        dim sfw08a_key$:sfw08a_key_tpl$

        while more
            sfw08a_key$=key(sfw08a_dev,end=done)
            if pos(firm_id$=sfw08a_key$)<>1 then break
            read (sfw08a_dev,key=sfw08a_key$)
            if sfw08a_key.record_id$="O" then read record (sfe12a_dev,key=sfw08a_key$) sfe12a$
            if sfw08a_key.record_id$="S" then read record (sfe42a_dev,key=sfw08a_key$) sfe42a$
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,ignore_status

rem --- W/O Header

            find record (sfe01a_dev,key=sfw08a.firm_id$+sfw08a.wo_location$+sfw08a.wo_no$+sfw08a.record_id$,dom=label1) sfe01a$
            if sfe01a.wo_category$="I"

            label1:
                find record (ivm01a_dev,key=firm_id$+sfe01a.item_id$,dom=label2) ivm01a$
                sfe01a.description_01$=ivm01a.item_desc$(1,min(desc[1],30))

            endif

label2:
            sfe01b$=sfe01a$

rem --- Get Additional Data

            rec_id$="O"
            if sfe12a.record_id_o$="O"
                read record (sft01a_dev,key=sfe12a.firm_id$+sfe12a.wo_location$+sfe12a.wo_no$+sfe12a.trans_date$+sfe12a.record_id_o$+sfe12a.trans_seq$,dom=*continue) sft01a$
                sfex2$=sfe12a$
                sftx1a$=sft01a$
                rec_id_x$=sfe12a.record_id_o$
            endif
            if sfe42a.record_id_s$="S" 
                read record (sft31a_dev,key=sfe42a.firm_id$+sfe42a.wo_location$+sfe42a.wo_no$+sfe42a.trans_date$+sfe42a.record_id_s$+sfe42a.trans_seq$,dom=*continue) sft31a$
                sfex2a$=sfe42a$
                sftx1a$=sft31a$
                rec_id$="S"
                rec_id_x$=sfe42a.record_id_s$
            endif

            find record (sfe01b_dev,key=firm_id$+"  "+sfex2a.new_wo_no$,dom=label3) sfe01b$
            if pos(" "<>sfex2a.new_trn_date$)=0 then sfex2a.new_trn_date$=sfex2a.trans_date$

label3:

            if num(sfex2a.new_wo_no$)=0 then sfex2a.new_wo_no$=sfex2a.wo_no$

            dim e0$(30),r0$(20)
            if rec_id$="O"

rem --- Get Employee/Op Code

                apm01a.vendor_name$="*** Missing Employee ***"
                r0$(1)="Missing Op Code"
                find record (empcode_dev,key=firm_id$+sftx1a.employee_no$,dom=*next) empcode$
                d9$=apm01a.vendor_name$(1,16)+", "+apm01a.vendor_name$(17,14); gosub compress_desc
                apm01a.vendor_name$=d9$
                find record (opcode_dev,key=firm_id$+sftx1a.op_code$,dom=label5) opcode$
label4:
                r0$=r0$(6,20)
label5:
                r0$=r0$(1,pos("   "=r0$+"   ")-1)
                apm01a.vendor_name$=apm01a.vendor_name$(1,pos("   "=apm01a.vendor_name$+"   ")-1)
                if len(apm01a.vendor_name$)+37>124-m1-m2-m3*3-6 then apm01a.vendor_name$=apm01a.vendor_name$(1,124-m1-m2-m3*3-6-37)
                if len(r0$)+37>124-m1-m2-m3*3-6 then r0$=r0$(1,124-m1-m2-m3*3-6-37)

            else 
               if rec_id$="S" then

rem --- Get Vendor Name

                apm01a.vendor_name$="*** Missing Vendor ***"
                find record (apm01a_dev,key=firm_id$+sftx1a.vendor_id$,dom=*next) aapm01a$
              endif

           endif

rem --- Print It Here

            OutVect!.addItem(sfex2.wo_no$)
            OutVect!.addItem(sfe01a.wo_type$)
            OutVect!.addItem(sfe01a.wo_category$)
            OutVect!.addItem(str(fndate$(sfex2.trans_date$)))
            OutVect!.addItem(rec_id_x$)
            OutVect!.addItem(sfex2.trans_seq$)
     
        if rec_id$="O" then 
            OutVect!.addItem(str(sftx1a.complete_qty))
            OutVect!.addItem(str(sftx1a.direct_rate))
            OutVect!.addItem(str(sftx1a.unit_cost-sftx1a.direct_rate))
            OutVect!.addItem(str(sftx1a.setup_time))
        endif
        if rec_id$="S" then 
            OutVect!.addItem(sftx1a.unit_cost)
        endif
        OutVect!.addItem(sftx1a.units)
        OutVect!.addItem(sftx1a.ext_cost)
        if sfex2a.new_wo_no$<>sfex2.wo_no$ then 
            OutVect!.addItem(sfex2a.new_wo_no$)
        endif

rem --- Adj Here

        if rec_id$="O" then 
            OutVect!.addItem(str(sfex2a.new_qty_comp))
            OutVect!.addItem(str(sfex2a.new_dir_rate))
            OutVect!.addItem(str(sfex2a.new_ovr_rate))
            OutVect!.addItem(str(sfex2a.new_set_hrs))
        endif
        if rec_id$="S" then 
            OutVect!.addItem(str(sfex2a.new_dir_rate))
        endif
        OutVect!.addItem("Adj:"+str(sfex2a.new_units))
        OutVect!.addItem(str((sfex2a.new_units+sfex2a.new_set_hrs)*(sfex2a.new_dir_rate+sfex2a.new_ovr_rate)))
        if sfex2a.new_trn_date$<>sfex2.trans_date$ then 
            OutVect!.addItem(str(fndate$(sfex2a.new_trn_date$)))
        endif

rem --- Net

        if rec_id$="O" then
            OutVect!.addItem(str(fnmask$(sftx1a.employee_no$,c5$)))
            OutVect!.addItem(sftx1a.op_code$+"  "+r0$)
            OutVect!.addItem(str(sfex2a.new_qty_comp-sftx1a.complete_qty))
            OutVect!.addItem(str(sfex2a.new_dir_rate-sftx1a.direct_rate))
            OutVect!.addItem(str(sfex2a.new_ovr_rate-(sftx1a.unit_cost-sftx1a.direct_rate)))
            OutVect!.addItem(str(sfex2a.new_set_hrs-sftx1a.setup_time))
        endif
        if rec_id$="S" then 
            OutVect!.addItem(str(fnmask$(sftx1a.vendor_id$,c3$)))
            OutVect!.addItem(sftx1a.po_no$+sftx1a.po_line_no$)
            OutVect!.addItem(str(sfex2a.new_dir_rate-sftx1a.unit_cost))
        endif
        OutVect!.addItem("Net:"+str(sfex2a.new_units-sftx1a.units))
        OutVect!.addItem(str((sfex2a.new_units+sfex2a.new_set_hrs)*(sfex2a.new_dir_rate+sfex2a.new_ovr_rate)-sftx1a.ext_cost))

        if sftx1a.ext_cost<>(sfex2a.new_units+sfex2a.new_set_hrs)*(sfex2a.new_dir_rate+sfex2a.new_ovr_rate) then 
            OutVect!.addItem("***")
        endif
        OutVect!.addItem(s0$)
        l=l+5
        t0=t0+(sfex2a.new_units+sfex2a.new_set_hrs)*(sfex2a.new_dir_rate+sfex2a.new_ovr_rate)-sftx1a.ext_cost

rem --- Check G/L Posting Dates

        if gl$=""
            glstatus=0
            call pgmdir$+"glc_datecheck.aon",sfex2.trans_date$,"N",period$,year$,glstatus
            if cvs(sfex2a.new_trn_date$,2)<>""
                call pgmdir$+"glc_datecheck.aon",sfex2a.new_trn_date$,"N",period$,year$,glstatus
            endif
        endif

rem --- Post Original Dates

        w0$=firm_id$+sfex2.trans_date$+sfe01a.wo_type$

        find record (sfw06a_dev,key=w0$,dom=*next) sfw06a$
        if rec_id$="O" then 
            sfw06a.act_dir_amt=sfw06a.act_dir_amt-sftx1a.direct_rate*(sftx1a.units+sftx1a.setup_time)
            sfw06a.act_ovhd_amt=sfw06a.act_ovhd_amt-(sftx1a.ext_cost-sftx1a.direct_rate*(sftx1a.units+sftx1a.setup_time))
        endif
        if rec_id$ ="S" then sfw06a.unit_cost=sfw06a.unit_cost-sftx1a.ext_cost
        sfw06a.net_adjust=sfw06a.net_adjust-sftx1a.ext_cost
        if !(sfe01a.wo_type$=sfe01b.wo_type$ and sfex2.trans_date$=sfex2a.new_trn_date$)
            write record (sfw06a_dev,key=w0$) sfw06a$

        rem --- Adjusted Dates

            w0$=firm_id$+sfex2a.new_trn_date$+sfe01b.wo_type$
            find record (sfw06a_dev,key=w0$,dom=*next) sfw06a$
        endif

        if rec_id$="O" then 
                sfw06a.act_dir_amt=sfw06a.act_dir_amt+sfex2a.new_dir_rate*(sfex2a.new_units+sfex2a.new_set_hrs)
                sfw06a.act_ovhd_amt=sfw06a.act_ovhd_amt+sfex2a.new_ovr_rate*(sfex2a.new_units+sfex2a.new_set_hrs)
        if rec_id$="S" then sfw06a.unit_cost=sfw06a.unit_cost+sfex2a.new_dir_rate*sfex2a.new_units
        sfw06a.net_adjust=sfw06a.net_adjust+(sfex2a.new_dir_rate+sfex2a.new_ovr_rate)*(sfex2a.new_units+sfex2a.new_set_hrs)
        write record (sfw06a_dev,key=w0$) sfw06a$

rem --- Generate G/L Summary

        if gl$<>"Y" then continue
        find record (sfm10a_dev,key=firm_id$+"A"+sfe01a.wo_type$) sfm10a$
        if sfe01b.wo_type$<>sfe01a.wo_type$ then
            find record (sfm10a_dev,key=firm_id$+"A"+sfe01b.wo_type$,dom=label4) wom10a2$
        endif

rem --- Back Out The Distribution

        account$=sfm10a.gl_wip_acct$
        gldate$=sfex2.trans_date$,amount=-sftx1a.ext_cost,units=0
        ref1$="WO "+sfex2.wo_no$
        ref2$="Seq "+sfex2.trans_seq$,ref3$=fndate$(sfex2a.new_trn_date$)
        memo$=cm$
        gosub glrecap

        if rec_id$="S"

rem --- Subcontracts
            account$=sfm10a.gl_pur_acct$
            amount=sftx1a.ext_cost,memo$=sm$
            gosub glrecap

        else
            if rec_id$="O"
rem --- Labor
                account$=sfm10a.gl_dir_lab$
                amount=(sftx1a.units+sftx1a.setup_time)*sftx1a.direct_rate,memo$=lm$
                gosub glrecap
                account$=sfm10a.gl_ovh_lab$
                amount=(sftx1a.units+sftx1a.setup_time)*sftx1a.ovhd_rate
                gosub glrecap
            endif

        endif

rem --- Add It Back In With New Information

        account$=sfm10a.gl_wip_acct$
        gldate$=sfex2a.new_trn_date$
        amount=round((sfex2a.new_units+sfex2a.new_set_hrs)*sfex2a.new_dir_rate,2)+round((sfex2a.new_units+sfex2a.new_set_hrs)*sfex2a.new_ovr_rate,2)
        ref1$="WO "+sfe01a.wo_no$
        ref2$="Seq "+sfex2.trans_seq$,ref3$=fndate$(sfex2.trans_date$)
        memo$=cm$
        gosub glrecap

        if rec_id$="S"
rem --- Subcontracts
            account$=sfm10a.gl_pur_acct$
            amount=((-sfex2a.new_units)-sfex2a.new_set_hrs)*(sfex2a.new_dir_rate+sfex2a.new_ovr_rate),memo$=sm$
            gosub glrecap

        else
            if rec_id$="O"
rem --- Labor
                account$=sfm10a.gl_dir_lab$
                amount=((-sfex2a.new_units)-sfex2a.new_set_hrs)*sfex2a.new_dir_rate,memo$=lm$
                gosub glrecap
                account$=sfm10a.gl_ovh_lab$
                amount=((-sfex2a.new_units)-sfex2a.new_set_hrs)*sfex2a.new_ovr_rate
                gosub glrecap
            endif

        endif

rem --- Loop back for next record

    wend

done: rem --- End

        blank=fnblank(13)
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        blank=fnblank(9)
        OutVect!.addItem("Report Total: ")
        OutVect!.addItem(str(t0:m1$))
        blank=fnblank(2)
    
rem --- Totals By Type

        l=l9+5
        dim t[3],u[3]
        read (sfw06a_dev,key=firm_id$,dom=*next)

        while more
            read record (sfw06a_dev,end=*break) sfw06a$
            if pos(firm_id$=sfw06a.firm_id$)<>1 then break
            if sfw06a.trans_date$<>t0$ then gosub first_sub_tot
            find record (sfm10a_dev,key=firm_id$+"A"+sfw06a.wo_type$,dom=*next) wom10a3$
            OutVect!.addItem(sfw06a.wo_type$)
            OutVect!.addItem(sfm10a.code_desc$)
            OutVect!.addItem(str(sfw06a.act_dir_amt))
            OutVect!.addItem(str(sfw06a.act_ovhd_amt))
            OutVect!.addItem(str(sfw06a.unit_cost))
            OutVect!.addItem(str(sfw06a.net_adjust))
            t[0]=t[0]+sfw06a.act_dir_amt
            u[0]=u[0]+sfw06a.act_dir_amt

            t[1]=t[1]+sfw06a.act_ovhd_amt
            u[1]=u[1]+sfw06a.act_ovhd_amt

            t[2]=t[2]+sfw06a.unit_cost
            u[2]=u[2]+sfw06a.unit_cost

            t[3]=t[3]+sfw06a.net_adjust
            u[3]=u[3]+sfw06a.net_adjust

            l0=l0+1
        wend

        t9$="E"
        gosub first_sub_tot
        BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
        blank=fnblank(13)
        TotVect!.addItem(str(OutVect!.size()/(columns+1)))
        blank=fnblank(2)
        OutVect!.addItem("Report Totals: ")
        OutVect!.addItem(str(u[0]:m1$)+"       "+str(u[1]:m1$))
        OutVect!.addItem(str(u[2]:m1$))
        OutVect!.addItem(str(u[3]:m1$))
        blank=fnblank(7)

        update$="sfu_woadjustment.aon" 
        page=h,width=h0,f0$=termf0$
        overlay$=update$
        if gl$="Y" then overlay$=pgmdir$+"glr_recap.aon"
        out_action$="PRT-PDF"
        next_overlay$=overlay$
        goto std_exit


date_subhead: rem --- Date Subheading
        blank=fnblank(2)
        OutVect!.addItem("Transaction Date: ",fndate$(t0$))
        blank=fnblank(10)
        l=l+2
        return

compress_desc: rem --- Compress Desc

         z=pos(" "<>d9$); if z>1 then d9$=d9$(z)

        while more
            x8=pos("  "=d9$)
            if x8<>0 then y8=pos(" "<>d9$(x8+2))
            d9$=d9$(1,x8)+d9$(x8+y8+1)
            if y8=0 then break
        wend

        return

first_sub_tot: rem --- First Sub Total

        if t0$<>""
            if l0<>0
                blank=fnblank(13)
                TotVect!.addItem(str(OutVect!.size()/(columns+1)))
                blank=fnblank(2)
                OutVect!.addItem("Totals: ")
                OutVect!.addItem(str(t[0])+"       "+str(t[1]))
                OutVect!.addItem(str(t[2]:m1$))
                OutVect!.addItem(str(t[3]:m1$))
                blank=fnblank(7)        
                l=l+3
            endif
        endif

        if t9$<>"" then return
        dim t[3]
        t0$=sfw06a.trans_date$
        l0=0
        gosub date_subhead
        return

glrecap: rem --- Special G/L Recap Routine

        if gl$="Y"
            precision 2
            amount=amount*1
            call pgmdir$+"glc_glpost.aon",glm01a_dev,glw11_dev,glt14a_dev,account$,gldate$,ref1$,ref2$,ref3$,memo$,amount,units,status
            precision 4
        endif
        return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend
    
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
