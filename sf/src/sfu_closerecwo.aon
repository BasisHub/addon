rem --- Close Recurring Work Orders - Parameters
rem --- Program sfu_closerecwo v8.0.0 15Jan2008 (sfu_da)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (01/15/2008 10:35:31)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    setesc std_error
    seterr std_error

rem --- Use statements

    use ::ado_func.src::func

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
	
rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

	num_files=9
	dim open_tables$[1:num_files], open_opts$[1:num_files], open_chans$[1:num_files], open_tpls$[1:num_files]
	
	open_tables$[2]	="IVS_PARAMS",   open_opts$[2] = "OTA"; rem ivs-01
	open_tables$[3]	="SFS_PARAMS",   open_opts$[3] = "OTA"; rem sfs-01
	open_tables$[4]	="SFE_WOMASTR",  open_opts$[4] = "OTA"; rem sfe-01
	open_tables$[5]	="SFC_WOTYPECD", open_opts$[5] = "OTA"; rem sfm-10
	open_tables$[6]	="SFT_OPNOPRTR", open_opts$[6] = "OTA"; rem sft-01
	open_tables$[7]	="SFT_OPNMATTR", open_opts$[7] = "OTA"; rem sft-21
	open_tables$[8] ="SFT_OPNSUBTR", open_opts$[8] = "OTA"; rem sft-31
	open_tables$[9] ="SFE_CLOSEDWO",open_opts$[9] = "OTA"; rem sfe-04b
	
	gosub open_tables
	
    ivs01_dev = num(open_chans$[2])
    sfs01_dev = num(open_chans$[3])
    sfe01_dev = num(open_chans$[4])
	sfm10_dev = num(open_chans$[5])
	sft01_dev = num(open_chans$[6])
	sft21_dev = num(open_chans$[7])
	sft31_dev = num(open_chans$[8])
	sfe04b_dev = num(open_chans$[9])

rem --- Dimension string templates

    dim ivs01a$:open_tpls$[2]
    dim sfs01a$:open_tpls$[3]
    dim sfe01a$:open_tpls$[4]
    dim sfm10a$:open_tpls$[5]
    sft01_tpls$=open_tpls$[6]; dim sft01a$:sft01_tpls$; rem Save template for next o'lay
    sft21_tpls$=open_tpls$[7]; dim sft21a$:sft21_tpls$; rem Save template for next o'lay
    sft31_tpls$=open_tpls$[8]; dim sft31a$:sft31_tpls$; rem Save template for next o'lay
    dim sfe04b$:open_tpls$[9]
	
rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","PRIMARY",sfe01_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFE_WOMASTR","AO_TYP_LOC_WO",sfe03_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNOPRTR","PRIMARY",sft01_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNMATTR","PRIMARY",sft21_key_tpl$,rd_table_chans$[all],status$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","SFT_OPNSUBTR","PRIMARY",sft31_key_tpl$,rd_table_chans$[all],status$
 
rem --- Retrieve parameter records

    n1$=sysinfo.firm_name$,n2$="SF",n3$=sysinfo.task_desc$
	sfs01_key$=firm_id$+"SF00"
    find record (sfs01_dev,key=sfs01_key$,err=std_missing_params) sfs01a$
    
	current_period=num(sfs01a.current_per$)
    current_year=num(sfs01a.current_year$)
    call stbl("+DIR_PGM")+"adc_perioddates.aon",current_period,current_year,begdate$,enddate$,table_chans$[all],status
    if status then goto std_exit_no_update
    sf_per_begdate$=begdate$
    sf_per_enddate$=enddate$

initializations: rem --- Initializations

rem --- Get user approval to proceed

    msg_id$="CLOSE_RECURR_WO"
    dim msg_tokens$[2]
	msg_tokens$[0]=str(current_period)
    msg_tokens$[1]=func.formatDate(sf_per_begdate$)
    msg_tokens$[2]=func.formatDate(sf_per_enddate$)
    gosub disp_message
    if msg_opt$="N" goto std_exit_no_update

rem --- Options

rem --- Assemble list of recurring wo types

    recurtype_list$=""
	sfm10_startkey$=firm_id$+"A"
    read (sfm10_dev,key=sfm10_startkey$,dom=*next)
    
	more=1
	while more
        read record (sfm10_dev,end=*break) sfm10a$
        if sfm10_startkey$<>sfm10a.firm_id$+sfm10a.record_id_a$ then break
        if sfm10a.wo_category$="R" then let recurtype_list$=recurtype_list$+sfm10a.wo_type$
    wend

rem --- Overlay    
run pgmdir$+"sfu_closerecwo_o1.aon"

rem --- Subroutines
open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

	return

rem #include std_functions.src

rem --- Standard AddonSoftware functions (01Mar2006)

rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

	def fnitem$(q$,q1,q2,q3)
		q$=pad(q$,q1+q2+q3)
		return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
	fnend

rem --- Format zip/postal code

    def fnzipcode$(q$)
        q$=cvs(q$,4)
        if len(cvs(q$,2))<>9 and len(cvs(q$,2))<>6 return q$
        if len(cvs(q$,2))=9
            q1$="[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$
            if q1<>0
                if q$(6,4)="0000" return q$(1,5)
            return q$(1,5)+"-"+q$(6,4)
            endif
        endif
        if len(cvs(q$,2))=6
            q1$="[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]"
            q1=mask(cvs(q$,2),q1$)
            if q1=0 return q$ else return q$(1,3)+" "+q$(4,3)
        endif
    fnend

rem --- Date/time handling functions

    def fndate$(q$)=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2))))
    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src


rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

std_exit_no_update: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end