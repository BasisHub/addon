rem ==========================================================================
rem --- A set of utility methods to replace some Addon functions
rem --- Program ado_func.src v8.0.0 02Feb2009
rem --- Copyright 2008-2009, BASIS International, Ltd.
rem ==========================================================================

    class public func

    rem ==========================================================================
    rem --- Display segmented description (fnitem$)
    rem ==========================================================================

        field public static BBjInt Len1% = 0
        field public static BBjInt Len2% = 0
        field public static BBjInt Len3% = 0

        method public static BBjString displayDesc(BBjString p_desc$, BBjInt p_len_1%, BBjInt p_len_2%, BBjInt p_len_3%)

        rem --- Sanity checks
            if p_desc$ = "" then methodret ""
            if p_len_1% = 0 then methodret p_desc$

            #Len1% = p_len_1%
            #Len2% = p_len_2%
            #Len3% = p_len_3%
            methodret #dispDesc(p_desc$)

        methodend

    rem --- Allow number (not just ints) to pass
        method public static BBjString displayDesc(BBjString p_desc$, BBjNumber p_len_1, BBjNumber p_len_2, BBjNumber p_len_3)
            methodret #displayDesc(p_desc$, int(p_len_1), int(p_len_2), int(p_len_3))
        methodend

    rem --- Internal only, the heart of the function
        method protected static BBjString dispDesc(BBjString p_desc$)
            desc$ = pad(p_desc$, #Len1% +  #Len2% + #Len3%)
            methodret cvs( desc$(1, #Len1%) + " " + desc$(#Len1% + 1, #Len2%) + " " + desc$(#Len1% + #Len2% + 1, #Len3%), 32)
        methodend

    rem --- Method passed without lengths may need to lookup parameters
        method public static BBjString displayDesc(BBjString p_desc$)
            if #Len1% = 0 then #getDescLens()

            if #Len1% then
                methodret #dispDesc(p_desc$) 
            else
                methodret p_desc$
            endif
        methodend

    rem --- Get description lengths
        method protected static void getDescLens()

        rem --- Open IV param file
            call stbl("+DIRSYP",err=getDescLensDone) + "bac_open_table.bbj", 
:               err=getDescLensDone, 
:               "IVS_PARAMS", 
:               "OTA", 
:               table_chans$[all], 
:               open_chan, 
:               table_tpl$, 
:               proc_mssg$ 

            if proc_mssg$ <> "" then goto getDescLensDone

        rem --- Get firm
            dim sysinfo$:stbl("+SYSINFO_TPL", err=getDescLensDone)
            sysinfo$ = stbl("+SYSINFO", err=getDescLensDone)

        rem --- Get IV parameter record
            dim param_rec$:table_tpl$
            find record (open_chan, key=sysinfo.firm_id$+"IV00", dom=getDescLensDone) param_rec$

        rem --- Set lengths
            #Len1% = param_rec.desc_len_01%
            #Len2% = param_rec.desc_len_02%
            #Len3% = param_rec.desc_len_03%

        getDescLensDone: 
        methodend

    rem ==========================================================================
    rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)
    rem ==========================================================================

        method public static BBjString alphaMask(BBjString p_in$, BBjString p_msk$)

            if p_msk$="" then p_msk$ = fill( len(p_in$), "0" )
            methodret str( -num(p_in$, err=*next):p_msk$, err=*next )

            ptr = 1
            neg_char = 0

            while ptr <= len(p_msk$)

                if pos( p_msk$(ptr,1) = "-()" ) then 
                    neg_char = neg_char + 1 
                else 
                    p_msk$(ptr,1) = "X"
                endif

                ptr = ptr + 1
            wend

            if len(p_in$) > len(p_msk$) - neg_char then p_in$ = p_in$(1, len(p_msk$) - neg_char)
            methodret str(p_in$:p_msk$)

        methodend

    rem ==========================================================================
    rem --- fndate$: Convert YYYYMMDD to MM/DD/YY
    rem ==========================================================================

        method public static BBjString formatDate(BBjString p_date$)

            this_jul = jul(p_date$, "%Yl%Mz%Dz", err=format_date_err)
            methodret date(this_jul, err=format_date_err)

        format_date_err: 
            methodret p_date$

        methodend

    rem ==========================================================================
    rem --- fnlatest$: Return the latest date (YYYYMMDD)
    rem ==========================================================================

        method public static BBjString latestDate(BBjString p_date1$, BBjString p_date2$)

            jul1 = -1
            jul2 = -1
            jul1 = jul(p_date1$, "%Yl%Mz%Dz", err=*next)
            jul2 = jul(p_date2$, "%Yl%Mz%Dz", err=*next)

            if jul1 = -1 and jul2 = -1 then
                methodret ""
            endif

            if jul1 >= jul2 then
                methodret p_date1$
            else
                methodret p_date2$
            endif

        methodend


    rem ==========================================================================
    rem --- get number of GL periods from GL param file; nothing sent in, #periods out
    rem ==========================================================================

        method public static BBjString getNumPeriods()

        rem --- Open GL param file
            call stbl("+DIR_SYP",err=getNumPeriodsDone) + "bac_open_table.bbj", 
:               err=getNumPeriodsDone, 
:               "GLS_PARAMS", 
:               "OTA", 
:               table_chans$[all], 
:               open_chan, 
:               table_tpl$, 
:               proc_mssg$ 

            if proc_mssg$ <> "" then goto getNumPeriodsDone

        rem --- Get firm
            dim sysinfo$:stbl("+SYSINFO_TPL", err=getNumPeriodsDone)
            sysinfo$ = stbl("+SYSINFO", err=getNumPeriodsDone)

        rem --- Get GL parameter record
            dim param_rec$:table_tpl$
            find record (open_chan, key=sysinfo.firm_id$+"GL00", dom=getNumPeriodsDone) param_rec$

            methodret str(num(param_rec.total_pers$):"00")


        getNumPeriodsDone: 
            methodret "12"
        methodend

    rem ==========================================================================
    rem --- Return true if open file has records
    rem ==========================================================================

        method public static BBjNumber hasRecords(BBjNumber p_handle)
            has_records = 0
            if fpt(p_handle) or p_handle <= 0 then goto has_records_end
            xfid$ = xfid(p_handle, err=has_records_end)
            type = asc( and($0f$, xfid$(1,1)) )

            if type <> 0 and type <> 1 and type <> 3 and type <> 4 and type <> 5 then

                if dec($00$ + xfid$(6,4)) then
                    has_records = 1
                else
                    if type = 6 or type = 8 or type = 13 then
                        xfin$ = xfin(p_handle)
                        if dec($00$ + xfin$(77,4)) then has_records = 1
                    endif
                endif

            endif

        has_records_end: 
            methodret has_records
        methodend

    rem ==========================================================================
    rem --- Return true if the string is a number
    rem ==========================================================================

        method public static BBjInt isNumber(BBjString in$)
            ignore = num(in$,err=is_number_false)
            methodret 1

        is_number_false: 
            methodret 0
        methodend

    rem ==========================================================================
    rem --- Return true if string is hex
    rem ==========================================================================

        method public static BBjNumber isHex(BBjString in$)
            methodret mask(in$, "^([A-Fa-f0-9][A-Fa-f0-9])+$")
        methodend

    rem ==========================================================================
    rem --- Return the lowest non-zero value, unless both are zero
    rem ==========================================================================

        method public static BBjNumber minimumNotZero(BBjNumber p1, BBjNumber p2)

            if p1=0 and p2=0 then 
                methodret 0
            else
                if p1=0 then
                    methodret p2
                else 
                    if p2 = 0 then
                        methodret p1
                    else
                        if p1 < p2 then
                            methodret p1
                        else
                            methodret p2
                        endif
                    endif
                endif
            endif

        methodend


    classend

rem ==========================================================================
rem --- Testing
rem ==========================================================================

rem --- fnitem$()

    print fill(79, "="), 'lf', "fnitem$()..."
    print func.displayDesc("Getting Description Lengths")
    print func.displayDesc("Stored Description Lengths")

    dim p[5]
    p[3] = 30
    p[4] = 0
    p[5] = 0
    dim desc$(60)
    desc$(1) = "Passed Description Lengths"
    print func.displayDesc(desc$, p[3], p[4], p[5])
    desc$ = "Short Description"
    print func.displayDesc(desc$, p[3], p[4], p[5])

    p[3] = 20
    p[4] = 20
    p[5] = 20
    dim desc$(60)
    desc$(1) = "Foo: Segment 1"
    desc$(21) = "Segement 2"
    desc$(41) = "Segement 3"
    print func.displayDesc(desc$, p[3], p[4], p[5])

    print "Zero lengths passed..."
    print func.displayDesc(desc$, 0, 0, 0)

    print "Null description passed..."
    print func.displayDesc("", p[3], p[4], p[5])
    
    input "Press <enter> to continue: ", *

rem --- fnmask$()

    print fill(79, "="), 'lf', "fnmask$()..."
    print func.alphaMask("111223333", "###-##-####")
    print func.alphaMask("AABBBB", "##-####")
    print func.alphaMask("111223333", "(###) ##-####")
    print func.alphaMask("1234.56", "-###,###,###.00")
    
    input "Press <enter> to continue: ", *

rem  -- fndate$()

    print fill(79, "="), 'lf', "fndate$()..."
    print func.formatDate("20080230")
    print func.formatDate("20080229")
    print func.formatDate("20081232")
    print func.formatDate("20081224")
    print func.formatDate("nonsense")
    print func.formatDate("short")
    print func.formatDate("")
    
    input "Press <enter> to continue: ", *

rem --- fnlatest$()

    print fill(79, "="), 'lf', "fnlatest$()..."
    print func.latestDate("20090101", "20090201")
    print func.latestDate("20090202", "20090201")
    print func.latestDate("", "20090201")
    print func.latestDate("20090202", "")
    print func.latestDate("", "")
    print func.latestDate("20090230", "20090201")
    print func.latestDate("20090202", "junk")
    
    input "Press <enter> to continue: ", *

rem --- hasRecords()

    print fill(79, "="), 'lf', "hasRecords()..."
    ape01_dev = unt
    open(ape01_dev)"../../data/ape-01"
    print "The file ape-01...",

    if func.hasRecords(ape01_dev) then
        print "has records"
    else
        print "does not have records"
    endif

    apm01_dev = unt
    open(apm01_dev)"../../data/apm-01"
    print "The file apm-01...",

    if func.hasRecords(apm01_dev) then
        print "has records"
    else
        print "does not have records"
    endif
    
    input "Press <enter> to continue: ", *

rem --- isNumber()

    print fill(79, "="), 'lf', "isNumber()..."
    x$ = "abc123"

    if func.isNumber(x$) then
        print x$, " is a number"
    else
        print x$," is not a number"
    endif

    x$ = "23.45"

    if func.isNumber(x$) then
        print x$, " is a number"
    else
        print x$," is not a number"
    endif
    
    input "Press <enter> to continue: ", *

rem --- isHex

    print fill(79, "="), 'lf', "isHex()..."

    x$="heehee"
    print x$, 
    if func.isHex(x$) then
        print " is hex"
    else
        print " is not hex"
    endif

    x$="1b0300ff"
    print x$, 
    if func.isHex(x$) then
        print " is hex"
    else
        print " is not hex"
    endif

    x$="7f0"
    print x$, 
    if func.isHex(x$) then
        print " is hex"
    else
        print " is not hex"
    endif
    
    input "Press <enter> to continue: ", *

rem --- minimumNotZero

    print fill(79, "="), 'lf', "minimumNotZero()..."
    print "Expect 0: ", func.minimumNotZero(0, 0)
    print "Expect 1: ", func.minimumNotZero(0, 1)
    print "Expect 2: ", func.minimumNotZero(2, 0)
    print "Expect 1: ", func.minimumNotZero(1, 2)
    print "Expect 1: ", func.minimumNotZero(2, 1)

    input "Press <enter> to continue: ", *

    end

