rem ==========================================================================
rem --- A set of utility methods to replace some Addon functions
rem --- Program ado_func.src v8.0.0 02Feb2009
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    class public func

    rem ==========================================================================
    rem --- Display segmented description (fnitem$)
    rem ==========================================================================

        field public static BBjInt Len1% = 0
        field public static BBjInt Len2% = 0
        field public static BBjInt Len3% = 0

        method public static BBjString displayDesc(BBjString p_desc$, BBjInt p_len_1%, BBjInt p_len_2%, BBjInt p_len_3%)
            seterr method_error

        rem --- Sanity checks
            if p_desc$ = "" then methodret ""
            if p_len_1% = 0 then methodret p_desc$

            #Len1% = p_len_1%
            #Len2% = p_len_2%
            #Len3% = p_len_3%
            methodret #dispDesc(p_desc$)
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem --- Allow number (not just ints) to pass
        method public static BBjString displayDesc(BBjString p_desc$, BBjNumber p_len_1, BBjNumber p_len_2, BBjNumber p_len_3)
            seterr method_error
            methodret #displayDesc(p_desc$, int(p_len_1), int(p_len_2), int(p_len_3))
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem --- Internal only, the heart of the function
        method protected static BBjString dispDesc(BBjString p_desc$)
            seterr method_error
            desc$ = pad(p_desc$, #Len1% +  #Len2% + #Len3%)
            methodret cvs( desc$(1, #Len1%) + " " + desc$(#Len1% + 1, #Len2%) + " " + desc$(#Len1% + #Len2% + 1, #Len3%), 32)
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem --- Method passed without lengths may need to lookup parameters
        method public static BBjString displayDesc(BBjString p_desc$)
            seterr method_error
            if #Len1% = 0 then #getDescLens()

            if #Len1% then
                methodret #dispDesc(p_desc$) 
            else
                methodret p_desc$
            endif
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem --- Get description lengths
        method protected static void getDescLens()
            def fnget_dev1(tmp0$)=num(rd_table_chans$[0,0](pos(pad(tmp0$,17)=rd_table_chans$[0,0],20)+17,3))
            seterr method_error

        rem --- Open IV param file
        rem --- Note that rd_table_chans$[all] is NOT being shared/passed.
            call stbl("+DIRSYP",err=getDescLensDone) + "bac_open_table.bbj", 
:               err=getDescLensDone, 
:               "IVS_PARAMS", 
:               "OTA", 
:               rd_table_chans$[all], 
:               open_chan, 
:               table_tpl$, 
:               proc_mssg$ 

            if proc_mssg$ <> "" then goto getDescLensDone

        rem --- Get firm
            dim sysinfo$:stbl("+SYSINFO_TPL", err=getDescLensDone)
            sysinfo$ = stbl("+SYSINFO", err=getDescLensDone)

        rem --- Get IV parameter record
            dim param_rec$:table_tpl$
            find record (open_chan, key=sysinfo.firm_id$+"IV00", dom=getDescLensDone) param_rec$

        rem --- Set lengths
            #Len1% = param_rec.desc_len_01%
            #Len2% = param_rec.desc_len_02%
            #Len3% = param_rec.desc_len_03%

            rem --- Make sure ddm_tables and ddm_table_tpls get closed
            devDdmTables=fnget_dev1("DDM_TABLES")
            devDdmTableTpls=fnget_dev1("DDM_TABLE_TPLS")
            if devDdmTables >= 0 then close(devDdmTables,err=*next)
            if devDdmTableTpls >= 0 then close(devDdmTableTpls,err=*next)
            close(open_chan,err=*next)

        getDescLensDone: 
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem ==========================================================================
    rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)
    rem ==========================================================================

        method public static BBjString alphaMask(BBjString p_in$, BBjString p_msk$)
            seterr method_error

            if p_msk$="" then p_msk$ = fill( len(p_in$), "0" )
            methodret str( -num(p_in$, err=*next):p_msk$, err=*next )

            ptr = 1
            neg_char = 0

            while ptr <= len(p_msk$)

                if pos( p_msk$(ptr,1) = "-()" ) then 
                    neg_char = neg_char + 1 
                else 
                    p_msk$(ptr,1) = "X"
                endif

                ptr = ptr + 1
            wend

            if len(p_in$) > len(p_msk$) - neg_char then p_in$ = p_in$(1, len(p_msk$) - neg_char)
            methodret str(p_in$:p_msk$)
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem ==========================================================================
    rem --- fndate$: Convert YYYYMMDD to MM/DD/YY
    rem ==========================================================================

        method public static BBjString formatDate(BBjString p_date$)
            seterr method_error

            this_jul = jul(p_date$, "%Yl%Mz%Dz", err=format_date_err)
            methodret date(this_jul, err=format_date_err)

        format_date_err: 
            methodret p_date$
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem ==========================================================================
    rem --- fnlatest$: Return the latest date (YYYYMMDD)
    rem ==========================================================================

        method public static BBjString latestDate(BBjString p_date1$, BBjString p_date2$)
            seterr method_error

            jul1 = -1
            jul2 = -1
            jul1 = jul(p_date1$, "%Yl%Mz%Dz", err=*next)
            jul2 = jul(p_date2$, "%Yl%Mz%Dz", err=*next)

            if jul1 = -1 and jul2 = -1 then
                methodret ""
            endif

            if jul1 >= jul2 then
                methodret p_date1$
            else
                methodret p_date2$
            endif
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem ==========================================================================
    rem --- get number of GL periods for the given fiscal year
    rem ==========================================================================

        method public static BBjString getNumPeriods(BBjString year$)
            def fnget_dev2(tmp0$)=num(rd_table_chans$[0,0](pos(pad(tmp0$,17)=rd_table_chans$[0,0],20)+17,3))
            seterr method_error

        rem --- Open GL param file
        rem --- Note that rd_table_chans$[all] is NOT being shared/passed.
            call stbl("+DIR_SYP",err=getNumPeriodsDone) + "bac_open_table.bbj", 
:               err=getNumPeriodsDone, 
:               "GLS_CALENDAR", 
:               "OTA", 
:               rd_table_chans$[all], 
:               open_chan, 
:               table_tpl$, 
:               proc_mssg$ 

            if proc_mssg$ <> "" then goto getNumPeriodsDone

        rem --- Get firm
            dim sysinfo$:stbl("+SYSINFO_TPL", err=getNumPeriodsDone)
            sysinfo$ = stbl("+SYSINFO", err=getNumPeriodsDone)

        rem --- Get GL parameter record
            dim gls_calendar$:table_tpl$
            find record (open_chan, key=sysinfo.firm_id$+year$, dom=getNumPeriodsDone)gls_calendar$

            rem --- Make sure ddm_tables and ddm_table_tpls get closed
            devDdmTables=fnget_dev2("DDM_TABLES")
            devDdmTableTpls=fnget_dev2("DDM_TABLE_TPLS")
           if devDdmTables >= 0 then close(devDdmTables,err=*next)
            if devDdmTableTpls >= 0 then close(devDdmTableTpls,err=*next)
            close(open_chan,err=*next)
            methodret str(num(gls_calendar.total_pers$):"00")

getNumPeriodsDone: 
            close(open_chan,err=*next)
            methodret "12"
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem ==========================================================================
    rem --- get number of GL periods from GL param file; nothing sent in, #periods out
    rem ==========================================================================

        method public static BBjString getNumPeriods()
            def fnget_dev3(tmp0$)=num(rd_table_chans$[0,0](pos(pad(tmp0$,17)=rd_table_chans$[0,0],20)+17,3))
            seterr method_error

        rem --- Open GL param file
        rem --- Note that rd_table_chans$[all] is NOT being shared/passed.
            call stbl("+DIR_SYP",err=getNumPeriodsDone) + "bac_open_table.bbj", 
:               err=getNumPeriodsDone, 
:               "GLS_PARAMS", 
:               "OTA", 
:               rd_table_chans$[all], 
:               open_chan, 
:               table_tpl$, 
:               proc_mssg$ 

            if proc_mssg$ <> "" then goto getNumPeriodsDone

        rem --- Get firm
            dim sysinfo$:stbl("+SYSINFO_TPL", err=getNumPeriodsDone)
            sysinfo$ = stbl("+SYSINFO", err=getNumPeriodsDone)

        rem --- Get GL parameter record
            dim param_rec$:table_tpl$
            find record (open_chan, key=sysinfo.firm_id$+"GL00", dom=getNumPeriodsDone) param_rec$

            rem --- Make sure ddm_tables and ddm_table_tpls get closed
            devDdmTables=fnget_dev3("DDM_TABLES")
            devDdmTableTpls=fnget_dev3("DDM_TABLE_TPLS")
            if devDdmTables >= 0 then close(devDdmTables,err=*next)
            if devDdmTableTpls >= 0 then close(devDdmTableTpls,err=*next)
            close(open_chan,err=*next)
            methodret #getNumPeriods(param_rec.current_year$)

getNumPeriodsDone: 
            close(open_chan,err=*next)
            methodret "12"
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem ==========================================================================
    rem --- get default logo for given firm; nothing in, logo path/file out
    rem ==========================================================================

        method public static BBjString getCompanyLogo()
            def fnget_dev4(tmp0$)=num(rd_table_chans$[0,0](pos(pad(tmp0$,17)=rd_table_chans$[0,0],20)+17,3))
            seterr method_error

        rem --- Open Addon Company file
        rem --- Note that rd_table_chans$[all] is NOT being shared/passed.
            call stbl("+DIR_SYP",err=getCompanyLogoDone) + "bac_open_table.bbj", 
:               err=getCompanyLogoDone, 
:               "ADS_COMPINFO", 
:               "OTA", 
:               rd_table_chans$[all], 
:               open_chan, 
:               table_tpl$, 
:               proc_mssg$ 

            if proc_mssg$ <> "" then goto getCompanyLogoDone

        rem --- Get firm
            dim sysinfo$:stbl("+SYSINFO_TPL", err=getCompanyLogoDone)
            sysinfo$ = stbl("+SYSINFO", err=getCompanyLogoDone)

        rem --- Get Company record
            dim company_rec$:table_tpl$
            find record (open_chan, key=sysinfo.firm_id$, dom=getCompanyLogoDone) company_rec$

            rem --- Make sure ddm_tables and ddm_table_tpls get closed
            devDdmTables=fnget_dev4("DDM_TABLES")
            devDdmTableTpls=fnget_dev4("DDM_TABLE_TPLS")
            if devDdmTables >= 0 then close(devDdmTables,err=*next)
            if devDdmTableTpls >= 0 then close(devDdmTableTpls,err=*next)
            close(open_chan,err=*next)
            methodret #resolvePath(company_rec.logo_file$)

getCompanyLogoDone: 
            close(open_chan,err=*next)
            methodret ""
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem ==========================================================================
    rem --- internal method to resolve pathname for logo file
    rem ==========================================================================
    method private static BBjString resolvePath(BBjString file_path$)
    
        file_path$=cvs(file_path$,3)
        file_path_out$=""

        while pos("["=file_path$)<>0
            stbl_from=pos("["=file_path$)+1
            stbl_thru=pos("]"=file_path$)
            temp_stbl$=stbl(file_path$(stbl_from,stbl_thru-stbl_from))
            if stbl_thru=len(file_path$)
                file_path$=file_path$(1,stbl_from-2)+temp_stbl$
            else
                file_path$=file_path$(1,stbl_from-2)+temp_stbl$+file_path$(stbl_thru+1)
            endif
        wend
        
        if file_path$<>"" then file_path_out$=BBjAPI().getFileSystem().resolvePath(file_path$,err=*next)
        
        methodret file_path_out$

    methodend

    rem ==========================================================================
    rem --- Return true if open file has records
    rem ==========================================================================

        method public static BBjNumber hasRecords(BBjNumber p_handle)
            seterr method_error
            has_records = 0
            if fpt(p_handle) or p_handle <= 0 then goto has_records_end
            xfid$ = xfid(p_handle, err=has_records_end)
            type = asc( and($0f$, xfid$(1,1)) )

            if type <> 0 and type <> 1 and type <> 3 and type <> 4 and type <> 5 then

                if dec($00$ + xfid$(6,4)) then
                    has_records = 1
                else
                    if type = 6 or type = 8 or type = 13 then
                        xfin$ = xfin(p_handle)
                        if dec($00$ + xfin$(77,4)) then has_records = 1
                    endif
                endif

            endif

        has_records_end: 
            methodret has_records
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem ==========================================================================
    rem --- Return true if the string is a number
    rem ==========================================================================

        method public static BBjInt isNumber(BBjString in$)
            seterr method_error
            ignore = num(in$,err=is_number_false)
            methodret 1

        is_number_false: 
            methodret 0
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem ==========================================================================
    rem --- Return true if string is hex
    rem ==========================================================================

        method public static BBjNumber isHex(BBjString in$)
            methodret mask(in$, "^([A-Fa-f0-9][A-Fa-f0-9])+$")
        methodend

    rem ==========================================================================
    rem --- Return the lowest non-zero value, unless both are zero
    rem ==========================================================================

        method public static BBjNumber minimumNotZero(BBjNumber p1, BBjNumber p2)
            seterr method_error

            if p1=0 and p2=0 then 
                methodret 0
            else
                if p1=0 then
                    methodret p2
                else 
                    if p2 = 0 then
                        methodret p1
                    else
                        if p1 < p2 then
                            methodret p1
                        else
                            methodret p2
                        endif
                    endif
                endif
            endif
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
    rem ==========================================================================
    rem --- Return a percentage, checking for division by zero
    rem     def fnd(q1,q2)=sgn(q2)*q1*100/(q2+abs(sgn(q2))-1)
    rem ==========================================================================
    
        method public static BBjNumber percentage(BBjNumber p1, BBjNumber p2)
            seterr method_error
        
            if p1 = 0 or p2 = 0 then
                methodret 0
            else
                methodret p1*100/p2
            endif
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
    rem ==========================================================================
    rem --- Return Gross Profit Percentage
    rem     sgn( fnd(s[0]-s[1], s[0]) ) * min( 999.99, abs(fnd(s[0]-s[1], s[0])) )
    rem ==========================================================================
    
        method public static BBjString grossProfit(BBjNumber p_sales, BBjNumber p_cost)
            seterr method_error
            gp = round(#percentage(p_sales-p_cost, p_sales), 2)
            gp = sgn(gp) * min(999.99, abs(gp))
            methodret str(gp:"##0.00-") 
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
    rem ==========================================================================
    rem --- Format Address (emulates program adc_address.aon)
    rem     Send in a string tempate object of the record with the address, the
    rem     width of the address to be formatted and the number of lines.
    rem     The method returns the full block with the address formatted 
    rem     inside it.
    rem ==========================================================================

        method public static BBjString formatAddress(BBjArray table_chans$[all], BBjTemplatedString p_rec!, BBjNumber p_width, BBjNumber p_lines)
            seterr method_error

            size = p_width * p_lines
            dim address_block$(size)
            offset = 1
            fields$ = p_rec!.fattr()
            p = mask(fields$, ",[A-Z_]*NAME:")
            
            if p then
                field_name$ = fields$(p+1, tcb(16)-2)
                name$ = p_rec!.getFieldAsString(field_name$)
                
                if cvs(name$, 2) <> "" and offset+p_width-1 <= size then
                    address_block$(offset, p_width) = name$
                    offset = offset + p_width
                endif
            endif
            
            addr_line_1$ = p_rec!.getFieldAsString("ADDR_LINE_1")
            
            if cvs(addr_line_1$, 2) <> "" and offset+p_width-1 <= size then 
                address_block$(offset, p_width) = addr_line_1$
                offset = offset + p_width
            endif
            
            addr_line_2$ = p_rec!.getFieldAsString("ADDR_LINE_2")
            
            if cvs(addr_line_2$, 2) <> "" and offset+p_width-1 <= size then
                address_block$(offset, p_width) = addr_line_2$
                offset = offset + p_width
            endif
            
            if pos(",ADDR_LINE_3:" = fields$) then
                addr_line_3$ = p_rec!.getFieldAsString("ADDR_LINE_3")
                
                if cvs(addr_line_3$, 2) <> "" and offset+p_width-1 <= size then
                    address_block$(offset, p_width) = addr_line_3$
                    offset = offset + p_width
                endif
            endif
                
            if pos(",ADDR_LINE_4:" = fields$) then
                addr_line_4$ = p_rec!.getFieldAsString("ADDR_LINE_4")
                
                if cvs(addr_line_4$, 2) <> "" and offset+p_width-1 <= size then
                    address_block$(offset, p_width) = addr_line_4$
                    offset = offset + p_width
                endif
            endif
            
            city$       = cvs(p_rec!.getFieldAsString("CITY"), 2)
            state_code$ = cvs(p_rec!.getFieldAsString("STATE_CODE"), 2)
            zip_code$   = cvs(p_rec!.getFieldAsString("ZIP_CODE"), 2)
            all_zeros   = pos(zip_code$ <> "0" )
            
            if city$ <> "" or state_code$ <> "" or (zip_code$ <> "" and !all_zeros) then
                addr_line$ = city$ + ", " + state_code$
                
                if len(zip_code$) > 5 then zip_code$ = zip_code$(1,5) + "-" +zip_code$(6)
                
                if len(addr_line$) + len(zip_code$) + 2 > p_width then
                    if offset+p_width-1 <= size then
                        address_block$(offset, p_width) = addr_line$
                        offset = offset + p_width
                        
                        if offset+p_width-1 <= size then
                            address_block$(offset, p_width) = zip_code$
                        endif
                    endif
                else
                    if offset+p_width-1 <= size then
                        address_block$(offset, p_width) = addr_line$ + "  " + zip_code$
						offset = offset + p_width
                    endif
                endif
            endif
            
            country$=""
			if pos(",CNTRY_ID:" = fields$) then
                cntry_id$ = p_rec!.getFieldAsString("CNTRY_ID")
				if cvs(cntry_id$,2) <> "" then
					rem --- get country description from adc_country
					sypdir$=stbl("+DIR_SYP",err=*endif)
					num_files=1,open_beg=1,open_end=um_files
					dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
					open_tables$[1]="ADC_COUNTRY",open_opts$[1]="OTA"
					call sypdir$+"bac_open_tables.bbj",open_beg,open_end,open_tables$[all],open_opts$[all],open_chans$[all],open_tpls$[all],table_chans$[all],open_batch,open_status$
					if open_status$="" then
						country_dev = num(open_chans$[1])
						dim country_rec$:open_tpls$[1]
						find record(country_dev,key=cntry_id$,dom=*endif)country_rec$
						country$=country_rec.desc$
					endif
               
					if cvs(country$, 2) <> "" and offset+p_width-1 <= size then
						address_block$(offset, p_width) = country$
						offset = offset + p_width
					endif
				endif
            endif
            
            if country$="" and pos(",COUNTRY:" = fields$) then
                country$ = p_rec!.getFieldAsString("COUNTRY")
                
                if cvs(country$, 2) <> "" and offset+p_width-1 <= size then
                    address_block$(offset, p_width) = country$
                    offset = offset + p_width
                endif
            endif
            
            methodret address_block$
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            if err_num=252 then
                E!=BBjAPI().getLastBBjException()
                rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
                if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
            endif
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
    classend

rem ==========================================================================
rem --- Testing
rem ==========================================================================

rem --- fnitem$()

    print fill(79, "="), 'lf', "fnitem$()..."
    print func.displayDesc("Getting Description Lengths")
    print func.displayDesc("Stored Description Lengths")

    dim p[5]
    p[3] = 30
    p[4] = 0
    p[5] = 0
    dim desc$(60)
    desc$(1) = "Passed Description Lengths"
    print func.displayDesc(desc$, p[3], p[4], p[5])
    desc$ = "Short Description"
    print func.displayDesc(desc$, p[3], p[4], p[5])

    p[3] = 20
    p[4] = 20
    p[5] = 20
    dim desc$(60)
    desc$(1) = "Foo: Segment 1"
    desc$(21) = "Segment 2"
    desc$(41) = "Segment 3"
    print func.displayDesc(desc$, p[3], p[4], p[5])

    print "Zero lengths passed..."
    print func.displayDesc(desc$, 0, 0, 0)

    print "Null description passed..."
    print func.displayDesc("", p[3], p[4], p[5])
    
    print "Set description lengths..."
    func.setLen1(10)
    func.setLen2(15)
    func.setLen3(20)
    print "Expect 10:", func.getLen1()
    print "Expect 15:", func.getLen2()
    print "Expect 20:", func.getLen3()
    desc$(1, 10) = "Segment 1"
    desc$(11, 15) = "Segment 2"
    desc$(26, 20) = "Segment 3"
    print func.displayDesc(desc$)
    
    rem input "Press <enter> to continue: ", *

rem --- fnmask$()

    print fill(79, "="), 'lf', "fnmask$()..."
    print func.alphaMask("111223333", "###-##-####")
    print func.alphaMask("AABBBB", "##-####")
    print func.alphaMask("111223333", "(###) ##-####")
    print func.alphaMask("1234.56", "-###,###,###.00")
    
    rem input "Press <enter> to continue: ", *

rem  -- fndate$()

    print fill(79, "="), 'lf', "fndate$()..."
    print func.formatDate("20080230")
    print func.formatDate("20080229")
    print func.formatDate("20081232")
    print func.formatDate("20081224")
    print func.formatDate("nonsense")
    print func.formatDate("short")
    print func.formatDate("")
    
    rem input "Press <enter> to continue: ", *

rem --- fnlatest$()

    print fill(79, "="), 'lf', "fnlatest$()..."
    print func.latestDate("20090101", "20090201")
    print func.latestDate("20090202", "20090201")
    print func.latestDate("", "20090201")
    print func.latestDate("20090202", "")
    print func.latestDate("", "")
    print func.latestDate("20090230", "20090201")
    print func.latestDate("20090202", "junk")
    
    rem input "Press <enter> to continue: ", *

rem --- hasRecords()

    print fill(79, "="), 'lf', "hasRecords()..."
    arm01_dev = unt
    open(arm01_dev)"../aon/data/arm-01"
    print "The file arm-01...",

    if func.hasRecords(arm01_dev) then
        print "has records"
    else
        print "does not have records"
    endif

    apm01_dev = unt
    open(apm01_dev)"../aon/data/apm-01"
    print "The file apm-01...",

    if func.hasRecords(apm01_dev) then
        print "has records"
    else
        print "does not have records"
    endif
    
    rem input "Press <enter> to continue: ", *

rem --- isNumber()

    print fill(79, "="), 'lf', "isNumber()..."
    x$ = "abc123"

    if func.isNumber(x$) then
        print x$, " is a number"
    else
        print x$," is not a number"
    endif

    x$ = "23.45"

    if func.isNumber(x$) then
        print x$, " is a number"
    else
        print x$," is not a number"
    endif
    
    rem input "Press <enter> to continue: ", *

rem --- isHex

    print fill(79, "="), 'lf', "isHex()..."

    x$="heehee"
    print x$, 
    if func.isHex(x$) then
        print " is hex"
    else
        print " is not hex"
    endif

    x$="1b0300ff"
    print x$, 
    if func.isHex(x$) then
        print " is hex"
    else
        print " is not hex"
    endif

    x$="7f0"
    print x$, 
    if func.isHex(x$) then
        print " is hex"
    else
        print " is not hex"
    endif
    
    rem input "Press <enter> to continue: ", *

rem --- minimumNotZero

    print fill(79, "="), 'lf', "minimumNotZero()..."
    print "Expect 0: ", func.minimumNotZero(0, 0)
    print "Expect 1: ", func.minimumNotZero(0, 1)
    print "Expect 2: ", func.minimumNotZero(2, 0)
    print "Expect 1: ", func.minimumNotZero(1, 2)
    print "Expect 1: ", func.minimumNotZero(2, 1)

    rem input "Press <enter> to continue: ", *

rem --- Percentage

    print fill(79, "="), 'lf', "percentage()..."
    print "Expect 0: ", func.percentage(0, 0)
    print "Expect 0: ", func.percentage(0, 1)
    print "Expect 0: ", func.percentage(1, 0)
    print "Expect 100: ", func.percentage(256, 256)
    print "Expect 25: ", func.percentage(2, 8)
    print "Expect 17.65: ", func.percentage(3, 17)
    print "Expect -200: ", func.percentage(64, -32)
    print "Expect -200: ", func.percentage(-64, 32)
    print "Expect 200: ", func.percentage(-64, -32)
    
    rem input "Press <enter> to continue: ", *
    
rem --- Gross Profit

    print fill(79, "="), 'lf', "grossProfit()..."
    sale = 19.95, cost = 5.00
    print "Sale", sale, ", Cost", cost, ", GP% ", func.grossProfit(sale, cost)
    sale = 19.95, cost = 19.95
    print "Sale", sale, ", Cost", cost, ", GP% ", func.grossProfit(sale, cost)
    sale = 19.95, cost = 0
    print "Sale", sale, ", Cost", cost, ", GP% ", func.grossProfit(sale, cost)
    sale = 19.95, cost = 40.00
    print "Sale", sale, ", Cost", cost, ", GP% ", func.grossProfit(sale, cost)
    sale = 0, cost = 5
    print "Sale", sale, ", Cost", cost, ", GP% ", func.grossProfit(sale, cost)
    
    rem input "Press <enter> to continue: ", *

rem --- Forrmat Address

    print fill(79, "="), 'lf', "formatAddress()..."

    sys_pgm$=stbl("+DIR_SYP",err=*next)
    files=1,begfile=1,endfile=files
    dim files$[files],options$[files],chans$[files],templates$[files]
    files$[1]="apm_vendmast";options$[1]="OTA"
    call sys_pgm$+"bac_open_tables.bbj",begfile,endfile,files$[all],options$[all],
:                                   chans$[all],templates$[all],table_chans$[all],batch,status$
    if status$<>"" then
        print errmes(-1)
        print "Skipping test..."
        goto format_address_end
    endif

    open_chan = num(chans$[1])
    table_tpl$ = templates$[1]    
    
    declare BBjTemplatedString rec!
    rec! = BBjAPI().makeTemplatedString(table_tpl$)

    dim rec$:table_tpl$
    
    while 1
        read record (open_chan, end=*break) rec$
        rec!.setString(rec$)
        block$ = func.formatAddress(table_chans$[all], rec!, 30, 6)
        
        for i=1 to 180 step 30
            print block$(i, 30)
        next i
        
        input "Press <enter> to continue: ", *
    wend

format_address_end:
    
    end
    