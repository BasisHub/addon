rem adc - Determine Period End Dates (Public/Called)
rem Program adc_perioddates (syc_pa)

rem --- AddonSoftware Version 17.00
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --------------------------------------------------------------------------------

rem --- PERIOD    : Current fiscal period (Input)
rem --- YEAR      : Current fiscal year (Input)
rem --- BEGDATE$  : Period beginning date in YYYYMMDD format (Returned)
rem --- ENDDATE$  : Period ending date in YYYYMMDD format (Returned)
rem --- TABLE_CHANS$[]: Barista opened channels array
rem --- STATUS    : Zero=No Error/Not Zero=Error (Returned)

use java.util.GregorianCalendar

    setesc std_error
    seterr std_error
    
    enter period,year,begdate$,enddate$,table_chans$[all],status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    Calendar! = new GregorianCalendar()

rem --- Open/Lock files

    num_files=2
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="GLS_PARAMS",open_opts$[1]="OTA@"
    open_tables$[2]="GLS_CALENDAR",open_opts$[2]="OTA@"
    
    gosub open_tables
    
    gls01_dev=num(open_chans$[1])
    gls_calendar_dev=num(open_chans$[2])
    dim gls01a$:open_tpls$[1]
    dim gls_calendar$:open_tpls$[2]

rem --- Retrieve parameter records

    status=0
    gls01a_key$=firm_id$+"GL00"
    find record (gls01_dev,key=gls01a_key$,err=std_missing_params) gls01a$
    readrecord(gls_calendar_dev,key=firm_id$+str(year),err=*next)gls_calendar$
    if cvs(gls_calendar.firm_id$,2)="" then
        msg_id$="AD_NO_FISCAL_CAL"
        dim msg_tokens$[1]
        msg_tokens$[1]=str(year)
        gosub disp_message
        status=1
        goto std_exit
    endif
    total_periods=num(gls_calendar.total_pers$)

rem --- Determine End Of Period

    if period>total_periods period=total_periods
    enddate$=field(gls_calendar$,"per_ending_"+str(period:"00"))
    calendar_year=year
    if enddate$<gls_calendar.per_ending_01$ then calendar_year=calendar_year+1
    enddate$=str(calendar_year:"0000")+enddate$
    if len(enddate$)>7 then
        yyyy$=enddate$(1,4)
        mm$=enddate$(5,2)
        dd$=enddate$(7,2)
        rem --- Adjust last day of February for leap year
        if mm$="02" then
            if dd$="29" and !Calendar!.isLeapYear(num(yyyy$)) then enddate$(7,2)="28"
            if dd$="28" and Calendar!.isLeapYear(num(yyyy$)) and gls01a.adjust_february then enddate$(7,2)="29"
        endif
    endif

rem --- Determine Start Of Period

    if period=1 then
        rem --- Get calendar start date and subtract one day from it
        begdate$=field(gls_calendar$,"cal_start_date")
        julian=jul(calendar_year,num(begdate$(1,2)),num(begdate$(3,2)))-1
        prior_yr_end$=date(julian:"%Yl%Mz%Dz")
        calendar_year=num(prior_yr_end$(1,4))
        begdate$=prior_yr_end$(5)
    else
        rem --- Get ending date of previous period
        begdate$=field(gls_calendar$,"per_ending_"+str(period-1:"00"))
        calendar_year=year
        if begdate$<gls_calendar.per_ending_01$ then calendar_year=calendar_year+1
    endif
    if len(begdate$)>3 then
        mm$=begdate$(1,2)
        dd$=begdate$(3,2)
        rem --- Adjust last day of February for leap year
        if mm$="02" then
            if dd$="29" and !Calendar!.isLeapYear(calendar_year) then begdate$(3,2)="28"
            if dd$="28" and Calendar!.isLeapYear(calendar_year) and gls01a.adjust_february then begdate$(3,2)="29"
        endif
    endif
    julian=jul(calendar_year,num(begdate$(1,2)),num(begdate$(3,2)))+1
    begdate$=date(julian:"%Yl%Mz%Dz")

rem --- Done

    status=0
    goto std_exit
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_missing_params_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
