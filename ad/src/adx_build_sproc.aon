rem --- build_sprocs.aon
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- prototype for table-driven sproc definition

rem --- for now, this program has hard-coded logic to create the following SPROCs:
rem --- POCALENDAR
rem --- SALES_CUSTOMER
rem --- SALES_CUST_TYPE
rem --- ALES_CUST_TYPE_CUST
rem --- SALES_INVOICE_DETAILS
rem --- INVOICE_DETAIL
rem --- INVOICE_HEADER
rem --- PICKLST_DETAIL
rem --- PICKLST_HEADER
rem --- BOMCOSTING
rem --- SFCALENDAR
rem --- SFHARDCOPY
rem --- SFHARDCOPYCLSDDET
rem --- SFHARDCOPYOPSTD
rem --- SFHARDCOPYMATSTD
rem --- SFHARDCOPYSUBSTD
rem --- SFHARDCOPYCOSTSUM
rem --- SFHARDCOPYTRANS
rem --- SFHARDCOPYFGLS

rem --- VENDOR_INVOICES?
rem --- VENDOR_INVOICE_DET?

rem --- 4/2012 Added VIEWs to the hard-coded logic herein
rem --- VW_SFX_WOTRANXR  (replaces sfm-07/sfx_wotranxr xref of WO transactions)
rem --- VW_WOS_WITH_TRAN (JOIN sfe-01/sfe_womastr and vw_sfx_wotranxr)
rem --- SF_COSTSUMS_STD (Accums Dir, Ovh, Mat and Sub STD costs by WO)
rem --- SF_COSTSUMS_ACTO (Accums Ops, Dir, Ovh, Mat and Sub Actual costs of Open Trans by WO)
rem --- SF_COSTSUMS_ACTC (Accums Ops, Dir, Ovh, Mat and Sub Actual costs of Closed Trans by WO)
rem --- SF_WO_REQ_VALS   (Returns Standards/Requirements data for Closed Ops, Mats, and Subs)
rem --- SF_OPNTRAN_VALS  (Returns Open Transactions for Ops, Mats, and Subs)
rem --- SF_CLSDTRAN_VALS (Returns Closed Transactions for Ops, Mats, and Subs)

rem --- idea is to make an admin table in Addon (Barista?) that contains
rem --- name, params, .prc loc and .cfg loc so as we deploy, we can run this program
rem --- as part of install/init, and see to it that sprocs are defined.

    seterr std_error
    setesc std_error
    
    if argc>1
        for curr_argv=1 to argc-1
            temp_argv$=argv(curr_argv)
            if pos("-u"=temp_argv$)=1 user_id$=stbl("+USER_ID",temp_argv$(3));rem User ID
            if pos("-l"=temp_argv$)=1 launch_source$=temp_argv$(3);rem Launch source
        next curr_argv
    endif


    call stbl("+DIR_SYP")+"bas_process_beg.bbj",stbl("+USER_ID"),rd_table_chans$[all]



rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    milestone=1
    
rem --- Open File(s)
    
    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ADS_AUTOLAUNCH",open_opts$[1]="OTA"

    gosub open_tables

    ads_autolaunch=num(open_chans$[1]);dim ads_autolaunch$:open_tpls$[1]

rem --- Open File(s) used in VIEWs to ensure their existence (so CREATE won't err)
rem     ***** NOTE: New VIEWs should add their tables to these opens *****
	num_files=10
	dim open_tables$[1:num_files], open_opts$[1:num_files], open_chans$[1:num_files], open_tpls$[1:num_files]

	open_tables$[1]	="SFE_WOMASTR",  open_opts$[1] = "OTA"; rem sfe-01
	open_tables$[2]	="SFT_OPNOPRTR", open_opts$[2] = "OTA"; rem sft-01
	open_tables$[3]	="SFT_CLSOPRTR", open_opts$[3] = "OTA"; rem sft-03
	open_tables$[4]	="SFT_OPNMATTR", open_opts$[4] = "OTA"; rem sft-21
	open_tables$[5] ="SFT_CLSMATTR", open_opts$[5] = "OTA"; rem sft-23
	open_tables$[6] ="SFT_OPNSUBTR", open_opts$[6] = "OTA"; rem sft-31
	open_tables$[7] ="SFT_CLSSUBTR", open_opts$[7] = "OTA"; rem sft-33
	open_tables$[8] ="SFE_WOOPRTN",  open_opts$[8] = "OTA"; rem sfe-02
	open_tables$[9] ="SFE_WOMATL",   open_opts$[9] = "OTA"; rem sfe-22
	open_tables$[10]="SFE_WOSUBCNT", open_opts$[10]= "OTA"; rem sfe-32	
	
	gosub open_tables

rem --- Close tables opened solely to ensure VIEWs don't err
    
	open_tables$[1]	="SFE_WOMASTR",  open_opts$[1] = "C"; rem sfe-01
	open_tables$[2]	="SFT_OPNOPRTR", open_opts$[2] = "C"; rem sft-01
	open_tables$[3]	="SFT_CLSOPRTR", open_opts$[3] = "C"; rem sft-03
	open_tables$[4]	="SFT_OPNMATTR", open_opts$[4] = "C"; rem sft-21
	open_tables$[5] ="SFT_CLSMATTR", open_opts$[5] = "C"; rem sft-23
	open_tables$[6] ="SFT_OPNSUBTR", open_opts$[6] = "C"; rem sft-31
	open_tables$[7] ="SFT_CLSSUBTR", open_opts$[7] = "C"; rem sft-33
	open_tables$[8] ="SFE_WOOPRTN",  open_opts$[8] = "C"; rem sfe-02
	open_tables$[9] ="SFE_WOMATL",   open_opts$[9] = "C"; rem sfe-22
	open_tables$[10]="SFE_WOSUBCNT", open_opts$[10]= "C"; rem sfe-32		
	
    gosub open_tables	
	
rem --- init

    database$=stbl("+DBNAME",err=std_exit)
    wdir$=dir("")
    chdir(stbl("+DIR_SPROCS",err=*next))
    sproc_dir$=dir("")
    chdir wdir$
    sproc_path$=dsk("")+sproc_dir$
    barista_cfg_path$=dsk("")+dir("")+stbl("+DIR_CFG")
    
rem --- init progress meter

    total_recs=10;rem alter as more 'create procedure' statements are added - eventually will be table driven
    curr_rec=0
    task_val$="BUILDSPROC"
    task_desc$="Create SPROC Defs"

    progress! = bbjAPI().getGroupNamespace()
    progress!.setValue("+process_task",task_val$+"^C^"+task_desc$+"^CNC^"+str(total_recs)+"^")

rem --- init for sql

    chan = sqlunt
    SQLOPEN(chan) database$
    
rem -- main loop (this will eventually be table-driven)

rem --- first drop all std Addon SPROCs

	sql_action$="DROP PROCEDURE"
	abort_on_exec_err=0; rem OK if DROP fails to EXEC, but not OK if CREATE fails or if PREP fails
	
	sproc_vw_name$="POCALENDAR"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="SALES_CUSTOMER"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="SALES_CUST_TYPE"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="SALES_CUST_TYPE_CUST"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="SALES_INVOICE_DETAILS"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="INVOICE_DETAIL"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="INVOICE_HEADER"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="PICKLST_DETAIL"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="PICKLST_HEADER"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="BOMCOSTING"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="SFCALENDAR"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPY"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYCLSDDET"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYOPSTD"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYMATSTD"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYSUBSTD"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYCOSTSUM"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYTRANS"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def	
	
	sproc_vw_name$="SFHARDCOPYFGLS"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def	

	sproc_vw_name$="VENDORDETAIL_HIST"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

rem --- now add them back (i.e., drop, then add, in case anything has changed) 
   
	sql_action$="CREATE PROCEDURE"
	abort_on_exec_err=1; rem OK if DROP fails to EXEC, but not OK if CREATE fails or if PREP fails
	
    sproc_vw_name$="POCALENDAR"
	sqlprep$="CREATE PROCEDURE POCALENDAR "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, BEGINNING_YEAR CHAR(4) IN, BEGINNING_MONTH CHAR(2) IN, "
    sqlprep$=sqlprep$+"ENDING_YEAR CHAR(4) IN, ENDING_MONTH CHAR(2) IN, BARISTA_WD VARCHAR(50) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"POCALENDAR.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'Purchase Calendar'"

    gosub create_sproc_def

    sproc_vw_name$="SALES_CUSTOMER"
	sqlprep$="CREATE PROCEDURE SALES_CUSTOMER "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, CUSTOMER_NBR CHAR(6) IN, MONTH CHAR(2) IN, "
    sqlprep$=sqlprep$+"YEAR CHAR(4) IN, BARISTA_WD VARCHAR(50) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"SALES_CUSTOMER.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'Sales for a Customer'"

    gosub create_sproc_def
    
    sproc_vw_name$="SALES_CUST_TYPE"
	sqlprep$="CREATE PROCEDURE SALES_CUST_TYPE "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, MONTH CHAR(2) IN, YEAR CHAR(4) IN, BARISTA_WD VARCHAR(50) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"SALES_CUST_TYPE.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'Sales by Customer Type'"

    gosub create_sproc_def
    
    sproc_vw_name$="SALES_CUST_TYPE_CUST"
	sqlprep$="CREATE PROCEDURE SALES_CUST_TYPE_CUST "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, CUST_TYPE CHAR(3) IN, MONTH CHAR(2) IN, YEAR CHAR(4) IN, "
    sqlprep$=sqlprep$+"CUST_ID_MASK CHAR(10) IN, CUST_ID_LEN CHAR(3) IN, BARISTA_WD VARCHAR(50) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"SALES_CUST_TYPE_CUST.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'Sales by Customer within Customer Type'"

    gosub create_sproc_def

    sproc_vw_name$="SALES_INVOICE_DETAILS"
	sqlprep$="CREATE PROCEDURE SALES_INVOICE_DETAILS "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, CUSTOMER_NBR CHAR(6) IN, AR_INV_NBR CHAR(7) IN, BARISTA_WD VARCHAR(50) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"SALES_INVOICE_DETAILS.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'Invoice Details'"

    gosub create_sproc_def

    sproc_vw_name$="INVOICE_DETAIL"
	sqlprep$="CREATE PROCEDURE INVOICE_DETAIL "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, CUSTOMER_ID CHAR(6) IN, ORDER_NO CHAR(7) IN )"
    sqlprep$=sqlprep$+"'"+sproc_path$+"INVOICE_DETAIL.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'Invoice Detail'"

    gosub create_sproc_def

    sproc_vw_name$="INVOICE_HEADER"
	sqlprep$="CREATE PROCEDURE INVOICE_HEADER "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, CUSTOMER_ID CHAR(6) IN, ORDER_NO CHAR(7) IN )"
    sqlprep$=sqlprep$+"'"+sproc_path$+"INVOICE_HEADER.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} ' Invoice Header'"

    gosub create_sproc_def

    sproc_vw_name$="PICKLST_DETAIL"
	sqlprep$="CREATE PROCEDURE PICKLST_DETAIL "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, CUSTOMER_ID CHAR(6) IN, ORDER_NO CHAR(7) IN )"
    sqlprep$=sqlprep$+"'"+sproc_path$+"PICKLST_DETAIL.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} ' Picklist Detail'"

    gosub create_sproc_def

    sproc_vw_name$="PICKLST_HEADER"
	sqlprep$="CREATE PROCEDURE PICKLST_HEADER "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, CUSTOMER_ID CHAR(6) IN, ORDER_NO CHAR(7) IN )"
    sqlprep$=sqlprep$+"'"+sproc_path$+"PICKLST_HEADER.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} ' PicklistHeader'"

    gosub create_sproc_def

    sproc_vw_name$="BOMCOSTING"
	sqlprep$="CREATE PROCEDURE BOMCOSTING "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, BILL_NO_1 CHAR(20) IN, BILL_NO_2 CHAR(20) IN, BARISTA_WD VARCHAR(50) IN )"
    sqlprep$=sqlprep$+"'"+sproc_path$+"BOMCOSTING.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} ' Listing of Costed BOMs'"

    gosub create_sproc_def
	
    sproc_vw_name$="SFCALENDAR"
	sqlprep$="CREATE PROCEDURE SFCALENDAR "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, OP_CODE CHAR(3) IN, BEGINNING_YEAR CHAR(4) IN, BEGINNING_MONTH CHAR(2) IN, "
    sqlprep$=sqlprep$+"ENDING_YEAR CHAR(4) IN, ENDING_MONTH CHAR(2) IN, BARISTA_WD VARCHAR(50) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"SFCALENDAR.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'Shop Floor Calendar'"

    gosub create_sproc_def
	
    sproc_vw_name$="SFHARDCOPY"
	sqlprep$="CREATE PROCEDURE SFHARDCOPY "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, WO_LOCATION CHAR(2) IN, WO_NO_1 CHAR(7) IN, WO_NO_2 CHAR(7) IN, "
	sqlprep$=sqlprep$+"BARISTA_WD VARCHAR(1) IN, REPORT_SEQ CHAR(1) IN, WOSTATUS CHAR(4) IN, BILL_NO_1 CHAR(20) IN, "
	sqlprep$=sqlprep$+"BILL_NO_2 CHAR(20) IN, WAREHOUSE_ID CHAR(2) IN, CUSTOMER_ID_1 CHAR(6) IN, CUSTOMER_ID_2 CHAR(6) IN, "
	sqlprep$=sqlprep$+"WO_TYPE_1 CHAR(2) IN, WO_TYPE_2 CHAR(2) IN, REPORT_TYPE CHAR(1) IN, MASKS VARCHAR(1) IN, "
	sqlprep$=sqlprep$+"SF_PREVPER_ENDDATE CHAR(8) IN) "	
    sqlprep$=sqlprep$+"'"+sproc_path$+"SFHARDCOPY.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'WO Hard Copy'"

    gosub create_sproc_def

    sproc_vw_name$="SFHARDCOPYCLSDDET"
	sqlprep$="CREATE PROCEDURE SFHARDCOPYCLSDDET "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, WO_LOCATION CHAR(2) IN, WO_NO CHAR(7) IN, BARISTA_WD VARCHAR(1) IN, MASKS VARCHAR(1) IN,"
	sqlprep$=sqlprep$+" COST_MASK_PATTERN VARCHAR(1) IN, AMT_MASK_PATTERN VARCHAR(1) IN, UNITS_MASK_PATTERN VARCHAR(1) IN, "
	sqlprep$=sqlprep$+" WO_CATEGORY VARCHAR(1) IN, WAREHOUSE_ID VARCHAR(1) IN, WO_TYPE VARCHAR(1) IN, ITEM_ID VARCHAR(1) IN, "
    sqlprep$=sqlprep$+" SF_PREVPER_ENDDATE VARCHAR(1) IN, WO_STATUS_LETTER VARCHAR(1) IN, CLOSED_DATE_RAW VARCHAR(1) IN) "
	sqlprep$=sqlprep$+"'"+sproc_path$+"SFHARDCOPYCLSDDET.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'WO Hard Copy Closed Detail'"

    gosub create_sproc_def
    sproc_vw_name$="SFHARDCOPYOPSTD"
	sqlprep$="CREATE PROCEDURE SFHARDCOPYOPSTD "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, WO_LOCATION CHAR(2) IN, WO_NO CHAR(7) IN, BARISTA_WD VARCHAR(1) IN, MASKS VARCHAR(1) IN, REPORT_TYPE CHAR(1) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"SFHARDCOPYOPSTD.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'WO Hard Copy Op Std'"

    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYMATSTD"
	sqlprep$="CREATE PROCEDURE SFHARDCOPYMATSTD "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, WO_LOCATION CHAR(2) IN, WO_NO CHAR(7) IN, BARISTA_WD VARCHAR(1) IN, MASKS VARCHAR(1) IN, REPORT_TYPE CHAR(1) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"SFHARDCOPYMATSTD.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'WO Hard Copy Mat Std'"

    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYSUBSTD"
	sqlprep$="CREATE PROCEDURE SFHARDCOPYSUBSTD "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, WO_LOCATION CHAR(2) IN, WO_NO CHAR(7) IN, BARISTA_WD VARCHAR(1) IN, MASKS VARCHAR(1) IN, REPORT_TYPE CHAR(1) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"SFHARDCOPYSUBSTD.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'WO Hard Copy Sub Std'"

    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYCOSTSUM"
	sqlprep$="CREATE PROCEDURE SFHARDCOPYCOSTSUM "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, WO_LOCATION CHAR(2) IN, WO_NO CHAR(7) IN, BARISTA_WD VARCHAR(1) IN, "
	sqlprep$=sqlprep$+"MASKS VARCHAR(1) IN, PROD_QTY CHAR(10) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"SFHARDCOPYCOSTSUM.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'WO Hard Copy Cost Sum'"

    gosub create_sproc_def

	sproc_vw_name$="SFHARDCOPYTRANS"
	sqlprep$="CREATE PROCEDURE SFHARDCOPYTRANS "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, WO_LOCATION CHAR(2) IN, WO_NO CHAR(7) IN, BARISTA_WD VARCHAR(1) IN, "
	sqlprep$=sqlprep$+"MASKS VARCHAR(1) IN, TRANS_DATEFROM CHAR(10) IN, TRANS_DATETHRU CHAR(10) IN, TRANSTYPE VARCHAR(3) IN, "
	sqlprep$=sqlprep$+"SF_PREVPER_ENDDATE CHAR(8) IN) "	
    sqlprep$=sqlprep$+"'"+sproc_path$+"SFHARDCOPYTRANS.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'WO Hard Copy Transactions'"

    gosub create_sproc_def
			
	sproc_vw_name$="SFHARDCOPYFGLS"
	sqlprep$="CREATE PROCEDURE SFHARDCOPYFGLS "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, WO_LOCATION CHAR(2) IN, WO_NO CHAR(7) IN, BARISTA_WD VARCHAR(1) IN, "
	sqlprep$=sqlprep$+"MASKS VARCHAR(1) IN, MAST_CLS_INP_QTY_STR VARCHAR(1) IN) "	
    sqlprep$=sqlprep$+"'"+sproc_path$+"SFHARDCOPYFGLS.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'WO Hard Copy Finished Good LS'"

    gosub create_sproc_def

    sproc_vw_name$="VENDORDETAIL_HIST"
	sqlprep$="CREATE PROCEDURE VENDORDETAIL_HIST "
    sqlprep$=sqlprep$+"(FIRM_ID CHAR(2) IN, VENDOR_ID CHAR(6) IN, "
    sqlprep$=sqlprep$+"BARISTA_WD VARCHAR(50) IN, MASKS VARCHAR(1) IN) "
    sqlprep$=sqlprep$+"'"+sproc_path$+"VENDORDETAIL_HIST.prc' '"+barista_cfg_path$+"barista.cfg' "
    sqlprep$=sqlprep$+"RESULT_SET "
    sqlprep$=sqlprep$+"{_begin_}{_end_} 'Vendor Detail History'"

    gosub create_sproc_def
	
rem --- Done with SPROCs. Now do VIEWs

rem --- first drop all std Addon VIEWs

	sql_action$="DROP VIEW"
	abort_on_exec_err=0; rem OK if DROP fails to EXEC, but not OK if CREATE fails or if PREP fails
	
	sproc_vw_name$="VW_SFX_WOTRANXR"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="VW_WOS_WITH_TRAN"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="SF_COSTSUMS_STD"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def

	sproc_vw_name$="SF_COSTSUMS_ACTO"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="SF_COSTSUMS_ACTC"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	
	sproc_vw_name$="SF_WO_REQ_VALS"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def	

	sproc_vw_name$="SF_OPNTRAN_VALS"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def
	
	sproc_vw_name$="SF_CLSDTRAN_VALS"
    sqlprep$=sql_action$+" "+sproc_vw_name$+" "
    gosub create_sproc_def


rem --- now add VIEWs back (i.e., drop, then add, in case anything has changed)     
	
	sql_action$="CREATE VIEW"
	abort_on_exec_err=1; rem OK if DROP fails to EXEC, but not OK if CREATE fails or if PREP fails
	
	rem --  Replacement for sfm-07/sfx_wotranxr SF transaction xref
	rem --  JOINed with sfe_WOMastr in vw_wos_with_tran
	
    sproc_vw_name$="VW_SFX_WOTRANXR"
	sqlprep$="CREATE VIEW VW_SFX_WOTRANXR AS "
    sqlprep$=sqlprep$+"SELECT oMats.firm_id"+$0a$
    sqlprep$=sqlprep$+"     , oMats.wo_location"+$0a$
    sqlprep$=sqlprep$+"     , oMats.wo_no"+$0a$
    sqlprep$=sqlprep$+"     , oMats.trans_date"+$0a$
    sqlprep$=sqlprep$+"     , 'OpenMats' AS Trans_Type"+$0a$
    sqlprep$=sqlprep$+"     , 'M' AS Record_ID"+$0a$
    sqlprep$=sqlprep$+"     , oMats.trans_seq "+$0a$
	sqlprep$=sqlprep$+"     , oMats.material_seq_ref AS Seq_Ref "+$0a$
	sqlprep$=sqlprep$+"     , oMats.warehouse_id AS warehouse_id "+$0a$
	sqlprep$=sqlprep$+"     , oMats.item_id AS item_id "+$0a$
    sqlprep$=sqlprep$+"FROM SFT_OPNMATTR AS oMats"+$0a$
    sqlprep$=sqlprep$+"  UNION "+$0a$
    sqlprep$=sqlprep$+"SELECT oOps.firm_id "+$0a$
    sqlprep$=sqlprep$+"     , oOps.wo_location"+$0a$
    sqlprep$=sqlprep$+"     , oOps.wo_no"+$0a$
    sqlprep$=sqlprep$+"     , oOps.trans_date"+$0a$
    sqlprep$=sqlprep$+"     , 'OpenOprs' AS Trans_Type"+$0a$
    sqlprep$=sqlprep$+"     , 'O' AS Record_ID"+$0a$
    sqlprep$=sqlprep$+"     , oOps.trans_seq "+$0a$
	sqlprep$=sqlprep$+"     , oOps.oper_seq_ref AS Seq_Ref "+$0a$
    sqlprep$=sqlprep$+"     , '' AS warehouse_id "+$0a$
	sqlprep$=sqlprep$+"     , '' AS item_id "+$0a$
    sqlprep$=sqlprep$+"FROM SFT_OPNOPRTR AS oOps "+$0a$
    sqlprep$=sqlprep$+"  UNION "+$0a$
    sqlprep$=sqlprep$+"SELECT oSubs.firm_id "+$0a$
    sqlprep$=sqlprep$+"     , oSubs.wo_location"+$0a$
    sqlprep$=sqlprep$+"     , oSubs.wo_no"+$0a$
    sqlprep$=sqlprep$+"     , oSubs.trans_date"+$0a$
    sqlprep$=sqlprep$+"     , 'OpenSubs' AS Trans_Type"+$0a$
    sqlprep$=sqlprep$+"     , 'S' AS Record_ID"+$0a$
    sqlprep$=sqlprep$+"     , oSubs.trans_seq "+$0a$
	sqlprep$=sqlprep$+"     , oSubs.subcont_seq_ref AS Seq_Ref "+$0a$
    sqlprep$=sqlprep$+"     , '' AS warehouse_id "+$0a$
	sqlprep$=sqlprep$+"     , '' AS item_id "+$0a$
    sqlprep$=sqlprep$+"FROM SFT_OPNSUBTR AS oSubs"+$0a$
    sqlprep$=sqlprep$+"  UNION "+$0a$
    sqlprep$=sqlprep$+"SELECT cMats.firm_id "+$0a$
    sqlprep$=sqlprep$+"     , cMats.wo_location"+$0a$
    sqlprep$=sqlprep$+"     , cMats.wo_no"+$0a$
    sqlprep$=sqlprep$+"     , cMats.trans_date"+$0a$
    sqlprep$=sqlprep$+"     , 'ClosedMats' AS Trans_Type"+$0a$
    sqlprep$=sqlprep$+"     , 'M' AS Record_ID"+$0a$
    sqlprep$=sqlprep$+"     , cMats.trans_seq "+$0a$
	sqlprep$=sqlprep$+"     , cMats.material_seq_ref AS Seq_Ref "+$0a$
	sqlprep$=sqlprep$+"     , cMats.warehouse_id AS warehouse_id "+$0a$
	sqlprep$=sqlprep$+"     , cMats.item_id AS item_id "+$0a$
    sqlprep$=sqlprep$+"FROM SFT_CLSMATTR AS cMats "+$0a$
    sqlprep$=sqlprep$+"  UNION "+$0a$
    sqlprep$=sqlprep$+"SELECT cOps.firm_id "+$0a$
    sqlprep$=sqlprep$+"     , cOps.wo_location"+$0a$
    sqlprep$=sqlprep$+"     , cOps.wo_no"+$0a$
    sqlprep$=sqlprep$+"     , cOps.trans_date"+$0a$
    sqlprep$=sqlprep$+"     , 'ClosedOprs' AS Trans_Type"+$0a$
    sqlprep$=sqlprep$+"     , 'O' AS Record_ID"+$0a$
    sqlprep$=sqlprep$+"     , cOps.trans_seq "+$0a$
	sqlprep$=sqlprep$+"     , cOps.oper_seq_ref AS Seq_Ref "+$0a$
    sqlprep$=sqlprep$+"     , '' AS warehouse_id "+$0a$
	sqlprep$=sqlprep$+"     , '' AS item_id "+$0a$
    sqlprep$=sqlprep$+"FROM SFT_CLSOPRTR AS cOps"+$0a$
    sqlprep$=sqlprep$+"  UNION "+$0a$
    sqlprep$=sqlprep$+"SELECT cSubs.firm_id "+$0a$
    sqlprep$=sqlprep$+"     , cSubs.wo_location"+$0a$
    sqlprep$=sqlprep$+"     , cSubs.wo_no"+$0a$
    sqlprep$=sqlprep$+"     , cSubs.trans_date"+$0a$
    sqlprep$=sqlprep$+"     , 'ClosedSubs' AS Trans_Type"+$0a$
    sqlprep$=sqlprep$+"     , 'S' AS Record_ID"+$0a$
    sqlprep$=sqlprep$+"     , cSubs.trans_seq "+$0a$
	sqlprep$=sqlprep$+"     , cSubs.subcont_seq_ref AS Seq_Ref  "+$0a$
    sqlprep$=sqlprep$+"     , '' AS warehouse_id "+$0a$
	sqlprep$=sqlprep$+"     , '' AS item_id "+$0a$
    sqlprep$=sqlprep$+"FROM SFT_CLSSUBTR AS cSubs"

    gosub create_sproc_def	

	rem --  JOIN sfe-01/sfe_womastr with transaction xref view
    sproc_vw_name$="VW_WOS_WITH_TRAN"
	sqlprep$="CREATE VIEW VW_WOS_WITH_TRAN AS "
	sqlprep$=sqlprep$+"SELECT mast.firm_id"+$0a$
	sqlprep$=sqlprep$+"     , mast.wo_location"+$0a$
    sqlprep$=sqlprep$+"     , mast.wo_no"+$0a$
    sqlprep$=sqlprep$+"     , mast.wo_type"+$0a$
    sqlprep$=sqlprep$+"     , xref.trans_date"+$0a$
    sqlprep$=sqlprep$+"     , xref.record_id"+$0a$
    sqlprep$=sqlprep$+"     , xref.trans_seq"+$0a$
    sqlprep$=sqlprep$+"     , xref.warehouse_id AS trans_warehouse_id"+$0a$
    sqlprep$=sqlprep$+"     , xref.item_id AS trans_item_id"+$0a$
    sqlprep$=sqlprep$+"     , mast.wo_category"+$0a$
    sqlprep$=sqlprep$+"     , mast.wo_status"+$0a$
    sqlprep$=sqlprep$+"     , mast.customer_id"+$0a$
    sqlprep$=sqlprep$+"     , mast.order_no"+$0a$
    sqlprep$=sqlprep$+"     , mast.sls_ord_seq_ref"+$0a$
    sqlprep$=sqlprep$+"     , mast.unit_measure"+$0a$
    sqlprep$=sqlprep$+"     , mast.bill_rev"+$0a$
    sqlprep$=sqlprep$+"     , mast.warehouse_id"+$0a$
    sqlprep$=sqlprep$+"     , mast.item_id"+$0a$
    sqlprep$=sqlprep$+"     , mast.opened_date"+$0a$
    sqlprep$=sqlprep$+"     , mast.eststt_date"+$0a$
    sqlprep$=sqlprep$+"     , mast.estcmp_date"+$0a$
    sqlprep$=sqlprep$+"     , mast.act_st_date"+$0a$
    sqlprep$=sqlprep$+"     , mast.lstact_date"+$0a$
    sqlprep$=sqlprep$+"     , mast.closed_date"+$0a$
    sqlprep$=sqlprep$+"     , mast.description_01"+$0a$
    sqlprep$=sqlprep$+"     , mast.description_02"+$0a$
    sqlprep$=sqlprep$+"     , mast.drawing_no"+$0a$
    sqlprep$=sqlprep$+"     , mast.drawing_rev"+$0a$
    sqlprep$=sqlprep$+"     , mast.complete_flg"+$0a$
    sqlprep$=sqlprep$+"     , mast.recalc_flag"+$0a$
    sqlprep$=sqlprep$+"     , mast.lotser_item"+$0a$
    sqlprep$=sqlprep$+"     , mast.priority"+$0a$
    sqlprep$=sqlprep$+"     , mast.sched_flag"+$0a$
    sqlprep$=sqlprep$+"     , mast.forecast"+$0a$
    sqlprep$=sqlprep$+"     , mast.cls_inp_date"+$0a$
    sqlprep$=sqlprep$+"     , mast.sch_prod_qty"+$0a$
    sqlprep$=sqlprep$+"     , mast.qty_cls_todt"+$0a$
    sqlprep$=sqlprep$+"     , mast.cls_cst_todt"+$0a$
    sqlprep$=sqlprep$+"     , mast.cls_inp_qty"+$0a$
    sqlprep$=sqlprep$+"     , mast.closed_cost"+$0a$
    sqlprep$=sqlprep$+"     , mast.est_yield "+$0a$
    sqlprep$=sqlprep$+"FROM SFE_WOMASTR AS mast "+$0a$
    sqlprep$=sqlprep$+"INNER JOIN VW_SFX_WOTRANXR AS xref"+$0a$
    sqlprep$=sqlprep$+"        ON mast.firm_id+mast.wo_location+mast.wo_no"+$0a$
    sqlprep$=sqlprep$+"         = xref.firm_id+xref.wo_location+xref.wo_no"

    gosub create_sproc_def	
		
	rem --- SF_COSTSUMS_STD (Accums Dir, Ovh, Mat and Sub STD costs by WO)
	rem --- Can replace v6 logic of looping through sfe-02, sfe-22, sfe-32
	rem --- Originally written for Closed WO Detail Report
    sproc_vw_name$="SF_COSTSUMS_STD"
	sqlprep$="CREATE VIEW SF_COSTSUMS_STD AS "
    sqlprep$=sqlprep$+"SELECT wo.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,wo.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,operReq.Tot_STD_Dir_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,operReq.Tot_STD_Ovh_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,matReq.Tot_STD_Mat_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,subReq.Tot_STD_Sub_Cost"+$0a$
	sqlprep$=sqlprep$+"FROM SFE_WOMASTR AS wo"+$0a$
	sqlprep$=sqlprep$+"LEFT JOIN (SELECT ops.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"                 ,ops.WO_Location"+$0a$
	sqlprep$=sqlprep$+"                 ,ops.WO_No"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(ops.Total_Time * ops.Direct_Rate) AS Tot_STD_Dir_Cost"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(ops.Tot_STD_Cost-(ops.Total_Time * ops.Direct_Rate)) AS Tot_STD_Ovh_Cost"+$0a$
	sqlprep$=sqlprep$+"           FROM SFE_WOOprtn AS ops"+$0a$
	sqlprep$=sqlprep$+"           GROUP BY ops.Firm_ID,ops.WO_Location,ops.WO_No"+$0a$
	sqlprep$=sqlprep$+"          ) AS operReq"+$0a$
	sqlprep$=sqlprep$+"       ON wo.Firm_ID+wo.WO_Location+wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"        = operReq.Firm_ID+operReq.WO_Location+operReq.WO_No"+$0a$
	sqlprep$=sqlprep$+"LEFT JOIN (SELECT mats.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"                 ,mats.WO_Location"+$0a$
	sqlprep$=sqlprep$+"                 ,mats.WO_No"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(mats.Total_Cost) AS Tot_STD_Mat_Cost"+$0a$
	sqlprep$=sqlprep$+"           FROM SFE_WOMatl AS mats"+$0a$
	sqlprep$=sqlprep$+"           GROUP BY mats.Firm_ID,mats.WO_Location,mats.WO_No"+$0a$
	sqlprep$=sqlprep$+"          ) AS matReq"+$0a$
	sqlprep$=sqlprep$+"       ON wo.Firm_ID+wo.WO_Location+wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"        = matReq.Firm_ID+matReq.WO_Location+matReq.WO_No"+$0a$
	sqlprep$=sqlprep$+"LEFT JOIN (SELECT subs.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"                 ,subs.WO_Location"+$0a$
	sqlprep$=sqlprep$+"                 ,subs.WO_No"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(subs.Total_Cost) AS Tot_STD_Sub_Cost"+$0a$
	sqlprep$=sqlprep$+"           FROM SFE_WOSubcnt AS subs"+$0a$
	sqlprep$=sqlprep$+"           GROUP BY  subs.Firm_ID,subs.WO_Location,subs.WO_No"+$0a$
	sqlprep$=sqlprep$+"          ) AS subReq"+$0a$
	sqlprep$=sqlprep$+"       ON wo.Firm_ID+wo.WO_Location+wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"        = subReq.Firm_ID+subReq.WO_Location+subReq.WO_No"+$0a$

    gosub create_sproc_def	
	
	rem --- SF_COSTSUMS_ACTO (Accums Ops, Dir, Ovh, Mat and Sub Actual costs of Open Trans by WO)	
    rem --- Can replace v6 logic of looping through sft-01, sft-21, sft-31 to accum total Open Trans costs
	rem --- Originally written for Closed WO Detail Report
	sproc_vw_name$="SF_COSTSUMS_ACTO"
	sqlprep$="CREATE VIEW SF_COSTSUMS_ACTO AS "
    sqlprep$=sqlprep$+"SELECT wo.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,wo.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,operAct.Tot_ACT_Ops_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,operAct.Tot_ACT_Dir_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,operAct.Tot_ACT_Ovh_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,matAct.Tot_ACT_Mat_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,subAct.Tot_ACT_Sub_Cost"+$0a$
	sqlprep$=sqlprep$+"FROM SFE_WOMASTR AS wo"+$0a$
	sqlprep$=sqlprep$+"LEFT JOIN (SELECT ops.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"                 ,ops.WO_Location"+$0a$
	sqlprep$=sqlprep$+"                 ,ops.WO_No"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(ops.Ext_Cost) AS Tot_ACT_Ops_Cost"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(ops.Units * ops.Direct_Rate) AS Tot_ACT_Dir_Cost"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(ops.Ext_Cost-(ops.Units * ops.Direct_Rate)) AS Tot_ACT_Ovh_Cost"+$0a$
	sqlprep$=sqlprep$+"           FROM SFT_OPNOPRTR AS ops"+$0a$
	sqlprep$=sqlprep$+"           GROUP BY ops.Firm_ID,ops.WO_Location,ops.WO_No"+$0a$
	sqlprep$=sqlprep$+"          ) AS operAct"+$0a$
	sqlprep$=sqlprep$+"       ON wo.Firm_ID+wo.WO_Location+wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"        = operAct.Firm_ID+operAct.WO_Location+operAct.WO_No"+$0a$
	sqlprep$=sqlprep$+"LEFT JOIN (SELECT mats.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"                 ,mats.WO_Location "+$0a$
	sqlprep$=sqlprep$+"                 ,mats.WO_No"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(mats.Ext_Cost) AS Tot_ACT_Mat_Cost"+$0a$
	sqlprep$=sqlprep$+"           FROM SFT_OPNMATTR AS mats"+$0a$
	sqlprep$=sqlprep$+"           GROUP BY mats.Firm_ID,mats.WO_Location,mats.WO_No"+$0a$
	sqlprep$=sqlprep$+"          ) AS matAct"+$0a$
	sqlprep$=sqlprep$+"       ON wo.Firm_ID+wo.WO_Location+wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"        = matAct.Firm_ID+matAct.WO_Location+matAct.WO_No"+$0a$
	sqlprep$=sqlprep$+"LEFT JOIN (SELECT subs.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"                 ,subs.WO_Location"+$0a$
	sqlprep$=sqlprep$+"                 ,subs.WO_No"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(subs.Ext_Cost) AS Tot_ACT_Sub_Cost"+$0a$
	sqlprep$=sqlprep$+"           FROM SFT_OPNSUBTR AS subs"+$0a$
	sqlprep$=sqlprep$+"           GROUP BY  subs.Firm_ID,subs.WO_Location,subs.WO_No"+$0a$
	sqlprep$=sqlprep$+"          ) AS subAct"+$0a$
	sqlprep$=sqlprep$+"       ON wo.Firm_ID+wo.WO_Location+wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"        = subAct.Firm_ID+subAct.WO_Location+subAct.WO_No"+$0a$

    gosub create_sproc_def	
	
	rem --- SF_COSTSUMS_ACTC (Accums Ops, Dir, Ovh, Mat and Sub Actual costs of Closed Trans by WO)
    rem --- Can replace v6 logic of looping through sft-03, sft-23, sft-33 to accum total Closed Trans costs
	rem --- Originally written for Closed WO Detail Report
	sproc_vw_name$="SF_COSTSUMS_ACTC"
	sqlprep$="CREATE VIEW SF_COSTSUMS_ACTC AS "
    sqlprep$=sqlprep$+"SELECT wo.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,wo.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,operAct.Tot_ACT_Ops_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,operAct.Tot_ACT_Dir_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,operAct.Tot_ACT_Ovh_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,matAct.Tot_ACT_Mat_Cost"+$0a$
	sqlprep$=sqlprep$+"      ,subAct.Tot_ACT_Sub_Cost"+$0a$
	sqlprep$=sqlprep$+"FROM SFE_WOMASTR AS wo"+$0a$
	sqlprep$=sqlprep$+"LEFT JOIN (SELECT ops.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"                 ,ops.WO_Location"+$0a$
	sqlprep$=sqlprep$+"                 ,ops.WO_No"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(ops.Ext_Cost) AS Tot_ACT_Ops_Cost"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(ops.Units * ops.Direct_Rate) AS Tot_ACT_Dir_Cost"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(ops.Ext_Cost-(ops.Units * ops.Direct_Rate)) AS Tot_ACT_Ovh_Cost"+$0a$
	sqlprep$=sqlprep$+"           FROM SFT_CLSOPRTR AS ops"+$0a$
	sqlprep$=sqlprep$+"           GROUP BY ops.Firm_ID,ops.WO_Location,ops.WO_No"+$0a$
	sqlprep$=sqlprep$+"          ) AS operAct"+$0a$
	sqlprep$=sqlprep$+"       ON wo.Firm_ID+wo.WO_Location+wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"        = operAct.Firm_ID+operAct.WO_Location+operAct.WO_No"+$0a$
	sqlprep$=sqlprep$+"LEFT JOIN (SELECT mats.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"                 ,mats.WO_Location "+$0a$
	sqlprep$=sqlprep$+"                 ,mats.WO_No"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(mats.Ext_Cost) AS Tot_ACT_Mat_Cost"+$0a$
	sqlprep$=sqlprep$+"           FROM SFT_CLSMATTR AS mats"+$0a$
	sqlprep$=sqlprep$+"           GROUP BY mats.Firm_ID,mats.WO_Location,mats.WO_No"+$0a$
	sqlprep$=sqlprep$+"          ) AS matAct"+$0a$
	sqlprep$=sqlprep$+"       ON wo.Firm_ID+wo.WO_Location+wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"        = matAct.Firm_ID+matAct.WO_Location+matAct.WO_No"+$0a$
	sqlprep$=sqlprep$+"LEFT JOIN (SELECT subs.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"                 ,subs.WO_Location"+$0a$
	sqlprep$=sqlprep$+"                 ,subs.WO_No"+$0a$
	sqlprep$=sqlprep$+"                 ,SUM(subs.Ext_Cost) AS Tot_ACT_Sub_Cost"+$0a$
	sqlprep$=sqlprep$+"           FROM SFT_CLSSUBTR AS subs"+$0a$
	sqlprep$=sqlprep$+"           GROUP BY  subs.Firm_ID,subs.WO_Location,subs.WO_No"+$0a$
	sqlprep$=sqlprep$+"          ) AS subAct"+$0a$
	sqlprep$=sqlprep$+"       ON wo.Firm_ID+wo.WO_Location+wo.WO_No"+$0a$
	sqlprep$=sqlprep$+"        = subAct.Firm_ID+subAct.WO_Location+subAct.WO_No"+$0a$

    gosub create_sproc_def	
	
	rem --- SF_WO_REQ_VALS   (Returns Standards/Requirements data for Closed Ops, Mats, and Subs)
    rem --- Can replace v6 logic of looping through sfe-02, sfe-22, sfe-32 to gather Requirements data
	rem --- Useful for 
	rem ---		1) Grabbing all requirements(stds) lines for a WO
	rem ---		2) Accumulating costs (in conjuction w/add'l query)
	rem --- NOTE: The result set may be quite large, so recommend using as part of another query that
	rem           would limit the records returned 
	rem          (e.g. SELECT * FROM SF_WO_REQ_VALS WHERE Firm_ID+WO_Location+WO_No = firm$+'  '+wonum$)
	rem --- Originally written for Closed WO Detail Report
	sproc_vw_name$="SF_WO_REQ_VALS"
	sqlprep$="CREATE VIEW SF_WO_REQ_VALS AS "
    sqlprep$=sqlprep$+"SELECT Ops.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,Ops.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,Ops.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,Ops.Op_Seq AS Seq_Ref"+$0a$
	sqlprep$=sqlprep$+"      ,'O' AS Record_ID"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Warehouse_ID"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Item_ID"+$0a$
	sqlprep$=sqlprep$+"      ,Ops.Runtime_Hrs AS Units"+$0a$
	sqlprep$=sqlprep$+"      ,Ops.Unit_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,Ops.Total_Time AS Total_Units"+$0a$
    sqlprep$=sqlprep$+"      ,Ops.Tot_Std_Cost AS Total_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,Ops.Direct_Rate "+$0a$
    sqlprep$=sqlprep$+"      ,Ops.Ovhd_Rate"+$0a$
	sqlprep$=sqlprep$+"FROM SFE_WOOprtn AS Ops"+$0a$
	sqlprep$=sqlprep$+"  UNION "
    sqlprep$=sqlprep$+"SELECT Mat.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,Mat.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,Mat.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,Mat.Material_Seq AS Seq_Ref"+$0a$
	sqlprep$=sqlprep$+"      ,'M' AS Record_ID"+$0a$
	sqlprep$=sqlprep$+"      ,Mat.Warehouse_ID AS Warehouse_ID"+$0a$
	sqlprep$=sqlprep$+"      ,Mat.Item_ID AS Item_ID"+$0a$
	sqlprep$=sqlprep$+"      ,Mat.Units AS Units"+$0a$
	sqlprep$=sqlprep$+"      ,Mat.Unit_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,Mat.Total_Units AS Total_Units"+$0a$
    sqlprep$=sqlprep$+"      ,Mat.Total_Cost AS Total_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS Direct_Rate "+$0a$
    sqlprep$=sqlprep$+"      ,0 AS Ovhd_Rate"+$0a$
	sqlprep$=sqlprep$+"FROM SFE_WOMatl AS Mat"+$0a$
	sqlprep$=sqlprep$+"  UNION "
    sqlprep$=sqlprep$+"SELECT Sub.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,Sub.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,Sub.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,Sub.SubCont_Seq AS Seq_Ref"+$0a$
	sqlprep$=sqlprep$+"      ,'S' AS Record_ID"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Warehouse_ID"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Item_ID"+$0a$
	sqlprep$=sqlprep$+"      ,Sub.Units AS Units"+$0a$
	sqlprep$=sqlprep$+"      ,Sub.Unit_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,Sub.Total_Units AS Total_Units"+$0a$
    sqlprep$=sqlprep$+"      ,Sub.Total_Cost AS Total_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS Direct_Rate"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS Ovhd_Rate"+$0a$
	sqlprep$=sqlprep$+"FROM SFE_WOSubcnt AS Sub"+$0a$	

    gosub create_sproc_def


	rem --- SF_OPNTRAN_VALS  (Returns Open Transactions for Ops, Mats, and Subs)
    rem --- Can replace v6 logic of looping through sft-01, sft-21, sft-31 to gather Open Transaction data
	rem --- Useful for 
	rem ---		1) Grabbing all Open Trans w/o the v6 looping logic
	rem ---		2) Accumulating costs (in conjuction w/add'l query)
	rem --- NOTE: The result set may be quite large, so recommend using as part of another query that
	rem           would limit the records returned 
	rem          (e.g. SELECT * FROM SF_OPNTRAN_VALS WHERE Firm_ID+WO_Location+WO_No = firm$+'  '+wonum$)
	rem --- Originally written for Closed WO Detail Report
	sproc_vw_name$="SF_OPNTRAN_VALS"
	sqlprep$="CREATE VIEW SF_OPNTRAN_VALS AS "
	sqlprep$=sqlprep$+"SELECT oOps.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,oOps.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,oOps.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,oOps.trans_date"+$0a$
    sqlprep$=sqlprep$+"      ,'OpenOprs' AS Trans_Type"+$0a$
    sqlprep$=sqlprep$+"      ,'O' AS Record_ID"+$0a$
    sqlprep$=sqlprep$+"      ,oOps.trans_seq "+$0a$
	sqlprep$=sqlprep$+"      ,oOps.oper_seq_ref AS Seq_Ref"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Warehouse_ID"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Item_ID"+$0a$
	sqlprep$=sqlprep$+"      ,oOps.units"+$0a$
	sqlprep$=sqlprep$+"      ,oOps.Unit_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,oOps.ext_cost"+$0a$
    sqlprep$=sqlprep$+"      ,oOps.direct_rate"+$0a$
    sqlprep$=sqlprep$+"      ,oOps.ovhd_rate "+$0a$
	sqlprep$=sqlprep$+"FROM SFT_OPNOPRTR AS oOps"+$0a$
	sqlprep$=sqlprep$+"  UNION "
    sqlprep$=sqlprep$+"SELECT oMats.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,oMats.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,oMats.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,oMats.trans_date"+$0a$
	sqlprep$=sqlprep$+"      ,'OpenMats' AS Trans_Type"+$0a$
	sqlprep$=sqlprep$+"      ,'M' AS Record_ID"+$0a$
	sqlprep$=sqlprep$+"      ,oMats.trans_seq "+$0a$
	sqlprep$=sqlprep$+"      ,oMats.material_seq_ref AS Seq_Ref"+$0a$
	sqlprep$=sqlprep$+"      ,oMats.Warehouse_ID AS Warehouse_ID"+$0a$
	sqlprep$=sqlprep$+"      ,oMats.Item_ID AS Item_ID"+$0a$
	sqlprep$=sqlprep$+"      ,oMats.Units"+$0a$
	sqlprep$=sqlprep$+"      ,oMats.Unit_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,oMats.ext_cost"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS direct_rate"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS ovhd_rate"+$0a$
	sqlprep$=sqlprep$+"FROM SFT_OPNMATTR AS oMats"+$0a$
	sqlprep$=sqlprep$+"  UNION "
    sqlprep$=sqlprep$+"SELECT oSubs.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,oSubs.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,oSubs.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,oSubs.trans_date"+$0a$
	sqlprep$=sqlprep$+"      ,'OpenSubs' AS Trans_Type"+$0a$
	sqlprep$=sqlprep$+"      ,'S' AS Record_ID"+$0a$
	sqlprep$=sqlprep$+"      ,oSubs.trans_seq "+$0a$
	sqlprep$=sqlprep$+"      ,oSubs.subcont_seq_ref AS Seq_Ref"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Warehouse_ID"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Item_ID"+$0a$
	sqlprep$=sqlprep$+"      ,oSubs.Units"+$0a$
	sqlprep$=sqlprep$+"      ,oSubs.Unit_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,oSubs.ext_cost"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS direct_rate"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS ovhd_rate"+$0a$
	sqlprep$=sqlprep$+"FROM SFT_OPNSUBTR AS oSubs"+$0a$	

    gosub create_sproc_def
	
	rem --- SF_CLSDTRAN_VALS (Returns Closed Transactions for Ops, Mats, and Subs)
	rem --- Can replace v6 logic of looping through sft-03, sft-23, sft-33 to gather Closed Transaction data
	rem --- Useful for 
	rem ---		1) Grabbing all Closed Trans w/o the v6 looping logic
	rem ---		2) Accumulating costs (in conjuction w/add'l query)
	rem --- NOTE: The result set may be quite large, so recommend using as part of another query that
	rem           would limit the records returned 
	rem          (e.g. SELECT * FROM SF_CLSDTRAN_VALS WHERE Firm_ID+WO_Location+WO_No = firm$+'  '+wonum$)
	rem --- Originally written for Closed WO Detail Report
	sproc_vw_name$="SF_CLSDTRAN_VALS"
	sqlprep$="CREATE VIEW SF_CLSDTRAN_VALS AS "
    sqlprep$=sqlprep$+"SELECT cOps.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,cOps.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,cOps.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,cOps.trans_date"+$0a$
    sqlprep$=sqlprep$+"      ,'ClosedOprs' AS Trans_Type"+$0a$
    sqlprep$=sqlprep$+"      ,'O' AS Record_ID"+$0a$
    sqlprep$=sqlprep$+"      ,cOps.trans_seq "+$0a$
	sqlprep$=sqlprep$+"      ,cOps.oper_seq_ref AS Seq_Ref"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Warehouse_ID"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Item_ID"+$0a$
	sqlprep$=sqlprep$+"      ,cOps.units"+$0a$
	sqlprep$=sqlprep$+"      ,cOps.Unit_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,cOps.ext_cost"+$0a$
    sqlprep$=sqlprep$+"      ,cOps.direct_rate"+$0a$
    sqlprep$=sqlprep$+"      ,cOps.ovhd_rate "+$0a$
	sqlprep$=sqlprep$+"FROM SFT_CLSOPRTR AS cOps"+$0a$
	sqlprep$=sqlprep$+"  UNION "
    sqlprep$=sqlprep$+"SELECT cMats.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,cMats.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,cMats.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,cMats.trans_date"+$0a$
	sqlprep$=sqlprep$+"      ,'ClosedMats' AS Trans_Type"+$0a$
	sqlprep$=sqlprep$+"      ,'M' AS Record_ID"+$0a$
	sqlprep$=sqlprep$+"      ,cMats.trans_seq "+$0a$
	sqlprep$=sqlprep$+"      ,cMats.material_seq_ref AS Seq_Ref"+$0a$
	sqlprep$=sqlprep$+"      ,cMats.Warehouse_ID AS Warehouse_ID"+$0a$
	sqlprep$=sqlprep$+"      ,cMats.Item_ID AS Item_ID"+$0a$
	sqlprep$=sqlprep$+"      ,cMats.Units"+$0a$
	sqlprep$=sqlprep$+"      ,cMats.Unit_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,cMats.ext_cost"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS direct_rate"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS ovhd_rate"+$0a$
	sqlprep$=sqlprep$+"FROM SFT_CLSMATTR AS cMats"+$0a$
	sqlprep$=sqlprep$+"  UNION "
    sqlprep$=sqlprep$+"SELECT cSubs.Firm_ID"+$0a$
	sqlprep$=sqlprep$+"      ,cSubs.WO_Location"+$0a$
	sqlprep$=sqlprep$+"      ,cSubs.WO_No"+$0a$
	sqlprep$=sqlprep$+"      ,cSubs.trans_date"+$0a$
	sqlprep$=sqlprep$+"      ,'ClosedSubs' AS Trans_Type"+$0a$
	sqlprep$=sqlprep$+"      ,'S' AS Record_ID"+$0a$
	sqlprep$=sqlprep$+"      ,cSubs.trans_seq "+$0a$
	sqlprep$=sqlprep$+"      ,cSubs.subcont_seq_ref AS Seq_Ref"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Warehouse_ID"+$0a$
	sqlprep$=sqlprep$+"      ,'' AS Item_ID"+$0a$
	sqlprep$=sqlprep$+"      ,cSubs.Units"+$0a$
	sqlprep$=sqlprep$+"      ,cSubs.Unit_Cost"+$0a$
    sqlprep$=sqlprep$+"      ,cSubs.ext_cost"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS direct_rate"+$0a$
    sqlprep$=sqlprep$+"      ,0 AS ovhd_rate"+$0a$
	sqlprep$=sqlprep$+"FROM SFT_CLSSUBTR AS cSubs"+$0a$	

    gosub create_sproc_def
	
done:

sqlclose(chan)

update_status:rem --- Update AutoLaunch Status

    extractrecord(ads_autolaunch,key="BUILDSPROC")ads_autolaunch$; rem Advisory Locking
    ads_autolaunch.process_status$="C"
    ads_autolaunch.trans_date$=date(0:"%Yl%Mz%Dz")
    ads_autolaunch.trans_time$=date(0:"%Hz%mz%sz")
    ads_autolaunch$=field(ads_autolaunch$)
    writerecord(ads_autolaunch)ads_autolaunch$

goto std_exit

create_sproc_def:rem --- Create SPROC definitions

	errored_sqlverb$=""
	prep_err=0
	exec_err=0
	
    SQLPREP(chan,err=err_sqlprep) sqlprep$
    SQLEXEC(chan,err=err_sqlexec)
    curr_rec=curr_rec+1
    if mod(curr_rec,milestone)=0
		progress!.setValue("+process_task",task_val$+"^U^"+str(curr_rec)+"^")
    endif
	
	rem Conditionally end processing if PREP or EXEC have errors
	if errored_sqlverb$<>""	
		err_sqlprep:	
			prep_err=1
			errored_sqlverb$="SQLPREP()"

		err_sqlexec:
			if errored_sqlverb$=""
				exec_err=1
				if abort_on_exec_err then errored_sqlverb$="SQLEXEC()"
			endif
			
		if prep_err OR (exec_err AND abort_on_exec_err)		   
			error_text$="Unknown error message"
			error_text$=SQLERR(chan,err=*next)
			
			msg_id$="AD_SQL_CREATE_ERROR"
			dim msg_tokens$[4]
				msg_tokens$[1]=errored_sqlverb$
				msg_tokens$[2]=sql_action$
				msg_tokens$[3]=sproc_vw_name$
				msg_tokens$[4]=error_text$			
			gosub disp_message
			goto std_exit
		endif
	endif

return

open_tables:rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto exit_prog
    endif

    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),err_text$,err_act$
    if pos("EXIT"=err_act$) goto std_error_exit
    if pos("ESCAPE"=err_act$) seterr 0;setesc 0
    if pos("RETRY"=err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release


rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    if errored_sqlverb$="" 
		if pos("SPROC_UPDT"=sysinfo.menu_option_id$)<>0
			msg_id$="AD_SPROC_UPDT"
			gosub disp_message;rem only display message if running stand-alone
		endif
    endif
    
    progress!.setValue("+process_task",task_val$+"^D^")
    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
	release

rem #endinclude std_end.src

    end

