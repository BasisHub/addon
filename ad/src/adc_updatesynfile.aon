rem ==========================================================================
rem --- adc_updatesynfile.aon 
rem --- Call to updates addon.syn file in new install location for upgrades.
rem --- 
rem --- AddonSoftware Version 10.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
rem ==========================================================================


rem --- UPDATESYNFILE$ : Absolute path to the addon.syn file being updated (Input)
rem --- OLDSYNFILE$    : Absolute path to the old addon.syn file (Input)
rem --- UPGRADE%       : 0=Not an upgrade so don't merge with old syn/1=Upgrade so merge with old syn (Input)
rem --- STBLMAP!     : HashMap of ArrayLists keyed by SYSSTBL/STBLs from current syn file (Input)
rem ---              :     ArrayList (0) = current (source) value of SYSSTBL/STBL
rem ---              :     ArrayList (1) = new (target) value of SYSSTBL/STBL
rem --- PFXLIST!     : ArrayList (order is important) of ArrayLists of SYSPFX/PREFIXs from current syn file (Input)
rem ---              :     ArrayList (0) = current (source) value of SYSPFX/PREFIX
rem ---              :     ArrayList (1) = new (target) value of SYSPFX/PREFIX
rem --- RDFORM!        : Parent BBjTopLevelWindow object, the form (Input)
rem --- WAIT4OK%       : Wait for user's OK when done, 0=don't wait/1=wait (Input)
rem --- STATUS         : Status code/0=No error (Returned)

    use java.io.File
    use java.util.ArrayList
    use java.util.HashMap
    use ::bbtranslator.bbj::BBTranslator
    use ::ado_file.src::FileObject

    declare ArrayList pfxList!
    declare ArrayList aList!
    declare HashMap stblMap!
    declare HashMap pfxSourceMap!
    declare HashMap pfxTargetMap!
    declare java.util.Set keys!
    declare java.util.Iterator iter!

    seterr std_error
    setesc std_error
    enter updateSynFile$,oldSynFile$,upgrade%,stblMap!,pfxList!,rdForm!,wait4ok%,status

rem --- Initializations
    status=0
    BLOCKSIZE=2^20
    dir_syp$=stbl("+DIR_SYP")
    sysGUI! = BBjAPI().getSysGui()

rem --- Build pfxSourceMap! and pfxTargetMap! HashMaps from pfxList! ArrayList
	pfxTargetMap! = new HashMap()
	pfxSourceMap! = new HashMap()
	iter!=pfxList!.iterator()
	while iter!.hasNext()
		aList! = cast(ArrayList, iter!.next())
		source$=cast(BBjString, aList!.get(0))
		target$=cast(BBjString, aList!.get(1))
		pfxTargetMap!.put(target$, source$)
		sourceFile! = new File(source$)
		pfxSourceMap!.put(sourceFile!.getAbsolutePath(), target$)
	wend
    
rem --- Start progress meter
    declare BBTranslator Translate!
    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif
    meter_title$=Translate!.getTranslation("AON_UPDATING")+"..."
    meter_total_recs=10
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    if wait4ok% then meter_action$=meter_action$+"-OK"
    gosub disp_meter
    
rem --- Flip directory path separators
    filePath$=updateSynFile$
    gosub fix_path
    updateSynFile$=filePath$

    filePath$=oldSynFile$
    gosub fix_path
    oldSynFile$=filePath$

rem --- Get aon directory location from addon.syn file
	aonDir$=updateSynFile$(1, pos("/config/"=updateSynFile$,-1)-1)
    
rem --- Open log file
    location$ = aonDir$
    gosub open_log
    
rem --- Get new version from addon.syn file
    synVersion$ = "0000"
    synFilePath$ = updateSynFile$
    gosub get_syn_version
    newVersion$ = "_v"+synVersion$

rem --- Rename addon.syn to addon_vnnnn.syn, and update paths
    
    rem --- insure unique file name for addon_vnnnn.syn
    oldName$=updateSynFile$(pos("/"=updateSynFile$,-1)+1)
    if pos(".syn"=oldName$) then oldName$=oldName$(1,pos(".syn"=oldName$)-1)
    if pos("_v"=oldName$) then oldName$=oldName$(1,pos("_v"=oldName$)-1)
    
    newSynFile$=aonDir$+ "/config/" + oldName$ + newVersion$ + ".syn"
    i=0
    testChan=unt
    while 1
        syn%=0
        bak%=0
        
        if 1
            open(testChan,err=*endif)newSynFile$
            close(testChan)
            syn%=1
        endif
        
        if 1
            rem --- also avoid backup file names
            open(testChan,err=*endif)newSynFile$+".bak"
            close(testChan)
            syn%=1
        endif
        
        if syn% or bak%
            i=i+1
            newSynFile$=aonDir$+ "/config/" + oldName$ + newVersion$ + "_" + str(i) + ".syn"
        else
            break
        endif
    wend
    
    rem --- Increment progress meter
    meter_text$="create: "+newSynFile$
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

	rem --- Initialize search$ and replace$ strings used in update_data_path subroutine 
	rem --- Make sure replacement path has a trailing slash
    replace$ = aonDir$
	if pos(replace$(len(replace$))="/\")=0 then replace$=replace$+"/"

	rem --- Get aon path from DIR and SYSDIR lines.
	rem --- It must be replaced everywhere with current aon path.
    search$ = ""
    sourceChan=unt
    open(sourceChan,isz=-1)updateSynFile$
    while 1
        read(sourceChan,end=*break)record$

        rem --- get path from SYSDIR/DIR line
		key$ = record$(1, pos("="=record$) - 1)
		switch (BBjAPI().TRUE)
			case key$ = "DIR"
			case key$ = "SYSDIR"
				xpos = pos("="=record$)
				search$= cvs(record$(xpos+1),3)
				break
			case default
				rem --- other lines ... skip
				break
		swend
		if search$<>"" then break
    wend
    close(sourceChan)
	if search$="" then search$="../apps/aon/"; rem --- make sure search$ isn't blank

    rem --- copy addon.syn file to addon_vnnnn.syn (where nnnn=new version)
    open(sourceChan,isz=-1)updateSynFile$
    targetChan=unt
    open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")newSynFile$
    while 1
        read(sourceChan,end=*break)record$
		
		gosub update_data_path
        
        write(targetChan)record$
        print(log_dev)record$
    wend
    close(sourceChan)
    close(targetChan)

    rem --- Increment progress meter
    meter_text$="backup: "+updateSynFile$
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$

    rem --- rename original addon.syn now that we're done with it, save as a backup
	erase updateSynFile$ + ".bak", err=*next
    rename updateSynFile$ to updateSynFile$ + ".bak", err=*next

rem --- For upgrades, merge old .syn file into new addon_vnnnn.syn
    if(upgrade%) then

        rem --- Increment progress meter
        meter_text$="read: "+oldSynFile$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)
        print(log_dev)meter_text$

		rem --- Initialize search$ and replace$ strings used in update_data_path subroutine 
		rem --- Make sure replacement path has a trailing slash
		replace$ = aonDir$
		if pos(replace$(len(replace$))="/\")=0 then replace$=replace$+"/"

		rem --- Get aon path from DIR and SYSDIR lines.
		rem --- It must be replaced everywhere with current aon path.
		search$ = ""
		sourceChan=unt
		open(sourceChan,isz=-1)oldSynFile$
		while 1
			read(sourceChan,end=*break)record$

			rem --- get path from SYSDIR/DIR line
			key$ = record$(1, pos("="=record$) - 1)
			switch (BBjAPI().TRUE)
				case key$ = "DIR"
				case key$ = "SYSDIR"
					xpos = pos("="=record$)
					search$= cvs(record$(xpos+1),3)
					break
				case default
					rem --- other lines ... skip
					break
			swend
			if search$<>"" then break
		wend
		close(sourceChan)
		if search$="" then search$="../apps/aon/"; rem --- make sure search$ isn't blank
        
        rem --- put old .syn records into a HashMap of ArrayLists
rem        use java.util.ArrayList
        declare ArrayList oldList!
        declare HashMap oldMap!
        oldMap! = new HashMap()
        oldChan=unt
        open(oldChan,isz=-1)oldSynFile$
        while 1
            read(oldChan,end=*break)record$
            if(pos("="=record$)) then
                key$ = record$(1, pos("="=record$) - 1)
				
				gosub update_data_path
				
				rem --- add to HashMap
                if(oldMap!.containsKey(key$)) then
                    oldList! = cast(ArrayList, oldMap!.get(key$))
                    oldList!.add(record$)
                else
                    oldList! = new ArrayList()
                    oldList!.add(record$)
                    oldMap!.put(key$, oldList!)
                endif
            endif
        wend
        close(oldChan)

        rem --- Increment progress meter
        meter_text$="read: "+newSynFile$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- put new addon_vnnn.syn records in an ArrayList
        declare ArrayList newList!
        newList! = new ArrayList()
        newChan=unt
        open(newChan,isz=-1)newSynFile$
        while 1
            read(newChan,end=*break)record$
            newList!.add(record$)
        wend
        close(newChan)

        rem --- Increment progress meter
        meter_text$="merge files"
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
        
        rem --- drop unwanted lines from old .syn HashMap and new addon_vnnn.syn ArrayList
        for i=0 to newList!.size()-1
            newRec$ = cast(BBjString, newList!.get(i))
            if(pos("="=newRec$)) then
                key$ = newRec$(1, pos("="=newRec$) - 1)
				gosub get_old_key
                if(oldKey$<>"") then
					key$ = oldKey$
                    oldList! = cast(ArrayList, oldMap!.get(key$))

                    switch (BBjAPI().TRUE)
                        case key$ = "ACOMP"
                        case key$ = "DIR"
                        case key$ = "MENU"
                        case key$ = "SYS"
                        case key$ = "SYSCOMP"
                        case key$ = "SYSCOPY"
                        case key$ = "SYSDESC"
                        case key$ = "SYSDIR"
                        case key$ = "SYSID"
                        case key$ = "SYSMENU"
                        case key$ = "SYSPAR"
                            rem --- drop line from old List
                            oldList! = new ArrayList()
                            oldMap!.put(key$, oldList!)
                            print(log_dev)"drop old "+key$+" line"
                            break
                        case key$ = "APROD"
                        case key$ = "SYSAPP"
                            rem --- if new APROD or SYSAPP line exists in old List, drop it from old List
							xpos = pos("="=newRec$)
                            newKey$ = newRec$(xpos + 1, pos(";"=newRec$(xpos + 1)) - 1)
							if oldList!.size() = 0 then break
                            for j=0 to oldList!.size()-1
                                oldRec$ = cast(BBjString, oldList!.get(j))
								if oldRec$="" then continue
								ypos = pos("="=oldRec$)
                                oldKey$ = oldRec$(ypos + 1, pos(";"=oldRec$(ypos + 1)) - 1)
                                if(oldKey$ = newKey$) then
                                    oldList!.set(j, ""); rem - can't remove while looping over the list
                                    print(log_dev)"drop old SYSAPP/APROD line: "+oldKey$
                                    rem --- oldKey$ may appear more than once, so don't break
                                endif
                            next j
                            break
                        case key$ = "STBL"
                        case key$ = "SYSSTBL"
                            rem --- if new STBL or SYSSTBL line exists in old List, drop it from old List
                            xpos = pos(" "=newRec$)
                            newKey$ = newRec$(xpos + 1, pos("="=newRec$(xpos + 1)) - 1)
							if oldList!.size() = 0 then break
                            for j=0 to oldList!.size()-1
                                oldRec$ = cast(BBjString, oldList!.get(j))
								if oldRec$="" then continue
                                xpos = pos(" "=oldRec$)
                                oldKey$ = oldRec$(xpos + 1, pos("="=oldRec$(xpos + 1)) - 1)
                                if(oldKey$ = newKey$) then
                                    oldList!.set(j, ""); rem - can't remove while looping over the list
                                    print(log_dev)"drop old SYSSTBL/STBL line: "+oldKey$
                                    rem --- oldKey$ may appear more than once, so don't break
                                endif
                            next j
                            break
                        case key$ = "PREFIX"
                        case key$ = "SYSPFX"
                            rem --- if new PREFIX or SYSPFX line exists in old List, drop it from old List
                            newKey$ = cvs(newRec$(pos("="=newRec$)+1),3)
							if oldList!.size() = 0 then break
                            for j=0 to oldList!.size()-1
                                oldRec$ = cast(BBjString, oldList!.get(j))
								if oldRec$="" then continue
                                oldKey$ = cvs(oldRec$(pos("="=oldRec$)+1),3)
                                if(oldKey$ = newKey$) then
                                    oldList!.set(j, ""); rem - can't remove while looping over the list
									source$ = cast(BBjString, pfxTargetMap!.get(oldKey$))
                                    print(log_dev)"drop old SYSPFX/PREFIX line: "+source$
                                    rem --- oldKey$ may appear more than once, so don't break
                                endif
                            next j
                            break
                        case key$ = "CFG"
                        case key$ = "SYSCFG"
                            rem --- if new CFG or SYSCFG line exists in old List, drop it from old List
							xpos = pos("="=newRec$)
                            newKey$ = newRec$(xpos + 1, pos("="=newRec$(xpos + 1)) - 1)
							if oldList!.size() = 0 then break
                            for j=0 to oldList!.size()-1
                                oldRec$ = cast(BBjString, oldList!.get(j))
								if oldRec$="" then continue
								ypos = pos("="=oldRec$)
                                oldKey$ = oldRec$(ypos + 1, pos("="=oldRec$(ypos + 1)) - 1)
                                if(oldKey$ = newKey$) then
                                    oldList!.set(j, ""); rem - can't remove while looping over the list
                                    print(log_dev)"drop old SYSCFG/CFG line: "+oldKey$
                                    rem --- oldKey$ may appear more than once, so don't break
                                endif
                            next j
                            break
                        case key$ = "LANG"
                        case key$ = "SYSLANG"
                            rem --- if new LANG or SYSLANG line exists in old List, drop it from old List
                            newKey$ = cvs(newRec$(pos("="=newRec$) + 1),3)
							if oldList!.size() = 0 then break
                            for j=0 to oldList!.size()-1
                                oldRec$ = cast(BBjString, oldList!.get(j))
								if oldRec$="" then continue
                                oldKey$ = cvs(oldRec$(pos("="=oldRec$) + 1),3)
                                if(oldKey$ = newKey$) then
                                    oldList!.set(j, ""); rem - can't remove while looping over the list
                                    print(log_dev)"drop old SYSLANG/LANG line: "+oldKey$
                                    rem --- oldKey$ may appear more than once, so don't break
                                endif
                            next j
                            break
                        case key$ = "DEVICE"
                        case key$ = "SYSDEVICE"
						rem --- if new DEVICE or SYSDEVICE line exists in old List, drop it from NEW List
							xpos = pos(" "=newRec$)
                            newKey$ = newRec$(xpos + 1, pos(" "=newRec$(xpos + 1)) - 1)
							if oldList!.size() = 0 then break
                            for j=0 to oldList!.size()-1
                                oldRec$ = cast(BBjString, oldList!.get(j))
								ypos = pos(" "=oldRec$)
                                oldKey$ = oldRec$(ypos + 1, pos(" "=oldRec$(ypos + 1)) - 1)
                                if(oldKey$ = newKey$) then
                                    newList!.set(i, ""); rem - can't remove while looping over the list
                                    print(log_dev)"drop new SYSDEVICE/DEVICE line: "+newKey$
                                    break
                                endif
                            next j
                            break
                        case default
                            rem --- other lines ... skip
                            break
                    swend                    
                    
                else
                    rem --- this addon_vnnn.syn line does not exist old in .syn, so leave it as-is
                endif
            endif
        next i
        
        rem --- copy remaining old .syn HashMap lines to new addon_vnnn.syn ArrayList
        declare java.util.Set keys!
        keys! = oldMap!.keySet()
        declare java.util.Iterator iter!
        iter! = keys!.iterator()
        while(iter!.hasNext())
            key$ = cast(BBjString, iter!.next())
            oldList! = cast(ArrayList, oldMap!.get(key$))
            rem --- insert old list in front of similar lines in new list
            inserted = 0
			if oldList!.size() > 0 then 
				for i=0 to newList!.size()-1
					newRec$ = cast(BBjString, newList!.get(i))
					if(pos("="=newRec$)) then
						newKey$ = newRec$(1, pos("="=newRec$) - 1)
						if(newKey$ = key$) then
							newList!.addAll(i, oldList!)
							inserted = 1
							break
						endif
					endif
				next i
			endif
            rem --- didn't find line in new list, so add it to the end
            if(!inserted) then
                newList!.addAll(oldList!)
            endif
        wend

        rem --- Increment progress meter
        meter_text$="write: "+newSynFile$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)
        print(log_dev)meter_text$
        
        rem --- overwrite addon_vnnn.syn file with new addon_vnnn.syn ArrayList
        newChan=unt
        open(newChan,isz=-1,mode="O_CREATE,O_TRUNC")newSynFile$
        for i=0 to newList!.size()-1
            newRec$ = cast(BBjString, newList!.get(i))
            if(cvs(newRec$,3)="") then
                rem --- skip blank lines
                continue
            endif
            
            write(newChan)newRec$
            print(log_dev)newRec$
        next i
        close(newChan)

    endif

    rem --- Increment progress meter
    meter_text$="rename: "+newSynFile$
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)
    print(log_dev)meter_text$

    rem --- save backup of addon_vnnnn.syn
    open(sourceChan,isz=-1)newSynFile$
    open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")newSynFile$+".bak"
    while 1
        read(sourceChan,siz=BLOCKSIZE,end=*break)record$
        write(targetChan)record$
    wend
    close(sourceChan)
    close(targetChan)

    rem --- rename addon_vnnnn.syn back to original addon.syn
	erase updateSynFile$, err=*next
    rename newSynFile$ to updateSynFile$, err=*next
    
done: rem --- All done
    
    rem --- Stop progress meter
    meter_text$=""
    meter_proc_recs=meter_total_recs
    meter_action$="LST-END"
    gosub disp_meter
    
    print(log_dev)"Updatesyn log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    goto std_exit

fix_path: rem --- Flip directory path separators
    pos=pos("\"=filePath$)
    while pos
        filePath$=filePath$(1, pos-1)+"/"+filePath$(pos+1)
        pos=pos("\"=filePath$)
    wend
    return

get_syn_version: rem --- Get version from VERSION_ID in the ADM_MODULES table
	comp_id$=STBL("+AON_APPCOMPANY")
	prod_id$="AD"

	sql_chan=sqlunt
	sqlopen(sql_chan)stbl("+DBNAME")
	sql_prep$="SELECT version_id FROM adm_modules"
	sql_prep$=sql_prep$+" WHERE asc_comp_id='" + comp_id$ + "' and asc_prod_id='" + prod_id$ + "'"
	sqlprep(sql_chan)sql_prep$
	dim select_tpl$:sqltmpl(sql_chan)
	sqlexec(sql_chan)
	while 1
		select_tpl$=sqlfetch(sql_chan,err=*break) 
		synVersion$=cvs(select_tpl.version_id$,3)
	wend
	sqlclose(sql_chan)

	rem --- Remove decimal point from version
	dotPos = pos("."=synVersion$)
	if(dotPos) then
		synVersion$ = synVersion$(1, dotPos - 1) + synVersion$(dotPos + 1)
	endif
    return

update_data_path: rem --- update data path using stblMap! and pfxSourceMap!
	rem --- replace data paths in specific lines
	key$ = record$(1, pos("="=record$) - 1)
	switch (BBjAPI().TRUE)
		case key$ = "STBL"
		case key$ = "SYSSTBL"
			rem --- replace SYSSTBL/STBL path with new path
			xpos = pos(" "=record$)
			stbl$ = record$(xpos+1, pos("="=record$(xpos+1)) - 1)
			if(stblMap!.containsKey(stbl$)) then
				aList! = cast(ArrayList, stblMap!.get(stbl$))
				target$ = cast(BBjString, aList!.get(1))
				record$ = record$(1, pos("="=record$,1,2)) + target$
			endif
			break
		case key$ = "PREFIX"
		case key$ = "SYSPFX"
			rem --- replace SYSPFX/PREFIX path with new path
			xpos = pos("="=record$)
			path$  = record$(xpos+1)
			currentPath! = new File(path$)
			if pfxSourceMap!.containsKey(currentPath!.getAbsolutePath()) then
				target$ = cast(BBjString, pfxSourceMap!.get(currentPath!.getAbsolutePath()))
				record$ = record$(1, xpos) + target$
			endif
			break
		case key$ = "CFG"
		case key$ = "SYSCFG"
			rem --- replace SYSCFG/CFG path with new path for corresponding STBL
			xpos = pos("="=record$)
			ypos = pos("="=record$,1,2)
			stbl$ = record$(xpos+1, ypos - xpos - 1)
			if(stblMap!.containsKey(stbl$)) then
				aList! = cast(ArrayList, stblMap!.get(stbl$))
				target$=cast(BBjString, aList!.get(1))
				record$ = record$(1, ypos) + target$
			endif
			break
		case default
			rem --- other lines
			rem --- replace DIR paths with aonDir$
			gosub search_replace
			break
	swend
	return
    
search_replace: rem --- Search record$ for search$, and replace with replace$
	rem --- Assumes only one occurrence of search$ per line so don't have 
	rem --- to deal with situation where pos(search$=replace$)>0
	pos = pos(search$=record$)
	if(pos) then
		record$ = record$(1, pos - 1) + replace$ + record$(pos + len(search$))
	endif
    return

	
get_old_key: rem --- Convert key$ from newList! to oldKey$ in oldMap!
	oldKey$=""
	rem --- Check oldMap for key$
	if(oldMap!.containsKey(key$)) then
		oldKey$=key$
	else
		rem --- Didn't find key$ in oldMap, so check the alternate key name
		altKey$=""
		switch (BBjAPI().TRUE)
			case key$ = "ACOMP"
				altKey$="SYSCOMP"
				break
			case key$ = "SYSCOMP"
				altKey$="ACOMP"
				break
			case key$ = "DIR"
				altKey$="SYSDIR"
				break
			case key$ = "SYSDIR"
				altKey$="DIR"
				break
			case key$ = "SYS"
				altKey$="SYSID"
				break
			case key$ = "SYSID"
				altKey$="SYS"
				break
			case key$ = "MENU"
				altKey$="SYSMENU"
				break
			case key$ = "SYSMENU"
				altKey$="MENU"
				break
			case key$ = "APROD"
				altKey$="SYSAPP"
				break
			case key$ = "SYSAPP"
				altKey$="APROD"
				break
			case key$ = "STBL"
				altKey$="SYSSTBL"
				break
			case key$ = "SYSSTBL"
				altKey$="STBL"
				break
			case key$ = "PREFIX"
				altKey$="SYSPFX"
				break
			case key$ = "SYSPFX"
				altKey$="PREFIX"
				break
			case key$ = "CFG"
				altKey$="SYSCFG"
				break
			case key$ = "SYSCFG"
				altKey$="CFG"
				break
			case key$ = "LANG"
				altKey$="SYSLANG"
				break
			case key$ = "SYSLANG"
				altKey$="LANG"
				break
			case key$ = "DEVICE"
				altKey$="SYSDEVICE"
				break
			case key$ = "SYSDEVICE"
				altKey$="DEVICE"
				break
			case default
				break
		swend                    
		if(oldMap!.containsKey(altKey$)) then oldKey$=altKey$
	endif

	return
	
disp_meter:rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

open_log:rem --- Open log file
            
    rem --- create logs directory at location
    filePath$ = location$ + "/logs"
    gosub fix_path
    logDir$ = filePath$
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$ = logDir$+"/updatesyn_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".txt"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
    
    rem --- write log header info
    print(log_dev)"Updatesyn log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)"Update addon.syn file: " + updateSynFile$
    if upgrade%
        print(log_dev)"Merge old addon.syn file."
		print(log_dev)"Old addon.syn file: " + oldSynFile$
    else
        print(log_dev)"Do not merge old addon.syn file."
    endif
	rem --- write STBL info
    keys! = stblMap!.keySet()
    iter! = keys!.iterator()
    while(iter!.hasNext())
        key$ = cast(BBjString, iter!.next())
		aList! = cast(ArrayList, stblMap!.get(key$))
		source$=cast(BBjString, aList!.get(0))
		target$=cast(BBjString, aList!.get(1))
		print(log_dev)"["+key$+"] source="+source$+"  target="+target$
    wend
	rem --- write PREFIX info
	iter!=pfxList!.iterator()
	while iter!.hasNext()
		aList! = cast(ArrayList, iter!.next())
		source$=cast(BBjString, aList!.get(0))
		target$=cast(BBjString, aList!.get(1))
		print(log_dev)"PREFIX source="+source$+"  target="+target$
	wend
    print(log_dev)

    return
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src
    
    end