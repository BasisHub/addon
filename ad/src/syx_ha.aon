rem --- Remove Firm From System
rem --- Program syx_ha v8.0.0 02Jun2008 (syx_ha)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (06/02/2008 04:18:34)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="DDM_TABLES",ids$[1]="DDM_TABLES"
    files$[2]="ADM_MODULES",ids$[2]="ADM_MODULES"
    files$[3]="ADM_FIRMS",ids$[3]="ADM_FIRMS"
    files$[4]="ADM_PROCTABLES",ids$[4]="ADM_PROCTABLES"
    files$[5]="ADM_PROCBATCHES",ids$[5]="ADM_PROCBATCHES"
    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ddm02a_dev=channels[1]
    adm_modules_dev=channels[2]
    adm_firms_dev=channels[3]
    adm_proctables_dev=channels[4]
    adm_procbatches_dev=channels[5]
 
rem --- Dimension string templates

    dim ddm_tables$:templates$[1],adm_modules$:templates$[2],adm_firms$:templates$[3],
:       adm_proctables$:templates$[4],adm_procbatches$:templates$[5]

rem --- Assign form input values to local variables

    system$=Option!.getOptionData("system_id")
    firm_id$=Option!.getOptionData("firm_id")
    confirm$=Option!.getOptionData("confirm")


rem --- Parameters

    firm_id$=sysinfo.firm_id$
 
rem --- Initializations

    adm_firms.company_id$=firm_id$
    confirm$="Y",m1$="###,##0",l0=9,l9=21,channel=0
    more=1

rem --- Retrieve key templates

    call stbl("+DIR_SYP")+"bac_key_template.bbj","ADM_PROCTABLES","PRIMARY",adm_proctables_key_tpl$,rd_table_chans$[all],status$
   
remove_records: rem --- Remove records

        beg_filename$=cvs(adm_modules.system_id$,8); rem lower case the system id
        read (ddm02_dev,key=beg_filename$,dom=*next)

rem --- Top of remove loop
        while more

            k$=key(ddm02_dev,end=*break)
            if pos(beg_filename$=k$)<>1 then break
            read record (ddm02_dev) ddm02a$
            if l>l9 then l=l9
            if pos(ddm_tables.dd_alias_type$="DIMS")=0 then continue

confirm_1: rem --- Confirm?

            numrec=0
            number=0,clear$="Y"
            if confirm$<>"N" then 
                msg_id$="AON_RUN_QUERY"
                dim x$:stbl("+SYSINFO_TPL")
                dim msg_tokens$[1]
                x$=stbl("+SYSINFO")                                                            
                msg_tokens$[1]=x.task_desc$
                gosub disp_message
                if msg_opt$<>"Y" then goto std_exit
            endif

open_file: rem --- Open file

            if ddm_tables.restrict_create$="Y" and clear$="Y" then gosub display_msg
            files$[8]=ddm_tables.dd_file_name$
            options$[8]="F"
            close (channel,err=*next)
            call pgmdir$+"adc_fileopen.aon",1,8,8,files$[all],options$[all],channels[all],batch,status
            if !status then
                channel=channels[8]
                if channel<>0 then 
rem --- Retrieve file information
                    call pgmdir$+"syc_ja.bbx",channel,filename$,path$,type$,keylen,records,reclen,numrec,status
                endif
            endif

            if numrec>0 then 
rem --- Perform removal
                if clear$="Y" then gosub remove_firm
            endif

rem --- Erase Batched Files

            if clear$<>"Y" then continue
            read (adm_proctables_dev,key="",dom=*next)
            dim adm_proctables_key$:adm_proctables_key_tpl$
            while more
                adm_proctables_key$=key(adm_proctables_dev,end=*continue)
                read (adm_proctables_dev)
                if pos(ddm_tables.dd_file_name$=adm_proctables_key$)=11 then break
            wend
            
rem --- This File Is Batched

            read (adm_procbatches_dev,key=adm_proctables_key.process_id$+adm_firms.company_id$,dom=*next)
            while more
                adm_procbatches_key$=key(adm_procbatches_dev,end=*continue)
                read (adm_procbatches_dev)
                if pos(adm_proctables_key.process_id$+adm_firms.company_id$=adm_procbatches_key$)<>1 then continue

rem --- Got A Batch To Remove

                close (channel,err=*next)
                while more
                    erase ddm_tables.dd_file_name$+"."+adm_procbatches.batch_no$,err=*break
                wend
  
                remove (adm_procbatches_dev,key=adm_procbatches.batch_no$,dom=*next)
                remove (adm_procbatches_dev,key=adm_procbatches_key$,dom=*next)

rem --- Check For Another Batch

            wend

rem --- Get The Next File

        wend

rem --- Removal completed

done:

    goto std_exit

display_msg: rem --- Display windowed message and prompt for input

    call pgmdir$+"syc_xb.bbx",2,"FILE_WRITE_PROTECTED",tokens$[all],0,22,-1,v$,v3
    return

remove_firm: rem --- Remove firm from file

    read (channel,key=adm_firms.company_id$,dom=*next)

rem --- Remove Loop

    while more

        k$=key(channel,end=*break)
        if pos(adm_firms.company_id$=k$)<>1 then break
        number=number+1
        if mod(number,10)=0 then print @(50,l),number:m1$,

rem --- Remove record
         remove (channel,key=k$)

    wend

rem --- Removal completed

    return

rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return
	
rem #endinclude disp_message.src

rem --- #include "./aon/lib/std_input.src

std_input: rem --- standard input routine (12-mar-2003)

    if restart and vaction$="s" then vaction$="sp",restart=0
    if vaction$="g" then 
        compare_control=num(str(grid_id)+str(grid_row:"000")+str(grid_col:"000")) 
    else 
        compare_control=control_id
    endif
    if compare_control=old_control_id then 
        validate=0 
    else 
        old_control_id=compare_control
    endif
    dim vdata$[10],vdata[10],vinfo$[20],vinfo[20]
    vdata$[0]=v0$
    vdata$[1]=v1$,vdata$[2]=v2$,vdata$[3]=v3$,vdata$[4]=v4$
    vdata[0]=v0
    vdata[1]=v1,vdata[2]=v2,vdata[3]=v3,vdata[4]=v
    vinfo$[0]=pgm(-2)
    vinfo$[4]=event$,vinfo[2]=control_id,vinfo[3]=i0
    vinfo[4]=i0_nonkey1
    vinfo[5]=i0_done,vinfo[6]=my_context
    vinfo[7]=validate
    vinfo[8]=statusbar_context,vinfo[9]=parent_context
    vinfo[10]=tab_control_id
    vinfo[11]=tab_index,vinfo[12]=done_context
    vinfo[14]=grid_col
    vinfo[15]=grid_row
    vinfo$[11]=vtoken1$
    vinfo$[12]=vtoken2$,vinfo$[13]=vtoken3$
    vinfo$[14]=vtoken4$
    vinfo$[15]=vtoken5$,vinfo$[16]=vtoken6$
    vinfo$[17]=vtoken7$
    vinfo$[18]=vtoken8$,vinfo$[19]=vtoken9$

rem --- call standard input routine
    call pgmdir$+"syc_ig.bbx",vaction$,vdata$[all],vdata[all],vinfo$[all],vinfo[all],vmenu$[all],vmenu[all],vtool$[all],vtool[all],vstatus
    if vstatus=127 then goto std_input_escape
    if vstatus=999 then goto std_input_error
    goto std_input_exit

rem --- escape during input
std_input_escape:
    call pgmdir$+"syc_es.bbx",err=std_input_error,pgm(-2),tcb(8),e$,e2,v3
    if v3<>127 then goto std_input
    print @(0,e2),'cl','cursor'("ON"),e$,'lf'

rem --- error during input
std_input_error:
    escape
    goto std_input
std_input_exit: rem --- assign local variables and return
    v$=vinfo$[1],event$=vinfo$[4],v=vinfo[0],v3=vinfo[1]
    next_control=vinfo[2],i0=vinfo[3],next_context=vinfo[6]
    validate=vinfo[7],grid_col=vinfo[14],grid_row=vinfo[15]
    wants_to_edit_cell=vinfo[16],next_tab_index=vinfo[18]
    if wants_to_edit_cell then dim vnotice$:vinfo$[3]; vnotice$=vinfo$[2]
    return

rem --- #end include
rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
