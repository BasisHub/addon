rem adc - Verify Application Installed
rem Program adc_application v8.0.0 23Apr2006 (syc_va)
rem Created by adx_progconv.bbx v1.0.1 (04/23/2006 10:57:31)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- MODULE$   : 2 character application ID (Input)
rem --- INFO$[n]  : Information array (Returned)
rem ---              [0] Module description
rem ---              [1] Multiple firms (Y/N)
rem ---              [2] Default Firm ID
rem ---              [3] Installed (Y/N)
rem ---              [4] Version number
rem ---              [5] Data path
rem ---              [6] Program source path
rem ---              [7] Program executable path
rem ---              [9] Post to GL (Y/N)
rem ---             [19] Fiscal Calendar installed (Y/N)
rem ---             [20] Installed for this firm (Y/N)

    seterr std_error
    setesc std_error
    enter module$,info$[all]

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    key_mod$=module$

rem --- Open/Lock files

    files=3,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="adm_modules.dat",options$[1]="S",ids$[1]="ADM_MODULES";rem "S"=System file
    files$[2]="gls_params",options$[2]="R",ids$[2]="GLS_PARAMS"; rem "R"=Required
    switch (BBjAPI().TRUE)
        case module$ = "AP"
            files$[3]="aps_params",options$[3]="F",ids$[3]="APS_PARAMS"; rem "F"=Unnecessary file
            break
        case module$ = "AR"
            files$[3]="ars_params",options$[3]="F",ids$[3]="ARS_PARAMS"; rem "F"=Unnecessary file
            break
        case module$ = "BM"
            files$[3]="bms_params",options$[3]="F",ids$[3]="BMS_PARAMS"; rem "F"=Unnecessary file
            break
        case module$ = "GL"
            files$[3]="gls_params",options$[3]="F",ids$[3]="GLS_PARAMS"; rem "F"=Unnecessary file
            break
        case module$ = "IV"
            files$[3]="ivs_params",options$[3]="F",ids$[3]="IVS_PARAMS"; rem "F"=Unnecessary file
            break
        case module$ = "OP"
            rem --- ops_params is a child of ars_params
            key_mod$="AR"
            files$[3]="ars_params",options$[3]="F",ids$[3]="OPS_PARAMS"; rem "F"=Unnecessary file
            break
        case module$ = "PO"
            files$[3]="pos_params",options$[3]="F",ids$[3]="POS_PARAMS"; rem "F"=Unnecessary file
            break
        case module$ = "PR"
            files$[3]="prs_params",options$[3]="F",ids$[3]="PRS_PARAMS"; rem "F"=Unnecessary file
            break
        case module$ = "SA"
            files$[3]="sas_params",options$[3]="F",ids$[3]="SAS_PARAMS"; rem "F"=Unnecessary file
            break
        case module$ = "SF"
            files$[3]="sfs_params",options$[3]="F",ids$[3]="SFS_PARAMS"; rem "F"=Unnecessary file
            break
        case default
            rem --- module not setup
            files$[3]="",options$[3]="F",ids$[3]=""; rem "F"=Unnecessary file
            break
    swend
    
    rem --- NOTE: Must use adc_fileopen here instead of bac_open_tables in order to avoid
    rem --- license nags when checking on modules that aren't installed.
    call stbl("+DIR_PGM",err=*next)+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit

    adm04_dev=channels[1]; dim adm04a$:templates$[1]
    gls01_dev=channels[2]; dim gls01a$:templates$[2]
    params_dev=channels[3]
    if params_dev<>0 then dim params_tpl$:templates$[3]

rem --- Initializations

    dim info$[20]
    module$=cvs(module$,4)
    info$[1]="N"
    info$[3]="N"
    info$[9]="N"
    info$[19]="N"
    info$[20]="N"

rem --- Get application record

    find record (adm04_dev,key=stbl("+AON_APPCOMPANY",err=*next)+pad(module$,3),dom=*next)adm04a$
    info$[0]=cvs(adm04a.sys_desc$,2)
    info$[1]=adm04a.multi_firm$
    info$[2]=adm04a.company_id$
    info$[3]=adm04a.sys_install$
    info$[4]=fnglobal$("+AON_VERSION","8.0.0")
    info$[5]=fnglobal$("+"+module$+"DATA","")
    if cvs(info$[5],2)="" info$[5]=fnglobal$("+DIR_DAT","./data/")
    info$[6]="./"+cvs(module$,8)+"/"
    info$[7]=fnglobal$("+DIR_PGM","./programs/")

rem --- Skip modules that don't post to GL

    if pos(module$="DD GE SY AD MP SA",3) goto installed

    if params_dev=0 goto installed; rem --- need to open and define proper parameter file

rem --- Get parameter record for this module to see if it's posting to GL

    find record (params_dev,key=firm_id$+key_mod$+"00",dom=installed)params_tpl$
    if module$="GL" info$[19]="Y"
    info$[9]=params_tpl.post_to_gl$
    if pos(info$[9]="YN")=0 info$[9]="Y"

rem --- Make sure GL is installed and allowing postings if module is posting to GL

    if info$[9]="N" goto installed
    adm04a.sys_install$="N"
    find record (adm04_dev,key=stbl("+AON_APPCOMPANY",err=*next)+"GL ",dom=*next)adm04a$
    info$[9]=adm04a.sys_install$
    if pos(info$[9]="YN")=0 info$[9]="Y"
    if info$[9]="N" goto installed
    find record (gls01_dev,key=firm_id$+"GL00",dom=installed)gls01a$
    info$[19]="Y"
    if gls01a.gl_post_code$="N" info$[9]="N"

installed: rem --- Installed for this firm?

    if info$[3]="Y" info$[20]="Y"
    if info$[3]<>"Y" info$[3]="N"
    if info$[20]<>"Y" info$[20]="N"

done: rem --- All done

    goto std_exit

rem --- Functions

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=globalstr_exit)
        globalstr_exit:
        return q1$
    fnend

open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    close (adm04_dev,err=*next)
    close (gls01_dev,err=*next)
    close (params_dev,err=*next)
    exit

rem #endinclude std_exit.src

    end
