rem ==========================================================================
rem --- adx_init_data.aon
rem --- A non-completing Auto-Launch task that initializes and converts data 
rem --- following an upgrade. 
rem --- 
rem --- AddonSoftware Version 15.00
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    use java.io.File
    use java.io.FileReader
    use java.io.FileWriter
    use java.util.HashMap
    use java.util.Properties
    use ::bbtranslator.bbj::BBTranslator
    use ::ado_file.src::FileObject
    
    setesc std_error
    seterr std_error

rem --- Get program arguments

    if argc>1
        for curr_argv=1 to argc-1
            temp_argv$=argv(curr_argv)
            if pos("-u"=temp_argv$)=1 user_id$=temp_argv$(3);rem User ID
        next curr_argv
    endif

    if user_id$=""
        use ::sys/prog/bao_security.bbj::Security
        user_id$=Security.getURLUser()
        if cvs(user_id$,2)="" then user_id$=stbl("+USER_ID",err=*next)
        if cvs(user_id$,2)="" then user_id$="ADMIN"
    endif

rem --- Initializations

    close_mdi=0
    no_close_mdi=0
    err_msg$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dir_syp$=stbl("+DIR_SYP")
    dataDir$=FileObject.fixPath(stbl("+DIR_DAT",err=*next), "/")
    
    rem --- Make sure needed STBLs are set
    call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,rd_table_chans$[all]
    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)

rem --- There's nothing to do if data/adx_conversionCtrl isn’t found, i.e. new install or all required conversions already completed.

    convCtrlFile!=new File(dataDir$+"adx_conversionCtrl",err=*next)
    if !convCtrlFile!.exists() then goto std_exit
    fileReader!=new FileReader(convCtrlFile!)

    convCtrl!=new Properties()
    convCtrl!.load(fileReader!)
    fileReader!.close()

rem --- Are conversion needed for the start_version?

    versionsVect!=BBjAPI().makeVector()
    versionsVect!.addAll(java.util.Arrays.asList(convCtrl!.getProperty("conversion_versions").split(";")))
    
    rem --- start_version$ format must be 0000 to match version format in conversion_versions
    version_mask$="00.00"
    start_version$=str(num(convCtrl!.getProperty("start_version")):version_mask$)
    xpos=pos("."=start_version$)
    if xpos then
        start_version$=start_version$(1,xpos-1)+start_version$(xpos+1)
    endif

    rem --- Verify version requires conversion
    indexFirstConversion=-1
    if versionsVect!.size() then
        for i=0 to versionsVect!.size()-1
            if start_version$<versionsVect!.getItem(i) then
                indexFirstConversion=i
                break
            endif
        next i
    endif

rem --- Open log file in aon/logs directory

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",open_opts$[1]="OTA"
    gosub open_tables
    ddm_systems=num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]
    
    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log

rem --- Creating a small invisible window to hold progress meter
    sysGUI!=BBjAPI().getSysGui()
    if BBjAPI().isInMDI() then
        desktop_w=BBjAPI().getMDI().getClientWidth()
        desktop_h=BBjAPI().getMDI().getClientHeight()
    else
        screenSize!=sysGUI!.getSystemMetrics().getScreenSize()
        desktop_w=screenSize!.width
        desktop_h=screenSize!.height
    endif
    rdForm!=sysGUI!.addWindow(int(desktop_w/2),int(desktop_h/2),1,1,"",$00000000$)
    rdForm!.setTitleBarVisible(0)
    rdForm!.setVisible(0)

rem --- Start progress meter

    if Translate!=null() then 
        gosub get_translate_object
        if status then
            err_msg$="Cannot open Barista file adm_modules.dat. Status="+str(status)
            err_no$="12"
        else
            if Translate!=null() then
                err_msg$="Cannot create BBTranslator object Translate!"
                err_no$="999"
            endif
        endif
        if err_msg$<>"" then
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),"",err_no$,err_msg$,err_act$
            print(log_dev)"***** Error: "+err_msg$+" *****"
            gosub show_error_message
            print(log_dev)"***** "+error_message$+" *****"
            print(log_dev)
            print(log_dev)"Initdata log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
            close(log_dev)
            goto close_barista_mdi
        endif
    endif
    meter_title$=Translate!.getTranslation("AON_INIT_DATA","AddonSoftware Data Initialization")
    meter_total_recs=4+versionsVect!.size()-indexFirstConversion
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST-OK"
    gosub disp_meter

rem --- if no conversions detected, update log and done

    if indexFirstConversion<0
        meter_text$=Translate!.getTranslation("AON_NO_CONVERSIONS_NEEDED","No conversions needed.")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$        
        goto done
    endif
    
rem --- Determine which modules are installed

    installMap!=new HashMap()
    installed_modules$=""
    modules$="ADAPARBMGLIVMPOPPOPRSASF"
    upgradedModules$=convCtrl!.getProperty("modules")
    for i=1 to len(modules$) step 2
        mod$=modules$(i,2)
        dim info$[20]
        call pgmdir$+"adc_application.aon",mod$,info$[all]
        if pos(mod$="AD"+upgradedModules$,2)=0 then info$[20]="N"
        installMap!.put(mod$,info$[20])
        if info$[20]="Y" then installed_modules$=installed_modules$+mod$+","
    next i
    if len(installed_modules$) then installed_modules$=installed_modules$(1,len(installed_modules$)-1)

    rem --- Admin AD module must be installed
    if installMap!.get("AD")<>"Y" then
        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:       Translate!.getTranslation("AON_MISSING","Missing")+" AD "+
:       Translate!.getTranslation("AON_MODULE","Module")+" *****"
        goto done
    endif

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CHECKED_INSTALLED_MODULES","Checked installed modules")+": "+installed_modules$
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

rem --- Verify end_version=ADM_MODULES.VERSION_ID for AD

    gosub get_AD_version
    if status then
        rem --- If going to get this error, it should have occurred starting the progress meter.
        err_msg$="Cannot open Barista file adm_modules.dat. Status="+str(status)
        err_no$="12"
        call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),"",err_no$,err_msg$,err_act$
        err_msg$="***** Error: "+err_msg$+" *****"
        goto done
    endif
    if convCtrl!.getProperty("end_version")<>cvs(adm_modules.version_id$,2) then
        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "
        if convCtrl!.getProperty("data_source")="DataPort" then
            err_msg$=err_msg$+"DataPort "
        else
            err_msg$=err_msg$+"Addon Upgrade Wizard "
        endif
        err_msg$=err_msg$+Translate!.getTranslation("AON_VERSION_USED","version used")+", "+convCtrl!.getProperty("end_version")+", "+
:       Translate!.getTranslation("AON_DOES_NOT_MATCH_CURRENT_ADDON_VERSION","does not match current Addon verion")+" "+
:        cvs(adm_modules.version_id$,2)+" *****"
        goto done
    endif

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CHECKED_VERSIONS_USED","Checked Addon versions used")+": "+convCtrl!.getProperty("end_version")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
rem --- Verify data_source

    if convCtrl!.getProperty("data_source")="DataPort" or convCtrl!.getProperty("data_source")="OCJ" then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_CHECKED_DATA_SOURCE","Checked data source used")+": "+convCtrl!.getProperty("data_source")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    else
        if convCtrl!.getProperty("data_source")="AIUW" then
            rem --- Haven't run Distribute EM Update Wizard Files task yet
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:           Translate!.getTranslation("AON_DIST_UPDATE_WIZ_FILES","Distribute EM Update Wizard Files task was not run")+" *****"
            no_close_mdi=1
            goto done
        else
            rem --- Unknown data_source
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:           Translate!.getTranslation("AON_CONVERSIONCTRL_UNKNOWN","adx_conversionCtrl from unknown data source")+": "+convCtrl!.getProperty("data_source")+" *****"
            goto done
        endif
    endif

rem --- Following an upgrade, user may launch Addon before "copying" the data.
rem --- Can't do anything if required files aren't present.

    adm_rptctl=0,adm09=0,glm03=0,glm06=0
    test_dev=unt
    open(test_dev,err=*next)stbl("+ADDATA")+"adm_rptctl"; adm_rptctl=1
    close(test_dev,err=*next)
    open(test_dev,err=*next)stbl("+ADDATA")+"adm-09"; adm09=1
    close(test_dev,err=*next)
    open(test_dev,err=*next)stbl("+GLDATA")+"glm-03"; glm03=1
    close(test_dev,err=*next)
    open(test_dev,err=*next)stbl("+GLDATA")+"glm-06"; glm06=1
    close(test_dev,err=*next)
    if !adm_rptctl or !adm09 or !glm03 or !glm06 then
        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:       Translate!.getTranslation("AON_DATA_FILES_MISSING","Addon data files are missing")+" *****"
        goto done
    endif

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_CHECKED_REQUIRED_FILES","Checked for required Addon files")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

rem --- Process needed version conversion programs
    for i=indexFirstConversion to versionsVect!.size()-1
        this_version$=versionsVect!.getItem(i)
        if num(this_version$)/100<num(convCtrl!.getProperty("start_version")) or num(this_version$)/100>num(convCtrl!.getProperty("end_version")) then continue
        if convCtrl!.getProperty(this_version$)=null() then
            this_conv_pgm$=""
        else
            this_conv_pgm$=convCtrl!.getProperty(this_version$)
        endif
        if this_conv_pgm$="" then
            rem --- Report missing conversion program, skip other conversions
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:           Translate!.getTranslation("AON_CONV_PGM_NOT_SPECIFIED","Conversion program not specified for version")+": "+str(num(this_version$)/100:version_mask$)+" *****"
            exitto done
        endif
        
        rem --- CALL conversion program for this version
        found_conv_pgm=0
        call stbl("+DIR_PGM",err=*next)+this_conv_pgm$,err=*next,convCtrl!,installMap!,rdForm!,Translate!,conv_status; found_conv_pgm=1
        if !found_conv_pgm then
            rem --- Report conversion program not found, skip other conversions
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:           Translate!.getTranslation("AON_CONV_PGM_NOT_FOUND","Conversion program not found")+": "+this_conv_pgm$+" *****"
            exitto done
        endif
        if conv_status<>0 then
            rem --- Report conversion program error, skip other conversions
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:           Translate!.getTranslation("AON_SEE_CONV_PGM_LOG","See log for conversion program")+": "+this_conv_pgm$+" *****"
            exitto done
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_COMPLETED_CONV","Completed conversion for version")+": "+str(num(this_version$)/100:version_mask$)
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    next i
	
done: rem --- All done

    rem --- Complete progress meter
    completed_successfully=0
    if err_msg$<>"" then
        meter_text$=err_msg$
    else
        meter_text$=Translate!.getTranslation("AON_CONV_COMPLETED","Conversions completed successfully")
        completed_successfully=1
    endif
    meter_proc_recs=meter_total_recs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Stop progress meter
    meter_text$=""
    meter_proc_recs=meter_total_recs
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Destroy small invisible window that holds progress meter
    rdForm!.destroy()

    rem --- On successful completion of all conversion programs, move data/adx_conversionCtrl to config/adx_conversionCtrl
    if completed_successfully then
        if convCtrl!.getProperty("data_source")="OCJ" then
            rem --- Re-set data_source so adx_conversionCtrl is ready to use for final go live data conversion
            convCtrl!.setProperty("data_source","AIUW")

            fileWriter!=new FileWriter(convCtrlFile!)
            convCtrl!.store(fileWriter!,"Addon Conversion Control File")
            fileWriter!.close()
        else
           if convCtrl!.getProperty("data_source")="AIUW" and indexFirstConversion<0 then goto std_exit
        endif
        
        savedConvCtrlFile!=new File(aonDir$+"config/adx_conversionCtrl",err=*next)
        if savedConvCtrlFile!.exists() then
            rem --- Keep copy of previously saved config/adx_conversionCtrl
            target_value$=aonDir$+"config/adx_conversionCtrl.bak1"
            counter=0
            while 1
                rem --- find a target that doesn't exist
                declare File aFile!
                aFile! = new File(target_value$)
                if !aFile!.exists() then break
                counter=counter+1
                target_value$=aonDir$+"config/adx_conversionCtrl.bak"+str(counter)
            wend
            rename savedConvCtrlFile!.getAbsolutePath() to aFile!.getAbsolutePath(), err=*next
        endif
        convCtrlFile!.renameTo(savedConvCtrlFile!)

        print(log_dev)Translate!.getTranslation("AON_DELETED_CONV_CTRL","Deleted conversion control file")+": "+convCtrlFile!.getAbsolutePath()

        rem --- get INIT_DATA9 record from ads_autolaunch and set the completion status to 'N' so that task (rebuilding FTI's) will now be run
        rem --- NOTE: not doing an admin_backup (via bax_xmlrec_exp.bbj) for this change to the INIT_DATA9 autolaunch record because it's fleeting - it'll be set back to C again as soon as that task completes

        num_files=1
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="ADS_AUTOLAUNCH", open_opts$[1]="OTA"
        gosub open_tables
        ads_autolaunch_dev=num(open_chans$[1]);dim ads_autolaunch$:open_tpls$[1]
        
        extractrecord(ads_autolaunch_dev,key="INIT_DATA9",dom=*endif)ads_autolaunch$
        ads_autolaunch.process_status$="N"
        ads_autolaunch.trans_date$=date(0:"%Yl%Mz%Dz")
        ads_autolaunch.trans_time$=date(0:"%Hz%mz%sz")
        ads_autolaunch$ = field(ads_autolaunch$)
        writerecord(ads_autolaunch_dev)ads_autolaunch$

    endif

    rem --- Complete and close log file
    if err_msg$<>"" then 
        gosub show_error_message
        print(log_dev)"***** "+error_message$+" *****"
    endif
    print(log_dev)
    print(log_dev)"Initdata log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Close Barista MDI if a verification test fails
    if close_mdi then goto close_barista_mdi

	goto std_exit
	
close_barista_mdi: rem --- Close Barista MDI

    rdGroupSpace!=BBjAPI().getGroupNamespace()
    rdGroupSpace!.setValue("+exit_mdi","FORCE_CLOSE")

    goto std_exit
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/initdata_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"Initdata log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return

get_translate_object: rem --- Get BBTranslator object Translate!

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ADM_MODULES", open_opts$[1]="OTA"
    gosub open_tables
    if status then return

    adm_modules=num(open_chans$[1]);dim adm_modules$:open_tpls$[1]
    readrecord(adm_modules,key=pad("01007514AD",11),dom=*next)adm_modules$
    if adm_modules.locale_resource$="" or adm_modules.locale_path$=""
        readrecord(adm_modules,key=pad(sysinfo.lic_feature$,11),dom=*next)adm_modules$
    endif
    if adm_modules.locale_resource$<>"" and adm_modules.locale_path$<>""
        locale_path$=adm_modules.locale_path$
        rdTransSpaceKey$=adm_modules.locale_resource$+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
        Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
        if Translate!=null()
            Translate!=BBTranslator.getInstance(adm_modules.locale_resource$,stbl("+USER_LOCALE"),null(),locale_path$)
            BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
        endif
    endif

    return

get_AD_version: rem --- Get ADM_MODULES.VERSION_ID for AD module

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ADM_MODULES", open_opts$[1]="OTA"
    gosub open_tables
    if status then return

    adm_modules=num(open_chans$[1]);dim adm_modules$:open_tpls$[1]
    readrecord(adm_modules,key=pad("01007514AD",11),dom=*next)adm_modules$

    return
    
show_error_message: rem --- Displays message that error should be fixed before continuing

    error_message$="To avoid possible data corruption, the error condition should be corrected before using this Addon installation."
    if Translate!<>null() then
        error_message$=Translate!.getTranslation("AON_AVOID_POSSIBLE_DATA_CORRUPTION",error_message$)
    endif
    msg_id$="GENERIC_WARN"
    dim msg_tokens$[1]
    msg_tokens$[1]=error_message$
    gosub disp_message
    
    if !no_close_mdi then close_mdi=1

    return
    
open_tables:rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        status=-1
    endif

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release


rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
