rem adc - Open Printer
rem Program adc_printer v8.0.0 30Mar2006 (syc_ga)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- PRINTER_DEV: Printer channel (Returned)
rem --- MESSAGE    : Message flag (Reserved for future use)
rem --- PFDESC$    : Override PF report description/no user input (Input)
rem --- SELECTPR$  : Specified printer/overrides default (Input)
rem --- STATUS     : Status code/0=No error (Returned)

rem --- This program is currently only a stub with no support for anything
rem --- other than open a genuine printer (31Mar2006)

    seterr std_error
    setesc std_error
    enter printer_dev,message,pfdesc$,selectpr$,status

rem --- Retrieve sysinfo data

    sysinfo_template$=fnglobal$("+SYSINFO_TPL","")
    dim sysinfo$:sysinfo_template$
    sysinfo$=fnglobal$("+SYSINFO","")

rem --- Open/Lock files

    files=1,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="adm_userdefaults",ids$[1]="ADM_USERDEFAULTS"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    
    adm_userdefaults=channels[1]

rem --- Dimension string templates

    dim adm_userdefaults$:templates$[1]

rem --- Get default printer from adm_userdefaults in case nothing is set in sysinfo

    readrecord(adm_userdefaults,key=sysinfo.firm_id$+sysinfo.user_id$,err=*next)adm_userdefaults$

rem --- Open printer specified in SYSINFO (current user selection)

    status=1
    printer_dev=unt
    printer$=cvs(sysinfo.printer_id$,2)
    if cvs(printer$,3)="" then printer$=adm_userdefaults.default_printer$
    open (printer_dev,err=*next) printer$; status=0
    
    if status
        msg_id$="AD_NOPRINTER"
        gosub disp_message
    endif

done: rem --- All done

    goto std_exit

rem --- Functions

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=globalstr_exit)
        globalstr_exit:
        return q1$
    fnend

disp_message: rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		table_chans$[all]

	return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    close (adm_userdefaults,err=*next)

    exit
rem #endinclude std_exit.src

    end
