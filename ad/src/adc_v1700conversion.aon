rem --- Upgrade Conversion Utility For Version 17.00
rem --- Program adc_v1700conversion.aon

rem --- AddonSoftware Version 17.00 - Aug2016
rem --- Copyright BASIS International Ltd.  All Rights Reserved.


rem --- CONVCTRL!   : Property object of the conversion control file data/adx_conversionCtrl (Input)
rem --- INSTALLMAP! : HashMap object of installed modules, keyed by module ID (Input)
rem --- rdForm!     : Window object to hold progress meter
rem --- Translate!  : Translator object translations
rem --- CONV_STATUS : Status code/0=No error (Returned)

    use java.io.File
    use java.util.HashMap
    use java.util.GregorianCalendar

    use ::ado_file.src::FileObject
    use ::ado_SyncRecords.aon::SyncRecords
    
    setesc std_error
    seterr std_error
    
    enter convCtrl!,installMap!,rdForm!,Translate!,conv_status

rem --- Initializations

    conv_status=1
    dir_syp$=stbl("+DIR_SYP")
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dataDir$=FileObject.fixPath(stbl("+DIR_DAT",err=*next), "/")

    Calendar! = new GregorianCalendar()
    
rem --- Open log file in aon/logs directory

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",open_opts$[1]="OTA"
    gosub open_tables
    ddm_systems=num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]
    
    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log
    
rem --- Start progress meter

    meter_title$="adc_v1700conversion.aon"
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter

rem --- For version 17.00, re-sync modified sync files in order to update the changed records

    if convCtrl!.getProperty("data_source")="OCJ" then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+" "+Translate!.getTranslation("AON_MODIFIED_SYNC_FILES")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
        
        rem --- Add temporary "delete" sync files for obsolete records being eliminated
        tmpSync_dev=unt
        open(tmpSync_dev,isz=-1,mode="O_CREATE,O_TRUNC")aonDir$+"/data/sync/adm_searches~{customers0070}.xml"
        write(tmpSync_dev)"<?xml version='1.0' encoding='UTF-8' ?>"
        write(tmpSync_dev)"<barista_admin_record>"
        write(tmpSync_dev)"    <barista_record_table>ADM_SEARCHES</barista_record_table>"
        write(tmpSync_dev)"    <SEARCH_DEF_ID>CUSTOMERS0070       </SEARCH_DEF_ID>"
        write(tmpSync_dev)"</barista_admin_record>"
        close(tmpSync_dev)

        open(tmpSync_dev,isz=-1,mode="O_CREATE,O_TRUNC")aonDir$+"/data/sync/adm_searches~{vendors0010}.xml"
        write(tmpSync_dev)"<?xml version='1.0' encoding='UTF-8' ?>"
        write(tmpSync_dev)"<barista_admin_record>"
        write(tmpSync_dev)"    <barista_record_table>ADM_SEARCHES</barista_record_table>"
        write(tmpSync_dev)"    <SEARCH_DEF_ID>VENDORS0010         </SEARCH_DEF_ID>"
        write(tmpSync_dev)"</barista_admin_record>"
        close(tmpSync_dev)

        open(tmpSync_dev,isz=-1,mode="O_CREATE,O_TRUNC")aonDir$+"/data/sync/ads_autolaunch~{setprinter}.xml"
        write(tmpSync_dev)"<?xml version='1.0' encoding='UTF-8' ?>"
        write(tmpSync_dev)"<barista_admin_record>"
        write(tmpSync_dev)"    <barista_record_table>ADS_AUTOLAUNCH</barista_record_table>"
        write(tmpSync_dev)"    <PROCESS_ID>SETPRINTER</PROCESS_ID>"
        write(tmpSync_dev)"</barista_admin_record>"
        close(tmpSync_dev)
    
        rem --- List modified sync files
        syncFiles!=BBjAPI().makeVector()
        syncFiles!.addItem("adm_searches~customers0010.xml")
        syncFiles!.addItem("adm_searches~customers0020.xml")
        syncFiles!.addItem("adm_searches~customers0030.xml")
        syncFiles!.addItem("adm_searches~customers0040.xml")
        syncFiles!.addItem("adm_searches~customers0044.xml")
        syncFiles!.addItem("adm_searches~{customers0070}.xml"); rem --- deleting this one
        syncFiles!.addItem("adm_searches~customers0080.xml")
        syncFiles!.addItem("adm_searches~customers0090.xml")
        syncFiles!.addItem("adm_searches~inventory0010.xml")
        syncFiles!.addItem("adm_searches~inventory0020.xml")
        syncFiles!.addItem("adm_searches~inventory0024.xml")
        syncFiles!.addItem("adm_searches~inventory0030.xml")
        syncFiles!.addItem("adm_searches~inventory0040.xml")
        syncFiles!.addItem("adm_searches~inventory0050.xml")
        syncFiles!.addItem("adm_searches~inventory0060.xml")
        syncFiles!.addItem("adm_searches~{vendors0010}.xml"); rem --- deleting this one
        syncFiles!.addItem("adm_searches~vendors0020.xml")
        syncFiles!.addItem("adm_searches~vendors0030.xml")
        syncFiles!.addItem("adm_searches~vendors0040.xml")
        syncFiles!.addItem("adm_searches~vendors0050.xml")
        syncFiles!.addItem("adm_searches~vendors0060.xml")
        syncFiles!.addItem("adm_searches~vendors0070.xml")
        syncFiles!.addItem("adm_searches~vendors0080.xml")
        syncFiles!.addItem("adm_searches~zz_customers.xml")
        syncFiles!.addItem("adm_searches~zz_inventory.xml")
        syncFiles!.addItem("adm_searches~zz_vendors.xml")
        syncFiles!.addItem("ads_autolaunch~{setprinter}.xml"); rem --- deleting this one
        syncFiles!.addItem("adm_query~ar_agedbal_1.xml");rem --- queries where SQL joins were fixed to include all primary key fields (bug 9231)
        syncFiles!.addItem("adm_query~ar_cust_lk.xml")
        syncFiles!.addItem("adm_query~ar_cust_ord_lk.xml")
        syncFiles!.addItem("adm_query~ar_custbalhdr_1.xml")
        syncFiles!.addItem("adm_query~ar_depositdet.xml")
        syncFiles!.addItem("adm_query~ar_mtdsales_1.xml")
        syncFiles!.addItem("adm_query~ar_nmnsales_1.xml")
        syncFiles!.addItem("adm_query~ar_open_orddet.xml")
        syncFiles!.addItem("adm_query~ar_pyrsales_1.xml")
        syncFiles!.addItem("adm_query~ar_ytdsales_1.xml")
        syncFiles!.addItem("adm_query~podetail.xml")
        syncFiles!.addItem("adm_query~reqdetail.xml")
        syncFiles!.addItem("adm_query~sf_wobyvend.xml")

        rem --- Update table records for modified sync files
        syncRecs!=new SyncRecords(aonDir$)
        syncRecs!.updateRecords(syncFiles!)
        
        rem --- Erase temporary "delete" sync files
        erase aonDir$+"/data/sync/adm_searches~{customers0070}.xml",err=*next
        erase aonDir$+"/data/sync/adm_searches~{vendors0010}.xml",err=*next
        erase aonDir$+"/data/sync/ads_autolaunch~{setprinter}.xml",err=*next
    endif

rem --- Initialize AP data file changes implemented during minor releases of v17

    this_module$="AP"
    if installMap!.get(this_module$)="Y" then 
        rem --- As of v17.10, DataPort handles initializing APM_VENDMAST.MEMO_1024 from APM_VENDCMTS (apm-09)
        if convCtrl!.getProperty("data_source")="OCJ" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Make sure APM_VENDCMTS (apm-09) exists
            open_success=0
            apm09_dev=unt
            open(apm09_dev,err=*next)dataDir$+"/apm-09"; open_success=1
            if !open_success then
                rem --- Copy APM_VENDCMTS (apm-09) from old source to the new install

                rem --- Open ddm_tables and ddm_table_tpls in new install
                num_files=2
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"
                open_tables$[2]="DDM_TABLE_TPLS",open_opts$[2]="OTA"
                gosub open_tables
                new_ddmTables=num(open_chans$[1]);dim new_ddmTables$:open_tpls$[1]
                new_ddmTableTpls=num(open_chans$[2]);dim new_ddmTableTpls$:open_tpls$[2]
    
                rem --- Open ddm_tables in old source
                old_ddm_table$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_tables.dat"
                open_success=0
                old_ddmTables=unt
                open(old_ddmTables,err=*next)old_ddm_table$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table$+" *****"
                    goto done
                endif

                rem --- Open ddm_table_tpls in old source
                old_ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                open_success=0
                old_ddmTableTpls=unt
                open(old_ddmTableTpls,err=*next)old_ddm_table_tpls$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table_tpls$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table_tpls$+" *****"
                    goto done
                endif
    
                rem --- Get table definition for old source APM_VENDCMTS file, and add it to new install
                oldFile$="APM_VENDCMTS"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
    
                rem --- Get record template for old source APM_VENDCMTS file, and add it to new install
                oldFile$="APM_VENDCMTS"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                sourceFileVec!=BBjAPI().makeVector()
                tablealiasVec!=BBjAPI().makeVector()
                sourceFileVec!.addItem("apm-09");tableAliasVec!.addItem("APM_VENDCMTS")
                for source=0 to sourcefileVec!.size()-1
                    rem --- Does source file exist?
                    oldStbl$="+APDATA"
                    oldFile$=sourceFileVec!.get(source)
                    tableAlias$=tableAliasVec!.get(source)
                    gosub get_path_to_old_file
                    source_file$=oldPathToFile$
                    open_success=0
                    source_dev=unt
                    open(source_dev,err=*next)source_file$; open_success=1
                    if open_success then
                
                        rem --- Open file in new data dictionary
                        num_files=1
                        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                        open_tables$[1]=tableAlias$, open_opts$[1]="OTA"
                        gosub open_tables
                        target_dev=num(open_chans$[1])
                        
                        rem --- Copy source records to target
                        read(source_dev,key="",dom=*next)
                        while 1
                            readrecord(source_dev,end=*break)record$
                            writerecord(target_dev)record$
                        wend
                    endif
                next source
            endif
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": APM_VENDMAST.MEMO_1024 "+
:           Translate!.getTranslation("AON_FROM_","From ")+"APM_VENDCMTS"
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Execute AP upgrade conversion utility for minor releases of v17
        theFirm$=""
        call pgmdir$+"apc_v17initMinorRev.aon",theFirm$,rdForm!,status
        if status=0 then
            rem --- Conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": APM_VENDCMTS"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Conversion did NOT complete successfully, exit with error message
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": APM_VENDCMTS"+" *****"
            goto done
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- Initialize AR data file changes implemented during minor releases of v17

    this_module$="AR"
    if installMap!.get(this_module$)="Y" then 
        rem --- As of v17.10, DataPort handles initializing ARM_CUSTMAST.MEMO_1024 from ARM_CUSTCMTS (arm-05)
        if convCtrl!.getProperty("data_source")="OCJ" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Make sure ARM_CUSTCMTS (arm-05) exists
            open_success=0
            arm05_dev=unt
            open(arm05_dev,err=*next)dataDir$+"/arm-05"; open_success=1
            if !open_success then
                rem --- Copy ARM_CUSTCMTS (arm-05) from old source to the new install

                rem --- Open ddm_tables and ddm_table_tpls in new install
                num_files=2
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"
                open_tables$[2]="DDM_TABLE_TPLS",open_opts$[2]="OTA"
                gosub open_tables
                new_ddmTables=num(open_chans$[1]);dim new_ddmTables$:open_tpls$[1]
                new_ddmTableTpls=num(open_chans$[2]);dim new_ddmTableTpls$:open_tpls$[2]
    
                rem --- Open ddm_tables in old source
                old_ddm_table$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_tables.dat"
                open_success=0
                old_ddmTables=unt
                open(old_ddmTables,err=*next)old_ddm_table$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table$+" *****"
                    goto done
                endif

                rem --- Open ddm_table_tpls in old source
                old_ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                open_success=0
                old_ddmTableTpls=unt
                open(old_ddmTableTpls,err=*next)old_ddm_table_tpls$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table_tpls$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table_tpls$+" *****"
                    goto done
                endif
    
                rem --- Get table definition for old source ARM_CUSTCMTS file, and add it to new install
                oldFile$="ARM_CUSTCMTS"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
    
                rem --- Get record template for old source ARM_CUSTCMTS file, and add it to new install
                oldFile$="ARM_CUSTCMTS"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                sourceFileVec!=BBjAPI().makeVector()
                tablealiasVec!=BBjAPI().makeVector()
                sourceFileVec!.addItem("arm-05");tableAliasVec!.addItem("ARM_CUSTCMTS")
                for source=0 to sourcefileVec!.size()-1
                    rem --- Does source file exist?
                    oldStbl$="+ARDATA"
                    oldFile$=sourceFileVec!.get(source)
                    tableAlias$=tableAliasVec!.get(source)
                    gosub get_path_to_old_file
                    source_file$=oldPathToFile$
                    open_success=0
                    source_dev=unt
                    open(source_dev,err=*next)source_file$; open_success=1
                    if open_success then
                
                        rem --- Open file in new data dictionary
                        num_files=1
                        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                        open_tables$[1]=tableAlias$, open_opts$[1]="OTA"
                        gosub open_tables
                        target_dev=num(open_chans$[1])
                        
                        rem --- Copy source records to target
                        read(source_dev,key="",dom=*next)
                        while 1
                            readrecord(source_dev,end=*break)record$
                            writerecord(target_dev)record$
                        wend
                    endif
                next source
            endif
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": ARM_CUSTMAST.MEMO_1024 "+
:           Translate!.getTranslation("AON_FROM_","From ")+"ARM_CUSTCMTS"
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Execute AR upgrade conversion utility for minor releases of v17
        theFirm$=""
        call pgmdir$+"arc_v17initMinorRev.aon",theFirm$,rdForm!,status
        if status=0 then
            rem --- Conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": ARM_CUSTCMTS"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Conversion did NOT complete successfully, exit with error message
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": ARM_CUSTCMTS"+" *****"
            goto done
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- Initialize BM data file changes implemented during minor releases of v17

    this_module$="BM"
    if installMap!.get(this_module$)="Y" then
        rem --- As of v17.10, DataPort handles initializing BMM_BILLMAST.MEMO_1024 from BMM_BILLCMTS (bmm-09)
        if convCtrl!.getProperty("data_source")="OCJ" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Make sure BMM_BILLCMTS (bmm-09) exists
            open_success=0
            bmm09_dev=unt
            open(bmm09_dev,err=*next)dataDir$+"/bmm-09"; open_success=1
            if !open_success then
                rem --- Copy BMM_BILLCMTS (bmm-09) from old source to the new install

                rem --- Open ddm_tables and ddm_table_tpls in new install
                num_files=2
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"
                open_tables$[2]="DDM_TABLE_TPLS",open_opts$[2]="OTA"
                gosub open_tables
                new_ddmTables=num(open_chans$[1]);dim new_ddmTables$:open_tpls$[1]
                new_ddmTableTpls=num(open_chans$[2]);dim new_ddmTableTpls$:open_tpls$[2]
    
                rem --- Open ddm_tables in old source
                old_ddm_table$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_tables.dat"
                open_success=0
                old_ddmTables=unt
                open(old_ddmTables,err=*next)old_ddm_table$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table$+" *****"
                    goto done
                endif

                rem --- Open ddm_table_tpls in old source
                old_ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                open_success=0
                old_ddmTableTpls=unt
                open(old_ddmTableTpls,err=*next)old_ddm_table_tpls$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table_tpls$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table_tpls$+" *****"
                    goto done
                endif
    
                rem --- Get table definition for old source BMM_BILLCMTS file, and add it to new install
                oldFile$="BMM_BILLCMTS"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
    
                rem --- Get record template for old source BMM_BILLCMTS file, and add it to new install
                oldFile$="BMM_BILLCMTS"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                sourceFileVec!=BBjAPI().makeVector()
                tablealiasVec!=BBjAPI().makeVector()
                sourceFileVec!.addItem("bmm-09");tableAliasVec!.addItem("BMM_BILLCMTS")
                for source=0 to sourcefileVec!.size()-1
                    rem --- Does source file exist?
                    oldStbl$="+BMDATA"
                    oldFile$=sourceFileVec!.get(source)
                    tableAlias$=tableAliasVec!.get(source)
                    gosub get_path_to_old_file
                    source_file$=oldPathToFile$
                    open_success=0
                    source_dev=unt
                    open(source_dev,err=*next)source_file$; open_success=1
                    if open_success then
                
                        rem --- Open file in new data dictionary
                        num_files=1
                        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                        open_tables$[1]=tableAlias$, open_opts$[1]="OTA"
                        gosub open_tables
                        target_dev=num(open_chans$[1])
                        
                        rem --- Copy source records to target
                        read(source_dev,key="",dom=*next)
                        while 1
                            readrecord(source_dev,end=*break)record$
                            writerecord(target_dev)record$
                        wend
                    endif
                next source
            endif
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": BMM_BILLMAST.MEMO_1024 "+
:           Translate!.getTranslation("AON_FROM_","From ")+"BMM_BILLCMTS"
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Execute BM upgrade conversion utility for minor releases of v17
        theFirm$=""
        call pgmdir$+"bmc_v17initMinorRev.aon",theFirm$,rdForm!,status
        if status=0 then
            rem --- Conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": BMM_BILLCMTS"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Conversion did NOT complete successfully, exit with error message
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": BMM_BILLCMTS"+" *****"
            goto done
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- For version 17.00, initialize changes for Fiscal Calendars

    this_module$="GL"
    if installMap!.get(this_module$)="Y" then 
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Retrieve sysinfo data
        sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
        dim sysinfo$:sysinfo_template$
        sysinfo$=stbl("+SYSINFO",err=*next)

        rem --- Open File(s)
        num_files=6
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="ADM_FIRMS",      open_opts$[1]="OTA"
        open_tables$[2]="GLS_CALENDAR",   open_opts$[2]="OTA"
        open_tables$[3]="GLS_PARAMS",     open_opts$[3]="OTA"
        open_tables$[4]="GLT_TRANSDETAIL",open_opts$[4]="OTA"
        open_tables$[5]="GLM_ACCTBUDGET", open_opts$[5]="OTA"
        open_tables$[6]="GLM_BUDGETPLANS",open_opts$[6]="OTA"

        gosub open_tables

        admFirms_dev=num(open_chans$[1])
        glsCalendar_dev=num(open_chans$[2])
        glsParams_dev=num(open_chans$[3])
        gltTransdetail_dev=num(open_chans$[4])
        glmAcctBudget_dev=num(open_chans$[5])
        glmBudgetPlans_dev=num(open_chans$[6])
        dim admFirms$:open_tpls$[1]
        dim glsCalendar$:open_tpls$[2]
        dim glsParams$:open_tpls$[3]
        dim gltTransdetail$:open_tpls$[4]
        dim glmAcctBudget$:open_tpls$[5]
        dim glmBudgetPlans$:open_tpls$[6]

        rem --- Initialize new CREATE_NEXT_CAL field in GLS_PARAMS
        read(glsParams_dev,key="",dom=*next)
        while 1
            readrecord(glsParams_dev,end=*break)glsParams$
            if glsParams.gl$+glsParams.sequence_00$<>"GL00" then continue
            glsParams.create_next_cal=1
            
            glsParams$=field(glsParams$)
            writerecord(glsParams_dev)glsParams$
        wend

        if convCtrl!.getProperty("data_source")="OCJ" then
            rem --- Data upgraded via EM Update Wizard (OCJ)
            rem --- Need to build re-purposed GLS_CALENDAR from old GLS_PARAMS
            oldStbl$="+GLDATA"
            oldFile$="gls_params"
            gosub get_path_to_old_file
            old_glsParams$=oldPathToFile$
            open_success=0
            old_glsParams_dev=unt
            open(old_glsParams_dev,err=*next)old_glsParams$; open_success=1
            if open_success then
                rem --- Increment progress meter
                meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": GLS_CALENDAR "+
:                   Translate!.getTranslation("AON_FROM_","From ")+oldFile$
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$
                
                rem --- Get record template for old source GLS_PARAMS file
                ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                open_success=0
                ddm_table_tpls=unt
                open(ddm_table_tpls,err=*next)ddm_table_tpls$; open_success=1
                if open_success then
                    dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"
                    tpl_found=0
                    findrecord(ddm_table_tpls,key=pad(cvs(oldFile$,4),16),dom=*next)ddm_table_tpls$;tpl_found=1
                    if tpl_found then
                        dim old_glsParams_tpl$:ddm_table_tpls.template$
                    else
                        rem --- Required template missing
                        err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                           " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                        meter_proc_recs=meter_proc_recs+1
                        meter_action$="MTR-LST"
                        meter_text$=err_msg$
                        gosub disp_meter
                        print(log_dev)meter_text$
                        goto done
                    endif
                else
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=ddm_table_tpls$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+ddm_table_tpls$+" *****"
                    goto done
                endif
   
                rem --- Copy calendar info in old GLS_PARAMS to new re-purposed GLS_CALENDAR
                read(admFirms_dev,key="",dom=*next)
                while 1
                    readrecord(admFirms_dev,end=*break)admFirms$
                    firm_id$=admFirms.company_id$
            
                    rem --- Init GLS_CALENDAR record
                    readrecord(old_glsParams_dev,key=firm_id$+"GL00",dom=*continue,end=*continue)old_glsParams_tpl$
                    redim glsCalendar$
                    glsCalendar.firm_id$=old_glsParams_tpl.firm_id$
                    glsCalendar.year$=old_glsParams_tpl.current_year$
                    glsCalendar.total_pers$=old_glsParams_tpl.total_pers$
                    glsCalendar.cal_start_date$=""
                    total_pers=num(glsCalendar.total_pers$)
                    for i=1 to total_pers
                        period_name$="period_name_"+str(i:"00")
                        field glsCalendar$,period_name$=field(old_glsParams_tpl$,period_name$)
                    next i
                    for i=1 to total_pers
                        abbr_name$="abbr_name_"+str(i:"00")
                        field glsCalendar$,abbr_name$=field(old_glsParams_tpl$,abbr_name$)
                    next i
                    for i=1 to total_pers
                        per_ending$="per_ending_"+str(i:"00")
                        field glsCalendar$,per_ending$=field(old_glsParams_tpl$,per_ending$)
                    next i
                    for i=1 to total_pers
                        locked_flag$="locked_flag_"+str(i:"00")
                        field glsCalendar$,locked_flag$=field(old_glsParams_tpl$,locked_flag$)
                    next i
                    for i=1 to total_pers
                        locked_date$="locked_date_"+str(i:"00")
                        field glsCalendar$,locked_date$=field(old_glsParams_tpl$,locked_date$)
                    next i

                    rem --- Calculate calendar start date based on last date of last period.
                    calendar_year=num(glsCalendar.year$)-1
                    begdate$=field(glsCalendar$,"per_ending_"+str(total_pers:"00"))
                    if begdate$(1,4)<glsCalendar.per_ending_01$ then calendar_year=calendar_year+1
                    rem --- Adjust last day of February for leap year
                    if begdate$(1,2)="02" then
                        if begdate$(3,2)="29" and !Calendar!.isLeapYear(calendar_year) then begdate$(3,2)="28"
                        if begdate$(3,2)="28" and Calendar!.isLeapYear(calendar_year) then begdate$(3,2)="29"
                    endif
                    julian=jul(calendar_year,num(begdate$(1,2)),num(begdate$(3,2)))+1
                    begdate$=date(julian:"%Yl%Mz%Dz")
                    glsCalendar.cal_start_date$=begdate$(5)

                    rem --- Write new GLS_CALENDAR record
                    glsCalendar$=field(glsCalendar$)
                    writerecord(glsCalendar_dev)glsCalendar$
                wend
            else
                rem --- Required file missing
                msg_id$="AD_FILE_MISSING"
                dim msg_tokens$[1]
                msg_tokens$[1]=old_glsParams$
                gosub disp_message
                err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_glsParams$+" *****"
                goto done
            endif
        endif

        rem --- If there are no prior year transactions in GLT_TRANSDETAIL (glt-06), then
        rem --- copy current fiscal year's calendar to prior year's fiscal calendar.

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": GLS_CALENDAR "+
:           Translate!.getTranslation("AON_PRIOR_YEAR","Prior Year")+" "+
:           Translate!.getTranslation("DDM_TABLES-GLS_CALENDAR-DD_ATTR_WINT","Fiscal Calendar")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
                
        read(glsParams_dev,key="",dom=*next)
        while 1
            readrecord(glsParams_dev,end=*break)glsParams$
            if glsParams.gl$+glsParams.sequence_00$<>"GL00" then continue
            prior_yr$=str(num(glsParams.current_year$)-1)
            gl_yr_closed$=glsParams.gl_yr_closed$
            if gl_yer_close$<>"Y" then prior_yr$=str(num(prior_yr$)-1)
            
            rem --- Copy current fiscal year's calendar only if there are no GLT_TRANSDETAIL transactions for the prior year.
            read(gltTransdetail_dev,key=glsParams.firm_id$+prior_yr$,knum="BY_TRANS_DATE",dom=*next)
            redim gltTransdetail$
            readrecord(gltTransdetail_dev,end=*next)gltTransdetail$
            if pos(prior_yr$=gltTransdetail.trns_date$)=1 then 
                log_text$="    "+Translate!.getTranslation("AON_SKIPPED","Skipped")+" "+
:                   Translate!.getTranslation("AON_FIRM","firm")+" "+glsParams.firm_id$+". "+
:                   Translate!.getTranslation("AON_TRANSACTIONS_ALREADY_EXISTS","Transactions already exists")+"."
                print(log_dev)log_text$
                continue
            endif
            rem --- Do NOT have GLT_TRANSDETAIL transactions, so copy current fiscal year's calendar.
            readrecord(glsCalendar_dev,key=glsParams.firm_id$+glsParams.current_year$,dom=*continue)glsCalendar$
            total_pers=num(glsCalendar.total_pers$)
            glsCalendar.year$=prior_yr$

            rem --- Adjust last day of February for leap year
            calendar_year=num(glsCalendar.year$)
            total_pers=num(glsCalendar.total_pers$)
            for i=1 to total_pers
                per_ending$="per_ending_"+str(i:"00")
                enddate$=field(glsCalendar$,per_ending$)
                if enddate$(1,2)="02" then
                    if enddate$(1,2)<glsCalendar.per_ending_01$(1,2) then calendar_year=calendar_year+1
                    if enddate$="0229" and !Calendar!.isLeapYear(calendar_year) then field glsCalendar$,per_ending$="0228"
                    if enddate$="0228" and Calendar!.isLeapYear(calendar_year) and glsParams.adjust_february then field glsCalendar$,per_ending$="0229"
                endif
            next i
            
            rem --- Calculate calendar start date based on last date of last period.
            calendar_year=num(glsCalendar.year$)-1
            begdate$=field(glsCalendar$,"per_ending_"+str(total_pers:"00"))
            if begdate$(1,4)<glsCalendar.per_ending_01$ then calendar_year=calendar_year+1
            julian=jul(calendar_year,num(begdate$(1,2)),num(begdate$(3,2)))+1
            begdate$=date(julian:"%Yl%Mz%Dz")
            glsCalendar.cal_start_date$=begdate$(5)

            rem --- Set or clear locked periods in prior year's fiscal calendar
            if gl_yr_closed$="Y" then
                for i=1 to total_pers
                    locked_flag$="locked_flag_"+str(i:"00")
                    field glsCalendar$,locked_flag$="Y"
                next i
                for i=1 to total_pers
                    locked_date$="locked_date_"+str(i:"00")
                    field glsCalendar$,locked_date$=date(0:"%Yd%Mz%Dz")
                next i
            else
                for i=1 to total_pers
                    locked_flag$="locked_flag_"+str(i:"00")
                    field glsCalendar$,locked_flag$="N"
                next i
                for i=1 to total_pers
                    locked_date$="locked_date_"+str(i:"00")
                    field glsCalendar$,locked_date$=""
                next i
                meter_text$="    *** "+Translate!.getTranslation("AON_WARNING","WARNING")+": "+
:                   Translate!.getTranslation("AON_PERIODS_NOT_LOCKED_IN_PRIOR_FISCAL_YEAR")+" "+
:                   Translate!.getTranslation("AON_FOR_","For ")+Translate!.getTranslation("AON_FIRM","firm")+
:                   " "+glsParams.firm_id$+". ***"
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$
            endif

            rem --- Write new GLS_CALENDAR record
            glsCalendar$=field(glsCalendar$)
            writerecord(glsCalendar_dev)glsCalendar$
        wend

        rem --- If there are no next year transactions in GLT_TRANSDETAIL (glt-06), then
        rem --- copy current fiscal year's calendar to next year's fiscal calendar.

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": GLS_CALENDAR "+
:           Translate!.getTranslation("AON_NEXT_YEAR","Next Year")+" "+
:           Translate!.getTranslation("DDM_TABLES-GLS_CALENDAR-DD_ATTR_WINT","Fiscal Calendar")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
                
        read(glsParams_dev,key="",dom=*next)
        while 1
            readrecord(glsParams_dev,end=*break)glsParams$
            if glsParams.gl$+glsParams.sequence_00$<>"GL00" then continue
            next_yr$=str(num(glsParams.current_year$)+1)
            gl_yr_closed$=glsParams.gl_yr_closed$
            if gl_yer_close$<>"Y" then next_yr$=str(num(next_yr$)-1)
            
            rem --- Copy current fiscal year's calendar only if there are no GLT_TRANSDETAIL transactions for the next year.
            read(gltTransdetail_dev,key=glsParams.firm_id$+next_yr$,knum="BY_TRANS_DATE",dom=*next)
            redim gltTransdetail$
            readrecord(gltTransdetail_dev,end=*next)gltTransdetail$
            if pos(next_yr$=gltTransdetail.trns_date$)=1 then 
                log_text$="    "+Translate!.getTranslation("AON_SKIPPED","Skipped")+" "+
:                   Translate!.getTranslation("AON_FIRM","firm")+" "+glsParams.firm_id$+". "+
:                   Translate!.getTranslation("AON_TRANSACTIONS_ALREADY_EXISTS","Transactions already exists")+"."
                print(log_dev)log_text$
                continue
            endif
            rem --- Do NOT have GLT_TRANSDETAIL transactions, so copy current fiscal year's calendar.
            readrecord(glsCalendar_dev,key=glsParams.firm_id$+glsParams.current_year$,dom=*continue)glsCalendar$
            total_pers=num(glsCalendar.total_pers$)
            glsCalendar.year$=next_yr$

            rem --- Adjust last day of February for leap year
            calendar_year=num(glsCalendar.year$)
            total_pers=num(glsCalendar.total_pers$)
            for i=1 to total_pers
                per_ending$="per_ending_"+str(i:"00")
                enddate$=field(glsCalendar$,per_ending$)
                if enddate$(1,2)="02" then
                    if enddate$(1,2)<glsCalendar.per_ending_01$(1,2) then calendar_year=calendar_year+1
                    if enddate$="0229" and !Calendar!.isLeapYear(calendar_year) then field glsCalendar$,per_ending$="0228"
                    if enddate$="0228" and Calendar!.isLeapYear(calendar_year) and glsParams.adjust_february then field glsCalendar$,per_ending$="0229"
                endif
            next i
            
            rem --- Calculate calendar start date based on last date of last period.
            calendar_year=num(glsCalendar.year$)-1
            begdate$=field(glsCalendar$,"per_ending_"+str(total_pers:"00"))
            if begdate$(1,4)<glsCalendar.per_ending_01$ then calendar_year=calendar_year+1
            julian=jul(calendar_year,num(begdate$(1,2)),num(begdate$(3,2)))+1
            begdate$=date(julian:"%Yl%Mz%Dz")
            glsCalendar.cal_start_date$=begdate$(5)

            rem --- Clear locked periods in next year's fiscal calendar
            for i=1 to total_pers
                locked_flag$="locked_flag_"+str(i:"00")
                field glsCalendar$,locked_flag$="N"
            next i
            for i=1 to total_pers
                locked_date$="locked_date_"+str(i:"00")
                field glsCalendar$,locked_date$=""
            next i

            rem --- Write new GLS_CALENDAR record
            glsCalendar$=field(glsCalendar$)
            writerecord(glsCalendar_dev)glsCalendar$
        wend

        rem --- Set Barista security for new Fiscal Calendar task (this will force use of Admin initially)
        sql_prep$=""
        sql_prep$=sql_prep$+"DELETE "
        sql_prep$=sql_prep$+"FROM adm_rolealias "
        sql_prep$=sql_prep$+"WHERE menu_option_id like 'GLS_CALENDAR' or menu_option_id like '%]_GLS_CALENDAR'"
        sql_chan=sqlunt
        sqlopen(sql_chan,err=*next)stbl("+DBNAME")
        sqlprep(sql_chan)sql_prep$
        sqlexec(sql_chan)

        rem --- Remove Barista security for deleted ADS_CALENDAR form/task
        sql_prep$=""
        sql_prep$=sql_prep$+"DELETE "
        sql_prep$=sql_prep$+"FROM adm_rolealias "
        sql_prep$=sql_prep$+"WHERE menu_option_id like 'TEMP_ADS_CALENDAR' or menu_option_id like '%]_ADS_CALENDAR'"
        sql_chan=sqlunt
        sqlopen(sql_chan,err=*next)stbl("+DBNAME")
        sqlprep(sql_chan)sql_prep$
        sqlexec(sql_chan)

        rem --- Need to build GLM_ACCTSUMMARY, GLM_ACCTBUDGET and GLM_BUDGETPLANS from old/source GLM_ACCTSUMMARY (glm-02)
        rem --- v1700_glm-02 marker file will never exist with OCJ, but might with DataPort
        conv_marker_name$="v1700_glm-02"
        conv_marker_file$=dataDir$+conv_marker_name$
        convmarkerFile!=new File(conv_marker_file$)
        use ::glo_DisplayColumns.aon::DisplayColumns
        if convCtrl!.getProperty("data_source")="OCJ" then
            rem --- Data upgraded via EM Update Wizard (OCJ)
            rem --- Need to build GLM_ACCTSUMMARY, GLM_ACCTBUDGET and GLM_BUDGETPLANS from old/source GLM_ACCTSUMMARY (glm-02)

            rem --- Open old/source GLM_ACCTSUMMARY (glm-02)
            oldStbl$="+OPDATA"
            oldFile$="glm-02"
            gosub get_path_to_old_file
            old_glm02$=oldPathToFile$
            open_success=0
            old_glm02_dev=unt
            open(old_glm02_dev,err=*next)old_glm02$; open_success=1
            if !open_success then
                rem --- Required file missing
                msg_id$="AD_FILE_MISSING"
                dim msg_tokens$[1]
                msg_tokens$[1]=old_opt11$
                gosub disp_message
                err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                           Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_glm02$+" *****"
                goto done
            endif

            rem --- Increment progress meter
            Translate!.getTranslation("AON_AND","and")
            meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": GLM_ACCTSUMMARY, GLM_ACCTBUDGET "+
:               Translate!.getTranslation("AON_AND","and")+" GLM_BUDGETPLANS "+
:               Translate!.getTranslation("AON_FROM_","From ")+old_glm02$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Get record template for old/source GLM_ACCTSUMMARY (glm-02) file
            old_table$="GLM_ACCTSUMMARY"
            tpl_found=0
            rem --- ddm_table_tpls and ddm_table_tpls$ previously initialized for old GLS_PARAMS
            findrecord(ddm_table_tpls,key=pad(old_table$,16),dom=*next)ddm_table_tpls$;tpl_found=1
            if tpl_found then
                dim old_glm02_tpl$:ddm_table_tpls.template$

                rem --- Clear and open new GLM_ACCTSUMMARY (glm-02) file
                num_files=1
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="GLM_ACCTSUMMARY", open_opts$[1]="IOTA"
                gosub open_tables
                glmAcctSummary_dev=num(open_chans$[1])
                dim glmAcctSummary$:open_tpls$[1]

                rem --- Loop thru old/source GLM_ACCTSUMMARY (glm-02) and write records to appropriate new file
                firm_id$=""
                read(old_glm02_dev,key="",dom=*next)
                while 1
                    readrecord(old_glm02_dev,end=*break)old_glm02_tpl$
                    if old_glm02_tpl.firm_id$<>firm_id$ then
                        firm_id$=old_glm02_tpl.firm_id$
                        displayColumns!=new DisplayColumns(firm_id$)
                    endif

                    if displayColumns!.getActBud(old_glm02_tpl.record_id$)="A" then
                        rem --- Actuals, GLM_ACCTSUMMARY
                        redim glmAcctSummary$
                        call pgmdir$+"adc_copyfile.aon",old_glm02_tpl$,glmAcctSummary$,status
                        if status then break
                        glmAcctSummary.year$=DisplayColumns!.getYear(old_glm02_tpl.record_id$)
                        writerecord(glmAcctSummary_dev)glmAcctSummary$
                    else
                        if pos(old_glm02_tpl.record_id$="012345") then
                            rem --- Budget, GLM_ACCTBUDGET
                            redim glmAcctBudget$
                            call pgmdir$+"adc_copyfile.aon",old_glm02_tpl$,glmAcctBudget$,status
                            if status then break
                            glmAcctBudget.year$=DisplayColumns!.getYear(old_glm02_tpl.record_id$)
                            writerecord(glmAcctBudget_dev)glmAcctBudget$
                        else
                            rem --- Planned budget, GLM_BUDGETPLANS
                            redim glmBudgetPlans$
                            call pgmdir$+"adc_copyfile.aon",old_glm02_tpl$,glmBudgetPlans$,status
                            if status then break
                            glmBudgetPlans.budget_code$=old_glm02_tpl.record_id$
                            writerecord(glmBudgetPlans_dev)glmBudgetPlans$
                        endif
                    endif

                wend
            else
                rem --- Required template missing
                err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                   " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+ope_table$+" *****"
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                meter_text$=err_msg$
                gosub disp_meter
                print(log_dev)meter_text$
                goto done
            endif
        else
            rem --- Data upgraded via DataPort
            rem --- Need to build GLM_ACCTBUDGET and GLM_BUDGETPLANS from GLM_ACCTSUMMARY

            rem --- Does conversion marker file exist for splitting GLM_ACCTSUMMARY (glm-02) into three files?
            if convmarkerFile!.exists() then
                rem --- Verify required files are present
                missingFiles!=BBjAPI().makeVector()
                requiredFiles!=BBjAPI().makeVector()
                requiredFiles!.addAll(java.util.Arrays.asList(convCtrl!.getProperty(conv_marker_name$(2)).split(";")))
                for i=0 to requiredFiles!.size()-1
                    file!=new File(stbl("+"+this_module$+"DATA")+requiredFiles!.get(i))
                    if !file!.exists() then
                        missingFiles!.addItem(requiredFiles!.get(i))
                    endif
                next i
                if missingFiles!.size()=0 then
        
                    rem --- Increment progress meter
                    meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": GLM_ACCTBUDGET "+
:                       Translate!.getTranslation("AON_AND","and")+" GLM_BUDGETPLANS "+
:                       Translate!.getTranslation("AON_FROM_","From ")+"GLM_ACCTSUMMARY"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    gosub disp_meter
                    print(log_dev)meter_text$

                    rem --- Open File(s)
                    num_files=1
                    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                    open_tables$[1]="GLM_ACCTSUMMARY", open_opts$[1]="OTA"
            
                    gosub open_tables
            
                    glmAcctSummary_dev=num(open_chans$[1])
                    dim glmAcctSummary$:open_tpls$[1]

                    rem --- Replace old RECORD_ID with correct YEAR, and split budgets into separate files
                    firm_id$=""
                    read(glmAcctSummary_dev,key="",dom=*next)
                    while 1
                        glmAcctSummary_key$=key(glmAcctSummary_dev,end=*break)
                        readrecord(glmAcctSummary_dev,end=*break)glmAcctSummary$
                        if glmAcctSummary.firm_id$<>firm_id$ then
                            firm_id$=glmAcctSummary.firm_id$
                            displayColumns!=new DisplayColumns(firm_id$)
                        endif
                        record_id$=cvs(glmAcctSummary.year$,2)
                        if len(record_id$)<>1 then continue
        
                        if displayColumns!.getActBud(record_id$)="A" then
                            rem --- Actuals, GLM_ACCTSUMMARY
                            glmAcctSummary.year$=DisplayColumns!.getYear(record_id$)
                            writerecord(glmAcctSummary_dev)glmAcctSummary$
                        else
                            if pos(record_id$="135") then
                                rem --- Budget, GLM_ACCTBUDGET
                                rem --- NOTE: Can write glmAccSummary$ record directly to glm_acctbudget file
                                rem --- since templates are the same for both files.
                                glmAcctSummary.year$=DisplayColumns!.getYear(record_id$)
                                writerecord(glmAcctBudget_dev)glmAcctSummary$
                            else
                                rem --- Planned budget, GLM_BUDGETPLANS
                                redim glmBudgetPlans$
                                call pgmdir$+"adc_copyfile.aon",glmAcctSummary$,glmBudgetPlans$,status
                                if status then break
                                glmBudgetPlans.budget_code$=record_id$
                                writerecord(glmBudgetPlans_dev)glmBudgetPlans$
                            endif
                        endif

                        remove(glmAcctSummary_dev,key=glmAcctSummary_key$)
                    wend
                else
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=missingFiles!.get(0)
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                               Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+missingFiles!.get(0)+" *****"
                    goto done
                endif
            else
                rem --- Increment progress meter
                meter_text$=Translate!.getTranslation("AON_CONV_MARKER_NOT_FOUND","Conversion marker file not found")+": "+conv_marker_file$
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$
            endif
        endif

        if status=0 then
            rem --- Conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+convCtrl!.getProperty(conv_marker_name$(2))
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Delete conversion marker file
            if convmarkerFile!.delete() then
                rem --- Increment progress meter
                meter_text$=Translate!.getTranslation("AON_CONV_MARKER_DELETED","Conversion marker file deleted")+": "+conv_marker_file$
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$
            endif
        else
            rem --- Conversion did NOT complete successfully, exit with error message
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+convCtrl!.getProperty(conv_marker_name$(2))+" *****"
            goto done
        endif

        rem --- Does conversion marker file exist for converting REVISION_SRC in GLM_BUDGETMASTER (glm-08)?
        rem --- Needs a marker file to prevent converting more than once, which would scramble data.
        conv_marker_name$="v1700_glm-08"
        conv_marker_file$=dataDir$+conv_marker_name$
        convmarkerFile!=new File(conv_marker_file$)
        if convmarkerFile!.exists() then
            rem --- Verify required files are present
            missingFiles!=BBjAPI().makeVector()
            requiredFiles!=BBjAPI().makeVector()
            requiredFiles!.addAll(java.util.Arrays.asList(convCtrl!.getProperty(conv_marker_name$(2)).split(";")))
            for i=0 to requiredFiles!.size()-1
                file!=new File(stbl("+"+this_module$+"DATA")+requiredFiles!.get(i))
                if !file!.exists() then
                    missingFiles!.addItem(requiredFiles!.get(i))
                endif
            next i
            if missingFiles!.size()=0 then
                rem --- Convert 3-char REVISION_SRC in GLM_BUDGETMASTER (glm-08) to 6-chars (without actual or budget flag)
        
                rem --- Increment progress meter
                meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": GLM_BUDGETMASTER"
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$

                rem --- Open File(s)
                num_files=1
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="GLM_BUDGETMASTER", open_opts$[1]="OTA"
        
                gosub open_tables
        
                glmBudgetMaster_dev=num(open_chans$[1])
                dim glmBudgetMaster$:open_tpls$[1]

                rem --- Convert 1-char budget_code + 1-char actual_or_budget +1-char amt_or_units REVISION_SRC
                rem --- into 5-char budget_code + 1-char amt_or_units REVISION_SRC.
                read(glmBudgetMaster_dev,key="",dom=*next)
                while 1
                    readrecord(glmBudgetMaster_dev,end=*break)glmBudgetMaster$
                    budgetCode$=pad(glmBudgetMaster.revision_src$(1,1),len(glmBudgetMaster.budget_code$))
                    amtOrUnits$=glmBudgetMaster.revision_src$(3,1)
                    glmBudgetMaster.revision_src$=budgetCode$+amtOrUnits$
                    writerecord(glmBudgetMaster_dev)glmBudgetMaster$
                wend

                rem --- Conversion completed successfully
                rem --- Increment progress meter
                meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                   Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+convCtrl!.getProperty(conv_marker_name$(2))
                meter_proc_recs=meter_proc_recs+1
                meter_action$="MTR-LST"
                gosub disp_meter
                print(log_dev)meter_text$

                rem --- Delete conversion marker file
                if convmarkerFile!.delete() then
                    rem --- Increment progress meter
                    meter_text$=Translate!.getTranslation("AON_CONV_MARKER_DELETED","Conversion marker file deleted")+": "+conv_marker_file$
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    gosub disp_meter
                    print(log_dev)meter_text$
                endif
            else
                rem --- Required file missing
                msg_id$="AD_FILE_MISSING"
                dim msg_tokens$[1]
                msg_tokens$[1]=missingFiles!.get(0)
                gosub disp_message
                err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+missingFiles!.get(0)+" *****"
                goto done
            endif
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_MARKER_NOT_FOUND","Conversion marker file not found")+": "+conv_marker_file$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif

        rem --- Initialize GL data file changes implemented during minor releases of v17
        rem --- As of v17.10, DataPort handles initializing GLM_ACCT.MEMO_1024 from GLM_ACCTCOMMENTS (glm-09)
        if convCtrl!.getProperty("data_source")="OCJ" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Make sure GLM_ACCTCOMMENTS (glm-09) exists
            open_success=0
            glm09_dev=unt
            open(glm09_dev,err=*next)dataDir$+"/glm-09"; open_success=1
            if !open_success then
                rem --- Copy GLM_ACCTCOMMENTS (glm-09) from old source to the new install

                rem --- Open ddm_tables and ddm_table_tpls in new install
                num_files=2
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"
                open_tables$[2]="DDM_TABLE_TPLS",open_opts$[2]="OTA"
                gosub open_tables
                new_ddmTables=num(open_chans$[1]);dim new_ddmTables$:open_tpls$[1]
                new_ddmTableTpls=num(open_chans$[2]);dim new_ddmTableTpls$:open_tpls$[2]
    
                rem --- Open ddm_tables in old source
                old_ddm_table$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_tables.dat"
                open_success=0
                old_ddmTables=unt
                open(old_ddmTables,err=*next)old_ddm_table$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table$+" *****"
                    goto done
                endif

                rem --- Open ddm_table_tpls in old source
                old_ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                open_success=0
                old_ddmTableTpls=unt
                open(old_ddmTableTpls,err=*next)old_ddm_table_tpls$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table_tpls$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table_tpls$+" *****"
                    goto done
                endif
    
                rem --- Get table definition for old source GLM_ACCTCOMMENTS file, and add it to new install
                oldFile$="GLM_ACCTCOMMENTS"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
    
                rem --- Get record template for old source GLM_ACCTCOMMENTS file, and add it to new install
                oldFile$="GLM_ACCTCOMMENTS"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                sourceFileVec!=BBjAPI().makeVector()
                tablealiasVec!=BBjAPI().makeVector()
                sourceFileVec!.addItem("glm-09");tableAliasVec!.addItem("GLM_ACCTCOMMENTS")
                for source=0 to sourcefileVec!.size()-1
                    rem --- Does source file exist?
                    oldStbl$="+GLDATA"
                    oldFile$=sourceFileVec!.get(source)
                    tableAlias$=tableAliasVec!.get(source)
                    gosub get_path_to_old_file
                    source_file$=oldPathToFile$
                    open_success=0
                    source_dev=unt
                    open(source_dev,err=*next)source_file$; open_success=1
                    if open_success then
                
                        rem --- Open file in new data dictionary
                        num_files=1
                        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                        open_tables$[1]=tableAlias$, open_opts$[1]="OTA"
                        gosub open_tables
                        target_dev=num(open_chans$[1])
                        
                        rem --- Copy source records to target
                        read(source_dev,key="",dom=*next)
                        while 1
                            readrecord(source_dev,end=*break)record$
                            writerecord(target_dev)record$
                        wend
                    endif
                next source
            endif
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": GLM_ACCT.MEMO_1024 "+
:           Translate!.getTranslation("AON_FROM_","From ")+"GLM_ACCTCOMMENTS"
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Execute GL upgrade conversion utility for minor releases of v17
        theFirm$=""
        call pgmdir$+"glc_v17initMinorRev.aon",theFirm$,rdForm!,status
        if status=0 then
            rem --- Conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": GLM_ACCTCOMMENTS"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Conversion did NOT complete successfully, exit with error message
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": GLM_ACCTCOMMENTS"+" *****"
            goto done
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- Initialize IV data file changes implemented during minor releases of v17

    this_module$="IV"
    if installMap!.get(this_module$)="Y" then 
        rem --- As of v17.10, DataPort handles initializing IVM_ITEMMAST.MEMO_1024 from IVM_ITEMCMTS (ivm-09)
        if convCtrl!.getProperty("data_source")="OCJ" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Make sure IVM_ITEMCMTS (ivm-09) exists
            open_success=0
            ivm09_dev=unt
            open(ivm09_dev,err=*next)dataDir$+"/ivm-09"; open_success=1
            if !open_success then
                rem --- Copy IVM_ITEMCMTS (ivm-09) from old source to the new install

                rem --- Open ddm_tables and ddm_table_tpls in new install
                num_files=2
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"
                open_tables$[2]="DDM_TABLE_TPLS",open_opts$[2]="OTA"
                gosub open_tables
                new_ddmTables=num(open_chans$[1]);dim new_ddmTables$:open_tpls$[1]
                new_ddmTableTpls=num(open_chans$[2]);dim new_ddmTableTpls$:open_tpls$[2]
    
                rem --- Open ddm_tables in old source
                old_ddm_table$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_tables.dat"
                open_success=0
                old_ddmTables=unt
                open(old_ddmTables,err=*next)old_ddm_table$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table$+" *****"
                    goto done
                endif

                rem --- Open ddm_table_tpls in old source
                old_ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                open_success=0
                old_ddmTableTpls=unt
                open(old_ddmTableTpls,err=*next)old_ddm_table_tpls$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table_tpls$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table_tpls$+" *****"
                    goto done
                endif
    
                rem --- Get table definition for old source IVM_ITEMCMTS file, and add it to new install
                oldFile$="IVM_ITEMCMTS"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
    
                rem --- Get record template for old source IVM_ITEMCMTS file, and add it to new install
                oldFile$="IVM_ITEMCMTS"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                sourceFileVec!=BBjAPI().makeVector()
                tablealiasVec!=BBjAPI().makeVector()
                sourceFileVec!.addItem("ivm-09");tableAliasVec!.addItem("IVM_ITEMCMTS")
                for source=0 to sourcefileVec!.size()-1
                    rem --- Does source file exist?
                    oldStbl$="+IVDATA"
                    oldFile$=sourceFileVec!.get(source)
                    tableAlias$=tableAliasVec!.get(source)
                    gosub get_path_to_old_file
                    source_file$=oldPathToFile$
                    open_success=0
                    source_dev=unt
                    open(source_dev,err=*next)source_file$; open_success=1
                    if open_success then
                
                        rem --- Open file in new data dictionary
                        num_files=1
                        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                        open_tables$[1]=tableAlias$, open_opts$[1]="OTA"
                        gosub open_tables
                        target_dev=num(open_chans$[1])
                        
                        rem --- Copy source records to target
                        read(source_dev,key="",dom=*next)
                        while 1
                            readrecord(source_dev,end=*break)record$
                            writerecord(target_dev)record$
                        wend
                    endif
                next source
            endif
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": IVM_ITEMMAST.MEMO_1024 "+
:           Translate!.getTranslation("AON_FROM_","From ")+"IVM_ITEMCMTS"
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Execute IV upgrade conversion utility for minor releases of v17
        theFirm$=""
        call pgmdir$+"ivc_v17initMinorRev.aon",theFirm$,rdForm!,status
        if status=0 then
            rem --- Conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": IVM_ITEMCMTS"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Conversion did NOT complete successfully, exit with error message
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": IVM_ITEMCMTS"+" *****"
            goto done
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- Initialize OP data file changes implemented during minor releases of v17

    this_module$="OP"
    if installMap!.get(this_module$)="Y" then 
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- As of v17.10, DataPort handles initializing OPC_MESSAGE from OPC_MSG_HDR (opm-04) and OPC_MSG_DET (opm-14)
        if convCtrl!.getProperty("data_source")="OCJ" then

            rem --- Make sure OPC_MSG_HDR (opm-04) and OPC_MSG_DET (opm-14) are present
            open_success=0
            opm04_dev=unt
            open(opm04_dev,err=*next)dataDir$+"/opm-04"; open_success=1
            if !open_success then
                rem --- Copy OPC_MSG_HDR (opm-04) and OPC_MSG_DET (opm-14) from old source to the new install

                rem --- Open ddm_tables and ddm_table_tpls in new install
                num_files=2
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"
                open_tables$[2]="DDM_TABLE_TPLS",open_opts$[2]="OTA"
                gosub open_tables
                new_ddmTables=num(open_chans$[1]);dim new_ddmTables$:open_tpls$[1]
                new_ddmTableTpls=num(open_chans$[2]);dim new_ddmTableTpls$:open_tpls$[2]
    
                rem --- Open ddm_tables in old source
                old_ddm_table$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_tables.dat"
                open_success=0
                old_ddmTables=unt
                open(old_ddmTables,err=*next)old_ddm_table$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                           Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table$+" *****"
                    goto done
                endif

                rem --- Open ddm_table_tpls in old source
                old_ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                open_success=0
                old_ddmTableTpls=unt
                open(old_ddmTableTpls,err=*next)old_ddm_table_tpls$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table_tpls$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                           Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table_tpls$+" *****"
                    goto done
                endif
    
                rem --- Get table definition for old source OPC_MSG_HDR file, and add it to new install
                oldFile$="OPC_MSG_HDR"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
                    
                rem --- Get table definition for old source OPC_MSG_DET file, and add it to new install
                oldFile$="OPC_MSG_DET"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
    
                rem --- Get record template for old source OPC_MSG_HDR file, and add it to new install
                oldFile$="OPC_MSG_HDR"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                rem --- Get record template for old source OPC_MSG_DET file, and add it to new install
                oldFile$="OPC_MSG_DET"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                sourceFileVec!=BBjAPI().makeVector()
                tablealiasVec!=BBjAPI().makeVector()
                sourceFileVec!.addItem("opm-04");tableAliasVec!.addItem("OPC_MSG_HDR")
                sourceFileVec!.addItem("opm-14");tableAliasVec!.addItem("OPC_MSG_DET")
                for source=0 to sourcefileVec!.size()-1
                    rem --- Does source file exist?
                    oldStbl$="+OPDATA"
                    oldFile$=sourceFileVec!.get(source)
                    tableAlias$=tableAliasVec!.get(source)
                    gosub get_path_to_old_file
                    source_file$=oldPathToFile$
                    open_success=0
                    source_dev=unt
                    open(source_dev,err=*next)source_file$; open_success=1
                    if open_success then
                
                        rem --- Open file in new data dictionary
                        num_files=1
                        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                        open_tables$[1]=tableAlias$, open_opts$[1]="OTA"
                        gosub open_tables
                        target_dev=num(open_chans$[1])
                        
                        rem --- Copy source records to target
                        read(source_dev,key="",dom=*next)
                        while 1
                            readrecord(source_dev,end=*break)record$
                            writerecord(target_dev)record$
                        wend
                    endif
                next source
            endif
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": OPC_MESSAGE "+
:           Translate!.getTranslation("AON_FROM_","From ")+"OPC_MSG_HDR "+
:           Translate!.getTranslation("AON_AND","and")+" OPC_MSG_DET"
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Execute OP upgrade conversion utility for minor releases of v17
        theFirm$=""
        call pgmdir$+"opc_v17initMinorRev.aon",theFirm$,rdForm!,status
        if status=0 then
            rem --- Conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": OPC_MESSAGE"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Conversion did NOT complete successfully, exit with error message
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": OPC_MESSAGE"+" *****"
            goto done
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- Initialize PO data file changes implemented during minor releases of v17

    this_module$="PO"
    if installMap!.get(this_module$)="Y" then 
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- As of v17.10, DataPort handles initializing POC_MESSAGE from POC_MSGCODE (pom-04) and PO_MSGLINE (pom-14)
        if convCtrl!.getProperty("data_source")="OCJ" then

            rem --- Make sure POC_MSGCODE (pom-04) and PO_MSGLINE (pom-14)
            open_success=0
            pom04_dev=unt
            open(pom04_dev,err=*next)dataDir$+"/pom-04"; open_success=1
            if !open_success then
                rem --- Copy POC_MSGCODE (pom-04) and PO_MSGLINE (pom-14) from old source to the new install

                rem --- Open ddm_tables and ddm_table_tpls in new install
                num_files=2
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"
                open_tables$[2]="DDM_TABLE_TPLS",open_opts$[2]="OTA"
                gosub open_tables
                new_ddmTables=num(open_chans$[1]);dim new_ddmTables$:open_tpls$[1]
                new_ddmTableTpls=num(open_chans$[2]);dim new_ddmTableTpls$:open_tpls$[2]
    
                rem --- Open ddm_tables in old source
                old_ddm_table$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_tables.dat"
                open_success=0
                old_ddmTables=unt
                open(old_ddmTables,err=*next)old_ddm_table$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table$+" *****"
                    goto done
                endif

                rem --- Open ddm_table_tpls in old source
                old_ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                open_success=0
                old_ddmTableTpls=unt
                open(old_ddmTableTpls,err=*next)old_ddm_table_tpls$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table_tpls$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table_tpls$+" *****"
                    goto done
                endif
    
                rem --- Get table definition for old source POC_MSGCODE file, and add it to new install
                oldFile$="POC_MSGCODE"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
                    
                rem --- Get table definition for old source POC_MSGLINE file, and add it to new install
                oldFile$="POC_MSGLINE"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
    
                rem --- Get record template for old source POC_MSGCODE file, and add it to new install
                oldFile$="POC_MSGCODE"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                rem --- Get record template for old source POC_MSGLINE file, and add it to new install
                oldFile$="POC_MSGLINE"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                sourceFileVec!=BBjAPI().makeVector()
                tablealiasVec!=BBjAPI().makeVector()
                sourceFileVec!.addItem("pom-04");tableAliasVec!.addItem("POC_MSGCODE")
                sourceFileVec!.addItem("pom-14");tableAliasVec!.addItem("POC_MSGLINE")
                for source=0 to sourcefileVec!.size()-1
                    rem --- Does source file exist?
                    oldStbl$="+PODATA"
                    oldFile$=sourceFileVec!.get(source)
                    tableAlias$=tableAliasVec!.get(source)
                    gosub get_path_to_old_file
                    source_file$=oldPathToFile$
                    open_success=0
                    source_dev=unt
                    open(source_dev,err=*next)source_file$; open_success=1
                    if open_success then
                
                        rem --- Open file in new data dictionary
                        num_files=1
                        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                        open_tables$[1]=tableAlias$, open_opts$[1]="OTA"
                        gosub open_tables
                        target_dev=num(open_chans$[1])
                        
                        rem --- Copy source records to target
                        read(source_dev,key="",dom=*next)
                        while 1
                            readrecord(source_dev,end=*break)record$
                            writerecord(target_dev)record$
                        wend
                    endif
                next source
            endif
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": POC_MESSAGE "+
:           Translate!.getTranslation("AON_FROM_","From ")+"POC_MSGCODE "+
:           Translate!.getTranslation("AON_AND","and")+" POC_MSGLINE"
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Execute PO upgrade conversion utility for minor releases of v17
        theFirm$=""
        call pgmdir$+"poc_v17initMinorRev.aon",theFirm$,rdForm!,status
        if status=0 then
            rem --- Conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": POC_MESSAGE"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Conversion did NOT complete successfully, exit with error message
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": POC_MESSAGE"+" *****"
            goto done
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- Initialize GL data file changes implemented during minor releases of v17

    this_module$="SF"
    if installMap!.get(this_module$)="Y" then 
        rem --- As of v17.10, DataPort handles initializing SFE_WOMASTR.MEMO_1024 from SFE_WOCOMNT (sfe-07)
        if convCtrl!.getProperty("data_source")="OCJ" then

            rem --- Increment progress meter
            meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:               Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$

            rem --- Make sure SFE_WOCOMNT (sfe-07) exists
            open_success=0
            sfe07_dev=unt
            open(sfe07_dev,err=*next)dataDir$+"/sfe-07"; open_success=1
            if !open_success then
                rem --- Copy SFE_WOCOMNT (sfe-07) from old source to the new install

                rem --- Open ddm_tables and ddm_table_tpls in new install
                num_files=2
                dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"
                open_tables$[2]="DDM_TABLE_TPLS",open_opts$[2]="OTA"
                gosub open_tables
                new_ddmTables=num(open_chans$[1]);dim new_ddmTables$:open_tpls$[1]
                new_ddmTableTpls=num(open_chans$[2]);dim new_ddmTableTpls$:open_tpls$[2]
    
                rem --- Open ddm_tables in old source
                old_ddm_table$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_tables.dat"
                open_success=0
                old_ddmTables=unt
                open(old_ddmTables,err=*next)old_ddm_table$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table$+" *****"
                    goto done
                endif

                rem --- Open ddm_table_tpls in old source
                old_ddm_table_tpls$=convCtrl!.getProperty("barista_source")+"/barista/sys/data/ddm_table_tpls.dat"
                open_success=0
                old_ddmTableTpls=unt
                open(old_ddmTableTpls,err=*next)old_ddm_table_tpls$; open_success=1
                if !open_success then
                    rem --- Required file missing
                    msg_id$="AD_FILE_MISSING"
                    dim msg_tokens$[1]
                    msg_tokens$[1]=old_ddm_table_tpls$
                    gosub disp_message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                       Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+old_ddm_table_tpls$+" *****"
                    goto done
                endif
    
                rem --- Get table definition for old source SFE_WOCOMNT file, and add it to new install
                oldFile$="SFE_WOCOMNT"
                table_found=0
                findrecord(old_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$;table_found=1
                if table_found then
                    writerecord(new_ddmTables,key=pad(cvs(oldFile$,4),16),dom=*next)table_rec$
                else
                    rem --- Required table missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TABLE_NOT_FOUND","Table not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif
    
                rem --- Get record template for old source SFE_WOCOMNT file, and add it to new install
                oldFile$="SFE_WOCOMNT"
                tpl_found=0
                findrecord(old_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$;tpl_found=1
                if tpl_found then
                    writerecord(new_ddmTableTpls,key=pad(cvs(oldFile$,4),16),dom=*next)tpl_rec$
                else
                    rem --- Required template missing
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+Translate!.getTranslation("AON_VERSION","Verion")+" "+convCtrl!.getProperty("start_version")+
:                       " "+Translate!.getTranslation("AON_TEMPLATE_NOT_FOUND","Template not found")+": "+oldFile$+" *****"
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    meter_text$=err_msg$
                    gosub disp_meter
                    print(log_dev)meter_text$
                    goto done
                endif

                sourceFileVec!=BBjAPI().makeVector()
                tablealiasVec!=BBjAPI().makeVector()
                sourceFileVec!.addItem("SFE-07");tableAliasVec!.addItem("SFE_WOCOMNT")
                for source=0 to sourcefileVec!.size()-1
                    rem --- Does source file exist?
                    oldStbl$="+SFDATA"
                    oldFile$=sourceFileVec!.get(source)
                    tableAlias$=tableAliasVec!.get(source)
                    gosub get_path_to_old_file
                    source_file$=oldPathToFile$
                    open_success=0
                    source_dev=unt
                    open(source_dev,err=*next)source_file$; open_success=1
                    if open_success then
                
                        rem --- Open file in new data dictionary
                        num_files=1
                        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
                        open_tables$[1]=tableAlias$, open_opts$[1]="OTA"
                        gosub open_tables
                        target_dev=num(open_chans$[1])
                        
                        rem --- Copy source records to target
                        read(source_dev,key="",dom=*next)
                        while 1
                            readrecord(source_dev,end=*break)record$
                            writerecord(target_dev)record$
                        wend
                    endif
                next source
            endif
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": SFE_WOMASTR.MEMO_1024 "+
:           Translate!.getTranslation("AON_FROM_","From ")+"SFE_WOCOMNT"
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Execute SF upgrade conversion utility for minor releases of v17
        theFirm$=""
        call pgmdir$+"sfc_v17initMinorRev.aon",theFirm$,rdForm!,status
        if status=0 then
            rem --- Conversion completed successfully
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": SFE_WOCOMNT"
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        else
            rem --- Conversion did NOT complete successfully, exit with error message
            err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:               Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": SFE_WOCOMNT"+" *****"
            goto done
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:           Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif
	
done: rem --- Done, close things up

    rem --- Complete progress meter
    completed_successfully=0
    if err_msg$<>"" then
        meter_text$=err_msg$
    else
        meter_text$=Translate!.getTranslation("AON_CONV_COMPLETED","Conversions completed successfully")
        completed_successfully=1
    endif
    meter_proc_recs=meter_total_recs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
    rem --- Stop progress meter
    meter_text$=""
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Complete and close log file
    print(log_dev)
    print(log_dev)"v1700conversion log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    rem --- Close opened files
    if ddm_table_tpls then close(ddm_table_tpls,err=*next)
    if old_glsParams_dev then close(old_glsParams_dev,err=*next)
    if old_glm02_dev then close(old_glm02_dev,err=*next)
    if old_ddmTables then close(old_ddmTables,err=*next)
    if old_ddmTableTpls then close(old_ddmTableTpls,err=*next)

    if completed_successfully then conv_status=0; rem --- no errors encountered
	goto std_exit

get_path_to_old_file: rem --- Locate data directory in old Addon installation
    rem --- IN: oldStbl$ - STBL in old addon.syn that points to the data directory where the old file is located
    rem --- IN: oldFile$ - name of old file to get path for
    rem --- OUT: oldPathToFile$ - full path to requested file, including the file name
    oldPathToFile$=oldFile$

    rem --- Open old aon/config/addon.syn
    open_success=0
    old_addonsyn_dev=unt
    open(old_addonsyn_dev,isz=-1,err=*next)convCtrl!.getProperty("addon_source")+"/aon/config/addon.syn"; open_success=1
    if !open_success then return

    rem --- Get specified data directory from old addon.syn
    key$="=SET "+oldStbl$+"="
    while 1
        read(old_addonsyn_dev,end=*break)record$
        if(pos(key$=record$)) then
            xpos=pos(key$=record$)
            oldPathToFile$=record$(xpos+len(key$))+oldFile$
            break
        endif
    wend
    close(old_addonsyn_dev)

    return

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/v1700conversion_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"v1700conversion log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!
    sysGUI!=BBjAPI().getSysGui()

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    
    exit

rem #endinclude std_exit.src

    end
