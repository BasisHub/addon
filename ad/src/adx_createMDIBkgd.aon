rem ==========================================================================
rem --- adx_createMDIBkgd.aon 
rem --- Run from Barista Utilities > Application Syswindow to create an MDI Background image from the current +MDI_TITLE.
rem --- Works in conjunction with barista/bar_mdi_custom.txt file. Change extension to .bbj, modify to use MDI.png and place at desired location
rem --- 
rem --- AddonSoftware
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
rem ==========================================================================

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    call stbl("+DIR_SYP")+"bas_process_beg.bbj",stbl("+USER_ID"),rd_table_chans$[all]

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$
    milestone=1

rem --- Get the MDI title and create an image file to use as MDI Background Image

    declare MDIBackground MDIImage!
    MDIImage! = new MDIBackground()
    
    mdi_title$="AddonSoftware"
    mdi_title$=stbl("+MDI_TITLE",err=*next)
    imFile$="MDI.png"
    imFile$=stbl("+MDI_BKGD_IMG",err=*next)
    loc$=dsk("")+dir("")
   
    MDIImage!.createMDIBackground(mdi_title$,loc$,imFile$)
    
done: rem --- All done

    msg_id$="UPDATE_COMPLETE"
    gosub disp_message

    mdi! = bbjapi().getMDI()
    loc=3
    loc = num(stbl("+MDI_BKGD_LOC",err=*next),err=*next)

    mdi!.setBackgroundImageFile(loc,imFile$) 
    
    goto std_exit

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return
   
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
	release

rem #endinclude std_exit.src

rem /**
rem  * Class to create an MDI Background image from the current +MDI_TITLE.
rem  */
    use java.io.File
    use java.awt.Color
    use java.awt.Font
    use java.awt.FontMetrics
    use java.awt.Graphics2D
    use java.awt.image.BufferedImage
    use java.awt.RenderingHints
    use javax.imageio.ImageIO

    class public MDIBackground
        
        field private BBjInt imWidth%
        field private BBjInt imHeight%
        field private BBjString fontName$
        field private BBjInt fontWeight%
        field private BBjInt fontSize%

        method public MDIBackground()
    
            #imHeight% = 75
            #fontName$ = "Segoe Print"
            #fontWeight% = Font.BOLD
            #fontSize% = 36

            ScreenSize! = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
            #imWidth% = ScreenSize!.width - 50
            
        methodend        


        method public void createMDIBackground(BBjString mdi_title$, BBjString loc$, BBjString imFile$)

            seterr method_error
      
            rem TYPE_INT_ARGB specifies the image format: 8-bit RGBA packed into integer pixels
            bi! = new BufferedImage(#imWidth%, #imHeight%, BufferedImage.TYPE_INT_ARGB)
            ig2! = bi!.createGraphics()
            ig2!.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON)
            font! = new Font(#fontName$, #fontWeight%, #fontSize%)
            ig2!.setFont(font!)
            fontMetrics! = ig2!.getFontMetrics()
            stringWidth% = fontMetrics!.stringWidth(mdi_title$)
            stringHeight% = fontMetrics!.getAscent()
            ig2!.setPaint(Color.black)
            ig2!.drawString(mdi_title$, (#imWidth% - stringWidth%)-10, #imHeight% / 2 + stringHeight% / 4)

            savedMDIFile!=new File(loc$+imFile$,err=*next)
            if savedMDIFile!.exists() then
                rem --- Keep copy of previously created MDI.png
                svName$=loc$+imFile$+".bak1"
                counter=0
                while 1
                    rem --- find a name that doesn't exist
                    declare File aFile!
                    aFile! = new File(svName$)
                    if !aFile!.exists() then break
                    counter=counter+1
                    svName$=loc$+imFile$+".bak"+str(counter)
                wend
                rename savedMDIFile!.getAbsolutePath() to aFile!.getAbsolutePath(), err=*next
            endif

            ImageIO.write(bi!, "PNG", new File(loc$+imFile$))

        methodret
            
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
    classend
    
    end