rem ------------------------------------------------------
rem --- adx_dumparray.aon: Display an array's contents ---
rem ------------------------------------------------------
rem 
rem  Copyright 2003-2009, BASIS International
rem 
rem  Author:  Knute Snortum <ksnortum@basis.com> 
rem 
rem  Usage:   call "adx_dumparray.aon",a$[all]
rem           call "adx_dumparray.aon",a[all]
rem 
rem  Version: 1.0
rem 

rem --- String or numeric array?

    strs = 1
    seterr try_strings
    enter array[all]
    seterr 0
    strs = 0
    goto inits

try_strings: 

    seterr 0
    enter array$[all]

inits: rem --- Inits

    print 'push','cs'

    dim d$:"dims:i(1),d0elem:i(4),d0base:i(4),d1elem:i(4),d1base:i(4),d2elem:i(4),d2base:i(4)"

    if strs then  
        d$ = dims( array$[all],err=array_not_def ) 
    else  
        d$ = dims( array[all],err=array_not_def )
    endif

    print "Array is [", str( d.d0base ), "-", str( d.d0base+d.d0elem-1 ), 
    if d.dims>1 then print ",", str( d.d1base ), "-", str( d.d1base+d.d1elem-1 ), 
    if d.dims>2 then print ",", str( d.d2base ), "-", str( d.d2base+d.d2elem-1 ), 
    print "]"

rem --- Main loop

    line = 1
    for i = d.d0base to d.d0base+d.d0elem-1
        if d.dims=1 then  
            if strs then  
                elem$ = fnformat$( array$[i] ) 
            else  
                elem$ = str( array[i] )
            endif
            
            print "[", str( i ), "] ", elem$
            gosub pause
            continue
        endif
        
        for j = d.d1base to d.d1base+d.d1elem-1
            if d.dims=2 then  
                if strs then  
                    elem$ = fnformat$( array$[i, j] ) 
                else  
                    elem$ = str( array[i, j] )
                endif
                
                print "[", str( i ), ",", str( j ), "] ", elem$
                gosub pause
                continue
            endif
            
            for k = d.d2base to d.d2base+d.d2elem-1
                if strs then  
                    elem$ = fnformat$( array$[i, j, k] ) 
                else  
                    elem$ = str( array[i, j, k] )
                endif
                
                print "[", str( i ), ",", str( j ), ",", str( k ), "] ", elem$
                gosub pause
            next k
        next j
    next i
    
    goto the_end


array_not_def: rem --- Array not defined

    print "Array not defined"
    goto the_end

pause: rem --- Pause

    line = line+1
    if line<22 then  goto pause_done
    input "<Enter> to continue, <F4> to quit ", *, 'up', 'cl', 
    if ctl=4 then  exitto the_end
    line = 0

pause_done: 
    return 

rem --- Format output

    def fnformat$( q$ )
        if pos( " ">q$ ) or pos( "~"<q$ ) then  
            q$ = "$" + hta( q$ ) + "$" 
        else  
            q$ = "->" + q$ + "<-"
        endif
        return q$
    fnend

the_end: rem --- This is the end

    input "<Enter> to continue: ", *
    print 'pop',
    exit 

    end
