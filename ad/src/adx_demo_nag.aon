rem ==========================================================================
rem --- adx_demo_nag.aon
rem --- A non-completing Auto-Launch task that pops a friendly nag when launching 
rem --- Barista/Addon in the <bbj_home> directory to remind users that they're 
rem --- running the demo/eval copy.
rem --- 
rem --- AddonSoftware Version 11.11
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
rem ==========================================================================

    setesc std_error
    seterr std_error

rem --- Get program aurgements

    if argc>1
        for curr_argv=1 to argc-1
            temp_argv$=argv(curr_argv)
            if pos("-u"=temp_argv$)=1 user_id$=temp_argv$(3);rem User ID
        next curr_argv
    endif

    if user_id$=""
        use ::sys/prog/bao_security.bbj::Security
        user_id$=Security.getURLUser()
    endif

rem --- Initializations

    pgmdir$=stbl("+DIR_PGM",err=*next)
    bypass_nag$=stbl("+BYPASS_DEMO_NAG",err=*next)

rem --- Open File(s)
	
	num_files=3
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="DDM_SYSTEMS", open_opts$[1]="OTA"
	open_tables$[2]="ADS_AUTOLAUNCH", open_opts$[2]="OTA"
	open_tables$[3]="ADM_USERROLES", open_opts$[3]="OTA"

	gosub open_tables

	ddm_systems = num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]
    ads_autolaunch=num(open_chans$[2]);dim ads_autolaunch$:open_tpls$[2]
    adm_userroles=num(open_chans$[3]);dim adm_userroles$:open_tpls$[3]

rem --- Get current working directory

	workingDir$ = dir("")

rem --- Get Addon install location
    
	readrecord(ddm_systems,key=pad("ADDON",16),err=done)ddm_systems$
	aonHome$ = ddm_systems.mount_dir$
	chdir(aonHome$)
	aonHome$ = dir(""); rem --- remove possible drive letter from path
	
rem --- Get current BASIS product download location

	bbjHome$ = System.getProperty("basis.BBjHome")
	chdir(bbjHome$)
	bbjHome$ = dir(""); rem --- remove possible drive letter from path

rem --- Reset current working directory

	chdir(workingDir$)

rem --- Determine if current user is an admin

    admin_user = 0
    readrecord(adm_userroles,key=pad(user_id$,16)+pad("ADMIN",8),err=*next)adm_userroles$; admin_user = 1

rem --- Display warning if Addon is installed under current BASIS product download location

    process_complete = 0
	if pos(bbjHome$=aonHome$)=1 and bypass_nag$<>"YES" then
        if admin_user then
            msg_id$ = "AON_DEMO_NAG_ADMIN"
        else
            msg_id$ = "AON_DEMO_NAG"
        endif
		gosub disp_message
        if msg_opt$="D" then
            msg_id$="AON_DEMO_NAG_REMOVE"
            gosub disp_message
            if msg_opt$="Y" then process_complete = 1
        endif
	endif
	
done:rem --- Update AutoLaunch Status

    extractrecord(ads_autolaunch,key="DEMONAG")ads_autolaunch$; rem Advisory Locking
    if process_complete then ads_autolaunch.process_status$="C"
    ads_autolaunch.trans_date$=date(0:"%Yl%Mz%Dz")
    ads_autolaunch.trans_time$=date(0:"%Hz%mz%sz")
    ads_autolaunch$ = field(ads_autolaunch$)
    writerecord(ads_autolaunch)ads_autolaunch$

	goto std_exit

open_tables:rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto std_exit
    endif

    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release


rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
