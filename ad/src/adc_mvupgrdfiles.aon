rem ==========================================================================
rem --- adc_mvupgrdfiles.aon 
rem --- Call to move files created by the EM Update Wizard to their correct
rem --- locations as specified by DD_TABLE_PATH and STBL, or the database's
rem --- Data File and User Props.
rem --- 
rem --- AddonSoftware Version 11.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================


rem --- FILELOC$     : Updated Files Destination used for EM Update Wizard (Input)
rem --- DBNAME$      : New Database used for EM Update Wizard (Input)
rem --- RDFORM!      : Parent BBjTopLevelWindow object, the form (Input)
rem --- WAIT4OK%     : Wait for user's OK when done, 0=don't wait/1=wait (Input)
rem --- STATUS       : Status code/0=No error (Returned)

    use java.io.File
    use java.io.FileReader
    use java.io.FileWriter
    use java.util.HashMap
    use java.util.Properties
    use java.util.Vector
    use ::bbtranslator.bbj::BBTranslator
    use ::ado_file.src::FileObject

    seterr std_error
    setesc std_error
    enter rd_table_chans$[all],fileLoc$,dbName$,rdForm!,wait4ok%,status

rem --- Initializations
    status=0
    dir_syp$=stbl("+DIR_SYP")
    sysGUI! = BBjAPI().getSysGui()
		
rem --- Size progress meter based on number of files to move
	declare File source!
	source! = new File(fileLoc$)
	declare Vector fileVector!
	fileVector! = new Vector(java.util.Arrays.asList(source!.list()))
    
rem --- Start progress meter
    declare BBTranslator Translate!
    Translate! = BBTranslator.getInstance( stbl("+PROPS_NAME"), stbl("+USER_LOCALE"), null(), stbl("+PROPS_PATH") )
	meter_title$=Translate!.getTranslation("AON_DISTRIBUTING")+"..."
    meter_total_recs=fileVector!.size()
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    if wait4ok% then meter_action$=meter_action$+"-OK"
    gosub disp_meter
    
rem --- Open log file in aon/logs directory, if possible
    aonDir$=""
    dataDir$=FileObject.fixPath(stbl("+DIR_DAT",err=*next), "/")
    xpos=pos("/aon/"=dataDir$,-1)
    if xpos then
        aonDir$=dataDir$(1,xpos+4)
    endif
    if aonDir$="" then
        xpos=pos("/data/"=dataDir$,-1)
        if xpos then
            aonDir$=dataDir$(1,xpos)
        else
            aonDir$=dataDir$
        endif
    endif

    location$ = aonDir$
    gosub open_log

rem --- Currently this utility can only use the database used by this Barista/Addon instance.
	if dbName$<>stbl("+DBNAME_API") then
		rem --- Increment progress meter
		meter_text$="WARNING: database not accessible from this Barista/Addon instance"
		meter_proc_recs=meter_proc_recs+1
		meter_action$="MTR-LST"
		gosub disp_meter
		print(log_dev)meter_text$

		msg_id$="AD_DB_NOT_ACCESSIBLE"
		dim msg_tokens$[1]
		msg_tokens$[1]=dbName$
		gosub disp_message
		status=1
		goto done
	endif
    
rem --- Open File(s)
    
    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_TABLES",open_opts$[1]="OTA"

    gosub open_tables

    ddm_tables=num(open_chans$[1]);dim ddm_tables$:open_tpls$[1]
	
rem --- Process each file in source dir
	if fileVector!.size()>0 then
		declare File file!
		declare File target!
		declare File sourceFile!
		declare File targetFile!
		for i=0 to fileVector!.size()-1
			fileName$ = cast(BBjString, fileVector!.get(i))
			file! = new File(source!, fileName$)
			
			rem --- skip directories
			if(file!.isDirectory()) then continue
			
			rem --- check for file name in ddm_tables
			read(ddm_tables,key=fileName$,knum="FILE_NAME",dom=*next)
			readrecord(ddm_tables,err=*next)ddm_tables$
			if cvs(ddm_tables.dd_file_name$,3)<>fileName$ then
				rem --- check for table name in ddm_tables
				readrecord(ddm_tables,key=pad(cvs(fileName$,4),16," "),knum="PRIMARY",err=*next)ddm_tables$
					rem --- skip if file and table name not found
					if cvs(ddm_tables.dd_table_alias$,3)<>cvs(fileName$,4) then
						rem --- Increment progress meter
						meter_text$=fileName$+" -- table not found"
						meter_proc_recs=meter_proc_recs+1
						meter_action$="MTR-LST"
						gosub disp_meter
						print(log_dev)meter_text$
						
						continue
					endif
			endif
			
			rem --- move file to where it belongs, if not there already
			path$=cvs(ddm_tables.dd_table_path$,3)
			if path$="" then
				path$=stbl("+DIR_DAT")
			endif
			if len(path$)>1 and path$(1,1)="[" and path$(len(path$),1)="]" then
				path$=stbl(path$(2,len(path$)-2))
			endif
			target!=new File(path$)
			if target!.getAbsolutePath()=source!.getAbsolutePath() then
				rem --- don't move, it's already where it belongs
				meter_text$=fileName$
			else
				rem --- have one to move or delete
				sourceFile!= new File(source!, fileName$)
				if cvs(ddm_tables.asc_comp_id$,3)="01007514" and pos(cvs(ddm_tables.asc_prod_id$,3)+";"="ADB;DDB;SQB;")
					rem --- delete Barista files
					meter_text$=fileName$+" -- deleted"
					sourceFile!.delete()
				else
					rem --- move (rename) this one
					meter_text$=fileName$+" -- moved to "+path$
					rem --- create new directory if it doesn't exist
					FileObject.makeDirs(target!)
					targetFile!=new File(target!, fileName$)
					targetFile!.delete()
					sourceFile!.renameTo(targetFile!)
				endif
			endif

			rem --- Increment progress meter
			meter_proc_recs=meter_proc_recs+1
			meter_action$="MTR-LST"
			gosub disp_meter
			print(log_dev)meter_text$
		next i
	endif
	
rem --- Update conversion control file data/adx_conversionCtrl, and create conversion marker files as needed

    convCtrlFileName$=dataDir$+"adx_conversionCtrl"
    convCtrlFile!=new File(convCtrlFileName$,err=*next)
    if convCtrlFile!.exists() then
        rem --- Update conversion control file data/adx_conversionCtrl
        fileReader!=new FileReader(convCtrlFile!)
        convCtrl!=new Properties()
        convCtrl!.load(fileReader!)
        fileReader!.close()

        convCtrl!.setProperty("data_source","OCJ")

        fileWriter!=new FileWriter(convCtrlFile!)
        convCtrl!.store(fileWriter!,"Addon Conversion Control File")
        fileWriter!.close()
        
        print(log_dev)"Updated ",convCtrlFileName$

        rem --- Are conversion needed for the start_version?
        versionsVect!=BBjAPI().makeVector()
        versionsVect!.addAll(java.util.Arrays.asList(convCtrl!.getProperty("conversion_versions").split(";")))
    
        rem --- start_version$ format must be 0000 to match version format in conversion_versions
        version_mask$="00.00"
        start_version$=str(num(convCtrl!.getProperty("start_version")):version_mask$)
        xpos=pos("."=start_version$)
        if xpos then
            start_version$=start_version$(1,xpos-1)+start_version$(xpos+1)
        endif

        rem --- Verify version requires conversion
        indexFirstConversion=-1
        if versionsVect!.size() then
            for i=0 to versionsVect!.size()-1
                if start_version$<versionsVect!.getItem(i) then
                    indexFirstConversion=i
                    break
                endif
            next i
        endif

        rem --- Create conversion marker files for each version needing conversion
        fileDependencies!=new HashMap()
        if indexFirstConversion>=0 then
            rem --- Get file dependencies for each version needing conversion
            convCtrlKeys!=convCtrl!.stringPropertyNames()
            for i=indexFirstConversion to versionsVect!.size()-1
                version$=versionsVect!.getItem(i)
                iter!=convCtrlKeys!.iterator()
                while iter!.hasNext()
                    key$=iter!.next()
                    if pos(version$+"_"=key$)=1 then
                        fileDependencies!.put(convCtrl!.getProperty(key$),version$)
                    endif
                wend
            next i
        endif
        requiredFiles!=BBjAPI().makeVector()
        keyIter!=fileDependencies!.keySet().iterator()
        while keyIter!.hasNext()
            rem --- Create marker file for each dependency where all the files exist
            create_marker=1
            requiredFiles!.clear()
            key!=keyIter!.next()
            requiredFiles!.addAll(java.util.Arrays.asList(key!.split(";")))
            version$=fileDependencies!.get(key!)
            for i=0 to requiredFiles!.size()-1
                file!=new File(fileLoc$+"/"+requiredFiles!.get(i))
                if !file!.exists() then
                    create_marker=0
                    break
                endif
            next i
            if create_marker then
                markerFile!=new File(fileLoc$+"/v"+version$+"_"+requiredFiles!.get(0))
                markerFile!.createNewFile()

                print(log_dev)"Created conversion marker file: ",markerFile!.getAbsoluteFile()
            endif
        wend
    else
        rem --- Report can't find the required conversion control file data/adx_conversionCtrl
        msg_id$="AD_FILE_MISSING"
        dim msg_tokens$[1]
        msg_tokens$[1]=convCtrlFileName$
        gosub disp_message
        print(log_dev)"***** ERROR: Required file not found, "+convCtrlFileName$+" *****"
   endif
    
done: rem --- All done
    
    rem --- Stop progress meter
    meter_text$=""
    meter_proc_recs=meter_total_recs
    meter_action$="LST-END"
    gosub disp_meter
    
	print(log_dev)
    print(log_dev)"Mvupgrdfiles log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    goto std_exit
	
disp_meter:rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

open_log:rem --- Open log file
            
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$ = logDir$+"/mvupgrdfiles_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".txt"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
	rem --- write log header info
	print(log_dev)"Mvupgrdfiles log started:   " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
	print(log_dev)"Update Files Location:      " + fileLoc$
	print(log_dev)"New Database Name:          " + dbName$
	print(log_dev)

    return

open_tables:rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto std_exit
    endif

    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return
   
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src
    
    end
