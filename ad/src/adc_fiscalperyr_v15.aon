rem --- Return Fiscal Period/Year (v15)
rem --- Program adc_fiscalperyr_v15.aon v17.00 26Apr2017

rem --- AddonSoftware Version 17.00 - 26Apr2017
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --------------------------------------------------------------------------------

rem --- periodEndDates$[]: Fiscal calendar period end dates (Input)
rem --- when$           : YYYYMMDD Date (Input)
rem --- period$         : Fiscal period MM (Returned - blank if incoming date was invalid)
rem --- year$           : Fiscal year YYYY (Returned - blank if incoming date was invalid)

    seterr std_error
    setesc std_error
    enter periodEndDates$[all],when$,period$,year$

rem --- Validate WHEN$ date

    when_jul=-1
    when_jul=jul(num(when$(1,4)),num(when$(5,2)),num(when$(7,2)),err=*next)
    if when_jul<0 then
        period$=""
        year$=""
        goto done
    endif
    date$=when$

rem --- Parameters

    dim dimensions$:"dimens:i(1),dim0elem:i(4),dim0base:i(4),dim1elem:i(4),dim1base:i(4),dim2elem:i(4),dim2base:i(4)"
    dimensions$=dims(periodEndDates$[all])
    periods=dimensions.dim0elem-1
    for x=1 to periods
        periods$=periods$+periodEndDates$[x]
    next x

rem --- Initializations

    numbers$="01020304050607080910111213"
    numbers$=numbers$(1,periods*2)
    period$=""
    year$=""
    p=0
    y=0

rem --- Sort period ending dates and corresponding period numbers

    for x=2 to periods
        priper=(x-2)*4+1
        curper=(x-1)*4+1
        if periods$(curper,4)>periods$(priper,4) continue
        periods$=periods$(curper)+periods$(1,curper-1)
        w=int(curper/4)*2+1,numbers$=numbers$(w)+numbers$(1,w-1)
        break
    next x

rem --- Which period/year?

    md$=date$(5)
    p=pos(md$<=periods$,4)
    if p<>0
        p=num(numbers$(int(p/4)*2+1,2))
        y=num(date$(1,4))
        if p>1 and periodEndDates$[p] < periodEndDates$[1] then y=y-1
    else
        rem --- 'ENTERED' date is > than all period end dates
            p=num(numbers$(periods*2-1))+1
            y=num(date$(1,4))
            if p>periods p=1,y=y+1
        endif

done: rem --- All done

    period$=str(p:"00")
    year$=str(y:"0000")
    goto std_exit

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit
rem #endinclude std_exit.src

    end
