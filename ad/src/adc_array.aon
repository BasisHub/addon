rem ==========================================================================
rem --- Utility to convery a BBj array to an object and back
rem --- Program: adc_array.aon
rem --- Copyright 2009, BASIS International, Ltd.
rem ==========================================================================

rem ==========================================================================
str_array2object: rem --- Turn a string array into an object
rem ==========================================================================

    seterr std_error
    setesc std_error

    enter in$[all], out!, status
    
    dim d$:"dims:i(1),d0elem:i(4),d0base:i(4),d1elem:i(4),d1base:i(4),d2elem:i(4),d2base:i(4)"
    d$ = dims(in$[all])
    
    declare BBjTemplatedString d!
    d! = BBjAPI().makeTemplatedString(fattr(d$))
    d!.setString(d$)
    
    declare ArrayObject out!
    declare BBjVector a!
    
    a! = BBjAPI().makeVector()
    
    for i=d.d0base% to d.d0elem% + d.d0base% - 1
        if d.dims% >=2 then
            for j=d.d1base% to d.d1elem% + d.d1base% - 1
                if d.dims% = 3 then
                    for k=d.d2base% to d.d2elem% + d.d2base% - 1
                        a!.insertItem((i-d.d0base%)*d.d1elem%*d.d2elem% + (j-d.d1base%)*d.d2elem% + k-d.d2base%, in$[i,j,k])
                    next k
                else
                    a!.insertItem((i-d.d0base%)*d.d1elem% + j-d.d1base%, in$[i,j])
                endif
            next j
        else
            a!.insertItem(i-d.d0base%, in$[i])
        endif
    next i
    
    out! = new ArrayObject(d!, a!)
    
    exit
    
rem ==========================================================================
str_object2array: rem --- Turn an object into a string array
rem ==========================================================================

    seterr std_error
    setesc std_error

    enter in!, out$[all], status
    
    declare ArrayObject in!
    rem declare BBjVector a!
    a! = in!.getData()
    
    switch in!.getDimensions()
        case 1
            dim out$[in!.getD0_base():in!.getD0_elements()+in!.getD0_base()-1]
            break
        case 2
            dim out$[in!.getD0_base():in!.getD0_elements()+in!.getD0_base()-1, in!.getD1_base():in!.getD1_elements()+in!.getD1_base()-1]
            break
        case 3
            dim out$[in!.getD0_base():in!.getD0_elements()+in!.getD0_base()-1, in!.getD1_base():in!.getD1_elements()+in!.getD2_base()-1, in!.getD2_base():in!.getD2_elements()+in!.getD2_base()-1]
            break
        case default
    swend
    
    for i = in!.getD0_base() to in!.getD0_elements() + in!.getD0_base() - 1
        if in!.getDimensions() >=2 then
            for j = in!.getD1_base() to in!.getD1_elements() + in!.getD1_base() - 1
                if in!.getDimensions() = 3 then
                    for k = in!.getD2_base() to in!.getD2_elements() + in!.getD2_base() - 1
                        out$[i,j,k] = str( a!.getItem((i-in!.getD0_base())*in!.getD1_elements()*in!.getD2_elements() + (j-in!.getD1_base())*in!.getD2_elements() + k-in!.getD2_base()) )
                    next k
                else
                    out$[i,j] = str( a!.getItem((i-in!.getD0_base())*in!.getD1_elements() + j-in!.getD1_base()) )
                endif
            next j
        else
            out$[i] = str( a!.getItem(i-in!.getD0_base()) )
        endif
    next i
    
    exit

rem ==========================================================================
num_array2object: rem --- Turn a numeric array into an object
rem ==========================================================================

    seterr std_error
    setesc std_error

    enter in[all], out!, status
    
    dim d$:"dims:i(1),d0elem:i(4),d0base:i(4),d1elem:i(4),d1base:i(4),d2elem:i(4),d2base:i(4)"
    d$ = dims(in$[all])
    
    rem declare BBjTemplatedString d!
    d! = BBjAPI().makeTemplatedString(fattr(d$))
    d!.setString(d$)
    
    rem declare ArrayObject out!
    rem declare BBjVector a!
    
    a! = BBjAPI().makeVector()
    
    for i=d.d0base% to d.d0elem% + d.d0base% - 1
        if d.dims% >=2 then
            for j=d.d1base% to d.d1elem% + d.d1base% - 1
                if d.dims% = 3 then
                    for k=d.d2base% to d.d2elem% + d.d2base% - 1
                        a!.insertItem( (i-d.d0base%)*d.d1elem% + (j-d.d1base%)*d.d2elem% + k-d.d2base%, str(in[i,j,k]) )
                    next k
                else
                    a!.insertItem( (i-d.d0base%)*d.d1elem% + j-d.d1base%, str(in[i,j]) )
                endif
            next j
        else
            a!.insertItem( i-d.d0base%, str(in[i]) )
        endif
    next i
    
    out! = new ArrayObject(d!, a!)
    
    exit
    
rem ==========================================================================
num_object2array: rem --- Turn an object into a numeric array
rem ==========================================================================

    seterr std_error
    setesc std_error

    enter in!, out[all], status
    
    rem declare ArrayObject in!
    rem declare BBjVector a!
    a! = in!.getData()
    
    switch in!.getDimensions()
        case 1
            dim out[in!.getD0_base():in!.getD0_elements()+in!.getD0_base()-1]
            break
        case 2
            dim out[in!.getD0_base():in!.getD0_elements()+in!.getD0_base()-1, in!.getD1_base():in!.getD1_elements()+in!.getD1_base()-1]
            break
        case 3
            dim out[in!.getD0_base():in!.getD0_elements()+in!.getD0_base()-1, in!.getD1_base():in!.getD1_elements()+in!.getD1_base()-1, in!.getD2_base():in!.getD2_elements()+in!.getD2_base()-1]
            break
        case default
    swend
    
    for i = in!.getD0_base() to in!.getD0_elements() + in!.getD0_base() - 1
        if in!.getDimensions() >=2 then
            for j = in!.getD1_base() to in!.getD1_elements() + in!.getD1_base() - 1
                if in!.getDimensions() = 3 then
                    for k = in!.getD2_base() to in!.getD2_elements() + in!.getD2_base() - 1
                        out[i,j,k] = num( a!.getItem((i-in!.getD0_base())*in!.getD1_elements()*in!.getD2_elements() + (j-in!.getD1_base())*in!.getD2_elements() + k-in!.getD2_base()) )
                    next k
                else
                    out[i,j] = num( a!.getItem((i-in!.getD0_base())*in!.getD1_elements() + j-in!.getD1_base()) ) 
                endif
            next j
        else
            out[i] = num( a!.getItem(i-in!.getD0_base()) )
        endif
    next i
    
    exit
    
    
rem ==========================================================================
rem --- Class for array object
rem ==========================================================================

    class public ArrayObject
    
        field private BBjString className$ = "ArrayObject"
        field public BBjInt Dimensions%
        field public BBjInt D0_elements%
        field public BBjInt D0_base%
        field public BBjInt D1_elements%
        field public BBjInt D1_base%
        field public BBjInt D2_elements%
        field public BBjInt D2_base%
        field private BBjVector data!
        
    rem --- Constructor
        
        method public ArrayObject(BBjTemplatedString pDim!, BBjVector pData!)
        
            #Dimensions%  = int(pDim!.getFieldAsNumber("dims"))
            #D0_elements% = int(pDim!.getFieldAsNumber("d0elem"))
            #D0_base%     = int(pDim!.getFieldAsNumber("d0base"))
            #D1_elements% = int(pDim!.getFieldAsNumber("d1elem"))
            #D1_base%     = int(pDim!.getFieldAsNumber("d1base"))
            #D2_elements% = int(pDim!.getFieldAsNumber("d2elem"))
            #D2_base%     = int(pDim!.getFieldAsNumber("d2base"))
            
            #data! = pData!
            
        methodend
        
    rem --- Accessor to data
        
        method public BBjVector getData()
            methodret #data!
        methodend
        
    rem --- List data (diagnostic)
    
        method public void listData()
            for i = 0 to #data!.size() -1
                print str(i), ": ", #data!.getItem(i)
            next i
        methodend
        
    rem --- Get an element from a one-dimensional array
        
        method public BBjString getElement(BBjInt p_elem%)
            if #Dimensions% <> 1 then
                throw #className$ + ": Array is not one dimensional", 42
            endif
            
            if p_elem% - #D0_base% > #D0_elements% - 1 then
                throw #className$ + ": Element is out of range, " + str(p_elem% - #D0_base%) + " > " + str(#D0_elements% - 1), 42
            endif
            
            if p_elem% - #D0_base% < 0 then
                throw #className$ + ": Element is out of range, " + str(p_elem% - #D0_base%) + " < 0", 42
            endif
            
            methodret str(#data!.getItem(p_elem% - #D0_base%))
        methodend
        
    rem --- Get an element from a two-dimentional array
    
        method public BBjString getElement(BBjInt p_d0elem%, BBjInt p_d1elem%)
            if #Dimensions% <> 2 then
                throw #className$ + ": Array is not two dimensional", 42
            endif

            methodret str(#data!.getItem((p_d0elem% - #D0_base%) * #D1_elements% + p_d1elem% - #D1_base%))
        methodend
        
    rem --- Get an element from a three-dimentional array
    
        method public BBjString getElement(BBjInt p_d0elem%, BBjInt p_d1elem%, BBjInt p_d2elem%)
            if #Dimensions% <> 3 then
                throw #className$ + ": Array is not three dimensional", 42
            endif

            methodret str(#data!.getItem((p_d0elem% - #D0_base%) * #D0_elements% * #D1_elements% + (p_d1elem% - #D1_base%) * #D1_elements% + p_d2elem% - #D2_base%))
        methodend
        
    classend

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5)),
:                                str(err),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

end
