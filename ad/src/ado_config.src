rem ==========================================================================
rem --- Cofig file class
rem --- Program ado_config.src v8.0.0 13Apr2009
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

use ::ado_func.src::func

class public Config

	rem ==========================================================================
	rem --- Properties (fields)
	rem ==========================================================================
	
	field private BBjString ClassName$ = "Config"
	field public BBjString ConfigFileName$
	field public BBjVector ConfigLines!
	field public BBjVector Aliases!
	field public BBjVector AliasBBxNames!

	rem ==========================================================================
	rem --- Constructor
	rem ==========================================================================
	
	method public Config()
        seterr method_error
		#ConfigFileName$ = BBjAPI().getConfig().getConfigFileName()
		#ConfigLines!    = BBjAPI().makeVector()
		#Aliases!        = BBjAPI().makeVector()
		#AliasBBxNames!  = BBjAPI().makeVector()
		
		config_dev = unt
		open(config_dev, err=config_no_file) #ConfigFileName$
		ignore = mask("", "^[Aa][Ll][Ii][Aa][Ss][ 	]")
		
		while 1
			read (config_dev, end=*break) line$
			#ConfigLines!.addItem(line$)
			
			if mask(cvs(line$, 1+2)) then
				#Aliases!.addItem(cvs(line$, 1+2))
			endif
		wend
		
		methodret
		
	config_no_file:
        seterr 0
        x$=stbl("+THROWN_ERR","TRUE")   
		throw #ClassName$ +": cannot open " +#ConfigFileName$, 12
            
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend
	
	rem --- Alias BBxNames
	method public BBjVector getAliasBBxNames()
        seterr method_error
	
		if #AliasBBxNames!.size() then
			methodret #AliasBBxNames!
		endif
	
		declare BBjVector bbxNames!
		bbxNames! = BBjAPI().makeVector()
		
		for i=0 to #Aliases!.size()-1
			line$ = str(#Aliases!.getItem(i))
			p  = func.minimumNotZero(pos(" " = line$), pos("	" = line$))
			
			if p then
				line$ = cvs(line$(p+1), 1)
				p  = func.minimumNotZero(pos(" " = line$), pos("	" = line$))
				if p then
					bbxNames!.addItem( cvs(line$(1, p-1), 1+2) )
				endif
			endif
		next i
		
		#AliasBBxNames! = bbxNames!
		methodret bbxNames!
            
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend
	
	rem --- Is string a BBx Alias Name?
	method public BBjInt isAlias(BBjString p_name$)
        seterr method_error
		#getAliasBBxNames()
		found% = 0
		
		for i=0 to #AliasBBxNames!.size()-1
			if p_name$ = str(#AliasBBxNames!.getItem(i)) then
				found% = 1
				break
			endif
		next i
		
		methodret found%
            
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	methodend
	
classend

rem ==========================================================================
rem --- Testing
rem ==========================================================================

	declare Config config!
	config! = new Config()
	declare BBjVector aliases!
	aliases! = BBjAPI().makeVector()

	aliases! = config!.getAliasBBxNames()
	print "Alias BBxNames:"

	for i=0 to aliases!.size()-1
		print aliases!.getItem(i)
	next i
	
	x$ = "PD"
	print x$,
	
	if config!.isAlias(x$) then
		print " is an alias"
	else
		print " is not an alias"
	endif


end	