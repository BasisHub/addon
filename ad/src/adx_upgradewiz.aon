rem ==========================================================================
rem --- adx_upgradewiz.aon 
rem --- Utility to automate Addon ugrade.
rem --- 
rem --- AddonSoftware Version 11.11
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    use java.io.File
    use java.io.FileReader
    use java.io.FileWriter
    use java.util.ArrayList
    use java.util.HashMap
    use java.util.Properties
    use java.util.Vector
    use ::bbtranslator.bbj::BBTranslator
    use ::adc_updatexmlfiles.aon::UpdateSyncXmlFiles
    use ::ado_file.src::FileObject

    setesc std_error
    seterr std_error

rem --- Initializations

    pgmdir$=stbl("+DIR_PGM",err=*next)
    dir_syp$=stbl("+DIR_SYP")
    sysGUI! = BBjAPI().getSysGui()
    BLOCKSIZE = 2^20

rem --- Get user inputs

    dbName$=Option!.getOptionData("DB_NAME")
    appDesc$=Option!.getOptionData("APP_DESC")
    newAonLoc$=Option!.getOptionData("NEW_AON_LOC")
    oldAonLoc$=Option!.getOptionData("OLD_AON_LOC")
    oldBarLoc$=Option!.getOptionData("OLD_BAR_LOC")
    syncBackupDir$=Option!.getOptionData("SYNC_BACKUP_DIR")
    doSyncBackup%=cast(BBjInt, callpoint!.getDevObject("do_sync_backup"))
    installPrbabs%=cast(BBjInt, callpoint!.getDevObject("install_prbabs"))
    hybridPrInstalled%=cast(BBjInt, callpoint!.getDevObject("hybridPR_installed"))
    declare Vector appVect!
    appVect!=cast(Vector, callpoint!.getDevObject("appVect"))
    declare HashMap appStblMap!
    appStblMap!=cast(HashMap, callpoint!.getDevObject("appStblMap"))
    rdAdmin!=cast(BBjAdminBase, callpoint!.getDevObject("rdAdmin"))
    useOldMenu%=int(num(Option!.getOptionData("USE_OLD_MENU")))

	rem --- Flip directory path separators
	newAonLoc$=FileObject.fixPath(newAonLoc$, "/")
	oldAonLoc$=FileObject.fixPath(oldAonLoc$, "/")
	oldBarLoc$=FileObject.fixPath(oldBarLoc$, "/")
	syncBackupDir$=FileObject.fixPath(syncBackupDir$, "/")

    newAonDir$=newAonLoc$ + "/aon"
    newBarDir$=newAonLoc$ + "/barista"
    oldAonDir$=oldAonLoc$ + "/aon"
    oldBarDir$=oldBarLoc$ + "/barista"

rem --- Is PRB Payroll being installed in addition to Addon?
    appName!=BBjAPI().makeVector()
    newAonDir!=BBjAPI().makeVector()
    oldAonDir!=BBjAPI().makeVector()
    appName!.add("ADDON")
    newAonDir!.add(newAonLoc$+"/aon")
    oldAonDir!.add(oldAonLoc$+"/aon")
    if installPrbabs% then
        appName!.add("PRBABS")
        newAonDir!.add(newAonLoc$+"/prbabs")
        oldAonDir!.add(oldAonLoc$+"/prbabs")
    endif
    
rem --- Start progress meter
    meter_title$=Translate!.getTranslation("AON_UPDATE_WIZ")
    meter_total_recs=8
    if doSyncBackup% then meter_total_recs=meter_total_recs+1
    if useOldMenu% then meter_total_recs=meter_total_recs+1
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST-OK"
    gosub disp_meter

rem --- Open log file
    location$ = newAonDir$
    gosub open_log
    
rem --- Open File(s)

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ADM_MODULES", open_opts$[1]="OTA"

    gosub open_tables

    adm_modules=num(open_chans$[1]);dim adm_modules$:open_tpls$[1]

rem --- Skip Barista’s Create Sync File Backup bax_sync_backup.bbj unless upgrading from a pre-v18 version.
    if doSyncBackup% then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_SYNC_BACKUP")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Pass bax_sync_backup.bbj the full path to the pre-v18 application’s Barista instance
        call stbl("+DIR_SYP")+"bax_sync_backup.bbj","AUTO",oldBarDir$,sysGUI!,rdForm!,null(),rd_table_chans$[all]
    endif
    
rem --- Recursively copy oldLocation to newAonDir

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_COPY_AON")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

	rem --- Set oldLocation to aon directory under the current download directory
    sep$ = java.io.File.separator
    bbjHome$=java.lang.System.getProperty("basis.BBjHome")
    bbjHomeLocation!=BBjAPI().makeVector()
    bbjHomeLocation!.add(bbjHome$ + sep$ + "apps" + sep$ + "aon")
    if installPrbabs% then bbjHomeLocation!.add(bbjHome$ + sep$ + "apps" + sep$ + "prbabs")

	rem --- Do not copy data or help file
	requiredFiles%=1
	copyData%=0
	help%=0
	
    rem --- Launch adc_copyaon.aon
    for syscnt=0 to appName!.size()-1
        oldLocation$=bbjHomeLocation!.getItem(syscnt)
        call pgmdir$+"adc_copyaon.aon",bbjHomeLocation!.getItem(syscnt),newAonDir!.getItem(syscnt),requiredFiles%,copyData%,help%,rdForm!,0,status
    next syscnt
    
rem --- Update new addon.syn file

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATE_SYN")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    for syscnt=0 to appName!.size()-1
    	rem --- Set newSynFile to addon.syn at the new aon location
        newSynFile$=newAonDir!.getItem(syscnt)+"/config/"+cvs(appName!.getItem(syscnt),8)+".syn"
    
    	rem --- Setup for upgrade
        upgrade%=1
        oldSynFile$=oldAonDir!.getItem(syscnt)+"/config/"+cvs(appName!.getItem(syscnt),8)+".syn"

        rem --- If oldSynFile does not exist for ADDON, skip.
        rem --- Exception case is an upgrade from a version of Addon prior to Payroll integration.
        rem ---     If that's the case, prbabs.syn won't exist in old location, so use download location and flip upgrade% flag off
        rem ---     That will see to it that prbabs.syn in new location gets path names changed appropriately
        oldSynFile! = new File(oldSynFile$)
        if !oldSynFile!.exists()
            if appName!.get(syscnt)="PRBABS" and installprbabs%=1
                oldSynFile$=BBjHomeLocation!.get(syscnt)+"/config/"+cvs(appName!.getItem(syscnt),8)+".syn"
                oldSynFile!= new File(oldSynFile$)
                if !oldSynFile!.exists() then continue
                upgrade%=0
            else
                continue
            endif
        endif
     
        rem --- Build stblMap! and pfxList! for adc_updatesynfile.aon
        app$=appName!.getItem(syscnt)
        gosub build_stblMap_pfxList

        if app$="ADDON"
            aonStblMap!=new HashMap()
            aonStblMap!=stblMap!
        endif

        rem --- Launch adc_updatesynfile.aon
        call pgmdir$+"adc_updatesynfile.aon",newSynFile$,oldSynFile$,upgrade%,stblMap!,pfxList!,rdForm!,0,status
    next syscnt
    
rem --- Add new application to Barista Installation Manager
rem --- Run BIM bai_install_manager.bbj program via synchronous system call because of its terminating release

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_BIM_CREATE")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Create new session specific classpath (SSCP) in Enterprise Manager
    sscpName$=cvs(dbName$,8)
    needBaristaprop=1
    needAddonprop=1
    needPrbabsprop=1
    paths!=BBjAPI().makeVector()
    env!=BBjAPI().getAdmin(rdAdmin!.getUser(), rdAdmin!.getPassword()).getEnvironment()
    paths!=env!.getClasspath(BBjAPI().getConfig().getCurrentCommandLineObject().getOriginalClasspathName(),err=*next)
    if paths!.size()>0 then
        for i=0 to paths!.size()-1
            if pos("baristaprop.jar"=paths!.getItem(i)) then
                rem --- Update path to baristaprop.jar
                paths!.setItem(i,newAonLoc$+"/barista/sys/prop/baristaprop.jar")
                needBaristaprop=0
            endif
            if pos("addonprop.jar"=paths!.getItem(i)) then
                rem --- Update path to addonprop.jar
                paths!.setItem(i,newAonLoc$+"/aon/prop/addonprop.jar")
                needAddonprop=0
            endif
            if pos("prbabsprop.jar"=paths!.getItem(i)) then
                rem --- Update path to prbabsprop.jar
                paths!.setItem(i,newAonLoc$+"/prbabs/prop/prbabsprop.jar")
                needPrbabsprop=0
            endif
        next i
    endif
    if needBaristaprop then paths!.addItem(newAonLoc$+"/barista/sys/prop/baristaprop.jar")
    if needAddonprop then paths!.addItem(newAonLoc$+"/aon/prop/addonprop.jar")
    if needPrbabsprop then paths!.addItem(newAonLoc$+"/prbabs/prop/prbabsprop.jar")
    env!.setClasspath(sscpName$, paths!)

    rem --- Launch bai_install_manager.bbj
	bar_dir$=dir("")
	if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
	run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:	+" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:	+" "+$22$+bar_dir$+"/sys/prog/bai_install_manager.bbj"+$22$
	user_arg$=" - "
:	+" -u"+rdAdmin!.getUser()
:	+" -id"+dbName$
:	+" -desc"+$22$+appDesc$+$22$
:	+" -loc"+$22$+newAonLoc$+$22$
:   +" -cp"+$22$+sscpName$+$22$
	scall_result=scall(run_arg$+user_arg$,err=*next)
    
rem --- Update new sync XML files (and copy old barista/settings dir)
rem --- BIM clears barista/settings dir, so must do this step after BIMing and before auto-sync

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATE_XML")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    start_version$=""

    for syscnt=0 to appName!.size()-1
    	rem --- Set newSyncLoc to sync directory at the new aon location
        newSyncLoc$=newAonDir!.getItem(syscnt)+"/data/sync"
    
    	rem --- Setup for upgrade
        upgrade%=1
        oldSyncLoc$=oldAonDir!.getItem(syscnt)+"/data/sync"

        rem --- If oldSynLoc does not exist for ADDON, skip.
        rem --- Exception case is an upgrade from a version of Addon prior to Payroll integration.
        rem ---     If that's the case, /data/sync won't exist in old location, so use download location and flip upgrade% flag off
        rem ---     That will see to it that /data/sync in new location gets path names changed appropriately
        oldSynLoc! = new File(oldSyncLoc$)
        if !oldSynLoc!.exists()
            if appName!.get(syscnt)="PRBABS" and installprbabs%=1
                oldSyncLoc$=BBjHomeLocation!.get(syscnt)+"/data/sync"
                oldSynLoc!= new File(oldSyncLoc$)
                if !oldSynLoc!.exists() then continue
                upgrade%=0
            else
                continue
            endif
        endif
    
        rem --- Launch adc_updatexmlfiles.aon
        call pgmdir$+"adc_updatexmlfiles.aon",newSyncLoc$,oldSyncLoc$,syncBackupDir$,upgrade%,rdForm!,0,status

        rem --- Get version of source Addon installation from source data/sync/adm_modules~01007514ad.xml
        if start_version$=""
            utility! = new UpdateSyncXmlFiles(rdForm!,0)
            oldVers! = utility!.getModuleVersion(new File(oldSyncLoc$))
            if oldVers!.get("AD")<>null() then
                start_version$=oldVers!.get("AD")
            endif
        endif
    next syscnt

rem --- Unless hybrid Payroll is being used, remove old un-used Addon PR stuff from sync file backup.
    if !hybridPrInstalled% then
        newSyncDir! = new File(newAonDir!.getItem(0)+"/data/sync")
        if newSyncDir!.exists()
            fileVector! = new Vector(java.util.Arrays.asList(newSyncDir!.list(new PayrollMasks())))
            if(fileVector!.size()>0) then
                for i=0 to fileVector!.size()-1
                    rem --- skip if it's not a XML file
                    adsMaskFile! = new File(newSyncDir!, cast(BBjString, fileVector!.get(i)))
                    adsMaskFile!.delete()
                next i
            endif
        endif
    endif

rem --- Use old modified menus instead of new standard menus.
rem --- Temporary "fix" until Barista enhancement 5658 can be implemented to preserve customizations
rem --- to standard menus, thus no logging or progress meter.
    if useOldMenu% then
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_COPY_MENUS")
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        availableLangs$="deuenuespfraitanldsve"
        for syscnt=0 to appName!.size()-1
            for i=1 to len(availableLangs$)-1 step 3
                lang$=availableLangs$(i,3)
                
                rem --- If oldMenuFile exists, overwrite newMenuFile with it
                oldMenuFile! = new File(oldAonDir!.getItem(syscnt)+"/config/"+lang$+"/"+cvs(appName!.getItem(syscnt),8)+".men")
                if oldMenuFile!.exists()
                
                    rem --- Create new directories as necessary for newMenuFile
                    newMenuDir! = new File(newAonDir!.getItem(syscnt)+"/config/"+lang$)
                    FileObject.makeDirs(newMenuDir!)
    
                    rem --- Rename newMenuFile as a backup before overwriting it
                    newMenuFile! = new File(newMenuDir!.getPath()+"/"+cvs(appName!.getItem(syscnt),8)+".men")
                    rename newMenuFile!.getPath() to newMenuDir!.getPath()+"/"+cvs(appName!.getItem(syscnt),8)+".men.bak", err=*next
                    
                    rem --- Copy oldMenuFile to newMenuFile
                    sourceChan=unt
                    open(sourceChan,isz=-1,err=*endif)oldMenuFile!.getPath()
                    targetChan=unt
                    open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")newMenuFile!.getPath()
                    while 1
                        readrecord(sourceChan,siz=BLOCKSIZE,end=*break)record$
                        writerecord(targetChan)record$
                    wend
                    close(sourceChan)
                    close(targetChan)
                endif
            next i
        next syscnt
    endif

rem --- Launch auto-sync in new barista for the new addon.syn
rem --- Run auto-sync bax_dd_synch_auto.bbj program via bax_launch_task.bbj to bypass bar_login.bbj in the new barista

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_AUTO_SYNC")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    rem --- Launch bax_dd_synch_auto.bbj
	bar_dir$=newBarDir$
	if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
	run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:	+" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:	+" "+$22$+bar_dir$+"/sys/prog/bax_launch_task.bbj"+$22$

    for syscnt=0 to appName!.size()-1
        newSynFile$=newAonDir!.getItem(syscnt)+"/config/"+cvs(appName!.getItem(syscnt),8)+".syn"
        user_arg$=" - "
:       +" -u"+rdAdmin!.getUser()
:       +" -p"+rdAdmin!.getPassword()
:       +" -t"+"DDM_TABLES"
:       +" -y"+"A"
:       +" -a" +"bax_dd_synch_auto.bbj"+$22$+" - "+" -f"+newSynFile$+" -b"+$22$
:       +" -w"
	    scall_result=scall(run_arg$+user_arg$,err=*next)
    next syscnt

rem --- Copy OPV_SHIPTRACK_nn views from old database to new database

    rem --- Get name of old database
    old_dbname$=callpoint!.getDevObject("old_dbname")
    if old_dbname$<>"" then
        rem --- Get views in old database
        if pos("="=old_dbname$) then old_dbname$=old_dbname$(1+pos("="=old_dbname$))
        call stbl("+DIR_SYP")+"bac_em_login.bbj",SysGUI!,Form!,admin!,rd_status$
        oldDB!=admin!.getDatabase(old_dbname$)
        views!=oldDB!.getViews()

        rem --- Any old OPV_SHIPTRACK_nn views?
        viewsIter!=views!.iterator()
        while viewsIter!.hasNext()
            oldView!=viewsIter!.next()
            viewProps!=oldView!.getProperties()
            viewName!=viewProps!.get(BBjAdminView.NAME)
            if viewName!=null() then continue
            if viewName!.startsWith("OPV_SHIPTRACK_") then
                rem --- Copy view to new database
                viewDesc$=""
                viewDesc!=viewProps!.get(BBjAdminView.DESCRIPTION)
                if viewDesc!<>null() then viewDesc$=viewDesc!
                viewSelect$=""
                viewSelect!=viewProps!.get(BBjAdminView.SELECT)
                if viewSelect!<>null() then viewSelect$=viewSelect!

                newDB!=admin!.getDatabase(dbName$)
                newDB!.dropView(viewName!)
                newView!=newDB!.createView(viewName!)
                newView!.setString(BBjAdminView.DESCRIPTION,viewDesc$)
                newView!.setString(BBjAdminView.SELECT,viewSelect$)
                newView!.commit()
            endif
        wend
    endif

rem --- Run Copy Application utility for applications being copied

    rem --- Increment progress meter
    trans_text$=Translate!.getTranslation("AON_COPY_APP")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"

	appIter!=appVect!.iterator()
	while appIter!.hasNext()
		appList! = cast(ArrayList, appIter!.next())
        
        rem --- Skip application if it's not being copied
		copy$=appList!.get(3)
        if copy$<>"y" then continue

        rem --- Get source syn file
        app$=appList!.get(0); rem --- application
        sourceSyn$=appList!.get(4)+"config/"+cvs(app$,8)+".syn"
        synFound=0
        sourceChan=unt
        open(sourceChan,isz=-1,err=*next)sourceSyn$; synFound=1
        close(sourceChan,err=*next)
        if !synFound then
            rem --- Log this app skipped
            meter_text$=trans_text$+": ***skipped*** "+app$
            gosub disp_meter
            print(log_dev)meter_text$+" -- cannot find "+sourceSyn$
            continue
        endif

        rem --- Log this app being copied
        meter_text$=trans_text$+": "+app$
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Remove trailing slashes (/ and \) from targetDir$
        targetDir$=FileObject.removeEndSlash(appList!.get(5))

        rem --- Build stblMap! and pfxList! for adc_copymods.aon
        gosub build_stblMap_pfxList
        
        rem --- Launch adc_copymods.aon
        call pgmdir$+"adc_copymods.aon",sourceSyn$,targetDir$,stblMap!,pfxList!,rdForm!,0,status
    wend

rem --- Run Install Application Wizard for applications being installed

    rem --- Increment progress meter
    trans_text$=Translate!.getTranslation("AON_INSTALL_APP")
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"

	iter!=appVect!.iterator()
	while iter!.hasNext()
		appList! = cast(ArrayList, iter!.next())
        
        rem --- Skip application if it's not being installed
		install$=appList!.get(2)
        if install$<>"y" then continue

        rem --- Get syn file for application
        app$=appList!.get(0); rem --- application
        if appList!.get(3)="y" then
            rem --- App was copied, so use target syn file
            sourceSyn$=appList!.get(5)+"config/"+cvs(app$,8)+".syn"
        else
            rem --- App was not copied, so use source syn file
            sourceSyn$=appList!.get(4)+"config/"+cvs(app$,8)+".syn"
        endif
        synFound=0
        sourceChan=unt
        open(sourceChan,isz=-1,err=*next)sourceSyn$; synFound=1
        close(sourceChan,err=*next)
        if !synFound then
            rem --- Log this app skipped
            meter_text$=trans_text$+": ***skipped*** "+app$
            gosub disp_meter
            print(log_dev)meter_text$+" -- cannot find "+sourceSyn$
            continue
        endif

        rem --- Log this app being installed
        meter_text$=trans_text$+": "+app$
        gosub disp_meter
        print(log_dev)meter_text$
        
        rem --- Launch baw_install_app.bbj
        bar_dir$=newBarDir$
        if pos(":"=bar_dir$)=0 then bar_dir$=dsk("")+bar_dir$
        run_arg$="bbj -tT0 -q -WD"+$22$+bar_dir$+$22$
:	    +" -c"+$22$+bar_dir$+"/sys/config/enu/barista.cfg"+$22$
:	    +" "+$22$+bar_dir$+"/sys/prog/bax_launch_task.bbj"+$22$
        user_arg$=" - "
:	    +" -u"+rdAdmin!.getUser()
:	    +" -p"+rdAdmin!.getPassword()
:	    +" -t"+"DDM_TABLES"
:	    +" -y"+"A"
:       +" -a" +"baw_install_app.bbj"+$22$+" - "+" -f"+sourceSyn$+$22$
:	    +" -w"
        scall_result=scall(run_arg$+user_arg$,err=*next)
    wend

rem --- On successful complete, initialize conversion control file data/adx_conversionCtrl

    convCtrlIniFileName$=newAonDir$+"/config/adx_conversionCtrl.ini"
    convCtrlIniFile!=new File(convCtrlIniFileName$,err=*next)
    if convCtrlIniFile!.exists() then
        fileReader!=new FileReader(convCtrlIniFile!)
        convCtrl!=new Properties()
        convCtrl!.load(fileReader!)
        fileReader!.close()

        convCtrl!.setProperty("addon_source",oldAonLoc$)
        convCtrl!.setProperty("barista_source",oldBarLoc$)
        convCtrl!.setProperty("data_source","AIUW")

        rem --- Get version of this Addon installation
        readrecord(adm_modules,key=pad("01007514AD",11),dom=*next)adm_modules$
        end_version$=cvs(adm_modules.version_id$,3)
        convCtrl!.setProperty("end_version",end_version$)

        rem --- Get version of source Addon installation from source data/sync/adm_modules~01007514ad.xml
        convCtrl!.setProperty("start_version",iff(start_version$<>"",start_version$,end_version$))

        rem --- Put initialized conversion control file in +DIR_DAT new target data directory
        convCtrlFilePath$=newAonDir$+"/data"
        if aonStblMap!.containsKey("+DIR_DAT") then
            aList! = cast(ArrayList, aonStblMap!.get("+DIR_DAT"))
            target$ = cast(BBjString, aList!.get(1))
            convCtrlFilePath$=FileObject.fixPath(target$, "/")
            FileObject.removeEndSlash(convCtrlFilePath$)
        endif
        convCtrlFileName$=convCtrlFilePath$+"/adx_conversionCtrl"
        convCtrlFile!=new File(convCtrlFileName$)
        rem --- Create path/file if doesn't exist
        if !convCtrlFile!.exists() then
            convCtrlPath!=new File(convCtrlFilePath$)
            if !convCtrlPath!.exists() then
                convCtrlPath!.mkdirs()
            endif
            convCtrlFile!.createNewFile()
        endif
        fileWriter!=new FileWriter(convCtrlFile!)
        convCtrl!.store(fileWriter!,"Addon Conversion Control File")
        fileWriter!.close()
        
        print(log_dev)"Initialized ",convCtrlFileName$
    else
        rem --- Report can't find the required config/adx_conversionCtrl.ini initialization file
        msg_id$="AD_FILE_MISSING"
        dim msg_tokens$[1]
        msg_tokens$[1]=convCtrlIniFileName$
        gosub disp_message
        print(log_dev)"***** ERROR: Required file not found, "+convCtrlIniFileName$+" *****"
   endif
    
done: rem --- All done
    
    rem --- Stop progress meter
    meter_text$=""
    meter_proc_recs=meter_total_recs
    meter_action$="LST-END"
    gosub disp_meter
    print(log_dev)
    print(log_dev)"Upgradewiz log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    goto std_exit

build_stblMap_pfxList: rem --- Build stblMap! and pfxList! for adc_copymods.aon for a app$

    stblMap! = new HashMap()
    pfxList! = new ArrayList()

    if appStblMap!.containsKey(app$) then
        stblVect! = cast(Vector, appStblMap!.get(app$))
        stblIter!=stblVect!.iterator()
        while stblIter!.hasNext()
            stblList! = cast(ArrayList, stblIter!.next())
            stbl$=stblList!.get(1); rem --- STBL or <prefix>
            if stbl$="<prefix>" then
                aList!=new ArrayList()
                aList!.add(stblList!.get(2)); rem --- source
                aList!.add(stblList!.get(3)); rem --- target
                pfxList!.add(aList!)
            else
                aList!=new ArrayList()
                aList!.add(stblList!.get(2)); rem --- source
                aList!.add(stblList!.get(3)); rem --- target
                stblMap!.put(stbl$, aList!)
            endif
        wend
    endif
    return
    
search_replace: rem --- Search record$ for search$, and replace with replace$
	rem --- Assumes only one occurrence of search$ per line so don't have 
	rem --- to deal with situation where pos(search$=replace$)>0
	pos = pos(search$=record$)
	if(pos) then
		record$ = record$(1, pos - 1) + replace$ + record$(pos + len(search$))
	endif
    return
	
disp_meter:rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

open_log:rem --- Open log file
            
    rem --- create logs directory at location
    logDir$ = FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$ = logDir$+"/upgradewiz_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".txt"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
    
    rem --- write log header info
    print(log_dev)"Upgradewiz log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)
    print(log_dev)"New Database Name: " + dbName$
    print(log_dev)"New Description: " + appDesc$
    print(log_dev)"New aon Locatoin: " + newAonLoc$
    print(log_dev)"Old aon Location: " + oldAonLoc$
    print(log_dev)"Old barista Location: " + oldBarLoc$
    print(log_dev)"Old sync Backup Dir: " + syncBackupDir$
    if useOldMenu% then
        print(log_dev)"Use old modified menus."
    else
        print(log_dev)"Do not use old menus."
    endif
    print(log_dev)

	rem --- write application grid info
    print(log_dev)"Application grid info:"
	iter!=appVect!.iterator()
	while iter!.hasNext()
		aList! = cast(ArrayList, iter!.next())
		app$=cast(BBjString, aList!.get(0))
		parent$=cast(BBjString, aList!.get(1))
		install$=cast(BBjString, aList!.get(2))
		copy$=cast(BBjString, aList!.get(3))
		source$=cast(BBjString, aList!.get(4))
		target$=cast(BBjString, aList!.get(5))
		print(log_dev)"app="+app$+"  parent="+parent$+"  install="+install$+"  copy="+copy$+"  source="+source$+"  target="+target$
	wend
    print(log_dev)

	rem --- write STBL grid info
    print(log_dev)"STBL grid info:"
    keys! = appStblMap!.keySet()
    iter! = keys!.iterator()
    while iter!.hasNext()
        key$ = cast(BBjString, iter!.next())
 		stblVect! = cast(Vector, appStblMap!.get(key$))
        vectIter! = stblVect!.iterator()
        while vectIter!.hasNext()
            aList! = cast(ArrayList, vectIter!.next())
            app$=cast(BBjString, aList!.get(0))
            stbl_prefix$=cast(BBjString, aList!.get(1))
            source$=cast(BBjString, aList!.get(2))
            target$=cast(BBjString, aList!.get(3))
		print(log_dev)"app="+app$+"  stbl="+stbl_prefix$+"  source="+source$+"  target="+target$
        wend
    wend
    print(log_dev)

    return
    
open_tables:rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto std_exit
    endif

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

rem /**
rem  * Utility Class for getting all descendent applications for a given parent application.
rem  */
    class public AppHeritage
        rem --- The appMap! HashMap is keyed by the parent app, and holds a Vector of all the child apps for that parent.
        field private HashMap appMap! = new HashMap()
        field private Vector descendentVect! = new Vector()

        rem /**
        rem  * Constructor.
        rem  *
        rem  * @param HashMap appMap! - keyed by the parent app, and holds a Vector of all the child apps for that parent
        rem  */
        method public AppHeritage(HashMap map!)
            #appMap! = map!
        methodend

        rem /**
        rem  * Get all descendents of given parent.
        rem  *
        rem  * @param BBjString parent$
        rem  * @return Vector of all descendents of parent$
        rem  */
        method public Vector getDescendents(BBjString parent$)
            seterr method_error
            declare Vector childVect!
            
            if #appMap!.containsKey(parent$) then
                childVect! = cast(Vector, #appMap!.get(parent$))
                if childVect!<>null() and childVect!.size()>0 then
                    for i=0 to childVect!.size()-1
                        #descendentVect!.add(childVect!.get(i))
                        propertyMap! = cast(HashMap, childVect!.get(i))
                        #getDescendents(cast(BBjString, propertyMap!.get("mount_sys_id")))
                    next i
                endif
            endif
            methodret #descendentVect!
            
method_error:rem --- Method error trap/handler (11Oct2017)
    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$)<>0 retry
    x$=stbl("+THROWN_ERR","TRUE")   
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
    classend
    
rem /**
rem  * FilenameFilter Class to filter ads_masks~..01007541pr.*\.xml files.
rem  */

    class public PayrollMasks implements java.io.FilenameFilter

        method public boolean accept(File dir!, String file!)
            if file!.matches("ads_masks~..01007541pr.*\.xml")
                methodret Boolean.valueOf("true")
            else
                methodret Boolean.valueOf("false")
            endif
        methodend
        
    classend
    
    end
