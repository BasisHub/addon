rem --- adx_set_printer.aon
rem --- Set Barista default printer from user defaults

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

    seterr std_error
    setesc std_error

rem --- Retrieve the program path

	pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
	sypdir$=""
	sypdir$=stbl("+DIR_SYP",err=*next)
   
rem --- Get user ID from program args

    user$ = ""
    user$ = stbl("+USER_ID", err=*next)
    manual$ = "n"

	if argc > 1 then
		for curr_argv = 1 to argc - 1
			temp_argv$ = argv(curr_argv)
            
			if pos("-u" = temp_argv$) = 1 then 
                user$ = stbl("+USER_ID", temp_argv$(3))
            endif
            
            if temp_argv$ = "manual" then
                manual$ = "y"
            endif
            
		next curr_argv
	endif
    
    if user$="" then goto std_exit

	call sypdir$+"bas_process_beg.bbj",stbl("+USER_ID"),rd_table_chans$[all]

rem --- Retrieve sysinfo data

    dim sysinfo$:stbl("+SYSINFO_TPL")
    sysinfo$=stbl("+SYSINFO")
	firm_id$=sysinfo.firm_id$

rem --- Open File(s)
	
	num_files=3
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="ADM_USERDEFAULTS", open_opts$[1]="OTA"
	open_tables$[2]="ADS_SYSINFO",      open_opts$[2]="OTA"
    open_tables$[3]="ADS_AUTOLAUNCH",   open_opts$[3]="OTA"

	gosub open_tables

	userdefault_dev = num(open_chans$[1])
	sysinfo_dev     = num(open_chans$[2])
    ads_autolaunch  = num(open_chans$[3])
	
	dim userdefault_rec$:open_tpls$[1]
	dim sysinfo_rec$:open_tpls$[2]
    dim ads_autolaunch$:open_tpls$[3]
    
rem --- Get this user's defaults

	find record (userdefault_dev, key=firm_id$+pad(user$, 16), dom=std_exit) userdefault_rec$
	printer$ = userdefault_rec.default_printer$

rem --- Set Baritsa default printer

	if printer$ <> "" then
		extract record (sysinfo_dev, key=pad(user$, 16), dom=std_exit) sysinfo_rec$; rem Advisory Locking
		sysinfo_rec.printer_id$ = printer$
		sysinfo_rec$ = field(sysinfo_rec$)
		write record (sysinfo_dev) sysinfo_rec$
	endif

rem  --- Only display message if running stand-alone

	if manual$ = "y" then 
		msg_id$ = "AD_PRINTER_UPDATE"
		gosub disp_message
	endif

rem --- Update AutoLaunch Status

    extract record (ads_autolaunch, key="SETPRINTER") ads_autolaunch$; rem Advisory Locking
    ads_autolaunch.process_status$="C"
    ads_autolaunch.trans_date$=date(0:"%Yl%Mz%Dz")
    ads_autolaunch.trans_time$=date(0:"%Hz%mz%sz")
    ads_autolaunch$ = field(ads_autolaunch$)
    write record (ads_autolaunch) ads_autolaunch$

    goto std_exit

open_tables: rem --- Open Tables

	call sypdir$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		rd_table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message: rem --- Display Message Dialog

	call sypdir$+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		rd_table_chans$[all]

	return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
	
    run sypdir$+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end

