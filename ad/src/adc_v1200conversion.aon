rem --- Upgrade Converion Utility For Version 12.00
rem --- Program adc_v1200conversion.aon

rem --- AddonSoftware Version 15.00 - Aug2014
rem --- Copyright BASIS International Ltd.  All Rights Reserved.


rem --- CONVCTRLFILECHAN : Channel number conversion control file data/adx_conversionCtrl is open on (Input)
rem --- CONVCTRL!        : Property object of the conversion control file data/adx_conversionCtrl (Input)
rem --- INSTALLMAP!      : HashMap object of installed modules, keyed by module ID (Input)
rem --- rdForm!          : Window object to hold progress meter
rem --- Translate!       : Translator object translations
rem --- CONV_STATUS      : Status code/0=No error (Returned)

    use java.io.File
    use java.util.HashMap
    use ::ado_file.src::FileObject
    
    setesc std_error
    seterr std_error
    
    enter convCtrlFileChan,convCtrl!,installMap!,rdForm!,Translate!,conv_status

rem --- Initializations

    conv_status=1
    dir_syp$=stbl("+DIR_SYP")
    pgmdir$=stbl("+DIR_PGM",err=*next)
    
rem --- Open log file in aon/logs directory

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",open_opts$[1]="OTA"
    gosub open_tables
    ddm_systems=num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]

    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log
    
rem --- Start progress meter

    meter_title$="adc_v1200conversion.aon"
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter

rem --- For v12.00, adm_modules.post_gl was moved to *s_params.post_to_gl. Following an upgrade,
rem --- *s_params.post_to_gl must be intialized with old adm_modules.post_gl when GL is installed.

    this_module$="GL"
	if installMap!.get(this_module$)="Y" then
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:       Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        task$="1200_GL_init_post_to_gl"
        if convCtrl!.getProperty(task$)<>"Completed" then
	        gosub init_post_to_gl
	        
	        write(convCtrlFileChan)task$+"=Completed"
	    else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
	    endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:       Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif

rem --- for v12, if OP is installed, process Cash Sale entry and history files (ope-41, opt-41)
rem --- if credit-card transaction type, encrypt credit card# and move it to new credit card field

    this_module$="OP"
    if installMap!.get(this_module$)="Y" then 
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:       Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        task$="1200_OP_convert_credit_cards"
        if convCtrl!.getProperty(task$)<>"Completed" then
            gosub convert_credit_cards
            
            write(convCtrlFileChan)task$+"=Completed"
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_PREVIOUSLY","Conversion previously completed for")+" "+task$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:       Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif
	
done: rem --- Done, close things up

    rem --- Complete progress meter
    completed_successfully=0
    if err_msg$<>"" then
        meter_text$=err_msg$
    else
        meter_text$=Translate!.getTranslation("AON_CONV_COMPLETED","Conversions completed successfully")
        completed_successfully=1
    endif
    meter_proc_recs=meter_total_recs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
    rem --- Stop progress meter
    meter_text$=""
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Complete and close log file
    print(log_dev)
    print(log_dev)"v1200conversion log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    if completed_successfully then conv_status=0; rem --- no errors encountered
	goto std_exit

rem --- For v12.00, adm_modules.post_gl was moved to *s_params.post_to_gl. Following an upgrade,
rem --- *s_params.post_to_gl must be intialized with old adm_modules.post_gl when GL is installed.
init_post_to_gl:

    devMap!=new HashMap()
    tplMap!=new HashMap()
    modules$="ADAPARBMGLIVMPOPPOPRSASF"

    rem --- Open File(s)
    j=1
	num_files=j+len(modules$)/2
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="ADM_MODULES", open_opts$[1]="OTA"
    for i=1 to len(modules$) step 2
        j=j+1
        mod$=modules$(i,2)
        rem --- Skip modules where *S_PARAMS table doesn't exist
        if pos(mod$="ADMP",2) then continue
        rem --- Skip modules modules not installed
        if installMap!.get(mod$)<>"Y" then continue
        
        open_tables$[j]=mod$+"S_PARAMS", open_opts$[j]="OTA"
    next i

	gosub open_tables

    modules_dev=num(open_chans$[1]);dim modules_tpl$:open_tpls$[1]
    j=1
    for i=1 to len(modules$) step 2
        j=j+1
        mod$=modules$(i,2)

        devMap!.put(mod$,num(open_chans$[j]))
        tplMap!.put(mod$,open_tpls$[j])
    next i

    rem --- Verify modules_tpl still includes post_gl in case it was dropped
    use_post_gl=0
    if pos("post_gl"=cvs(open_tpls$[1],8)) then use_post_gl=1

    rem --- As necessary, initialize *s_params.post_to_gl for all firms
    for i=1 to len(modules$) step 2
        mod$=modules$(i,2)
        rem --- Skip module if *s_params not found
        dev=devMap!.get(mod$)
        if dev=0 then continue
        rem --- Skip modules that don't post to GL
        if pos(mod$="ADMPSA",2) then continue
        rem --- Skip modules that don't have post_to_gl in *s_params template
        if pos("post_to_gl"=cvs(tplMap!.get(mod$),8))=0 then continue
        
        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": "+mod$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        dim tpl$:tplMap!.get(mod$)
        read(dev,key="",dom=*next)
        while 1
            key$=key(dev,end=*break)
            extractrecord(dev)tpl$; rem Advisory Locking

            if cvs(tpl.post_to_gl$,2)="" then
                tpl.post_to_gl$="Y"

                rem --- Override with pre-v12 adm_modules.post_gl if still available
                if use_post_gl then
                    modules_tpl.post_gl$=""
                    extract record (modules_dev,key=stbl("+AON_APPCOMPANY",err=*next)+pad(mod$,3),dom=*endif)modules_tpl$; rem Advisory Locking
                    if pos(modules_tpl.post_gl$="YN") then
                        tpl.post_to_gl$=modules_tpl.post_gl$
                        rem --- clear adm_modules.post_gl
                        modules_tpl.post_gl$(1)=""
                        write record (modules_dev)modules_tpl$
                    else
                        read(modules_dev,dom=*next)
                    endif
                endif

                tpl$=field(tpl$)
                writerecord(dev,key=key$)tpl$
            else
                read(dev)
            endif
        wend
    next i

    return

rem --- for v12, if OP is installed, process Cash Sale entry and history files (ope-41, opt-41)
rem --- if credit-card transaction type, encrypt credit card# and move it to new credit card field
convert_credit_cards:

    rem --- Open File(s)
	num_files=3
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
	open_tables$[1]="OPE_INVCASH", open_opts$[1]="OTA"
	open_tables$[2]="OPT_INVCASH", open_opts$[2]="OTA"
    open_tables$[3]="ARC_CASHCODE", open_opts$[3]="OTA"

	gosub open_tables

    ope_invcash_dev=num(open_chans$[1]);dim ope_invcash$:open_tpls$[1]
    opt_invcash_dev=num(open_chans$[2]);dim opt_invcash$:open_tpls$[2]
    arc_cashcode_dev=num(open_chans$[3]);dim arc_cashcode$:open_tpls$[3]
    
    use ::sys/prog/bao_valid_card.bbj::CreditCard
    declare CreditCard credCard!
    credCard!=new CreditCard()
    cc_config$="BAR_CREDIT_CARD"
            
rem --- Process credit card type records

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": "+"OPE_INVCASH"
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$

    proc_dev=ope_invcash_dev
    dim proc_rec$:fattr(ope_invcash$)
    gosub process_file

    rem --- Increment progress meter
    meter_text$=Translate!.getTranslation("AON_UPDATING","Updating")+": "+"OPT_INVCASH"
    meter_proc_recs=meter_proc_recs+1
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
    proc_dev=opt_invcash_dev
    dim proc_rec$:fattr(opt_invcash$)
    gosub process_file
    
    return

process_file: rem --- process ope/opt-41    
 
    while 1   
        extractrecord (proc_dev,end=*break)proc_rec$; rem Advisory Locking
        proc_key$=key(proc_dev)
        dim arc_cashcode$:fattr(arc_cashcode$)
        readrecord(arc_cashcode_dev,key=firm_id$+"C"+proc_rec.cash_rec_cd$,dom=*next)arc_cashcode$
        if arc_cashcode.trans_type$="P" and cvs(proc_rec.payment_id$,3)<>""
            cc_status$=""
            cc_card$=""
            cc_card_raw$=cvs(proc_rec.payment_id$,3)
            for x=1 to len(cc_card_raw$)
                if cc_card_raw$(x,1)>="0" and cc_card_raw$(x,1)<="9"
                    cc_card$=cc_card$+cc_card_raw$(x,1)
                endif
            next x           
            if len(cc_card$)>4
                gosub mod10_check              
                if cc_status$=""
                    proc_rec.credit_card_no$=credCard!.encryptCard(cc_card$,cc_config$)
                    proc_rec.payment_id$="" 
                    proc_rec$=field(proc_rec$)               
                    writerecord(proc_dev)proc_rec$

                  rem --- Write keys of updated records to log
                  print(log_dev)proc_key$
                endif
            endif
        endif
        read(proc_dev,key=proc_key$)
    wend

    return

mod10_check:

    cc_digits$ = ""
    cc_curr_digit = 0

    for cc_temp = len(cc_card$) to 1 step -1
        cc_curr_digit = cc_curr_digit + 1
        cc_no = num(cc_card$(cc_temp,1)) * iff(mod(cc_curr_digit,2)=0, 2, 1)
        cc_digits$ = str(cc_no) + cc_digits$
    next cc_temp

    cc_total = 0
    for cc_temp = 1 to len(cc_digits$)
        cc_total = cc_total + num(cc_digits$(cc_temp, 1))
    next cc_temp

    if mod(cc_total, 10) <> 0 then cc_status$ = "INVALID"

    return

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/v1200conversion_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"v1200conversion log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!
    sysGUI!=BBjAPI().getSysGui()

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return

fix_path: rem --- Flip directory path separators
    pos=pos("\"=filePath$)
    while pos
        filePath$=filePath$(1, pos-1)+"/"+filePath$(pos+1)
        pos=pos("\"=filePath$)
    wend
    return
    
open_tables: rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        goto std_exit
    endif

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    
    exit

rem #endinclude std_exit.src

    end
