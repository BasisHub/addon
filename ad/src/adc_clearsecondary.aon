rem adc - Clear Records In A File For A Partial Secondary Key

rem  +-----------------------------------------+
rem  | AddonSoftware Version 12.0.0 - 23Jan2012|
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- ACTION$  :  Action Code (Input)
rem ---          :  N=No error on inability to lock file
rem --- CHANNEL  :  Channel number of file to remove records from (Input)
rem --- PARTIAL$ :  Partial key to remove (Input)
rem --- KEY_NAME$:  Secondary Key Name
rem --- STATUS   :  Status code (Returned)

    seterr std_error
    setesc std_error
    enter action$,channel,partial$,key_name$,status

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Open/Lock Files

    error=-1
    fid$=fid(channel,err=std_exit)
    lock (channel,err=nolock)
    goto initializations

nolock: rem --- Unable to lock target file

    if pos("N"=action$)=0 
    	error=err
        status=999
        msg_id$="AD_NOLOCK"
        gosub disp_message
        goto std_exit
    endif

initializations: rem --- Initializations

    more=1

rem --- Remove all records with the specified partial key

	while more
		read (channel,key=partial$,knum=key_name$,dom=*next)
		k$=key(channel,end=*break)
		if pos(partial$=k$)<>1 break
		k$=key(channel,knum=0)
		remove (channel,key=k$)
	wend

rem --- All done

	goto std_exit
    
disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

	return
    
rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    unlock (channel,err=*next)
rem    if pos("N"=action$)=0 and error>=0 then exit error
rem --- rem'd the above because it causes control to go directly
rem ---		to the seterr routine in the calling program, rather than returning to
rem ---		the call line, where we can check the status flag and do accordingly
    exit

rem #endinclude std_exit.src

    end
