rem adc - Clear File
rem Program adc_clearfile v8.0.0 21Mar2006 (syc_fa)
rem Created by adx_progconv.bbx v1.0.0 (03/21/2006 04:44:57)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- CHANNEL: Channel number of file to clear (Input)

    seterr std_error
    setesc std_error
    enter channel

rem --- Parameters

    if channel=0 goto invalid_channel

rem --- Clear the file open on channel

    fid$=fid(channel,err=channel_not_open)
    if len(fid$)<=9 goto not_a_file
    pathname$=fid$(9)
    close (channel)
    initfile pathname$,err=cant_init
    open (channel,err=cant_open)pathname$

done: rem --- All done

    goto std_exit

rem --- Error handling

invalid_channel:  
    message$="Channel not set."
    goto error
channel_not_open: 
    message$="Channel "+str(channel)+" not open."
    goto error
not_a_file:       
    message$="Channel "+fid$+" is not a file."
    goto error
cant_init:        
    message$="Can't clear file "+pathname$+" File is in use by another user."
    goto error
cant_open:        
    message$="Can't open file "+pathname$+" (Error="+str(err)+"/TCB(10)="+str(tcb(10))+")"
    goto error

error: rem --- Unable to lock or erase target file

    msg_id$="GENERIC_WARN"
    dim msg_tokens$[1]
    msg_tokens$[1]=message$
    gosub disp_message
    goto std_exit

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
