rem --- Upgrade Conversion Utility For Version 14.00
rem --- Program adx_v1400conversion.aon

rem --- AddonSoftware Version 14.00 - Apr2014
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    seterr std_error
    setesc std_error

rem --- Get program path

    pgmdir$=stbl("+DIR_PGM",err=*next)
    
rem --- Retrieve sysinfo data

    rem --- If BUI, initialize Barista processes
    if info(3,6)="5" then
        use ::ado_util.src::util
        Translate!=util.initBUIProcess()
        if Translate!=null() then goto std_exit
    endif

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Get user approval to proceed

    msg_id$="AON_RUN_QUERY"
    dim x$:stbl("+SYSINFO_TPL")
    dim msg_tokens$[1]
    x$=stbl("+SYSINFO")                                                            
    msg_tokens$[1]=x.task_desc$
    gosub disp_message
    if msg_opt$<>"Y" then goto std_exit

rem --- As needed, run previous version conversion utilities in order
    rem --- Currently there are no previous version conversion utilities. This is the first one.
    
rem --- For version 14.00, initialize invoice_bal in apt_invoicehdr

    theFirm$=""
    call pgmdir$+"apc_rebuildinvbal.aon",theFirm$,status
    
rem --- For version 14.10, update drilldown definitions in ddm_drill_defs
    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_DRILL_DEFS",   open_opts$[1]="OTA@"
    gosub open_tables
    ddm_drilldefs_dev=num(open_chans$[1])
    dim ddm_drilldefs$:open_tpls$[1]

    rem --- Update AP_INVOICES drilldown definition
    wk$=fattr(ddm_drilldefs$,"DRILL_DEF_ID")
    dim drill_def_id$(dec(wk$(10,2)))
    drill_def_id$(1)="AP_INVOICES"
    readrecord(ddm_drilldefs_dev,key=drill_def_id$,dom=*next)ddm_drilldefs$
    if ddm_drilldefs.drill_def_id$=drill_def_id$ then
        ddm_drilldefs.dd_filter_col_01$="INVOICE_BAL"
        ddm_drilldefs.dd_filter_def_01$="<>0"
        ddm_drilldefs.filter_prog$=""
        writerecord(ddm_drilldefs_dev)ddm_drilldefs$
    endif

    rem --- Update GL_YTD_AMT drilldown definition
    drill_def_id$(1)="GL_YTD_AMT"
    readrecord(ddm_drilldefs_dev,key=drill_def_id$,dom=*next)ddm_drilldefs$
    if ddm_drilldefs.drill_def_id$=drill_def_id$ then
        ddm_drilldefs.filter_prog$="glf_ytdamts.aon"
        writerecord(ddm_drilldefs_dev)ddm_drilldefs$
    endif

done: rem --- All done

    msg_id$="UPDATE_COMPLETE"
    dim msg_tokens$[1]
    msg_opt$=""
    gosub disp_message

    goto std_exit
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,rd_table_chans$[all]
    return

rem #include std_error.src 

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
