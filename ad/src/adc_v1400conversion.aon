rem --- Upgrade Conversion Utility For Version 14.00
rem --- Program adc_v1400conversion.aon

rem --- AddonSoftware Version 15.00 - Sept2014
rem --- Copyright BASIS International Ltd.  All Rights Reserved.


rem --- CONVCTRL!   : Property object of the conversion control file data/adx_conversionCtrl (Input)
rem --- INSTALLMAP! : HashMap object of installed modules, keyed by module ID (Input)
rem --- rdForm!     : Window object to hold progress meter
rem --- Translate!  : Translator object translations
rem --- CONV_STATUS : Status code/0=No error (Returned)

    use java.io.File
    use ::ado_file.src::FileObject
    
    setesc std_error
    seterr std_error
    
    enter convCtrl!,installMap!,rdForm!,Translate!,conv_status

rem --- Initializations

    conv_status=1
    dir_syp$=stbl("+DIR_SYP")
    pgmdir$=stbl("+DIR_PGM",err=*next)
    dataDir$=FileObject.fixPath(stbl("+DIR_DAT",err=*next), "/")
    
rem --- Open log file in aon/logs directory

    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="DDM_SYSTEMS",open_opts$[1]="OTA"
    gosub open_tables
    ddm_systems=num(open_chans$[1]);dim ddm_systems$:open_tpls$[1]
    
    aonDir$=""
    readrecord(ddm_systems,key=pad("ADDON",16," "),knum="SYSTEM_ID",err=*next)ddm_systems$
    if cvs(ddm_systems.mount_dir$,2)<>"" then
        aonDir$=ddm_systems.mount_dir$
    endif

    location$ = aonDir$
    gosub open_log
    
rem --- Start progress meter

    meter_title$="adc_v1400conversion.aon"
    meter_proc_recs=0
    meter_text$=""
    meter_action$="WIN-LST"
    gosub disp_meter
    
rem --- For version 14.10, update drilldown definitions in ddm_drill_defs

    this_module$="AD"
    if installMap!.get(this_module$)="Y" then 
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:       Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        num_files=1
        dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
        open_tables$[1]="DDM_DRILL_DEFS",   open_opts$[1]="OTA"
        gosub open_tables
        ddm_drilldefs_dev=num(open_chans$[1])
        dim ddm_drilldefs$:open_tpls$[1]
        
        rem --- Update AP_INVOICES drilldown definition
        wk$=fattr(ddm_drilldefs$,"DRILL_DEF_ID")
        dim drill_def_id$(dec(wk$(10,2)))
        drill_def_id$(1)="AP_INVOICES"
        readrecord(ddm_drilldefs_dev,key=drill_def_id$,dom=*next)ddm_drilldefs$
        if ddm_drilldefs.drill_def_id$=drill_def_id$ then
            ddm_drilldefs.dd_filter_col_01$="INVOICE_BAL"
            ddm_drilldefs.dd_filter_def_01$="<>0"
            ddm_drilldefs.filter_prog$=""
            writerecord(ddm_drilldefs_dev)ddm_drilldefs$
        endif
        
        rem --- Update GL_YTD_AMT drilldown definition
        drill_def_id$(1)="GL_YTD_AMT"
        readrecord(ddm_drilldefs_dev,key=drill_def_id$,dom=*next)ddm_drilldefs$
        if ddm_drilldefs.drill_def_id$=drill_def_id$ then
            ddm_drilldefs.filter_prog$="glf_ytdamts.aon"
            writerecord(ddm_drilldefs_dev)ddm_drilldefs$
        endif

        rem --- Increment progress meter
        meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:       Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:       Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif
    
rem --- For version 14.00, initialize invoice_bal in apt_invoicehdr

    this_module$="AP"
    if installMap!.get(this_module$)="Y" then 
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:       Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$

        rem --- Does conversion marker file exist for Initializeing invoice_bal in apt_invoicehdr?
        conv_marker_name$="v1400_apt-01"
        conv_marker_file$=dataDir$+conv_marker_name$
        convmarkerFile!=new File(conv_marker_file$)
        if convmarkerFile!.exists() then
            rem --- Verify required files are present
            missingFiles!=BBjAPI().makeVector()
            requiredFiles!=BBjAPI().makeVector()
            requiredFiles!.addAll(java.util.Arrays.asList(convCtrl!.getProperty(conv_marker_name$(2)).split(";")))
            for i=0 to requiredFiles!.size()-1
                file!=new File(stbl("+"+this_module$+"DATA")+requiredFiles!.get(i))
                if !file!.exists() then
                    missingFiles!.addItem(requiredFiles!.get(i))
                endif
            next i
            if missingFiles!.size()=0 then
                rem --- Initialize invoice_bal in apt_invoicehdr
                theFirm$=""
                call pgmdir$+"apc_rebuildinvbal.aon",theFirm$,status
                if status=0 then
                    rem --- Conversion completed successfully
                    rem --- Increment progress meter
                    meter_text$=Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+
:                   Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+convCtrl!.getProperty(conv_marker_name$(2))
                    meter_proc_recs=meter_proc_recs+1
                    meter_action$="MTR-LST"
                    gosub disp_meter
                    print(log_dev)meter_text$

                    rem --- Delete conversion marker file
                    if convmarkerFile!.delete() then
                        rem --- Increment progress meter
                        meter_text$=Translate!.getTranslation("AON_CONV_MARKER_DELETED","Conversion marker file deleted")+": "+conv_marker_file$
                        meter_proc_recs=meter_proc_recs+1
                        meter_action$="MTR-LST"
                        gosub disp_meter
                        print(log_dev)meter_text$
                    endif
                else
                    rem --- Conversion did NOT complete successfully, exit with error message
                    err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:                   Translate!.getTranslation("AON_DATA_CONV","Data conversion")+" "+Translate!.getTranslation("AON_NOT","Not")+" "+
:                   Translate!.getTranslation("AON_COMPLETED_FOR","completed for")+": "+convCtrl!.getProperty(conv_marker_name$(2))+" *****"
                    goto done
                endif
            else
                rem --- Required file missing
                msg_id$="AD_FILE_MISSING"
                dim msg_tokens$[1]
                msg_tokens$[1]=missingFiles!.get(0)
                gosub disp_message
                err_msg$="***** "+Translate!.getTranslation("AON_ERROR","Error")+": "+
:               Translate!.getTranslation("AON_FILE_NOT_FOUND","Required file not found")+": "+missingFiles!.get(0)+" *****"
                goto done
            endif
        else
            rem --- Increment progress meter
            meter_text$=Translate!.getTranslation("AON_CONV_MARKER_NOT_FOUND","Conversion marker file not found")+": "+conv_marker_file$
            meter_proc_recs=meter_proc_recs+1
            meter_action$="MTR-LST"
            gosub disp_meter
            print(log_dev)meter_text$
        endif
    else
        rem --- Increment progress meter
        meter_text$=this_module$+" "+Translate!.getTranslation("AON_NOT","Not")+" "+Translate!.getTranslation("AON_INSTALLED","Installed")+", "+
:       Translate!.getTranslation("AON_SKIP","SKIP")+" "+Translate!.getTranslation("AON_DO_DATA_CONV","Doing data conversion for")+" "+this_module$
        meter_proc_recs=meter_proc_recs+1
        meter_action$="MTR-LST"
        gosub disp_meter
        print(log_dev)meter_text$
    endif
	
done: rem --- Done, close things up

    rem --- Complete progress meter
    completed_successfully=0
    if err_msg$<>"" then
        meter_text$=err_msg$
    else
        meter_text$=Translate!.getTranslation("AON_CONV_COMPLETED","Conversions completed successfully")
        completed_successfully=1
    endif
    meter_proc_recs=meter_total_recs
    meter_action$="MTR-LST"
    gosub disp_meter
    print(log_dev)meter_text$
    
    rem --- Stop progress meter
    meter_text$=""
    meter_action$="LST-END"
    gosub disp_meter

    rem --- Complete and close log file
    print(log_dev)
    print(log_dev)"v1400conversion log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    close(log_dev)

    if completed_successfully then conv_status=0; rem --- no errors encountered
	goto std_exit

open_log: rem --- Open log file
           
    rem --- create logs directory at location
    logDir$=FileObject.fixPath(location$ + "/logs", "/")
    FileObject.makeDirs(new File(logDir$))

    rem --- create and open log file
    log$=logDir$+"/v1400conversion_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".log"
    erase log$,err=*next
    string log$
    log_dev=unt
    open(log_dev)log$
            
    rem --- write log header info
    print(log_dev)"v1400conversion log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
    print(log_dev)

    return
    
disp_meter: rem --- Display Progress Meter

    rem --- sysGUI! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjSysGui sysGUI!
    sysGUI!=BBjAPI().getSysGui()

    rem --- rdForm! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow rdForm!

    rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
    rem declare BBjTopLevelWindow meterWin!

    call dir_syp$+"bam_prog_bar.bbj",
:       sysGUI!,
:       rdForm!,
:       meterWin!,
:       meter_title$,
:       meter_total_recs,
:       meter_proc_recs,
:       meter_text$,
:       meter_action$

    return
   
open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>"" then
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
        gosub disp_message
        rdFuncSpace!=bbjAPI().getGroupNamespace().setValue("+build_task","OFF")
        release
    endif
    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)
    
    exit

rem #endinclude std_exit.src

    end
