rem ==========================================================================
rem --- A class to help create picklists
rem --- Program: ado_picklist.src: 
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

rem Note: this class is incomplete and not implemented

    use ::ado_func.src::func
    use ::adc_array.aon::ArrayObject

    class public Picklist

        field private BBjTopLevelWindow Form!
        field private BBjVector OutVect!
        field private BBjVector BrkVect!
        field private BBjVector HdrVect!
        field private BBjVector TotVect!
        field public BBjInt Indent% = 0
        field private BBjTemplatedString Sysinfo!
        field public BBjString CustMask$
        field public BBjString AmtMask$
        field public BBjString PriceMask$
        field public BBjInt PrintPrice% = 0
        field public BBjInt MultiWhse% = 0
        field private BBjInt line%
        field public BBjInt MaxLine% = 37
        field public ArrayObject Headings!
        field public ArrayObject Columns!
        field private BBjString pgmdir$
        field private BBjTemplatedString ope01a!
        field private BBjString billlto_addr$
        field private BBjString shipto_addr$
        field private BBjString term_desc$
        field private BBjString salesperson$
        field public BBjString Rep_date$
        field public BBjString Rep_date_stamp$
        field public BBjString Rep_time$
        field public BBjString Rep_time_stamp$
        field public BBjString Rep_prog_stamp$
        field public BBjInt Precision%
        field private BBjNumber total

    rem --- Constructor

        method public Picklist(BBjTopLevelWindow pForm!)
            seterr method_error
        
            #Form! = pForm!
            
            #OutVect! = BBjAPI().makeVector()
            #BrkVect! = BBjAPI().makeVector()
            #HdrVect! = BBjAPI().makeVector()
            #TotVect! = BBjAPI().makeVector()

            #Sysinfo! = BBjAPI().makeTemplatedString(stbl("+SYSINFO_TPL"))
            #Sysinfo!.setString(stbl("+SYSINFO"))

            #pgmdir$=""
            #pgmdir$=stbl("+DIR_PGM",err=*next)

            call #pgmdir$+"adc_getmask.aon","","AR","I","",m0$,0,m0
            call #pgmdir$+"adc_getmask.aon","","IV","A","",m1$,0,m1
            call #pgmdir$+"adc_getmask.aon","","IV","P","",m4$,0,m4

            #CustMask$  = m0$
            #AmtMask$   = m1$
            #PriceMask$ = m4$
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem --- Setup the header of the picklist

        method public void header(BBjTemplatedString pOpe01a!, BBjString p_billto_addr$, BBjString p_shipto_addr$, BBjString p_terms_desc$, BBjString p_salesperson$)
            seterr method_error
            #ope01a!       = pOpe01a!
            #billlto_addr$ = p_billto_addr$
            #shipto_addr$  = p_shipto_addr$
            #term_desc$    = p_terms_desc$
            #salesperson$  = p_salesperson$
        
            dim ope01a$:pOpe01a!.fattr()
            ope01a$ = pOpe01a!.getString()

            if ope01a.invoice_type$="P"
                #OutVect!.addItem("")
                dim out$(80)
                out$(#Indent%+25)="Q U O T A T I O N   O N L Y"
                #OutVect!.addItem(out$)
            else 
                dim out$(80)
                out$(#Indent%+21)="O R D E R / P I C K I N G   L I S T"
                #OutVect!.addItem(out$)
            endif

            if ope01a.reprint_flag$="Y"
                z0$="*** R E P R I N T ***" 
            else 
                z0$=""
            endif

            dim out$(80)
            out$(#Indent%+29)=z0$
            #OutVect!.addItem(out$)
            out$(#Indent%+1)=#Sysinfo!.getFieldAsString("firm_name")
            out$(#Indent%+56)="Order Number: "+ope01a.order_no$+" "+ope01a.backord_flag$
            #OutVect!.addItem(out$)

            dim out$(80)
            out$(#Indent%+64)="Date: "+func.formatDate(ope01a.order_date$)
            #OutVect!.addItem(out$)

            dim out$(80)
            out$(#Indent%+3)="Customer: "+func.alphaMask(ope01a.customer_id$, #CustMask$)
            out$(#Indent%+50)="Ship To:"
            #OutVect!.addItem(out$)

            for i=1 to 6
                dim out$(80)
                out$(#Indent%+13)=p_billto_addr$(i*30-29,30)
                out$(#Indent%+50)=p_shipto_addr$(i*30-29,30)
                #OutVect!.addItem(out$)
            next i

            #OutVect!.addItem(fill(80,"-"))

            dim out$(80)
            out$(#Indent%+1)="Cust P.O.#    Terms           Salesperson          Ship Via   Ship Date    PC"
            #OutVect!.addItem(out$)
            #OutVect!.addItem(fill(80,"-"))

            dim out$(80)
            out$(#Indent%+1)=ope01a.customer_po_no$
            out$(#Indent%+15)=p_terms_desc$
            out$(#Indent%+31)=p_salesperson$
            out$(#Indent%+52)=ope01a.ar_ship_via$
            out$(#Indent%+63)=func.formatDate(ope01a.shipmnt_date$)
            out$(#Indent%+75)=ope01a.price_code$
            #OutVect!.addItem(out$)
            #OutVect!.addItem(fill(80,"-"))

            dim out$(80)
            out$(#Indent%+29)="Item Number &"
            #OutVect!.addItem(out$)

            dim out$(80)
            out$(#Indent%+1)="    Order     Ship   B/O        Description"
            if ope01a.invoice_type$="P" or #PrintPrice% then out$(#Indent%+74-len(#PriceMask$)+4,5)="Price"
            if #MultiWhse% then out$(#Indent%+48,4)="Whse"
            out$(#Indent%+53,8)="Location"
            out$(#Indent%+75,6)="Carton"
            #OutVect!.addItem(out$)
            #OutVect!.addItem(fill(80,"-"))

            #line% = 0
            #total = 0
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
        method public void header()
            #header(#ope01a!, #billto_addr$, #shipto_addr$, #terms_desc$, #salesperson$)
        methodend
            
    rem --- Print detail
    
        method public void detail(BBjTemplatedString pOe11a!, BBjTemplatedString pOpm02!, BBjTemplatedString pIvm01a!, BBjTemplatedString pIvm02a!)
            seterr method_error
        
            precision #Precision%
        
            dim ope11a$:pOpe11a!.fattr()
            dim opm02a$:pOpm02a!.fattr()
            dim ivm01a$:pIvm01a!.fattr()
            dim ivm02a$:pIvm02a!.fattr()
            
            ope11a$ = pOpe11a!.getString()
            opm02a$ = pOpm02a!.getString()
            ivm01a$ = pIvm01a!.getString()
            ivm02a$ = pIvm02a!.getString()
        
            if #line%+1 > #MaxLine% then 
                #continue_page()
            endif

            dim out$(80)

            if pos(opm02a.line_type$="MO")=0 then
                out$(#Indent%+1)=pad(str(ope11a.qty_ordered),9,"R")
                if ope11a.commit_flag$="N"
                    out$(#Indent%+14)="Ship:"+func.formatDate(ope11a.est_shp_date$)
                else 
                    out$(#Indent%+14)="______ ______"
                endif
                out$(#Indent%+75)="______"
            endif

            if pos(opm02a.line_type$="MO")<>0 then 
                out$(#Indent%+29)=ope11a.order_memo$
            endif  

            if opm02a.line_type$="N" then 
                out$(#Indent%+29)="Non-Stock"
            endif

            if pos(opm02a.line_type$=" SRDP")<>0 then 
                out$(#Indent%+29)=ope11a.item_id$
            endif

            if ope01a.invoice_type$<>"P" then 
                if pos(opm02a.line_type$=" SRDPN")<>0 and #MultiWhse%>0 then 
                    out$(#Indent%+49)=ope11a.warehouse_id$
                endif

                if opm02a.dropship$="Y" then 
                    out$(#Indent%+54)="*Drop Ship"
                else   
                    if pos(opm02a.line_type$=" SRDP")<>0 then 
                        out$(#Indent%+54)=ivm02a.location$
                    endif
                endif  
                
                if #PrintPrice% = "Y" then
                    if pos(opm02a.line_type$=" SRDPN")<>0
                        out$(#Indent%+73-m4)=str(ope11a.unit_price:#PriceMask$)
                        #total=#total+ope11a.ext_price
                    endif 

                    if pos(opm02a.line_type$="O")<>0 then 
                        out$(#Indent%+73-m1)=str(ope11a.ext_price:#AmtMask$)
                        #total=#total+ope11a.ext_price
                    endif    
                endif
            endif

            OutVect!.addItem(out$)
            #line% = #line% + 1

            if pos(opm02a.line_type$=" SRDPN")<>0 and #line%+1 > #MaxLine% then 
                #continue_page()
            endif

            dim out$(80)

            if pos(opm02a.line_type$=" SRDP")<>0
                out$(#Indent%+33)=ivm01a.item_desc$
                OutVect!.addItem(out$)
                #line% = #line% + 1
            endif

            if opm02a.line_type$="N"
                out$(#Indent%+33)=ope11a.order_memo$
                OutVect!.addItem(out$)
                #line% = #line% + 1
            endif 
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend
        
    rem --- Continue page
        
        method public void continue_page()
            seterr method_error

            if #MaxLine%-#line%-1 > 0 
                for cntr=1 to #MaxLine%-#line%-1
                    OutVect!.addItem("")
                next cntr
            endif  

            dim out$(80)
            out$(#Indent%+65)="Continued"
            #OutVect!.addItem(out$)
            #BrkVect!.addItem(str(OutVect!.size()/(columns+1)))
            #HdrVect!.addItem(code$)
            #header()
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

    rem --- Print picklist(s)

        method public void print()

            if #OutVect!<>null() and #OutVect!.size() then
                call #pgmdir$+"adc_array.aon::str_object2array", #Headings!, headings$[all], status
                call #pgmdir$+"adc_array.aon::str_object2array", #Columns!, columns$[all], status

                call #pgmdir$+"adx_typesafe.aon::docout",
:                   #Form!,
:                   alias_id$,
:                   #Rep_date$,
:                   #Rep_date_stamp$,
:                   #Rep_time$,
:                   #Rep_time_stamp$,
:                   #Rep_prog_stamp$,
:                   headings$[all],
:                   columns$[all],
:                   #OutVect!,
:                   #BrkVect!,
:                   #HdrVect!,
:                   #TotVect!,
:                   out_types$,
:                   out_action$,
:                   out_status$,
:                   table_chans$[all]

            endif

        methodend


    classend
