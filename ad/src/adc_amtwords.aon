rem adc - Convert Dollars and Cents to Written Name
rem Program adc_amtwords v8.0.0 21Mar2006 (syc_nn)
rem Created by adx_progconv.bbx v1.0.0 (03/21/2006 04:11:46)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- amount = Number to convert (Input)
rem --- amount$  = Name of number (Output)

    seterr std_error
    setesc std_error
    enter amount,amount$

rem --- Sanity check

    amount$="***Void**Void**Void**Void***"
    if amount<=0 goto std_exit

rem --- Cents

    x0=int(fpt(amount)*100)
    if x0=0 amount$="Dollars Exactly" 
:      else amount$="and "+str(x0:"00")+"/100 Dollars"
    num$=str(int(amount))
    if num$="0" amount$="Zero "+amount$; goto done
    if amount>=1100 and amount<10000 goto special_case

rem --- Hundreds

    if len(num$)<3 in$=num$,num$="" 
:             else in$=num$(len(num$)-2),num$=num$(1,len(num$)-3)
    gosub conversion
    if out$<>"" amount$=out$+" "+amount$
    if num$="" goto done

rem --- Thousands

    if len(num$)<3 in$=num$,num$=""
:             else in$=num$(len(num$)-2),num$=num$(1,len(num$)-3)
    gosub conversion
    if out$<>"" amount$=out$+" Thousand "+amount$
    if num$="" goto done

rem --- Millions

    if len(num$)<3 in$=num$,num$=""
:             else in$=num$(len(num$)-2),num$=num$(1,len(num$)-3)
    gosub conversion
    if out$<>"" amount$=out$+" Million "+amount$
    if num$="" goto done

rem --- Geez, we left money on the table, huh?

    amount$="Can't do billions yet, buy your own software company"
    goto std_exit

special_case: rem --- Special processing for 1100-9999

    in$=num$(3,2)
    gosub conversion
    if out$<>"" amount$=out$+" "+amount$
    in$=num$(1,2)
    gosub conversion
    amount$=out$+" Hundred "+amount$
    goto done

done: rem --- Done, look for exceptions

    if pos("One Dollars"=amount$)=1 amount$=amount$(1,10)+amount$(12)
    goto std_exit

conversion: rem --- Number names from zero to 999

    out$="Oops"
    if len(in$)>3 or in$="" goto conversion_exit
    if num(in$)=0 out$=""; goto conversion_exit

rem --- Ones

    if len(in$)>1 and in$(len(in$)-1,1)="1" goto teens
    x0$=in$(len(in$))
    in$=in$(1,len(in$)-1)
    gosub units_name
    out$=units$
    goto tens

teens: rem --- Teens

    x1$=in$(len(in$))
    in$=in$(1,len(in$)-2)
    switch num(x1$)
           case 0; out$="Ten"; break
           case 1; out$="Eleven"; break
           case 2; out$="Twelve"; break
           case 3; out$="Thirteen"; break
           case 4; out$="Fourteen"; break
           case 5; out$="Fifteen"; break
           case 6; out$="Sixteen"; break
           case 7; out$="Seventeen"; break
           case 8; out$="Eighteen"; break
           case 9; out$="Nineteen"; break
    swend
    goto hundreds

tens: rem --- Twenty to Ninety

    if in$="" goto conversion_exit
    x2$=in$(len(in$))
    in$=in$(1,len(in$)-1)
    if x2$="0" goto hundreds
    switch num(x2$)
           case 2; tens$="Twenty"; break
           case 3; tens$="Thirty"; break
           case 4; tens$="Forty"; break
           case 5; tens$="Fifty"; break
           case 6; tens$="Sixty"; break
           case 7; tens$="Seventy"; break
           case 8; tens$="Eighty"; break
           case 9; tens$="Ninety"; break
    swend
    if out$="" out$=tens$
:         else out$=tens$+"-"+out$

hundreds: rem --- Hundreds

    if in$="" goto conversion_exit
    x0$=in$
    gosub units_name
    if units$="" goto conversion_exit
    if out$="" out$=units$+" Hundred" else out$=units$+" Hundred "+out$

conversion_exit: rem --- Done

    return

units_name: rem --- Number names from zero to nine

    units$="Oops"
    if len(x0$)<>1 goto units_name_exit
    switch num(x0$)
           case 0; units$=""; break
           case 1; units$="One"; break
           case 2; units$="Two"; break
           case 3; units$="Three"; break
           case 4; units$="Four"; break
           case 5; units$="Five"; break
           case 6; units$="Six"; break
           case 7; units$="Seven"; break
           case 8; units$="Eight"; break
           case 9; units$="Nine"; break
    swend
units_name_exit:
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
