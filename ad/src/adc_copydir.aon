rem ==========================================================================
rem --- adc_copydir.aon 
rem --- Call to recursively copy a directory from one location to another.
rem --- 
rem --- AddonSoftware Version 10.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved
rem ==========================================================================


rem --- SOURCEDIR$   : Location of source directory being copied from (Input)
rem --- TARGETDIR$   : Location of target directory being copied to (Input)
rem --- RDFORM!      : Parent BBjTopLevelWindow object, the form (Input)
rem --- WAIT4OK%     : Wait for user's OK when done, 0=don't wait/1=wait (Input)
rem --- STATUS       : Status code/0=No error (Returned)

    declare BBjTopLevelWindow rdForm!

    seterr std_error
    setesc std_error
    enter sourceDir$,targetDir$,rdForm!,wait4ok%,status

rem --- Initializations

    status=0

rem --- Recursively copy sourceDir to targetDir

    declare CopyDir utility!
    utility! = new CopyDir(rdForm!, wait4ok%)
    utility!.copyDirectory(sourceDir$, targetDir$)
    
done: rem --- All done
    
    goto std_exit
   
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

rem /**
rem  * Utility Class for recursively copying a directory from one location to another.
rem  */
    use java.io.File
    use java.util.Vector
    use ::bbtranslator.bbj::BBTranslator
    use ::ado_file.src::FileObject

    class public CopyDir
        field private Vector skipDirs! = new Vector()
        field private BBjInt wait4ok% = 0
        field private BBjNumber BLOCKSIZE = 2^20
        field private BBjNumber log_dev = 0
        field private BBjNumber meter_proc_recs = 0
        field private BBjNumber meter_total_recs = 0
        field private BBjString dir_syp$=stbl("+DIR_SYP")
        field private BBjSysGui sysGUI!
        field private BBjTopLevelWindow form!
        field private BBjTopLevelWindow meter!


        rem /**
        rem  * Constructor.
        rem  *
        rem  * @param BBjTopLevelWindow rdForm!
        rem  * @param BBjInt wait4ok
        rem  */
        method public CopyDir(BBjTopLevelWindow rdForm!, BBjInt wait4ok%)
            #sysGUI! = BBjAPI().getSysGui()
            #form! = rdForm!
            #wait4ok% = wait4ok%
        methodend

        rem /**
        rem  * Recursively copy a directory.
        rem  *
        rem  * Recursively copies a directory for old location to new location. 
        rem  *
        rem  * @param BBjString sourceDir$
        rem  * @param BBjString targetDir$
        rem  */
        method public void copyDirectory(BBjString sourceDir$, BBjString targetDir$)
            #meter! = #createProgressMeter()

            #copyAonDirectory(new File(sourceDir$), new File(targetDir$))

            #destroyProgressMeter()
        methodend

        rem /**
        rem  * Recursively copy a directory.
        rem  *
        rem  * Recursively copies a directory from source File to target File. 
        rem  *
        rem  * @param File source
        rem  * @param File target
        rem  */
        method private void copyAonDirectory(File source!, File target!)
            seterr method_error
    
            rem -- recursively process directories and copy files
            if(source!.isDirectory()) then
            
                rem --- create new directory if it doesn't exist
                FileObject.makeDirs(target!)

                rem --- get list of what is in the source dir, and process it
                declare Vector fileVector!
                fileVector! = new Vector(java.util.Arrays.asList(source!.list()))
                if(fileVector!.size()>0) then
                    for i=0 to fileVector!.size()-1
                        #copyAonDirectory(new File(source!, cast(BBjString, fileVector!.get(i))), 
:                                         new File(target!, cast(BBjString, fileVector!.get(i))))
                    next i
                endif
                
            else
                
                rem --- skip if source and target are the same
                if !FileObject.isSameFile(source!.getPath(),target!.getPath()) then
                    rem --- copy file
                    rem --- Can't use java.nio.files.Files::copy() method because of err 252 on Win machines when BBj has the source file open.
                    #incrementProgressMeter(source!.getPath())
                    sourceModTime!=source!.lastModified()
                    sourceChan=unt
                    open(sourceChan,isz=-1)source!.getPath()
                    targetChan=unt
                    open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")target!.getPath()
                    while 1
                        readrecord(sourceChan,siz=#BLOCKSIZE,end=*break)record$
                        writerecord(targetChan)record$
                    wend
                    close(sourceChan)
                    close(targetChan)
                    target!.setLastModified(sourceModTime!)
                endif
               
            endif
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Create progress meter.
        rem  *
        rem  * @return BBjTopLevelWindow meterWin!
        rem  */
        method private BBjTopLevelWindow createProgressMeter()
            seterr method_error

            rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
            rem declare BBjTopLevelWindow meterWin!
            
            declare BBTranslator Translate!
            rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
            Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
            if Translate!=null()
                Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
                BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
            endif
            meter_title$=Translate!.getTranslation("AON_COPYING")+"..."
            #meter_proc_recs=0
            meter_text$=""
            meter_action$="WIN-LST"
            if #wait4ok% then meter_action$=meter_action$+"-OK"

            call #dir_syp$+"bam_prog_bar.bbj",
:               #sysGUI!,
:               #form!,
:               meterWin!,
:               meter_title$,
:               #meter_total_recs,
:               #meter_proc_recs,
:               meter_text$,
:               meter_action$
            methodret meterWin!
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Increment progress meter.
        rem  *
        rem  * @param File sourceDirectory
        rem  */
        method private void incrementProgressMeter(BBjString meter_text$)
            #meter_proc_recs=#meter_proc_recs+1
            meter_action$="MTR-LST"

            call #dir_syp$+"bam_prog_bar.bbj",
:               #sysGUI!,
:               #form!,
:               #meter!,
:               meter_title$,
:               #meter_total_recs,
:               #meter_proc_recs,
:               meter_text$,
:               meter_action$
        methodend

        rem /**
        rem  * Destroy progress meter.
        rem  */
        method private void destroyProgressMeter()

            #meter_proc_recs=#meter_total_recs
            meter_action$="LST-END"

            call #dir_syp$+"bam_prog_bar.bbj",
:               #sysGUI!,
:               #form!,
:               #meter!,
:               meter_title$,
:               #meter_total_recs,
:               #meter_proc_recs,
:               meter_text$,
:               meter_action$
        methodend
        
    classend
    
    end