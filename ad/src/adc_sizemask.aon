rem adc - Resize Mask
rem Program adc_sizemask v8.0.0 11Mar2006 (syc_rm)
rem Created by adx_progconv.bbx v1.0.0 (03/11/2006 12:33:46)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

rem --- mask$ : Mask to be resized (in/out)
rem --- length: Actual mask length (out)
rem --- min   : Minimum size (in)
rem --- max   : Maximum size (in)

    seterr std_error
    setesc std_error
    enter mask$,length,min,max

initializations: rem --- Initializations

    dim filler$(80,"#")
    length=len(mask$)
    m$=mask$
    m=len(m$)

rem --- Verify minimum and maximum mask sizes

    if min<1 min=1
    if max>80 max=80
    if min>max goto done

check_mask: rem --- Test mask size

    if m<min goto too_small
    if m>max goto too_large
    goto done

too_small: rem --- Mask is too small

    if pos("("=m$)=1 m$=filler$+m$(2),m$="("+m$(len(m$)-(min-2)) 
:               else m$=filler$+m$,m$=m$(len(m$)-(min-1))
    goto done

too_large: rem --- Mask is too big

rem --- Remove trailing CR and DR

    if pos(m$(m-1,2)="DRCR",2)=0 goto remove_parens
    m$=m$(1,m-2)+"-"
    m=len(m$)
    if m<=max goto mask_loop

remove_parens: rem --- Remove parenthesis

    if pos("("=m$)=0 and pos(")"=m$)=0 goto remove_commas
    while pos("("=m$)
          m$=fnr$(m$,pos("("=m$))
    wend
    while pos(")"=m$)
          m$=fnr$(m$,pos(")"=m$))
    wend
    m$=m$+"-"
    m=len(m$)
    if m<=max goto mask_loop

remove_commas: rem --- Remove commas

    if pos(","=m$)=0 goto remove_decimals
next_comma:
    if pos(","=m$)>0 m$=fnr$(m$,pos(","=m$)); goto next_comma
    m=len(m$)
    if m<=max goto mask_loop

remove_decimals: rem --- Remove # right of decimal point and last zero

    if pos("#"=m$)=0 or pos("#"=m$,-1)<pos("."=m$) or 
:      pos("#"=m$,-1)<pos("0"=m$,-1) goto remove_digits
    m$=fnr$(m$,pos("#"=m$,-1))
    m=len(m$)
    if m<=max goto mask_loop
    goto remove_decimals

remove_digits: rem --- Remove left most digits

    if m$(1,1)="-" m$=m$(2)+"-"
    m$=m$(m-(max-1))
    m=len(m$)

mask_loop: rem --- Recheck mask minimum size

    goto check_mask

done: rem --- All done
    mask$=m$
    length=len(mask$)
    goto std_exit

rem --- Functions

    def fnr$(q$,q)=q$(1,q-1)+q$(q+1)

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry

std_error_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_error_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_error.src


rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

    end
