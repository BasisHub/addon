rem --- Copy Data From Firm to Firm Within a File
rem --- Program syx_ra v8.0.0 26May2008 (syx_ra)
rem --- Created by c:\codeport_bbj\adx_codeport.bbj v1.1.5 (05/26/2008 12:35:07)

rem --- AddonSoftware Version 8.0.0 - 01Jan2007
rem --- Copyright (c) 1981-2007 AddonSoftware
rem --- All Rights Reserved


    setesc std_error
    seterr std_error

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=5,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="ddm_tables",ids$[1]="DDM_TABLES"
    files$[2]="adm_modules",ids$[2]="ADM_MODULES"
    files$[3]="adm_firms",ids$[3]="ADM_FIRMS"
    call pgmdir$+"adc_fileopen.aon",action,begfile,3,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    ddm02a_dev=channels[1]
    sym04a_dev=channels[2]
    sym06a_dev=channels[3]

rem --- Dimension string templates

    dim ddm02a$:templates$[1],sym04a$:templates$[2],sym06a$:templates$[3]

rem --- Assign form input values to local variables

    file$=Option!.getOptionData("file_name")
    frm_firm$=Option!.getOptionData("firm_1")
    to_firm$=Option!.getOptionData("firm_2")

rem --- Parameters

    firm_id$=sysinfo.firm_id$
    n1$=sysinfo.firm_name$,n2$="SY",n3$=sysinfo.task_desc$

initializations: rem --- Initializations

    filename$=""
    more=1

    while more
        sym04a.sys_install$="N"
        find record (ddm02a_dev,key=file$,dom=*break) ddm02a$
        filename$=ddm02a.file_name$
        system$=cvs(ddm02a.file_name$,4)
        find record (sym04a_dev,key=system$,dom=*next) sym04a$
        if sym04a.sys_install$<>"Y" 
            msg_id$="MOD_NOT_INSTALLED"
            dim msg_tokens$[1]
            msg_tokens$[1]=cvs(sym04a.sys_desc$,2)
            gosub disp_message
            break
        endif 

rem --- Open the file

        if sym04a.multi_firm$<>"Y" 
            msg_id$="NOT_MULTI_FIRM"
            dim msg_tokens$[1]
            msg_tokens$[1]=cvs(sym04a.sys_desc$,2)
            gosub disp_message
            break
        endif 

        close (from_dev,err=*next)
        close (to_dev,err=*next)
        files$[4]=filename$
        files$[5]=filename$
        call pgmdir$+"adc_fileopen.aon",action,4,5,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
        if status then continue
        from_dev=channels[4]
        to_dev=channels[5]
            
        call pgmdir$+"adc_getfid.aon",from_dev,q$,x$,type$,k,r,l,n,v
        

rem --- From Firm

        sym06a.firm_id$=frm_firm$
        find record (sym06_dev,key=sym06a.firm_id$,dom=*break)sym06a$
            
rem --- To Firm

        sym06a.firm_id$=to_firm$
        find record (sym06_dev,key=sym06a.firm_id$,dom=*break) sym06a$
        
        gosub copy_recs

    wend
       
done: rem --- Correct?

    goto std_exit

copy_recs: rem --- Copy records

    if frm_firm$=to_firm$ 
        msg_id$="AD_COPY_REC_ERR"
        dim msg_tokens$[1]
        gosub disp_message
        goto std_exit
    endif 
    call pgmdir$+"adc_progress.aon","N","","","Copying","",k,from_dev,1,meter_num,status
    type$="D"
    if l=0 then let type$="S"
    read (from_dev,key=frm_firm$,dom=*next)

    while more

rem --- Copy loop
        k$=key(from_dev,end=copy_complete)
        if pos(frm_firm$=k$)<>1 then 
           call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
           break
        endif 
        call pgmdir$+"adc_progress.aon","S","","","",k$,0,0,1,meter_num,status
        if type$="D" or type$="K" then
direct_file: rem --- Direct File
            read record(from_dev,key=k$)r$
            k$(1,2)=to_firm$
            r$(1,2)=to_firm$
            write record(to_dev,key=k$)r$
            read (from_dev,key=frm_firm$+k$(3))
            continue
        endif
        if type$="S" then
sort_file: rem --- Sort File
            read (from_dev)
            k$(1,2)=to_firm$
            write (to_dev,key=k$)
            read (from_dev,key=frm_firm$+k$(3))
            continue
        endif
copy_complete:rem --- Copy Completed
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        goto std_exit
    wend

delete_recs: rem --- Delete records ; ?? where to call this routine

    if frm_firm$<>to_firm$
        v4$="WARN_DELETE_RECORD_ERR"
        call pgmdir$+"syc_xb.bbx",2,v4$,token$[all],0,-1,-1,v$,v3
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        break
    endif 
    v4$="All Firm "+frm_firm$+" record(s) will be deleted from "+filename$+". OK to continue"
    call pgmdir$+"adc_yesno.aon",1,v4$,1,v$,v3
    if v$="Y" 
        call pgmdir$+"adc_progress.aon","N","","","Deleting","",k,from_dev,1,meter_num,status 
        read (from_dev,key=frm_firm$,dom=*next)

rem --- Delete loop

        while more
            k$=key(from_dev,end=*break)
            if pos(frm_firm$=k$)<>1 then break
            call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,meter_num,status
            remove (from_dev,key=k$)
        wend
        delete_complete:rem --- Delete Completed
        call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
        goto std_exit
    endif 



rem #include std_functions.src
rem --- Standard AddonSoftware functions (01Mar2006)
rem --- Functions used to retrieve form values

    def fnstr_pos(q0$,q1$,q1)=int((pos(q0$=q1$,q1)+q1-1)/q1)
    def fnget_rec_date$(q0$)=rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                            cvs(q0$,1+2+4),rd_rec_data$[0,0],40),0]
    def fnget_fld_data$(q0$,q1$)=cvs(rd_rec_data$[fnstr_pos(cvs(q0$,1+2+4)+"."+
:                                cvs(q1$,1+2+4),rd_rec_data$[0,0],40),0],2)
    def fnget_table$(q0$)=rd_alias_id$

rem --- Miscellaneous functions

    def fncenter(q$,q)=int((q-len(q$))/2)

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)=cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)

rem --- Format zip/postal code

    def fnzipcode$(q$)=fill(10,cvs(q$(1,3)+fill(pos("9"<q$(1,5))>0)+q$(4,2)+
:                      fill(ABS(pos("A">=q$(1,6))>0)-pos("0">q$(6,4))>0,"-")+
:                      q$(6,4)+fill(10),16))

rem --- Date/time handling functions

    def fnyy$(q$)=q$(3,2)
    def fnclock$(q$)=date(0:"%hz:%mz %p")
    def fntime$(q$)=date(0:"%Hz%mz")

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if q2$="" q2$=fill(len(q1$),"0")
        return str(-num(q1$,err=*next):q2$,err=*next)
        q=1
        q0=0
        while len(q2$(q))
              if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
              q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnbasename$: Strip path and optionally the suffix from a file name

    def fnbasename$(q$,q0$)
        q=max(pos("/"=q$,-1),pos(":"=q$,-1),pos(">"=q$,-1),pos("\"=q$,-1))
        if q then q$=q$(q+1)
        if q0$<>"" then q=mask(q$,q0$); if q q$=q$(1,q-1)
    return q$

rem --- fnglobal: Return numeric value of passed stbl variable

    def fnglobal(q$,q1)
        q1$=stbl(q$,err=*next),q1=num(q1$,err=*next)
        return q1
    fnend

rem --- fnglobal$: Return string value of passed STBL variable

    def fnglobal$(q$,q1$)
        q1$=stbl(q$,err=*next)
        return q1$
    fnend

rem #endinclude std_functions.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    call stbl("+DIR_SYP")+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),rd_err_text$,rd_err_act$
    if pos("EXIT"=rd_err_act$) goto std_error_exit
    if pos("ESCAPE"=rd_err_act$) seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src
rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$
std_missing_params_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release
rem #endinclude std_end.src

    end
