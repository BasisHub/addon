rem Executive Summary
rem Proprietary Software. AddonSoftware
rem Program ID: ads_execsummary.aon  <Oct 19, 2006>
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

rem jpb * 9/2/09 * Removed inventory as a visible category. This is unusable and meaningless data as is.

use java.util.GregorianCalendar
use ::sys/prog/bao_imagemgr.bbj::BarImageMgr

rem --- Functions

	def fnstr_pos(tmp0$,tmp1$,tmp0)=int((pos(tmp0$=tmp1$,tmp0)+tmp0-1)/tmp0)
	def fnstrip$(tmp0$,tmp1$)=tmp0$(1,pos(fill(50,tmp1$)=tmp0$+fill(50,tmp1$))-1)
	def fngett_attr$(att0$)=output_attr_tbl$[fnstr_pos(att0$,attr_def_tbl$,5)]
	def fngetv_attr$(att0$,att1$)=output_attr_col$[fnstr_pos(att0$,output_attr_col$[0,1],40),fnstr_pos(att1$,attr_def_col$[0,0],5)]
	def fngetc_attr$(att0,att0$)=output_attr_col$[att0,fnstr_pos(att0$,attr_def_col$,5)]

rem --- Directory STBLs

	gui_dev$=stbl("+GUI_DEVICE")
	dir_syp$=stbl("+DIR_SYP")
	dir_img$=stbl("+DIR_IMG")
	dir_sys$=stbl("+DIR_SYS")
	file_usr$=stbl("+FILE_USR"),file_usr$=stbl("+DIR_USR",err=*next)+"aon_"+cvs(stbl("+USER_ID",err=*next),138)+".usr"
	file_set$=stbl("+FILE_SET")

   
rem --- Misc Setup

    Calendar! = new GregorianCalendar()

	dim date_text$:"default:c(32*=0),sm[12]:c(3*=0),m[12]:c(32*=0),sd[7]:c(3*=0),d[7]:c(32*=0)"
	date_text$=stbl("!DATE")

	no_columns=8
	dim columns$[1:no_columns]
		for curr_elem=1 to 7
			columns$[curr_elem]=date_text.d$[curr_elem]
		next curr_elem
		columns$[8]="Totals"

	no_rows=13

	dim months$[1:12]
		for curr_elem=1 to 12
			months$[curr_elem]=date_text.sm$[curr_elem]
		next curr_elem

	curr_mo=num(date(0:"%Mz"))
	default_mo=curr_mo

	curr_yr=num(date(0:"%Yd"))
	default_yr=curr_yr

	temp_chan=unt
	open(temp_chan)pgm(-2)
	temp_file$=fid(temp_chan)(9)
	close(temp_chan)
	TempFile!=temp_file$
	temp_file$=TempFile!.replace("\","/")
	file_base$=temp_file$(1,pos("/"=temp_file$,-1,2))

rem --- call bas_process_beg to put lic_feature info into sysinfo
    user_id$=stbl("+USER_ID")
    call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,table_chans$[all]

rem --- Retrieve sysinfo data

    sysinfo_tpl$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_tpl$
    sysinfo$=stbl("+SYSINFO",err=*next)
	user_id$=sysinfo.user_id$
	firm_id$=sysinfo.firm_id$
    lic_feature$=sysinfo.lic_feature$

file_opens:rem --- Open File(s)

	num_files=12
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

	open_tables$[1]=stbl("+GUI_DEVICE"),open_opts$[1]="O"
	open_tables$[2]="ADM_USER",open_opts$[2]="OTA"
	open_tables$[3]="ADE_EXECAR",open_opts$[3]="OTA"
	open_tables$[4]="ADE_EXECAP",open_opts$[4]="OTA"
	open_tables$[5]="ADE_EXECCOST",open_opts$[5]="OTA"
	open_tables$[6]="ADE_EXECPO",open_opts$[6]="OTA"
	open_tables$[7]="ADE_EXECSALE",open_opts$[7]="OTA"
	open_tables$[8]="ADE_EXECCTOT",open_opts$[8]="OTA"
	open_tables$[9]="ADE_EXECSTOT",open_opts$[9]="OTA"
	open_tables$[10]="ADE_EXECIV",open_opts$[10]="OTA"
	open_tables$[11]="ADE_EXECGEN",open_opts$[11]="OTA"
	open_tables$[12]="ADM_MODULES",open_opts$[12]="OTA"


	gosub open_tables

	gui_dev=num(open_chans$[1])
	adm_user=num(open_chans$[2]);dim adm_user$:open_tpls$[2]
	ade_execar=num(open_chans$[3]);dim ade_execar$:open_tpls$[3]
	ade_execap=num(open_chans$[4]);dim ade_execap$:open_tpls$[4]
	ade_execcost=num(open_chans$[5]);dim ade_execcost$:open_tpls$[5]
	ade_execpo=num(open_chans$[6]);dim ade_execpo$:open_tpls$[6]
	ade_execsale=num(open_chans$[7]);dim ade_execsale$:open_tpls$[7]
	ade_execctot=num(open_chans$[8]);dim ade_execctot$:open_tpls$[8]
	ade_execstot=num(open_chans$[9]);dim ade_execstot$:open_tpls$[9]
	ade_execiv=num(open_chans$[10]);dim ade_execiv$:open_tpls$[10]
	ade_execgen=num(open_chans$[11]);dim ade_execgen$:open_tpls$[11]
	adm_modules=num(open_chans$[12]);dim adm_modules$:open_tpls$[12]

rem --- Get SysGUI Object

	SysGUI!=bbjAPI().getSysGui()
	DayColor!=SysGUI!.makeColor(255,252,215)
	HdrColor!=SysGUI!.makeColor(240,240,240)
	HdrText!=SysGUI!.makeColor(160,160,160)
	TotColor!=SysGUI!.makeColor(192,192,255)

	DayVect!=SysGUI!.makeVector()
	ValVect!=SysGUI!.makeVector()

    dim gui_event$:tmpl(gui_dev)
    dim notify_base$:noticetpl(0,0)

rem --- Get Attributes

	call dir_syp$+"bam_attr_init.bbj",attr_def_tbl$[all],attr_def_col$[all]
		attr_def_col$=attr_def_col$[0,0]
		attr_def_tbl$=attr_def_tbl$[0,0]

	dim ade_execgen$:fattr(ade_execgen$)
	readrecord(ade_execgen,key=firm_id$,dom=*next)ade_execgen$

rem --- get application record in order to get form icon

	readrecord(adm_modules,key=pad(lic_feature$,11),dom=*next)adm_modules$
	prog_path$=adm_modules.dd_attr_icon$
	gosub resolve_path
	form_icon$=prog_path$

rem --- Main Process

	gosub disp_win
	gosub get_user_settings
	gosub def_grids
	gosub format_tree
	TreeOpts!.selectNode(101)
	gosub display_date
	gosub display_calendar
	gosub display_status
	gosub select_category
	gosub resize_win


	Window!.setVisible(1)

event_ctl:rem --- Event Control

	Window!.setCallback(Window!.ON_CLOSE,"exit_prog")
	Window!.setCallback(Window!.ON_RESIZE,"resize_win")

	BtnPrevYr!.setCallback(BtnPrevYr!.ON_TOOL_BUTTON_PUSH,"adjust_date")
	BtnPrevMo!.setCallback(BtnPrevMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
	BtnNextMo!.setCallback(BtnNextMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")
	BtnNextYr!.setCallback(BtnNextYr!.ON_TOOL_BUTTON_PUSH,"adjust_date")
	BtnCurrMo!.setCallback(BtnCurrMo!.ON_TOOL_BUTTON_PUSH,"adjust_date")

	TreeOpts!.setCallback(TreeOpts!.ON_TREE_SELECT,"select_category")

	SysGUI!.flushEvents()

	process_events,err=*same

adjust_date:rem --- Adjust Date

   gui_event$=SysGUI!.getLastEventString()
   date_btn=gui_event.id

	switch date_btn
		case 2000;rem --- Prev Year
			curr_yr=curr_yr-1
		break
		case 2001;rem --- Prev Month
			curr_mo=curr_mo-1
			if curr_mo<1
				curr_yr=curr_yr-1
				curr_mo=12
			endif
		break
		case 2002;rem --- Next Month
			curr_mo=curr_mo+1
			if curr_mo>12
				curr_yr=curr_yr+1
				curr_mo=1
			endif
		break
		case 2003;rem --- Next Year
			curr_yr=curr_yr+1
		break
		case 2004;rem --- Current Month
			curr_mo=default_mo
			curr_yr=default_yr
		break
		case default
		break
	swend

	gosub display_date
	gosub display_calendar
	gosub display_data

	return

display_date:rem --- Display Current Date

	CurrDate!.setText(months$[curr_mo]+" "+str(curr_yr))
		ChartBar!.setSeriesName(0,months$[curr_mo]+" "+str(curr_yr))
rem		ChartBar!.setSeriesName(1,months$[curr_mo]+" "+str(curr_yr-1))

	start_day=num(date(jul(curr_yr,curr_mo,1):"%W"))

	day_str$="312831303130313130313031"
    if mod(curr_yr,4)=0 and curr_mo=2 then 
        day_str$(3,2)=str(iff(Calendar!.isLeapYear(curr_yr),29,28))
    endif
	no_days=num(day_str$(curr_mo*2-1,2))

	return

display_calendar:rem --- Calculate And Display Calendar

	DayVect!.clear()
	day_count=0

	for curr_day=1 to 96
		day_text$=""
		if mod(curr_day,8)<>0 and mod(int((curr_day-1)/8),2)=0 and curr_day>=start_day and day_count<no_days
			day_count=day_count+1
			day_text$=str(day_count)
		endif

		DayVect!.addItem(day_text$)

	next curr_day

	GridCal!.setCellText(0,0,DayVect!)

	return

select_category:rem --- Display Category Selected

	select_node=TreeOpts!.getSelectedNode()
	if select_node>100 and mod(select_node,100)<>0
		curr_cat=int(select_node/100)
		curr_meas=mod(select_node,100)
		gosub display_date
		gosub display_data
	endif

	return

display_data:rem --- Display Data For Selected Category and Measure

	sysGUI!.setRepaintEnabled(0)

	read_key$=firm_id$+str(curr_yr:"0000")+str(curr_mo:"00")
	prior_key$=firm_id$+str(curr_yr-1:"0000")+str(curr_mo:"00")
	read_data$=""
	dim read_data[1:31]
	dim prior_data[1:31]

	switch curr_cat

		case 1;rem AR
			dim ade_exec_data$:fattr(ade_execar$)
			ade_exec_chan=ade_execar
			read_data$="YES-INT"
			switch curr_meas
				case 1;read_dvar$="INV_DUE_BYDT";break
				case 2;read_dvar$="NO_INV_DUE";break
				case 3
					read_data$="YES-AVG-INT"
					read_dvar$="INV_DUE_BYDT:NO_INV_DUE"
				break
			swend
		break
		case 2; rem AP
			dim ade_exec_data$:fattr(ade_execap$)
			ade_exec_chan=ade_execap
			read_data$="YES-INT"
			switch curr_meas
				case 1;read_dvar$="INV_DUE_BYDT";break
				case 2;read_dvar$="NO_INV_DUE";break
				case 3
					read_data$="YES-AVG-INT"
					read_dvar$="INV_DUE_BYDT:NO_INV_DUE"
				break
			swend
		break
		case 3;rem sales orders
			dim ade_exec_data$:fattr(ade_execsale$)
			ade_exec_chan=ade_execsale
			read_data$="YES-INT"
			switch curr_meas
				case 1;read_dvar$="ORD_AMT_SHIP";break
				case 2;read_dvar$="NO_ORD_SHIP";break
				case 3
					read_data$="YES-AVG-INT"
					read_dvar$="ORD_AMT_SHIP:NO_ORD_SHIP"
				break
			swend
		break
		case 4;rem purchase orders
			dim ade_exec_data$:fattr(ade_execpo$)
			ade_exec_chan=ade_execpo
			read_data$="YES-INT"
			switch curr_meas
				case 1;read_dvar$="PO_AMT_REC";break
				case 2;read_dvar$="NO_LNS_REC";break
				case 3
					read_data$="YES-AVG-INT"
					read_dvar$="PO_AMT_REC:NO_LNS_REC"
				break
			swend
		break
		case 5;rem total sales
			dim ade_exec_data$:fattr(ade_execstot$)
			ade_exec_chan=ade_execstot
			read_data$="YES-INT"
			switch curr_meas
				case 1;read_dvar$="SLS_INV_BYDT";break
				case 2;read_dvar$="NO_INV_BYDT";break
				case 3
					read_data$="YES-AVG-INT"
					read_dvar$="SLS_INV_BYDT:NO_INV_BYDT"
				break
			swend
		break
		case 6;rem profit (sales - costs)	
			dim ade_execstot$:fattr(ade_execstot$)
			readrecord(ade_execstot,key=read_key$,dom=*next)ade_execstot$
			dim ade_execctot$:fattr(ade_execctot$)
			readrecord(ade_execctot,key=read_key$,dom=*next)ade_execctot$
			read_data$="INT"
			switch curr_meas
				case 1
					read_dvar1$="SLS_INV_BYDT"
					read_dvar2$="COST_INV_DTE"
				break
				case 2
					read_dvar1$="NO_INV_BYDT"
					read_dvar2$=""
				break
				case 3
					read_data$="AVG-INT"
					read_dvar1$="SLS_INV_BYDT"
					read_dvar2$="COST_INV_DTE"
					read_dvar3$="NO_INV_BYDT"
				break
			swend
			for read_data=1 to 31
				cost=0
				temp_data=0
				sales=nfield(ade_execstot$,read_dvar1$+"_"+str(read_data:"00"))
				if read_dvar2$<>"" cost=nfield(ade_execctot$,read_dvar2$+"_"+str(read_data:"00"))
				profit=sales-cost				
				if pos("AVG"=read_data$)<>0
					temp_data=nfield(ade_execstot$,read_dvar3$+"_"+str(read_data:"00"))
					if temp_data<>0 temp_data=profit/temp_data
				else
					temp_data=profit
				endif
				if pos("INT"=read_data$)<>0
					read_data[read_data]=int(temp_data)
				else
					read_data[read_data]=temp_data
				endif
			next read_data			
		break
rem		case 7;rem IV
rem			dim ade_exec_data$:fattr(ade_execiv$)
rem			ade_exec_chan=ade_execiv
rem			read_data$="YES-INT-NO_TOT"
rem			switch curr_meas			
rem				case 1;read_dvar$="INV_OH_BYDT";break
rem			swend
rem		break
	swend

	if pos("YES"=read_data$)<>0
		dim ade_exec_data$:fattr(ade_exec_data$)
		readrecord(ade_exec_chan,key=read_key$,dom=*endif)ade_exec_data$
		for read_data=1 to 31
			temp_data=0
			if pos("AVG"=read_data$)<>0
				read_dvar_0$=read_dvar$(1,pos(":"=read_dvar$)-1)
				read_dvar_1$=read_dvar$(pos(":"=read_dvar$)+1)
				temp_data_0=nfield(ade_exec_data$,read_dvar_0$+"_"+str(read_data:"00"))
				temp_data_1=nfield(ade_exec_data$,read_dvar_1$+"_"+str(read_data:"00"))
				if temp_data_1<>0 temp_data=temp_data_0/temp_data_1
			else
				temp_data=nfield(ade_exec_data$,read_dvar$+"_"+str(read_data:"00"))
			endif

			if pos("INT"=read_data$)<>0
				read_data[read_data]=int(temp_data)
				else
				read_data[read_data]=temp_data
			endif
		next read_data
	endif
	
	rem prior
	if pos("PRI"=read_data$)<>0
		dim ade_exec_data$:fattr(ade_exec_data$)
		readrecord(ade_exec_chan,key=prior_key$,dom=*endif)ade_exec_data$
		for read_data=1 to 31
			temp_data=0
			if pos("AVG"=read_data$)<>0
				read_dvar_0$=read_dvar$(1,pos(":"=read_dvar$)-1)
				read_dvar_1$=read_dvar$(pos(":"=read_dvar$)+1)
				temp_data_0=nfield(ade_exec_data$,read_dvar_0$+"_"+str(read_data:"00"))
				temp_data_1=nfield(ade_exec_data$,read_dvar_1$+"_"+str(read_data:"00"))
				if temp_data_1<>0 temp_data=temp_data_0/temp_data_1
			else
				temp_data=nfield(ade_exec_data$,read_dvar$+"_"+str(read_data:"00"))
			endif
			if pos("INT"=read_data$)<>0
				prior_data[read_data]=int(temp_data)
				else
				prior_data[read_data]=temp_data
			endif
		next read_data
	endif

	DayVect!.clear()
	day_count=0
	wk_total=0
	yr_total=0
	dim bottom_total[1:8]

	for curr_day=1 to 48
		data_text$=""
		if mod(curr_day,8)<>0 and curr_day>=start_day and day_count<no_days
			day_count=day_count+1
			data_text$=str(read_data[day_count])
				wk_total=wk_total+read_data[day_count]
				yr_total=yr_total+read_data[day_count]
				bottom_total[mod(curr_day,8)]=bottom_total[mod(curr_day,8)]+read_data[day_count]
		else
			if mod(curr_day,8)=0 and pos("AVG"=read_data$)=0 and pos("NO_TOT"=read_data$)=0
				data_text$=str(wk_total)
				bottom_total[8]=bottom_total[8]+wk_total
				wk_total=0
			endif
		endif

		GridCal!.setCellText(int((curr_day-1)/8)*2+1,mod(curr_day-1,8),data_text$)

	next curr_day

	for curr_total=1 to 8
		if pos("AVG"=read_data$)=0 and pos("NO_TOT"=read_data$)=0
			GridCal!.setCellText(12,curr_total-1,str(bottom_total[curr_total]))
		else
			GridCal!.setCellText(12,curr_total-1,"")
		endif
	next curr_total

	ChartBar!.setYLabel(cvs(measure_text$(curr_meas*10-9,10),2))

	for curr_day=1 to 31
		ChartBar!.setBarValue(0,curr_day-1,read_data[curr_day])
rem		ChartBar!.setBarValue(1,curr_day-1,prior_data[curr_day])
	next curr_day

	sysGUI!.setRepaintEnabled(1)

	return

display_status:rem --- Display Build Status Date/Time

	if len(cvs(ade_execgen.gen_date$,2))=8
		build_date$=ade_execgen.gen_date$(5,2)+"/"+ade_execgen.gen_date$(7,2)+"/"+ade_execgen.gen_date$(1,4)
		build_time$=ade_execgen.gen_time$(1,2)+":"+ade_execgen.gen_date$(3,2)+":"+ade_execgen.gen_date$(5,2)
		Window!.setTitle(win_title$+" "+build_date$+" - "+build_time$)
	endif
	
	return

get_user_settings:rem --- Get User/Windows Settings

	win_save_id$=pad("WIN_[EXEC_SUMM]",20)
	call dir_syp$+"bac_winsize.bbj",cvs(win_save_id$,4),"W","",Window!,"READ",win_coord[all]

	return

save_user_settings:rem --- Save Windows Coordinates

	if Window!<>null() then
		call dir_syp$+"bac_winsize.bbj",cvs(win_save_id$,4),"W","",Window!,"SAVE",win_coord[all]
	endif

	return

open_tables:rem -----<Open Tables

	call dir_syp$+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
			msg_tokens$[1]=open_status$
		gosub disp_message
		goto exit_prog
	endif

	return

disp_message:rem --- Display Message Dialog

	call dir_syp$+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		table_chans$[all]

	return

disp_win:rem --- Display Window

	dim ctl_misc$[20]

	form_id$=file_base$+"arc/ads_execsummary.arc"

	call dir_syp$+"bam_controls.bbj",
:		gui_dev,
:		SysGUI!,
:		form_id$,
:		win_coord[all],
:		Window!,
:		"DISPLAY",
:		open_chan$[all],
:		ctl_misc$[all]

	BtnPrevYr!=Window!.getControl(2000)
    BtnPrevYr!.setImage(BarImageMgr.getImage("im_tb_fst_m"))
	BtnPrevMo!=Window!.getControl(2001)
    BtnPrevMo!.setImage(BarImageMgr.getImage("im_tb_prv_m"))
	BtnNextMo!=Window!.getControl(2002)
    BtnNextMo!.setImage(BarImageMgr.getImage("im_tb_nxt_m"))
	BtnNextYr!=Window!.getControl(2003)
    BtnNextYr!.setImage(BarImageMgr.getImage("im_tb_lst_m"))
	BtnCurrMo!=Window!.getControl(2004)
    BtnCurrMo!.setImage(BarImageMgr.getImage("im_tb_cal_m"))    

	CurrDate!=Window!.getControl(2100)
	TreeOpts!=Window!.getControl(3000)
		TreeOpts!.setDragEnabled(0)
	TabOpts!=Window!.getControl(4000)

	ChildCal!=Window!.getControl(10010)
		GridCal!=ChildCal!.getControl(5000)
		GridFont!=GridCal!.getFont()
		HdrFont!=SysGUI!.makeFont(GridFont!.getName(),GridFont!.getSize(),1)

	ChildBar!=Window!.getControl(10020)
		ChartBar!=ChildBar!.addBarChart(5000,2,2,400,300,"Day","Value",1,31,0,1,0)
		ChartBar!.setSeriesName(0,"Current Year")
rem		ChartBar!.setSeriesName(1,"Prior Year")
		for curr_day=1 to 31
			ChartBar!.setCategoryName(curr_day-1,str(curr_day:"00"))
		next curr_day

	WinColor!=Window!.getBackColor()
	win_title$=Window!.getTitle()
    Window!.setIcon(form_icon$,err=*next)

	win_disp$="YES"

	return

format_tree:rem --- Form Category/Measure Tree

	CatVect!=SysGUI!.makeVector()
		CatVect!.addItem("Accounts Receivable YYY")
		CatVect!.addItem("Accounts Payable    YYY")
		CatVect!.addItem("Open Orders         YYY")
		CatVect!.addItem("Purchase Orders     YYY")
		CatVect!.addItem("Sales Totals        YYY")
		CatVect!.addItem("Gross Profit        YYY")
rem		CatVect!.addItem("Inventory           Y  ")

	measure_text$="Amount    Units     Average   "

	TreeOpts!.setCollapsedIcon(dir_img$+"im_node_doc.png")
	TreeOpts!.setExpandedIcon(dir_img$+"im_node_doc.png")
	TreeOpts!.setLeafIcon(dir_img$+"im_menui_view.png")

	TreeOpts!.setRoot(0,"Indicators")
	for curr_cat=1 to CatVect!.size()
		temp_cat$=CatVect!.getItem(curr_cat-1)
		TreeOpts!.addExpandableNode(curr_cat,0,cvs(temp_cat$(1,20),2))
		for curr_meas=1 to 3
			if temp_cat$(20+curr_meas,1)="Y"
				TreeOpts!.addNode(curr_cat*100+curr_meas,curr_cat,cvs(measure_text$(curr_meas*10-9,10),2))
			endif
		next curr_meas
		TreeOpts!.expandNode(curr_cat)
	next curr_cat

	return

resize_win:rem --- Resize Window Contents

	TreeOpts!.setSize(TreeOpts!.getWidth(),Window!.getHeight()-(TreeOpts!.getY()+5))
	TabOpts!.setSize(Window!.getWidth()-(TabOpts!.getX()+3),Window!.getHeight()-(TabOpts!.getY()+3))

	ChildCal!.setSize(TabOpts!.getWidth()-6,TabOpts!.getHeight()-25)
		GridCal!.setSize(ChildCal!.getWidth()-(GridCal!.getX()*2),ChildCal!.getHeight()-12)
		summary_height=GridCal!.getHeight()-(GridCal!.getColumnHeaderHeight()+98)
		summary_total=GridCal!.getHeight()-GridCal!.getColumnHeaderHeight()
		summary_used=0
		for curr_row=1 to 12
			if mod(curr_row,2)=1
				GridCal!.setRowHeight(16)
				summary_used=summary_used+16
			endif
			if mod(curr_row,2)=0
				GridCal!.setRowHeight(curr_row-1,int(summary_height/7))
				summary_used=summary_used+int(summary_height/7)
			endif
		next curr_row

		GridCal!.setRowHeight(12,summary_total-(summary_used-1))

	ChildBar!.setSize(TabOpts!.getWidth()-6,TabOpts!.getHeight()-25)
		ChartBar!.setSize(ChildBar!.getWidth()-(ChartBar!.getX()*2),ChildBar!.getHeight()-(ChartBar!.getY()+5))

	return

def_grids:rem --- Define Grid

	def_output_cols=no_columns
	dim attr_col$[def_output_cols,len(attr_def_col$[0,0])/5]

	col_size=int((Window!.getWidth()-GridCal!.getX())/8)

	for curr_column=1 to no_columns

		attr_col$[curr_column,fnstr_pos("DVAR",attr_def_col$[0,0],5)]="COL_"+str(curr_column+1:"0")
		attr_col$[curr_column,fnstr_pos("LABS",attr_def_col$[0,0],5)]=columns$[curr_column]
		attr_col$[curr_column,fnstr_pos("DTYP",attr_def_col$[0,0],5)]="C"
		attr_col$[curr_column,fnstr_pos("CTLW",attr_def_col$[0,0],5)]=str(col_size)
		attr_col$[0,1]=attr_col$[0,1]+pad("SUMMARY."+attr_col$[curr_column,fnstr_pos("DVAR",attr_def_col$[0,0],5)],40)

	next curr_column

	call dir_syp$+"bam_grid_init.bbj",gui_dev,GridCal!,"NOSCROLL-COLH-LINES-CALENDAR-CELL-VCENTER",no_rows,attr_def_col$[all],attr_col$[0,1],attr_col$[all]
	GridCal!.setFitToGrid(GridCal!.AUTO_RESIZE_LAST_COLUMN)

	for curr_row=1 to 13
		if mod(curr_row,2)=1
			GridCal!.setRowBackColor(curr_row-1,HdrColor!)
			if curr_row<12
				GridCal!.setRowForeColor(curr_row-1,HdrText!)
				GridCal!.setRowFont(curr_row-1,HdrFont!)
			endif
		endif
		if mod(curr_row,2)=0
			GridCal!.setRowBackColor(curr_row-1,DayColor!)
			for curr_col=0 to 7
				GridCal!.setCellAlignment(curr_row-1,curr_col,GridCal!.GRID_ALIGN_RIGHT)
			next curr_col
		endif
	next curr_row

	for curr_col=0 to 7
		GridCal!.setCellAlignment(12,curr_col,GridCal!.GRID_ALIGN_RIGHT)
	next curr_col

	GridCal!.setColumnBackColor(7,TotColor!)
	GridCal!.setRowBackColor(12,TotColor!)

	return

resolve_path:rem --- Resolve Program Path

	while pos("["=prog_path$)<>0
		stbl_from=pos("["=prog_path$)+1
		stbl_thru=pos("]"=prog_path$)
		proc_mssg$=stbl_err$
		temp_stbl$=stbl(prog_path$(stbl_from,stbl_thru-stbl_from),err=*next)
		proc_mssg$=""
		if stbl_thru=len(prog_path$)
			prog_path$=prog_path$(1,stbl_from-2)+temp_stbl$
		else
			prog_path$=prog_path$(1,stbl_from-2)+temp_stbl$+prog_path$(stbl_thru+1)
		endif
	wend

	return

rem #include std_error.src

std_error: rem --- Standard error handler (01Apr2006)

    err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
    call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),
:                                str(err:"000"),err_text$,err_act$
    if pos("EXIT"=err_act$) goto std_error_exit
    if pos("ESCAPE"=err_act$) seterr 0;setesc 0
    if pos("RETRY"=err_act$) retry
std_error_exit:
    master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_error_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_error_release:
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_error.src

exit_prog:rem --- Exit Program

	gosub save_user_settings

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

    end
