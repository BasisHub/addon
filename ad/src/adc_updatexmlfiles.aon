rem ==========================================================================
rem --- adc_updatexmlfiles.aon 
rem --- Call to copy and update sync XML files created via Barista's utility
rem --- Create Sync File Backup. Also copies barista/settings directory.
rem --- 
rem --- AddonSoftware Version 10.0
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================


rem --- NEWSYNCLOC$    : Location of target data/sync directory being updated (Input)
rem --- OLDSYNCLOC$    : Location of source data/sync directory for upgrades (Input)
rem --- SYNCBACKUPDIR$ : Location of sync backup directory for upgrades (Input)
rem --- UPGRADE%       : 0=Not an upgrade so don't copy sync backup XMLs
rem ---                : 1=Upgrade so copy sync backup XMLs (Input)
rem --- RDFORM!        : Parent BBjTopLevelWindow object, the form (Input)
rem --- WAIT4OK%       : Wait for user's OK when done, 0=don't wait/1=wait (Input)
rem --- STATUS         : Status code/0=No error (Returned)

    declare BBjTopLevelWindow rdForm!

    seterr std_error
    setesc std_error
    enter newSyncLoc$,oldSyncLoc$,syncBackupDir$,upgrade%,rdForm!,wait4ok%,status

rem --- Initializations

    status=0

rem --- Copy and update sync XML files

    declare UpdateSyncXmlFiles utility!
    utility! = new UpdateSyncXmlFiles(rdForm!, wait4ok%)
    utility!.updateXmlFiles(newSyncLoc$, oldSyncLoc$, syncBackupDir$, upgrade%)
    
done: rem --- All done
    
    goto std_exit
   
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_exit.src

std_exit: rem --- Standard called program exit (01Mar2006)

    exit

rem #endinclude std_exit.src

rem /**
rem  * Utility Class for copying and updating sync XML files created via Barista's 
rem  * utility Create Sync File Backup
rem  */
    use java.io.File
    use java.util.HashMap
    use java.util.Vector
    use ::bbtranslator.bbj::BBTranslator
    use ::ado_file.src::FileObject

    class public UpdateSyncXmlFiles
        field private BBjInt wait4ok% = 0
        field private BBjNumber BLOCKSIZE = 2^20
        field private BBjNumber log_dev = 0
        field private BBjNumber meter_proc_recs = 0
        field private BBjNumber meter_total_recs = 15
        field private BBjString dir_syp$=stbl("+DIR_SYP")
        field private BBjSysGui sysGUI!
        field private BBjTopLevelWindow form!
        field private BBjTopLevelWindow meter!


        rem /**
        rem  * Constructor.
        rem  *
        rem  * @param BBjTopLevelWindow rdForm!
        rem  * @param BBjInt wait4ok
        rem  */
        method public UpdateSyncXmlFiles(BBjTopLevelWindow rdForm!, BBjInt wait4ok%)
            #sysGUI! = BBjAPI().getSysGui()
            #form! = rdForm!
            #wait4ok% = wait4ok%
        methodend

        rem /**
        rem  * Update sync XML files.
        rem  *
        rem  * Copies XML files from old location to new location, then updates XML files
        rem  * in new location. (Deletes XML files from old location to make sure they aren't
        rem  * sitting around in the old (possibly still 'live') install waiting to be sync'd
        rem  * in accidentally.)
        rem  *
        rem  * @param BBjString newSyncLoc$
        rem  * @param BBjString oldSyncLoc$
        rem  * @param BBjString syncBackupDir$
        rem  * @param BBjInt upgrade%
        rem  */
        method public void updateXmlFiles(BBjString newSyncLoc$, BBjString oldSyncLoc$, BBjString syncBackupDir$, BBjInt upgrade%)
            seterr method_error
            appDir$ = #parseAppPath(newSyncLoc$)
            if upgrade% then 
				rem --- count number of settings files
				#meter_total_recs = 90 + #copyDirectories(new File(#parseSettingsPath(oldSyncLoc$)), null())
			endif
            #meter! = #createProgressMeter()
            #openLog(newSyncLoc$, oldSyncLoc$, syncBackupDir$, upgrade%)

            if upgrade%
                rem --- copy non-branded sync xml files from provided location
                rem --- (appDir$ path separators already flipped to "/")
rem                #copyFiles(new File(syncBackupDir$), new File(appDir$ + "/data/sync"), new XmlFilter()); rem ... pre-v11
                #copyFiles(new File(syncBackupDir$), new File(appDir$(1,pos("/"=appDir$,-1)) + "barista/admin_backup"), new XmlFilter())

                rem --- copy branded consolidated (not non-consolidated) sync xml files
                rem --- (prior to v11.0 branded consolidated sync xml files were in data/sync directory,
                rem ---  and non-consolidated sync xml files were deleted when consolidated files were created)
                oldappDir$ = #parseAppPath(oldSyncLoc$)
                declare File oldBackupDir!
                oldBackupDir! = new File(oldappDir$ + "/data/admin_backup")
                if !oldBackupDir!.exists() or !oldBackupDir!.isDirectory()
                    oldBackupDir! = new File(oldSyncLoc$)
                endif
rem                #copyFiles(oldBackupDir!, new File(appDir$ + "/data/sync"), new XmlFilter()); rem ... pre-v11
                #copyFiles(oldBackupDir!, new File(appDir$ + "/data/admin_backup"), new XmlFilter())

				rem --- copy old ads_masks~*.xml files, except ads_masks~99*.xml and ads_masks~[*.xml files
				rem --- (starting with v11.00 non-consolidated sync xml files will not be deleted when consolidated files are created)
                #copyFiles(oldBackupDir!, new File(appDir$ + "/data/sync"), new MasksFilter())

				rem --- copy old ads_sequences~*.xml files, except ads_sequences~99*.xml and ads_sequences~[*.xml files
				rem --- (starting with v11.00 non-consolidated sync xml files will not be deleted when consolidated files are created)
                #copyFiles(oldBackupDir!, new File(appDir$ + "/data/sync"), new SequencesFilter())

                rem --- delete non-branded sync xml files from provided location
                #deleteFiles(new File(syncBackupDir$), new XmlFilter())

                rem --- delete branded consolidated (not non-consolidated) sync xml files
                #deleteFiles(oldBackupDir!, new XmlFilter())

                rem --- delete old ads_masks~*.xml files
                #deleteFiles(oldBackupDir!, new MasksFilter())

                rem --- delete old ads_sequences~*.xml files
                #deleteFiles(oldBackupDir!, new SequencesFilter())
				
				rem --- recursively copy old barista/settings directory
                #log("")
				#copyDirectories(new File(#parseSettingsPath(oldSyncLoc$)), new File(#parseSettingsPath(newSyncLoc$)))
            endif
			
			rem --- get current version from adm_modules~*.xml in data/sync dir
			declare HashMap newVers!
			newVers! = #getModuleVersion(new File(appDir$ + "/data/sync"))
            
            rem --- update xml files in data/sync dir
            #updateXmlFiles(new File(appDir$ + "/data/sync"))
            
            rem --- update xml files in data/admin_backup dir
            #updateXmlFiles(new File(appDir$ + "/data/admin_backup"), newVers!)

            #closeLog()
            #destroyProgressMeter()
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Copy filtered files.
        rem  *
        rem  * Copies filtered files from source directory to target directory.
        rem  *
        rem  * @param File sourceDir!
        rem  * @param File targetDir!
		rem  * @param java.io.FilenameFilter filter!
        rem  */
        method private void copyFiles(File sourceDir!, File targetDir!, java.io.FilenameFilter filter!)
            seterr method_error
            declare File sourceXml!
            declare File targetXml!
            
            rem --- create target directory if it doesn't exist
            FileObject.makeDirs(targetDir!)
            
            rem --- get list of what is in the source dir, and process it
            declare Vector fileVector!
            fileVector! = new Vector(java.util.Arrays.asList(sourceDir!.list(filter!)))
            if(fileVector!.size()>0) then
                #log("")
                for i=0 to fileVector!.size()-1
                    rem --- skip if it's not a XML file
                    xmlName$ = cast(BBjString, fileVector!.get(i))
                    sourceXml! = new File(sourceDir!, xmlName$)
                    if(! sourceXml!.isFile() or !cast(BBjString, xmlName$).endsWith(cast(BBjString, ".xml"))) then
                        #log("SKIPPED: " + sourceXml!.getPath())
                        continue
                    endif

                
                    rem --- copy file
                    targetXml! = new File(targetDir!, xmlName$)
                    #incrementProgressMeter("copying: " + targetXml!.getPath())
                    rem --- skip if source and target are the same
                    if !FileObject.isSameFile(sourceXml!.getPath(),targetXml!.getPath()) then
                        rem --- Can't use java.nio.files.Files::copy() method because of err 252 on Win machines when BBj has the source file open.
                        sourceModTime!=sourceXml!.lastModified()
                        sourceChan=unt
                        open(sourceChan,isz=-1)sourceXml!.getPath()
                        targetChan=unt
                        open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")targetXml!.getPath()
                        while 1
                            readrecord(sourceChan,siz=#BLOCKSIZE,end=*break)record$
                            writerecord(targetChan)record$
                        wend
                        close(sourceChan)
                        close(targetChan)
                        targetXml!.setLastModified(sourceModTime!)
                    endif
                    #log("COPIED: " + sourceXml!.getPath())
                next i
            endif
            methodret
            
method_error: rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Delete filtered files.
        rem  *
        rem  * Deletes filtered files from source directory. 
        rem  *
        rem  * @param File sourceDir!
        rem  * @param java.io.FilenameFilter filter!
        rem  */
        method private void deleteFiles(File sourceDir!, java.io.FilenameFilter filter!)
            seterr method_error
            declare File sourceXml!
            
            rem --- get list of what is in the source dir, and process it
            declare Vector fileVector!
            fileVector! = new Vector(java.util.Arrays.asList(sourceDir!.list(filter!)))
            if(fileVector!.size()>0) then
                #log("")
                for i=0 to fileVector!.size()-1
                    rem --- skip if it's not a XML file
                    xmlName$ = cast(BBjString, fileVector!.get(i))
                    sourceXml! = new File(sourceDir!, xmlName$)
                    if(! sourceXml!.isFile() or !cast(BBjString, xmlName$).endsWith(cast(BBjString, ".xml"))) then
                        continue
                    endif
                
                    rem --- delete file
                    #incrementProgressMeter("deleting: " + sourceXml!.getPath())
                    if sourceXml!.delete() then
                        #log("DELETED: " + sourceXml!.getPath())
                    else
                        #log("DELETE FAILED: " + sourceXml!.getPath())
                    endif
                next i
            endif
            methodret
            
method_error: rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Gets version number from <VERSION_ID> line in adm_modules~*.xml files.
        rem  *
        rem  * Returns a HashMap of the <VERSION_ID> in the adm_modules~*.xml files in 
		rem  * the given directory. The HashMap is keyed by the <ASC_PROD_ID> in the 
		rem  * adm_modules~*.xml files.
        rem  *
        rem  * @param File dir!
		rem  * @return HashMap <VERSION_ID> keyed by <ASC_PROD_ID>
        rem  */
        method public HashMap getModuleVersion(File dir!)
            seterr method_error
			declare HashMap newVers!
			newVers! = new HashMap()
        
            rem --- Validate directory
            if dir! <> null() and dir!.exists() and dir!.isDirectory() and dir!.list() <> null()
				declare Vector fileVector!
				declare File xml!
				fileVector! = new Vector(java.util.Arrays.asList(dir!.list(new NonConsolidatedAdmModules())))
				appDir$ = #parseAppPath(dir!.getPath())
				startProdIdTag$ = "<ASC_PROD_ID>"
				startProdIdTagLen = len(startProdIdTag$)
				endProdIdTag$ = "</ASC_PROD_ID>"
				startVersionTag$ = "<VERSION_ID>"
				startVersionTagLen = len(startVersionTag$)
				endVersionTag$ = "</VERSION_ID>"

				rem --- read non-consolidated adm_modules~[^\[].*\.xml files
				if(fileVector!.size()>0) then
					for i=0 to fileVector!.size()-1
						module$=""
						version$=""
						name$ = cast(BBjString, fileVector!.get(i))
						xml! = new File(dir!, name$)
						sourceChan=unt
						open(sourceChan,isz=-1)xml!.getPath()
						while 1
							read(sourceChan,end=*break)record$

							rem --- get module ID in <ASC_PROD_ID> lines
							if(pos(startProdIdTag$=record$)) then
								module$ = record$(pos(startProdIdTag$=record$) + startProdIdTagLen)
								module$ = cvs(module$(1, pos(endProdIdTag$=module$) - 1),3)
							endif

							rem --- get version in <VERSION_ID> line
							if(pos(startVersionTag$=record$)) then
								version$ = record$(pos(startVersionTag$=record$) + startVersionTagLen)
								version$ = cvs(version$(1, pos(endVersionTag$=version$) - 1),3)
							endif
							
							rem --- add module's version to the HashMap
							rem --- assumes <VERSION_ID> line comes after <ASC_PROD_ID> line
							if module$<>"" and version$<>"" then
								newVers!.put(module$, version$)
								break
							endif
		
						wend
						close(sourceChan)
					next i
				endif
            endif
            
            methodret newVers!
            
method_error: rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Update XML files in directory. 
        rem  *
        rem  * Exclude <VERSION_ID> tags from update.
        rem  *
        rem  * @param File dir!
        rem  */
        method private void updateXmlFiles(File dir!)
            #updateXmlFiles(dir!, null())
        methodend

        rem /**
        rem  * Update XML files in directory. 
        rem  *
		rem  * Update <VERSION_ID> tags from given HashMap keyed by ASC_PROD_ID.
        rem  *
        rem  * @param File dir!
		rem  * @param HashMap newVers!
        rem  */
        method private void updateXmlFiles(File dir!, HashMap newVers!)
            seterr method_error
        
            rem --- Validate directory
            if dir! = null() or !dir!.exists() or !dir!.isDirectory() or dir!.list() = null()
                methodret
            endif
            
            declare Vector fileVector!
            declare File xml!
            fileVector! = new Vector(java.util.Arrays.asList(dir!.list()))
            appDir$ = #parseAppPath(dir!.getPath())

            rem --- process files in directory
            if(fileVector!.size()>0) then
                #log("")
                for i=0 to fileVector!.size()-1
                    name$ = cast(BBjString, fileVector!.get(i))
                    xml! = new File(dir!, name$)
                    
                    rem --- skip except adm_modules~*.xml files
                    if !cast(BBjString, name$).matches("adm_modules~.*\.xml") and
:                   !cast(BBjString, name$).matches("ads_autolaunch~.*\.xml")
:                   then 
                        continue
                    endif
                        
                    rem --- move xml file to backup file with unique name
                    #incrementProgressMeter("updating: " + xml!.getPath())
                    #log("UPDATED: " + xml!.getPath())
                    bakFile$=xml!.getPath() + ".bak"
                    j=0
                    testChan=unt
                    while 1
                        open(testChan,err=*break)bakFile$
                        close(testChan)
                        j=j+1
                        bakFile$=xml!.getPath() + ".bak" + str(j)
                    wend
                    rename xml!.getPath() to bakFile$, err=*next
                    
                    rem --- copy backup file back to xml file, making necessary updates
                    sourceChan=unt
                    open(sourceChan,isz=-1)bakFile$
                    targetChan=unt
                    open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")xml!.getPath()
                    
                    rem --- update adm_modules~*.xml files (consolidated and non-consolidated)
                    if cast(BBjString, name$).matches("adm_modules~.*\.xml") then
                        #updateAdmModulesXmlFiles(sourceChan, targetChan, appDir$, newVers!)
                    endif
                    
                    rem --- update ads_autolaunch~*.xml files (consolidated and non-consolidated)
                    if cast(BBjString, name$).matches("ads_autolaunch~.*\.xml") then
                        #updateAdsAutolaunchXmlFiles(sourceChan, targetChan)
                    endif

                    close(sourceChan)
                    close(targetChan)
                next i
            endif
            methodret
            
method_error: rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Update adm_modules XML file. 
        rem  *
        rem  * Update <LOCAL_PATH> and <DD_MOUNT_DIR> tags in adm_modules XML files 
        rem  * to point to current project's directories. Update <VERSION_ID> tags
        rem  * from given HashMap keyed by ASC_PROD_ID.
        rem  *
        rem  * @param BBjNumber sourceChan
        rem  * @param BBjNumber targetChan
        rem  * @param BBjString appDir$
        rem  * @param HashMap newVers!
        rem  */
        method private void updateAdmModulesXmlFiles(BBjNumber sourceChan, BBjNumber targetChan, BBjString appDir$, HashMap newVers!)
            seterr method_error
            startProdIdTag$ = "<ASC_PROD_ID>"
            startProdIdTagLen = len(startProdIdTag$)
            endProdIdTag$ = "</ASC_PROD_ID>"
            startVersionTag$ = "<VERSION_ID>"
            startVersionTagLen = len(startVersionTag$)
            endVersionTag$ = "</VERSION_ID>"
            startLocalPath$ = "<LOCALE_PATH>"
            startLocalPathLen = len(startLocalPath$)
            endLocalPath$ = "</LOCALE_PATH>"
            startDdMountDir$ = "<DD_MOUNT_DIR>"
            startDdMountDirLen = len(startDdMountDir$)
            endDdMountDir$ = "</DD_MOUNT_DIR>"

            rem --- copy backup file back to xml file, making necessary updates
            while 1
                read(sourceChan,end=*break)record$

                rem --- get module ID in <ASC_PROD_ID> lines
                if(pos(startProdIdTag$=record$)) then
                    module$ = record$(pos(startProdIdTag$=record$) + startProdIdTagLen)
                    module$ = cvs(module$(1, pos(endProdIdTag$=module$) - 1),3)
                endif

                rem --- replace version in <VERSION_ID> lines
                rem --- assumes <VERSION_ID> line comes after <ASC_PROD_ID> line
                if(pos(startVersionTag$=record$)) and newVers!<>null() and newVers!.containsKey(module$) then
                    #log("  <<< " + record$)
                    line$ = record$(1,pos(startVersionTag$=record$) + startVersionTagLen - 1)
                    line$ = line$ + cast(BBjString, newVers!.get(module$))
                    line$ = line$ + record$(pos(endVersionTag$=record$, -1))
                    record$ = line$
                    #log("  >>> " + record$)
                endif

                rem --- replace path in <LOCALE_PATH> lines
                if(pos(startLocalPath$=record$)) then
                    #log("  <<< " + record$)
                    line$ = record$(1,pos(startLocalPath$=record$) + startLocalPathLen - 1)
                    line$ = line$ + appDir$ + "/prop/"
                    line$ = line$ + record$(pos(endLocalPath$=record$, -1))
                    record$ = line$
                    #log("  >>> " + record$)
                endif

                rem --- replace path in <DD_MOUNT_DIR> lines
                if(pos(startDdMountDir$=record$)) then
                    #log("  <<< " + record$)
                    line$ = record$(1,pos(startDdMountDir$=record$) + startDdMountDirLen - 1)
                    line$ = line$ + appDir$ + "/"
                    line$ = line$ + record$(pos(endDdMountDir$=record$, -1))
                    record$ = line$
                    #log("  >>> " + record$)
                endif

                write(targetChan)record$
            wend
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Update ads_autolaunch XML file. 
        rem  *
        rem  * Update <PROCESS_STATUS> tags in ads_autolaunch XML files to re-set status 'C' to status 'N',
        rem  * where ASC_COMP_ID=01007514 and ASC_PROD_ID=AD.
        rem  *
        rem  * @param BBjNumber sourceChan
        rem  * @param BBjNumber targetChan
        rem  */
        method private void updateAdsAutolaunchXmlFiles(BBjNumber sourceChan, BBjNumber targetChan)
            seterr method_error
            startAscCompTag$ = "<ASC_COMP_ID>"
            startAscProdTag$ = "<ASC_PROD_ID>"
            startProcStatusTag$ = "<PROCESS_STATUS>"
            startAscCompTagLen = len(startAscCompTag$)
            startAscProdTagLen = len(startAscProdTag$)
            startProcStatusTagLen = len(startProcStatusTag$)
            endAscCompTag$ = "</ASC_COMP_ID>"
            endAscProdTag$ = "</ASC_PROD_ID>"
            endProcStatusTag$ = "</PROCESS_STATUS>"

            rem --- <ASC_PROD_ID> and <ASC_PROD_ID> tags probably come after <PROCESS_STATUS> tag, so get them first.
            while 1
                read(sourceChan,end=*break)record$

                rem --- process <ASC_COMP_ID> lines
                if(pos(startAscCompTag$=record$)) then
                    rem --- get current status in <ASC_COMP_ID> lines
                    comp$ = record$(pos(startAscCompTag$=record$) + startAscCompTagLen)
                    comp$ = cvs(comp$(1, pos(endAscCompTag$=status$) - 1),3)
                endif

                rem --- process <ASC_PROD_ID> lines
                if(pos(startAscProdTag$=record$)) then
                    rem --- get current status in <ASC_PROD_ID> lines
                    prod$ = record$(pos(startAscProdTag$=record$) + startAscProdTagLen)
                    prod$ = cvs(prod$(1, pos(endAscProdTag$=status$) - 1),3)
                endif
            wend

            rem --- skip if not an Addon ads_autolaunch XML file
            if comp$="01007514" and pos(prod$+";"="ADB;DDB;SQL;EXM",4)=0 then
                rem --- re-set file pointer to the beginning of the file
                fid$=fid(sourceChan)
                close(sourceChan)
                open(sourceChan,isz=-1)fid$(9)

                rem --- copy backup file back to xml file, making necessary updates
                while 1
                    read(sourceChan,end=*break)record$
    
                    rem --- process <PROCESS_STATUS> lines
                    if(pos(startProcStatusTag$=record$)) then
    
                        rem --- get current status in <PROCESS_STATUS> lines
                        status$ = record$(pos(startProcStatusTag$=record$) + startProcStatusTagLen)
                        status$ = cvs(status$(1, pos(endProcStatusTag$=status$) - 1),3)
                        rem --- re-set status 'C' to status 'N' in <PROCESS_STATUS> lines
                        if status$="C" then
                            #log("  <<< " + record$)
                            line$ = record$(1,pos(startProcStatusTag$=record$) + startProcStatusTagLen - 1)
                            line$ = line$ + "N"
                            line$ = line$ + record$(pos(endProcStatusTag$=record$, -1))
                            record$ = line$
                            #log("  >>> " + record$)
                        endif
                    endif
    
                    write(targetChan)record$
                wend
            endif
            methodret
            
method_error:rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Recursively copy a directory.
        rem  *
        rem  * Recursively copies a directory from source File to target File. Target can
		rem  * be null when just need to count the number of files that will be copied.
        rem  *
        rem  * @param File source
        rem  * @param File target
		rem  * @return int count
        rem  */
        method private BBjInt copyDirectories(File source!, File target!)
            seterr method_error
			count%=0
    
            rem -- recursively process directories and copy files
            if(source!.isDirectory()) then
            
                rem --- create new directory if it doesn't exist
                FileObject.makeDirs(target!)

                rem --- get list of what is in the source dir, and process it
				declare File targetFile!
                declare Vector fileVector!
                fileVector! = new Vector(java.util.Arrays.asList(source!.list()))
                if(fileVector!.size()>0) then
                    for i=0 to fileVector!.size()-1
						if target!<>null() then
							targetFile!=new File(target!, cast(BBjString, fileVector!.get(i)))
						else
							targetFile!=null()
						endif
                        c% = #copyDirectories(new File(source!, cast(BBjString, fileVector!.get(i))), targetFile!)
						count%=count% + c%
                    next i
                endif
                
            else
                
                rem --- copy file
				if target!<>null() then
					#incrementProgressMeter("copying: " + source!.getPath())
                    rem --- skip if source and target are the same
                    if !FileObject.isSameFile(source!.getPath(),target!.getPath()) then
                        rem --- Can't use java.nio.files.Files::copy() method because of err 252 on Win machines when BBj has the source file open.
                        sourceModTime!=source!.lastModified()
                        sourceChan=unt
                        open(sourceChan,isz=-1,err=*endif)source!.getPath()
                        targetChan=unt
                        open(targetChan,isz=-1,mode="O_CREATE,O_TRUNC")target!.getPath()
                        while 1
                            readrecord(sourceChan,siz=#BLOCKSIZE,end=*break)record$
                            writerecord(targetChan)record$
                        wend
                        close(sourceChan)
                        close(targetChan)
                        target!.setLastModified(sourceModTime!)
                    endif
					#log("COPIED: " + source!.getPath())
				endif
				count%=count% + 1
               
            endif

            methodret count%
            
method_error: rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Parse app directory path from given path.
        rem  *
        rem  * @param BBjString path$
        rem  * @return BBjString aonPath$
        rem  */
        method private BBjString parseAppPath(BBjString path$)
            seterr method_error
            appDir$ = path$

            rem --- Flip directory path separators to "/"
            pos=pos("\"=path$)
            while pos
                path$=path$(1, pos-1)+"/"+path$(pos+1)
                pos=pos("\"=path$)
            wend

			rem --- Use directory containing the data directory
			if pos("/data/"=path$+"/")
				appDir$=path$(1, pos("/data/"=path$+"/",-1) - 1)
			endif
            methodret appDir$
            
method_error: rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Parse barista/settings directory path from given path.
        rem  *
        rem  * @param BBjString path$
        rem  * @return BBjString settingsPath$
        rem  */
        method private BBjString parseSettingsPath(BBjString path$)
            seterr method_error

            appDir$ = #parseAppPath(path$)
			settingsDir$ = appDir$(1,pos("/"=appDir$,-1)) + "barista/settings"

            methodret settingsDir$
            
method_error: rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Create progress meter.
        rem  *
        rem  * @return BBjTopLevelWindow meterWin!
        rem  */
        method private BBjTopLevelWindow createProgressMeter()
            seterr method_error

            rem --- meterWin! is not declared in bam_prog_bar.bbj, so can't declare it here
            rem declare BBjTopLevelWindow meterWin!
            
            declare BBTranslator Translate!
            Translate! = BBTranslator.getInstance( stbl("+PROPS_NAME"), stbl("+USER_LOCALE"), null(), stbl("+PROPS_PATH") )
            meter_title$=Translate!.getTranslation("AON_UPDATING")+"..."
            #meter_proc_recs=0
            meter_text$=""
            meter_action$="WIN-LST"
            if #wait4ok% then meter_action$=meter_action$+"-OK"

            call #dir_syp$+"bam_prog_bar.bbj",
:               #sysGUI!,
:               #form!,
:               meterWin!,
:               meter_title$,
:               #meter_total_recs,
:               #meter_proc_recs,
:               meter_text$,
:               meter_action$
            methodret meterWin!
            
method_error: rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Increment progress meter.
        rem  *
        rem  * @param File sourceDirectory
        rem  */
        method private void incrementProgressMeter(BBjString meter_text$)
            #meter_proc_recs=#meter_proc_recs+1
            meter_action$="MTR-LST"

            call #dir_syp$+"bam_prog_bar.bbj",
:               #sysGUI!,
:               #form!,
:               #meter!,
:               meter_title$,
:               #meter_total_recs,
:               #meter_proc_recs,
:               meter_text$,
:               meter_action$
        methodend

        rem /**
        rem  * Destroy progress meter.
        rem  */
        method private void destroyProgressMeter()
            #meter_proc_recs=#meter_total_recs
            meter_action$="LST-END"

            call #dir_syp$+"bam_prog_bar.bbj",
:               #sysGUI!,
:               #form!,
:               #meter!,
:               meter_title$,
:               #meter_total_recs,
:               #meter_proc_recs,
:               meter_text$,
:               meter_action$
        methodend

        rem /**
        rem  * Open log file.
        rem  *
        rem  * @param BBjString newSyncLoc$
        rem  * @param BBjString oldSyncLoc$
        rem  * @param BBjString syncBackupDir$
        rem  * @param BBjInt upgrade%
        rem  */
        method private void openLog(BBjString newSyncLoc$, BBjString oldSyncLoc$, BBjString syncBackupDir$, BBjInt upgrade%)
            seterr method_error
            rem --- log directory is under aon at same level as data directory
            appDir$ = #parseAppPath(newSyncLoc$)
            logDir$ = appDir$ + "/logs"
            appDir$ = appDir$
            
            rem --- create logs directory at new location
            FileObject.makeDirs(new File(logDir$))

            rem --- create and open log file
            log$ = logDir$+"/updatexml_"+DATE(0:"%Yd%Mz%Dz")+"_"+DATE(0:"%Hz%mz")+".txt"
            erase log$,err=*next
            string log$
            #log_dev=unt
            open(#log_dev)log$
            
            rem --- write log header info
            print(#log_dev)"Updatexml log started: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
            print(#log_dev)"Location of new sync XML files: " + newSyncLoc$
            if upgrade%
                print(#log_dev)"Location of old sync XML files: " + oldSyncLoc$
                print(#log_dev)"Sync backup directory: " + syncBackupDir$
            endif
            methodret
            
method_error: rem --- Method error trap/handler
            rd_err_text$="", err_num=err
            if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
            call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
            if pos("ESCAPE"=rd_err_act$)<>0 seterr 0;setesc 0
            if pos("RETRY"=rd_err_act$)<>0 retry
            x$=stbl("+THROWN_ERR","TRUE")   
            throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
        methodend

        rem /**
        rem  * Write to log file.
        rem  *
        rem  * @param BBjString text$
        rem  */
        method private void log(BBjString text$)
            print(#log_dev)text$
        methodend

        rem /**
        rem  * Close log file.
        rem  */
        method private void closeLog()
            print(#log_dev)
            print(#log_dev)"Updatexml log finished: " + date(0:"%Yd-%Mz-%Dz@%Hz:%mz:%sz")
            close(#log_dev)
        methodend
        
    classend

rem /**
rem  * FilenameFilter Class to filter *.xml files.
rem  */

    class public XmlFilter implements java.io.FilenameFilter

        method public boolean accept(File dir!, String file!)
			if file!.endsWith(".xml")
				methodret Boolean.valueOf("true")
			else
				methodret Boolean.valueOf("false")
			endif
        methodend
        
    classend

rem /**
rem  * FilenameFilter Class to filter ads_masks~*.xml files, excluding ads_masks~99*.xml and ads_masks~[*.xml files.
rem  */

    class public MasksFilter implements java.io.FilenameFilter

        method public boolean accept(File dir!, String file!)
			if file!.startsWith("ads_masks~") and !file!.startsWith("ads_masks~99") and !file!.startsWith("ads_masks~[") and file!.endsWith(".xml")
				methodret Boolean.valueOf("true")
			else
				methodret Boolean.valueOf("false")
			endif
        methodend
        
    classend

rem /**
rem  * FilenameFilter Class to filter ads_sequences~*.xml files, excluding ads_sequences~99*.xml and ads_sequences~[*.xml files.
rem  */

    class public SequencesFilter implements java.io.FilenameFilter

        method public boolean accept(File dir!, String file!)
			if file!.startsWith("ads_sequences~") and !file!.startsWith("ads_sequences~99") and !file!.startsWith("ads_sequences~[") and file!.endsWith(".xml")
				methodret Boolean.valueOf("true")
			else
				methodret Boolean.valueOf("false")
			endif
        methodend
        
    classend
    
rem /**
rem  * FilenameFilter Class to filter adm_modules~[^\[].*\.xml files.
rem  */

    class public NonConsolidatedAdmModules implements java.io.FilenameFilter

        method public boolean accept(File dir!, String file!)
			if file!.matches("adm_modules~[^\[].*\.xml")
				methodret Boolean.valueOf("true")
			else
				methodret Boolean.valueOf("false")
			endif
        methodend
        
    classend

    end
