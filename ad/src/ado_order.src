rem ==========================================================================
rem --- A class to help with creating orders and invoices in O/P
rem --- Program ado_order.src v8.0.0 30Jul2009
rem --- Copyright 2008-2009, BASIS International, Ltd.
rem ==========================================================================

    use ::sys/prog/bao_callpoint.bbj::Callpoint
    use ::ado_util.src::util
    use ::adc_array.aon::ArrayObject

    use java.util.HashMap

    class public OrderHelper

        field private BBjString className$ = "OrderHelper"
        field private BBjString firm_id$
        field private BBjInt precision% 
        field private BBjInt agingBucket% 
        field private BBjNumber pastDueLimit
        field private BBjNumber holdAmount
        field private BBjString autoHold$
        field public BBjString LotSerialFlag$

    rem --- Read-only fields for calcOverCreditLimit()
    rem --- Order Credit Limit? 1=yes, 0=no, -1=has not been set

        field private BBjNumber CreditLimit
        field private BBjInt OverCreditLimit% = -1
        field private BBjNumber TotalAging
        field private BBjNumber OpenOrderAmount
        field private BBjNumber OpenBoAmount
        field private BBjNumber HeldOrderAmount
        field private BBjNumber MaxPastDue
        field private BBjString CreditHold$
        field private BBjString TermsCreditHold$
        field private BBjString CreditHoldReason$

        field private Callpoint callpoint!
        field private BBjString dtl_tmpl$

    rem --- Channels and templates for tables

        field private BBjInt ordHeaderDev%
        field private BBjString ordHeaderTmpl$
        field private BBjInt lineCodeDev%
        field private BBjString lineCodeTmpl$
        field private BBjInt ordDetailDev%
        field private BBjString ordDetailTmpl$
        field private BBjInt itemMastDev%
        field private BBjString itemMastTmpl$
        field private BBjInt custDetailDev%
        field private BBjString custDetailTmpl$
        field private BBjInt taxcodeDev%
        field private BBjString taxcodeTmpl$
        field private BBjInt termsCodeDev%
        field private BBjString termsCodeTmpl$
        field private BBjInt lotSerialDev%
        field private BBjString lotSerialTmpl$
        field private BBjInt ivsParamsDev% 
        field private BBjString ivsParamsTmpl$ 
        
    rem --- Set from order

        field public BBjVector DtlVect!
        field private BBjString Cust_id$
        field public BBjString Order_no$
        field public BBjString Inv_type$
        field public BBjString TaxCode$

    rem --- Read-only fields for totalSaleDisk()

        field private BBjNumber extPrice
        field private BBjNumber taxable
        field private BBjNumber extCost

        field public BBjNumber Freight
        field public BBjNumber Discount
        field public BBjNumber TaxAmount

        field private BBjNumber START_BLOCK = 1

    rem --- New object

        method public OrderHelper(BBjString p_firm_id$, ArrayObject pTableChans!, BBjInt p_precision%, Callpoint pCallpoint!, BBjString p_dtl_tmpl$)
            #setOrderHelper(p_firm_id$, pTableChans!, p_precision%, pCallpoint!, p_dtl_tmpl$)
        methodend

        method public OrderHelper(BBjString p_firm_id$, BBjInt p_precision%, Callpoint pCallpoint!, BBjString p_dtl_tmpl$)
            #setOrderHelper(p_firm_id$, null(), p_precision%, pCallpoint!, p_dtl_tmpl$)
        methodend

        method public OrderHelper(BBjString p_firm_id$, BBjInt p_precision%, Callpoint pCallpoint!)
            #setOrderHelper(p_firm_id$, null(), p_precision%, pCallpoint!, "")
        methodend

        method public OrderHelper(BBjString p_firm_id$, Callpoint pCallpoint!)
            #setOrderHelper(p_firm_id$, null(), 0, pCallpoint!, "")
        methodend

        method private void setOrderHelper(BBjString p_firm_id$, ArrayObject pTableChans!, BBjInt p_precision%, Callpoint pCallpoint!, BBjString p_dtl_tmpl$)

            #firm_id$   = p_firm_id$
            #precision% = p_precision%
            #callpoint! = pCallpoint!
            #dtl_tmpl$  = p_dtl_tmpl$

            #OverCreditLimit% = -1

            if !util.isTableChansSet() then
                if pTableChans! = null() then
                    throw #className$+": setOrderHelper(): Pass TableChans! or set table_chans$[all] in util object", 257
                else
                    util.setTableChans(pTableChans!)
                endif
            endif

        methodend
        
    rem --- Setter and getter for customer ID.  Set needs to check for previous customer
    rem --- Note: this means that #Cust_id$ = p_cust_id$ is only legal here
    rem --- Everywhere else use #setCust_id(p_cust_id$)
        
        method public void setCust_id(BBjString p_cust_id$)
            
            if p_cust_id$ <> #Cust_id$ then
                #OverCreditLimit% = -1; rem --- signal that credit limit should be recaculated
            endif
            
            #Cust_id$ = p_cust_id$
        methodend
        
        method public BBjString getCust_id()
            methodret #Cust_id$
        methodend

    rem --- Total order totals from passed detail vector

        method public BBjNumber totalSales(BBjVector pDtlVect!, Callpoint callpoint!)

            if #dtl_tmpl$ = "" then
                throw #className$+": totalSales(): You must pass the detail template to use this method", 258
            endif

            if #Inv_type$ = "" then
                throw #className$+": totalSales(): You must setInv_type() (header invoice type) before you use this method", 259
            endif

            if #lineCodeDev% = 0 then
                data_name$ = "OPC_LINECODE"
                #lineCodeDev%  = int(util.getDev(data_name$))
                #lineCodeTmpl$ = util.getTmpl(data_name$)
            endif

            #getPrecision()
            precision #precision%
            ttl_sales = 0

            dim dtl_rec$:#dtl_tmpl$
            dim linecode_rec$:#lineCodeTmpl$

            if pDtlVect! <> null() and pDtlVect!.size() then
                for i = 0 to pDtlVect!.size() - 1
                    dtl_rec$ = str(pDtlVect!.getItem(i))

                rem --- GridRowDeleteStatus() does not return the correct status because the vector it's based on isn't built

                    if cvs(dtl_rec$, 2) <> "" and callpoint!.getGridRowDeleteStatus(i) <> "Y" then 
                        read record (#lineCodeDev%, key=#firm_id$+dtl_rec.line_code$, dom=*endif) linecode_rec$

                        if dtl_rec.commit_flag$ = "Y" or #Inv_type$ = "P" then
                            if pos(linecode_rec.line_type$="SPN") then
                                ttl_sales = ttl_sales + (dtl_rec.unit_price * dtl_rec.qty_shipped)
                            else
                                if linecode_rec.line_type$ = "O" then 
                                    ttl_sales = ttl_sales + dtl_rec.ext_price
                                endif
                            endif    
                        endif
                    endif
                next i
            endif

            methodret ttl_sales

        methodend

    rem --- Total cost totals from passed detail vector

        method public BBjNumber totalCost(BBjVector pDtlVect!, Callpoint callpoint!)

            if #dtl_tmpl$ = "" then
                throw #className$+": totalSales(): You must pass the detail template to use this method", 258
            endif

            if #Inv_type$ = "" then
                throw #className$+": totalSales(): You must setInv_type() (header invoice type) before you use this method", 259
            endif

            if #lineCodeDev% = 0 then
                data_name$ = "OPC_LINECODE"
                #lineCodeDev%  = int(util.getDev(data_name$))
                #lineCodeTmpl$ = util.getTmpl(data_name$)
            endif

            #getPrecision()
            precision #precision%
            ttl_cost = 0

            dim dtl_rec$:#dtl_tmpl$
            dim linecode_rec$:#lineCodeTmpl$

            if pDtlVect! <> null() and pDtlVect!.size() then
                for i = 0 to pDtlVect!.size() - 1
                    dtl_rec$ = str(pDtlVect!.getItem(i))

                    if cvs(dtl_rec$, 2) <> "" and callpoint!.getGridRowDeleteStatus(i) <> "Y" then 
                        read record (#lineCodeDev%, key=#firm_id$+dtl_rec.line_code$, dom=*endif) linecode_rec$

                        if dtl_rec.commit_flag$ = "Y" or #Inv_type$ = "P" then
                            if pos(linecode_rec.line_type$="SPN") then
                                ttl_cost = ttl_cost + (dtl_rec.unit_cost * dtl_rec.qty_shipped)
                            endif    
                        endif
                    endif
                next i
            endif

            methodret ttl_cost

        methodend


rem --- Return Taxable Amount from detail line vector

        method public BBjNumber totalTaxable(BBjVector pDtlVect!, Callpoint callpoint!)

            if #dtl_tmpl$ = "" then
                throw #className$+": totalSales(): You must pass the detail template to use this method", 258
            endif

            if #Inv_type$ = "" then
                throw #className$+": totalSales(): You must setInv_type() (header invoice type) before you use this method", 259
            endif

            if #lineCodeDev% = 0 then
                data_name$ = "OPC_LINECODE"
                #lineCodeDev%  = int(util.getDev(data_name$))
                #lineCodeTmpl$ = util.getTmpl(data_name$)
            endif

            if #itemMastDev% = 0 then
                data_name$ = "IVM_ITEMMAST"
                #itemMastDev%  = int(util.getDev(data_name$))
                #itemMastTmpl$ = util.getTmpl(data_name$)
            endif

            #getPrecision()
            precision #precision%
            ttl_taxable = 0

            dim dtl_rec$:#dtl_tmpl$
            dim linecode_rec$:#lineCodeTmpl$
            dim item_rec$:#itemMastTmpl$

            if pDtlVect! <> null() and pDtlVect!.size() then
                for i = 0 to pDtlVect!.size() - 1
                    dtl_rec$ = str(pDtlVect!.getItem(i))

                    if cvs(dtl_rec$, 2) <> "" and callpoint!.getGridRowDeleteStatus(i) <> "Y" then 
                        read record (#lineCodeDev%, key=#firm_id$+dtl_rec.line_code$, dom=*endif) linecode_rec$

                        if pos(linecode_rec.line_type$ = "SP")=0 then
                            if linecode_rec.taxable_flag$ = "Y" then
                                ttl_taxable = ttl_taxable + dtl_rec.ext_price
                            endif
                        else
                            if #itemMastDev% then
                                find record(#itemMastDev%,key=#firm_id$+ dtl_rec.item_id$,dom=*endif)item_rec$
                                if item_rec.taxable_flag$="Y" then
                                    ttl_taxable = ttl_taxable + dtl_rec.ext_price
                                endif
                            endif
                        endif
                    endif
                next i
            endif

            methodret ttl_taxable

        methodend

    rem --- Total sales from set detail vector

        method public BBjNumber totalSales()
            if #DtlVect! = null() then
                throw #className$+": totalSales(): Pass in the detail vector or use setDtlVect()", 260
            else
                methodret #totalSales(#DtlVect!)
            endif
        methodend

    rem --- Order totals from disk records

        method public void totalSalesDisk(BBjString p_cust_id$, BBjString p_order_no$, BBjString p_inv_type$)

        rem --- Files

            if #ordDetailDev% = 0 then
                data_name$ = "OPE_ORDDET"
                #ordDetailDev%  = int(util.getDev(data_name$))
                #ordDetailTmpl$ = util.getTmpl(data_name$)
            endif

            if #lineCodeDev% = 0 then
                data_name$ = "OPC_LINECODE"
                #lineCodeDev%  = int(util.getDev(data_name$))
                #lineCodeTmpl$ = util.getTmpl(data_name$)
            endif

            if #itemMastDev% = 0 then
                data_name$ = "IVM_ITEMMAST"
                #itemMastDev%  = int(util.getDev(data_name$))
                #itemMastTmpl$ = util.getTmpl(data_name$)
            endif

        rem --- Inits

            #setCust_id(p_cust_id$)
            #Order_no$ = p_order_no$
            #Inv_type$ = p_inv_type$

            #getPrecision()
            precision #precision%

            ext_price = 0
            taxable   = 0
            ext_cost  = 0
            more      = 1

            dim orddet_rec$:#ordDetailTmpl$
            dim linecode_rec$:#lineCodeTmpl$
            dim itemmast_rec$:#itemMastTmpl$

        rem --- Begin loop

            read (#ordDetailDev%, key=#firm_id$+"  "+p_cust_id$+p_order_no$, dom=*next)

            while more
                read record (#ordDetailDev%, end=*break) orddet_rec$
                if orddet_rec.firm_id$     <> #firm_id$ then break
                if orddet_rec.customer_id$ <> p_cust_id$ then break
                if orddet_rec.order_no$    <> p_order_no$ then break
                found = 0

                if #START_BLOCK then
                    find record (#lineCodeDev%, key=#firm_id$+orddet_rec.line_code$, dom=*endif) linecode_rec$
                    found = 1
                endif

                if !found or linecode_rec.line_type$ = "M" then continue

            rem --- Can't ship if not committed

                if orddet_rec.commit_flag$ <> "Y" and p_inv_type$ <> "P" then 
                    if linecode_rec.line_type$ <> "O" then
                        orddet_rec.qty_backord = 0
                        orddet_rec.qty_shipped = 0
                        orddet_rec.ext_price   = 0
                        orddet_rec.taxable_amt = 0
                    else
                        if orddet_rec.ext_price <> 0 then
                            orddet_rec.unit_price  = orddet_rec.ext_price
                            orddet_rec.ext_price   = 0
                            orddet_rec.taxable_amt = 0
                        endif
                    endif
                endif

            rem --- Determine taxable amount

                orddet_rec.taxable_amt = 0

                if linecode_rec.line_type$ <> "S" and linecode_rec.line_type$ <> "P" then
                    if linecode_rec.taxable_flag$ = "Y" then
                        orddet_rec.taxable_amt = orddet_rec.ext_price
                    endif
                else

                    if #START_BLOCK then
                        find record (#itemMastDev%, key=#firm_id$+orddet_rec.item_id$, dom=*endif) itemmast_rec$

                        if itemmast_rec.taxable_flag$ = "Y" then 
                            orddet_rec.taxable_amt = orddet_rec.ext_price
                        endif
                    endif
                endif

                orddet_rec$ = field(orddet_rec$)
                write record (#ordDetailDev%) orddet_rec$

                ext_price = ext_price + orddet_rec.ext_price
                taxable   = taxable   + orddet_rec.taxable_amt
                ext_cost  = ext_cost  + orddet_rec.unit_cost * orddet_rec.qty_shipped

            wend

        rem --- Set return values as fields

            #extPrice = ext_price
            #taxable  = taxable
            #extCost  = ext_cost 

        methodend

        method public void totalSalesDisk(BBjString p_cust_id$, BBjString p_order_no$)

            if #Inv_type$ <> "" then
                #totalSalesDisk(p_cust_id$, p_order_no$, #Inv_type$)
            else

                if #ordHeaderDev% = 0 then
                    data_name$ = "OPE_ORDHDR"
                    #ordHeaderDev%  = int(util.getDev(data_name$))
                    #ordHeaderTmpl$ = util.getTmpl(data_name$)
                endif

                dim ordhdr_rec$:#ordHeaderTmpl$
                found = 0

                if #START_BLOCK then
                    find record (#ordHeaderDev%, key=#firm_id$+"  "+p_cust_id$+p_order_no$, dom=*endif) ordhdr_rec$
                    found = 1
                endif

                if found then
                    #totalSalesDisk(p_cust_id$, p_order_no$, ordhdr_rec.invoice_type$)
                else
                    throw #className$+": totalSalesDisk(): Could not find order """+p_order_no$+""" for customer """+p_cust_id$+"""", 261
                endif
            endif

        methodend

        method public void totalSalesDisk()

            if #Cust_id$ <> "" and #Order_no$ <> "" then
                if #Inv_type$ <> "" then
                    #totalSalesDisk(#Cust_id$, #Order_no$, #Inv_type$)
                else
                    #totalSalesDisk(#Cust_id$, #Order_no$)
                endif
            else
                throw #className$+": totalSalesDisk(): You must setCust_id() and setOrder_no() before calling this method", 262
            endif

        methodend

    rem --- Get total quantity of assigned lots/serial numbers for an order and line

        method public BBjNumber totalLotSerialAmount(BBjString p_cust_id$, BBjString p_order_no$, BBjString p_seq_no$)

            if #lotSerialDev% = 0 then
                data_name$ = "OPE_ORDLSDET"
                #lotSerialDev%  = int(util.getDev(data_name$))
                #lotSerialTmpl$ = util.getTmpl(data_name$)
            endif

            #setCust_id(p_cust_id$)
            #Order_no$ = p_order_no$
            ttl_lot_serial = 0
            more = 1
            dim ordlsdet_rec$:#lotSerialTmpl$

            read (#lotSerialDev%, key=#firm_id$+"  "+p_cust_id$+p_order_no$+p_seq_no$, dom=*next)

            while more
                read record (#lotSerialDev%, end=*break) ordlsdet_rec$
                if ordlsdet_rec.firm_id$        <> #firm_id$   then break
                if ordlsdet_rec.customer_id$    <> p_cust_id$  then break
                if ordlsdet_rec.order_no$       <> p_order_no$ then break
                if ordlsdet_rec.orddet_seq_ref$ <> p_seq_no$   then break

                ttl_lot_serial = ttl_lot_serial + ordlsdet_rec.qty_ordered
            wend

            methodret ttl_lot_serial

        methodend

        method public BBjNumber totalLotSerialAmount(BBjString p_seq_no$)

            if #Cust_id$ <> "" and #Order_no$ <> "" then
                methodret #totalLotSerialAmount(#Cust_id$, #Order_no$, p_seq_no$)
            else
                throw #className$+": totalLotSerialAmount(): You must setCust_id() and setOrder_no() before calling this method", 262
            endif

        methodend

    rem --- Get precision

        method private void getPrecision()

            if #precision% = 0 then
                data_name$ = "IVS_PARAMS"
                dim params_rec$:util.getTmpl(data_name$)
                find record (util.getDev(data_name$), key=#firm_id$+"IV00") params_rec$
                #precision% = int(num(params_rec.precision$))
            endif

        methodend

    rem --- Three accessor methods for the return values of totalSalesDisk()

        method public BBjNumber getExtPrice()
            methodret #extPrice
        methodend

        method public BBjNumber getTaxable()
            methodret #taxable
        methodend

        method public BBjNumber getExtCost()
            methodret #extCost
        methodend

    rem --- Clear values for a new order

        method public void newOrder()
            rem #Cust_id$ = ""; rem save the customer ID so some calcs don't have to be rerun
            #Order_no$ = ""
            #Inv_type$ = ""
            #extPrice = 0
            #taxable = 0
            #extCost = 0
            #Freight = 0
            #Discount = 0
            #TaxAmount = 0
        methodend

    rem --- Calculate Tax Amount

        method public BBjNumber calculateTax(BBjNumber p_discount_amt, BBjNumber p_freight_amt, BBjNumber p_taxable)

        rem --- Files

            if #taxcodeDev% = 0 then 
                data_name$ = "OPC_TAXCODE"
                #taxcodeDev%  = int(util.getDev(data_name$))
                #taxcodeTmpl$ = util.getTmpl(data_name$)
            endif

        rem --- Inits

            if #TaxCode$ = "" then 
                throw #className$ + ": calculateTax(): #TaxCode is null", 263
            endif

        rem --- Get taxcode record, if necessary

            dim taxcode_rec$:#taxcodeTmpl$
            dim taxcode_rec2$:#taxcodeTmpl$

            found = 0

            if #START_BLOCK then
                find record (#taxcodeDev%, key=#firm_id$+#TaxCode$, err=*endif) taxcode_rec$
                found = 1
            endif

            if !found then
                throw #className$ + ": calculateTax(): tax code """ + #TaxCode$ + """ not found", 11
            endif

        rem --- Changes to taxable amount

            if #getTaxable() > 0 then
                taxable_amt = max(#getTaxable() - p_discount_amt, 0)
            else
                if #getTaxable() < 0 then
                    taxable_amt = min(#getTaxable() - p_discount_amt, 0)
                else
                    taxable_amt = 0
                endif
            endif

        rem --- New taxable amount - jpb
        
            if p_taxable > 0 then
                taxable_amt = max(p_taxable - p_discount_amt, 0)
            else
                if p_taxable < 0 then
                    taxable_amt = min(p_taxable - p_discount_amt, 0)
                else
                    taxable_amt = 0
                endif
            endif
            
            if taxcode_rec.tax_frt_flag$ = "Y" then 
                taxable_amt = taxable_amt + p_freight_amt
            endif

            tax_amount = 0
            tax_calc = round(taxcode_rec.tax_rate * taxable_amt / 100, 2)

            if taxcode_rec.op_max_limit <> 0 and abs(tax_calc) > taxcode_rec.op_max_limit then
                tax_calc = taxcode_rec.op_max_limit * sgn(tax_calc)
            endif

            tax_amount = tax_calc

        rem --- Do multi-level taxes

            for i=1 to 10
                tax_code$ = field(taxcode_rec$, "AR_TOT_CODE_" + str(i:"00"))
                if cvs(tax_code$,2) = "" then continue
                find record (#taxcodeDev%, key=firm_id$+tax_code$, dom=*continue) taxcode_rec2$
                tax_calc = round(taxcode_rec2.tax_rate * taxable_amt / 100, 2)

                if taxcode_rec2.op_max_limit <> 0 and abs(tax_calc) > taxcode_rec2.op_max_limit then
                    tax_calc = taxcode_rec2.op_max_limit * sgn(tax_calc)
                endif

                tax_amount = tax_amount + tax_calc
            next i

            methodret tax_amount

        methodend

    rem --- Is there a Credit Hold or over credit limit condition?

        method public BBjInt calcOverCreditLimit(BBjString p_cust_id$, BBjString p_order_no$)

        rem --- Inits

            more = 1
            #OpenOrderAmount = 0
            #OpenBoAmount = 0
            #HeldOrderAmount = 0
            this_total_sale = 0

        rem --- Files

        if #custDetailDev% = 0 then
                data_name$ = "ARM_CUSTDET"
                #custDetailDev%  = int(util.getDev(data_name$))
                #custDetailTmpl$ = util.getTmpl(data_name$)
            endif

            if #ordHeaderDev% = 0 then
                data_name$ = "OPE_ORDHDR"
                #ordHeaderDev%  = int(util.getDev(data_name$))
                #ordHeaderTmpl$ = util.getTmpl(data_name$)
            endif

            if #termsCodeDev% = 0 then
                data_name$ = "ARC_TERMCODE"
                #termsCodeDev%  = int(util.getDev(data_name$))
                #termsCodeTmpl$ = util.getTmpl(data_name$)
            endif

        rem --- Parameters

            if #agingBucket% = 0 then 
                data_name$ = "ARS_CREDIT"
                dim credit_rec$:util.getTmpl(data_name$)
                find record (util.getDev(data_name$), key=#firm_id$+"AR01") credit_rec$
                #agingBucket% = int(num(credit_rec.aging_bucket$))
                #pastDueLimit = num(credit_rec.past_due_lim$)
                #holdAmount = num(credit_rec.hold_amount$)
                #autoHold$ = credit_rec.auto_hold$
            endif

        rem --- Get customer's current credit info

            #CreditLimit = #getCreditLimit()
            #CreditHold$ = #getCreditHold()

        rem --- Get this order header (if order isn't null)

            dim ord_head_rec$:#ordHeaderTmpl$

            if p_order_no$ <> "" then
                read record (#ordHeaderDev%, key=#firm_id$+"  "+p_cust_id$+p_order_no$, dom=*endif) ord_head_rec$

            rem --- Get order terms record

                dim terms_code_rec$:#termsCodeTmpl$

                if #START_BLOCK then
                    read record (#termsCodeDev%, key=#firm_id$+"A"+ord_head_rec.terms_code$, dom=*endif) terms_code_rec$
                    #TermsCreditHold$ = terms_code_rec.cred_hold$
                endif

            endif

        rem --- Position file

            read (#ordHeaderDev%, key=#firm_id$+"  "+p_cust_id$, dom=*next)

        rem --- Total Open Orders

            while more
                read record (#ordHeaderDev%, end=*break) ord_head_rec$

                if ord_head_rec.firm_id$ <> #firm_id$ or ord_head_rec.customer_id$ <> p_cust_id$ then
                    break
                endif

                if p_order_no$ <> "" and ord_head_rec.order_no$ = p_order_no$ then
                    this_total_sale = ord_head_rec.total_sales 
                endif

                if pos(ord_head_rec.invoice_type$ = "PV") = 0 then 
                    if ord_head_rec.invoice_type$ = "B" then 
                        #OpenBoAmount = #OpenBoAmount + ord_head_rec.total_sales 
                    else 
                        if ord_head_rec.credit_flag$ = "C" then 
                            #HeldOrderAmount = #HeldOrderAmount + ord_head_rec.total_sales 
                        else 
                            #OpenOrderAmount = #OpenOrderAmount + ord_head_rec.total_sales
                        endif
                    endif
                endif
            wend

        rem --- Total Open Invoices
			
            dim cust_det_rec$:#custDetailTmpl$
            read record (#custDetailDev%, key=#firm_id$+p_cust_id$+"  ") cust_det_rec$
            #TotalAging = cust_det_rec.aging_future+cust_det_rec.aging_cur+cust_det_rec.aging_30+cust_det_rec.aging_60+cust_det_rec.aging_90+cust_det_rec.aging_120

        rem --- Total Past Due Invoices

        rem if agingBucket% = 0 then #MaxPastDue = cust_det_rec.aging_future+cust_det_rec.aging_cur+cust_det_rec.aging_30+cust_det_rec.aging_60+cust_det_rec.aging_90+cust_det_rec.aging_120
        rem if agingBucket% = 1 then #MaxPastDue = cust_det_rec.aging_cur+cust_det_rec.aging_30+cust_det_rec.aging_60+cust_det_rec.aging_90+cust_det_rec.aging_120
            if agingBucket% = 2 then #MaxPastDue = cust_det_rec.aging_30+cust_det_rec.aging_60+cust_det_rec.aging_90+cust_det_rec.aging_120
            if agingBucket% = 3 then #MaxPastDue = cust_det_rec.aging_60+cust_det_rec.aging_90+cust_det_rec.aging_120
            if agingBucket% = 4 then #MaxPastDue = cust_det_rec.aging_90+cust_det_rec.aging_120
            if agingBucket% = 5 then #MaxPastDue = cust_det_rec.aging_120

        rem --- Set Check Credit Limit Flag

            batch$=""
            batch$=stbl("!batch",err=*next)
            #CreditHoldReason$ = "No Credit Problems"
            aging_and_open = #TotalAging+#OpenOrderAmount+#OpenBoAmount+#HeldOrderAmount

            if  #CreditHold$ = "Y" or
:               #TermsCreditHold$ = "Y" or            
:               #MaxPastDue > #pastDueLimit or
:               ( this_total_sale and #holdAmount and this_total_sale > #holdAmount ) or
:               ( #autoHold$="Y" and #CreditLimit and aging_and_open > #CreditLimit )
:           then
                #OverCreditLimit% = 1
                if batch$<>"" then batch$="B"

                if #CreditHold$ = "Y" then
                    #CreditHoldReason$ = "Customer is on Credit Hold"
                else
                    if #TermsCreditHold$ = "Y" then
                        #CreditHoldReason$ = "Credit hold from Terms Code"
                    else
                        if #MaxPastDue > #pastDueLimit then
                            #CreditHoldReason$ = "Past Due Amount (" + str(#MaxPastDue) + ") exceeds maximum (" + str(#pastDueLimit) + ")"
                        else
                            if this_total_sale and #holdAmount and this_total_sale > #holdAmount then
                                #CreditHoldReason$ = "This order's amount (" + str(this_total_sale) + ") exceeds the Hold Amount (" + str(#holdAmount) + ")"
                            else
                                if #autoHold$="Y" and #CreditLimit and aging_and_open > #CreditLimit then
                                    #CreditHoldReason$ = "Aging plus Open amount (" + str(aging_and_open) + ") exceeds Credit Limit (" + str(#CreditLimit) + ")"
                                endif
                            endif
                        endif
                    endif
                endif
            else
                #OverCreditLimit% = 0
            endif

            if batch$<>"" then ignore$=stbl("!batch",batch$)

        rem --- Position Order Header back at the original order 

            if p_order_no$ <> "" then
                read (#ordHeaderDev%, key=#firm_id$+"  "+p_cust_id$+p_order_no$, dom=*endif)
            endif

            methodret #OverCreditLimit%

        methodend

    rem --- Set credit limit: set customer (order can be null)

        method public BBjInt calcOverCreditLimit(BBjString p_cust_id$)
            if p_cust_id$ = "" then
                throw #className$ + ": calcOverCreditLimit(): You pass the customer ID when calling this method", 11
            endif

            #setCust_id(p_cust_id$)

            methodret #calcOverCreditLimit(p_cust_id$, #Order_no$)
        methodend

    rem --- Set Credit Limit: use fields if set (order can be null)

        method public BBjInt calcOverCreditLimit()
            if #Cust_id$ = "" then
                throw #className$ + ": calcOverCreditLimit(): You must setCust_id() before calling this method", 11
            endif

            methodret #calcOverCreditLimit(#Cust_id$, #Order_no$)
        methodend

    rem --- Accessor methods for calcOverCreditLimit()

        rem /**
        rem  * Get Credit Limit for this customer.
        rem  *
        rem  * For this customer, returns current up to the minute ARM_CUSTDET.CREDIT_LIMIT.
        rem  *
        rem  * @return BBjNumber Credit Limit
        rem  */
        method public BBjNumber getCreditLimit()
            rem --- make sure ARM_CUSTDET is available
            if #custDetailDev% = 0 then
                data_name$ = "ARM_CUSTDET"
                #custDetailDev%  = int(util.getDev(data_name$))
                #custDetailTmpl$ = util.getTmpl(data_name$)
            endif
			
            rem --- get current up to the minute credit info
            dim cust_det_rec$:#custDetailTmpl$
            read record (#custDetailDev%, key=#firm_id$+#Cust_id$+"  ") cust_det_rec$
            methodret cust_det_rec.credit_limit
        methodend

        method public BBjInt getOverCreditLimit()
            methodret #OverCreditLimit%
        methodend

        method public BBjNumber getTotalAging()
            methodret #TotalAging
        methodend

        method public BBjNumber getOpenOrderAmount()
            methodret #OpenOrderAmount
        methodend

        method public BBjNumber getOpenBoAmount()
            methodret #OpenBoAmount
        methodend

        method public BBjNumber getHeldOrderAmount()
            methodret #HeldOrderAmount
        methodend

        method public BBjNumber getMaxPastDue()
            methodret #MaxPastDue
        methodend

        rem /**
        rem  * Get Credit Hold flag for this customer.
        rem  *
        rem  * For this customer, returns current up to the minute ARM_CUSTDET.CRED_HOLD.
        rem  *
        rem  * @return BBjString Credit Hold flag
        rem  */
        method public BBjString getCreditHold()
            rem --- make sure ARM_CUSTDET is available
            if #custDetailDev% = 0 then
                data_name$ = "ARM_CUSTDET"
                #custDetailDev%  = int(util.getDev(data_name$))
                #custDetailTmpl$ = util.getTmpl(data_name$)
            endif
			
            rem --- get current up to the minute credit info
            dim cust_det_rec$:#custDetailTmpl$
            read record (#custDetailDev%, key=#firm_id$+#Cust_id$+"  ") cust_det_rec$
            methodret cust_det_rec.cred_hold$
        methodend

        method public BBjString getTermsCreditHold()
            methodret #TermsCreditHold$
        methodend

        method public BBjString getCreditHoldReason()
            methodret #CreditHoldReason$
        methodend
        
    rem --- Is this item lotted or serialized?
    
        method public BBjInt isLottedSerial(BBjString p_item_id$)
        
            lotted% = 0

            if cvs(p_item_id$, 2)<>"" and pos(#getLotSerialFlag() = "LS") then 
                if #itemMastDev% = 0 then
                    data_name$ = "IVM_ITEMMAST"
                    #itemMastDev%  = int(util.getDev(data_name$))
                    #itemMastTmpl$ = util.getTmpl(data_name$)
                endif
                
                dim itemMastRec$:#itemMastTmpl$
                start_block = 1

                if start_block then
                    read record (#itemMastDev%, key=#firm_id$+p_item_id$, dom=*endif) itemMastRec$

                    if itemMastRec.lotser_item$="Y" then
                        lotted% = 1
                    endif
                endif
            endif        
            
            methodret lotted%
        
        methodend
        
    rem --- Get Lotted/Serliazed flag from parameters
    
        method public BBjString getLotSerialFlag()
        
            if #LotSerialFlag$ <> "" then 
                methodret #LotSerialFlag$
            endif

            if #ivsParamsDev% = 0 then
                data_name$ = "IVS_PARAMS"
                #ivsParamsDev%  = int(util.getDev(data_name$))
                #ivsParamsTmpl$ = util.getTmpl(data_name$)
            endif
            
            dim ivsParamsRec$:#ivsParamsTmpl$
            
            read record (#ivsParamsDev%, key=firm_id$+"IV00") ivsParamsRec$
            #LotSerialFlag$ = ivsParamsRec.lotser_flag$
            
            methodret #LotSerialFlag$
        
        methodend

    classend

