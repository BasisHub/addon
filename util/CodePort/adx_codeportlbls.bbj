rem adx - CodePort Program Conversion Utility (Labels Overlay)
rem Program adx_codeportlbls.bbj v8.0.0 12Oct2007
rem 
rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Feb2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+
rem 

    setesc std_error
    seterr std_error

rem --- Initializations
    dim labels$[999],position[999],refs[999]
    let labels=0

rem --- Build a list of all labels defined in this program
    let rd_meter_data$="Building label list..."
    gosub disp_meter
    for x=1 to numlines
        let rec$=lines$[x]
        let r=pos("rem "=rec$),p=pos(":"=rec$)
        if p=0 then continue
        if r then if p>r then continue
        let x$=rec$(1,p-1),p=pos(" "=x$)
        if p then continue
        if cvs(x$,1+2)="" then continue
        let labels=labels+1
        let labels$[labels]=x$
        let position[labels]=x
    next x

rem --- Try and replace labels with *next where possible
    let rd_meter_data$="checking for symbolic labels..."
    gosub disp_meter
    let symbolic$="*next"
    let option$="dom="
    gosub symbolic_label
    let option$="err="
    gosub symbolic_label

rem --- Count number of references for each label
    let rd_meter_data$="Removing unreferenced labels..."
    gosub disp_meter
    for x=1 to numlines
        let rec$=lines$[x]
        for z=1 to labels
            let p=pos(labels$[z]=cvs(rec$,8))
            if p then if x<>position[z] then let refs[z]=refs[z]+1
        next z
    next x

rem --- Remove unreferenced labels
    for x=1 to labels
        if refs[x] then continue
        let line=position[x]
        let rec$=lines$[line]
        let x$=labels$[x]+":"
        if pos(x$=rec$)<>1 then continue
        let rec$=cvs(rec$(len(x$)+1),1)
        let lines$[line]=rec$
        if rec$<>"" then continue
        rem --- Remove blank line if one is created when the label was removed
        gosub delete_line
        for z=1 to labels
            if position[z]>line then let position[z]=position[z]-1
        next z
        rem --- Next label
    next x
    rem --- For debugging
    rem gosub listlabels
    rem escape

rem --- Run the next overlay
NEXT_OVERLAY: 
    RUN "adx_codeporterrs.bbj",ERR=THE_END

rem --- Search for option and see if a literal label can be
rem --- replaced by a symbolic label (e.g. *next)
symbolic_label: 
    for x=1 to numlines
        let rec$=lines$[x]
        let r=pos("rem "=rec$)
        let p=pos(option$=rec$)
        if p=0 then continue
        if r then if p>r then continue
        let w=p+len(option$)
        if rec$(w,1)="*" then continue
        let label$=rec$(w)
        let l=len(label$)+1
        let c=pos(","=label$)
        if c then let l=c
        let c=pos(")"=label$)
        if c then if c<l then let l=c
        let label$=label$(1,l-1)
        rem --- Find the next non-blank line
        for z=x+1 to numlines
            let x$=cvs(lines$[z],1+2)
            if x$<>"" then break
        next z
        if pos(label$=x$)<>1 then continue
        let x$=rec$
        let p=pos(label$=rec$)
        let rec$=rec$(1,p-1)+symbolic$+rec$(p+len(label$))
        let lines$[x]=rec$
        rem --- For debugging
        rem print cvs(rec$(1,min(len(rec$),79)),1)
        rem print cvs(x$(1,min(len(x$),79)),1)
        rem print "Label ",label$," -> *next"
    next x
return 

rem --- Display range of LINES$ (debugging tool)
listlines: 
    for x=b to e
        print "(",x:"0000","): ",lines$[x]
    next x
    escape 
return 

rem --- Display label list (debugging tool)
listlabels: 
    for x=1 to labels
        print "(Line ",str(position[x]:"0000"),") ",labels$[x],@(50),"Referenced ",str(refs[x]:"000")," time(s)"
    next x
return 

disp_meter:rem --- Display Progress Meter

    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",rdSysGUI!,rdForm!,rdMeterWin!,rd_meter_title$,rd_meter_total_recs,rd_meter_proc_recs,rd_meter_data$,rd_meter_action$
    print (log_dev)fndatestamp$(0),rd_meter_data$,cr$
    return

rem --- Insert a blank line at LINE
insert_line: 
    let numlines=numlines+1
    for z=numlines to line+1 step -1
        let lines$[z]=lines$[z-1]
    next z
    let lines$[line]=""
return 

rem --- Delete a line at LINE
    delete_line: 
    for z=line to numlines
        let lines$[z]=lines$[z+1]
    next z
    let lines$[numlines]="",numlines=numlines-1
return 

rem --- Functions
    def fndatestamp$(q)=date(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- Exit utility
the_end: 
    run "adx_codeportexit.bbj",err=finished
finished: 
    end