rem adx - CodePort Program Conversion Utility (Error/Warnings Overlay)
rem Program adx_codeporterrs.bbj v8.0.0 12Oct2007
rem 
rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Feb2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+
rem 

    setesc std_error
    seterr std_error

rem --- Initializations
    dim errors$[999],filerefs$[999],recrefs$[999]
    let errors=0,warnings=0,filerefs=0,recrefs=0,needed=1
    let channels=0,offset=0,inserted=0,total=numlines
    let header$=" Errors, Warnings and Conversion Information "
    let header=len(header$)

rem --- Any underfined functions?
    gosub startline
    gosub function_errors

rem --- Any reference errors?
    gosub startline
    gosub reference_errors

rem --- List errors (if any)
    let line=8
    if errors then gosub list_errors
    let inserted=numlines-total

rem --- Any reset verbs removed?
    if resets then gosub list_resets
    let inserted=numlines-total

rem --- Any cross reference files used?
    gosub startline
    gosub xreffile_check
    if filerefs then gosub list_xreffiles
    let inserted=numlines-total

rem --- Any cross-reference records replace by secondary indices used?
    gosub startline
    gosub xrefrecord_check
    if recrefs then gosub list_xrefrecs
    let inserted=numlines-total

rem --- Insert list of removed IOLIST's
    gosub startline
    if iolists then gosub list_iolists
    let inserted=numlines-total

rem --- Any miscellaneous channel references that need to be listed?
    for x=1 to iolists
        if pos(": iolist"=iolists$[x])=0 then let channels=channels+1
    next x
    if channels=0 then goto remove_blanklines
    if needed then gosub header
    let line=(line+iolists)-channels

rem --- Insert list of channel references
    let rd_meter_data$="Inserting list of channel references..."
    gosub disp_meter
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- The following channel references have been identified:"
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    for x=iolists to 1 step -1
        if pos(": iolist"=iolists$[x]) then continue
        let x$=iolists$[x]
        if pos("CodePort"=iolists$[x]) then goto codeport_line
        let p=pos(" (Line"=x$),l=num(x$(p+6,4))+(numlines-channel_lines)
        let x$=x$(1,p-1)
        let x$=fnerror$(x$,l-inserted)
        codeport_line: 
        gosub insert_line
        let lines$[line]="rem --- "+x$
    next x 

rem --- Remove any extra blank lines
remove_blanklines: 
    if inserted then gosub header
    let rd_meter_data$="Removing extraneous blank lines..."
    let action=14
    gosub modify_code

rem --- Adjust line number references as needed
    let offset=numlines-total
    if offset=0 then goto done
    let rd_meter_data$="Adjusting line number references..."
    gosub disp_meter
    gosub startline
    for x=1 to startline
        let rec$=cvs(lines$[x],2)
        let p=pos("(Line "=rec$)
        if p=0 then continue
        let x$=rec$(p+6)
        let rec$=rec$(1,p-1)
        let l=num(x$(1,4))
        let l=l+offset
        let lines$[x]=rec$+"(Line "+str(l:"0000")+")"
    next x

rem --- Program converted/Write new source file
done: 
    gosub write_src

rem --- Update log file
    let rd_meter_data$="Program "+filename$+" converted to Barista standards"
    gosub disp_meter
    let errors$="No",warnings$="No"
    if errors then let errors$=str(errors)
    if warnings then let warnings$=str(warnings)
    let rd_meter_data$=str(original)+" Lines in / "+str(numlines)+" Lines Out"
    gosub disp_meter
    let rd_meter_data$=errors$+" Error(s) encountered / "+warnings$+" Warnings issued"
    gosub disp_meter
    let rd_meter_data$="New program text file is "+srcfile$
    gosub disp_meter
    rem --- Close files, delete work files and run next overlay
    gosub close_files
    gosub remove_files
    run "adx_codeportfile.bbj",err=the_end

rem --- Check for function errors
function_errors: 
    let rd_meter_data$="Checking for function errors..."
    gosub disp_meter
    for x=startline to numlines
        let rec$=cvs(lines$[x],1)
        if pos("rem"=rec$)=1 then goto next_function_error
        if pos("fnend"=rec$)=1 then goto next_function_error
        if pos("def fn"=rec$) then goto next_function_error
        next_function_check: 
        let p=pos("fn"=rec$)
        if p=0 then goto next_function_error
        let rec$=rec$(p);p=pos("("=rec$)
        if p=0 then goto next_function_error else x$=rec$(1,p-1),rec$=rec$(p)
        if pos(x$=functions$) then goto next_function_check
        let errors=errors+1,errors$[errors]=fnerror$("Undefined function "+x$,x)
        goto next_function_check
        next_function_error: 
    next x
return 

rem --- Reference errors
reference_errors: 
    let rd_meter_data$="Checking for miscellaneous errors..."
    gosub disp_meter
    for x=startline to numlines
        let rec$=lines$[x]
        let p=pos(sysref$=rec$),b=pos(".bbx"=rec$),s=pos("sys01"=rec$)
        if s=0 then goto check_admin
        let x$=rec$(s),l=len(x$),x$=x$(1,min(12,l)),errors=errors+1
        let errors$[errors]=fnerror$("v7.x sys-01 reference ["+x$+"]",x)
        check_admin: 
        if p=0 then goto check_bbx
        let x$=rec$(p),l=len(x$),x$=x$(1,min(12,l)),errors=errors+1
        let errors$[errors]=fnerror$("v7.x administrator reference ["+x$+"]",x)
        check_bbx: 
        if b=0 then goto next_reference_error
        let x$=rec$(b-7,12),errors=errors+1
        let errors$[errors]=fnerror$("BBx reference ["+x$+"]",x)
        next_reference_error: 
    next x
return 

rem --- Insert list of errors
list_errors: 
    let rd_meter_data$="Listing errors encountered during conversion..."
    gosub disp_meter
    if needed then gosub header
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- The following error(s) were encountered during the conversion:"
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    for x=1 to errors
        let rec$=errors$[x]
        let lines$[line]="rem --- "+rec$
        let line=line+1
        gosub insert_line
    next x
return 

rem --- Check for reference to cross-reference files
xreffile_check: 
    let rd_meter_data$="Checking for references to cross-reference files..."
    gosub disp_meter
    for x=startline to numlines
        let rec$=lines$[x],p=pos("_dev"=rec$)
        if p=0 then continue
        let p=p-5
        if p<1 then continue
        let x$=rec$(p,5)
        if pos(x$=xreffile$,7)=0 then continue
        let filerefs=filerefs+1,warnings=warnings+1,x$=x$(1,3)+"-"+x$(4,2)
        let filerefs$[filerefs]=fnerror$("Cross-reference file "+x$+" referenced",x-inserted)
    next x
return 

rem --- Insert list of xref files being referenced
list_xreffiles: 
    let rd_meter_data$="Listing cross-reference files being used..."
    gosub disp_meter
    if needed then gosub header
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- The following cross-reference files are being referenced:"
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    for x=1 to filerefs
        let rec$=filerefs$[x]
        let lines$[line]="rem --- "+rec$
        let line=line+1
        gosub insert_line
    next x
return 

rem --- Call adc_codeportconv.bbx to perform the requested action
modify_code: 
    gosub disp_meter
    call "adc_codeportconv.bbj",action,lines$[all],options$[all],numlines,custom_lines!
return 

rem --- Check for reference to cross-reference records
xrefrecord_check: 
    let l=len(xrefrecs$)
    let rd_meter_data$="Checking for references to cross-reference records..."
    gosub disp_meter
    for x=10 to numlines
        let rec$=lines$[x]
        for z=1 to l step 7
            let xrefrecord$=cvs(xrefrecs$(z,7),2)
            let p=pos(xrefrecord$=rec$)
            if p=0 then continue
            let recrefs=recrefs+1,warnings=warnings+1,x$=xrefrecord$,y$=xrefindx$(z,6)
            let recrefs$[recrefs]=fnerror$("Cross-reference record "+x$+" replaced by index on "+y$,x-inserted)
        next z
    next x
return 

rem --- Insert list of xref records being referenced
    list_xrefrecs: 
    let rd_meter_data$="Listing cross-reference records being used..."
    gosub disp_meter
    if needed then gosub header
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- The following cross-reference records are being referenced:"
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    for x=1 to recrefs
        let rec$=recrefs$[x]
        let lines$[line]="rem --- "+rec$
        let line=line+1
        gosub insert_line
    next x
return 

rem --- Insert list of previously removed IOLIST's
list_iolists: 
    let rd_meter_data$="Inserting list of removed IOLIST's..."
    gosub disp_meter
    if needed then gosub header
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- The following IOLIST's were removed from this program:"
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    for x=iolists to 1 step -1
        if pos(": iolist"=iolists$[x])=0 then continue
        gosub insert_line
        let lines$[line]="rem --- "+iolists$[x]
    next x    
return 

rem --- Insert list of previously removed reset verbs"
list_resets: 
    let rd_meter_data$="Inserting list of removed reset verbs..."
    gosub disp_meter
    if needed then gosub header
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- The following reset verbs were removed from this program:"
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    for x=1 to resets
        let rec$=resets$[x]
        let p=pos(" (Line"=rec$)
        let rec$=rec$(1,p-1)
        let lines$[line]="rem --- "+rec$
        let line=line+1
        gosub insert_line
    next x
    let warnings=warnings+resets
return 

rem --- Display range of LINES$ (debugging tool)
listlines: 
    for x=b to e
        print "(",x:"0000","): ",lines$[x]
    next x
    escape 
return 

rem --- Find seterr/setesc line
startline: 
    let startline=0
    for x=1 to numlines
        let rec$=lines$[x]
        if pos("seterr"=rec$) then let startline=x
        if pos("setesc"=rec$) then let startline=x
        if startline then break
    next x
return 

disp_meter:rem --- Display Progress Meter

    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",rdSysGUI!,rdForm!,rdMeterWin!,rd_meter_title$,rd_meter_total_recs,rd_meter_proc_recs,rd_meter_data$,rd_meter_action$
    print (log_dev)fndatestamp$(0),rd_meter_data$,cr$
    return

rem --- List final version of program in the v8.x source file
write_src: 
    let srcfile$=newfile$
    erase srcfile$,err=open_srcfile
    open_srcfile: 
    let src_dev=unt
    string srcfile$
    open (src_dev)srcfile$
    for x=1 to numlines
        print (src_dev)lines$[x]
    next x
    if custom_lines!.size()
        for x=0 to custom_lines!.size()-1
            print (src_dev)custom_lines!.getItem(x)
        next x
    endif

    rem --- do a final "quiet" compile - no compiled output, but list errs to .err file
    command$="bbjcpl -N -e"+$22$+srcfile$+".err"+$22$+" "+$22$+srcfile$+$22$
    a=scall(command$)
return 

rem --- Close any open channels
close_files: 
    close_txt: close (txt_dev,err=close_src)
    close_src: close (src_dev,err=close_files_exit)
    close_files_exit: 
return 

rem --- Delete work files
remove_files: 
    if keepfiles then goto remove_files_exit      
    remove_lbl: erase lblfile$,err=remove_lst
    remove_lst: erase lstfile$,err=remove_files_exit
    remove_files_exit: 
return 

rem --- Header/footer
header: 
    let line=line+1
    gosub insert_line
    if header=0 then let line=line+1; gosub insert_line
    let x$="rem "+fill(80,"-"),p=int((84-header)/2)
    if header then let x$(p,header)=header$
    let lines$[line]=x$
    if header then let line=line+1; gosub insert_line
    let header$="",header=0,needed=0
return 

rem --- Insert a blank line at LINE
insert_line: 
    let numlines=numlines+1
    for z=numlines to line+1 step -1
        let lines$[z]=lines$[z-1]
    next z
    let lines$[line]=""
return 

rem --- Functions
    def fnerror$(q$,q)=q$+" (Line "+str(q:"0000")+")"
    def fndatestamp$(q)=date(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- Exit utility
the_end: 
    run "adx_codeportexit.bbj",err=finished
finished: 
    end