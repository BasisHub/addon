rem adc - Codeport Program Conversion Utility (V8.x Initialization Code)
rem Program adc_codeportinit.bbj v8.0.0 12Oct2007
rem 
rem  +-----------------------------------------+
rem  | Addonsoftware Version 8.0.0 – 01Feb2006 |
rem  |  Copyright (C) 1981-2006 Addonsoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+
rem 
rem --- This program contains is called by the base conversion
rem --- program (adx_codeportconv.bbj). it inserts the standard
rem --- initialization code at the top of converted programs.
rem 
rem --- Action: 0=Normal program
rem ---       : 1=Called (public) program
rem ---       : 2=Replace program header and copyright
rem 

setesc std_error
seterr std_error

enter action,options$[all],lines$[all],numlines,iolists$[all],iolists

rem --- Initializations

    dim indent$(4),files$[99],templates$[99],ids$[99],files1$[99]
    let errline=0,escline=0,entline=0,files=0,templates=0,params=0,flag=0
    let filenames$=""

rem --- Initialize sysinfo and copyright values

    let sysinfo=8,copyright=3
    dim sysinfo$[sysinfo],copyright$[copyright]
    let sysinfo$[2]="rem --- Retrieve sysinfo data"
    let sysinfo$[4]=indent$+"sysinfo_template$=stbl("+$22$+"+SYSINFO_TPL"+$22$+",err=*next)"
    let sysinfo$[5]=indent$+"dim sysinfo$:sysinfo_template$"
    let sysinfo$[6]=indent$+"sysinfo$=stbl("+$22$+"+SYSINFO"+$22$+",err=*next)"
    let sysinfo$[7]=indent$+"milestone=num(stbl("+$22$+"+MILESTONE"+$22$+",err=*next),err=*next)"
    let sysinfo$[8]=indent$+"firm_id$=sysinfo.firm_id$"
    let copyright$[1]="rem --- AddonSoftware"
    let copyright$[2]="rem --- Copyright (c) 1981-2011 AddonSoftware"
    let copyright$[3]="rem --- All Rights Reserved"

rem --- branch based on action
on action goto initializations,initializations,copyright

rem --- update program header and copyright
copyright: 
    let basename$=options$[1],newfile$=options$[2],when$=options$[3]
    let utility$=options$[4],version$=options$[5],app$=cvs(basename$(1,3),8)
    let rec$=lines$[1],p=pos("-"=rec$),x$=cvs(rec$(p+1),1+2)
    if app$(1,2)="sy" then let app$(1,2)="ad"
    let rec$="rem --- "+x$,lines$[1]=rec$    
    let rec$="rem --- Program converted from "+basename$+", "+when$
    let lines$[2]=rec$
    let line=3
    gosub insert_line
    let rec$="rem --- Created by Codeport Utility ("+cvs(fndatestamp$(0),2)+")"
    let lines$[3]=rec$
    let limit=min(numlines,100)
    rem --- remove v7.x cvs information if it exists
    for x=1 to limit
        let rec$=lines$[x]
        if pos("$author"=rec$) then goto delete_rem
        if pos("$date"=rec$) then goto delete_rem
        if pos("$revision"=rec$) then goto delete_rem
    goto keep_rem
    delete_rem:
        let line=x
        gosub delete_line
    let x=x-1
    keep_rem: 
    next x
    rem --- replace copyright block
    let line=0
    for x=1 to limit
        let rec$=lines$[x]
        if pos("+-----"=rec$) then if line=0 then let line=x
    next x
    if line=0 then line=line+1
    for x=1 to copyright
        let lines$[line]=copyright$[x]
        let line=line+1
    next x
    gosub delete_line
    gosub delete_line
goto done

rem --- code is inserted after the seterr/setesc assignments
initializations: 
    for x=1 to numlines
        let rec$=cvs(lines$[x],1+2)
        if pos("seterr"=rec$)=1 then let errline=x
        if pos("setesc"=rec$)=1 then let escline=x
        if action=1 then if pos("enter"=rec$)=1 then let entline=x
        if action=0 then if errline then if escline then break
        if action=1 then if entline then break
    next x
    let line=max(max(errline,escline),entline)+1
    rem --- getting the program directory is the first thing to do
    gosub insert_line
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- Retrieve the program path"
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    let lines$[line]=indent$+"pgmdir$=stbl("+$22$+"+dir_pgm"+$22$+",err=*next)"
    rem --- insert sysinfo assignments
    let line=line+1
    for x=1 to sysinfo
        let line=line+1
        gosub insert_line
        let lines$[line]=sysinfo$[x]
    next x
    let line=line+1
    rem --- If there aren't any iolists or channel references then there
    rem --- arent't any files being used
    if iolists=0 then goto arguments
    let sorting=1,limit=iolists-1
    if limit=0 then goto param_check
    while sorting
        let sorting=0
        for x=1 to limit
            if iolists$[x](1,6)<=iolists$[x+1](1,6) then continue
            let x$=iolists$[x],iolists$[x]=iolists$[x+1],iolists$[x+1]=x$
            let sorting=1
        next x
    wend

rem --- if any parameter records are needed then ads-01 should
rem --- be the first file.
param_check: 
    for x=1 to iolists
        let rec$=iolists$[x],p=pos(":"=rec$),rec$=rec$(1,p-1)
        if rec$<>"sys01t" then if rec$(3,3)="s01" then let params=1
    next x
    
rem --- build file and template lists from passed iolists
    for x=1 to iolists
        let rec$=iolists$[x],p=pos(":"=rec$),rec$=pad(rec$(1,p-1),6)
        p=pos("sys"=rec$);if p then goto next_iolist
        if rec$(3,3)="s01" then
            x$=rec$(1,3)+"-"+rec$(4,3)
            gosub template_only
        else 
            x$=rec$(1,3)+"-"+rec$(4,2)
        endif
        p=pos(x$=filenames$)
        if p then if rec$(6,1)<>"a" then x$=rec$(1,3)+"-"+rec$(4,3)
        let filenames$=filenames$+x$,files=files+1,files$[files]=x$,files1$[files]=x$
        
        let chan=unt;open(chan)stbl("+CODEPORT_FILES")+"file_alias"
        read_xref_file:
            read(chan,end=read_complete)dat$;if dat$="" goto read_xref_file
            if len(files$[files])=6 then 
                if cvs(cvs(dat$(1,25),2),8)=rec$(1,3)+"-"+rec$(4,3) then flag=1;goto read_complete
            else
                if cvs(cvs(dat$(1,25),2),8)=files$[files] then flag=1;goto read_complete
            endif

            goto read_xref_file
        read_complete:
        if flag=1 then if dat$(44,1)="Y" then files1$[files]=cvs(cvs(dat$(27,16),2),8)    
        if flag=1 then ids$[files]=cvs(dat$(27,16),2)
        next_iolist: 
        flag=0
        close(chan,err=*next)
    next x
    let files$=str(files)
         
rem --- Generate file opens
    gosub insert_line
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- Open/Lock files"
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    let lines$[line]=indent$+"files="+files$+",begfile=1,endfile=files"
    let line=line+1
    gosub insert_line
    let lines$[line]=indent$+"dim files$[files],options$[files],ids$[files],templates$[files],channels[files]"

rem --- Build arrays for opening files
    for x=1 to files
        let line=line+1
        gosub insert_line
        let lines$[line]=indent$+"files$["+str(x)+"]="+$22$+files1$[x]+$22$+",ids$["+str(x)+"]="+$22$+ids$[x]+$22$
    next x

rem --- Insert open call
    let line=line+1
    gosub insert_line
    let lines$[line]=indent$+"call pgmdir$+"+$22$+"adc_fileopen.aon"+$22$+",action,begfile,endfile,files$[all],options$[all],"
    let line=line+1
    gosub insert_line
    let lines$[line]=":"+indent$(2)+fill(32)+"ids$[all],templates$[all],channels[all],batch,status"
    let line=line+1
    gosub insert_line
    let lines$[line]=indent$+"if status goto std_exit"

rem --- Set local channel variables
    for x=1 to files
        let rec$=files$[x]
        if len(rec$)=7 then rec$=rec$(1,3)+rec$(5,3) else rec$=rec$(1,3)+rec$(5,2)
        line=line+1;gosub insert_line
        let lines$[line]=indent$+rec$+"_dev=channels["+str(x)+"]"
    next x

rem --- Dimension templates
    if files=0 or (files=1 and files$[1]="ads-01") then goto other_templates
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- Dimension string templates"
    let rec$="",z=0
    for x=1 to files
        let filename$=files$[x]
        if len(filename$)=7 then filename$=filename$(1,3)+filename$(5,3)+"$" else filename$=filename$(1,3)+filename$(5,2)+"a$"
        if filename$<>"ads01a$" then let z=z+1,rec$=rec$+filename$+":templates$["+str(x)+"],"
        if z then if mod(z,3)=0 then let rec$=rec$+"^"
    next x
    rem --- Insert the line
    gosub insert_templates

rem --- Retrieve other templates if necessary
    other_templates: 
    if templates=0 then goto arguments
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
 
rem --- assign form values to local variables
arguments: 
    let arguments=num(options$[6],err=parameters)
    if arguments=0 then goto parameters
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- Assign form input values to local variables"
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    for x=1 to arguments
        let line=line+1
        gosub insert_line
        let lines$[line]=indent$+"value_"+str(x:"00")+"$=Option!.getOptionData("+$22$+"form_value_"+str(x:"00")+$22$+")"
    next x

rem --- Read parameters if necessary
parameters: 
    if templates=0 then goto finished
    let line=line+1
    gosub insert_line
    let line=line+1
    gosub insert_line
    let lines$[line]="rem --- Retrieve parameter records"
    let line=line+1
    gosub insert_line
    rem --- Insert find statements for parameter records
    for x=1 to templates
        let rec$=templates$[x]
        if pos("s01"=rec$)<>3 then continue
        let line=line+1
        gosub insert_line
        let lines$[line]=indent$+rec$+"_key$=firm_id$+"+$22$+cvs(rec$(1,2),4)+"00"+$22$
        let line=line+1
        gosub insert_line
        let lines$[line]=indent$+"find record ("+templates$[x]+"_dev,key="+rec$+"_key$,err=std_missing_params) "+templates$[x]+"$"
    next x

rem --- Insert a blank line following everything
finished: 
    let line=line+1
    gosub insert_line

rem --- All done
done: 
    goto the_end

rem --- Insert template assignment statement(s)
insert_templates: 
    let l=len(rec$),rec$=rec$(1,l-1),l=len(rec$)
    if rec$(l,1)="^" then let l=l-1,rec$=rec$(1,l)
    if rec$(l,1)="," then let l=l-1,rec$=rec$(1,l)
    let x$=indent$+"dim ",line=line+1
    gosub insert_line
    while rec$<>""
        let p=pos("^"=rec$)
        if p=0 then let p=len(rec$)+1
        let line=line+1,p=min(len(rec$),p),l=p
        if rec$(p,1)="^" then let l=l-1
        gosub insert_line
        let lines$[line]=x$+rec$(1,l)
        let x$=":"+indent$(2)+fill(4),rec$=rec$(p+1)
        if pos("^"=rec$)=1 then let rec$=rec$(2)
    wend
return 

rem --- Display range of lines$ (debugging tool)
listlines: 
    for x=b to e
        print "(",x:"0000","): ",lines$[x]
    next x
    escape 
return 

rem --- Insert a blank line at line
insert_line: 
    let numlines=numlines+1
    for z=numlines to line+1 step -1
        let lines$[z]=lines$[z-1]
    next z
    let lines$[line]=""
return 

rem --- Delete a line at line
delete_line: 
    for z=line to numlines
        let lines$[z]=lines$[z+1]
    next z
    let lines$[numlines]="",numlines=numlines-1
return 

rem --- Store to templates$[]
template_only: 
    let templates=templates+1,templates$[templates]=rec$
return

rem --- functions
    def fndatestamp$(q)=date(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- exit utility
the_end: 
    exit 
end
