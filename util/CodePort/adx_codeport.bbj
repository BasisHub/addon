rem adx - CodePort Program Conversion Utility (Initialization Overlay)
rem Program adx_codeport.bbj v8.0.0 12Oct2007
rem  
rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Feb2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+
rem  
rem --- This overlay performs the initializations for the program
rem --- conversion process and then runs adx_codeportfile to get
rem --- the name of the next source program to convert.
rem 

    setesc std_error
    seterr std_error
    
rem --- Retrieve user selections from Option Entry form

    source_version=num(option!.getOptionData("ADDON_VERSION"))
    overwrite_ok=pos(option!.getOptionData("PROMPT_OVRWRT")="NY")-1
    source_dir$=option!.getOptionData("SOURCE_DIR")
    outputdir$=option!.getOptionData("TARGET_DIR")
    arguments$=option!.getOptionData("OPTION_ARGS")
    source_ext$=option!.getOptionData("SOURCE_EXT")
    
    srcFiles!=callpoint!.getDevObject("srcFiles");rem srcFiles! built in the ASVA of the option entry form - it's the list of files selected for porting
    
    keepfiles=0;rem this used to be an option "keep temporary work files?" -- no one ever says "yes," so forcing to "no" and no longer asking
    replace_includes=1;rem this used to be an option "replace #includes with actual code?" -- no one ever says "no," so forcing to "yes" and no longer asking
    
    tmp_dir$=source_dir$
    gosub standardize_path
    source_dir$=tmp_dir$
    tmp_dir$=outputdir$
    gosub standardize_path
    outputdir$=tmp_dir$
    
rem --- Retrieve directory paths from the config file
    let logdir$=fnglobal$("+CODEPORT_LOGS","")
    let filedir$=fnglobal$("+CODEPORT_FILES","")
    let pgmdir$=fnglobal$("+DIR_PGM","")
    let libdir$=fnglobal$("+CODEPORT_LIB","")
    
    mkdir logdir$,err=*next

rem --- Create and open log file
    
    let logfile$=logdir$+"CodePort_"+DATE(0:"%Mz%Dz%Yz")+"_"+DATE(0:"%Hz%mz")+".txt"
    erase logfile$,err=create_logfile
    create_logfile: 
    string logfile$
    let log_dev=unt
    open (log_dev)logfile$
    
rem --- set up/init progress meter
    rd_meter_data$="Converting version "+str(source_version)
    rd_meter_total_recs=srcFiles!.size()
    rd_meter_action$="WIN-LST-OK"
    rd_meter_title$="CodePort"
    gosub disp_meter
    
    if keepfiles<1 xwk$="Not retaining" else xwk$="Retaining"
    rd_meter_data$=xwk$+" temporary work files"
    rd_meter_action$="LST"
    gosub disp_meter
    
    if replace_includes<1 xwk$="Not replacing" else xwk$="Replacing"
    rd_meter_data$=xwk$+" #includes with actual code"
    rd_meter_action$="LST"
    gosub disp_meter 

    if overwrite_ok<1 xwk$="Do not overwrite" else xwk$="Overwrite"
    rd_meter_data$=xwk$+" without prompting"
    rd_meter_action$="LST"
    gosub disp_meter    

rem --- Initializations

    dim oldcode$[999],newcode$[999],options$[10]
    let sysref$=$22$+"sy",cr$=$0d$
    let fornext=4,whilewend=6
    let tmp$=".tmp",txt$=".txt",src$=".src",lst$=".lst",lbl$=".lbl",bbx$=".bbx"

rem --- Replacements for obsolete xref files/records
rem --- xreffile$ = List of xref files
rem --- xrefrecs$ = List of xref records replaced by secondary indices
rem --- xrefindx$ = List of corresponding secondary index files
    let xreffile$="",xrefrecs$="",xrefindx$=""
    let xreffile$=xreffile$+"apm-04 apt-03 arm-04 bmm-04 bmm-06 glm-04 "
    let xreffile$=xreffile$+"glt-14 ivm-03 ivm-08 ivm-24 ope-51 ope-61 "
    let xreffile$=xreffile$+"opt-51 opt-61 poe-31 poe-32 poe-33 poe-34 "
    let xreffile$=xreffile$+"poe-41 poe-42 poe-43 poe-44 poe-52 poe-53 "
    let xreffile$=xreffile$+"poe-54 pot-35 prm-03 sam-21 sfe-03 sfm-03 "
    let xrefrecs$=xrefrecs$+"apm-04Aapm-04Bapt-03Aapt-03Bapt-03Carm-04A"
    let xrefrecs$=xrefrecs$+"arm-04Barm-04Carm-04Earm-04Farm-04Garm-04H"
    let xrefrecs$=xrefrecs$+"arm-04Jarm-04Karm-04Larm-04Marm-04Narm-04T"
    let xrefrecs$=xrefrecs$+"bmm-04Abmm-06Aglm-04Aglt-14Aivm-03Aivm-03B"
    let xrefrecs$=xrefrecs$+"ivm-03Civm-03Divm-03Fivm-03Givm-03Hivm-03I"
    let xrefrecs$=xrefrecs$+"ivm-03Jivm-03Tivm-03Uivm-08Aivm-24Aope-51A"
    let xrefrecs$=xrefrecs$+"ope-61Apoe-31Apoe-32Apoe-33A"
    let xrefrecs$=xrefrecs$+"poe-34Apoe-41Apoe-42Apoe-43Apoe-44Apoe-52A"
    let xrefrecs$=xrefrecs$+"poe-53Apoe-54Apot-35Aprm-03Aprm-03Bsam-21A"
    let xrefindx$=xrefindx$+"apm-01 apm-01 apt-01 apt-01 apt-01 arm-01 "
    let xrefindx$=xrefindx$+"arm-02 arm-02 arm-01 arm-02 arm-02 arm-02 "
    let xrefindx$=xrefindx$+"arm-02 arm-02 arm-01 arm-01 arm-01 arm-02 "
    let xrefindx$=xrefindx$+"bmm-02 bmm-03 glm-01 glt-04 ivm-01 ivm-02 "
    let xrefindx$=xrefindx$+"ivm-02 ivm-01 ivm-02 ivm-02 ivm-01 ivm-01 "
    let xrefindx$=xrefindx$+"ivm-01 ivm-01 ivm-01 ivm-07 ivm-14 ope-01 "
    let xrefindx$=xrefindx$+"ope-11 opt-01 opt-01 poe-01 poe-02 poe-03 "
    let xrefindx$=xrefindx$+"poe-04 poe-11 poe-12 poe-13 poe-14 poe-02 "
    let xrefindx$=xrefindx$+"poe-03 poe-04 pot-15 prm-01 prm-01 sam-01 "
    let xrefindx$=xrefindx$+"sfe-01 sfe-01 sfe-01 sfm-01 sym-19 sym-49 "
    gosub iolist_format

rem --- Open replacements.ini file
open_replacements:
    if source_version=6 then let repfile$=filedir$+"replacements_oldport.ini"
    if source_version=7 then let repfile$=filedir$+"replacements.ini"
    let repfile=0
    let rep_dev=unt
    open (rep_dev,err=missing_replacements)repfile$
    let repfile=1
rem --- Load code replacement table
load_replacements: 
    if repfile=0 then goto missing_replacements
    rd_meter_data$="Loading code replacement table..."
    rd_meter_action$="LST"
    gosub disp_meter 
next_code_replacement: 
    read (rep_dev,end=load_replacements_exit)rec$
    let rec$=cvs(rec$,2)
    if rec$="" or pos("#"=rec$)=1 then goto next_code_replacement
    let p=pos("|"=rec$)
    if p=0 then goto next_code_replacement
    let x$=cvs(rec$(1,p-1),1+2),y$=cvs(rec$(p+1),1+2)
    let replacements=replacements+1
    let oldcode$[replacements]=x$,newcode$[replacements]=y$
    if pos("fn"=oldcode$[replacements])=1 then let functions$=functions$+newcode$[replacements]
    goto next_code_replacement

rem --- Done loading replacements
load_replacements_exit: 
    rd_meter_data$="Done loading code replacement table..."
    rd_meter_action$="LST"
    gosub disp_meter 
    if source_version=6 then goto next_overlay
    let functions$=functions$+"fnitem$fnglobal(fnglobal$fnstr_pos("
    let functions$=functions$+"fnget_table$fnget_rec_data$fnget_fld_data$"
    goto next_overlay

rem --- Missing code replacement file
    missing_replacements: 
    rd_meter_data$="Missing replacements.ini file "+$22$+repfile$+$22$
    rd_meter_action$="LST"
    gosub disp_meter
    rd_meter_data$="NO code replacements will be performed"
    rd_meter_action$="LST"
    gosub disp_meter

rem --- Run next overlay
next_overlay: 

    filenum=-1
    pgmdir1$=pgmdir$
    run "adx_codeportfile.bbj",err=the_end

rem --- Convert xref files/records to IOLIST format
iolist_format: 
    let l=len(xrefrecs$)
    for x=1 to l step 7
        let x$=xrefrecs$(x,7)
        let x$=x$(1,3)+x$(5,2)+cvs(x$(7,1),8)+" "
        let xrefrecs$(x,7)=x$
    next x
    let l=len(xreffile$)
    for x=1 to l step 7
        let x$=xreffile$(x,7)
        let x$=x$(1,3)+x$(5,2)+"  "
        let xreffile$(x,7)=x$
    next x
return 

standardize_path:
    if pos(tmp_dir$(len(tmp_dir$),1)="\/")=0 then tmp_dir$=tmp_dir$+"/"
    while pos("\"=tmp_dir$)
        tmp_dir$(pos("\"=tmp_dir$),1)="/"    
    wend


return

disp_meter:rem --- Display Progress Meter

    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",rdSysGUI!,rdForm!,rdMeterWin!,rd_meter_title$,rd_meter_total_recs,rd_meter_proc_recs,rd_meter_data$,rd_meter_action$
    print (log_dev)fndatestamp$(0),rd_meter_data$,cr$
    return

rem --- Functions
    def fndatestamp$(q)=DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "

rem --- Return string value of passed STBL variable
    def fnglobal$(q$,q1$)
        let q1$=stbl(q$,err=globalstr_exit)
        globalstr_exit: 
        return q1$
    fnend
    
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src    

rem --- Exit utility
the_end: 
    run "adx_codeportexit.bbj",err=finished
finished: 
    end