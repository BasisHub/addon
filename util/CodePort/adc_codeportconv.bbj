rem adc - Codeport Program Conversion Utility (V8.x Conversion Code)
rem Program adc_codeportconv.bbj v8.0.0 12Oct2007
rem 
rem  +-----------------------------------------+
rem  | Addonsoftware Version 8.0.0 – 01Feb2006 |
rem  |  Copyright (C) 1981-2006 Addonsoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+
rem 
rem --- This program contains procedures used by the base conversion
rem --- conversion program (adx_codeportconv.bbx).
rem 
rem --- Action codes 0, 1 and 5 are obsolete and no longer used
rem 
rem 

enter action,lines$[all],options$[all],numlines

rem --- Branch to appropriate subroutine based on action
on action gosub the_end,the_end,std_includes,replace_functions,format_comments,the_end,move_labels,let_statements,indent_code,iolist_references,remove_iolists,combine_labels,remove_thens,final_indenting,remove_blanklines
goto the_end

rem --- Replace standard sections with temporary #include's
std_includes: 
    let line=0,std_input=0,std_missing_params=1,basename$=options$[1]
    for x=1 to numlines
        let rec$=lines$[x]
        if pos("flow_initializations:"=rec$) then let line=x
        if pos("std_missing_params:"=rec$) then let std_missing_params=1
        if pos("std_error:"=rec$) then if line=0 then let line=x
    next x
    for x=line to numlines
        let lines$[x]=""
    next x
    let z=1
    if std_input then let line=line+1,lines$[line]="#include std_input.src",z=2
    let line=line+z,lines$[line]="#include std_error.src",z=2
    if std_missing_params then let line=line+2,lines$[line]="#include std_missing_params.src"
    let exit_include$="#include std_end.src"
    if basename$(3,1)="c" then let exit_include$="#include std_exit.src"
    let line=line+2,lines$[line]=exit_include$
    let line=line+2,lines$[line]="end"
    let numlines=line
return
 
rem --- Remove any existing functions
replace_functions: 
    let functions=0,last_function=0
    for x=1 to numlines
        let rec$=cvs(lines$[x],8)
        if pos("--- function"=rec$) then let functions=x
    next x
    if functions=0 then goto replace_functions_exit
    for x=functions to numlines
        let rec$=cvs(lines$[x],8)
        if pos("--- iol"=rec$) then let last_function=x-1
        if last_function=0 then if pos("#include"=rec$) then let last_function=x-1
    next x
    let line=functions
    for x=functions to last_function
        gosub delete_line
    next x
    let line=functions
    gosub insert_line
    gosub insert_line
    let lines$[line+1]="#include std_functions.src"
    replace_functions_exit: 
return 

rem --- Formatting comments
format_comments: 
    for x=1 to numlines
        let rec$=cvs(lines$[x],2),p=pos(": rem"=rec$),line=x+1
        if p=0 then goto next_labelled_rem
        gosub insert_line
        let lines$[x]=rec$(1,p),lines$[x+1]=rec$(p+2)
        next_labelled_rem: 
    next x
    rem --- Standardize comment format
    for x=1 to numlines
        let rec$=cvs(lines$[x],2)
        if pos("rem"=rec$)<>1 then goto next_rem
        if pos("remove"=cvs(rec$,1))=1 then goto next_rem
        if rec$="rem" then let lines$[x]=""; goto next_rem
        if rec$(5,1)=$22$ then let rec$="rem "+cvs(rec$(6),1)
        let l=len(rec$)
        if rec$(l)=$22$ then let rec$=rec$(1,l-1)
        if x>13 and l>4 then if rec$(5,1)<>"-" then let rec$=rec$(1,4)+"--- "+cvs(rec$(5),1)
        let lines$[x]=rec$
        next_rem: 
    next x

    rem --- Insert a blank line before comment blocks (or single comment)
    let insert=1
    for x=3 to numlines
        let rec$=lines$[x]
        if cvs(rec$,2)="" then let insert=0; goto next_comment
        if pos("remove"=rec$)=1 then let insert=0; goto next_comment
        if pos("rem"=rec$)<>1 then let insert=1; goto next_comment
        if insert=0 then goto next_comment
        let line=x
        gosub insert_line
        let x=x+1,insert=0
        next_comment: 
    next x

    rem --- Move label after next comment if possible
    rem --- Change label:           to rem --- Comment
    rem ---        rem --- Comment     label:
    let label$="",label=0
    for x=1 to numlines
        let rec$=cvs(lines$[x],2),l=len(rec$)
        if pos("rem"=rec$)<>1 then goto label_check
        if label$="" then goto label_check
        let line=label
        gosub delete_line
        let x=x-1,line=x+1
        gosub insert_line
        let x=line,lines$[x]=label$,label$="",label=0
        goto next_rem_line
        label_check: 
            if rec$="" then goto next_rem_line
            let label$="",label=0
            if rec$(l,1)<>":" then goto next_rem_line
            if pos("rem"=rec$)=1 then goto next_rem_line
            let label$=rec$,label=x
        next_rem_line: 
    next x

    rem --- Insert a blank line after comment blocks (or a single comment)
    for x=2 to numlines
        let rec$=lines$[x]
        if pos("rem"=rec$)<>1 then goto next_rem_check
        if pos("rem"=lines$[x+1])=1 then goto next_rem_check
        let line=x+1
        if cvs(lines$[line],2)="" then goto next_rem_check
        gosub insert_line
        let x=line
        next_rem_check: 
    next x
return 

rem --- Move labels to separate line (except rem's)
rem --- Change "label: statement" to "label:
rem ---                               statement"
move_labels: 
    for x=1 to numlines
        let rec$=cvs(lines$[x],1+2),p=pos(": "=rec$)
        if rec$="" then goto next_move
        if p=0 then goto next_move
        if pos(": rem"=rec$) then goto next_move
        if pos("rem"=rec$)=1 then goto next_move
        if pos(" "=rec$)<p then goto next_move
        if pos(": iolist"=rec$) then goto next_move
        let label$=rec$(1,p),x$=cvs(rec$(p+1),1),line=x+1
        if rec$="" then goto next_move
        gosub insert_line
        let lines$[x]=label$,lines$[x+1]=x$
        next_move: 
    next x
return 

rem --- Process simple LET statements
let_statements: 
    for x=1 to numlines
        let rec$=cvs(lines$[x],2),quoted=0
        if pos("let "=rec$)<>1 then goto next_let_check
        let rec$=rec$(5)
        if pos(","=rec$)=0 then goto next_let_check
        let l=len(rec$),more=1
        while more
            let l=len(rec$)
            for z=1 to l
                let char$=rec$(z,1),prev$=""
                if z>1 then let prev$=rec$(z-1,1)
                if quoted then if pos(char$=$22$+"])") then let quoted=max(quoted-1,0); goto comma_check
                if pos(char$=$22$+"([") then let quoted=quoted+1
                comma_check: 
                    if char$<>"," then goto next_let_char
                        if quoted then goto next_let_char
                        let lines$[x]=rec$(1,z-1),rec$=rec$(z+1)
                        let line=x+1
                        gosub insert_line
                        let x=line
                        exitto char_wend
                        next_let_char: 
            next z
            let more=0
        char_wend: 
        wend
        if quoted then goto next_let_check
        let lines$[x]=rec$
        next_let_check: 
            let lines$[x]=rec$
    next x
return 

rem --- Indent code where necessary
indent_code: 
    let fornext=4,whilewend=6
    for x=1 to numlines
        let rec$=lines$[x],x$=cvs(rec$,1+2),use=1
        if pos("for "=x$)=1 then let rec$=fill(indent)+rec$,indent=indent+fornext;if pos("; next "=x$)<>0 then let indent=indent-fornext fi; goto next_indent
        if pos("next "=x$)=1 then let indent=indent-fornext
        if pos(": next"=x$) then let indent=indent-fornext
        if pos("while "=x$)=1 then let rec$=fill(indent)+rec$,indent=indent+whilewend; goto next_indent
        if pos("wend"=x$)=1 then let indent=indent-whilewend
        rem 
        let indent=max(indent,0),rec$=fill(indent)+rec$
        next_indent: 
            let lines$[x]=rec$
    next x
return 

rem --- Replace IOLIST's with record/template processing
iolist_references: 
    for x=1 to numlines
        let rec$=lines$[x],p=pos("iol="=rec$)
        if p=0 then goto next_iolist_line
        let template$=rec$(p+4),l=len(template$),z=pos(";"=template$),rest$=""
        if z then let l=z-1,rest$=template$(z)
        let template$=template$(1,l)+"$"
        let rec$=rec$(1,p-1)+" "+template$+rest$
        for z=p to 1 step -1
            if pos("read ("=rec$(z))=1 then let l=4; goto iolist_record
            if pos("find ("=rec$(z))=1 then let l=4; goto iolist_record
            if pos("write ("=rec$(z))=1 then let l=5; goto iolist_record
            if pos("extract ("=rec$(z))=1 then let l=7; goto iolist_record
            goto next_iolist_char
            iolist_record: 
                let rec$=rec$(1,z+l)+"record "+rec$(z+l+1)
                let lines$[x]=rec$
        next_iolist_char: 
        next z
    next_iolist_line: 
    next x
return 

rem --- Remove IOLOSI lines
remove_iolists: 
    for x=1 to numlines
        remove_iolist_loop: 
        let rec$=cvs(lines$[x],8)
        if pos("--- iolist"=rec$) then let line=x; gosub delete_line; gosub delete_line; goto remove_iolist_loop
        if pos(": iolist"=rec$) then let line=x; gosub delete_line; goto remove_iolist_loop
    next x
return 
 
rem --- Combine labels with previous comment where possible
combine_labels: 
    for x=1 to numlines
        let rec$=cvs(lines$[x],1)
        if pos("rem"=rec$)<>1 then goto next_paragraph
        let x$=cvs(lines$[x+2],2)
        if x$="" then goto next_paragraph
        if pos("rem"=x$)=1 then goto next_paragraph
        if x$(len(x$),1)<>":" then goto next_paragraph
        let rec$=x$+" "+rec$
        let lines$[x]=rec$
        let line=x+2
        gosub delete_line
    next_paragraph: 
    next x
return 
 
rem --- Remove the then clause from if statements
remove_thens: 
    for x=1 to numlines
        let rec$=lines$[x],x$=rec$,l=len(rec$)
        if pos("if "=rec$)=0 then goto next_ifthen_line
        if pos(" then "=rec$)=0 then goto next_ifthen_line
        let quoted=0
        for z=1 to l
            if quoted then if x$(z,1)<>$22$ then let x$(z,1)=" "
            if quoted then if x$(z,1)=$22$ then let quoted=0; goto next_ifthen_char
            if quoted=0 then if x$(z,1)=$22$ then let quoted=1
        next_ifthen_char: 
        next z
        next_then_check: 
            let p=pos(" then "=x$),r=1
            if p=0 then goto else_check
            let rec$=rec$(1,p-1)+rec$(p+5),x$=x$(1,p-1)+x$(p+5),p=p+1
            if rec$(p,4)="let " then let rec$=rec$(1,p-1)+rec$(p+4),x$=x$(1,p-1)+x$(p+4)
            goto next_then_check
        else_check: 
            let p=pos(" else let "=x$)
            if p=0 then goto next_ifthen_line
            let p=p+6
            if rec$(p,4)="let " then let rec$=rec$(1,p-1)+rec$(p+4),x$=x$(1,p-1)+x$(p+4)
        goto else_check
        next_ifthen_line: 
            let lines$[x]=rec$
    next x
return 

rem --- Perform final formatting
final_indenting: 
    for x=1 to numlines
        let rec$=cvs(lines$[x],2)
        if rec$="" then goto next_final
        if rec$(len(rec$),1)=":" then goto next_final
        if pos(": "=rec$) then if pos(": "+$22$=rec$)=0 then goto next_final
        if pos("rem"=rec$)=1 and pos("remove"=rec$)<>1 then goto next_final
        if pos("#include"=rec$)=1 then goto next_final
        let lines$[x]=fill(4)+lines$[x]
    next_final: 
    next x
return 

rem --- Remove any extra blank lines
remove_blanklines: 
    for x=2 to numlines
        if x>numlines then break
        blank_line_loop: 
        let rec$=cvs(lines$[x],2),x$=cvs(lines$[x-1],2)
        if rec$<>"" then goto next_blank_line
        if x$<>"" then goto next_blank_line
        let line=x
        gosub delete_line
        goto blank_line_loop
    next_blank_line: 
    next x
return 

rem --- Display range of lines$ (debugging tool)
    listlines: 
    for x=b to e
        print "(",x:"","): ",lines$[x]
    next x
    escape 
return 
 
rem --- Insert a blank line at line
insert_line: 
    let numlines=numlines+1
    for z=numlines to line+1 step -1
        let lines$[z]=lines$[z-1]
    next z
    let lines$[line]=""
return 

rem --- Delete a line at line
delete_line: 
    if line>numlines then return 
    for z=line to numlines
        let lines$[z]=lines$[z+1]
    next z
    let lines$[numlines]="",numlines=numlines-1
return
 
rem --- Functions
def fndatestamp$(q)=date(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "

rem --- Exit utility
the_end:   
    exit 
end
