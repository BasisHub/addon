
DataPort Notes

IMPORTANT:  Before running DataPort against your Addon version 6/7 data, make sure to run and update all registers, and invoice all Sales Orders for dropship Purchase Orders that have been received.

Running DataPort

1) Before beginning
	a. Make sure your data dictionary files from version 6/7 are up-to-date.  Dataport will only port files/fields referenced in the dictionary.
	b. Make the following changes to the Data Dictionary:  
		i. in file GLT-06, remove the 2 fields after the Description in 1$ (POSTING PER and POSTING YEAR), and change Description to have a Y for the separator.
		ii. in file POM-02, change the final field GL EXP ACCT to not have a separator, and add a new field, GL PPV ACCT, to the end of the record, with a separator.
		iii. in files WOT-31 and WOT-33 in v6, sft-31 and sft-33 in v7, change the element RESERVED_STR immediately after the element PO_LINE_NUMBER to the element DESCRIPTION and change the Multiplier from 12 to 0.
        iv. create a data name called IV UNIT COST with the same attributes as the UNIT COST data name, then, in file WOE-22, change the second UNIT COST field (the one before the SCRAP FACTOR) to be IV UNIT COST instead.
	c. Ensure that you have a target (destination) directory that contains no data files.
	d. Ensure that the source directory has all of the files you want to port. It MUST contain the data dictionary files (ddm) as well.
	e. The separate file for temporary vendors has been discontinued. All vendors reside in the Vendor Master file, and you can designate a temporary vendor by checking the appropriate box in the form. In order to facilitate this, all records in the system that have TEMP as the Vendor Number will be consolidated into 1 vendor. That vendor number needs to be defined in the barista.cfg file by setting +DP_TEMP_VEND= and then the vendor number to which TEMP's should be converted.  If you anticipate updating/re-installing/synching Barista and re-running DataPort, add this stbl to your Addon.syn file as well, so it syncs back into barista.cfg.  
2) Launch the Barista version of AddonSoftware.
3) Select the AddonSoftware Administration menu, then Utilities, then DataPort.
4) Select the proper version (6 or 7).
5) Search for or enter the proper Source Directory. The field will remain pink until it finds a directory that has the ddm files in it.
6) Search for or enter the proper Target Directory. The field will remain pink until it finds a valid directory.
7) Once the proper fields have been selected, the Scan button will activate. When clicked, the grid will populate with the source files that may be converted.
8) A Ctrl-A will select all of the files, and then a space bar will select all of the check boxes, or you can click on the checkbox on each file you want to port.
9) Once selected, click on Process. You will be prompted for whether you want to port the selected files. Once you select Yes, the process will begin. 

Notes

1) If during the process, it finds a file already exists in the Target Directory with the same name, it will prompt you with that information and ask if you want to overwrite the file.
2) If during the process, it finds a blank value in a field that is in a primary key, and the field is not listed in the field_translations file (see 4i below), it will display a message at the end of the dataport, and all such fields will be displayed in the error file.
3) If during the process, it finds an invalid date, it will print a record to the log specifying which file, which field, and what the converted value would have been. It then blanks out the date and writes it to the table.
4) If you have custom files or fields that are being converted from a prior version you must:
	a. Ensure that the old version’s dictionary defines those files/fields.
	b. Ensure that the version 8 dictionary has those fields and files defined.
	c. If the file names between the old version and version 8 differ, you must make an entry in the file named file_alias, found in /apps/aon/util/DataPort/files. Follow the format of the existing records found there.
	d. If there is a new record in sys-01, you will need to make an entry in the file named file_normalization (see 4c above for location). Make sure that the 4 characters of the key immediately following the firm ID is in the first portion of the entry, and the file name in the old dictionary is in the second portion.
	e. For new files, you will need to make an entry in the file named file_xref (see 4c above for location). The first column is the file name plus the record ID from the old file, and the right column is the table name used in version 8. It is important to note that the 7th character of the left hand column is case sensitive because a Record ID for a Dictionary definition can be upper or lower case.
	f. If the old field name for a new field differs from the version 8 field in a specific file, you must make an entry in the file named field_file_xref (see 4c above for location). The first column is the version 8 file name, the second column is the field name in the "from" version’s dictionary, and the third column is the field name in version 8.
	g. If the old field name for a new field differs from the version 8 field throughout the system, you must make an entry in the file named field_name_xref (see 4c above for location). The first column is the field name from the old version and the second column is the field name in version 8.
	h. If you need to write custom code to deal with customer specific conversion needs, you may write a public with an ENTER statement and no arguments, and an EXIT at the end. All variables used in the DataPort program will then be available to you in that public. In the barista.cfg file, add a line that says SET +CUSTOM_DP_PROG=yourpublic. If that public is available when you run DataPort, it will ADDR that program for efficiency, and make the call after each record has been read from the source directory. Common variables you will want to be aware of are: value$ (holds the data in the field coming in), old_fieldlist.name$[field] (the variable name from the dictionary of the source data), and datafile$ (the source datafile name).
	i. If you have fields, such as blank codes or lowercase codes, that you would like to translate to a different value during DataPort, make an entry in the field_translations file (see 4c above for location).  Follow the format of existing records found there. Blank codes are strongly discouraged in the Barista version, and lowercase codes may not work correctly when performing SQL queries.
5) The Internal Sequence Number is an Element Type that is used to facilitate one-many-many relationships, such as the relationship from a header to one or more detail lines to one or more detail Lot/Serial lines. If you have custom files that make use of this type of structure, you will need to make entries in the internal_seq file (see 4c above for location). The first field is the file alias, the second column is the name of the (line number) element from the source table, and the third column is the Data Element name in your version 8 table. DataPort will copy the contents of the line number element into the Data Element name in the version 8 table. You will need to do this to both the line number table and to the Lot Serial table to retain the unique link during the upgrade.
6) If a DOM is encountered when writing to a destination file, it will write information about that duplication in the error file and display a warning at the end of the dataport run. The duplicate record will not be written.
7) If processing one of the PO detail files (poe-11, 12, 13, 14 or pot-14), DataPort will move the customer number, order number and ship-to (i.e., dropship info) up to the corresponding PO header file.  In addition, DataPort will attempt to populate the dropship name/address fields in the PO header as follows:  
	a. if the dropship ship-to was empty, use the address from the Customer Master file (arm-01)
	b. if the dropship ship-to was <99, use the Customer Ship-to file (arm-03)
	c. if the dropship ship-to was 99, look in the Manual Ship-to for the order (ope-31); if not found, check the Invoice History Manual Ship-to (opt-31)
Note:  in order for this PO conversion process to work correctly, you must select both the PO header and detail files for conversion.  In addition, you should either select the required address files for conversion (arm-01, arm-03, ope-31, opt-31), or make sure they have already been converted and exist in the destination directory.
	
After the Dataport process is complete

1) Copy/paste the files listed below from a standard set of demo data to the target/destination directory, replacing any files that already exist.
	a. adm-09
	b. adm-19
	c. adm-39
	d. adm-49
	e. glm-06
	f. glm-18
	g. glw-11
	h. adm_rptctl
	i. adm_userdefaults
2) Manually correct AP and AR Report Parameters for City, State and Zip.
3) If porting from version 6, set up the A/P 1099 year in Parameter Maintenance.
4) Check masks via Barista Administration ==> Maintenance ==> Input/Display Masks
	a. G/L ID Masks will have pound signs (#) converted to zeroes.
	b. A/P, A/R, and P/R masks will have zeroes converted to capital U’s. If you want to use only numeric ID’s, you will need to change those parameters.
5) Create the vendor corresponding to the +DP_TEMP_VEND stbl. Don't forget to set the Temporary flag to Y. If this stbl is not set up prior to running DataPort, and there is a TEMP vendor found in the data, there will be a message on the screen and in the error file to that effect, and none of those records will be ported.
6) Run the GL Chart of Accounts Breaks form.  If there is a blank record, delete it.
7) Run the two Inventory Utilities -- Update IV Display Descriptions and Update Physical Inventory Cycle Codes -- that appear beneath DataPort in the AddonSoftware Administration ==> Utilities ==> DataPort menu.
8) If porting from version 6, create desired Cycle Codes in Accounts Receivable ==> Maintenance.  Note that the Cycle Codes in Customer records will be blank.  The statement process will bill all Customers in this case, so modify your Customer records as needed on a per-case basis, or with a separate utility, once you have created your Cycle Codes.
9) If porting from version 6, create desired Freight Terms Codes in either Accounts Receivable or Sales Order Processing ==> Maintenance ==> Freight Terms Codes.  Note that the Freight Terms Codes in the Customer Detail file will be blank, and will need to be populated on a per-case basis or with a separate utility.
10) Three new fields have been added to the AP Type Codes file:  distribution code, payment group, and terms code.  These are used to facilitate automatic creation of the Vendor Codes record (apm-02) for vendors that are checked as temporary.  You'll need to call up each AP Type record and supply these defaults.
11) Add descriptions, if desired, to the Physical Inventory Cycle Codes records.  The description is a new field for the Barista version of Addon.
12) Set the various Barista Sequence Numbers to values of your choice.  Below is a mapping from v6/7 sequence number records to the Barista sequence records (from ads_sequences.dat) used in v8+.  Access the Barista Sequence Numbers via Barista Administration ==> Maintenance ==> Sequence Numbers:

	v6/7 file					Barista Sequence Numbers key
	aps-10N	next vendor				VENDOR_ID
	ars-10N	next customer				CUSTOMER_ID
		next temp customer (not used v8+)
		next order (file ops-10N in v7)		ORDER_NO
		next invoice (file ops-10N in v7)	INVOICE_NO
		next simple invoice			AR_INV_NO
	ivs-10N	next item# (not used v8+)
	ops-10N (see ars-10N)
	pos-10N	next PO					PO_NO
		next requisition			REQ_NO
		next receiver				RECEIVER_NO
		line count increment (not used v8+)
