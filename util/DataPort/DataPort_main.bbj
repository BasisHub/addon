rem DataPort Data File Conversion Utility (Template creation program)
rem Program create_template.bbj v8.0.0 28Oct07
rem
rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Feb2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+
rem
rem --- This overlay creates templates for version 6/7 data files using
rem --- the Addon dictionary files ddm-01, ddm-03 and ddm-04 and then
rem --- copies to Addon 8 data files after performing date format changes.
rem --- Normalization of data files will also be done in this program.
rem

use java.util.Iterator

rem --- Dictionary file templates
dim ddm01$:"data_name:c(12*),description:c(30),lstrev:c(6),data_type:c(1),reserved_str:c(68*),fld_length:n(3*),display_len:n(3*),reserved_num:n(1*)"
dim ddm03$:"file_name:c(6),record_id:c(1*),description:c(30),reserved_str:c(33*),reserved_num:n(3*)"
dim ddm04$:"file_name:c(6),record_id:c(1),layout_seq:c(3*),data_name:c(12),reserved_str1:c(41),fld_sep:c(1),reserved_str2:c(68*),reserved_num:n(1*),fld_repeats:n(3*),fld_occurs:n(3)"

rem --- Open files and/or retrieve templates that may be needed for PO file conversion

    num_files=7
    dim rd_open_tables$[1:num_files],rd_open_opts$[1:num_files],rd_open_chans$[1:num_files],rd_open_tpls$[1:num_files]
    rd_open_tables$[1]="ADS_SEQUENCES",rd_open_opts$[1]="OTA"
    rd_open_tables$[2]="ARM_CUSTMAST",rd_open_opts$[2]="T"
    rd_open_tables$[3]="ARM_CUSTSHIP",rd_open_opts$[3]="T"
    rd_open_tables$[4]="OPE_ORDSHIP",rd_open_opts$[4]="T"
    rd_open_tables$[5]="OPT_INVSHIP",rd_open_opts$[5]="T"
    rd_open_tables$[6]="OPE_ORDHDR",rd_open_opts$[6]="T"
    rd_open_tables$[7]="OPT_INVHDR",rd_open_opts$[7]="T"
    
    gosub open_tables
    
    ads_sequences_dev=num(rd_open_chans$[1]),ads_sequences_tpl$=rd_open_tpls$[1]
    arm_custmast_tpl$=rd_open_tpls$[2]
    arm_custship_tpl$=rd_open_tpls$[3]
    ope_ordship_tpl$=rd_open_tpls$[4]
    opt_invship_tpl$=rd_open_tpls$[5]
    ope_ordhdr_tpl$=rd_open_tpls$[6]
    opt_invhdr_tpl$=rd_open_tpls$[7]
    
rem --- initialization

    source_version = num(callpoint!.getDevObject("source_version"))
    version_cvs = iff(source_version=6,4,8)
    source_folder$ = callpoint!.getDevObject("source_folder")
    destin_folder$ = callpoint!.getDevObject("destin_folder")
    vectPort! = callpoint!.getDevObject("vectPort")

    dictfile$=stbl("+DIR_BRD")
    dictpgm$=stbl("+DIR_SYP")
    filedir$=stbl("+DATAPORT_FILES")
    logdir$=stbl("+DATAPORT_LOGS")

    mkdir logdir$,err=*next

    logfile$=logdir$+"DataPort_"+DATE(0:"%Mz%Dz%Yz")+"_"+DATE(0:"%Hz%mz")+".txt"
    erase logfile$,err=create_logfile
    create_logfile:
    string logfile$
    log_dev=unt
    open (log_dev)logfile$
    print (log_dev)"DataPort Start Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "+$0a$

    print (log_dev)" Porting Addon "+str(source_version)+" data files from folder "+source_folder$+" to "+destin_folder$+$0a$

    errfile$=logdir$+"DataPortError_"+DATE(0:"%Mz%Dz%Yz")+"_"+DATE(0:"%Hz%mz")+".txt"
    erase errfile$,err=create_errfile
    create_errfile:
    string errfile$
    err_dev=unt
    open (err_dev)errfile$
    print (err_dev)"DataPort Start Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "+$0a$

    print (err_dev)" Porting Addon "+str(source_version)+" data files from folder "+source_folder$+" to "+destin_folder$+$0a$

rem --- Set the hook for dealer custom call

    dropship$="N"
    invalid_date$="N"
    dupe_rec$="N"
    blank_fields$=""
    custom_prog$=""
    while 1
        custom_prog$=cvs(stbl("+CUSTOM_DP_PROG",err=*break),3)
        if custom_prog$<>""
            addr custom_prog$,err=*next;break
            custom_prog$=""
        endif
        break
    wend

rem --- Set the Temporary Vendor Number here

    temp_vend$=""
    temp_vend_ok$=""
    temp_vend$=stbl("+DP_TEMP_VEND",err=*next)
    if len(temp_vend$)>6 temp_vend$=""
    if len(temp_vend$)>1
        temp_vend$=pad(temp_vend$,6,"L","0")
    endif

rem --- Set the number of years to add here

    add_year=0
    add_year=num(stbl("+DEMO_DATE_INCREMENT",err=open_files))

open_files:
rem --- Open files

ddm01=unt
open (ddm01)source_folder$+"/"+cvs("ddm-01",version_cvs)
lock(ddm01)

ddm03=unt
open (ddm03)source_folder$+"/"+cvs("ddm-03",version_cvs)

ddm04=unt
open (ddm04)source_folder$+"/"+cvs("ddm-04",version_cvs)

ddm_table_tpls = unt
open (ddm_table_tpls)dictfile$+"ddm_table_tpls.dat"
dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"

ddm_tables = unt
open (ddm_tables)dictfile$+"ddm_tables.dat"

rem --- Load xref files into memory

rd_meter_data$="Loading aliases..."
rd_meter_action$="WIN-LST-OK"
rd_meter_title$="DataPort"
gosub disp_meter

rem --- read file_alias into hash map

file_alias! = new java.util.HashMap()
dim file_alias$:"file_id:c(16*=124),alias:c(16*=)"
file_alias = unt
open (file_alias)filedir$+"file_alias"
while 1
   read (file_alias,end=*break)file_alias$
   if len(file_alias$) then
      keyval$ = cvs(file_alias.file_id$,7)
      dataval$ = cvs(file_alias.alias$,7)
      if file_alias!.get(keyval$)=null() then
         file_alias!.put(keyval$,dataval$)
      else
         print "*** skip duplicate file_alias: ",file_alias$
      endif
   endif
wend
close (file_alias)

rem --- read file_xref into hash map

file_xref! = new java.util.HashMap()
dim file_xref$:"old_filename:c(16*=124),new_filename:c(16*=)"
file_xref = unt
open (file_xref)filedir$+"file_xref"
while 1
   read (file_xref,end=*break)file_xref$
   if len(file_xref$) then
      keyval$ = cvs(file_xref.old_filename$,7)
      dataval$ = cvs(file_xref.new_filename$,3)
      file_xref!.put(keyval$,dataval$)
   endif
wend
close (file_xref)

rem --- read field_file_xref into hash map

field_file_xref! = new java.util.HashMap()
dim field_file_xref$:"alias:c(16*=124),old_fieldname:c(16*=124),new_fieldname:c(16*=)"
field_file_xref = unt
open (field_file_xref)filedir$+"field_file_xref"
while 1
   read (field_file_xref,end=*break)field_file_xref$
   if len(field_file_xref$) then
      keyval$ = cvs(field_file_xref.alias$,7)+"."+cvs(field_file_xref.old_fieldname$,7)
      dataval$ = cvs(field_file_xref.new_fieldname$,7)
      field_file_xref!.put(keyval$,dataval$)
   endif
wend
close (field_file_xref)

rem --- read field_name_xref into hash map

field_name_xref! = new java.util.HashMap()
dim field_name_xref$:"old_fieldname:c(16*=124),new_fieldname:c(16*=)"
field_name_xref = unt
open (field_name_xref)filedir$+"field_name_xref"
while 1
   read (field_name_xref,end=*break)field_name_xref$
   if len(field_name_xref$) then
      keyval$ = cvs(field_name_xref.old_fieldname$,7)
      dataval$ = cvs(field_name_xref.new_fieldname$,7)
      field_name_xref!.put(keyval$,dataval$)
   endif
wend
close (field_name_xref)

rem --- read internal_seq into hash map

internal_seq! = new java.util.HashMap()
dim int_seq$:"alias:c(16*=124),disp_seq:c(16*=124),int_seq:c(16*=)"
int_seq_xref = unt
open (int_seq_xref)filedir$+"internal_seq"
while 1
   read (int_seq_xref,end=*break)int_seq$
   if len(int_seq$) then
      keyval$ = cvs(int_seq.alias$,7)+"."+cvs(int_seq.disp_seq$,7)
      dataval$ = cvs(int_seq.int_seq$,7)
      internal_seq!.put(keyval$,dataval$)
   endif
wend
close (int_seq_xref)

rem --- read field_translations into hash map

field_translations! = new java.util.HashMap()
dim field_translations$:"fieldname:c(16*=124),old_value:c(16*=124),new_value:c(16*=)"
field_translations = unt
open (field_translations)filedir$+"field_translations"
while 1
   read (field_translations,end=*break)field_translations$
   if len(field_translations$) then
      keyval$ = cvs(field_translations.fieldname$,7)+"."+cvs(field_translations.old_value$,3)
      dataval$ = cvs(field_translations.new_value$,7)
      field_translations!.put(keyval$,dataval$)
   endif
wend
close (field_translations)

rem --- read new_field_defaults into hash map

new_field_defaults! = new java.util.HashMap()
dim new_field_defaults$:"filename:c(16*=124),fieldname:c(16*=124),default_value:c(16*=)"
new_field_defaults = unt
open (new_field_defaults)filedir$+"new_field_defaults"
while 1
   read (new_field_defaults,end=*break)new_field_defaults$
   if len(new_field_defaults$) then
      keyval$ = cvs(new_field_defaults.filename$,7)+"."+cvs(new_field_defaults.fieldname$,3)
      dataval$ = cvs(new_field_defaults.default_value$,7)
      new_field_defaults!.put(keyval$,dataval$)
   endif
wend
close (new_field_defaults)


rem --- read po file names into hash map

po_files! = new java.util.HashMap()
dim po_files$:"det_filename:c(16*=124),hdr_filename:c(16*=)"
po_files = unt
open (po_files)filedir$+"po_files"
while 1
   read (po_files,end=*break)po_files$
   if len(po_files$) then
      keyval$ = cvs(po_files.det_filename$,3)
      dataval$ = cvs(po_files.hdr_filename$,3)
      po_files!.put(keyval$,dataval$)
   endif
wend
close (po_files)

rd_meter_data$="DataPort Start Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")
rd_meter_proc_recs=rd_meter_total_recs
rd_meter_action$="LST"
gosub disp_meter


rd_meter_data$="Processing files . . ."
rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
rd_meter_action$="LST"
gosub disp_meter

rem --- Read the v6/v7 data directory
old_dir=unt
open (old_dir)source_folder$

next_file:
    if vectPort! = null() then
       readrecord (old_dir,end=end_read_loop)datafile$
    else
       datafile$ = str(vectPort!.removeItem(0),err=end_read_loop)
    endif

    datafile$=cvs(datafile$,version_cvs)
    rd_meter_data$="   "+datafile$
    rd_meter_action$="LST"
    gosub disp_meter

    if vectPort!.size(err=*endif) then
       rd_meter_proc_recs=rd_meter_proc_recs+1
       rd_meter_action$="MTR-"
       gosub disp_meter
    endif

    rem --- skip these files
    if pos("."=datafile$)=1 then goto next_file
    if pos("_"=datafile$)=1 then goto next_file
    if pos("z"=cvs(datafile$,8))=1 then  goto next_file
    if pos("dd"=cvs(datafile$,8))=1 then goto next_file
    if pos("w-"=cvs(datafile$,8))=3 then goto next_file
    if pos("sh"=cvs(datafile$,8))=1 then goto next_file
    if pos("ivm-03"=cvs(datafile$,8))=1 then goto next_file

    print "Data file: ",datafile$
    print (log_dev)"Data file: ",datafile$

    if cvs(datafile$,8)="sys-01" then
       normalize_sys01=1
    endif; rem ' sys-01

rem --- Read the dictionary file ddm-03 to get data file info

    read(ddm03,key=pad(datafile$,6),dom=*next)

next_ddm03:
    if copy_sys01 then
       readrecord(ddm03,key=ddm03_key$,dom=read_normalize_xref)ddm03$
    else
       readrecord(ddm03,end=next_file)ddm03$
       if cvs(ddm03.file_name$,3)<>cvs(datafile$,3) then
          goto next_file
       endif
    endif
    gosub get_new_template
    rd_gen_table_tpl$=""
    data_seq_str$=""
    fields=0
    date_format$ = $$
    print "   Creating template for "+ddm03.file_name$+ddm03.record_id$+"  ("+table_alias$+")"
    print (log_dev)"   Creating template for "+ddm03.file_name$+ddm03.record_id$

    read(ddm04,key=ddm03.file_name$+ddm03.record_id$,dom=*next)
next_ddm04:
    readrecord(ddm04,end=end_ddm04)ddm04$
    if ddm04.file_name$<>ddm03.file_name$ or ddm04.record_id$<>ddm03.record_id$ then
       goto end_ddm04
    endif

    findrecord(ddm01,key=ddm04.data_name$,dom=next_ddm04)ddm01$
    rd_col_length=ddm01.fld_length
    if ddm04.fld_repeats>1 then
       rd_col_length=ddm01.fld_length*ddm04.fld_repeats
    endif
    rd_col_occurs_sfx$=""
    rd_col_occurs$=""
    rd_col_occurs=1
    if ddm04.fld_occurs>1 then
       rd_col_occurs$="YES"
       rd_col_occurs=ddm04.fld_occurs
    endif

    data_seq_pos=pos(pad(ddm04.data_name$,16)=data_seq_str$,20)
    if data_seq_pos<>0 then
       rd_occur_adj=num(data_seq_str$(data_seq_pos+17,2))
    else
       rd_occur_adj=0
       data_seq_str$=data_seq_str$+pad(ddm04.data_name$,16)+"-00;"
    endif

    for rd_curr_occur=1 to rd_col_occurs
       data_seq_pos=pos(pad(ddm04.data_name$,16)=data_seq_str$,20)
       data_seq_str$(data_seq_pos+17,2)=str(num(data_seq_str$(data_seq_pos+17,2))+1:"00")
       if rd_col_occurs$="YES" or rd_occur_adj>0 then
          rd_col_occurs_sfx$="_"+str(rd_curr_occur+rd_occur_adj:"00")
       endif

           rem --- Remove slashes from data name
       data_name$ = ddm04.data_name$
       s_pos = pos("/" = data_name$)

       while s_pos
          data_name$ = data_name$(1, s_pos-1) + data_name$(s_pos+1)
          s_pos = pos("/" = data_name$)
       wend

       rem ' field names can only contain [A-Z0-9_]
       data_name$=tbl(cvs(data_name$,7),tbl=az_09)
       rd_temp_seg$=cvs(data_name$,3)+rd_col_occurs_sfx$+":"
       datatype$=iff(ddm01.data_type$="N","N","C")
       rd_temp_seg$=rd_temp_seg$+datatype$+"("+str(rd_col_length)
       if rd_col_occurs$<>"YES"
         if ddm04.fld_sep$="X" or ddm04.fld_sep$="Y" or ddm04.fld_sep$="E" then
           rd_temp_seg$=rd_temp_seg$+"*"
         endif
       endif    
       if rd_col_occurs$="YES" or rd_occur_adj>0
         if rd_curr_occur+rd_occur_adj=rd_col_occurs and datatype$="C" or           datatype$<>"C"
           if ddm04.fld_sep$="X" or ddm04.fld_sep$="Y" or ddm04.fld_sep$="E"
             if rd_temp_seg$(len(rd_temp_seg$),1)<>"*"
               rd_temp_seg$=rd_temp_seg$+"*"
             endif
           endif
         endif
       endif  
       rd_temp_seg$=rd_temp_seg$+")"
       fields = fields + 1
       if len(rd_gen_table_tpl$) then
          rd_gen_table_tpl$=rd_gen_table_tpl$+","
       endif
       rd_gen_table_tpl$=rd_gen_table_tpl$+rd_temp_seg$
       rem ' Date formats
       if ddm01.data_type$="D" then
          date_format$ = date_format$ + chr(rd_col_length)
       else
          if ddm01.data_type$="A" and rd_col_length=2 then
             date_format$ = date_format$ + chr(255)
          else
             date_format$ = date_format$ + chr(0)
          endif
       endif
   next rd_curr_occur

   goto next_ddm04

az_09: table 7f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 30 31 32 33 34 35 36 37 38 39 5f 5f 5f 5f 5f 5f 5f 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59 5a 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f

end_ddm04:
    if rd_gen_table_tpl$="" then
       escape; goto eof
    endif

    dim old_rec$:rd_gen_table_tpl$
    fields$="name["+str(fields)+"]:c(20*)"
    dim old_fieldlist$:fields$
    old_fieldlist$=fattr(old_rec$,"")
    record_id_field$=""
    if pos("RECORD_ID_"=old_fieldlist.name$[2]) then
       record_id_field$=old_fieldlist.name$[2]
    endif
    if pos("RECORD_ID_"=old_fieldlist.name$[1]) then
       record_id_field$=old_fieldlist.name$[1]
    endif

    rem ' Special address processing?
    addr_lines=0
    if source_version=6 and pos($0a$+"CITY"+$0a$=new_fields$) and pos($0a$+"STATE_CODE"+$0a$=new_fields$)
       if pos($0a$+"ADDR_LINE_3"+$0a$=old_fieldlist$) then
          addr_lines=3
       endif
       if pos($0a$+"ADDR_LINE_5"+$0a$=old_fieldlist$) then
          addr_lines=5
       endif
    endif

    rem ' Do we need to set the shipto type?
    ar_shipto = table_alias$="OPE_ORDHDR" or table_alias$="OPT_INVHDR"

    rem ' Correlate old fieldnames to new fieldnames
    dim new_fieldlist$:fields$
    new_fieldlist$=$$
    for field=1 to fields
        old_fieldname$=old_fieldlist.name$[field]
        gosub set_new_fieldname
        new_fieldlist$ = new_fieldlist$ + new_fieldname$ + $0a$
    next field
    old_file=unt
    if copy_sys01 then
       datafile$="sys-01"
    endif
    open (old_file)source_folder$+"/"+datafile$
    lock (old_file)
    print "   Copying data from  "+ddm03.file_name$+ddm03.record_id$
    print(log_dev)"   Copying data from    "+ddm03.file_name$+ddm03.record_id$

    next_rec:
    readrecord(old_file,end=eof)old_rec$
    if source_version=6 and datafile$="ARM-10" and old_rec$(1,3)="01G" goto next_rec
    if pos("00"=old_rec$)=1 goto next_rec
    if record_id_field$<>"" and field(old_rec$,record_id_field$,err=*continue)<>ddm03.record_id$ then
       goto next_rec
    endif
    if copy_sys01 and field(old_rec$,old_fieldlist.name$[2],err=*continue) +                      field(old_rec$,old_fieldlist.name$[3],err=*continue) <> file_normalization$(1,4) then
       goto next_rec
    endif

    rem --- start field loop

        for field=1 to fields

rem --- Retrieve value$ if applicable

        if new_fieldlist.name$[field]=$$ then continue
        value$=field(old_rec$,old_fieldlist.name$[field],err=*continue)

rem --- Get list of valid firms
        if cvs(old_fieldlist.name$[field],3)="FIRM_ID"
            if cvs(value$,3)<>""
                if pos(value$=firms$,2)=0
                    firms$=firms$+value$
                endif
            endif
        endif

rem --- Populate new internal sequence from old display sequence

        keyval$ = table_alias$+"."+new_fieldlist.name$[field]
        int_seq! = internal_seq!.get(keyval$)
        if int_seq! <> null() then
            int_seq$ = int_seq!
            if pos(cvs(int_seq$,3)+$0a$=new_fieldlist$)<>0
                if cvs(value$,3)<>"" then value$=str(num(value$):"000000000000")
            else
                field new_rec$,int_seq$=str(num(value$):"000000000000")
            endif
        endif

rem --- check for specific values that can't be found any other way
        if cvs(new_fieldlist.name$[field],3)="REPORT_ALIAS"
            if cvs(value$,3)="AR_STATEMENT" value$="ARR_STATEMENTS"
            if cvs(value$,3)="OP_INVOICE" value$="OPR_INVOICES"
            if cvs(value$,3)="OP_PICKINGLIST" value$="OPR_ODERPICKLST"
            if cvs(value$,3)="OP_QUOTE" value$="OPR_QUOTE"
            if cvs(value$,3)="PO_PURCHASE_ORDER" value$="POR_POPRINT"
            if cvs(value$,3)="PO_REQS"value$="POR_REQS"
        endif
        if source_version=6 and (datafile$="ARM-10" OR datafile$="APM-10") and old_fieldlist.name$[field]="PROX_OR_DAYS" and cvs(value$,2)="A"
            value$="P"
        endif
        if source_version=6 and datafile$="GLM-22"
            while pos($22$=value$)
                value$(pos($22$=value$,1))=" "
            wend
            if pos("OUTPUT_OPER"=old_fieldlist.name$[field])=1
                x$=old_fieldlist.name$[field]
                if pos(value$="+-")=0
                    value$=" "
                endif
                if value$=" " and num(field(new_rec$,"output_total_"+x$(len(x$)-1,2)))<>0
                    value$="+"
                endif
            endif
            value$=cvs(value$,2)
        endif
        if old_fieldlist.name$[field]="ZIP_CODE" and len(cvs(value$,2))=9
            if value$(6,4)="0000"
                value$=value$(1,5)
            endif
        endif    

rem --- Check for Temp Vendor

        if cvs(old_fieldlist.name$[field],2)="VENDOR_NBR"
            if pos("TEMP  "=value$)=1
                if temp_vend$=""
                    temp_vend_ok$="N"
                    goto next_rec
                else
                    value$=temp_vend$
                endif
            endif
        endif

rem --- Set all Retain Invoice History Detail flags to Y

        if old_fieldlist.name$[field]="INV_HIST_FLG"
            value$="Y"
        endif

rem --- Set all Retain Customer flags to Y

        if new_fieldlist.name$[field]="RETAIN_CUST"
            value$="Y"
        endif
		
rem --- set Inventory auto number flag

        if datafile$="sys-01"
            if old_rec$(3,4)="IV00"
                new_rec.auto_no_iv$=old_rec.auto_number$
            endif
        endif

rem --- Set blank Credit Hold (Y;N;E) field values to N
        if cvs(new_fieldlist.name$[field],3)="CRED_HOLD"
            if cvs(value$,2)="" value$="N"
        endif

        rem --- set Stocking Level to "W" for all items
        if cvs(new_fieldlist.name$[field],3)="STOCK_LEVEL"
            value$="W"
        endif

rem --- Call custom program - Note - there is no CALL/ENTER list, so all variables will be 
rem     available. Common usages for this would be things like data conversion, since value$
rem     holds the data in the field coming in, and old_fieldlist.name$[field] is the variable
rem     name from the dictionary of the source data. datafile$ is the source datafile name.

        if custom_prog$<>""
            call custom_prog$
        endif

rem --- Check value of new field for blanks if part of primary key
        if pos(new_fieldlist.name$[field]+$0a$=key_temp$)>0
            if cvs(value$,2)=""
                if pos(new_fieldlist.name$[field]+$0a$=blank_fields$)=0
                    if field_translations!.get(new_fieldlist.name$[field]+"."+cvs(value$,3))=null()
                        blank_fields$=blank_fields$+new_fieldlist.name$[field]+$0a$
                        print (err_dev) "field "+new_fieldlist.name$[field]+" in file "+new_datafile$+" has a blank value and no translation specified." 
                    endif
                endif    
            endif
        endif

rem --- if this field.value is listed in flat file "field_translations" then translate to new value

        translate_value!=field_translations!.get(new_fieldlist.name$[field]+"."+cvs(value$,3))
        if translate_value!<>null()
            translate_value$=str(translate_value!)
            value$=translate_value$
        endif

 rem --- date formatting

        attr$=fattr(old_rec$,old_fieldlist.name$[field])
        fld_sep$=attr$(3,1)
        fld_typ$=attr$(1,1)
        fld_len=dec(attr$(10,2))
        if fld_sep$=$0a$ and len(value$)>fld_len and dec(fld_typ$)=1 
            if pos($20$<>value$(fld_len+1))=0
                value$=value$(1,fld_len)
            endif
        endif
        switch asc(date_format$(field))
           case 0
              break
           case 3
              if len(cvs(value$,3)) then
                 value$=str(asc(value$)-32+1900+add_year)+str(asc(value$(2))-32:"00")+str(mod(asc(value$(3))-32,100):"00")
              else
                 value$=pad("",8)
              endif
              if date(jul(num(value$(1,4)),num(value$(5,2)),num(value$(7,2)),err=*next),err=*next)>"" break
              print (err_dev)"There is an invalid date in table "+new_datafile$+". Value was "+value$+" in field "+new_fieldlist.name$[field]+" and has been changed to blanks."
              value$=""
              invalid_date$="Y"
              break
           case 2
           case 6
              if len(cvs(value$,3)) then
                 if asc(value$)>=65 then
                    value$=str(200+asc(value$)-65)+value$(2)
                 else
                    value$="19"+value$
                 endif
                 value$=str(num(value$(1,4),err=*next)+add_year)+value$(5)
              else
                 value$=pad("",8)
              endif
              break
           case 8
              value$=str(num(value$(1,4))+add_year)+value$(5)
              if date(jul(num(value$(1,4)),num(value$(5,2)),num(value$(7,2)),err=*next),err=*next)>"" break
              print (err_dev)"There is an invalid date in table "+new_datafile$+". Value was "+value$+" in field "+new_fieldlist.name$[field]+" and has been changed to blanks."
              value$=""
              invalid_date$="Y"
              break
           case 255
              if len(cvs(value$,3)) then
                 value$=str(asc(value$)-32:"00")+str(asc(value$(2))-32:"00")
              else
                 value$=pad("",8)
              endif
              break
           case default; escape; rem ' should never get here
        swend

        rem --- replace non-print characters with spaces

        value$=cvs(value$,16)

        rem --- probably need logic here to read ddm_elements, and make sure that 
        rem --- delimited elements that are marked as left/space padded actually get padded
        rem --- right now, padding doesn't happen, but isn't causing widespread problem (CAH; Apr09)

                field new_rec$,new_fieldlist.name$[field]=value$

            next field

    rem --- final misc processing prior to writing new record    

    if addr_lines then gosub reformat_address

    if ar_shipto then
       shipto_no = -1
       shipto_no = num(field(new_rec$,"shipto_no"),err=*next)
       switch shipto_no
           case 0; shipto_type$="B"; break
           case 99; shipto_type$="M"; break
           case default; shipto_type$="S"; break
       swend
       field new_rec$,"shipto_type"=shipto_type$
    endif

    new_rec$=field(new_rec$)

write_record:

    if keysize then
       k$=xkgen(new_rec$,xfin$,0)
       if len(k$)>keysize then
          writerecord(new_file,key=k$(1,keysize),dom=duplicate_record,err=write_err)new_rec$
       else
          writerecord(new_file,key=k$,dom=duplicate_record,err=write_err)new_rec$
       endif
    else
       writerecord(new_file,dom=duplicate_record,err=write_err)new_rec$
    endif

    po_det$=new_datafile$
    po_file! = po_files!.get(po_det$)
    if po_file! <> null() and cvs(old_rec.customer_nbr$,3)<>""then gosub convert_po_files
        
    goto next_rec

duplicate_record:

    if cvs(new_datafile$,2)="glm-06" or cvs(new_datafile$,2)="adm-19" or cvs(new_datafile$,2)="opm-14" goto next_rec
    dupe_rec$="Y"
    call stbl("+DIR_SYP")+"bac_key_template.bbj",table_alias$,"",key_temp1$,rd_table_chans$[all],rd_stat$
    if len(key_temp1$)>0
        dim dupe_key$:key_temp1$
        dupe_key$=new_rec$
        dupe_key$=field(dupe_key$)
    endif    
    print (err_dev)"There are duplicate records being written to "+new_datafile$+" with a key template of"
    if len(key_temp1$)>0
        print (err_dev)"   "+key_temp1$
        print (err_dev)"   and values of "+dupe_key$
        print (err_dev)"   This key will be ignored."
    else
        print (err_dev)"   No key could be determined. The record value is"
        print (err_dev)"   "+new_rec$
        print (err_dev)"   This record will be ignored."
    endif
    goto next_rec

eof:

    key_temp$=""

    if old_file then
       close (old_file)
       old_file=0
    endif
    if new_file then
       close (new_file)
       new_file=0
    endif
    if copy_sys01 then
       goto read_normalize_xref
    endif
    goto next_ddm03

rem ' Auto-resize on error
write_err:
    if err<>1 then escape
    fid$=fid(new_file)
    new_file$=fid$(9)
    print "*** Resizing ",new_file$," ... ",
    temp_file$=new_file$+".bak"
    erase temp_file$,err=*next
    fid$=fid$(1,8)+temp_file$
    fid$(7,2)=bin(len(new_rec$),2); rem ' new record size
    fin$=fin(new_file)(86)
    keyed = asc(and(fid$(1,1),$06$)) or asc(and(fid$(1,1),$08$)) or fid$(1,1)=$0d$
    multi = keyed and asc(fid$(2,1))=0
    single = keyed and !(multi)
    if multi then
       file fid$,fin$
    else
       file fid$
    endif
    close (new_file)
    open (new_file)new_file$
    lock (new_file)
    temp_file=unt
    open (temp_file)temp_file$
    lock (temp_file)
    while 1
        readrecord(new_file,end=*break)rec$
        if single then
           k$=keyp(new_file)
           writerecord(temp_file,key=k$)rec$
        else
           writerecord(temp_file)rec$
        endif
    wend
    close (new_file)
    close (temp_file)
    erase new_file$
    rename temp_file$ to new_file$
    open (new_file)new_file$
    lock (new_file)
    print "(resized)"
    goto write_record

end_read_loop:
    if old_dir then
       close (old_dir)
       old_dir=0
    endif
    if normalize_sys01 then
       print "   sys-01 will be normalized to different parameter files"
       print (log_dev)"sys-01"
       print (log_dev)"   sys-01 will be normalized to different parameter files"
       file_normalization=unt
       open (file_normalization)filedir$+"file_normalization"
       copy_sys01=1
read_normalize_xref:
       read(file_normalization,end=end_read_normalize_xref)file_normalization$
       if file_normalization$="" then
          goto read_normalize_xref
       endif
       ddm03_key$=cvs(file_normalization$(9,6),version_cvs)+file_normalization$(15,1)
       datafile$=ddm03_key$(1,6)
       goto next_ddm03
end_read_normalize_xref:
       close (file_normalization)
       normalize_sys01=0
       goto end_read_loop
    endif; rem ' normalize_sys01

rem --- Now go populate masks and sequences

    if source_version=6 gosub version6_files
    if source_version=7 gosub version7_files
    gosub make_masks
        
    if temp_vend_ok$="N"
        rd_meter_data$="Temporary vendor records found not ported. See error file."
        rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
        rd_meter_action$="LST"
        gosub disp_meter
        print "   Temporary vendor records found. See err file"
        print (err_dev)"Temporary vendor records found without a valid stbl("+$22$+"+DP_TEMP_VEND"+$22$+")."
        print (err_dev)"Those records were excluded from the DataPort."
        print (err_dev)"Please set this variable up in the config file and rerun the DataPort."
    endif

    if len(blank_fields$)>0
        rd_meter_data$="Blank values for elements in primary keys exist. See error file for details."
        rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
        rd_meter_action$="LST"
        gosub disp_meter        
        print "   Blank values for elements in primary keys exist. See error file for details."
    endif
    while len(blank_fields$)>0
        print (err_dev)"Element "+blank_fields$(1,pos($0a$=blank_fields$)-1)+" has a blank value with no translation specified."
        print (err_dev)"  Consider converting to a non-blank value and re-running DataPort."
        blank_fields$=blank_fields$(pos($0a$=blank_fields$)+1)
    wend

    if dupe_rec$="Y" 
        rd_meter_data$="Duplicate keys exist in the ported data. See error file for details."
        rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
        rd_meter_action$="LST"
        gosub disp_meter        
        print "   Duplicate keys exist in the ported data. See error file for details."
    endif

    if invalid_date$="Y" 
        rd_meter_data$="Invalid dates exist in the ported data. See error file for details."
        rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
        rd_meter_action$="LST"
        gosub disp_meter        
        print "   Invalid dates exist in the ported data. See error file for details."
    endif

rem --- Populate sequence record(s)

    if len(firms$)>0
        for firms=1 to len(firms$) step 2
            dim ads_sequences$:ads_sequences_tpl$
            ads_sequences.firm_id$=firms$(firms,2)
            ads_sequences.seq_id$=pad("INTERNAL_SEQ_NO",16)
            ads_sequences.description$="Internal Sequence Number"
            ads_sequences.active$="Y"
            ads_sequences.seq_no_increment=1
            ads_sequences.seq_mask$="000000000000"
            ads_sequences.seq_query_new$="N"
            ads_sequences.asc_comp_id$="01007514"
            ads_sequences.asc_prod_id$="AD"
            readrecord(ads_sequences_dev,key=ads_sequences.firm_id$+ads_sequences.seq_id$,dom=*next)ads_sequences$
            if ads_sequences.seq_last_used<1000 ads_sequences.seq_last_used=1000
            ads_sequences$=field(ads_sequences$)
            writerecord(ads_sequences_dev)ads_sequences$
        next firms    
    endif

    print (log_dev)$0a$+"DataPort completed"
    print (log_dev)"DataPort End Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "

    print (err_dev)$0a$+"DataPort completed"
    print (err_dev)"DataPort End Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "

    rd_meter_data$="DataPort End Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")
    rd_meter_proc_recs=rd_meter_total_recs
    rd_meter_action$="LST-END"
    gosub disp_meter

    release

version7_files:

    ops10_dev=unt
    open (ops10_dev,err=endof_v7cash_sales)source_folder$+"/"+cvs("ops-10",version_cvs)
    
    new_file=unt
    datafile$=cvs("ars_mtdcash",8)
    table_alias$="ARS_MTDCASH"
    open (new_file,err=*next)destin_folder$+"/"+datafile$;goto get_v7cash_template
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$) then goto start_v7cash
    new_file=unt
    open (new_file)destin_folder$+"/"+datafile$

get_v7cash_template:

    call stbl("+DIR_PGM")+"adc_clearfile.aon",new_file
    dim ids$[1],templates$[1]
    ids$[1]="ARS_MTDCASH"
    call stbl("+DIR_PGM")+"adc_template.aon",1,1,ids$[all],templates$[all],status
    if status 
        print "   Could not find v8 template file for ARS_MTDCASH. File skipped."
        print (err_dev) "Could not find v8 template file for ARS_MTDCASH. File skipped."
        goto start_v7cash
    endif
    dim new_rec$:templates$[1]
    while 1
        k$=key(ops10_dev,end=*break)
        if k$(3,1)<>"C" 
            read(ops10_dev)
            continue
        endif    
        dim ops10[6]
        read(ops10_dev,key=k$)ops10_0$,ops10[all]
        new_rec.firm_id$=k$(1,2)
        new_rec.record_id_c$="C"
        new_rec.mtd_cash=ops10[0]
        new_rec.mtd_csh_disc=ops10[1]
        new_rec.mtd_csh_gl=ops10[2]
        new_rec.nxt_mtd_cash=ops10[3]
        new_rec.nmtd_cash_ds=ops10[4]
        new_rec.nmtd_cashgl=ops10[5]
        new_rec$=field(new_rec$)
        writerecord(new_file)new_rec$
    wend
    
start_v7cash:

    new_file=unt
    datafile$=cvs("ops_mtdsales",8)
    table_alias$="OPS_MTDSALES"
    open (new_file,err=*next)destin_folder$+"/"+datafile$;goto get_v7sales_template
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$) then goto endof_v7cash_sales
    new_file=unt
    open (new_file)destin_folder$+"/"+datafile$

get_v7sales_template:

    call stbl("+DIR_PGM")+"adc_clearfile.aon",new_file
    dim ids$[1],templates$[1]
    ids$[1]="OPS_MTDSALES"
    call stbl("+DIR_PGM")+"adc_template.aon",1,1,ids$[all],templates$[all],status
    if status 
        print "   Could not find v8 template file for OPS_MTDSALES. File skipped."
        print (err_dev) "Could not find v8 template file for OPS_MTDSALES. File skipped."
        goto endof_v7cash_sales
    endif
    dim new_rec$:templates$[1]
    read(ops10_dev,key="",dom=*next)
    while 1
        k$=key(ops10_dev,end=*break)
        if k$(3,1)<>"S" 
            read(ops10_dev)
            continue
        endif   
        dim ops10[15]
        read(ops10_dev,key=k$)ops10_0$,ops10[all]
        new_rec.firm_id$=k$(1,2)
        new_rec.record_id_s$="S"
        new_rec.mtd_sales=ops10[0]
        new_rec.mtd_returns=ops10[1]
        new_rec.mtd_tax=ops10[2]
        new_rec.mtd_freight=ops10[3]
        new_rec.mtd_cost=ops10[4]
        new_rec.mtd_discount=ops10[5]
        new_rec.mtd_csh_sale=ops10[6]
        new_rec.nmtd_sales=ops10[8]
        new_rec.nmtd_returns=ops10[9]
        new_rec.nmtd_tax=ops10[10]
        new_rec.nxt_mtd_frgt=ops10[11]
        new_rec.nxt_mtd_cost=ops10[12]
        new_rec.nxt_mtd_disc=ops10[13]
        new_rec.nmtd_cashsl=ops10[14]
        new_rec$=field(new_rec$)
        writerecord(new_file)new_rec$
    wend

endof_v7cash_sales:

    return
    
version6_files:

    ars10_dev=unt
    open (ars10_dev,err=endof_v6cash_sales)source_folder$+"/"+cvs("ars-10",version_cvs)
    
    new_file=unt
    datafile$=cvs("ars_mtdcash",8)
    table_alias$="ARS_MTDCASH"
    open (new_file,err=*next)destin_folder$+"/"+datafile$;goto get_v6cash_template
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$) then goto start_v6cash
    new_file=unt
    open (new_file)destin_folder$+"/"+datafile$

get_v6cash_template:

    call stbl("+DIR_PGM")+"adc_clearfile.aon",new_file
    dim ids$[1],templates$[1]
    ids$[1]="ARS_MTDCASH"
    call stbl("+DIR_PGM")+"adc_template.aon",1,1,ids$[all],templates$[all],status
    if status 
        print "   Could not find v8 template file for ARS_MTDCASH. File skipped."
        print (err_dev) "Could not find v8 template file for ARS_MTDCASH. File skipped."
        goto start_v6cash
    endif
    dim new_rec$:templates$[1]
    while 1
        k$=key(ars10_dev,end=*break)
        if k$(3,1)<>"C" 
            read(ars10_dev)
            continue
        endif    
        dim ars10[6]
        read(ars10_dev,key=k$)ars10_0$,ars10[all]
        new_rec.firm_id$=k$(1,2)
        new_rec.record_id_c$="C"
        new_rec.mtd_cash=ars10[0]
        new_rec.mtd_csh_disc=ars10[1]
        new_rec.mtd_csh_gl=ars10[2]
        new_rec.nxt_mtd_cash=ars10[3]
        new_rec.nmtd_cash_ds=ars10[4]
        new_rec.nmtd_cashgl=ars10[5]
        new_rec$=field(new_rec$)
        writerecord(new_file)new_rec$
    wend
    
start_v6cash:

    new_file=unt
    datafile$=cvs("ops_mtdsales",8)
    table_alias$="OPS_MTDSALES"
    open (new_file,err=*next)destin_folder$+"/"+datafile$;goto get_v6sales_template
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$) then goto endof_v6cash_sales
    new_file=unt
    open (new_file)destin_folder$+"/"+datafile$

get_v6sales_template:

    call stbl("+DIR_PGM")+"adc_clearfile.aon",new_file
    dim ids$[1],templates$[1]
    ids$[1]="OPS_MTDSALES"
    call stbl("+DIR_PGM")+"adc_template.aon",1,1,ids$[all],templates$[all],status
    if status 
        print "   Could not find v8 template file for OPS_MTDSALES. File skipped."
        print (err_dev) "Could not find v8 template file for OPS_MTDSALES. File skipped."
        goto endof_v6cash_sales
    endif
    dim new_rec$:templates$[1]
    read(ars10_dev,key="",dom=*next)
    while 1
        k$=key(ars10_dev,end=*break)
        if k$(3,1)<>"S" 
            read(ars10_dev)
            continue
        endif   
        dim ars10[15]
        read(ars10_dev,key=k$)ars10_0$,ars10[all]
        new_rec.firm_id$=k$(1,2)
        new_rec.record_id_s$="S"
        new_rec.mtd_sales=ars10[0]
        new_rec.mtd_returns=ars10[1]
        new_rec.mtd_tax=ars10[2]
        new_rec.mtd_freight=ars10[3]
        new_rec.mtd_cost=ars10[4]
        new_rec.mtd_discount=ars10[5]
        new_rec.mtd_csh_sale=ars10[6]
        new_rec.nmtd_sales=ars10[8]
        new_rec.nmtd_returns=ars10[9]
        new_rec.nmtd_tax=ars10[10]
        new_rec.nxt_mtd_frgt=ars10[11]
        new_rec.nxt_mtd_cost=ars10[12]
        new_rec.nxt_mtd_disc=ars10[13]
        new_rec.nmtd_cashsl=ars10[14]
        new_rec$=field(new_rec$)
        writerecord(new_file)new_rec$
    wend

endof_v6cash_sales:

    arm10_dev=unt
    open (arm10_dev,err=end_of_msgs)source_folder$+"/"+cvs("arm-10",version_cvs)

    new_file=unt
    datafile$=cvs("opm-04",8)
    table_alias$="OPC_MSG_HDR"
    open (new_file,err=*next)destin_folder$+"/"+datafile$;goto get_opm04_template
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$) then goto start_msg_det
    new_file=unt
    open (new_file)destin_folder$+"/"+datafile$
get_opm04_template:
    dim ids$[1],templates$[1]
    ids$[1]="OPC_MSG_HDR"
    call stbl("+DIR_PGM")+"adc_template.aon",1,1,ids$[all],templates$[all],status
    if status 
        print "   Could not find v8 template file for OPC_MSG_HDR. OP Messages skipped."
        print (err_dev) "Could not find v8 template file for OPC_MSG_HDR. OP Messages skipped."
        goto end_of_msgs
    endif
    dim new_rec$:templates$[1]
read_msg_hdr:
    read(arm10_dev,end=start_msg_det)arm10a_0$,arm10a_1$
    if arm10a_0$(3,1)<>"G" goto read_msg_hdr
    if arm10a_0$(6,1)<>"1" goto read_msg_hdr
    new_rec.firm_id$=arm10a_0$(1,2)
    new_rec.message_code$=arm10a_0$(4,2)
    new_rec.code_desc$=arm10a_0$(7,20)
    new_rec$=field(new_rec$)
    writerecord(new_file)new_rec$
    goto read_msg_hdr

start_msg_det:
    close (new_file)
    new_file=unt
    datafile$=cvs("opm-14",8)
    table_alias$="OPC_MSG_DET"
    open (new_file,err=*next)destin_folder$+"/"+datafile$;goto get_opm14_template
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$) then goto end_of_msgs
    new_file=unt
    open (new_file)destin_folder$+"/"+datafile$
get_opm14_template:
    dim ids$[1],templates$[1]
    ids$[1]="OPC_MSG_DET"
    call stbl("+DIR_PGM")+"adc_template.aon",1,1,ids$[all],templates$[all],status
    if status 
        print "   Could not find v8 template file for OPC_MSG_DET. OP Message details skipped."
        print (err_dev) "Could not find v8 template file for OPC_MSG_DET. OP Message details skipped."
        goto end_of_msgs
    endif
    dim new_rec$:templates$[1]
    read(arm10_dev,key="",dom=*next)

    while 1
        read(arm10_dev,end=*break)arm10a_0$,arm10a_1$
        if arm10a_0$(3,1)<>"G" continue
        dim second$(200)
        k$=key(arm10_dev,end=*next)
        if pos(arm10a_0$(1,5)=k$)=1
            read(arm10_dev)*,second$
        endif
        msg$=pad(arm10a_1$,200)+pad(second$,200)
        for x=1 to 400 step 40
            if pos(" "<>msg$(x))<>0
                new_rec.firm_id$=arm10a_0$(1,2)
                new_rec.message_code$=arm10a_0$(4,2)
                new_rec.message_seq$=str(((x-1)/40)+1:"00")
                new_rec.message_text$=msg$(x,40)
                new_rec$=field(new_rec$)
                writerecord(new_file)new_rec$
            endif
        next x
    wend
end_of_msgs:
    close (new_file,err=*next)
    new_file=0
return

make_masks:

rem --- First try to create the ars_custdflt record"

    sys01_dev=unt
    open (sys01_dev,err=no_masks)source_folder$+"/"+cvs("sys-01",version_cvs)

    new_file=unt
    datafile$=cvs("ars_custdflt",8)
    table_alias$="ARS_CUSTDFLT"
    open (new_file,err=*next)destin_folder$+"/"+datafile$;goto get_custdflt_template
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$)
        print "   Could not create the customer default table. Data skipped."
        print (err_dev) "Could not create the customer default table. Data skipped."
        goto no_cust_default
    endif
    new_file=unt
    open (new_file)destin_folder$+"/"+datafile$
get_custdflt_template:
    dim ids$[1],templates$[1]
    ids$[1]="ARS_CUSTDFLT"
    call stbl("+DIR_PGM")+"adc_template.aon",1,1,ids$[all],templates$[all],status
    if status 
        print "   Could not find v8 template file for ARS_CUSTDFLT. Data skipped."
        print (err_dev) "Could not find v8 template file for ARS_CUSTDFLT. Data skipped."
        goto no_cust_default
    endif
    dim new_rec$:templates$[1]
read_dflt_hdr:
    read(sys01_dev,end=no_cust_default)sys01_0$,sys01_1$,sys01_2$,sys01_3$
    if len(sys01_0$)<>6 goto read_dflt_hdr
    if pos("AR00"=sys01_0$(3))<>1 goto read_dflt_hdr
    new_rec.firm_id$=sys01_0$(1,2)
    new_rec.record_id_d$="D"
    new_rec.disc_code$=sys01_3$(50,2)
    new_rec.territory$=sys01_3$(52,3)
    new_rec.slspsn_code$=sys01_3$(55,3)
    new_rec.tax_code$=sys01_3$(58,2)
    new_rec.ar_terms_code$=sys01_3$(60,2)
    new_rec.ar_dist_code$=sys01_3$(62,2)
    new_rec.customer_inv_his$=sys01_3$(78,1)
    gosub check_blank_codes
    new_rec$=field(new_rec$)
    writerecord(new_file)new_rec$
    goto read_dflt_hdr

    check_blank_codes:
rem --- translate any codes from custdflt if listed in flat file "field_translations" 

    tmp$=fattr(new_rec$,"")
    tmp=pos($0A$=tmp$,1,0)
    dim tmp_fieldlist$:"name["+str(tmp)+"]:c(20*)"
    tmp_fieldlist$=tmp$

        for field=1 to tmp
        value$=field(new_rec$,tmp_fieldlist.name$[field])
        translate_value!=field_translations!.get(tmp_fieldlist.name$[field]+"."+cvs(value$,3))
        if translate_value!<>null()
            translate_value$=str(translate_value!)
            field new_rec$,tmp_fieldlist.name$[field]=translate_value$
        endif
    next field

        return

no_cust_default:
    masks_dev=unt
    open (masks_dev)stbl("+DIR_BRA")+"ads_masks.dat"
    comp_id$=stbl("+AON_APPCOMPANY")

    rem --- Get templates for masks"

    readrecord(ddm_table_tpls,key=pad("ADS_MASKS",16))ddm_table_tpls$
    dim ads_masks$:ddm_table_tpls.template$

    rem --- Do the Masks

    old_file=unt
    open (old_file)source_folder$+"/"+cvs("sys-01",version_cvs)
    while 1
        read(old_file,end=*break)a0$,a1$,a2$,a3$,a4$,a5$,a6$,a7$,a8$,a9$,a10$

        if len(a0$)<>6 continue
        if num(a0$(1,2),err=*continue)=0 continue
        if a0$(5,2)<>"00" continue
        if pos(a0$(3,2)="APARBMGLIVPRSFWO",2)=0 continue
        if a0$(3,2)="WO" a0$(3,2)="SF";rem convert v7 Shop Floor to v6 Work Orders
        if a0$(3,2)<>"BM"
            if pos(a0$(3,2)="IVWO",2)=0
                dim ads_masks$:fattr(ads_masks$)
                ads_masks.firm_id$=a0$(1,2)
                ads_masks.asc_comp_id$=comp_id$
                ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                ads_masks.dd_mask_type$="I"
                id$=cvs(a5$,3)
                if len(id$)>0
                    for id=1 to len(id$)
                        if a0$(3,2)="GL"
                            if id$(id,1)="#" id$(id,1)="0"
                        endif
                        if pos(a0$(3,2)="ARAPPR",2)
                            if id$(id,1)="0" id$(id,1)="U"
                        endif
                    next id
                endif
                a5$=id$
                ads_masks.dd_attr_mski$=cvs(a5$,3)
                ads_masks.dd_attr_msko$=cvs(a5$,3)
                ads_masks$=field(ads_masks$)
                if cvs(a1$,3)<>"" or cvs(a5$,3)<>""
                    writerecord(masks_dev)ads_masks$
                endif    
            endif    

            dim ads_masks$:fattr(ads_masks$)
            ads_masks.firm_id$=a0$(1,2)
            ads_masks.asc_comp_id$=comp_id$
            ads_masks.asc_prod_id$=pad(a0$(3,2),3)
            ads_masks.dd_mask_type$="A"
            ads_masks.dd_attr_mski$=cvs(a6$,3)
            ads_masks.dd_attr_msko$=cvs(a6$,3)
            ads_masks$=field(ads_masks$)
            if cvs(a6$,3)<>""
                writerecord(masks_dev)ads_masks$
            endif

            dim ads_masks$:fattr(ads_masks$)
            ads_masks.firm_id$=a0$(1,2)
            ads_masks.asc_comp_id$=comp_id$
            ads_masks.asc_prod_id$=pad(a0$(3,2),3)
            ads_masks.dd_mask_type$="U"
            ads_masks.dd_attr_mski$=cvs(a7$,3)
            ads_masks.dd_attr_msko$=cvs(a7$,3)
            ads_masks$=field(ads_masks$)
            if cvs(a7$,3)<>""
                writerecord(masks_dev)ads_masks$
            endif    

            dim ads_masks$:fattr(ads_masks$)
            ads_masks.firm_id$=a0$(1,2)
            ads_masks.asc_comp_id$=comp_id$
            ads_masks.asc_prod_id$=pad(a0$(3,2),3)
            ads_masks.dd_mask_type$="R"
            if a0$(3,2)="GL"
                ads_masks.dd_mask_type$="P"
            endif
            if a0$(3,2)="IV"
                ads_masks.dd_mask_type$="C"
            endif
            ads_masks.dd_attr_mski$=cvs(a8$,3)
            ads_masks.dd_attr_msko$=cvs(a8$,3)
            ads_masks$=field(ads_masks$)
            if cvs(a8$,3)<>""
                writerecord(masks_dev)ads_masks$
            endif    

            if a0$(3,2)="IV"
                dim ads_masks$:fattr(ads_masks$)
                ads_masks.firm_id$=a0$(1,2)
                ads_masks.asc_comp_id$=comp_id$
                ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                ads_masks.dd_mask_type$="P"
                ads_masks.dd_attr_mski$=cvs(a9$,3)
                ads_masks.dd_attr_msko$=cvs(a9$,3)
                ads_masks$=field(ads_masks$)
                if cvs(a9$,3)<>""
                    writerecord(masks_dev)ads_masks$
                endif

                    dim ads_masks$:fattr(ads_masks$)
                ads_masks.firm_id$=a0$(1,2)
                ads_masks.asc_comp_id$=comp_id$
                ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                ads_masks.dd_mask_type$="V"
                ads_masks.dd_attr_mski$=cvs(a10$,3)
                ads_masks.dd_attr_msko$=cvs(a10$,3)
                ads_masks$=field(ads_masks$)
                if cvs(a10$,3)<>""
                    writerecord(masks_dev)ads_masks$
                endif    
            endif
        else
            dim ads_masks$:fattr(ads_masks$)
            ads_masks.firm_id$=a0$(1,2)
            ads_masks.asc_comp_id$=comp_id$
            ads_masks.asc_prod_id$=pad(a0$(3,2),3)
            ads_masks.dd_mask_type$="H"
            ads_masks.dd_attr_mski$=cvs(a1$,3)
            ads_masks.dd_attr_msko$=cvs(a1$,3)
            ads_masks$=field(ads_masks$)
            if cvs(a1$,3)<>""
                writerecord(masks_dev)ads_masks$
            endif    

            dim ads_masks$:fattr(ads_masks$)
            ads_masks.firm_id$=a0$(1,2)
            ads_masks.asc_comp_id$=comp_id$
            ads_masks.asc_prod_id$=pad(a0$(3,2),3)
            ads_masks.dd_mask_type$="Q"
            ads_masks.dd_attr_mski$=cvs(a1$,3)
            ads_masks.dd_attr_msko$=cvs(a1$,3)
            ads_masks$=field(ads_masks$)
            if cvs(a1$,3)<>""
                writerecord(masks_dev)ads_masks$
            endif    

            dim ads_masks$:fattr(ads_masks$)
            ads_masks.firm_id$=a0$(1,2)
            ads_masks.asc_comp_id$=comp_id$
            ads_masks.asc_prod_id$=pad(a0$(3,2),3)
            ads_masks.dd_mask_type$="M"
            ads_masks.dd_attr_mski$=cvs(a2$,3)
            ads_masks.dd_attr_msko$=cvs(a2$,3)
            ads_masks$=field(ads_masks$)
            if cvs(a2$,3)<>""
                writerecord(masks_dev)ads_masks$
             endif   

            dim ads_masks$:fattr(ads_masks$)
            ads_masks.firm_id$=a0$(1,2)
            ads_masks.asc_comp_id$=comp_id$
            ads_masks.asc_prod_id$=pad(a0$(3,2),3)
            ads_masks.dd_mask_type$="O"
            ads_masks.dd_attr_mski$=cvs(a3$,3)
            ads_masks.dd_attr_msko$=cvs(a3$,3)
            ads_masks$=field(ads_masks$)
            if cvs(a3$,3)<>""
                writerecord(masks_dev)ads_masks$
            endif    
        endif
    end_mask:
    wend

    no_masks:
    return
    
convert_po_files:

    po_hdr$=po_file!
    rem --- open hdr file - 
    rem --- Open manually, because we want to open in our target dir, 
    rem --- which isn't necessarily the data dir specified in ddm_tables.
    rem --- So use open_tables to just return actual file name and template for the alias,
    rem --- then open using destin_folder$

    num_files=1
    dim rd_open_tables$[1:num_files],rd_open_opts$[1:num_files],rd_open_chans$[1:num_files],rd_open_tpls$[1:num_files]
    rd_open_tables$[1]=po_hdr$,rd_open_opts$[1]="TA"
    gosub open_tables
    po_hdr_dev=unt
    po_hdr_file$=rd_open_tables$[1]
    dim po_hdr_rec$:rd_open_tpls$[1]
    po_hdr_file$=po_hdr_file$(max(pos("/"=po_hdr_file$,-1,1),pos("\"=po_hdr_file$,-1,1))+1)
    open (po_hdr_dev,err=hdr_open_err)destin_folder$+"/"+po_hdr_file$

    rem --- get key template and load it w/ key fields from detail rec
    call stbl("+DIR_SYP")+"bac_key_template.bbj",po_hdr$,"",key_fieldlist$,rd_table_chans$[all],rd_stat$
    key_fields=pos(","=key_fieldlist$,1,0)+1            
    dim key_fields$:"name["+str(key_fields)+"]:c(20*)"
    dim po_hdr_key$:key_fieldlist$
    key_fields$=fattr(po_hdr_key$,"")
    for xwk=1 to key_fields
        field po_hdr_key$,key_fields.name$[xwk] = field(new_rec$,key_fields.name$[xwk])
    next xwk
    
    rem --- read header and update cust/order/shipto w/ data from old detail rec, set dropship flag
    read record (po_hdr_dev,key=po_hdr_key$)po_hdr_rec$
    if cvs(po_hdr_rec.customer_id$,3)<>"" and cvs(po_hdr_rec.customer_id$,3)<>cvs(old_rec.customer_nbr$,3)
        rem --- put out log entry that the po (req, po or receipt) refers to more than one cust/order
        print (err_dev)"There appears to be more than one customer order referenced in "+po_hdr_file$+" key "+po_hdr_key$+"."
        print (err_dev)"Replacing customer "+po_hdr_rec.customer_id$+" with "+old_rec.customer_nbr$+"."
    endif
    po_hdr_rec.dropship$="Y"
    po_hdr_rec.customer_id$=old_rec.customer_nbr$
    po_hdr_rec.order_no$=old_rec.order_number$
    po_hdr_rec.shipto_no$=old_rec.shipto_nbr$
    po_hdr_rec$=field(po_hdr_rec$)
    
    rem --- now read cust ship-to or cust mast and fill in po hdr's dropship address fields
    if cvs(old_rec.shipto_nbr$,3)=""
        arm_custmast_dev=unt
        dim rec$:arm_custmast_tpl$
        addr_file$="arm-01"
        open (arm_custmast_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
        while 1
            read record (arm_custmast_dev,key=po_hdr_rec.firm_id$+po_hdr_rec.customer_id$,dom=*break)rec$
            po_hdr_rec.ds_name$=rec.customer_name$            
            gosub fill_dropship_address
            break
        wend
        close (arm_custmast_dev)       
    else
        if num(cvs(old_rec.shipto_nbr$,3))>0 and num(cvs(old_rec.shipto_nbr$,3))<99
            arm_custship_dev=unt
            dim rec$:arm_custship_tpl$
            addr_file$="arm-03"
            open (arm_custship_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
            while 1
                read record (arm_custship_dev,key=po_hdr_rec.firm_id$+po_hdr_rec.customer_id$+po_hdr_rec.shipto_no$,dom=*break)rec$
                po_hdr_rec.ds_name$=rec.name$
                gosub fill_dropship_address
                break
            wend
            close (arm_custship_dev)          
        else
            if num(cvs(old_rec.shipto_nbr$,3))=99
                rem --- read ope31 or opt-01/31 for manual (99) shipto
                ope_ordship_dev=unt
                dim rec$:ope_ordship_tpl$
                addr_file$="ope-31"
                order_found=0
                open (ope_ordship_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
                while 1
                    read record (ope_ordship_dev,key=po_hdr_rec.firm_id$+po_hdr_rec.customer_id$+po_hdr_rec.order_no$,dom=*break)rec$
                    po_hdr_rec.ds_name$=rec.name$            
                    gosub fill_dropship_address
                    order_found=1
                    break
                wend
                close (ope_ordship_dev)
                if !order_found
                    opt_invhdr_dev=unt
                    dim opt_invhdr$:opt_invhdr_tpl$
                    addr_file$="opt-01"
                    open (opt_invhdr_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
                    opt_invship_dev=unt
                    dim rec$:opt_invship_tpl$
                    addr_file$="opt-31"
                    open (opt_invship_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
                    while 1
                        read record (opt_invhdr_dev,key=po_hdr_rec.firm_id$+opt_invhdr.ar_type$+po_hdr_rec.customer_id$+po_hdr_rec.order_no$,knum="AO_CUST_ORD",dom=*break)opt_invhdr$
                        read record (opt_invship_dev,key=po_hdr_rec.firm_id$+po_hdr_rec.customer_id$+opt_invhdr.ar_inv_no$,dom=*break)rec$
                        po_hdr_rec.ds_name$=rec.name$            
                        gosub fill_dropship_address
                        break
                    wend
                    close (opt_invhdr_dev)
                    close (opt_invship_dev)
                endif                           
            else
                rem --- invalid shipto
                po_hdr_rec.addr_line_1$="Unknown address"
            endif
        endif
    endif
    write record (po_hdr_dev)po_hdr_rec$
    
return

    hdr_open_err:
    
    rd_meter_data$="PO header file" + po_hdr_file$ + "not found in destination directory. Dropship info not converted."
    rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
    rd_meter_action$="LST"
    gosub disp_meter
    print (err_dev)"Processing PO detail file " + new_datafile$ + ", record: " + old_rec$+"."+$0a$+"Cannot convert dropship fields because corresponding PO header file not found."
    
return

    addr_open_err:
    
    rd_meter_data$="File" + addr_file$ + "not found in destination directory. Dropship address not converted."
    rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
    rd_meter_action$="LST"
    gosub disp_meter
    print (err_dev)"Processing PO detail file " + new_datafile$ + ", record: " + old_rec$+"."+$0a$+"Cannot insert dropship address in header file because file "+addr_file$+" not found."

return

fill_dropship_address:

    po_hdr_rec.ds_addr_line_1$=rec.addr_line_1$
    po_hdr_rec.ds_addr_line_2$=rec.addr_line_2$
    po_hdr_rec.ds_addr_line_3$=rec.addr_line_3$
    po_hdr_rec.ds_addr_line_4$=rec.addr_line_4$
    po_hdr_rec.ds_city$=rec.city$
    po_hdr_rec.ds_state_cd$=rec.state_code$
    po_hdr_rec.ds_zip_code$=rec.zip_code$
    
return

get_new_template:
    new_datafile$=cvs(datafile$,8)
    file_id$=ddm03.file_name$+ddm03.record_id$
    file_id! = file_xref!.get(cvs(file_id$,7))
    if file_id!<>null() then
       rem ' found mapping for filename+record id
       file_id$ = str(file_id!)
       if len(file_id$)>7 then
          rem ' Longer new-style filename
          new_datafile$ = cvs(file_id$,8)
       else
          rem ' Drop the record id from the old-style filename
          new_datafile$=cvs(file_id$(1,len(file_id$)-1),8)
       endif
    else
       file_id! = file_xref!.get(cvs(datafile$,7))
       if file_id!<>null() then
          rem ' found mapping for filename
          file_id$ = str(file_id!)+ddm03.record_id$
          new_datafile$ = cvs(str(file_id!),8)
       endif
    endif

    table_alias! = file_alias!.get(cvs(file_id$,7))
    table_alias$ = iff(table_alias!=null(),"",cvs(str(table_alias!),3))
    print "Table Alias: ",table_alias$
    if table_alias$="" then
       print "   Data File "+file_id$+" will not be ported"
       print (err_dev)"   Data File "+file_id$+" will not be ported"
       goto eof
    endif

    call stbl("+DIR_SYP")+"bac_key_template.bbj",table_alias$,"",key_temp$,rd_table_chans$[all],rd_stat$
    while pos(",reserved_str:c(1)"=key_temp$)<>0
        key_temp$=key_temp$(1,pos(",reserved_str:c(1)"=key_temp$)-1)+key_temp$(pos(",reserved_str:c(1)"=key_temp$)+18)
    wend
    if cvs(key_temp$,2)<>""
        dim key_temp$:key_temp$
        key_temp$=fattr(key_temp$,"")
    endif

    findrecord(ddm_table_tpls,key=pad(table_alias$,16),dom=check_for_definition)ddm_table_tpls$
    dim new_rec$:ddm_table_tpls.template$
    new_fields$=$0a$+fattr(new_rec$,"")

    new_file=unt
    open (new_file,err=check_for_definition)destin_folder$+"/"+new_datafile$
    lock (new_file)
    a=msgbox(new_datafile$+" already exists in destination folder. Do you want to overwrite data?",3+32+65536,"DataPort")
    if a=6 then
       close (new_file)
       erase destin_folder$+"/"+new_datafile$
       goto check_for_definition
    endif
    if a=7 then
       goto eof; rem ' No-Skip
    endif
    if a=2 then
       goto eoj; rem ' Cancel-Exit
    endif
return; rem ' get_new_template

check_for_definition:
    new_file=0
    find (ddm_tables,key=pad(table_alias$,16),dom=undefined_file)
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+new_datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$) then
       print "*** ERROR ***: Couldn't create "+new_datafile$+$0a$+status$
       print (err_dev)"*** ERROR ***: Couldn't create "+new_datafile$+$0a$+status$
       goto eof
    endif
    print "   New file "+new_datafile$+" created in folder "+destin_folder$
    print (log_dev)"   New file "+new_datafile$+" created"

    new_file=unt
    open (new_file)destin_folder$+"/"+new_datafile$
    lock (new_file)
    xfid$=xfid(new_file)
    xfin$=$$
    keysize=dec(xfid$(2,4))
    if keysize then
       call stbl("+DIR_SYP")+"bac_create_xfin.bbj",table_alias$,xfin$,rd_table_chans$[all],status$
       if len(status$) then
          escape
       endif
    endif

    rem --- see if this table has any new fields (i.e., that weren't in v6)
    rem --- if so, set default value based on new_field_defaults flat file
    rem --- new_rec$ only dim'd once/file, so setting the values once here should carry into every record
    if source_version=6
        new_rec_fields!=new_field_defaults!.keySet().iterator()
        while new_rec_fields!.hasNext()
            new_rec_field$ = str(new_rec_fields!.next())
            if pos(cvs(table_alias$,3)=new_rec_field$)=1
                new_rec_value$=new_field_defaults!.get(new_rec_field$)
                new_rec_fieldname$=new_rec_field$(pos("."=new_rec_field$)+1)
                field new_rec$,new_rec_fieldname$=new_rec_value$
            endif
        wend
    endif
    
return

undefined_file:
    print "   Data File "+file_id$+" will not be ported"
    print (err_dev)"   Data File "+file_id$+" will not be ported"
    goto eof
return

set_new_fieldname:
    new_fieldname$=""

    if old_fieldname$="RESERVED_STR" then
       old_fieldname$="RESERVED_STR_02"
    endif

    if pos("RESERVED_STR_0"=old_fieldname$) or pos("RESERVED_NUM"=old_fieldname$) then
       new_fieldname$=""
       return
    endif

    if pos($0a$+old_fieldname$+$0a$=new_fields$) then
       new_fieldname$=old_fieldname$
    endif

    if new_fieldname$<>"" and new_fieldname$<>"RESERVED_STR" then
       return
    endif

    if source_version=6 and table_alias$="IVC_PRODCODE" and old_fieldname$="RESERVED_STR" then
       new_fieldname$="SA_LEVEL"
       goto check_fieldlist
    endif

    if pos("INV_DUE_DATE_"=old_fieldname$) then
       new_fieldname$="INV_DUE_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("SLS_INV_DATE_"=old_fieldname$) then
       new_fieldname$="SLS_INV_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("INV_OH_DATE_"=old_fieldname$) then
       new_fieldname$="INV_OH_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_INV_DUE_"=old_fieldname$) then
       new_fieldname$="NO_INV_DUE_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_ORD_SHIP_"=old_fieldname$) then
       new_fieldname$="NO_ORD_SHIP_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_LNS_REC_"=old_fieldname$) then
       new_fieldname$="NO_LNS_REC_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_INV_DATE_"=old_fieldname$) then
       new_fieldname$="NO_INV_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_INV_BYDT_"=old_fieldname$) then
       new_fieldname$="NO_INV_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("EARN_DEDUCT_"=old_fieldname$) then
       new_fieldname$="EARNDEDUCT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    keyval$ = table_alias$+"."+old_fieldname$
    new_fieldname! = field_file_xref!.get(keyval$)
    if new_fieldname! = null() then
       new_fieldname$ = ""
    else
       new_fieldname$=str(new_fieldname!)
       goto check_fieldlist
    endif

    keyval$=old_fieldname$
    new_fieldname! = field_name_xref!.get(keyval$)
    if new_fieldname! = null() then
       new_fieldname$ = ""
       return
    else
       new_fieldname$=str(new_fieldname!)
    endif

check_fieldlist:

    if pos($0a$+new_fieldname$+$0a$=new_fields$)=0 then
       new_fieldname$=""
    endif

return; rem ' set_new_fieldname

reformat_address:

    if addr_lines=5 then
       address$=pad(old_rec.addr_line_1$,24)+pad(old_rec.addr_line_2$,24)+pad(old_rec.addr_line_3$,24)+pad(old_rec.addr_line_4$,24)+pad(old_rec.addr_line_5$,24)
    endif
    if addr_lines=3 then
       address$=pad(old_rec.addr_line_1$,24)+pad(old_rec.addr_line_2$,24)+pad(old_rec.addr_line_3$,24)
    endif
    dim state$(2),city$(24)
    states$="ALAKAZARCACOCTDEDCFLGAHIIDILINIAKSKYLAMEMDMAMIMNMSMOMTNENVNHNJNMNYNCNDOHOKORPAPRRISCSDTNTXUTVTVAVIWAWVWIWY"
    states$=states$+"ABBCMBNBNLNSNTNUONPEQCSKYT"; rem ' Canadian province/territory codes
    if len(address$) and len(address$)/24 then
       for x=len(address$) to 1 step -24
           string1$=cvs(address$(x-23,24),2)
           if string1$="" then
              continue
           endif
           if len(string1$)<2 then
              city$(1)=string1$,address$(x-23,24)=""
              break
           endif
           if len(string1$)=2 then
              break
           endif
           if len(string1$)>2 and string1$(len(string1$)-2,1)<>" " then
              city$(1)=""
              break
           endif
           string2$=string1$(len(string1$)-1,2)
           if pos(string2$=states$,2)=0 then
              city$(1)=""
              break
           endif
           state$=string2$
           if len(string1$)=2 then
              if x>1 then
                 city$(1)=address$(x-47,24)
                 address$(x-47,48)=""
              endif
           else
              city$(1)=address$(x-23,len(string1$)-3)
              address$(x-23,24)=""
           endif
           string1$=cvs(city$,2)
           if len(string1$) and string1$(len(string1$),1)="," then
              string1$=string1$(1,len(string1$)-1)
           endif
           city$(1)=string1$
           break
       next x
    endif

    REM ' TODO: More detail here?
    if city$="" or state$="" then
       print(err_dev)"Error copying address fields"
    endif

    new_rec.addr_line_1$=address$(1,24)
    new_rec.addr_line_2$=address$(25,24)
    if pos("ADDR_LINE_3"=fattr(new_rec$))<>0 then new_rec.addr_line_3$=address$(49,24)
    if addr_lines=5 then
       new_rec.addr_line_4$=address$(73,24)
    endif
    new_rec.city$=city$
    new_rec.state_code$=state$
return; rem ' reformat_address

disp_meter:rem --- Display Progress Meter

    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",rdSysGUI!,rdForm!,rdMeterWin!,rd_meter_title$,rd_meter_total_recs,rd_meter_proc_recs,rd_meter_data$,rd_meter_action$

    return


open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       rd_open_beg,
:       rd_open_end,
:       rd_open_tables$[all],
:       rd_open_opts$[all],
:       rd_open_chans$[all],
:       rd_open_tpls$[all],
:       rd_table_chans$[all],
:       rd_open_batch,
:       rd_open_status$

    if rd_open_status$<>""
        rd_msg_id$="ENTRY_OPEN_ERROR"
        dim rd_msg_tokens$[1]
        rd_msg_tokens$[1]=rd_open_status$
        gosub disp_message
        release
    endif

    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",rd_msg_id$,rd_msg_tokens$[all],rd_msg_opt$,rd_table_chans$[all]
    return

eoj:
   a=msgbox("Exit from DataPort?",4+32+256,"DataPort")
   if a=6 then
      release
   endif
   if a=7 then
      a=msgbox("Continuing DataPort..")
      goto eof
   endif