rem DataPort Data File Conversion Utility (Template creation program)
rem Program create_template.bbj v8.0.0 28Oct07
rem
rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Feb2006 |
rem  |  Copyright (c) 1981-2006 AddonSoftware  |
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+
rem
rem --- This overlay creates templates for version 6/7 data files using
rem --- the Addon dictionary files ddm-01, ddm-03 and ddm-04 and then
rem --- copies to Addon 8 data files after performing date format changes.
rem --- Normalization of data files will also be done in this program.
rem

    setesc std_error
    seterr std_error

    use java.io.File
    use java.util.Vector

rem --- Dictionary file templates
dim ddm01$:"data_name:c(12*),description:c(30),lstrev:c(6),data_type:c(1),reserved_str:c(68*),fld_length:n(3*),display_len:n(3*),reserved_num:n(1*)"
dim ddm03$:"file_name:c(6),record_id:c(1*),description:c(30),reserved_str:c(33*),reserved_num:n(3*)"
dim ddm04$:"file_name:c(6),record_id:c(1),layout_seq:c(3*),data_name:c(12),reserved_str1:c(41),fld_sep:c(1),reserved_str2:c(68*),reserved_num:n(1*),fld_repeats:n(3*),fld_occurs:n(3)"

rem --- Open files and/or retrieve templates that may be needed for PO file conversion

    num_files=7
    dim rd_open_tables$[1:num_files],rd_open_opts$[1:num_files],rd_open_chans$[1:num_files],rd_open_tpls$[1:num_files]
    rd_open_tables$[1]="ADS_SEQUENCES",rd_open_opts$[1]="OTA"
    rd_open_tables$[2]="ARM_CUSTMAST",rd_open_opts$[2]="T"
    rd_open_tables$[3]="ARM_CUSTSHIP",rd_open_opts$[3]="T"
    rd_open_tables$[4]="OPE_ORDSHIP",rd_open_opts$[4]="T"
    rd_open_tables$[5]="OPT_INVSHIP",rd_open_opts$[5]="T"
    rd_open_tables$[6]="OPE_ORDHDR",rd_open_opts$[6]="T"
    rd_open_tables$[7]="OPT_INVHDR",rd_open_opts$[7]="T"
    
    gosub open_tables
    
    ads_sequences_dev=num(rd_open_chans$[1]),ads_sequences_tpl$=rd_open_tpls$[1]
    arm_custmast_tpl$=rd_open_tpls$[2]
    arm_custship_tpl$=rd_open_tpls$[3]
    ope_ordship_tpl$=rd_open_tpls$[4]
    opt_invship_tpl$=rd_open_tpls$[5]
    ope_ordhdr_tpl$=rd_open_tpls$[6]
    opt_invhdr_tpl$=rd_open_tpls$[7]
    
rem --- initialization

    source_version = num(callpoint!.getDevObject("source_version"))
    version_cvs = iff(source_version=6,4,8)
    source_folder$ = callpoint!.getDevObject("source_folder")
    destin_folder$ = callpoint!.getDevObject("destin_folder")
    vectPort! = callpoint!.getDevObject("vectPort")
	
    dictfile$=stbl("+DIR_BRD")
    dictpgm$=stbl("+DIR_SYP")
    filedir$=stbl("+DATAPORT_FILES")
    logdir$=stbl("+DATAPORT_LOGS")

    mkdir logdir$,err=*next

    logfile$=logdir$+"DataPort_"+DATE(0:"%Mz%Dz%Yz")+"_"+DATE(0:"%Hz%mz")+".txt"
    erase logfile$,err=create_logfile
    create_logfile:
    string logfile$
    log_dev=unt
    open (log_dev)logfile$
    print (log_dev)"DataPort Start Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "+$0a$

    print (log_dev)" Porting Addon "+str(source_version)+" data files from folder "+source_folder$+" to "+destin_folder$+$0a$

    errfile$=logdir$+"DataPortError_"+DATE(0:"%Mz%Dz%Yz")+"_"+DATE(0:"%Hz%mz")+".txt"
    erase errfile$,err=create_errfile
    create_errfile:
    string errfile$
    err_dev=unt
    open (err_dev)errfile$
    print (err_dev)"DataPort Start Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "+$0a$

    print (err_dev)" Porting Addon "+str(source_version)+" data files from folder "+source_folder$+" to "+destin_folder$+$0a$

rem --- Disable triggers found in data directories
    rd_dbserver$="localhost"
    rd_dbserver$=stbl("+DBSERVER",err=*next)
    rd_dbport=2002
    rd_dbport=num(stbl("+DBPORT",err=*next),err=*next)
    rd_dbssl=0
    rd_dbssl=num(stbl("+DBSSL",err=*next),err=*next)
    rd_user$="admin"
    rd_user$=stbl("+USER_ID",err=*next)
    rd_password$="admin123"
    rdNSGroup!=BBjAPI().getGroupNamespace()
    rdNSAdmin!=BBjAPI().getNamespace("adminobjects","barista",1)
    rdAdmin!=rdNSAdmin!.getValue("+bar_admin_"+cvs(rd_user$,11),err=*next)
    if rdAdmin!<>null() then
        rd_user$=rdAdmin!.getUser()
        rd_password$=rdAdmin!.getPassword()
    endif
    aAdminBase!=com.basis.api.admin.BBjAdminFactory.getBBjAdmin(java.net.InetAddress.getByName(rd_dbserver$),rd_dbport,rd_dbssl,rd_user$,rd_password$)
    disabledTriggers!=BBjAPI().makeVector()
    dataDirs!=BBjAPI().makeVector()
    dataDirs!.addItem(source_folder$); rem --- DataPort source directory
    dataDirs!.addItem(destin_folder$); rem --- DataPort destination directory
    dataDirs!.addItem(stbl("+DIR_DAT")); rem --- Data directory for current Addon instance
    dirsIter!=dataDirs!.iterator()
    while dirsIter!.hasNext()
        triggerDir!=new File(dirsIter!.next())
        triggers!=new Vector(java.util.Arrays.asList(triggerDir!.listFiles(new TriggerFilter())))
        if triggers!.size() then
            iter!=triggers!.iterator()
            while iter!.hasNext()
                trigger$=iter!.next().getAbsolutePath()
                trigger$=trigger$(1,pos(".trigger"=trigger$,-1)-1)
                aAdminTriggers!=aAdminBase!.getTriggers(trigger$)
                enable!=aAdminTriggers!.getBoolean(BBjAdminTriggers.ENABLED)
                if enable! then
                    aAdminTriggers!.setBoolean(BBjAdminTriggers.ENABLED, 0)
                    aAdminTriggers!.commit()
                    disabledTriggers!.addItem(trigger$)
                    print "Disabled triggers for: ",trigger$
                    print (log_dev)"Disabled triggers for: ",trigger$
                endif
            wend
        endif
    wend

rem --- Set the hook for dealer custom call

    dropship$="N"
    invalid_date$="N"
    dupe_rec$="N"
    blank_fields$=""
    custom_prog$=""
    while 1
        custom_prog$=cvs(stbl("+CUSTOM_DP_PROG",err=*break),3)
        if custom_prog$<>""
            addr custom_prog$,err=*next;break
            custom_prog$=""
        endif
        break
    wend

rem --- Get current Customer and Vendor number sizes

	custSizeMap! = new java.util.HashMap()
	vendSizeMap! = new java.util.HashMap()
	dim key$(6)
    sys01_dev=unt
    open (sys01_dev)source_folder$+"/"+cvs("sys-01",version_cvs)
	while 1
		key$(1)=key(sys01_dev,end=*break)
		firm$=key$(1,2)
		rec$=key$(3)
		switch (BBjAPI().TRUE)
			case rec$ = "AR00"
				rem --- Customer number size
				dim p2$(6)
				read(sys01_dev)*,*,p2$(1)
				custSizeMap!.put(firm$,num(p2$(1,2)))
				break
			case rec$ = "AP00"
				rem --- Vendor number size
				dim p2$(4)
				read(sys01_dev)*,*,p2$(1)
				vendSizeMap!.put(firm$,num(p2$(1,2)))
				break
			case default
				read(sys01_dev)
				break
		swend

	wend
	close(sys01_dev)
	
rem --- Set the Temporary Vendor Number here

    temp_vend$=""
    temp_vend_ok$=""
    temp_vend$=stbl("+DP_TEMP_VEND",err=*next)
    if len(temp_vend$)>6 temp_vend$=""
    if len(temp_vend$)>1
        temp_vend$=pad(temp_vend$,6,"L","0")
    endif

rem --- Set the number of years to add here

    add_year=0
    add_year=num(stbl("+DEMO_DATE_INCREMENT",err=open_files))

open_files:
rem --- Open files

ddm01=unt
open (ddm01)source_folder$+"/"+cvs("ddm-01",version_cvs)
lock(ddm01)

ddm03=unt
open (ddm03)source_folder$+"/"+cvs("ddm-03",version_cvs)

ddm04=unt
open (ddm04)source_folder$+"/"+cvs("ddm-04",version_cvs)

ddm_table_tpls = unt
open (ddm_table_tpls)dictfile$+"ddm_table_tpls.dat"
dim ddm_table_tpls$:"table_name:c(16*),file_name:c(30*),template:c(10230*)"

ddm_tables = unt
open (ddm_tables)dictfile$+"ddm_tables.dat"

rem --- Load xref files into memory

rd_meter_data$="Loading aliases..."
rd_meter_action$="WIN-LST-OK"
rd_meter_title$="DataPort"
gosub disp_meter

rem --- read file_alias into hash map

file_alias! = new java.util.HashMap()
dim file_alias$:"file_id:c(16*=124),alias:c(16*=)"
file_alias = unt
open (file_alias)filedir$+"file_alias"
while 1
   read (file_alias,end=*break)file_alias$
   if len(file_alias$) then
      keyval$ = cvs(file_alias.file_id$,7)
      dataval$ = cvs(file_alias.alias$,7)
      if file_alias!.get(keyval$)=null() then
         file_alias!.put(keyval$,dataval$)
      else
         print "*** skip duplicate file_alias: ",file_alias$
      endif
   endif
wend
close (file_alias)

rem --- read file_xref into hash map

file_xref! = new java.util.HashMap()
dim file_xref$:"old_filename:c(16*=124),new_filename:c(16*=)"
file_xref = unt
open (file_xref)filedir$+"file_xref"
while 1
	read (file_xref,end=*break)file_xref$
	if len(file_xref$) then
		if len(cvs(file_xref.old_filename$,2))=7
			file_xref.old_filename$=cvs(file_xref.old_filename$(1,6),7)+file_xref.old_filename$(7,1)
		else
			file_xref.old_filename$=cvs(file_xref.old_filename$,7)
		endif
		keyval$ = cvs(file_xref.old_filename$,3)
		dataval$ = cvs(file_xref.new_filename$,3)
		file_xref!.put(keyval$,dataval$)
	endif
wend
close (file_xref)

rem --- read field_file_xref into hash map

field_file_xref! = new java.util.HashMap()
dim field_file_xref$:"alias:c(16*=124),old_fieldname:c(16*=124),new_fieldname:c(16*=)"
field_file_xref = unt
open (field_file_xref)filedir$+"field_file_xref"
while 1
   read (field_file_xref,end=*break)field_file_xref$
   if len(field_file_xref$) then
      keyval$ = cvs(field_file_xref.alias$,7)+"."+cvs(field_file_xref.old_fieldname$,7)
      dataval$ = cvs(field_file_xref.new_fieldname$,7)
      field_file_xref!.put(keyval$,dataval$)
   endif
wend
close (field_file_xref)

rem --- read field_name_xref into hash map

field_name_xref! = new java.util.HashMap()
dim field_name_xref$:"old_fieldname:c(16*=124),new_fieldname:c(16*=)"
field_name_xref = unt
open (field_name_xref)filedir$+"field_name_xref"
while 1
   read (field_name_xref,end=*break)field_name_xref$
   if len(field_name_xref$) then
      keyval$ = cvs(field_name_xref.old_fieldname$,7)
      dataval$ = cvs(field_name_xref.new_fieldname$,7)
      field_name_xref!.put(keyval$,dataval$)
   endif
wend
close (field_name_xref)

rem --- read internal_seq into hash map

internal_seq! = new java.util.HashMap()
dim int_seq$:"alias:c(16*=124),disp_seq:c(16*=124),int_seq:c(16*=)"
int_seq_xref = unt
open (int_seq_xref)filedir$+"internal_seq"
while 1
   read (int_seq_xref,end=*break)int_seq$
   if len(int_seq$) then
      keyval$ = cvs(int_seq.alias$,7)+"."+cvs(int_seq.disp_seq$,7)
      dataval$ = cvs(int_seq.int_seq$,7)
      internal_seq!.put(keyval$,dataval$)
   endif
wend
close (int_seq_xref)

rem --- read field_translations into hash map

field_translations! = new java.util.HashMap()
dim field_translations$:"fieldname:c(16*=124),old_value:c(16*=124),new_value:c(16*=)"
field_translations = unt
open (field_translations)filedir$+"field_translations"
while 1
   read (field_translations,end=*break)field_translations$
   if len(field_translations$) then
      keyval$ = cvs(field_translations.fieldname$,7)+"."+cvs(field_translations.old_value$,3)
      dataval$ = cvs(field_translations.new_value$,7)
      field_translations!.put(keyval$,dataval$)
   endif
wend
close (field_translations)

rem --- read new_field_defaults into hash map

new_field_defaults! = new java.util.HashMap()
dim new_field_defaults$:"filename:c(16*=124),fieldname:c(16*=124),default_value:c(16*=)"
new_field_defaults = unt
open (new_field_defaults)filedir$+"new_field_defaults"
while 1
   read (new_field_defaults,end=*break)new_field_defaults$
   if len(new_field_defaults$) then
      keyval$ = cvs(new_field_defaults.filename$,7)+"."+cvs(new_field_defaults.fieldname$,3)
      dataval$ = cvs(new_field_defaults.default_value$,7)
      new_field_defaults!.put(keyval$,dataval$)
   endif
wend
close (new_field_defaults)


rem --- read po_files into hash map

po_files! = new java.util.HashMap()
dim po_files$:"det_filename:c(16*=124),hdr_filename:c(16*=)"
po_files = unt
open (po_files)filedir$+"po_files"
while 1
   read (po_files,end=*break)po_files$
   if len(po_files$) then
      keyval$ = cvs(po_files.det_filename$,3)
      dataval$ = cvs(po_files.hdr_filename$,3)
      po_files!.put(keyval$,dataval$)
   endif
wend
close (po_files)

rem --- read sequence_no into hash map

seq_no_files! = new java.util.HashMap()
sequence_no! = new java.util.HashMap()
sequence_no_tpl$="seq_no_id:c(16*=124),v6_file:c(16*=124),v6_field:c(16*=124),v6_element_no:c(16*=124),v7_file:c(16*=124),v7_field:c(16*=124),v7_element_no:c(16*=)"
dim sequence_no$:sequence_no_tpl$
sequence_no = unt
open (sequence_no)filedir$+"sequence_no"
while 1
   read (sequence_no,end=*break)sequence_no$
   if len(sequence_no$) then
      keyval$ = cvs(sequence_no.seq_no_id$,3)
      dataval$ = cvs(sequence_no$,3)
      sequence_no!.put(keyval$,dataval$)
      if source_version=6
          old_file$=cvs(sequence_no.v6_file$,11)
      else
          old_file$=cvs(sequence_no.v7_file$,11)
      endif
      seq_no_files!.put(old_file$,"n")
   endif
wend
close (sequence_no)

rem --- Read sym-06 to get list of valid firms to be ported
sym06_dev=unt
open (sym06_dev)source_folder$+"/"+cvs("sym-06",version_cvs)
while 1
	read(sym06_dev,end=*break) sym06_0$
	firms$=firms$+sym06_0$
wend
close (sym06_dev)

rem --- misc init; set up meter
rd_meter_data$="DataPort Start Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")
rd_meter_proc_recs=rd_meter_total_recs
rd_meter_action$="LST"
gosub disp_meter


rd_meter_data$="Processing files . . ."
rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
rd_meter_action$="LST"
gosub disp_meter

rem --- Read the v6/v7 data directory
old_dir=unt
open (old_dir)source_folder$

next_file:
    if vectPort! = null() then
       readrecord (old_dir,end=end_read_loop)datafile$
    else
       datafile$ = str(vectPort!.removeItem(0),err=end_read_loop)
    endif

    datafile$=cvs(datafile$,version_cvs)
    rd_meter_data$="   "+datafile$
    rd_meter_action$="LST"
    gosub disp_meter

    if vectPort!.size(err=*endif) then
       rd_meter_proc_recs=rd_meter_proc_recs+1
       rd_meter_action$="MTR-"
       gosub disp_meter
    endif

    rem --- skip these files
    if pos("."=datafile$)=1 or
:   pos("_"=datafile$)=1 or
:   pos("z"=cvs(datafile$,8))=1 or
:   pos("dd"=cvs(datafile$,8))=1 or
:   pos("w-"=cvs(datafile$,8))=3 or
:   pos("sh"=cvs(datafile$,8))=1 or
:   pos(cvs(datafile$,8)="apm-04;apt-03;",7) or
:   pos(cvs(datafile$,8)="are-07;are-43;arm-04;art-43;art-53;",7) or
:   pos(cvs(datafile$,8)="bmm-04;bmm-06;",7)or
:   pos(cvs(datafile$,8)="glt-05;",7) or
:   pos(cvs(datafile$,8)="ivm-03;ivm-08;",7) or
:   pos(cvs(datafile$,8)="poe-31;poe-32;poe-33;poe-34;poe-41;poe-42;po3-43;poe-44;poe-52;poe-53;poe-54;pot-24;pot-34;pot-35;pot-44;",7) or
:   pos(cvs(datafile$,8)="sym-04;sym-49;sym-59;sym-69;sys-60;",7) or
:   pos(cvs(datafile$,8)="woe-03;wom-07;",7) then
        print "Skipped: ",datafile$
        print (log_dev)"Skipped: ",datafile$
        goto next_file
    endif

    rem --- If source POM-02 isn't available, then skip poe-11, poe-12, poe-13, poe-14 and pot-14
    if pos(cvs(datafile$,8)="poe-11;poe-12;poe-13;poe-14;pot-14",7) and !pom02_dev then
        found_pom02=0
        pom02_dev=unt
        open (pom02_dev,err=*next)source_folder$+"/"+cvs("pom-02",version_cvs);found_pom02=1
        if found_pom02 then
            readrecord(ddm_table_tpls,key=pad("POC_LINECODE",16))ddm_table_tpls$
            pom02_tpl$=ddm_table_tpls.template$
        else
            print "*** ERROR ***: ",datafile$," requires ",cvs("pom-02",version_cvs)
            print (log_dev)"*** ERROR ***: ",datafile$," requires ",cvs("pom-02",version_cvs)," for non-stock line items"
            print (err_dev)"*** ERROR ***: ",datafile$," requires ",cvs("pom-02",version_cvs)," for non-stock line items"
            goto next_file
        endif
    endif

    print "Data file: ",datafile$
    print (log_dev)"Data file: ",datafile$

    if cvs(datafile$,8)="sys-01" then
       normalize_sys01=1
       do_make_masks=1
    endif; rem ' sys-01

    rem --- Does this file contain sequence numbers that need to be processed separately later?
    if seq_no_files!.containsKey(cvs(datafile$,8)) then
        seq_no_files!.put(cvs(datafile$,8),"y")
        do_sequence_numbers=1
    endif
    
    rem --- Initialize and update glm-06 and adm-09/19/39
    if cvs(datafile$,8)="glm-06" then
        gosub init_update_glm06
        goto next_file
    endif

    rem --- Split old header/detail files into separate files
    switch pos(cvs(datafile$,8)="woe-11;woe-21;woe-31;",7)
        case 1; rem --- woe-11
            split_record_id$="A"
            header_keys_end_with$="00"
            headerfile$="wox-11"
            detailfile$="wox-12"

            rem --- Copy header records to temporary header file.
            header_file=1
            split_temp_file$=headerfile$
            split_temp_file_desc$="DataPort temp header re "+datafile$
            gosub split_header_detail_recs

            rem --- Copy detail records to temporary detail file.
            header_file=0
            split_temp_file$=detailfile$
            split_temp_file_desc$="DataPort temp detail re "+datafile$
            gosub split_header_detail_recs

            break
        case 8; rem --- woe-21
            split_record_id$="A"
            header_keys_end_with$="00"
            headerfile$="wox-21"
            detailfile$="wox-22"

            rem --- Copy header records to temporary header file.
            header_file=1
            split_temp_file$=headerfile$
            split_temp_file_desc$="DataPort temp header re "+datafile$
            gosub split_header_detail_recs

            rem --- Copy detail records to temporary detail file.
            header_file=0
            split_temp_file$=detailfile$
            split_temp_file_desc$="DataPort temp detail re "+datafile$
            gosub split_header_detail_recs

            break
        case 15; rem --- woe-31
            split_record_id$="A"
            header_keys_end_with$="00"
            headerfile$="wox-31"
            detailfile$="wox-32"

            rem --- Copy header records to temporary header file.
            header_file=1
            split_temp_file$=headerfile$
            split_temp_file_desc$="DataPort temp header re "+datafile$
            gosub split_header_detail_recs

            rem --- Copy detail records to temporary detail file.
            header_file=0
            split_temp_file$=detailfile$
            split_temp_file_desc$="DataPort temp detail re "+datafile$
            gosub split_header_detail_recs

            break
        case default
            rem --- unknown file, don't split
            break
    swend
    if pos(cvs(datafile$,8)="woe-11;woe-21;woe-31;",7) then
        rem --- Don't port files that were split. Their temporary header and detail files will be ported.
        print "   "+datafile$+" was split into separate header and detail files."
        print "   "+cvs(headerfile$,version_cvs)+" and "+cvs(detailfile$,version_cvs)+" will be ported separately."
        print (log_dev)"   "+datafile$+" was split into separate header and detail files."
        print (log_dev)"   "+cvs(headerfile$,version_cvs)+" and "+cvs(detailfile$,version_cvs)+" will be ported separately."
        goto next_file
    endif

rem --- Read the dictionary file ddm-03 to get data file info

    read(ddm03,key=pad(datafile$,6),dom=*next)

next_ddm03:
    if copy_sys01 then
       readrecord(ddm03,key=ddm03_key$,dom=read_normalize_xref)ddm03$
    else
       readrecord(ddm03,end=next_file)ddm03$
       if cvs(ddm03.file_name$,3)<>cvs(datafile$,3) then
          goto next_file
       endif
    endif
    rem --- Open/create ARS_CUSTDFLT and ARS_PARAMS for ARS-01A record
    if ddm03.file_name$="ARS-01" and ddm03.record_id$="A" then
        rem --- Add ARS_CUSTDFLT to file_xref! HashMap for ARS-01A key
        file_xref!.put("ARS-01A","ARS_CUSTDFLT")
        gosub get_new_template
        ars_custdflt_dev=new_file
        dim ars_custdflt_rec$:fattr(new_rec$)
        rem --- Reset ARS_PARAMS to file_xref! HashMap for ARS-01A key
        file_xref!.put("ARS-01A","ARS_PARAMS")
    endif
    rem --- Open/create opm-04 (OPC_MSG_HDR) and opm-14(OPC_MSG_DET) for version 6 ARM-10G records
    if source_version=6 and ddm03.file_name$="ARM-10" and ddm03.record_id$="G" then
        rem --- Add opm-04A (OPC_MSG_HDR) to file_xref! HashMap for ARM-10G key
        file_xref!.put("ARM-10G","opm-04A")
        gosub get_new_template
        opm04_dev=new_file
        dim opm04_rec$:fattr(new_rec$)
        rem --- Reset opm-14A (OPC_MSG_DET) to file_xref! HashMap for ARM-10G key
        file_xref!.put("ARM-10G","opm-14A")
    endif
    gosub get_new_template
    rd_gen_table_tpl$=""
    data_seq_str$=""
    fields=0
    date_format$ = $$
    print "   Creating template for "+ddm03.file_name$+ddm03.record_id$+"  ("+table_alias$+")"
    print (log_dev)"   Creating template for "+ddm03.file_name$+ddm03.record_id$

    read(ddm04,key=ddm03.file_name$+ddm03.record_id$,dom=*next)
next_ddm04:
    readrecord(ddm04,end=end_ddm04)ddm04$
    if ddm04.file_name$<>ddm03.file_name$ or ddm04.record_id$<>ddm03.record_id$ then
       goto end_ddm04
    endif

    findrecord(ddm01,key=ddm04.data_name$,dom=next_ddm04)ddm01$
    rd_col_length=ddm01.fld_length
    if ddm04.fld_repeats>1 then
       rd_col_length=ddm01.fld_length*ddm04.fld_repeats
    endif
    rd_col_occurs_sfx$=""
    rd_col_occurs$=""
    rd_col_occurs=1
    if ddm04.fld_occurs>1 then
       rd_col_occurs$="YES"
       rd_col_occurs=ddm04.fld_occurs
    endif

    data_seq_pos=pos(pad(ddm04.data_name$,16)=data_seq_str$,20)
    if data_seq_pos<>0 then
       rd_occur_adj=num(data_seq_str$(data_seq_pos+17,2))
    else
       rd_occur_adj=0
       data_seq_str$=data_seq_str$+pad(ddm04.data_name$,16)+"-00;"
    endif

    for rd_curr_occur=1 to rd_col_occurs
       data_seq_pos=pos(pad(ddm04.data_name$,16)=data_seq_str$,20)
       data_seq_str$(data_seq_pos+17,2)=str(num(data_seq_str$(data_seq_pos+17,2))+1:"00")
       if rd_col_occurs$="YES" or rd_occur_adj>0 then
          rd_col_occurs_sfx$="_"+str(rd_curr_occur+rd_occur_adj:"00")
       endif

           rem --- Remove slashes from data name
       data_name$ = ddm04.data_name$
       s_pos = pos("/" = data_name$)

       while s_pos
          data_name$ = data_name$(1, s_pos-1) + data_name$(s_pos+1)
          s_pos = pos("/" = data_name$)
       wend

       rem ' field names can only contain [A-Z0-9_]
       data_name$=tbl(cvs(data_name$,7),tbl=az_09)
       rd_temp_seg$=cvs(data_name$,3)+rd_col_occurs_sfx$+":"
       datatype$=iff(ddm01.data_type$="N","N","C")
       rd_temp_seg$=rd_temp_seg$+datatype$+"("+str(rd_col_length)
       if rd_col_occurs$<>"YES"
         if ddm04.fld_sep$="X" or ddm04.fld_sep$="Y" or ddm04.fld_sep$="E" then
           rd_temp_seg$=rd_temp_seg$+"*"
         endif
       endif    
       if rd_col_occurs$="YES" or rd_occur_adj>0
         if rd_curr_occur+rd_occur_adj=rd_col_occurs and datatype$="C" or           datatype$<>"C"
           if ddm04.fld_sep$="X" or ddm04.fld_sep$="Y" or ddm04.fld_sep$="E"
             if rd_temp_seg$(len(rd_temp_seg$),1)<>"*"
               rd_temp_seg$=rd_temp_seg$+"*"
             endif
           endif
         endif
       endif  
       rd_temp_seg$=rd_temp_seg$+")"
       fields = fields + 1
       if len(rd_gen_table_tpl$) then
          rd_gen_table_tpl$=rd_gen_table_tpl$+","
       endif
       rd_gen_table_tpl$=rd_gen_table_tpl$+rd_temp_seg$
       rem ' Date formats
       if ddm01.data_type$="D" then
          date_format$ = date_format$ + chr(rd_col_length)
       else
          if ddm01.data_type$="A" and rd_col_length=2 then
             date_format$ = date_format$ + chr(255)
          else
             date_format$ = date_format$ + chr(0)
          endif
       endif
   next rd_curr_occur

   goto next_ddm04

az_09: table 7f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 30 31 32 33 34 35 36 37 38 39 5f 5f 5f 5f 5f 5f 5f 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59 5a 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f

end_ddm04:
    if rd_gen_table_tpl$="" then
       escape; goto eof
    endif

    dim old_rec$:rd_gen_table_tpl$
    fields$="name["+str(fields)+"]:c(20*)"
    dim old_fieldlist$:fields$
    old_fieldlist$=fattr(old_rec$,"")
    record_id_field$=""
    for j=1 to fields
        if pos("RECORD_ID_"=old_fieldlist.name$[j]) then
           record_id_field$=old_fieldlist.name$[j]
           break
        endif
    next

    rem ' Data record ID does not match dictionary record ID.
    if pos(cvs(datafile$,8)="woe-12;woe-22;woe-32;woe-42;wom-03;wot-01;wot-03;wot-11;wot-12;wot-21;wot-23;wot-31;wot-33;",7) then 
        record_id_field$=""
    endif
    
    rem ' Special address processing?
    addr_lines=0
    if source_version=6 and pos($0a$+"CITY"+$0a$=new_fields$) and pos($0a$+"STATE_CODE"+$0a$=new_fields$)
       if pos($0a$+"ADDR_LINE_3"+$0a$=old_fieldlist$) then
          addr_lines=3
       endif
       if pos($0a$+"ADDR_LINE_5"+$0a$=old_fieldlist$) then
          addr_lines=5
       endif
    endif

    rem ' Do we need to set the shipto type?
    ar_shipto = table_alias$="OPE_ORDHDR" or table_alias$="OPT_INVHDR"

    rem ' Correlate old fieldnames to new fieldnames
    dim new_fieldlist$:fields$
    new_fieldlist$=$$
    for field=1 to fields
        old_fieldname$=old_fieldlist.name$[field]
		
		rem --- Change old "WO" to new "SF" for sfs_params
		if copy_sys01 and old_fieldname$="WO" then 
			old_fieldname$="SF"
		endif
		
		gosub set_new_fieldname
        new_fieldlist$ = new_fieldlist$ + new_fieldname$ + $0a$
    next field
    if copy_sys01 then
       datafile$=cvs("sys-01",version_cvs)
    endif
    if pom02_dev and pos(cvs(datafile$,8)="pom-02") then
        close (pom02_dev,err=*next)
        pom02_dev=0
    endif
    old_file=unt
    open (old_file)source_folder$+"/"+datafile$
    lock (old_file)
    print "   Copying data from  "+ddm03.file_name$+ddm03.record_id$
    print(log_dev)"   Copying data from    "+ddm03.file_name$+ddm03.record_id$

next_rec:
    readrecord(old_file,end=eof)old_rec$
    if pos("00"=old_rec$)=1 goto next_rec
	if pos("FIRM_ID"=fattr(old_rec$))=1 if pos(old_rec.firm_id$=firms$,2)=0 goto next_rec

    rem --- Don't port blank customer numbers in ARE-05 Simple Invoice Entry Header
    if cvs(ddm03.file_name$,8)="are-05"
        if cvs(old_rec.customer_nbr$,3)=""
            goto next_rec
        endif
    endif

    rem --- Don't port blank GL account numbers in GLM-10 Chart Of Accounts Breaks
    if cvs(ddm03.file_name$,8)="glm-10"
        if cvs(old_rec.acct_nbr_brk$,3)=""
            goto next_rec
        endif
    endif

	rem --- fix data based on an old bug discovered in v6 (never fixed in v6) while writing data
	rem --- IV Period End swapped the Operator ID and System Date fields in the BB records
	if cvs(ddm03.file_name$,8)="ivt-04" or cvs(ddm03.file_name$,8)="ivt-01"
		if old_rec.trans_source$="BB"
			if old_rec.operator_id$(2,1)>=$21$ and old_rec.operator_id$(2,1)<=$2c$
				tmp_fld$=old_rec.operator_id$
				old_rec.operator_id$=old_rec.system_date$
				old_rec.system_date$=tmp_fld$
			endif
		endif
	endif

    if record_id_field$<>"" and field(old_rec$,record_id_field$,err=*continue)<>ddm03.record_id$ then
       goto next_rec
    endif
    if copy_sys01 and field(old_rec$,old_fieldlist.name$[2],err=*continue) + field(old_rec$,old_fieldlist.name$[3],err=*continue) <> file_normalization$(1,4) then
       goto next_rec
    endif
    if copy_sys01 and file_normalization$(1,4)="AR00" then
        rem --- Write ARS_CUSTDFLT for ARS-01A records
        gosub write_ars_custdflt_recs
    endif

    if source_version=6 and datafile$="ARM-10" and record_id_field$="RECORD_ID_G" then
        rem --- Write opm-04 (OPC_MSG_HDR) and opm-14(OPC_MSG_DET) records from version 6 ARM-10G records
        opm14_dev=new_file
        dim opm14_rec$:fattr(new_rec$)
        gosub write_opc_msg_recs
        goto next_rec
    endif
	thisFirm$=""

rem --- start field loop

    for field=1 to fields

rem --- Retrieve value$ if applicable

        if new_fieldlist.name$[field]=$$ then continue
        value$=field(old_rec$,old_fieldlist.name$[field],err=*continue)
rem --- Populate new internal sequence from old display sequence

        keyval$ = table_alias$+"."+new_fieldlist.name$[field]
        int_seq! = internal_seq!.get(keyval$)
        if int_seq! <> null() then
            int_seq$ = int_seq!
            if pos(cvs(int_seq$,3)+$0a$=new_fieldlist$)<>0
                if cvs(value$,3)<>"" then value$=str(num(value$):"000000000000")
            else
                field new_rec$,int_seq$=str(num(value$):"000000000000")
            endif
        endif

rem --- check for specific values that can't be found any other way

        if cvs(new_fieldlist.name$[field],3)="REPORT_ALIAS"
            if cvs(value$,3)="AR_STATEMENT" value$="ARR_STATEMENTS"
            if cvs(value$,3)="OP_INVOICE" value$="OPR_INVOICES"
            if cvs(value$,3)="OP_PICKINGLIST" value$="OPR_ODERPICKLST"
            if cvs(value$,3)="OP_QUOTE" value$="OPR_QUOTE"
            if cvs(value$,3)="PO_PURCHASE_ORDER" value$="POR_POPRINT"
            if cvs(value$,3)="PO_REQS"value$="POR_REQS"
        endif
        if source_version=6 and (datafile$="ARM-10" OR datafile$="APM-10") and old_fieldlist.name$[field]="PROX_OR_DAYS" and cvs(value$,2)="A"
            value$="P"
        endif
		
		rem --- Change old "WO" to new "SF" for sfs_params
		if copy_sys01 and old_fieldlist.name$[field]="WO"
			value$="SF"
		endif
        
		if source_version=6 and datafile$="GLM-22"
            while pos($22$=value$)
                value$(pos($22$=value$,1))=" "
            wend
            if pos("OUTPUT_OPER"=old_fieldlist.name$[field])=1
                x$=old_fieldlist.name$[field]
                if pos(value$="+-")=0
                    value$=" "
                endif
                if value$=" " and num(field(new_rec$,"output_total_"+x$(len(x$)-1,2)))<>0
                    value$="+"
                endif
            endif
            value$=cvs(value$,2)
        endif
        if old_fieldlist.name$[field]="ZIP_CODE" and len(cvs(value$,2))=9
            if value$(6,4)="0000"
                value$=value$(1,5)
            endif
        endif    
		if new_fieldlist.name$[field]="OP_INT_SEQ_REF"
			if cvs(value$,3)<>"" then value$=str(num(value$):"000000000000")
		endif

rem --- GLM-32 sequence numbers need to start at '001', not '000' in Barista/Addon
        if cvs(datafile$,8)="glm-32" then
            rem --- if sequence numbers start with '000' for a firm+report,
            rem --- then increment all sequence numbers (except '999') for that firm+report
             if old_rec$(1,4)<>glm32_rpt$
                glm32_rpt$=old_rec$(1,4)
                if old_rec$(5,3)="000"
                    glm32_inc=1
                else
                    glm32_inc=0
                endif
            endif
            if new_fieldlist.name$[field]="SEQUENCE_NO"
                if cvs(value$,3)<>"999" then value$=str(num(value$)+glm32_inc:"000")
            endif
        endif
		
rem --- Check for Temp Vendor

        if cvs(old_fieldlist.name$[field],2)="VENDOR_NBR"
            if pos("TEMP  "=value$)=1
                if temp_vend$=""
                    temp_vend_ok$="N"
                    goto next_rec
                else
                    value$=temp_vend$
                endif
            endif
        endif

rem --- Set all Retain Invoice History Detail flags to Y

        if old_fieldlist.name$[field]="INV_HIST_FLG"
            value$="Y"
        endif

rem --- Set all Retain Customer flags to Y

        if new_fieldlist.name$[field]="RETAIN_CUST"
            value$="Y"
        endif
		
rem --- set Inventory auto number flag

        if cvs(datafile$,8)="sys-01"
            if old_rec$(3,4)="IV00"
                new_rec.auto_no_iv$=old_rec.auto_number$
            endif
        endif

rem --- Set blank Credit Hold (Y;N;E) field values to N
        if cvs(new_fieldlist.name$[field],3)="CRED_HOLD"
            if cvs(value$,2)="" value$="N"
        endif

        rem --- set Stocking Level to "W" for all items
        if cvs(new_fieldlist.name$[field],3)="STOCK_LEVEL"
            value$="W"
        endif

rem --- CUSTOMER_ID and VENDOR_ID data needs adjusting when masks are less than full size

		if cvs(new_fieldlist.name$[field],3) = "CUSTOMER_ID"
			if custSizeMap!.containsKey(thisFirm$) then
				cust_size = cast(BBjNumber, custSizeMap!.get(thisFirm$))
				if cust_size > 0 and cust_size < 6 then
					value$=pad(value$(1,cust_size),6,"R","0")
				endif
			endif
		endif
		
		if cvs(new_fieldlist.name$[field],3) = "VENDOR_ID"
			if vendSizeMap!.containsKey(thisFirm$) then
				vend_size = cast(BBjNumber, vendSizeMap!.get(thisFirm$))
				if vend_size > 0 and vend_size < 6 then
					value$=pad(value$(1,vend_size),6,"R","0")
				endif
			endif
		endif
		
rem --- Call custom program - Note - there is no CALL/ENTER list, so all variables will be 
rem     available. Common usages for this would be things like data conversion, since value$
rem     holds the data in the field coming in, and old_fieldlist.name$[field] is the variable
rem     name from the dictionary of the source data. datafile$ is the source datafile name.

        if custom_prog$<>""
            call custom_prog$
        endif

rem --- Check value of new field for blanks if part of primary key
        if pos($0a$+new_fieldlist.name$[field]+$0a$=$0a$+key_temp$+$0a$)>0
            if cvs(value$,2)=""
                if pos(new_fieldlist.name$[field]+$0a$=blank_fields$)=0
                    if field_translations!.get(new_fieldlist.name$[field]+"."+cvs(value$,3))=null()
                            rem --- Do NOT report thes missing key fields, they are optional
                            if cvs(new_datafile$,2)="apt-05" and cvs(new_fieldlist.name$[field],2)="AP_INV_NO" goto no_msg
                            if cvs(new_datafile$,2)="art-06" and cvs(new_fieldlist.name$[field],2)="AR_CHECK_NO" goto no_msg
                            if cvs(new_datafile$,2)="art-16" and cvs(new_fieldlist.name$[field],2)="AR_CHECK_NO" goto no_msg
                            if cvs(new_datafile$,2)="art-26" and cvs(new_fieldlist.name$[field],2)="AR_CHECK_NO" goto no_msg
                            if cvs(new_datafile$,2)="bme-01" and cvs(new_fieldlist.name$[field],2)="BM_REFERENCE" goto no_msg
                            if cvs(new_datafile$,2)="glt-06" and cvs(new_fieldlist.name$[field],2)="GL_ADT_NO" goto no_msg
                            if cvs(new_datafile$,2)="ope-03" and cvs(new_fieldlist.name$[field],2)="ORDER_NO" goto no_msg
                            if pos("sam-"=cvs(new_datafile$,2))=1 and cvs(new_fieldlist.name$[field],2)="ITEM_ID" goto no_msg
                        blank_fields$=blank_fields$+new_fieldlist.name$[field]+$0a$
                        print (err_dev) "field "+new_fieldlist.name$[field]+" in file "+new_datafile$+" has a blank value and no translation specified." 
no_msg:
                    endif
                endif    
            endif
        endif

rem --- if this field.value is listed in flat file "field_translations" then translate to new value

        translate_value!=field_translations!.get(new_fieldlist.name$[field]+"."+cvs(value$,3))
        if translate_value!<>null()
            translate_value$=str(translate_value!)
            value$=translate_value$
        endif

rem --- date formatting

        attr$=fattr(old_rec$,old_fieldlist.name$[field])
        fld_sep$=attr$(3,1)
        fld_typ$=attr$(1,1)
        fld_len=dec(attr$(10,2))
        if fld_sep$=$0a$ and len(value$)>fld_len and dec(fld_typ$)=1 
            if pos($20$<>value$(fld_len+1))=0
                value$=value$(1,fld_len)
            endif
        endif
        switch asc(date_format$(field))
           case 0
              break
           case 3
              if len(cvs(value$,3)) then
                 value$=str(asc(value$)-32+1900+add_year)+str(asc(value$(2))-32:"00")+str(mod(asc(value$(3))-32,100):"00")
              else
                 value$=pad("",8)
              endif
              if date(jul(num(value$(1,4)),num(value$(5,2)),num(value$(7,2)),err=*next),err=*next)>"" break
              print (err_dev)"There is an invalid date in table "+new_datafile$+". Value was "+value$+" in field "+new_fieldlist.name$[field]+" and has been changed to blanks."
              value$=""
              invalid_date$="Y"
              break
           case 2
           case 6
              gosub fix_yymmdd_date
              break
           case 8
              value$=str(num(value$(1,4))+add_year)+value$(5)
              if date(jul(num(value$(1,4)),num(value$(5,2)),num(value$(7,2)),err=*next),err=*next)>"" break
              print (err_dev)"There is an invalid date in table "+new_datafile$+". Value was "+value$+" in field "+new_fieldlist.name$[field]+" and has been changed to blanks."
              value$=""
              invalid_date$="Y"
              break
           case 255
              if len(cvs(value$,3)) then
                 value$=str(asc(value$)-32:"00")+str(asc(value$(2))-32:"00")
              else
                 value$=pad("",8)
              endif
              break
           case default; escape; rem ' should never get here
        swend

rem --- replace non-print characters with spaces

        value$=cvs(value$,16)

rem --- Field terminators can result in short character fields that need to be padded.
        rem --- Get length of character fields from string template.
        if hta(fattr(new_rec$,new_fieldlist.name$[field]))(1,2)="01" then
            fieldlen$=hta(fattr(new_rec$,new_fieldlist.name$[field]))(19,4)
            fieldlen=dec(ath(fieldlen$))
            rem --- Pad field as necessary
            if len(value$)<fieldlen then
                value$=pad(value$, fieldlen)
            endif
        endif

        field new_rec$,new_fieldlist.name$[field]=value$

    next field

rem --- final misc processing prior to writing new record    

    if addr_lines then gosub reformat_address

    if ar_shipto then
       shipto_no = -1
       shipto_no = num(field(new_rec$,"shipto_no"),err=*next)
       switch shipto_no
           case 0; shipto_type$="B"; break
           case 99; shipto_type$="M"; break
           case default; shipto_type$="S"; break
       swend
       field new_rec$,"shipto_type"=shipto_type$
    endif

rem --- As needed, fix ivs_default.inventoried

    if table_alias$="IVS_DEFAULTS" then
        if new_rec.lotser_item$<>"Y" then new_rec.inventoried$="N"
    endif
    
rem --- Initialize NS_ITEM_ID in POE_REQDET, POE_PODET, POE_QADET, POE_RECDET, and POT_RECDET

    if pos(cvs(datafile$,8)="poe-11;poe-12;poe-13;poe-14;pot-14",7)
        dim pom02$:pom02_tpl$
        readrecord(pom02_dev,key=new_rec.firm_id$+new_rec.po_line_code$,dom=*endif)pom02$
        if pom02.line_type$="N" then
            new_rec.ns_item_id$=new_rec.item_id$
            new_rec.item_id$(1)=""
        else
            new_rec.ns_item_id$(1)=""
        endif
    endif

rem --- Iinitialize SFE_WOOPRTN.WO_REF_NUM

    if cvs(datafile$,8)="woe-02"
        wk$=fattr(new_rec$,"wo_op_ref")
        new_rec.wo_op_ref$=pad(new_rec.op_seq$, dec(wk$(10,2)), "R", "0")
    endif

rem --- Iinitialize SFE_WOMATL.WO_REF_NUM

    if cvs(datafile$,8)="woe-22"
        wk$=fattr(new_rec$,"wo_ref_num")
        new_rec.wo_ref_num$=pad(new_rec.material_seq$, dec(wk$(10,2)), "R")
    endif

rem --- Initialize SFE_WOSUBCNT.WO_REF_NUM

    if cvs(datafile$,8)="woe-32"
        wk$=fattr(new_rec$,"wo_ref_num")
        new_rec.wo_ref_num$=pad(new_rec.subcont_seq$, dec(wk$(10,2)), "R")
    endif

    new_rec$=field(new_rec$)

write_record:

    if keysize then
       k$=xkgen(new_rec$,xfin$,0)
       if len(k$)>keysize then
          writerecord(new_file,key=k$(1,keysize),dom=duplicate_record,err=write_err)new_rec$
       else
          writerecord(new_file,key=k$,dom=duplicate_record,err=write_err)new_rec$
       endif
    else
       writerecord(new_file,dom=duplicate_record,err=write_err)new_rec$
    endif

    po_det$=new_datafile$
    po_file! = po_files!.get(po_det$)
    if po_file! <> null() and cvs(old_rec.customer_nbr$,3)<>""then gosub convert_po_files
        
    goto next_rec

duplicate_record:

    if cvs(new_datafile$,2)="glm-06" or cvs(new_datafile$,2)="adm-19" or cvs(new_datafile$,2)="opm-14" goto next_rec
    dupe_rec$="Y"
    call stbl("+DIR_SYP")+"bac_key_template.bbj",table_alias$,"",key_temp1$,rd_table_chans$[all],rd_stat$
    if len(key_temp1$)>0
        dim dupe_key$:key_temp1$
        dupe_key$=new_rec$
        dupe_key$=field(dupe_key$)
    endif    
    print (err_dev)"There are duplicate records being written to "+new_datafile$+" with a key template of"
    if len(key_temp1$)>0
        print (err_dev)"   "+key_temp1$
        print (err_dev)"   and values of "+dupe_key$
        print (err_dev)"   This key will be ignored."
    else
        print (err_dev)"   No key could be determined. The record value is"
        print (err_dev)"   "+new_rec$
        print (err_dev)"   This record will be ignored."
    endif
    goto next_rec

eof:

    key_temp$=""

    if old_file then
       close (old_file)
       old_file=0
    endif
    if new_file then
       close (new_file)
       new_file=0
    endif
    if copy_sys01 then
       goto read_normalize_xref
    endif
    goto next_ddm03

rem ' Auto-resize on error
write_err:
    if err<>1 then escape
    fid$=fid(new_file)
    new_file$=fid$(9)
    print "*** Resizing ",new_file$," ... ",
    temp_file$=new_file$+".bak"
    erase temp_file$,err=*next
    fid$=fid$(1,8)+temp_file$
    fid$(7,2)=bin(len(new_rec$),2); rem ' new record size
    fin$=fin(new_file)(86)
    keyed = asc(and(fid$(1,1),$06$)) or asc(and(fid$(1,1),$08$)) or fid$(1,1)=$0d$
    multi = keyed and asc(fid$(2,1))=0
    single = keyed and !(multi)
    if multi then
       file fid$,fin$
    else
       file fid$
    endif
    close (new_file)
    open (new_file)new_file$
    lock (new_file)
    temp_file=unt
    open (temp_file)temp_file$
    lock (temp_file)
    while 1
        readrecord(new_file,end=*break)rec$
        if single then
           k$=keyp(new_file)
           writerecord(temp_file,key=k$)rec$
        else
           writerecord(temp_file)rec$
        endif
    wend
    close (new_file)
    close (temp_file)
    erase new_file$
    rename temp_file$ to new_file$
    open (new_file)new_file$
    lock (new_file)
    print "(resized)"
    goto write_record

end_read_loop:
    if old_dir then
       close (old_dir)
       old_dir=0
    endif
    if normalize_sys01 then
       print "   sys-01 will be normalized to different parameter files"
       print (log_dev)"sys-01"
       print (log_dev)"   sys-01 will be normalized to different parameter files"
       file_normalization=unt
       open (file_normalization)filedir$+"file_normalization"
       copy_sys01=1
read_normalize_xref:
       read(file_normalization,end=end_read_normalize_xref)file_normalization$
       if file_normalization$="" then
          goto read_normalize_xref
       endif
       ddm03_key$=cvs(file_normalization$(9,6),version_cvs)+file_normalization$(15,1)
       datafile$=ddm03_key$(1,6)
       goto next_ddm03
end_read_normalize_xref:
       close (file_normalization)
       normalize_sys01=0
       goto end_read_loop
    endif; rem ' normalize_sys01

rem --- Now go populate masks and sequences as needed
    if do_make_masks then gosub make_masks
	if do_sequence_numbers then gosub set_sequence_numbers
    
    if temp_vend_ok$="N"
        rd_meter_data$="Temporary vendor records found not ported. See error file."
        rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
        rd_meter_action$="LST"
        gosub disp_meter
        print "   Temporary vendor records found. See err file"
        print (err_dev)"Temporary vendor records found without a valid stbl("+$22$+"+DP_TEMP_VEND"+$22$+")."
        print (err_dev)"Those records were excluded from the DataPort."
        print (err_dev)"Please set this variable up in the config file and rerun the DataPort."
    endif

    if len(blank_fields$)>0
        rd_meter_data$="Blank values for elements in primary keys exist. See error file for details."
        rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
        rd_meter_action$="LST"
        gosub disp_meter        
        print "   Blank values for elements in primary keys exist. See error file for details."
    endif
    while len(blank_fields$)>0
        print (err_dev)"Element "+blank_fields$(1,pos($0a$=blank_fields$)-1)+" has a blank value with no translation specified."
        print (err_dev)"  Consider converting to a non-blank value and re-running DataPort."
        blank_fields$=blank_fields$(pos($0a$=blank_fields$)+1)
    wend

    if dupe_rec$="Y" 
        rd_meter_data$="Duplicate keys exist in the ported data. See error file for details."
        rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
        rd_meter_action$="LST"
        gosub disp_meter        
        print "   Duplicate keys exist in the ported data. See error file for details."
    endif

    if invalid_date$="Y" 
        rd_meter_data$="Invalid dates exist in the ported data. See error file for details."
        rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
        rd_meter_action$="LST"
        gosub disp_meter        
        print "   Invalid dates exist in the ported data. See error file for details."
    endif

rem --- Populate sequence record(s)

    if len(firms$)>0
        for firms=1 to len(firms$) step 2
            dim ads_sequences$:ads_sequences_tpl$
            ads_sequences.firm_id$=firms$(firms,2)
            ads_sequences.seq_id$=pad("INTERNAL_SEQ_NO",16)
            ads_sequences.description$="Internal Sequence Number"
            ads_sequences.active$="Y"
            ads_sequences.seq_no_increment=1
            ads_sequences.seq_mask$="000000000000"
            ads_sequences.seq_query_new$="N"
            ads_sequences.asc_comp_id$="01007514"
            ads_sequences.asc_prod_id$="AD"
            readrecord(ads_sequences_dev,key=ads_sequences.firm_id$+ads_sequences.seq_id$,dom=*next)ads_sequences$
            if ads_sequences.seq_last_used<1000 ads_sequences.seq_last_used=1000
            ads_sequences$=field(ads_sequences$)
            writerecord(ads_sequences_dev)ads_sequences$
        next firms    
    endif
    
rem --- Initialize *s_params.post_to_gl with SYM-04's post_gl flag

    gosub init_params_post_gl

rem --- Enable disabled triggers
    if disabledTriggers!.size() then
        iter!=disabledTriggers!.iterator()
        while iter!.hasNext()
            trigger$=iter!.next()
            aAdminTriggers!=aAdminBase!.getTriggers(trigger$)
            aAdminTriggers!.setBoolean(BBjAdminTriggers.ENABLED, 1)
            aAdminTriggers!.commit()
            print "Enabled triggers for: ",trigger$
            print (log_dev)"Enabled triggers for: ",trigger$
        wend
    endif
    
rem --- Done    

    print (log_dev)$0a$+"DataPort completed"
    print (log_dev)"DataPort End Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "

    print (err_dev)$0a$+"DataPort completed"
    print (err_dev)"DataPort End Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "

    rd_meter_data$="DataPort End Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")
    rd_meter_proc_recs=rd_meter_total_recs
    rd_meter_action$="LST-END"
    gosub disp_meter

    release

write_opc_msg_recs: rem --- Write opm-04 (OPC_MSG_HDR) and opm-14(OPC_MSG_DET) records from version 6 ARM-10G records

    rem --- Write opm-04 (OPC_MSG_HDR) record
    rec=5
    if old_rec.record_id$="1" then
        rec=0
        opm04_rec.firm_id$=old_rec.firm_id$
        translate_value!=field_translations!.get("MESSAGE_CODE."+cvs(old_rec.message_code$,3))
        if translate_value!<>null() then old_rec.message_code$=str(translate_value!)
        opm04_rec.message_code$=old_rec.message_code$
        opm04_rec.code_desc$=old_rec.code_desc$
        opm04_rec$=field(opm04_rec$)
        writerecord(opm04_dev)opm04_rec$
    endif

    rem --- Write opm-14(OPC_MSG_DET) records
    write_opm14_recs=0
    for i=5 to 1 step -1
        opm14_rec.firm_id$=old_rec.firm_id$
        translate_value!=field_translations!.get("MESSAGE_CODE."+cvs(old_rec.message_code$,3))
        if translate_value!<>null() then old_rec.message_code$=str(translate_value!)
        opm14_rec.message_code$=old_rec.message_code$
        opm14_rec.message_seq$=str(i+rec:"00")
        opm14_rec.message_text$=field(old_rec$,"MESSAGE_TEXT_"+str(i:"00"))
        rem --- Skip trailing blank message lines
        if cvs(opm14_rec.message_text$,2)<>"" or write_opm14_recs then
            write_opm14_recs=1
            opm14_rec$=field(opm14_rec$)
            writerecord(opm14_dev)opm14_rec$
        endif
    next i

    return

write_ars_custdflt_recs: rem --- Write ARS_CUSTDFLT for ARS-01A records

    rem --- Init ARS_CUSTDFLT record
    ars_custdflt_rec.firm_id$=old_rec.firm_id$
    ars_custdflt_rec.record_id_d$="D"
    ars_custdflt_rec.disc_code$=old_rec.disc_code$
    ars_custdflt_rec.territory$=old_rec.territory$
    ars_custdflt_rec.slspsn_code$=old_rec.slspsn_code$
    ars_custdflt_rec.tax_code$=old_rec.tax_code$
    ars_custdflt_rec.ar_terms_code$=old_rec.terms_code$
    ars_custdflt_rec.ar_dist_code$=old_rec.dist_code$
    ars_custdflt_rec.customer_inv_his$=old_rec.cust_inv_his$

    rem --- Translate ARS_CUSTDFLT codes listed in field_translations file
    tmp$=fattr(ars_custdflt_rec$,"")
    tmp=pos($0A$=tmp$,1,0)
    dim tmp_fieldlist$:"name["+str(tmp)+"]:c(20*)"
    tmp_fieldlist$=tmp$

    for field=1 to tmp
        value$=field(ars_custdflt_rec$,tmp_fieldlist.name$[field])
        translate_value!=field_translations!.get(tmp_fieldlist.name$[field]+"."+cvs(value$,3))
        if translate_value!<>null()
            translate_value$=str(translate_value!)
            field ars_custdflt_rec$,tmp_fieldlist.name$[field]=translate_value$
        endif
    next field

    rem --- Write ARS_CUSTDFLT record
    ars_custdflt_rec$=field(ars_custdflt_rec$)
    writerecord(ars_custdflt_dev)ars_custdflt_rec$

    return

make_masks: rem --- Port masks from SYS-01 to Barista's ads_masks

    if len(firms$)=0 then return
    masks_dev=unt
    open (masks_dev)stbl("+DIR_BRA")+"ads_masks.dat"
    masks_dev2=unt
    open (masks_dev2)stbl("+DIR_BRA")+"ads_masks.dat"
    comp_id$=stbl("+AON_APPCOMPANY")

    rem --- Get ads_masks template and key template

    readrecord(ddm_table_tpls,key=pad("ADS_MASKS",16))ddm_table_tpls$
    dim ads_masks$:ddm_table_tpls.template$
    call stbl("+DIR_SYP")+"bac_key_template.bbj","ADS_MASKS","PRIMARY",key_fieldlist$,rd_table_chans$[all],rd_stat$
    dim ads_masks_key$:key_fieldlist$

    rem --- Do the Masks

    old_file=unt
    open (old_file)source_folder$+"/"+cvs("sys-01",version_cvs)
    
    for firms=1 to len(firms$) step 2
        firm_id$=firms$(firms,2)
        
        rem --- Port existing masks from source SYS-01
        read(old_file,key=firm_id$,dom=*next)
        while 1
            read(old_file,end=*break)a0$,a1$,a2$,a3$,a4$,a5$,a6$,a7$,a8$,a9$,a10$

            if pos(firm_id$=a0$)<>1 then break
            if len(a0$)<>6 and pos("BM00"=a0$)<>3 continue
            if num(a0$(1,2),err=*continue)=0 continue
            if a0$(5,2)<>"00" continue
            if pos(a0$(3,2)="APARBMGLIVPRSFWO",2)=0 continue
            if a0$(3,2)="WO" a0$(3,2)="SF";rem convert v7 Shop Floor to v6 Work Orders
            if a0$(3,2)<>"BM"
                if pos(a0$(3,2)="IVWO",2)=0
                    dim ads_masks$:fattr(ads_masks$)
                    ads_masks.firm_id$=a0$(1,2)
                    ads_masks.asc_comp_id$=comp_id$
                    ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                    ads_masks.dd_mask_type$="I"
                    id$=cvs(a5$,3)
                    if len(id$)>0
                        for id=1 to len(id$)
                            if a0$(3,2)="GL"
                                if id$(id,1)="#" id$(id,1)="0"
                            endif
                            if pos(a0$(3,2)="ARAPPR",2)
                                if id$(id,1)="0" id$(id,1)="U"
                            endif
                        next id
                    endif
                    a5$=id$
                    ads_masks.dd_attr_mski$=cvs(a5$,3)
                    ads_masks.dd_attr_msko$=cvs(a5$,3)
                    ads_masks$=field(ads_masks$)
                    if cvs(a1$,3)<>"" or cvs(a5$,3)<>""
                        writerecord(masks_dev)ads_masks$
                    endif    
                endif    
    
                dim ads_masks$:fattr(ads_masks$)
                ads_masks.firm_id$=a0$(1,2)
                ads_masks.asc_comp_id$=comp_id$
                ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                ads_masks.dd_mask_type$="A"
                ads_masks.dd_attr_mski$=cvs(a6$,3)
                ads_masks.dd_attr_msko$=cvs(a6$,3)
                ads_masks$=field(ads_masks$)
                if cvs(a6$,3)<>""
                    writerecord(masks_dev)ads_masks$
                endif
    
                dim ads_masks$:fattr(ads_masks$)
                ads_masks.firm_id$=a0$(1,2)
                ads_masks.asc_comp_id$=comp_id$
                ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                ads_masks.dd_mask_type$="U"
                ads_masks.dd_attr_mski$=cvs(a7$,3)
                ads_masks.dd_attr_msko$=cvs(a7$,3)
                ads_masks$=field(ads_masks$)
                if cvs(a7$,3)<>""
                    writerecord(masks_dev)ads_masks$
                endif    
    
                dim ads_masks$:fattr(ads_masks$)
                ads_masks.firm_id$=a0$(1,2)
                ads_masks.asc_comp_id$=comp_id$
                ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                ads_masks.dd_mask_type$="R"
                if a0$(3,2)="GL"
                    ads_masks.dd_mask_type$="P"
                endif
                if a0$(3,2)="IV"
                    ads_masks.dd_mask_type$="C"
                endif
                ads_masks.dd_attr_mski$=cvs(a8$,3)
                ads_masks.dd_attr_msko$=cvs(a8$,3)
                ads_masks$=field(ads_masks$)
                if cvs(a8$,3)<>""
                    writerecord(masks_dev)ads_masks$
                endif    
    
                if a0$(3,2)="IV"
                    dim ads_masks$:fattr(ads_masks$)
                    ads_masks.firm_id$=a0$(1,2)
                    ads_masks.asc_comp_id$=comp_id$
                    ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                    ads_masks.dd_mask_type$="P"
                    ads_masks.dd_attr_mski$=cvs(a9$,3)
                    ads_masks.dd_attr_msko$=cvs(a9$,3)
                    ads_masks$=field(ads_masks$)
                    if cvs(a9$,3)<>""
                        writerecord(masks_dev)ads_masks$
                    endif
    
                        dim ads_masks$:fattr(ads_masks$)
                    ads_masks.firm_id$=a0$(1,2)
                    ads_masks.asc_comp_id$=comp_id$
                    ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                    ads_masks.dd_mask_type$="V"
                    ads_masks.dd_attr_mski$=cvs(a10$,3)
                    ads_masks.dd_attr_msko$=cvs(a10$,3)
                    ads_masks$=field(ads_masks$)
                    if cvs(a10$,3)<>""
                        writerecord(masks_dev)ads_masks$
                    endif    
                endif
            else
                dim ads_masks$:fattr(ads_masks$)
                ads_masks.firm_id$=a0$(1,2)
                ads_masks.asc_comp_id$=comp_id$
                ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                ads_masks.dd_mask_type$="H"
                ads_masks.dd_attr_mski$=cvs(a1$,3)
                ads_masks.dd_attr_msko$=cvs(a1$,3)
                ads_masks$=field(ads_masks$)
                if cvs(a1$,3)<>""
                    writerecord(masks_dev)ads_masks$
                endif    
    
                dim ads_masks$:fattr(ads_masks$)
                ads_masks.firm_id$=a0$(1,2)
                ads_masks.asc_comp_id$=comp_id$
                ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                ads_masks.dd_mask_type$="M"
                ads_masks.dd_attr_mski$=cvs(a2$,3)
                ads_masks.dd_attr_msko$=cvs(a2$,3)
                ads_masks$=field(ads_masks$)
                if cvs(a2$,3)<>""
                    writerecord(masks_dev)ads_masks$
                endif   
    
                dim ads_masks$:fattr(ads_masks$)
                ads_masks.firm_id$=a0$(1,2)
                ads_masks.asc_comp_id$=comp_id$
                ads_masks.asc_prod_id$=pad(a0$(3,2),3)
                ads_masks.dd_mask_type$="O"
                ads_masks.dd_attr_mski$=cvs(a3$,3)
                ads_masks.dd_attr_msko$=cvs(a3$,3)
                ads_masks$=field(ads_masks$)
                if cvs(a3$,3)<>""
                    writerecord(masks_dev)ads_masks$
                endif
            endif
        end_mask:
        wend
    
        rem --- Initialize masks new to Barista-Addon
        
        rem --- AD: U - Units         <== use IV U mask if present, otherwise use demo data mask
        dim ads_masks_key$:fattr(ads_masks_key$)
        ads_masks_key.firm_id$=firm_id$
        ads_masks_key.asc_comp_id$=comp_id$
        ads_masks_key.asc_prod_id$=pad("IV",3)
        ads_masks_key.dd_mask_type$="U"
        dim ads_masks$:fattr(ads_masks$)
        readrecord(masks_dev2,key=ads_masks_key$,dom=*next)ads_masks$
        if cvs(ads_masks.dd_attr_mski$,2)<>"" or cvs(ads_masks.dd_attr_msko$,2)<>"" then
            ads_masks.asc_prod_id$=pad("AD",3)
            ads_masks.dd_mask_type$="U"
            writerecord(masks_dev)ads_masks$
        endif
    
        rem --- AP: U - Units         <== use IV U mask if present, otherwise use demo data mask
        dim ads_masks_key$:fattr(ads_masks_key$)
        ads_masks_key.firm_id$=firm_id$
        ads_masks_key.asc_comp_id$=comp_id$
        ads_masks_key.asc_prod_id$=pad("IV",3)
        ads_masks_key.dd_mask_type$="U"
        dim ads_masks$:fattr(ads_masks$)
        readrecord(masks_dev2,key=ads_masks_key$,dom=*next)ads_masks$
        if cvs(ads_masks.dd_attr_mski$,2)<>"" or cvs(ads_masks.dd_attr_msko$,2)<>"" then
            ads_masks.asc_prod_id$=pad("AP",3)
            ads_masks.dd_mask_type$="U"
            writerecord(masks_dev)ads_masks$
        endif
    
        rem --- AR: Q - Quantity      <== use demo data mask

        rem --- BM: C - Cost          <== use IV C mask if present, otherwise use demo data mask
        dim ads_masks_key$:fattr(ads_masks_key$)
        ads_masks_key.firm_id$=firm_id$
        ads_masks_key.asc_comp_id$=comp_id$
        ads_masks_key.asc_prod_id$=pad("IV",3)
        ads_masks_key.dd_mask_type$="C"
        dim ads_masks$:fattr(ads_masks$)
        readrecord(masks_dev2,key=ads_masks_key$,dom=*next)ads_masks$
        if cvs(ads_masks.dd_attr_mski$,2)<>"" or cvs(ads_masks.dd_attr_msko$,2)<>"" then
            ads_masks.asc_prod_id$=pad("BM",3)
            ads_masks.dd_mask_type$="C"
            writerecord(masks_dev)ads_masks$
        endif
    
        rem --- BM: R - Rate          <== use demo data mask

        rem --- BM: U - Units         <== use IV U mask if present, otherwise use demo data mask
        dim ads_masks_key$:fattr(ads_masks_key$)
        ads_masks_key.firm_id$=firm_id$
        ads_masks_key.asc_comp_id$=comp_id$
        ads_masks_key.asc_prod_id$=pad("IV",3)
        ads_masks_key.dd_mask_type$="U"
        dim ads_masks$:fattr(ads_masks$)
        readrecord(masks_dev2,key=ads_masks_key$,dom=*next)ads_masks$
        if cvs(ads_masks.dd_attr_mski$,2)<>"" or cvs(ads_masks.dd_attr_msko$,2)<>"" then
            ads_masks.asc_prod_id$=pad("BM",3)
            ads_masks.dd_mask_type$="U"
            writerecord(masks_dev)ads_masks$
        endif

        rem --- GL: % - Percent       <== use demo data mask

        rem --- IV: % - Percent       <== use demo data mask

        rem --- SF: C - Cost          <== use IV C mask if present, otherwise use demo data mask
        dim ads_masks_key$:fattr(ads_masks_key$)
        ads_masks_key.firm_id$=firm_id$
        ads_masks_key.asc_comp_id$=comp_id$
        ads_masks_key.asc_prod_id$=pad("IV",3)
        ads_masks_key.dd_mask_type$="C"
        dim ads_masks$:fattr(ads_masks$)
        readrecord(masks_dev2,key=ads_masks_key$,dom=*next)ads_masks$
        if cvs(ads_masks.dd_attr_mski$,2)<>"" or cvs(ads_masks.dd_attr_msko$,2)<>"" then
            ads_masks.asc_prod_id$=pad("SF",3)
            ads_masks.dd_mask_type$="C"
            writerecord(masks_dev)ads_masks$
        endif

        rem --- SF: H - Hours         <== use BM H mask if present, otherwise use demo data mask
        dim ads_masks_key$:fattr(ads_masks_key$)
        ads_masks_key.firm_id$=firm_id$
        ads_masks_key.asc_comp_id$=comp_id$
        ads_masks_key.asc_prod_id$=pad("BM",3)
        ads_masks_key.dd_mask_type$="H"
        dim ads_masks$:fattr(ads_masks$)
        readrecord(masks_dev2,key=ads_masks_key$,dom=*next)ads_masks$
        if cvs(ads_masks.dd_attr_mski$,2)<>"" or cvs(ads_masks.dd_attr_msko$,2)<>"" then
            ads_masks.asc_prod_id$=pad("SF",3)
            ads_masks.dd_mask_type$="H"
            writerecord(masks_dev)ads_masks$
        endif

        rem --- SF: I - ID            <== use PR I mask if present, otherwise use demo data mask
        dim ads_masks_key$:fattr(ads_masks_key$)
        ads_masks_key.firm_id$=firm_id$
        ads_masks_key.asc_comp_id$=comp_id$
        ads_masks_key.asc_prod_id$=pad("PR",3)
        ads_masks_key.dd_mask_type$="I"
        dim ads_masks$:fattr(ads_masks$)
        readrecord(masks_dev2,key=ads_masks_key$,dom=*next)ads_masks$
        if cvs(ads_masks.dd_attr_mski$,2)<>"" or cvs(ads_masks.dd_attr_msko$,2)<>"" then
            ads_masks.asc_prod_id$=pad("SF",3)
            ads_masks.dd_mask_type$="I"
            writerecord(masks_dev)ads_masks$
        endif

        rem --- SF: M - Mtl Factor    <== use BM M mask if present, otherwise use demo data mask
        dim ads_masks_key$:fattr(ads_masks_key$)
        ads_masks_key.firm_id$=firm_id$
        ads_masks_key.asc_comp_id$=comp_id$
        ads_masks_key.asc_prod_id$=pad("BM",3)
        ads_masks_key.dd_mask_type$="M"
        dim ads_masks$:fattr(ads_masks$)
        readrecord(masks_dev2,key=ads_masks_key$,dom=*next)ads_masks$
        if cvs(ads_masks.dd_attr_mski$,2)<>"" or cvs(ads_masks.dd_attr_msko$,2)<>"" then
            ads_masks.asc_prod_id$=pad("SF",3)
            ads_masks.dd_mask_type$="M"
            writerecord(masks_dev)ads_masks$
        endif

        rem --- SF: % - Percent       <== use demo data mask
    
    next firms
    
    return

set_sequence_numbers:
rem --- Update ads_sequences with sequence numbers from ars(ops)-10N, aps-10N, pos-10N.
rem --- This routine assumes an ads_sequences record for each sequence number id (CUSTOMER_ID, VENDOR_ID, AR_INV_NO, etc.) exists,
rem --- i.e., it doesn't have enough info to create an ads_sequences record from scratch,
rem --- although flat file sequence_no could probably be modified to contain all we need if this becomes an issue.

    dim sequence_no$:sequence_no_tpl$
    dim sequence_no[4]
    sequence_iterator!=sequence_no!.keySet().iterator()
    while sequence_iterator!.hasNext()
        sequence_id$ = str(sequence_iterator!.next())
        sequence_no$=sequence_no!.get(sequence_id$)
        
        old_file=unt
        if source_version=6
            old_file$=cvs(sequence_no.v6_file$,version_cvs+2)
            old_element_no=num(sequence_no.v6_element_no$)
        else
            old_file$=cvs(sequence_no.v7_file$,version_cvs+2)
            old_element_no=num(sequence_no.v7_element_no$)
        endif
        if seq_no_files!.get(cvs(old_file$,11))<>"y" then continue; rem --- Skip if this file wasn't processed
        open (old_file,err=*continue)source_folder$+"/"+old_file$

        if len(firms$)>0
            for firms=1 to len(firms$) step 2
                if pos("CUSTOMER_ID"=sequence_id$)=1
                    param_file=unt                    
                    open (param_file,err=*continue)source_folder$+"/"+cvs("sys-01",version_cvs)
                    read (param_file,key=firms$(firms,2)+"AR00",dom=*continue)*,*,*,sys01_3$
                    if sys01_3$(13,1)<>"Y" then continue
                endif            
                read (old_file,key=firms$(firms,2)+"N",dom=*continue)*,sequence_no[all]              
                dim ads_sequences$:ads_sequences_tpl$
                ads_sequences.firm_id$=firms$(firms,2)
                ads_sequences.seq_id$=pad(sequence_id$,16)                             
                readrecord(ads_sequences_dev,key=ads_sequences.firm_id$+ads_sequences.seq_id$,dom=*continue)ads_sequences$
                ads_sequences.seq_last_used=sequence_no[old_element_no]
                if cvs(ads_sequences.description$,3)<>""
                    ads_sequences$=field(ads_sequences$)         
                    writerecord(ads_sequences_dev)ads_sequences$
                endif
            next firms    
        endif 
        close (old_file,err=*next)
        
    wend

    return

init_params_post_gl: rem --- Initialize *s_params.post_to_gl with SYM-04's post_gl flag

    rem --- Open source sym-04
    sym04_dev=unt
    open (sym04_dev)source_folder$+"/"+cvs("sym-04",version_cvs)
    
    rem --- Loop thru modules that can post to gl
    modules$="APARBMGLIVOPPOPRSF"
    for i=1 to len(modules$) step 2
        mod$=modules$(i,2)

        rem --- Read this module's sym-04 record, skip if not found
        v6mod$=mod$
        if v6mod$="SF" then v6mod$="WO"
        dim r0$(2),r1$(64)
        find(sym04_dev,key=v6mod$)r0$(1),r1$(1)
        if r0$<>v6mod$ then continue
        
        rem --- Open this module's destination *s_params, skip if not found
        skip_module=1
        param_file$=cvs(mod$,8)+"s_params"
        param_dev=unt
        open (param_dev,err=*next)destin_folder$+"/"+param_file$; skip_module=0
        if skip_module then continue

        rem --- Get *s_params template for this module
        findrecord(ddm_table_tpls,key=pad(cvs(param_file$,4),16))ddm_table_tpls$
        dim param$:ddm_table_tpls.template$

        rem --- Loop thru all firms in this module's *s_params updating *s_params.post_to_gl
        read(param_dev,key="",dom=*next)
        while 1
            key$=key(param_dev,end=*break)
            readrecord(param_dev)param$
            param.post_to_gl$=r1$(46,1)
            param$=field(param$)
            writerecord(param_dev,key=key$)param$
            endif
        wend
        close(param_dev)
        
    next i
    close(sym04_dev)

    return
    
convert_po_files:

    po_hdr$=po_file!
    rem --- open hdr file - 
    rem --- Open manually, because we want to open in our target dir, 
    rem --- which isn't necessarily the data dir specified in ddm_tables.
    rem --- So use open_tables to just return actual file name and template for the alias,
    rem --- then open using destin_folder$

    num_files=1
    dim rd_open_tables$[1:num_files],rd_open_opts$[1:num_files],rd_open_chans$[1:num_files],rd_open_tpls$[1:num_files]
    rd_open_tables$[1]=po_hdr$,rd_open_opts$[1]="TA"
    gosub open_tables
    po_hdr_dev=unt
    po_hdr_file$=rd_open_tables$[1]
    dim po_hdr_rec$:rd_open_tpls$[1]
    po_hdr_file$=po_hdr_file$(max(pos("/"=po_hdr_file$,-1,1),pos("\"=po_hdr_file$,-1,1))+1)
    open (po_hdr_dev,err=hdr_open_err)destin_folder$+"/"+po_hdr_file$

    rem --- get key template and load it w/ key fields from detail rec
    call stbl("+DIR_SYP")+"bac_key_template.bbj",po_hdr$,"",key_fieldlist$,rd_table_chans$[all],rd_stat$
    key_fields=pos(","=key_fieldlist$,1,0)+1            
    dim key_fields$:"name["+str(key_fields)+"]:c(20*)"
    dim po_hdr_key$:key_fieldlist$
    key_fields$=fattr(po_hdr_key$,"")
    for xwk=1 to key_fields
        field po_hdr_key$,key_fields.name$[xwk] = field(new_rec$,key_fields.name$[xwk])
    next xwk
    
    rem --- read header and update cust/order/shipto w/ data from old detail rec, set dropship flag
    read record (po_hdr_dev,key=po_hdr_key$)po_hdr_rec$
    if cvs(po_hdr_rec.customer_id$,3)<>"" and cvs(po_hdr_rec.customer_id$,3)<>cvs(old_rec.customer_nbr$,3)
        rem --- put out log entry that the po (req, po or receipt) refers to more than one cust/order
        print (err_dev)"There appears to be more than one customer order referenced in "+po_hdr_file$+" key "+po_hdr_key$+"."
        print (err_dev)"Replacing customer "+po_hdr_rec.customer_id$+" with "+old_rec.customer_nbr$+"."
    endif
    po_hdr_rec.dropship$="Y"
    po_hdr_rec.customer_id$=old_rec.customer_nbr$
    po_hdr_rec.order_no$=old_rec.order_number$
    po_hdr_rec.shipto_no$=old_rec.shipto_nbr$
    po_hdr_rec$=field(po_hdr_rec$)
    
    rem --- now read cust ship-to or cust mast and fill in po hdr's dropship address fields
    if cvs(old_rec.shipto_nbr$,3)=""
        arm_custmast_dev=unt
        dim rec$:arm_custmast_tpl$
        addr_file$="arm-01"
        open (arm_custmast_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
        while 1
            read record (arm_custmast_dev,key=po_hdr_rec.firm_id$+po_hdr_rec.customer_id$,dom=*break)rec$
            po_hdr_rec.ds_name$=rec.customer_name$            
            gosub fill_dropship_address
            break
        wend
        close (arm_custmast_dev)       
    else
        if num(cvs(old_rec.shipto_nbr$,3))>0 and num(cvs(old_rec.shipto_nbr$,3))<99
            arm_custship_dev=unt
            dim rec$:arm_custship_tpl$
            addr_file$="arm-03"
            open (arm_custship_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
            while 1
                read record (arm_custship_dev,key=po_hdr_rec.firm_id$+po_hdr_rec.customer_id$+po_hdr_rec.shipto_no$,dom=*break)rec$
                po_hdr_rec.ds_name$=rec.name$
                gosub fill_dropship_address
                break
            wend
            close (arm_custship_dev)          
        else
            if num(cvs(old_rec.shipto_nbr$,3))=99
                rem --- read ope31 or opt-01/31 for manual (99) shipto
                ope_ordship_dev=unt
                dim rec$:ope_ordship_tpl$
                addr_file$="ope-31"
                order_found=0
                open (ope_ordship_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
                while 1
                    read record (ope_ordship_dev,key=po_hdr_rec.firm_id$+po_hdr_rec.customer_id$+po_hdr_rec.order_no$,dom=*break)rec$
                    po_hdr_rec.ds_name$=rec.name$            
                    gosub fill_dropship_address
                    order_found=1
                    break
                wend
                close (ope_ordship_dev)
                if !order_found
                    opt_invhdr_dev=unt
                    dim opt_invhdr$:opt_invhdr_tpl$
                    addr_file$="opt-01"
                    open (opt_invhdr_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
                    opt_invship_dev=unt
                    dim rec$:opt_invship_tpl$
                    addr_file$="opt-31"
                    open (opt_invship_dev,err=addr_open_err)destin_folder$+"/"+addr_file$
                    while 1
                        read record (opt_invhdr_dev,key=po_hdr_rec.firm_id$+opt_invhdr.ar_type$+po_hdr_rec.customer_id$+po_hdr_rec.order_no$,knum="AO_CUST_ORD",dom=*break)opt_invhdr$
                        read record (opt_invship_dev,key=po_hdr_rec.firm_id$+po_hdr_rec.customer_id$+opt_invhdr.ar_inv_no$,dom=*break)rec$
                        po_hdr_rec.ds_name$=rec.name$            
                        gosub fill_dropship_address
                        break
                    wend
                    close (opt_invhdr_dev)
                    close (opt_invship_dev)
                endif                           
            else
                rem --- invalid shipto
                po_hdr_rec.addr_line_1$="Unknown address"
            endif
        endif
    endif
    write record (po_hdr_dev)po_hdr_rec$
    
return

    hdr_open_err:
    
    rd_meter_data$="PO header file" + po_hdr_file$ + "not found in destination directory. Dropship info not converted."
    rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
    rd_meter_action$="LST"
    gosub disp_meter
    print (err_dev)"Processing PO detail file " + new_datafile$ + ", record: " + old_rec$+"."+$0a$+"Cannot convert dropship fields because corresponding PO header file not found."
    
return

    addr_open_err:
    
    rd_meter_data$="File" + addr_file$ + "not found in destination directory. Dropship address not converted."
    rd_meter_total_recs=iff(vectPort!=null(),0,vectPort!.size())
    rd_meter_action$="LST"
    gosub disp_meter
    print (err_dev)"Processing PO detail file " + new_datafile$ + ", record: " + old_rec$+"."+$0a$+"Cannot insert dropship address in header file because file "+addr_file$+" not found."

return

fill_dropship_address:

    po_hdr_rec.ds_addr_line_1$=rec.addr_line_1$
    po_hdr_rec.ds_addr_line_2$=rec.addr_line_2$
    po_hdr_rec.ds_addr_line_3$=rec.addr_line_3$
    po_hdr_rec.ds_addr_line_4$=rec.addr_line_4$
    po_hdr_rec.ds_city$=rec.city$
    po_hdr_rec.ds_state_cd$=rec.state_code$
    po_hdr_rec.ds_zip_code$=rec.zip_code$
    
return

get_new_template:
    new_datafile$=cvs(datafile$,8)
    file_id$=ddm03.file_name$+ddm03.record_id$
	if len(cvs(file_id$,2))=7
		file_id$=cvs(file_id$(1,6),7)+file_id$(7,1)
	else
		file_id$=cvs(file_id$,7)
	endif
    file_id! = file_xref!.get(cvs(file_id$,3))
    if file_id!<>null() then
       rem ' found mapping for filename+record id
       file_id$ = str(file_id!)
       if len(file_id$)>7 then
          rem ' Longer new-style filename
          new_datafile$ = cvs(file_id$,8)
       else
          rem ' Drop the record id from the old-style filename
          new_datafile$=cvs(file_id$(1,len(file_id$)-1),8)
       endif
    else
       file_id! = file_xref!.get(cvs(datafile$,7))
       if file_id!<>null() then
          rem ' found mapping for filename
          file_id$ = str(file_id!)+ddm03.record_id$
          new_datafile$ = cvs(str(file_id!),8)
       endif
    endif

    table_alias! = file_alias!.get(cvs(file_id$,7))
    table_alias$ = iff(table_alias!=null(),"",cvs(str(table_alias!),3))
    print "Table Alias: ",table_alias$
    if table_alias$="" then
       print "   Data File "+file_id$+" will not be ported"
       print (err_dev)"   Data File "+file_id$+" will not be ported"
       goto eof
    endif

    call stbl("+DIR_SYP")+"bac_key_template.bbj",table_alias$,"",key_temp$,rd_table_chans$[all],rd_stat$
    while pos(",reserved_str:c(1)"=key_temp$)<>0
        key_temp$=key_temp$(1,pos(",reserved_str:c(1)"=key_temp$)-1)+key_temp$(pos(",reserved_str:c(1)"=key_temp$)+18)
    wend
    if cvs(key_temp$,2)<>""
        dim key_temp$:key_temp$
        key_temp$=fattr(key_temp$,"")
    endif

    findrecord(ddm_table_tpls,key=pad(table_alias$,16),dom=check_for_definition)ddm_table_tpls$
    dim new_rec$:ddm_table_tpls.template$
    new_fields$=$0a$+fattr(new_rec$,"")

    new_file=unt
    open (new_file,err=check_for_definition)destin_folder$+"/"+new_datafile$
    lock (new_file)
    a=msgbox(new_datafile$+" already exists in destination folder. Do you want to overwrite data?",3+32+65536,"DataPort")
    if a=6 then
       close (new_file)
       erase destin_folder$+"/"+new_datafile$
       goto check_for_definition
    endif
    if a=7 then
       goto eof; rem ' No-Skip
    endif
    if a=2 then
       goto eoj; rem ' Cancel-Exit
    endif
return; rem ' get_new_template

check_for_definition:
    new_file=0
    find (ddm_tables,key=pad(table_alias$,16),dom=undefined_file)
    call stbl("+DIR_SYP")+"bac_create_table.bbj",table_alias$,destin_folder$+"/"+new_datafile$,rd_table_chans$[all],"CREATE",status$
    if len(status$) then
       print "*** ERROR ***: Couldn't create "+new_datafile$+$0a$+status$
       print (err_dev)"*** ERROR ***: Couldn't create "+new_datafile$+$0a$+status$
       goto eof
    endif
    print "   New file "+new_datafile$+" created in folder "+destin_folder$
    print (log_dev)"   New file "+new_datafile$+" created"

    new_file=unt
    open (new_file)destin_folder$+"/"+new_datafile$
    lock (new_file)
    xfid$=xfid(new_file)
    xfin$=$$
    keysize=dec(xfid$(2,4))
    if keysize then
       call stbl("+DIR_SYP")+"bac_create_xfin.bbj",table_alias$,xfin$,rd_table_chans$[all],status$
       if len(status$) then
          escape
       endif
    endif

    rem --- see if this table has any new fields (i.e., that weren't in v6)
    rem --- if so, set default value based on new_field_defaults flat file
    rem --- new_rec$ only dim'd once/file, so setting the values once here should carry into every record
    if source_version=6
        new_rec_fields!=new_field_defaults!.keySet().iterator()
        while new_rec_fields!.hasNext()
            new_rec_field$ = str(new_rec_fields!.next())
            if pos(cvs(table_alias$,3)=new_rec_field$)=1
                new_rec_value$=new_field_defaults!.get(new_rec_field$)
                new_rec_fieldname$=new_rec_field$(pos("."=new_rec_field$)+1)
                field new_rec$,new_rec_fieldname$=new_rec_value$
            endif
        wend
    endif
return

undefined_file:
    print "   Data File "+file_id$+" will not be ported"
    print (err_dev)"   Data File "+file_id$+" will not be ported"
    goto eof
return

set_new_fieldname:
    new_fieldname$=""

    if old_fieldname$="RESERVED_STR" then
       old_fieldname$="RESERVED_STR_02"
    endif

    if pos("RESERVED_STR_0"=old_fieldname$) or pos("RESERVED_NUM"=old_fieldname$) then
       new_fieldname$=""
       return
    endif

    if pos($0a$+old_fieldname$+$0a$=new_fields$) then
       new_fieldname$=old_fieldname$
    endif

    if new_fieldname$<>"" and new_fieldname$<>"RESERVED_STR" then
       return
    endif

    if source_version=6 and table_alias$="IVC_PRODCODE" and old_fieldname$="RESERVED_STR" then
       new_fieldname$="SA_LEVEL"
       goto check_fieldlist
    endif

    if pos("INV_DUE_DATE_"=old_fieldname$) then
       new_fieldname$="INV_DUE_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("SLS_INV_DATE_"=old_fieldname$) then
       new_fieldname$="SLS_INV_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("INV_OH_DATE_"=old_fieldname$) then
       new_fieldname$="INV_OH_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_INV_DUE_"=old_fieldname$) then
       new_fieldname$="NO_INV_DUE_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_ORD_SHIP_"=old_fieldname$) then
       new_fieldname$="NO_ORD_SHIP_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_LNS_REC_"=old_fieldname$) then
       new_fieldname$="NO_LNS_REC_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_INV_DATE_"=old_fieldname$) then
       new_fieldname$="NO_INV_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("NBR_INV_BYDT_"=old_fieldname$) then
       new_fieldname$="NO_INV_BYDT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    if pos("EARN_DEDUCT_"=old_fieldname$) then
       new_fieldname$="EARNDEDUCT_"+old_fieldname$(len(old_fieldname$)-1)
       goto check_fieldlist
    endif

    keyval$ = table_alias$+"."+old_fieldname$
    new_fieldname! = field_file_xref!.get(keyval$)
    if new_fieldname! = null() then
       new_fieldname$ = ""
    else
       new_fieldname$=str(new_fieldname!)
       goto check_fieldlist
    endif

    keyval$=old_fieldname$
    new_fieldname! = field_name_xref!.get(keyval$)
    if new_fieldname! = null() then
       new_fieldname$ = ""
       return
    else
       new_fieldname$=str(new_fieldname!)
    endif

check_fieldlist:

    if pos($0a$+new_fieldname$+$0a$=new_fields$)=0 then
       new_fieldname$=""
    endif

return; rem ' set_new_fieldname

reformat_address:

    if addr_lines=5 then
       address$=pad(old_rec.addr_line_1$,24)+pad(old_rec.addr_line_2$,24)+pad(old_rec.addr_line_3$,24)+pad(old_rec.addr_line_4$,24)+pad(old_rec.addr_line_5$,24)
    endif
    if addr_lines=3 then
       address$=pad(old_rec.addr_line_1$,24)+pad(old_rec.addr_line_2$,24)+pad(old_rec.addr_line_3$,24)
    endif
    dim state$(2),city$(24)
    states$="ALAKAZARCACOCTDEDCFLGAHIIDILINIAKSKYLAMEMDMAMIMNMSMOMTNENVNHNJNMNYNCNDOHOKORPAPRRISCSDTNTXUTVTVAVIWAWVWIWY"
    states$=states$+"ABBCMBNBNLNSNTNUONPEQCSKYT"; rem ' Canadian province/territory codes
    if len(address$) and len(address$)/24 then
       for x=len(address$) to 1 step -24
           string1$=cvs(address$(x-23,24),2)
           if string1$="" then
              continue
           endif
           if len(string1$)<2 then
              city$(1)=string1$,address$(x-23,24)=""
              break
           endif
           if len(string1$)=2 then
              break
           endif
           if len(string1$)>2 and string1$(len(string1$)-2,1)<>" " then
              city$(1)=""
              break
           endif
           string2$=string1$(len(string1$)-1,2)
           if pos(string2$=states$,2)=0 then
              city$(1)=""
              break
           endif
           state$=string2$
           if len(string1$)=2 then
              if x>1 then
                 city$(1)=address$(x-47,24)
                 address$(x-47,48)=""
              endif
           else
              city$(1)=address$(x-23,len(string1$)-3)
              address$(x-23,24)=""
           endif
           string1$=cvs(city$,2)
           if len(string1$) and string1$(len(string1$),1)="," then
              string1$=string1$(1,len(string1$)-1)
           endif
           city$(1)=string1$
           break
       next x
    endif

    if city$="" or state$="" then
       print(err_dev)"Error copying address fields"
    endif

    new_rec.addr_line_1$=address$(1,24)
    new_rec.addr_line_2$=address$(25,24)
    if pos("ADDR_LINE_3"=fattr(new_rec$))<>0 then new_rec.addr_line_3$=address$(49,24)
    if addr_lines=5 then
       new_rec.addr_line_4$=address$(73,24)
    endif
    new_rec.city$=city$
    new_rec.state_code$=state$
return; rem ' reformat_address

init_update_glm06: rem --- Initialize and update glm-06 and adm-09/19/39
    rem ---     Input: firms$

    rem --- Open files in Barista-Addon's data directory
    num_files=4
    dim rd_open_tables$[1:num_files],rd_open_opts$[1:num_files],rd_open_chans$[1:num_files],rd_open_tpls$[1:num_files]
    rd_open_tables$[1]="ADM_AUDITCONTROL",rd_open_opts$[1]="OTA"; rem --- glm-06
    rd_open_tables$[2]="ADM_PROCMASTER",rd_open_opts$[2]="OTA"; rem --- adm-09
    rd_open_tables$[3]="ADM_PROCDETAIL",rd_open_opts$[3]="OTA"; rem --- adm-19
    rd_open_tables$[4]="ADM_PROCTABLES",rd_open_opts$[4]="OTA"; rem --- adm-39
    
    gosub open_tables
    
    glm06_dev=num(rd_open_chans$[1]);dim glm06$:rd_open_tpls$[1]
    adm09_dev=num(rd_open_chans$[2]);dim adm09$:rd_open_tpls$[2]
    adm19_dev=num(rd_open_chans$[3]);dim adm19$:rd_open_tpls$[3]
    adm39_dev=num(rd_open_chans$[4]);dim adm39$:rd_open_tpls$[4]

    rem --- Create and open new files in target directory
    table_alias$="ADM_AUDITCONTROL",new_datafile$="glm-06",file_id$=new_datafile$
    erase destin_folder$+"/"+cvs(new_datafile$,version_cvs),err=*next
    gosub check_for_definition
    glm06_trgt=new_file

    table_alias$="ADM_PROCMASTER",new_datafile$="adm-09",file_id$=new_datafile$
    erase destin_folder$+"/"+cvs(new_datafile$,version_cvs),err=*next
    gosub check_for_definition
    adm09_trgt=new_file

    table_alias$="ADM_PROCDETAIL",new_datafile$="adm-19",file_id$=new_datafile$
    erase destin_folder$+"/"+cvs(new_datafile$,version_cvs),err=*next
    gosub check_for_definition
    adm19_trgt=new_file

    table_alias$="ADM_PROCTABLES",new_datafile$="adm-39",file_id$=new_datafile$
    erase destin_folder$+"/"+cvs(new_datafile$,version_cvs),err=*next
    gosub check_for_definition
    adm39_trgt=new_file

    rem --- Initialize glm-06 and adm-09/19/39 from Barista-Addon's data directory
    if len(firms$)>0
        glm06_initialized=0
        adm09_initialized=0
        adm19_initialized=0
        adm39_initialized=0
        for firms=1 to len(firms$) step 2
            this_firm$=firms$(firms,2); rem --- new install may not be using this firm yet
            
            glm06_firm$=""
            read(glm06_dev,key=glm06_firm$,dom=*next)
            while 1
                rem --- Find first non-blank firm
                glm06_key$=key(glm06_dev,err=*break)
                if len(glm06_key$)>=2 then
                    glm06_firm$=glm06_key$(1,2)
                    if cvs(glm06_firm$,2)<>"" then break
                endif
                read(glm06_dev)
            wend
            read(glm06_dev,key=glm06_firm$,dom=*next)
            while 1
                readrecord(glm06_dev,err=*break)glm06$
                if glm06.firm_id$<>glm06_firm$ then break
                glm06.firm_id$=this_firm$
                glm06.lstuse_date$=""
                glm06.lstuse_time$=""
                glm06.lstupd_date$=""
                glm06.lstupd_time$=""
                glm06.audit_number=0
                glm06$=field(glm06$)
                writerecord(glm06_trgt)glm06$
                glm06_initialized=1
            wend

            read(adm09_dev,key="",err=*next)
            while 1
                readrecord(adm09_dev,err=*break)adm09$
                adm09.firm_id$=this_firm$
                adm09$=field(adm09$)
                writerecord(adm09_trgt)adm09$
                adm09_initialized=1
            wend
            
            read(adm19_dev,key="",err=*next)
            while 1
                readrecord(adm19_dev,err=*break)adm19$
                adm19.firm_id$=this_firm$
                adm19$=field(adm19$)
                writerecord(adm19_trgt)adm19$
                adm19_initialized=1
            wend
            
            read(adm39_dev,key="",err=*next)
            while 1
                readrecord(adm39_dev,err=*break)adm39$
                adm39.firm_id$=this_firm$
                adm39$=field(adm39$)
                writerecord(adm39_trgt)adm39$
                adm39_initialized=1
            wend
        next firms    

        if !glm06_initialized then
            print "*** ERROR ***: Couldn't initialize ADM_AUDITCONTROL (glm-06)"
            print (err_dev)"*** ERROR ***: Couldn't initialize ADM_AUDITCONTROL (glm-06)"
        endif
        if !adm09_initialized then
            print "*** ERROR ***: Couldn't initialize ADM_PROCMASTER (adm-09)"
            print (err_dev)"*** ERROR ***: Couldn't initialize ADM_PROCMASTER (adm-09)"
        endif
        if !adm19_initialized then
            print "*** ERROR ***: Couldn't initialize ADM_PROCDETAIL (adm-19)"
            print (err_dev)"*** ERROR ***: Couldn't initialize ADM_PROCDETAIL (adm-19)"
        endif
        if !adm39_initialized then
            print "*** ERROR ***: Couldn't initialize ADM_PROCTABLES (adm-39)"
            print (err_dev)"*** ERROR ***: Couldn't initialize ADM_PROCTABLES (adm-39)"
        endif
    endif

    rem --- Update glm-06 and adm-09/19/39 from source files
    if len(firms$)>0
        rem --- Open files in source directory
        glm06_src=unt
        open (glm06_src)source_folder$+"/"+cvs("glm-06",version_cvs)
        port_sym04=0
        sym04_src=unt
        open (sym04_src,err=*next)source_folder$+"/"+cvs("sym-04",version_cvs); port_sym04=1
        port_sym06=0
        sym06_src=unt
        open (sym06_src,err=*next)source_folder$+"/"+cvs("sym-06",version_cvs); port_sym06=1
        port_sym09=0
        sym09_src=unt
        open (sym09_src,err=*next)source_folder$+"/"+cvs("sym-09",version_cvs); port_sym09=1
        port_sym19=0
        sym19_src=unt
        open (sym19_src,err=*next)source_folder$+"/"+cvs("sym-19",version_cvs); port_sym19=1
        port_sym39=0
        sym39_src=unt
        open (sym39_src,err=*next)source_folder$+"/"+cvs("sym-39",version_cvs); port_sym39=1
        if !port_sym04 then
            print "*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-04",version_cvs)
            print (err_dev)"*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-04",version_cvs)
        endif
        if !port_sym06 then
            print "*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-06",version_cvs)
            print (err_dev)"*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-06",version_cvs)
        endif
        if !port_sym09 then
            print "*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-09",version_cvs)
            print (err_dev)"*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-09",version_cvs)
        endif
        if !port_sym19 then
            print "*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-19",version_cvs)
            print (err_dev)"*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-19",version_cvs)
        endif
        if !port_sym39 then
            print "*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-39",version_cvs)
            print (err_dev)"*** ERROR ***: Couldn't find source file "+source_folder$+"/"+cvs("sym-39",version_cvs)
        endif

        rem --- read posting_controls into hash map
        posting_controls! = new java.util.HashMap()
        dim post_ctl$:"old_proc:c(10*=124),prog:c(8*=124),new_proc:c(16*=124),seq_nums:c(3*=)"
        post_ctl_xref = unt
        open (post_ctl_xref)filedir$+"posting_controls_xref"
        while 1
           read (post_ctl_xref,end=*break)post_ctl$
           if len(post_ctl$) then
              keyval$ = post_ctl.old_proc$+"."+cvs(post_ctl.prog$,version_cvs)
              dataVec! = BBjAPI().makeVector()
              dataVec!.addItem(post_ctl.new_proc$)
              dataVec!.addItem(cvs(post_ctl.seq_nums$,2))
              posting_controls!.put(keyval$,dataVec!)
           endif
        wend
        close (post_ctl_xref)

        rem --- read processes and process_details into hash maps
        processes! = new java.util.HashMap()
        process_details! = new java.util.HashMap()
        dim proc_pgm$:"old_proc:c(10*=124),prog:c(8*=124),new_proc:c(16*=124),seq_nums:c(3*=)"
        proc_pgm_xref = unt
        open (proc_pgm_xref)filedir$+"process_pgms_xref"
        while 1
           read (proc_pgm_xref,end=*break)proc_pgm$
           if len(proc_pgm$) then
              keyval$ = proc_pgm.old_proc$
              dataval$ = proc_pgm.new_proc$
              processes!.put(keyval$,dataval$)
              keyval$ = proc_pgm.old_proc$+"."+cvs(proc_pgm.prog$,version_cvs)
              dataVec! = BBjAPI().makeVector()
              dataVec!.addItem(proc_pgm.new_proc$)
              dataVec!.addItem(cvs(proc_pgm.seq_nums$,2))
              process_details!.put(keyval$,dataVec!)
           endif
        wend
        close (proc_pgm_xref)

        rem --- read process_files into hash maps
        process_files! = new java.util.HashMap()
        dim proc_file$:"old_proc:c(10*=124),file:c(6*=124),new_proc:c(16*=124),seq_num:c(3*=)"
        proc_file_xref = unt
        open (proc_file_xref)filedir$+"process_files_xref"
        while 1
           read (proc_file_xref,end=*break)proc_file$
           if len(proc_file$) then
              keyval$ = proc_file.old_proc$+"."+cvs(proc_file.file$,version_cvs)
              dataVec! = BBjAPI().makeVector()
              dataVec!.addItem(proc_file.new_proc$)
              dataVec!.addItem(cvs(proc_file.seq_num$,2))
              process_files!.put(keyval$,dataVec!)
           endif
        wend
        close (proc_file_xref)

        glm06_updated=0
        adm09_updated=0
        adm19_updated=0
        adm39_updated=0
        for firms=1 to len(firms$) step 2
            this_firm$=firms$(firms,2)
            
            read(glm06_src,key=this_firm$,err=*next)
            while 1
                dim glm06_0$(20),glm06_1$(63),glm06_2$(30)
                read(glm06_src,err=*break)glm06_0$(1),glm06_1$(1),glm06_2$(1),glm06_3$,glm06_0
                if glm06_0$(1,2)<>this_firm$ then break
                old_proc$=glm06_0$(3,10)
                prog$=glm06_0$(13,8)                               
                if posting_controls!.containsKey(old_proc$+"."+prog$) then
                    rem --- Maps to new standard glm-06 record
                    dataVec!=cast(BBjVector,posting_controls!.get(old_proc$+"."+prog$))
                    new_proc$=dataVec!.getItem(0)
                    seq_nums$=dataVec!.getItem(1)
                    while len(seq_nums$)>=3
                        rem --- Old process can map to more than one instance of new process, re 'WO Time Sh'
                        seq$=seq_nums$(1,3)
                        seq_nums$=iff(pos(":"=seq_nums$)=0,"",seq_nums$(1+pos(":"=seq_nums$)))
                        readrecord(glm06_trgt,key=this_firm$+new_proc$+seq$,dom=*continue)glm06$
                        glm06.journal_id$=glm06_1$(1,2)
                        value$=glm06_1$(11,6)
                        gosub fix_yymmdd_date
                        glm06.lstuse_date$=value$
                        glm06.lstuse_time$=glm06_1$(17,4)
                        value$=glm06_1$(21,6)
                        gosub fix_yymmdd_date
                        glm06.lstupd_date$=value$
                        glm06.lstupd_time$=glm06_1$(27,4)
                        glm06.gl_audit$=glm06_1$(37,1)
                        glm06.detail_level$=glm06_1$(39,1)
                        glm06.prt_gl_sum$=glm06_1$(40,1)
                        glm06.gl_post_memo$=glm06_2$
                        glm06.audit_number=glm06_0
                        glm06$=field(glm06$)
                        writerecord(glm06_trgt)glm06$
                        glm06_updated=1
                    wend
                else
                    rem --- Does not map to new standard glm-06 record
                    dim glm06$:fattr(glm06$)
                    glm06.firm_id$=this_firm$
                    glm06.process_id$=old_proc$
                    rem glm06.sequence_no$=???
                    glm06.process_alias$=""
                    glm06.process_program$=prog$
                    glm06.journal_id$=glm06_1$(1,2)
                    value$=glm06_1$(11,6)
                    gosub fix_yymmdd_date
                    glm06.lstuse_date$=value$
                    glm06.lstuse_time$=glm06_1$(17,4)
                    value$=glm06_1$(21,6)
                    gosub fix_yymmdd_date
                    glm06.lstupd_date$=value$
                    glm06.lstupd_time$=glm06_1$(27,4)
                    glm06.file_name$=glm06_1$(31,6)
                    glm06.gl_audit$=glm06_1$(37,1)
                    glm06.gl_work_file$=glm06_1$(38,1)
                    glm06.detail_level$=glm06_1$(39,1)
                    glm06.prt_gl_sum$=glm06_1$(40,1)
                    glm06.gl_post_memo$=glm06_2$
                    glm06.audit_number=glm06_0
                    
                    rem --- Get next sequence_no for this new record
                    seq_no=1
                    while seq_no<1000
                        read(glm06_trgt,key=glm06.firm_id$+glm06.process_id$+str(seq_no:"000"),dom=*break)
                        seq_no=seq_no+1
                    wend
                    if seq_no>999 then seq_no=0
                    glm06.sequence_no$=str(seq_no:"000")

                    glm06$=field(glm06$)
                    writerecord(glm06_trgt)glm06$
                    glm06_updated=1
                endif
            wend

            if port_sym09 then
                read(sym09_src,key="",err=*next)
                while 1
                    dim sym09_0$(10),sym09_1$(30),sym09_2$(23)
                    read(sym09_src,err=*break)sym09_0$(1),sym09_1$(1),sym09_2$(1)
                    old_proc$=sym09_0$
                    if cvs(old_proc$,2)="" then continue
                    dim sym04_1$(64)
                    if port_sym04 then
                        read(sym04_src,key=sym09_2$(1,2),dom=*next)*,sym04_1$
                    endif
                    dim sym06_2$(16)
                    if port_sym06 then
                        read(sym06_src,key=this_firm$,dom=*next)*,*,sym06_2$
                    endif
                    if processes!.containsKey(old_proc$) then
                        rem --- Maps to new standard adm-09 record
                        new_proc$=cast(BBjString,processes!.get(old_proc$))
                        readrecord(adm09_trgt,key=this_firm$+new_proc$,dom=*continue)adm09$
                    else
                        rem --- Does not map to new standard adm-09 record
                        dim adm09$:fattr(adm09$)
                        adm09.firm_id$=this_firm$
                        adm09.process_id$=pad(old_proc$,16)
                        adm09.description$=sym09_1$
                        adm09.process_mod_id$=sym09_2$(1,2)
                        adm09.allow_batch$=" "
                    endif
                    rem --- BATCH_ENTRY is 'Y' only if it's 'Y' in SYM-04 and SYM-06 and SYM-09
                    if sym04_1$(47,1)="Y" and sym06_2$(2,1)="Y" and sym09_2$(3,1)="Y" then
                        adm09.batch_entry$="Y"
                    else
                        adm09.batch_entry$="N"
                    endif                    
                    adm09$=field(adm09$)
                    writerecord(adm09_trgt)adm09$
                    adm09_updated=1
                wend
            endif

            if port_sym19 then
                read(sym19_src,key="",err=*next)
                while 1
                    dim sym19_0$(18),sym19_1$(30),sym19_2$(11)
                    read(sym19_src,err=*break)sym19_0$(1),sym19_1$(1),sym19_2$(1)
                    old_proc$=sym19_0$(1,10)
                    if cvs(old_proc$,2)="" then continue
                    prog$=sym19_0$(11,8)                               
                    if process_details!.containsKey(old_proc$+"."+prog$) then
                        rem --- Maps to new standard adm-19 record
                        dataVec!=cast(BBjVector,process_details!.get(old_proc$+"."+prog$))
                        new_proc$=dataVec!.getItem(0)
                        seq_nums$=dataVec!.getItem(1)
                        while len(seq_nums$)>=3
                            rem --- Old process can map to more than one instance of new process, re 'WO Time Sh'
                            seq$=seq_nums$(1,3)
                            seq_nums$=iff(pos(":"=seq_nums$)=0,"",seq_nums$(1+pos(":"=seq_nums$)))
                            readrecord(adm19_trgt,key=this_firm$+new_proc$+seq$,dom=*continue)adm19$
                            adm19.new_batch$=sym19_2$(1,1)
                            adm19$=field(adm19$)
                            writerecord(adm19_trgt)adm19$
                            adm19_updated=1
                        wend
                    else
                        rem --- Does not map to new standard adm-19 record
                        dim adm19$:fattr(adm19$)
                        adm19.firm_id$=this_firm$
                        adm19.process_id$=pad(old_proc$,16)
                        rem adm19.sequence_no$=???
                        adm19.dd_table_alias$=""
                        adm19.program_name$=prog$
                        adm19.description$=sym19_1$
                        adm19.new_batch$=sym19_2$(1,1)
                    
                        rem --- Get next sequence_no for this new record
                        seq_no=1
                        while seq_no<1000
                            read(adm19_trgt,key=adm19.firm_id$+adm19.process_id$+str(seq_no:"000"),dom=*break)
                            seq_no=seq_no+1
                        wend
                        if seq_no>999 then seq_no=0
                        adm19.sequence_no$=str(seq_no:"000")

                        adm19$=field(adm19$)
                        writerecord(adm19_trgt)adm19$
                        adm19_updated=1
                    endif
                wend
            endif

            if port_sym39 then
                read(sym39_src,key="",err=*next)
                while 1
                    dim sym39_0$(16)
                    read(sym39_src,err=*break)sym39_0$(1)
                    old_proc$=sym39_0$(1,10)
                    if cvs(old_proc$,2)="" then continue
                    file$=sym39_0$(11,6)                               
                    if process_files!.containsKey(old_proc$+"."+file$) then
                        rem --- Maps to new standard adm-39 record
                        rem --- Don't change new standard adm-39 record
                        adm39_updated=1
                    else
                        if pos(cvs("GLW-",version_cvs)=file$)=1 then
                            rem --- Do not copy old v6 GLW-* records forward to new adm-39
                        else
                            rem --- Does not map to new standard adm-39 record
                            dim adm39$:fattr(adm39$)
                            adm39.firm_id$=this_firm$
                            adm39.process_id$=pad(old_proc$,16)
                            rem adm39.sequence_no$=???
                            adm39.dd_table_alias$=pad(" ",16)
                            adm39.dd_file_name$=pad(file$,30)
                        
                            rem --- Get next sequence_no for this new record
                            seq_no=1
                            while seq_no<1000
                                read(adm39_trgt,key=adm39.firm_id$+adm39.process_id$+str(seq_no:"000"),dom=*break)
                                seq_no=seq_no+1
                            wend
                            if seq_no>999 then seq_no=0
                            adm39.sequence_no$=str(seq_no:"000")

                            adm39$=field(adm39$)
                            writerecord(adm39_trgt)adm39$
                            adm39_updated=1
                        endif
                    endif
                wend
            endif
        next firms
        
        if glm06_updated then
            print "   Copied data from "+cvs("glm-06",version_cvs)
            print(log_dev)"   Copied data from "+cvs("glm-06",version_cvs)
        else
            print "*** ERROR ***: Data not copied from "+cvs("glm-06",version_cvs)
            print (err_dev)"*** ERROR ***: Data not copied from "+cvs("glm-06",version_cvs)
        endif
        if port_sym09 and adm09_updated then
            print "   Copied data from "+cvs("sym-09",version_cvs)
            print(log_dev)"   Copied data from "+cvs("sym-09",version_cvs)
        else
            print "*** ERROR ***: Data not copied from "+cvs("sym-09",version_cvs)
            print (err_dev)"*** ERROR ***: Data not copied from "+cvs("sym-09",version_cvs)
        endif
        if port_sym19 and adm19_updated then
            print "   Copied data from "+cvs("sym-19",version_cvs)
            print(log_dev)"   Copied data from "+cvs("sym-19",version_cvs)
        else
            print "*** ERROR ***: Data not copied from "+cvs("sym-19",version_cvs)
            print (err_dev)"*** ERROR ***: Data not copied from "+cvs("sym-19",version_cvs)
        endif
        if port_sym39 and adm39_updated then
            print "   Copied data from "+cvs("sym-39",version_cvs)
            print(log_dev)"   Copied data from "+cvs("sym-39",version_cvs)
        else
            print "*** ERROR ***: Data not copied from "+cvs("sym-39",version_cvs)
            print (err_dev)"*** ERROR ***: Data not copied from "+cvs("sym-39",version_cvs)
        endif
    endif
    
    rem --- Close files opened in source directory for this subroutine
    close(glm06_src)
    if port_sym04 then close(sym04_src)
    if port_sym06 then close(sym06_src)
    if port_sym09 then close(sym09_src)
    if port_sym19 then close(sym19_src)
    if port_sym39 then close(sym39_src)
    return

split_header_detail_recs: rem --- Split old header/detail files into separate files
    rem --- Do not alter v6/v7 file so it can still be used as-is on existing v6/v7 system.
    rem --- Copy v6/v7 file to temporary v6/v7 header and detail files.
    rem ---     Input: datafile$
    rem ---     Input: split_record_id$
    rem ---     Input: header_keys_end_with$
    rem ---     Input: split_temp_file$
    rem ---     Input: split_temp_file_desc$
    rem ---     Input: header_file
    
    rem --- Write ddm-03 record for temporary file
    dim split_ddm03$:fattr(ddm03$)
    split_ddm03.file_name$=cvs(split_temp_file$,version_cvs)
    split_ddm03.record_id$=split_record_id$
    split_ddm03.description$=split_temp_file_desc$
    writerecord(ddm03,key=split_ddm03.file_name$+split_ddm03.record_id$)split_ddm03$

    rem --- Copy ddm-04 records for datafile to ddm-04 records for the temporary file    
    dim split_ddm04$:fattr(ddm04$)
    read(ddm04,key=datafile$+split_record_id$,dom=*next)
    while 1
        ddm04_key$=key(ddm04,end=*break)
        if pos(datafile$+split_record_id$=ddm04_key$)<>1 then break
        readrecord(ddm04,key=ddm04_key$)split_ddm04$
        split_ddm04.file_name$=cvs(split_temp_file$,version_cvs)
        writerecord(ddm04,key=split_ddm04.file_name$+split_ddm04.record_id$+split_ddm04.layout_seq$)split_ddm04$
        
        rem --- Reset file pointer to get next ddm-04 record for datafile
        read(ddm04,key=ddm04_key$)
    wend

    rem --- Create temporary file
    split_file=unt
    open (split_file)source_folder$+"/"+datafile$
    lock (split_file)
    fid$=fid(split_file)
    fid$=fid$(1,8)+source_folder$+"/"+cvs(split_temp_file$,version_cvs)
    fin$=fin(split_file)(86)
    keyed = asc(and(fid$(1,1),$06$)) or asc(and(fid$(1,1),$08$)) or fid$(1,1)=$0d$
    multi = keyed and asc(fid$(2,1))=0
    single = keyed and !(multi)
    erase source_folder$+"/"+cvs(split_temp_file$,version_cvs),err=*next
    if multi then
       file fid$,fin$
    else
       file fid$
    endif
    
    rem --- Copy datafile to temporary header and detail files
    temp_file=unt
    open (temp_file)source_folder$+"/"+cvs(split_temp_file$,version_cvs)
    lock (temp_file)
    read(split_file,key="",dom=*next)
    while 1
        split_key$=key(split_file,end=*break)
        readrecord(split_file)rec$
        if pos(cvs(datafile$,8)="woe-11;woe-21;woe-31",7)
            rem --- Second string in woe-11/21/31 detail record is written short.
            rem --- Need to pad it to correct length in order to port trailing numerics correctly.
            pos_2nd_0a=pos($0a$=rec$,1,2)
            if pos_2nd_0a<49 then
                rec$(pos_2nd_0a)=pad("",49-pos_2nd_0a)+rec$(pos_2nd_0a)
            endif
        endif
        end_pos=len(split_key$)-len(header_keys_end_with$)+1
        if (header_file and pos(header_keys_end_with$=split_key$,-1)=end_pos) or 
:       (!header_file and pos(header_keys_end_with$=split_key$,-1)<>end_pos) then
            rem --- Correct record type for this temporary file
            if single then
               writerecord(temp_file,key=split_key$)rec$
            else
               writerecord(temp_file)rec$
            endif
        endif
    wend
    close (split_file)
    close (temp_file)

    rem --- Append temporary file to vectPort!
    vectPort!.addItem(cvs(split_temp_file$,version_cvs))
    return
    
fix_yymmdd_date: rem --- Convert yy dates to yyyy, and yymmdd dates to yyyymmdd
    rem ---     Input/Out: value$
    if len(cvs(value$,3)) then
        value$=fnyy_yy21$(value$)
        if asc(value$)>=65 then
            value$=str(200+asc(value$)-65)+value$(2)
        else
            value$="19"+value$
        endif
        value$=str(num(value$(1,4),err=*next)+add_year)+value$(5)
    else
        value$=pad("",8)
    endif
    return

disp_meter:rem --- Display Progress Meter

    call stbl("+DIR_SYP")+"bam_prog_bar.bbj",rdSysGUI!,rdForm!,rdMeterWin!,rd_meter_title$,rd_meter_total_recs,rd_meter_proc_recs,rd_meter_data$,rd_meter_action$

    return


open_tables:rem --- Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       rd_open_beg,
:       rd_open_end,
:       rd_open_tables$[all],
:       rd_open_opts$[all],
:       rd_open_chans$[all],
:       rd_open_tpls$[all],
:       rd_table_chans$[all],
:       rd_open_batch,
:       rd_open_status$

    if rd_open_status$<>""
        rd_msg_id$="ENTRY_OPEN_ERROR"
        dim rd_msg_tokens$[1]
        rd_msg_tokens$[1]=rd_open_status$
        gosub disp_message
        release
    endif

    return

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",rd_msg_id$,rd_msg_tokens$[all],rd_msg_opt$,rd_table_chans$[all]
    return

eoj:
   a=msgbox("Exit from DataPort?",4+32+256,"DataPort")
   if a=6 then
      release
   endif
   if a=7 then
      a=msgbox("Continuing DataPort..")
      goto eof
   endif
   return

rem --- Convert 2-Char Year to 21st Century 2-Char Year
    def fnyy_yy21$(q$)
        q3$=" ABCDE56789ABCDEFGHIJ"
        q$(1,1)=q3$(pos(q$(1,1)=" 0123456789ABCDEFGHIJ"))
        return q$
    fnend

std_error: rem --- Standard error handler (22Feb2013)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem /**
rem  * TriggerFilter Class to filter *.trigger files.
rem  */
class public TriggerFilter implements java.io.FilenameFilter

    method public boolean accept(File dir!, String file!)
        if file!.endsWith(".trigger")
            methodret Boolean.valueOf("true")
        else
            methodret Boolean.valueOf("false")
        endif
    methodend
    
classend
