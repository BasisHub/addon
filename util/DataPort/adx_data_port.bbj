rem DataPort Interface
rem Proprietary Software. BASIS International Ltd.
rem Program ID: bax_data_port.bbj  <Feb 13, 2008>

rem if stbl("+USE_SETERR")="YES" seterr error_proc

rem --- Functions

    def fnstr_pos(rd_tmp0$,rd_tmp1$,rd_tmp0)=int((pos(rd_tmp0$=rd_tmp1$,rd_tmp0)+rd_tmp0-1)/rd_tmp0)
    def fnstrip$(rd_tmp0$,rd_tmp1$)=rd_tmp0$(1,pos(fill(50,rd_tmp1$)=rd_tmp0$+fill(50,rd_tmp1$))-1)
    def fngett_attr$(rd_att0$)=rd_ddm_attr_tbl$[fnstr_pos(rd_att0$,rd_attr_def_tbl$,5)]
    def fngetv_attr$(rd_att0$,rd_att1$)=rd_ddm_attr_col$[fnstr_pos(rd_att0$,rd_ddm_attr_col$[0,1],40),fnstr_pos(rd_att1$,rd_attr_def_col$[0,0],5)]
    def fngetc_attr$(rd_att0,rd_att0$)=rd_ddm_attr_col$[rd_att0,fnstr_pos(rd_att0$,rd_attr_def_col$,5)]

rem --- STBLs

    x$=stbl("+USER_ID","BARISTA");rem ********************************************** REMOVE

    rd_gui_dev$=stbl("+GUI_DEVICE")
    rd_dir_syp$=stbl("+DIR_SYP")
    rd_dir_img$=stbl("+DIR_IMG")
    rd_dir_sys$=stbl("+UT_ARC")
    rd_file_usr$=stbl("+FILE_USR"),rd_file_usr$=stbl("+DIR_USR",err=*next)+"bar_"+cvs(stbl("+USER_ID",err=*next),138)+".usr"
    rd_file_set$=stbl("+FILE_SET")

    rd_milestone=20
    rd_milestone=num(stbl("+MILESTONE",err=*next),err=*next)

rem --- Constants

    dim rd_date_stbl$:"default_date:c(32*=0),short_month[12]:c(3*=0),long_month[12]:c(32*=0),short_day[7]:c(3*=0),long_day[7]:c(32*=0)"
    rd_date_stbl$=stbl("!DATE")

    rd_task_id$="DATAPORT"+str(dec(info(3,0)):"0000")

    rd_indent$=" - "

rem --- Misc Setup

    rdFuncSpace!=bbjAPI().getGroupNamespace()
    rdFuncSpace!.setValue("+build_task","ON")

    rdVectVersion!=bbjAPI().makeVector()
    rdVectVersionCode!=bbjAPI().makeVector()
    rdVectVersion!.addItem("AddonSoftware 6.x")
    rdVectVersionCode!.addItem("6")
    rdVectVersion!.addItem("AddonSoftware 7.x")
    rdVectVersionCode!.addItem("7")

    dim rd_proc_status[1:3]

file_opens:rem --- Open File(s)

    rd_num_files=1
    dim rd_open_tables$[1:rd_num_files],rd_open_opts$[1:rd_num_files],rd_open_chans$[1:rd_num_files],rd_open_tpls$[1:rd_num_files]
    rd_open_tables$[1]=stbl("+GUI_DEVICE"),rd_open_opts$[1]="O"
    gosub open_tables
    rd_gui_dev=num(rd_open_chans$[1])

rem --- Get SysGUI Object

    bbjAPI!=bbjAPI()
    rdSysGUI!=bbjAPI!.getSysGui()

    call rd_dir_syp$+"bac_create_color.bbj","+ENTRY_ERROR_COLOR","255,224,224",rdErrorBackColor!,""
    rdTypeColor!=rdSysGUI!.makeColor(96,96,96)

    dim rd_gui_event$:tmpl(rd_gui_dev)
    dim rd_notify_base$:noticetpl(0,0)

rem --- Get Attributes

    call rd_dir_syp$+"bam_attr_init.bbj",rd_attr_def_tbl$[all],rd_attr_def_col$[all]
        rd_attr_def_col$=rd_attr_def_col$[0,0]
        rd_attr_def_tbl$=rd_attr_def_tbl$[0,0]

rem --- Main Process

    gosub disp_win
    gosub get_win_settings
    gosub def_grids
    gosub resize_win

    rdWindow!.setVisible(1)
    rdVersion!.focus()

    rdFuncSpace!.setValue("+build_task","OFF")

event_ctl:rem --- Event Control

    rdWindow!.setCallback(rdWindow!.ON_CLOSE,"exit_prog")
    rdWindow!.setCallback(rdWindow!.ON_RESIZE,"resize_win")

    rdVersion!.setCallback(rdVersion!.ON_LIST_SELECT,"check_files")

    rdSource!.setCallback(rdSource!.ON_EDIT_MODIFY,"check_files")
    rdBtnSource!.setCallback(rdBtnSource!.ON_BUTTON_PUSH,"source_find")

    rdTarget!.setCallback(rdTarget!.ON_EDIT_MODIFY,"check_files")
    rdBtnTarget!.setCallback(rdBtnTarget!.ON_BUTTON_PUSH,"target_find")

    rdBtnScan!.setCallback(rdBtnScan!.ON_BUTTON_PUSH,"func_scan")
    rdBtnProcess!.setCallback(rdBtnProcess!.ON_BUTTON_PUSH,"func_process")
    rdBtnExit!.setCallback(rdBtnExit!.ON_BUTTON_PUSH,"exit_prog")

    rdGrdFiles!.setCallback(rdGrdFiles!.ON_GRID_KEY_PRESS,"grid_keypress")
    rdGrdFiles!.setCallback(rdGrdFiles!.ON_GRID_MOUSE_UP,"grid_select")
    rdGrdHeader!.setCallback(rdGrdHeader!.ON_GRID_DOUBLE_CLICK,"grid_toggle")

    BBjAPI().getMDI().registerMDIClosingCallback("exit_prog")

    rdSysGUI!.flushEvents()

    process_events,err=*same

grid_keypress:rem --- Check for Specific Pressed Keys

    rd_gui_event$=rdSysGUI!.getLastEventString()
    rd_notify_base$=notice(rd_gui_dev,rd_gui_event.x%)
    dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
    rd_notice$=rd_notify_base$

    switch rd_notice.wparam
        case 32;rem Space
            gosub switch_value
        break
        case 27;rem Escape
            goto exit_prog
        break
        case 16718;rem Alt+F4
            goto exit_prog
        break
    swend

    return

grid_toggle:rem --- Grid Toggle All Selections

    rdSysGUI!.setRepaintEnabled(0)

    if rdGrdFiles!.getNumRows() then
        for rd_curr_row=0 to rdGrdFiles!.getNumRows()-1
            if rdGrdFiles!.getCellStyle(rd_curr_row,0)=rdGrdFiles!.GRID_STYLE_INPUTE then continue
            if rdGrdFiles!.getCellState(rd_curr_row,0)=0 then
                rdGrdFiles!.setCellState(rd_curr_row,0,1)
                rd_selected_recs=rd_selected_recs+1
            else
                rdGrdFiles!.setCellState(rd_curr_row,0,0)
                rd_selected_recs=rd_selected_recs-1
            endif
        next rd_curr_row
    endif

    rd_proc_status[3]=sgn(rd_selected_recs)

    gosub check_files

    rdSysGUI!.setRepaintEnabled(1)

    return

grid_select:rem --- Grid Cell Selected

    rd_gui_event$=rdSysGUI!.getLastEventString()
    rd_notify_base$=notice(rd_gui_dev,rd_gui_event.x%)
    dim rd_notice$:noticetpl(rd_notify_base.objtype%,rd_gui_event.flags%)
    rd_notice$=rd_notify_base$

    if rd_notice.col=0 then gosub switch_value

    return

switch_value:rem --- Switch Check Values

    rdSysGUI!.setRepaintEnabled(0)

    rdTempRows!=rdGrdFiles!.getSelectedRows()
    if rdTempRows!.size() then
        for rd_curr_row=1 to rdTempRows!.size()
            if rdGrdFiles!.getCellStyle(rdTempRows!.getItem(rd_curr_row-1),0)=rdGrdFiles!.GRID_STYLE_INPUTE then continue
            if rdGrdFiles!.getCellState(rdTempRows!.getItem(rd_curr_row-1),0)=0 then
                rdGrdFiles!.setCellState(rdTempRows!.getItem(rd_curr_row-1),0,1)
                rd_selected_recs=rd_selected_recs+1
            else
                rdGrdFiles!.setCellState(num(rdTempRows!.getItem(rd_curr_row-1)),0,0)
                rd_selected_recs=rd_selected_recs-1
            endif
        next rd_curr_row
    endif

    rd_proc_status[3]=sgn(rd_selected_recs)

    gosub check_files

    rdSysGUI!.setRepaintEnabled(1)

    return

source_find:rem --- Call Open Directory Dialog

    rd_temp_source$=rdSource!.getText()
    rd_source_dir$=fileopen("Find Source Directory",rd_temp_source$,"","","",1)
    if pos(rd_source_dir$="::BAD:: ::CANCEL::")=0 then
        rdSource!.setText(rd_source_dir$)
        gosub check_files
    endif

    return

target_find:rem --- Call Open Directory Dialog

    rd_temp_target$=rdTarget!.getText()
    rd_target_dir$=fileopen("Find Target Directory",rd_temp_target$,"","","",1)
    if pos(rd_target_dir$="::BAD:: ::CANCEL::")=0 then
        rdTarget!.setText(rd_target_dir$)
        gosub check_files
    endif

    return

check_files:rem --- Check Status of Files

    rd_temp_chan=unt
    rdTempColor!=rdErrorBackColor!
    rd_proc_status[1]=0
    rd_temp_dir$=rdSource!.getText()
    if rd_temp_dir$<>"" then
        if pos(rd_temp_dir$(len(rd_temp_dir$),1)="\/")=0 then
            rd_temp_dir$=rd_temp_dir$+"/"
        endif
        open(rd_temp_chan,err=*endif)rd_temp_dir$
        close(rd_temp_chan)
        version=num(rdVectVersionCode!.get(rdVersion!.getSelectedIndex()))
        if version=6 cvs_check=4 else cvs_check=0
        open(rd_temp_chan,err=*endif)rd_temp_dir$+cvs("ddm-03",cvs_check)
        close(rd_temp_chan)
        rdTempColor!=rdGoodBackColor!
        rd_proc_status[1]=1
    endif
    rdSource!.setBackColor(rdTempColor!)

    rd_temp_chan=unt
    rdTempColor!=rdErrorBackColor!
    rd_proc_status[2]=0
    rd_temp_dir$=rdTarget!.getText()
    if rd_temp_dir$<>"" then
        if pos(rd_temp_dir$(len(rd_temp_dir$),1)="\/")=0 then
            rd_temp_dir$=rd_temp_dir$+"/"
        endif
        open(rd_temp_chan,err=*endif)rd_temp_dir$
        close(rd_temp_chan)
        rdTempColor!=rdGoodBackColor!
        rd_proc_status[2]=1
    endif
    rdTarget!.setBackColor(rdTempColor!)

    rdBtnScan!.setEnabled(rd_proc_status[1]=1)
    rdBtnProcess!.setEnabled(rdVersion!.getSelectedIndex()>=0 and rd_proc_status[1] and rd_proc_status[2] and rd_proc_status[3])

    return

func_scan:rem --- Scan Source Directory

    rdWindow!.setCursor(3)

    rd_source_dir$=rdSource!.getText()
    if pos(rd_source_dir$(len(rd_source_dir$),1)="\/")=0 then
        rd_source_dir$=rd_source_dir$+"/"
    endif

    if rd_ddm03 then
        close(rd_ddm03)
    endif
    rd_ddm03=unt
    if num(rdVectVersionCode!.get(rdVersion!.getSelectedIndex()))=6
        open(rd_ddm03)rd_source_dir$+"DDM-03"
    else
        open(rd_ddm03)rd_source_dir$+"ddm-03"
    endif

    rd_source_dir=unt
    open(rd_source_dir)rd_source_dir$

    rd_meter_total_recs=0
    rd_meter_proc_recs=0
    rd_meter_data$="Reading source directory. . ."
    rd_meter_action$="WIN"
    gosub disp_meter

    rdGridVect!=rdSysGUI!.makeVector()
    rd_recs_found=0

    rd_type_str$=""
    rdTypeVect!=rdSysGUI!.makeVector()

    while 1
        readrecord(rd_source_dir,end=*break)rd_dir_file$
        if pos("."=rd_dir_file$)=1 then continue
        if pos("_"=rd_dir_file$)=1 then continue
        if pos("DD"=cvs(rd_dir_file$,4))=1 then continue
        if pos("W-"=cvs(rd_dir_file$,4))=1 then continue
        if pos("SH"=cvs(rd_dir_file$,4))=1 then continue
        if pos("Z"=cvs(rd_dir_file$,4))=1 then continue

        rd_recid_str$=""

        read(rd_ddm03,key=rd_dir_file$,dom=*next,err=*continue)
        while 1
            rd_ddm03_key$=key(rd_ddm03,end=*break)
            if pos(rd_dir_file$=rd_ddm03_key$)<>1 then break
            read(rd_ddm03)rd_ddm03_00$,rd_ddm03_01$
            rdGridVect!.addItem("")
            if rd_ddm03_key$(7,1)="A" then
                rdGridVect!.addItem(rd_ddm03_00$(1,6))
            else
                rdGridVect!.addItem(rd_indent$+rd_ddm03_00$(1,6))
            endif
            rdGridVect!.addItem(rd_ddm03_00$(7,1))
            rdGridVect!.addItem(rd_ddm03_01$(1,30))
            rd_recs_found=rd_recs_found+1
            if rd_ddm03_key$(7,1)<>"A" then
                if rd_recid_str$="" then
                    rd_recid_str$=rd_recid_str$+rd_ddm03_key$(1,6)+"A:"+str(rd_recs_found-1:"0000")
                    rdGridVect!.insertItem(rdGridVect!.size()-8,"")
                    rdGridVect!.insertItem(rdGridVect!.size()-8,rd_ddm03_00$(1,6))
                    rdGridVect!.insertItem(rdGridVect!.size()-8,"")
                    rdGridVect!.insertItem(rdGridVect!.size()-8,"Multiple Record Types")
                    rdGridVect!.setItem(rdGridVect!.size()-7,rd_indent$+rd_ddm03_00$(1,6))
                    rd_recs_found=rd_recs_found+1
                endif
                rd_recid_str$=rd_recid_str$+rd_ddm03_key$(1,7)+":"+str(rd_recs_found:"0000")
            endif
        wend
        if rd_recid_str$<>"" then
            rd_type_str$=rd_type_str$+rd_recid_str$(1,6)
            rdTypeVect!.addItem(rd_recid_str$)
        endif
    wend

    rdSysGUI!.setRepaintEnabled(0)
    rdGrdFiles!.setNumRows(0)
    rdGrdFiles!.setNumRows(rd_recs_found)
    rdGrdFiles!.setCellText(0,0,rdGridVect!)

    for rd_curr_row=1 to rd_recs_found
        if pos(rd_indent$=rdGrdFiles!.getCellText(rd_curr_row-1,1))=1 then
            rdGrdFiles!.setCellStyle(rd_curr_row-1,0,rdGrdFiles!.GRID_STYLE_INPUTE)
            rdGrdFiles!.setRowForeColor(rd_curr_row-1,rdTypeColor!)
        endif
    next rd_curr_row

    rdSysGUI!.setRepaintEnabled(1)

    rdGrdFiles!.deselectAllCells()
    rdGridVect!.clear()

    rd_meter_data$=""
    rd_meter_action$="END"
    gosub disp_meter

    rdGrdFiles!.focus()
    rdWindow!.setCursor(0)

    gosub check_files

    return

func_process:rem --- Import Selected Definitions

    if msgbox("Port the selected files?",4+32,"Barista Administrator")<>6 then
        return
    endif

    rdVectPort!=bbjAPI().makeVector()

    for rd_curr_row=1 to rdGrdFiles!.getNumRows()
        if rdGrdFiles!.getCellState(rd_curr_row-1,0)=1 then
            rdVectPort!.addItem(rdGrdFiles!.getCellText(rd_curr_row-1,1))
        endif
    next rd_curr_row

    source_version = num(rdVectVersionCode!.get(rdVersion!.getSelectedIndex()))
    version_cvs = iff(source_version=6,4,8)
    source_folder$ = rdSource!.getText()
    destin_folder$ = rdTarget!.getText()

    dictfile$=stbl("+DIR_BRD")
    dictpgm$=stbl("+DIR_SYP")
    pgmdir$="C:\DataPort\"
    filedir$=stbl("+DATAPORT_FILES")
    logdir$=stbl("+DATAPORT_LOGS")

    mkdir logdir$,err=*next

    logfile$=logdir$+"DataPort_"+DATE(0:"%Mz%Dz%Yz")+"_"+DATE(0:"%Hz%mz")+".txt"
    erase logfile$,err=create_logfile
    create_logfile:
    string logfile$
    log_dev=unt
    open (log_dev)logfile$
    print (log_dev)"DataPort Start Time: "+DATE(0:"%Mz/%Dz/%Y %hz:%mz:%sz")+" "+$0a$

    print (log_dev)" Porting Addon "+str(source_version)+" data files from folder "+source_folder$+" to "+destin_folder$+$0a$

rem run <dataport_program>

    open (999)"DataPort_main.bbj"
    DataPortMain$ = fid(999)(9)
    close (999)

rem trace$="/temp/DataPort.txt"
rem erase trace$,err=*next
rem string trace$
rem open (999)trace$
rem lock (999)
rem settrace (999)

    run DataPortMain$

    return

disp_msg:rem --- Display Message Dialog

    call rd_dir_syp$+"bam_message.bbj",
:        rd_gui_dev,
:        rd_msg_title$,
:        rd_msg_text$,
:        rd_msg_defs$,
:        rd_msg_opt$

    return

open_tables:rem -----<Open Tables

    call rd_dir_syp$+"bac_open_tables.bbj",
:        rd_open_beg,
:        rd_open_end,
:        rd_open_tables$[all],
:        rd_open_opts$[all],
:        rd_open_chans$[all],
:        rd_open_tpls$[all],
:        rd_table_chans$[all],
:        rd_open_batch,
:        rd_open_status$

    if rd_open_status$<>"" then
        rd_msg_id$="ENTRY_OPEN_ERROR"
        dim rd_msg_tokens$[1]
            rd_msg_tokens$[1]=rd_open_status$
        gosub disp_message
        goto exit_prog
    endif

    return

disp_message:rem --- Display Message Dialog

    call rd_dir_syp$+"bac_message.bbj",
:        rd_msg_id$,
:        rd_msg_tokens$[all],
:        rd_msg_opt$,
:        rd_table_chans$[all]

    return

disp_meter:rem --- Display Progress Meter

    call rd_dir_syp$+"bam_prog_bar.bbj",
:        rdSysGUI!,
:        rdWindow!,
:        rdMeterWin!,
:        rd_meter_title$,
:        rd_meter_total_recs,
:        rd_meter_proc_recs,
:        rd_meter_data$,
:        rd_meter_action$

    return

disp_win:rem --- Display Window

    dim rd_ctl_misc$[20]

    rd_form_id$=rd_dir_sys$+"adx_data_port.arc"

    call rd_dir_syp$+"bam_controls.bbj",
:        rd_gui_dev,
:        rdSysGUI!,
:        rd_form_id$,
:        rd_win_coord[all],
:        rdWindow!,
:        "DISPLAY",
:        rd_open_chan$[all],
:        rd_ctl_misc$[all]

    rdWindow!.setIcon(rd_dir_img$+"basis_logo_32.png")
    rd_meter_title$=rdWindow!.getTitle()

    rdVersion!=rdWindow!.getControl(3000)
    rdVersion!.insertItems(0,rdVectVersion!)
    rdVersion!.selectIndex(0)

    rdSource!=rdWindow!.getControl(3010)
    rdGoodBackColor!=rdSource!.getBackColor()
    rdSource!.setBackColor(rdErrorBackColor!)
    rdBtnSource!=rdWindow!.getControl(3011)
    rdTarget!=rdWindow!.getControl(3020)
    rdTarget!.setBackColor(rdErrorBackColor!)
    rdBtnTarget!=rdWindow!.getControl(3021)

    rdGrdFiles!=rdWindow!.getControl(5000)
    rdGrdHeader!=rdGrdFiles!.getColumnHeader()

    rdGrpDirs!=rdWindow!.getControl(10000)
    rdBtnScan!=rdWindow!.getControl(4)
    rdBtnProcess!=rdWindow!.getControl(3)
    rdBtnProcess!.setEnabled(0)
    rdBtnExit!=rdWindow!.getControl(2)

    rd_win_disp$="YES"

    return

def_grids:rem --- Define Grid

    rd_num_file_rows=0
    rd_def_file_cols=4
    dim rd_attr_file_col$[rd_def_file_cols,len(rd_attr_def_col$[0,0])/5]

    rd_attr_file_col$[1,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)]="PORT"
    rd_attr_file_col$[1,fnstr_pos("LABS",rd_attr_def_col$[0,0],5)]=""
    rd_attr_file_col$[1,fnstr_pos("CTLW",rd_attr_def_col$[0,0],5)]=str(rdGrdFiles!.getColumnWidth(0))
    rd_attr_file_col$[1,fnstr_pos("MAXL",rd_attr_def_col$[0,0],5)]="1"
    rd_attr_file_col$[1,fnstr_pos("CTYP",rd_attr_def_col$[0,0],5)]="C"

    rd_attr_file_col$[2,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)]="FILE_ID"
    rd_attr_file_col$[2,fnstr_pos("CTLW",rd_attr_def_col$[0,0],5)]=str(rdGrdFiles!.getColumnWidth(1))

    rd_attr_file_col$[3,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)]="REC_ID"
    rd_attr_file_col$[3,fnstr_pos("CTLW",rd_attr_def_col$[0,0],5)]=str(rdGrdFiles!.getColumnWidth(2))

    rd_attr_file_col$[4,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)]="DESC"
    rd_attr_file_col$[4,fnstr_pos("CTLW",rd_attr_def_col$[0,0],5)]=str(rdGrdFiles!.getColumnWidth(3))

    for rd_curr_attr=1 to rd_def_file_cols
        rd_attr_file_col$[0,1]=rd_attr_file_col$[0,1]+pad("FILES."+rd_attr_file_col$[rd_curr_attr,fnstr_pos("DVAR",rd_attr_def_col$[0,0],5)],40)
    next rd_curr_attr
    rd_attr_disp_col$=rd_attr_file_col$[0,1]

    call rd_dir_syp$+"bam_grid_init.bbj",rd_gui_dev,rdGrdFiles!,"COLH-MULTI-LINES-LIGHT-CHECKS",rd_num_file_rows,rd_attr_def_col$[all],rd_attr_disp_col$,rd_attr_file_col$[all]
    rdGrdFiles!.setFitToGrid(rdGrdFiles!.AUTO_RESIZE_LAST_COLUMN)

    return

resize_win:rem --- Resize Window Contents

    rdGrpDirs!.setSize(rdWindow!.getWidth()-100,rdGrpDirs!.getHeight())
    rdSource!.setSize(rdWindow!.getWidth()-255,rdSource!.getHeight())
    rdBtnSource!.setLocation(rdWindow!.getWidth()-135,rdSource!.getY())
    rdTarget!.setSize(rdWindow!.getWidth()-255,rdTarget!.getHeight())
    rdBtnTarget!.setLocation(rdWindow!.getWidth()-135,rdTarget!.getY())

    rdBtnScan!.setLocation(rdWindow!.getWidth()-90,rdBtnScan!.getY())
    rdBtnProcess!.setLocation(rdWindow!.getWidth()-90,rdBtnProcess!.getY())
    rdBtnExit!.setLocation(rdWindow!.getWidth()-90,rdBtnExit!.getY())

    rdGrdFiles!.setSize(rdWindow!.getWidth()-(rdGrdFiles!.getX()*2-1),rdWindow!.getHeight()-(rdGrdFiles!.getY()+3))

    return

get_win_settings:rem --- Get Window Settings

    rd_save_win_desc$=pad("WIN_[DATA_PORT]",20)

    call rd_dir_syp$+"bac_winsize.bbj",rd_save_win_desc$,"W","",rdWindow!,"READ",rd_win_coord[all]

    return

save_win_settings:rem --- Save Window Settings

    call rd_dir_syp$+"bac_winsize.bbj",rd_save_win_desc$,"W","",rdWindow!,"SAVE",rd_win_coord[all]

    return

error_proc:rem --- Error Processing Routine

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) then rd_err_text$=pgm(tcb(5),err=*next)

    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$

    if pos("EXIT"=rd_err_act$) then goto exit_prog
    if pos("ESCAPE"=rd_err_act$) then seterr 0;setesc 0
    if pos("RETRY"=rd_err_act$) then retry

exit_prog:rem --- Exit Program

    if rd_win_disp$="YES" then gosub save_win_settings

    run rd_dir_syp$+"bas_process_end.bbj"