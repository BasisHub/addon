rem after write
rem This trigger assumes that it is being used in a non-modified Barista and Addon
rem Version 6 environment. If there have been any modifications to these systems,
rem be sure to thoroughly examine this trigger and test changes.

	setopts $080872202c2e$

	seterr trigger_error

rem ---  Get the Trigger object from the BBj File System

    td! = BBjAPI().getFileSystem().getTriggerData()

	myns!=BBjAPI().getGlobalNamespace()
	wkdir$ = myns!.getValue("work_dir")
	prdir$ = myns!.getValue("prdata")

	ky$=td!.getKey()

	if len(ky$)=6
		if ky$(3,4)="PR00"
rem --- Template for the PRS-01 record being caught

			intemp$="firm_id:c(2),pr:c(2),seq_00:c(2*=10),empl_input:c(12*=10),"
			intemp$=intemp$+"empl_nbr_len:c(2),max_empl_nbr:c(2*=10),reg_pay_code:c(2),max_totals:c(2),"
			intemp$=intemp$+"zip_length:c(1),multi_titles:c(1),precision:c(1),dept_size:c(1),union_hist:c(1),"
			intemp$=intemp$+"label_across:c(2),label_length:c(2),label_width:c(2),br_installed:c(1),"
			intemp$=intemp$+"tax_acc_flag:c(1),reserved:c(3*=10),current_per:c(2),current_year:c(2*=10),"
			intemp$=intemp$+"empl_output:c(12*=10),amount_mask:c(15*=10),unit_mask:c(12*=10),rate_mask:c(12*=10)"
			dim inRec$:intemp$
			inRec$=td!.getWriteBuffer()
			inRec$=field(inRec$)

rem --- Open Barista Payroll Master File

			prs01_dev=unt
			open (prs01_dev,err=trigger_error)prdir$+"prs_params"
			tpl_dev=unt
			open (tpl_dev,err=trigger_error) wkdir$+"sys/data/ddm_table_tpls.dat"
			read (tpl_dev,key=pad("PRS_PARAMS",16),dom=trigger_error) *,*,prs_params$
			dim prs_params$:prs_params$

rem --- Assign the data

			prs_params.firm_id$ = inRec.firm_id$
			prs_params.pr$ = "PR"
			prs_params.sequence_00$ = "00"
			prs_params.empl_input$ = inRec.empl_input$
			prs_params.empl_no_len$ = ""
			prs_params.max_empl_no$ = ""
			prs_params.reg_pay_code$ = inRec.reg_pay_code$
			prs_params.max_totals$ = inRec.max_totals$
			prs_params.zip_length$ = inRec.zip_length$
			prs_params.multi_titles$ = inRec.multi_titles$
			prs_params.precision$ = inRec.precision$
			prs_params.dept_size$ = inRec.dept_size$
			prs_params.union_hist$ = inRec.union_hist$
			prs_params.label_across$ = inRec.label_across$
			prs_params.label_length$ = inRec.label_length$
			prs_params.label_width$ = inRec.label_width$
			prs_params.br_installed$ = inRec.br_installed$
			prs_params.tax_acc_flag$ = inRec.tax_acc_flag$
			prs_params.current_per$ = inRec.current_per$
			prs_params.current_year$ = fnyear$(inRec.current_year$)
			prs_params.empl_output$ = inRec.empl_output$
			prs_params.amount_mask$ = inRec.amount_mask$
			prs_params.unit_mask$ = inRec.unit_mask$
			prs_params.rate_mask$ = inRec.rate_mask$

rem --- write the data

			prs_params$=field(prs_params$)
			write record(prs01_dev)prs_params$
			close(prs01_dev)

		endif
		if ky$(3,4)="PR01"
rem --- Template for the PRS-01 record being caught

			intemp$="firm_id:c(2),pr:c(2),seq_01:c(2*=10),pay_end_date:c(3),"
			intemp$=intemp$+"deduct_per:c(1),auto_update:c(1),pay_periods:c(10),check_date:c(3),"
			intemp$=intemp$+"accrual_days:c(2),negative_chk:c(1),reserved:c(3*=10)"
			dim inRec$:intemp$
			inRec$=td!.getWriteBuffer()
			inRec$=field(inRec$)

rem --- Open Barista Payroll Master File

			prs01_dev=unt
			open (prs01_dev,err=trigger_error)prdir$+"prs_period"
			tpl_dev=unt
			open (tpl_dev,err=trigger_error) wkdir$+"sys/data/ddm_table_tpls.dat"
			read (tpl_dev,key=pad("PRS_PERIOD",16),dom=trigger_error) *,*,prs_params$
			dim prs_params$:prs_params$

rem --- Assign the data

			prs_params.firm_id$ = inRec.firm_id$
			prs_params.pr$ = "PR"
			prs_params.sequence_01$ = "01"
			prs_params.deduct_per$ = inRec.deduct_per$
			prs_params.auto_update$ = inRec.auto_update$
			prs_params.pay_periods$ = inRec.pay_periods$
			prs_params.accrual_days$ = inRec.accrual_days$
			prs_params.negative_chk$ = inRec.negative_chk$
			prs_params.pay_end_date$ = fndate$(inRec.pay_end_date$)
			prs_params.check_date$ = fndate$(inRec.check_date$)

rem --- write the data

			prs_params$=field(prs_params$)
			write record(prs01_dev)prs_params$
			close(prs01_dev)

		endif
	endif
	
	goto std_exit

trigger_error:

    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	
rem --- Functions

	rem --- fnyear$ returns a 4 character year from a 2 character semi-packed date
	def fnyear$(q1$)
		if q1$(1,1)>="A"
			century$="20"
		else
			century$="19"
		endif
		q3$=" 01234567890123456789"
		q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
		q1$=century$+q1$
		return q1$
	fnend

	rem --- fndate$ returns an 8 character year from a 3 character packed date
	def fndate$(q1$)
		if len(cvs(q1$,3))=3
			q2$=str(asc(q1$)-32+1900)+str(asc(q1$(2))-32:"00")+str(mod(asc(q1$(3))-32,100):"00")
		else
			q2$=pad("",8)
		endif
		while 1
			if date(jul(num(q2$(1,4)),num(q2$(5,2)),num(q2$(7,2)),err=*next),err=*next)>"" break
			q2$=fill(8)
			break
		wend
		return q2$
	fnend

std_exit: